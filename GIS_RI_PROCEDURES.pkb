CREATE OR REPLACE PACKAGE BODY TQ_GIS.gis_ri_procedures
AS
    PROCEDURE raise_error (v_msg IN VARCHAR2)
    IS
    BEGIN
        IF SQLCODE != 0
        THEN
            raise_application_error (-20015,
                                     v_msg || ' - ' || SQLERRM (SQLCODE));
        ELSE
            raise_application_error (-20015, v_msg);
        END IF;
    END raise_error;

    PROCEDURE del_zero_cessions (v_tran_no IN NUMBER, v_ipu_code IN NUMBER)
    IS
        npartcount   NUMBER;
    BEGIN
        DELETE gin_participations
         WHERE     part_ggt_tran_no = v_tran_no
               AND part_ipu_code = v_ipu_code
               AND (part_si_amt_tcur IS NULL OR part_si_amt_tcur = 0);

        --commit;
        ------------------------POINT OF TIMESTAMP ERROR------------------
        BEGIN
            DELETE gin_policy_rein_risk_details
             WHERE     ptotr_ggt_tran_no = v_tran_no
                   AND ptotr_ipu_code = v_ipu_code
                   AND (ptotr_trt_si_pcur IS NULL OR ptotr_trt_si_pcur = 0)
                   AND PTOTR_RATE = 0;
        --commit;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error at deleting risk reinsurance level..');
        END;
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_error ('Error clearing old reinsurance details..');
    END;

    PROCEDURE fix_rounding_errors (v_prrd_code IN NUMBER)
    IS
        CURSOR risks IS
            SELECT PRRD_CODE,
                   PRRD_AVAIL_FULC_BAL,
                   ipu_reinsure_amt,
                   PRRD_COMP_RETENTION,
                   trt_si,
                   FC_AMOUNT,
                     NVL (PRRD_COMP_RETENTION, 0)
                   + NVL (trt_si, 0)
                   + NVL (FC_AMOUNT, 0)          TOT_SI,
                     NVL (ipu_reinsure_amt, 0)
                   - (  NVL (PRRD_COMP_RETENTION, 0)
                      + NVL (trt_si, 0)
                      + NVL (FC_AMOUNT, 0))      SI_DIFF,
                   PRRD_RI_PREM,
                   PRRD_NET_PREM,
                   TRT_AMT,
                   FC_PREM_AMT,
                     NVL (PRRD_NET_PREM, 0)
                   + NVL (TRT_AMT, 0)
                   + NVL (FC_PREM_AMT, 0)        TOT_PREM,
                     NVL (PRRD_RI_PREM, 0)
                   - (  NVL (PRRD_NET_PREM, 0)
                      + NVL (TRT_AMT, 0)
                      + NVL (FC_PREM_AMT, 0))    PREM_DIFF,
                   PRRD_COMP_NET_RATE,
                   TRT_rate,
                   FC_rate,
                     NVL (PRRD_COMP_NET_RATE, 0)
                   + NVL (TRT_rate, 0)
                   + NVL (FC_rate, 0)            TOT_rate
              FROM GIN_INSURED_PROPERTY_UNDS,
                   GIN_POLICY_RISK_RI_DTLS,
                   (  SELECT PTOTR_PRRD_CODE,
                             SUM (NVL (PTOTR_TRT_PREM_PCUR, 0))     TRT_AMT,
                             SUM (NVL (PTOTR_TRT_SI_PCUR, 0))       trt_si,
                             SUM (NVL (PTOTR_CESSION_PCT, 0))       trt_RATE
                        FROM gin_policy_rein_risk_details
                    GROUP BY PTOTR_PRRD_CODE),
                   (  SELECT FC_PRRD_CODE,
                             SUM (NVL (FC_PREM_AMT, 0))     FC_PREM_AMT,
                             SUM (NVL (FC_AMOUNT, 0))       FC_AMOUNT,
                             SUM (NVL (FC_RATE, 0))         FC_RATE
                        FROM GIN_FACRE_CESSIONS
                    GROUP BY FC_PRRD_CODE)
             WHERE     IPU_CODE = PRRD_IPU_CODE
                   AND PRRD_CODE = PTOTR_PRRD_CODE(+)
                   AND PRRD_CODE = FC_PRRD_CODE(+)
                   AND NVL (ipu_reinsure_amt, 0) != 0
                   AND PRRD_CODE = v_prrd_code;
    BEGIN
        DBMS_OUTPUT.put_line ('fix_rounding_errors 0=');

        FOR r IN risks
        LOOP
            IF     ROUND (NVL (R.PRRD_AVAIL_FULC_BAL, 0)) = ROUND (R.SI_DIFF)
               AND (   (R.TOT_rate = 100 AND R.trt_si = 0 AND R.FC_AMOUNT = 0)
                    OR (    R.TOT_rate = 100
                        AND ABS (R.SI_DIFF / NVL (R.ipu_reinsure_amt, 0)) <
                            0.0001))
            THEN
                UPDATE GIN_POLICY_RISK_RI_DTLS
                   SET PRRD_COMP_RETENTION =
                           NVL (PRRD_COMP_RETENTION, 0) + R.SI_DIFF,
                       PRRD_AVAIL_FULC_BAL = 0
                 WHERE PRRD_CODE = R.PRRD_CODE;

                DBMS_OUTPUT.put_line ('fix_rounding_errors 0=');
            ELSIF     R.TOT_rate = 100
                  AND ABS (R.SI_DIFF / NVL (R.ipu_reinsure_amt, 0)) < 0.0001
                  AND NVL (R.PRRD_AVAIL_FULC_BAL, 0) = 0
            THEN
                UPDATE GIN_POLICY_RISK_RI_DTLS
                   SET PRRD_COMP_RETENTION =
                           NVL (PRRD_COMP_RETENTION, 0) + R.SI_DIFF
                 WHERE PRRD_CODE = R.PRRD_CODE;
            END IF;
        END LOOP;
    END;

    PROCEDURE del_cessions (v_batch_no   IN NUMBER,
                            v_ipu_code   IN NUMBER DEFAULT NULL)
    IS
        v_tran_no   NUMBER;
    BEGIN
        IF gin_uw_author_proc.check_prem_compute (v_batch_no) = 'N'
        THEN
            raise_error (
                'Please compute premium on policy. Changes have been made on the policy..');
        END IF;

        BEGIN
            SELECT ggt_trans_no
              INTO v_tran_no
              FROM gin_gis_transactions
             WHERE ggt_uw_clm_tran = 'U' AND ggt_pol_batch_no = v_batch_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error retrieving transaction number..');
        END;

        BEGIN
            gis_ri_procedures.del_all_cessions (v_tran_no, v_ipu_code);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error Deleting Cessions');
        END;
    END;

    PROCEDURE check_treaty_participation (
        v_rei_code   IN gin_treaty_setups.rei_code%TYPE)
    IS
        v_rei_trt_sht_desc   gin_treaty_setups.rei_trs_sht_desc%TYPE;
        v_tot_pcts           NUMBER;

        CURSOR cur_treaties IS
            SELECT *
              FROM gin_treaty_setups
             WHERE     rei_code = v_rei_code
                   AND rei_trt_code IN (1001, 1003, 1004);
    BEGIN
        --  RAISE_ERROR('v_rei_code='||v_rei_code);
        BEGIN
              SELECT rei_trt_sht_desc, SUM (NVL (trpa_comp_rate, 0))
                INTO v_rei_trt_sht_desc, v_tot_pcts
                FROM gin_treaty_setups, gin_treaty_participants
               WHERE rei_code = trpa_rei_code(+) AND rei_code = v_rei_code
            GROUP BY rei_code, rei_trt_sht_desc;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_error ('Treaties not found when checking participants');
            WHEN OTHERS
            THEN
                raise_error ('Error when checking treaty participants');
        END;

        IF NVL (v_tot_pcts, 0) != 100
        THEN
            raise_error (
                   v_rei_trt_sht_desc
                || ' treaty participation does not add up to 100% '
                || v_tot_pcts
                || ' ; '
                || v_rei_code);
        END IF;

        FOR cur_treaties_rec IN cur_treaties
        LOOP
            IF NVL (cur_treaties_rec.rei_comm_rate, 0) <= 0
            THEN
                NULL;
            --raise_error (   'Please specify treaty commission for ' || cur_treaties_rec.rei_trt_sht_desc  );
            END IF;

            IF     NVL (cur_treaties_rec.rei_limit, 0) <= 0
               AND cur_treaties_rec.rei_trt_code = 1003
            THEN
                raise_error (
                       'Please specify treaty limit for '
                    || cur_treaties_rec.rei_trt_sht_desc);
            END IF;

            IF cur_treaties_rec.rei_cede_rate IS NULL
            THEN
                NULL;
            --raise_error (   'Please specify treaty cede rate  for '|| cur_treaties_rec.rei_trt_sht_desc   );
            END IF;

            IF cur_treaties_rec.rei_rate_type NOT IN ('P', 'L')
            THEN
                raise_error (
                       'Rate Type specified not recognized  for '
                    || cur_treaties_rec.rei_trt_sht_desc
                    || '. Must be Percentage or Lines');
            END IF;

            IF     NVL (cur_treaties_rec.rei_rate_type, 'P') = 'P'
               AND (cur_treaties_rec.rei_cede_rate NOT BETWEEN 0 AND 100)
            THEN
                raise_error (
                       'Cession Rate must be between 1 and 100 for percentage Rate Type specified not recognized  for '
                    || cur_treaties_rec.rei_trt_sht_desc
                    || '. Must be Percentage or Lines'
                    || cur_treaties_rec.rei_rate_type
                    || ' '
                    || v_rei_code);
            END IF;
        END LOOP;
    END;

    PROCEDURE check_xol_trty_participation (
        v_xols_code   IN gin_xol_treaty_setups.xols_code%TYPE)
    IS
        v_layer      gin_xol_treaty_setups.xols_layer%TYPE;
        v_tot_pcts   NUMBER;

        CURSOR cur_treaties IS
            SELECT *
              FROM gin_xol_treaty_setups
             WHERE xols_code = v_xols_code;
    BEGIN
        BEGIN
              SELECT xols_layer, SUM (NVL (xolp_rate, 0))
                INTO v_layer, v_tot_pcts
                FROM gin_xol_treaty_setups, gin_xol_participants
               WHERE xols_code = xolp_xols_code(+) AND xols_code = v_xols_code
            GROUP BY xols_layer;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_error ('Participants not defined on this treaty...');
            WHEN OTHERS
            THEN
                raise_error ('Error checking participants...');
        END;

        /*
              IF NVL (v_tot_pcts, 0) != 100
              THEN
                 raise_error
                        (   'Treaty participation does not add up to 100% for layer '
                         || v_layer||' '||v_xols_code
                        );
              END IF;
        */
        FOR cur_treaties_rec IN cur_treaties
        LOOP
            IF     NVL (cur_treaties_rec.xols_layer, 0) = 1
               AND NVL (cur_treaties_rec.xols_deductible_limit, 0) = 0
            THEN
                raise_error (
                       'Please specify treaty deductible limit for '
                    || cur_treaties_rec.xols_layer);
            END IF;

            IF NVL (cur_treaties_rec.xols_max_claim_limit, 0) = 0
            THEN
                raise_error (
                       'Please specify treaty maximum claim limit for '
                    || cur_treaties_rec.xols_layer);
            END IF;
        END LOOP;
    END;

    PROCEDURE delete_grp_cessions (vtransno IN NUMBER)
    IS
        v_pol_batch_no   NUMBER;
    BEGIN
        BEGIN
            SELECT ggt_pol_batch_no
              INTO v_pol_batch_no
              FROM gin_gis_transactions
             WHERE ggt_trans_no = vtransno;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        DELETE gin_facre_cessions
         WHERE fc_ggt_tran_no = vtransno;

        DELETE gin_participations
         WHERE part_ggt_tran_no = vtransno;

        DELETE gin_pol_rein_pool_risk_details
         WHERE prprd_ggt_tran_no = vtransno;

        DELETE gin_policy_rein_risk_details
         WHERE ptotr_ggt_tran_no = vtransno;

        DELETE gin_policy_risk_ri_dtls
         WHERE prrd_tran_no = vtransno;

        DELETE gin_gis_transactions
         WHERE ggt_trans_no = vtransno;

        gis_utilities.close_tickets ('GR', vtransno);
    END;

    PROCEDURE del_all_cessions (v_tran_no IN NUMBER, v_ipu_code IN NUMBER)
    IS
        v_errmsg   VARCHAR2 (200);
    BEGIN
        --  raise_error(v_tran_no||'yy='||v_ipu_code);


        BEGIN
            DELETE gin_policy_risk_facre_reg
             WHERE     facrg_ipu_code = v_ipu_code
                   AND facrg_ggt_tran_no = v_tran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error :- Unable to clear facre cessions...');
        END;

        BEGIN
            DELETE gin_facre_cessions
             WHERE fc_ggt_tran_no = v_tran_no AND fc_ipu_code = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error :- Unable to clear facre cessions...');
        END;

        --RAISE_ERROR('EEE=='||v_tran_no);
        BEGIN
            UPDATE gin_policy_risk_ri_dtls
               SET prrd_gross_comp_retention = 0,
                   prrd_comp_net_rate = 0,
                   prrd_comp_retention = 0,
                   prrd_avail_fulc_bal = 0,
                   prrd_facre_amount = 0,
                   prrd_facre_rate = 0,
                   prrd_excess_pct = 0,
                   prrd_facoblig_excess = 0,
                   prrd_facoblig_user_excess = 0,
                   prrd_prem_diff = 0,
                   prrd_net_prem = 0
             WHERE prrd_tran_no = v_tran_no AND prrd_ipu_code = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Unable to clear risk excess / facre amounts...');
        END;

        BEGIN
            UPDATE gin_insured_property_unds
               SET ipu_override_ri_retention = NULL,
                   ipu_overrideride_ret_type = NULL
             WHERE ipu_code = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Unable to clear risk excess / facre amounts...');
        END;


        BEGIN
            DELETE gin_policy_treaty_part_reg
             WHERE trtpg_part_code IN
                       (SELECT part_code
                          FROM gin_participations
                         WHERE     part_ggt_tran_no = v_tran_no
                               AND part_ipu_code = v_ipu_code);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Unable to clear participation cessions...');
        END;

        BEGIN
            DELETE gin_participations
             WHERE     part_ggt_tran_no = v_tran_no
                   AND part_ipu_code = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Unable to clear participation cessions...');
        END;

        BEGIN
            DELETE GIN_POLICY_RISK_TREATY_REG
             WHERE     TRTRG_GGT_TRAN_NO = v_tran_no
                   AND TRTRG_IPU_CODE = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error :- Unable to clear treaty cessions...');
        END;

        BEGIN
            DELETE gin_policy_rein_risk_details
             WHERE     ptotr_ggt_tran_no = v_tran_no
                   AND ptotr_ipu_code = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error :- Unable to clear treaty cessions...');
        END;



        BEGIN
            DELETE gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_tran_no
                   AND prprd_ipu_code = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error :- Unable to clear pool cessions...');
        END;
    END;

    --   PROCEDURE del_all_cessions (v_tran_no IN NUMBER, v_ipu_code IN NUMBER)
    --   IS
    --      v_errmsg   VARCHAR2 (200);
    --   BEGIN
    -- --  raise_error(v_tran_no||'yy='||v_ipu_code);
    --      BEGIN
    --         DELETE      gin_facre_cessions
    --               WHERE fc_ggt_tran_no = v_tran_no AND fc_ipu_code = v_ipu_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error :- Unable to clear facre cessions...');
    --      END;
    --
    ----RAISE_ERROR('EEE=='||v_tran_no);
    --      BEGIN
    --         UPDATE gin_policy_risk_ri_dtls
    --            SET prrd_gross_comp_retention = 0,
    --                prrd_comp_net_rate = 0,
    --                prrd_comp_retention = 0,
    --                prrd_avail_fulc_bal = 0,
    --                prrd_facre_amount = 0,
    --                prrd_facre_rate = 0,
    --                prrd_excess_pct = 0,
    --                prrd_facoblig_excess = 0,
    --                prrd_facoblig_user_excess = 0,
    --                prrd_prem_diff = 0,
    --                prrd_net_prem = 0
    --          WHERE prrd_tran_no = v_tran_no AND prrd_ipu_code = v_ipu_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                   ('Error :- Unable to clear risk excess / facre amounts...');
    --      END;
    --
    --      BEGIN
    --         UPDATE gin_insured_property_unds
    --            SET ipu_override_ri_retention = NULL,
    --                ipu_overrideride_ret_type = NULL
    --          WHERE ipu_code = v_ipu_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                   ('Error :- Unable to clear risk excess / facre amounts...');
    --      END;
    --
    --      BEGIN
    --         DELETE      gin_participations
    --               WHERE part_ggt_tran_no = v_tran_no
    --                 AND part_ipu_code = v_ipu_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error :- Unable to clear participation cessions...');
    --      END;
    --
    --      BEGIN
    --         DELETE      gin_policy_rein_risk_details
    --               WHERE ptotr_ggt_tran_no = v_tran_no
    --                 AND ptotr_ipu_code = v_ipu_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error :- Unable to clear treaty cessions...');
    --      END;
    --
    --      BEGIN
    --         DELETE      gin_pol_rein_pool_risk_details
    --               WHERE prprd_ggt_tran_no = v_tran_no
    --                 AND prprd_ipu_code = v_ipu_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error :- Unable to clear pool cessions...');
    --      END;
    --   END;

    FUNCTION get_group_top_loc (v_batch_no        IN NUMBER,
                                v_pol_policy_no      VARCHAR2,
                                v_rel_code        IN NUMBER,
                                v_rc_code         IN NUMBER,
                                v_cover_from_dt      DATE)
        RETURN NUMBER
    IS
        v_grp_si   NUMBER := 0;
        v_si       NUMBER := 0;
        v_cur_si   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (ipu_reinsure_amt, 0) * pol_cur_rate)
              INTO v_si
              FROM gin_policies,
                   gin_policy_active_risks,
                   gin_insured_property_unds
             WHERE     pol_batch_no = polar_pol_batch_no
                   AND polar_ipu_code = ipu_code
                   AND pol_policy_no != v_pol_policy_no
                   AND ipu_relr_code = v_rel_code
                   AND NVL (ipu_rc_code, 0) = NVL (v_rc_code, 0)
                   AND ipu_eff_wet >= v_cover_from_dt
                   AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_si := 0;
            WHEN OTHERS
            THEN
                v_si := 0;
        END;

        BEGIN
            SELECT SUM (NVL (ipu_reinsure_amt, 0) * pol_cur_rate)
              INTO v_cur_si
              FROM gin_policies,
                   gin_policy_active_risks,
                   gin_insured_property_unds
             WHERE     pol_batch_no = polar_pol_batch_no
                   AND polar_ipu_code = ipu_code
                   AND ipu_relr_code = v_rel_code
                   AND NVL (ipu_rc_code, 0) = NVL (v_rc_code, 0)
                   AND ipu_eff_wet >= v_cover_from_dt
                   AND pol_batch_no = v_batch_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_cur_si := 0;
            WHEN OTHERS
            THEN
                v_cur_si := 0;
        END;

        v_grp_si := NVL (v_cur_si, 0) + NVL (v_si, 0);
        RETURN (v_grp_si);
    END;

    FUNCTION get_risk_ri_pool (v_prrd_code IN NUMBER)
        RETURN NUMBER
    IS
        v_pool_si   NUMBER;
    BEGIN
        BEGIN
            SELECT SUM (NVL (prprd_pool_si, 0))
              INTO v_pool_si
              FROM gin_pol_rein_pool_risk_details
             WHERE prprd_prrd_code = v_prrd_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_pool_si := 0;
        END;

        RETURN v_pool_si;
    END;

    FUNCTION get_ri_pool_rate (v_prrd_code IN NUMBER)
        RETURN NUMBER
    IS
        v_pool_rate   NUMBER;
    BEGIN
        BEGIN
            SELECT SUM (NVL (prprd_rein_pool_rate, 0))
              INTO v_pool_rate
              FROM gin_pol_rein_pool_risk_details
             WHERE prprd_prrd_code = v_prrd_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_pool_rate := 0;
        END;

        RETURN v_pool_rate;
    END;

    FUNCTION get_ri_pool_prem (v_prrd_code IN NUMBER)
        RETURN NUMBER
    IS
        v_pool_amt   NUMBER;
    BEGIN
        BEGIN
            SELECT SUM (NVL (prprd_rein_pool_amt, 0))
              INTO v_pool_amt
              FROM gin_pol_rein_pool_risk_details
             WHERE prprd_prrd_code = v_prrd_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_pool_amt := 0;
        END;

        RETURN v_pool_amt;
    END;

    PROCEDURE check_grp_uw_ri (v_tran_no NUMBER                            --,
                                               --v_batch_no NUMBER
                                               )
    IS
    BEGIN
        check_uw_ri (v_tran_no);
    -- WRITE ADDITIONAL CODE TO CHECK THE REFUND PART OF THE EDIT REINSURANCE
    END;

    --   PROCEDURE check_uw_ri (v_tran_no NUMBER                                 --,
    --                                          --v_batch_no NUMBER
    --   )
    --   IS
    --      v_risk_ri_si       NUMBER         := 0;
    --      v1                 NUMBER         := 0;
    --      v_err_msg          VARCHAR2 (500);
    --      v_cover_duration   NUMBER         := 0;
    --      v_remain_days      NUMBER         := 0;
    --      v_rein_cur_param   VARCHAR2 (1);
    --      v_reinsure_amt      NUMBER         := 0;
    --      v_exhange_rate  number;
    --      v_rnd    number;
    --      v_rnd_bcur    number;

    --      CURSOR cur_rec
    --      IS
    --         SELECT pol_cur_code,ipu_overrideride_ret_type, pol_batch_no, pol_policy_status,
    --                prrd_special_comp_retention, prrd_prem_diff,
    --                ipu_pol_policy_no, ipu_code, prrd_code, prrd_idx,
    --                ipu_endos_diff_amt, NVL (prrd_ri_prem, 0) prrd_ri_prem,
    --                ABS(DECODE (ipu_endos_diff_amt,
    --                        0, ipu_reinsure_amt,
    --                        (NVL(ipu_reinsure_amt,0) -NVL(get_risk_prev_si(prrd_code),0) --NVL (prrd_prev_ri_si, 0)
    --                        )
    --                       )) ipu_reinsure_amt,get_risk_comp_retention(ipu_id) prev_comp_retention,
    --                ipu_property_id, ipu_item_desc, prrd_net_prem,
    --                ipu_tot_endos_prem_dif, NVL (prrd_comp_net_rate, 0) own_pct,
    --                NVL (trts_pct, 0) trts_pct, NVL (facres_pct, 0) facres_pct,
    --                ROUND (  NVL (prrd_comp_net_rate, 0)
    --                       + NVL (trts_pct, 0)
    --                       + NVL (facres_pct, 0)
    --                       + NVL (pool_pct, 0)
    --                      ) tot_pct,
    --                NVL (trts_comm_amt, 0) trts_comm_amt,
    --                NVL (trts_eq_comm_amt, 0) trts_eq_comm_amt,
    --                NVL (trts_neteq_comm_amt, 0) trts_neteq_comm_amt,
    --                NVL (facres_comm_amt, 0) facres_comm_amt,
    --                NVL (facres_eq_comm_amt, 0) facres_eq_comm_amt,
    --                NVL (facres_neteq_comm_amt, 0) facres_neteq_comm_amt,
    --                NVL (prrd_net_prem, 0) /*- NVL (facres_excess, 0)*/ own_prem,
    --                NVL (trts_prem, 0) trts_prem,
    --                NVL (trts_eq_prem, 0) trts_eq_prem,
    --                NVL (trts_neteq_prem, 0) trts_neteq_prem,
    --                NVL (facres_prem, 0) + NVL (facres_excess, 0) facres_prem,
    --                NVL (facres_eq_prem, 0) facres_eq_prem,
    --                NVL (facres_neteq_prem, 0) facres_neteq_prem,
    --                  NVL (prrd_net_prem, 0)
    --                + NVL (trts_prem, 0)
    --                + NVL (facres_prem, 0)
    --                + NVL (facres_excess, 0)
    --                + NVL (pool_prem, 0) tot_ceded_prem,
    --                NVL (facres_excess, 0) fac_excess,
    --                NVL (prrd_comp_retention, 0) own_si, NVL (trts_si, 0)
    --                                                                     trts_si,
    --                NVL (facres_si, 0) facres_si,
    --                (NVL (prrd_comp_retention, 0)
    --                + NVL (prrd_special_comp_retention, 0)
    --                + NVL (facres_si, 0)
    --                + NVL (trts_si, 0)
    --                + NVL (pool_si, 0))-NVL(get_risk_prev_ri_si (ipu_code),0) tot_ceded_si,
    --                ggt_uw_clm_tran,
    --                                 -- (ipu_eff_wet - ggt_effective_date) remaining_days,
    --                (                 ipu_eff_wet - ipu_eff_wef) remaining_days,
    --                (ipu_eff_wet - ipu_eff_wef) cover_duration, ipu_gp,
    --                pol_cur_rate, pool_si, pool_prem, pool_pct
    --           FROM gin_policies,
    --                gin_insured_property_unds,
    --                gin_policy_risk_ri_dtls,
    --                gin_gis_transactions,            --,GIN_POLICY_INSURED_LIMITS,
    --                (SELECT   ptotr_prrd_code,
    --                          SUM (NVL (ptotr_cession_pct, 0)) trts_pct,
    --                          SUM (NVL (ptotr_trt_comm_pcur, 0)) trts_comm_amt,
    --                          SUM (NVL (ptotr_earthqke_comm, 0)) trts_eq_comm_amt,
    --                          SUM
    --                             (NVL (ptotr_net_less_eq_comm, 0)
    --                             ) trts_neteq_comm_amt,
    --                          SUM (NVL (ptotr_trt_prem_pcur, 0)) trts_prem,
    --                          SUM (NVL (ptotr_earthqke_prem, 0)) trts_eq_prem,
    --                          SUM (NVL (ptotr_net_less_eq_prem, 0)
    --                              ) trts_neteq_prem,
    --                          SUM (NVL (ptotr_trt_si_pcur, 0)) trts_si
    --                     FROM gin_policy_rein_risk_details
    --                    WHERE ptotr_ggt_tran_no = v_tran_no
    --                 GROUP BY ptotr_prrd_code),
    --                (SELECT   fc_prrd_code, SUM (NVL (fc_rate, 0)) facres_pct,
    --                          SUM (NVL (fc_comm_amt, 0)) facres_comm_amt,
    --                          SUM (NVL (fc_earthqke_comm, 0)) facres_eq_comm_amt,
    --                          SUM
    --                             (NVL (fc_net_less_eq_comm, 0)
    --                             ) facres_neteq_comm_amt,
    --                          SUM (NVL (fc_prem_amt, 0)) facres_prem,
    --                          SUM (NVL (fc_earthqke_prem, 0)) facres_eq_prem,
    --                          SUM (NVL (fc_net_less_eq_prem, 0))
    --                                                            facres_neteq_prem,
    --                          SUM (NVL (fc_amount, 0)) facres_si,
    --                          SUM (NVL (fc_prem_diff_amt, 0)) facres_excess
    --                     FROM gin_facre_cessions
    --                    WHERE fc_ggt_tran_no = v_tran_no
    --                 GROUP BY fc_prrd_code),
    --                (SELECT   prprd_prrd_code,
    --                          SUM (NVL (prprd_rein_pool_amt, 0)) pool_prem,
    --                          SUM (NVL (prprd_rein_pool_rate, 0)) pool_pct,
    --                          SUM (NVL (prprd_pool_si, 0)) pool_si,
    --                          SUM (NVL (prprd_prev_pool_rate, 0)) pool_prev_pct,
    --                          SUM (NVL (prprd_rein_pool_comm_amt, 0)
    --                              ) pool_comm_amt
    --                     FROM gin_pol_rein_pool_risk_details
    --                    WHERE prprd_ggt_tran_no = v_tran_no
    --                 GROUP BY prprd_prrd_code)
    --          WHERE pol_batch_no = ipu_pol_batch_no
    --            AND ipu_code = prrd_ipu_code
    --            --AND IPU_CODE = PIL_IPU_CODE
    --            AND prrd_code = ptotr_prrd_code(+)
    --            AND prrd_code = fc_prrd_code(+)
    --            AND prrd_code = prprd_prrd_code(+)
    --            AND prrd_tran_no = ggt_trans_no
    --            AND prrd_tran_no = v_tran_no;

    --      CURSOR cur_fc (v_prrd_code IN NUMBER)
    --      IS
    --         SELECT fc_agent_sht_desc, fc_comm_rate, fc_comm_amt, fc_prem_amt,
    --                fc_earthqke_prem, fc_earthqke_comm_rate, fc_earthqke_comm,
    --                fc_net_less_eq_comm, fc_net_less_eq_prem, fc_rate
    --           FROM gin_facre_cessions
    --          WHERE fc_prrd_code = v_prrd_code;

    --      CURSOR cur_trts (v_prrd_code IN NUMBER)
    --      IS
    --         SELECT ptotr_trs_sht_desc, ptotr_trt_prem_pcur, ptotr_trt_comm_pcur,
    --                ptotr_comm_rate, ptotr_earthqke_prem,
    --                ptotr_earthqke_comm_rate, ptotr_earthqke_comm,
    --                ptotr_net_less_eq_comm, ptotr_net_less_eq_prem, ptotr_rate
    --           FROM gin_policy_rein_risk_details
    --          WHERE ptotr_prrd_code = v_prrd_code;

    --      CURSOR cur_pool (v_prrd_code IN NUMBER)
    --      IS
    --         SELECT prprd_prrd_code, prprd_rein_pool_amt, prprd_rein_pool_rate,
    --                prprd_pool_si, prprd_prev_pool_rate, prprd_rein_pool_comm_amt
    --           FROM gin_pol_rein_pool_risk_details
    --          WHERE prprd_prrd_code = v_prrd_code;
    --   --v_stat varchar(5);
    --   BEGIN
    --          --CHECK RISK RI CESSION RATES
    --         -- NULL;
    --      --raise_error('v_tran_no='||v_tran_no);
    --      FOR r IN cur_rec
    --      LOOP
    --        v_exhange_rate :=
    --                        get_currexch_rate (r.pol_cur_code, v_rnd, v_rnd_bcur);
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('REINS_IN_BASE_CURRENCY')
    --           INTO v_rein_cur_param
    --           FROM DUAL;
    --        EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_rein_cur_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Treaty  parameter...');
    --        END;

    --         if nvl(v_rein_cur_param,'N')='Y' then
    ----             v_reinsure_amt :=ROUND((NVL ( r.ipu_reinsure_amt, 0)-NVL(r.prev_comp_retention,0))/ r.pol_cur_rate,v_rnd);
    --              select ROUND(decode(NVL ( r.ipu_reinsure_amt, 0),0,1,NVL ( r.ipu_reinsure_amt, 0))/ r.pol_cur_rate,v_rnd) into v_reinsure_amt from dual;
    --          else
    ----             v_reinsure_amt :=   ROUND(NVL ( r.ipu_reinsure_amt, 0)-NVL(r.prev_comp_retention,0),v_rnd);
    --           select ROUND(decode(NVL ( r.ipu_reinsure_amt, 0),0,1,NVL ( r.ipu_reinsure_amt, 0)),v_rnd) into v_reinsure_amt from dual;
    --          END IF;

    --         IF                                     --r.pol_batch_no != 200557672
    --            --  AND
    --            r.pol_policy_status != 'CO'
    ---- THIS IS ADDED SO THAT USERS CAN GO AHEAD WITH CONTRA FOR PAST TRANSACTIONS BEFORE POOL WAS CHANGED
    --         THEN
    --            v_err_msg :=
    --                   'TRANS NO :' || v_tran_no || ' RISK ' || r.ipu_property_id;

    --            --RAISE_ERROR('Cannot authorise the risk '||r.IPU_PROPERTY_ID||' - '||r.IPU_ITEM_DESC);
    --             --RAISE_APPLICATION_ERROR(-20001,' NVL(R.IPU_TOT_ENDOS_PREM_DIF,0) '||ROUND(NVL(R.IPU_TOT_ENDOS_PREM_DIF,0),0) ||'  NVL(R.PRRD_RI_PREM,0)    '|| ROUND(NVL(R.PRRD_RI_PREM,0),0) );
    --            IF     r.ggt_uw_clm_tran != 'R'
    --               AND /*NVL(R.IPU_ENDOS_DIFF_AMT,0)*/ ROUND
    --                                                     (NVL
    --                                                         (r.ipu_tot_endos_prem_dif,
    --                                                          0
    --                                                         )
    --                                                     ) !=
    --                                                     ROUND
    --                                                         (NVL (r.prrd_ri_prem,
    --                                                               0
    --                                                              )
    --                                                         )
    --               AND 1 = 3
    --            THEN
    --               raise_error (   v_err_msg
    --                            || ' The Premium To Used For Treaty Cessioning '
    --                            || NVL (r.prrd_ri_prem, 0)
    --                            || ' SHOULD BE EQUAL TO THE ENDORSEMENT PREMIUM '
    --                            || NVL (r.ipu_endos_diff_amt, 0)
    --                            || '..'
    --                            || r.ipu_tot_endos_prem_dif
    --                           );
    --            ELSIF r.ggt_uw_clm_tran = 'R'
    --            THEN
    --               IF NVL (r.cover_duration, 0) = 0
    --               THEN
    --                  v_cover_duration := 1;
    --               ELSE
    --                  v_cover_duration := r.cover_duration;
    --               END IF;

    --               IF NVL (r.remaining_days, 0) = 0
    --               THEN
    --                  v_remain_days := 1;
    --               ELSE
    --                  v_remain_days := r.remaining_days;
    --               END IF;

    --               IF     ROUND (  NVL (v_remain_days, 0)
    --                             / v_cover_duration
    --                             * NVL (r.ipu_endos_diff_amt, 0)
    --                            ) != ROUND (NVL (r.prrd_ri_prem, 0))
    --                  AND   ROUND (  NVL (v_remain_days, 0)
    --                               / v_cover_duration
    --                               * NVL (r.ipu_endos_diff_amt, 0)
    --                              )
    --                      - ROUND (NVL (r.prrd_ri_prem, 0)) > 2
    --               THEN
    --                  raise_error (   'prrd_ri_prem='
    --                               || NVL (r.prrd_ri_prem, 0)
    --                               || 'remaining_days='
    --                               || NVL (v_remain_days, 0)
    --                               || 'v_cover_duration='
    --                               || v_cover_duration
    --                               || 'ipu_endos_diff_amt='
    --                               || r.ipu_endos_diff_amt
    --                              );
    --                  raise_error
    --                        (   v_err_msg
    --                         || ' THE PREM TO USED FOR TREATY CESSIONING '
    --                         || NVL (r.prrd_ri_prem, 0)
    --                         || ' SHOULD BE EQUAL TO THE PRORATA ANNUAL PREMIUM  '
    --                         || ROUND (  NVL (v_remain_days, 0)
    --                                   / v_cover_duration
    --                                   * NVL (r.ipu_endos_diff_amt, 0)
    --                                  )
    --                         || '..'
    --                         || NVL (r.ipu_endos_diff_amt, 0)
    --                        );
    --               END IF;
    --            END IF;

    --            DBMS_OUTPUT.put_line (   'Cannot authorise the risk '
    --                                  || r.ipu_property_id
    --                                  || ' - '
    --                                  || r.ipu_item_desc
    --                                  || ';'
    --                                  || r.ipu_reinsure_amt
    --                                  || ';'
    --                                  || r.tot_ceded_si
    --                                  || ';'
    --                                  || r.tot_pct
    --                                 );

    --            IF NVL (r.trts_pct, 0) NOT BETWEEN 0 AND 100
    --            THEN
    --               v1 := NVL (r.trts_pct, 0);
    --               NULL;
    ---- raise_error (   v_err_msg || ' THE TREATY % '  || v1 || ' MUST BE BETWEEN 0 AND 100%'  );
    --            -- this has to handle lines separately
    --            ELSIF NVL (r.facres_pct, 0) NOT BETWEEN 0 AND 100
    --            THEN
    --               v1 := NVL (r.facres_pct, 0);
    --               raise_error (   v_err_msg
    --                            || ' THE FAC RE % '
    --                            || v1
    --                            || ' MUST BE BETWEEN 0 AND 100%'
    --                           );
    --            ELSIF NVL (r.pool_pct, 0) NOT BETWEEN 0 AND 100
    --            THEN
    --               v1 := NVL (r.pool_pct, 0);
    --               raise_error (   v_err_msg
    --                            || ' THE POOL % '
    --                            || v1
    --                            || ' MUST BE BETWEEN 0 AND 100%'
    --                           );
    --            ELSIF round(NVL (r.own_pct, 0)) NOT BETWEEN 0 AND 100
    --            THEN
    --               v1 := NVL (r.own_pct, 0);
    --               raise_error (   v_err_msg
    --                            || ' THE RETENTION % '
    --                            || v1
    --                            || ' MUST BE BETWEEN 0 AND 100%'
    --                           );
    --            ELSIF r.tot_pct != 100
    --            THEN
    --               v1 :=
    --                  (  NVL (r.trts_pct, 0)
    --                   + NVL (r.facres_pct, 0)
    --                   + NVL (r.pool_pct, 0)
    --                  );
    --               raise_error (   v_err_msg
    --                            || ' THE RI %  '
    --                            || v1
    --                            || ' +  RETEN % '
    --                            || r.own_pct
    --                            || ' NOT EQUAL TO 100%'
    --                           );
    --            ELSIF ABS (NVL (r.prrd_ri_prem, 0) - NVL (r.tot_ceded_prem, 0)) >
    --                                                                             2
    --            THEN
    --               v1 := NVL (r.tot_ceded_prem, 0) + NVL (r.pool_prem, 0);
    --               raise_error (   v_err_msg
    --                            || ' TOTAL CEDED PLUS OWN RETENTION PREM  '
    --                            || v1
    --                            || ' NOT EQUAL TO TOTAL PREMIUM '
    --                            || r.prrd_ri_prem
    --                            || ' ..'
    --                           );
    --            ELSIF     ABS (  NVL (v_reinsure_amt, 0)  - NVL (r.tot_ceded_si, 0)   ) > 1   AND   ABS (  NVL (v_reinsure_amt, 0)   - NVL (r.tot_ceded_si, 0)   )  / ABS (v_reinsure_amt) > 0.1
    --            THEN
    ----               raise_error
    ----                  (   v_err_msg
    ----                   || ' THE TOTAL CEDED SI  PLUS OWN RETENTION SI  '
    ----                   || v_reinsure_amt
    ----                   || ' DO NOT ADD UP TO THE TOTAL TRANSACTION REINSURANCE AMOUNT '
    ----                   || r.tot_ceded_si
    ----                   || ' .1.'
    ----                  );
    --                    NULL;
    --            END IF;

    --            IF ABS (  ROUND ((r.own_pct / 100) * r.prrd_ri_prem)
    --                    - (ROUND (r.own_prem))
    --                   ) > 5
    --            THEN
    --               v1 := r.own_prem / r.prrd_ri_prem;

    --               -- RAISE_ERROR(r.own_pct||';'||r.prrd_ri_prem||';'||r.prrd_prem_diff||';'||r.own_prem||';'||r.fac_excess);

    --               -- RAISE_ERROR(v1||'='||(ABS(v1) - ABS(r.own_pct / 100)));
    --               IF    (    (ABS (v1) - ABS (r.own_pct / 100) > .0002)
    --                      AND NVL (r.ipu_overrideride_ret_type, 'X') != 'P'
    --                     )
    --                  OR NVL (r.fac_excess, 0) != NVL (r.prrd_prem_diff, 0)
    --               THEN
    --                  raise_error (   v_err_msg
    --                               || ' THE OWN RETENTION %''S '
    --                               || r.own_pct
    --                               || ' MULTIPLIED BY THE REINSURANCE PREMIUM '
    --                               || r.prrd_ri_prem
    --                               || ' DOES NOT ADD UP TO THE RETAINED PREMIUM'
    --                               || r.own_prem
    --                               || ' ..'
    --                              );
    --               END IF;
    --            ELSIF ABS (  ROUND (r.trts_pct / 100 * r.prrd_ri_prem)
    --                       - ROUND (r.trts_prem)
    --                      ) > 500
    --            THEN
    --               raise_error
    --                         (   v_err_msg
    --                          || ' THE TOTAL TREATY %''S '
    --                          || r.trts_pct
    --                          || ' MULTIPLIED BY THE REINSURANCE PREMIUM '
    --                          || r.prrd_ri_prem
    --                          || ' DOES NOT ADD UP TO THE TOTAL TREATIES PREMIUM'
    --                          || r.trts_pct
    --                          || ' ..'
    --                         );
    --            ELSIF ABS (  ROUND (r.facres_pct / 100 * r.prrd_ri_prem)
    --                       - ROUND (r.facres_prem)
    --                      ) > 500
    --            THEN
    --               raise_error (   v_err_msg
    --                            || ' THE FACULTATIVE RETENTION %''S'
    --                            || r.facres_pct
    --                            || '  MULTIPLIED BY THE REINSURANCE PREMIUM'
    --                            || r.prrd_ri_prem
    --                            || '  DOES NOT ADD UP TO THE RETAINED PREMIUM'
    --                            || r.facres_prem
    --                            || ' ..'
    --                           );
    --            END IF;

    --            IF     ROUND (r.own_pct / 100 * v_reinsure_amt) !=
    --                                                              ROUND (r.own_si)
    --               AND   ABS ((  ROUND (r.own_si)
    --                           - ROUND (r.own_pct / 100 * v_reinsure_amt)
    --                          )
    --                         )
    --                   / ABS (v_reinsure_amt) > 0.1
    --               AND NVL (r.prrd_special_comp_retention, 0) = 0
    --            THEN
    --               raise_error (   v_err_msg
    --                            || ' THE OWN RETENTION %'
    --                            || r.own_pct
    --                            || '  MULTIPLIED BY THE REINSURABLE AMOUNT '
    --                            || v_reinsure_amt
    --                            || ' DOES NOT ADD UP TO THE RETAINED SI '
    --                            || r.own_si
    --                            || ' ..'
    --                           );
    --            ELSIF  ROUND (r.trts_pct / 100 * v_reinsure_amt) !=  ROUND (r.trts_si)
    --            AND   ABS (ROUND (r.trts_si)  - ROUND (r.trts_pct / 100 * v_reinsure_amt)  ) / ABS (v_reinsure_amt) > 0.1
    --            THEN
    ----               raise_error
    ----                    (   v_err_msg
    ----                     || ' THE TREATIES %''S '
    ----                     || r.trts_pct
    ----                     || ' MULTIPLIED BY THE REINSURABLE AMOUNT '
    ----                     || v_reinsure_amt
    ----                     || ' DOES NOT ADD UP TO THE TOTAL TREATIES SUM ASSUREDS'
    ----                     || r.trts_si||';'||NVL(r.prev_comp_retention,0) || ' ..'  );
    --                    null;
    --            ELSIF     ROUND (r.facres_pct / 100 * v_reinsure_amt) !=
    --                                                           ROUND (r.facres_si)
    --                  AND   ABS (  ROUND (r.facres_si)
    --                             - ROUND (r.facres_pct / 100 * v_reinsure_amt)
    --                            )
    --                      / ABS (v_reinsure_amt) > 0.1
    --            THEN
    --               raise_error
    --                  (   v_err_msg
    --                   || ' THE FACULTATIVE %''S '
    --                   || r.facres_pct
    --                   || ' MULTIPLIED BY THE REINSURABLE AMOUNT '
    --                   || /*r.ipu_reinsure_amt*/v_reinsure_amt
    --                   || ' DOES NOT ADD UP TO THE TOTAL FACULATIVE SUM ASSUREDS'
    --                   || r.facres_si
    --                   || ' ..'
    --                  );
    --            END IF;

    --            IF
    --                  --SIGN(NVL(R.TRTS_COMM_AMT,0)) != SIGN(NVL(R.TRTS_EQ_COMM_AMT,0))
    --                       --OR SIGN(NVL(R.TRTS_COMM_AMT,0)) != SIGN(NVL(R.TRTS_NETEQ_COMM_AMT,0))
    --                       --OR
    --                  ABS (NVL (r.trts_comm_amt, 0)) <
    --                                             ABS (NVL (r.trts_eq_comm_amt, 0))
    --               OR ABS (NVL (r.trts_comm_amt, 0)) <
    --                                          ABS (NVL (r.trts_neteq_comm_amt, 0))
    --               OR ABS (NVL (r.trts_comm_amt, 0)) !=
    --                       ABS (NVL (r.trts_eq_comm_amt, 0))
    --                     + ABS (NVL (r.trts_neteq_comm_amt, 0))
    --            THEN
    --               -- RAISE_ERROR('THE TREATY EQ COMMISSION DO NOT ADD UP TOT:'||NVL(R.TRTS_COMM_AMT,0)||' EQ:'||NVL(R.TRTS_EQ_COMM_AMT,0)||' NETEQ:'||NVL(R.TRTS_NETEQ_COMM_AMT,0));
    --               NULL;
    --            END IF;

    --            IF       --SIGN(NVL(R.TRTS_PREM,0)) != SIGN(NVL(R.TRTS_EQ_PREM,0))
    --                  --OR SIGN(NVL(R.TRTS_PREM,0)) != SIGN(NVL(R.TRTS_NETEQ_PREM,0))
    --                  --OR
    --                  ABS (NVL (r.trts_prem, 0)) < ABS (NVL (r.trts_eq_prem, 0))
    --               OR ABS (NVL (r.trts_prem, 0)) <
    --                                              ABS (NVL (r.trts_neteq_prem, 0))
    --               OR ABS (NVL (r.trts_prem, 0)) !=
    --                       ABS (NVL (r.trts_eq_prem, 0))
    --                     + ABS (NVL (r.trts_neteq_prem, 0))
    --            THEN
    --               --RAISE_ERROR('THE TREATY EQ PREMIUMS DO NOT ADD UP TOT:'||NVL(R.TRTS_PREM,0)||' EQ:'||NVL(R.TRTS_EQ_PREM,0)||' NETEQ:'||NVL(R.TRTS_NETEQ_PREM,0));
    --               NULL;
    --            END IF;

    --            FOR fc IN cur_fc (r.prrd_code)
    --            LOOP
    --               IF NVL (fc.fc_rate, 0) NOT BETWEEN 0 AND 100
    --               THEN
    --                  raise_error
    --                     (   v_err_msg
    --                      || ' - '
    --                      || fc.fc_agent_sht_desc
    --                      || ' THE FACRE CESSION RATES MUST BE BETWEEN 0 AND 100 ..'
    --                     );
    --               ELSIF ABS (  ROUND (  NVL (fc.fc_comm_rate, 0)
    --                                   / 100
    --                                   * NVL (fc.fc_net_less_eq_prem, 0)
    --                                  )
    --                          - ROUND (NVL (fc.fc_net_less_eq_comm, 0))
    --                         ) > 1
    --               THEN
    --                  -- RAISE_ERROR(v_err_msg||' - '||fc.FC_AGENT_SHT_DESC||' THE FACRE COMM RATES '||NVL(fc.FC_COMM_RATE,0)||' MULTIPLIED BY PREMIUM TO FACRE '||NVL(fc.FC_NET_LESS_EQ_PREM,0)||' DOESNT ADD UP TO THE FACRE COMMISSIONS '||fc.FC_NET_LESS_EQ_COMM||' ..');
    --                  NULL;
    --               ELSIF ABS (  ROUND (  NVL (fc.fc_earthqke_comm_rate, 0)
    --                                   / 100
    --                                   * NVL (fc.fc_earthqke_prem, 0)
    --                                  )
    --                          - ROUND (NVL (fc.fc_earthqke_comm, 0))
    --                         ) > 1
    --               THEN
    --                  --  RAISE_ERROR(v_err_msg||' - '||fc.FC_AGENT_SHT_DESC||' THE FACRE EQ COMM RATES '||NVL(fc.FC_EARTHQKE_COMM_RATE,0)||' MULTIPLIED BY PREMIUM TO FACRE '||NVL(fc.FC_PREM_AMT,0)||' DOESNT ADD UP TO THE FACRE COMMISSIONS '||fc.FC_COMM_AMT||' ..');
    --                  NULL;
    --               ELSIF
    --                        --SIGN(NVL(fc.FC_PREM_AMT,0)) != SIGN(NVL(fc.FC_EARTHQKE_PREM,0))
    --                                  --OR SIGN(NVL(fc.FC_PREM_AMT,0)) != SIGN(NVL(fc.FC_NET_LESS_EQ_PREM,0))
    --                                  --OR
    --                        ABS (NVL (fc.fc_prem_amt, 0)) <
    --                                            ABS (NVL (fc.fc_earthqke_prem, 0))
    --                     OR ABS (NVL (fc.fc_prem_amt, 0)) <
    --                                         ABS (NVL (fc.fc_net_less_eq_prem, 0))
    --                     OR ABS (  ABS (NVL (fc.fc_prem_amt, 0))
    --                             - (  ABS (NVL (fc.fc_earthqke_prem, 0))
    --                                + ABS (NVL (fc.fc_net_less_eq_prem, 0))
    --                               )
    --                            ) > 1
    --               THEN
    --                  -- RAISE_ERROR('THE FACULTATIVE EQ PREMIUMS DO NOT ADD UP TOT:'||NVL(fc.FC_PREM_AMT,0)||' EQ:'||NVL(fc.FC_EARTHQKE_PREM,0)||' NETEQ:'||NVL(fc.FC_NET_LESS_EQ_PREM,0));
    --                  NULL;
    --               ELSIF
    --                        --SIGN(NVL(fc.FC_COMM_AMT,0)) != SIGN(NVL(fc.FC_EARTHQKE_COMM,0))
    --                                  --OR SIGN(NVL(fc.FC_COMM_AMT,0)) != SIGN(NVL(fc.FC_NET_LESS_EQ_COMM,0))
    --                                  --OR
    --                        ABS (NVL (fc.fc_comm_amt, 0)) <
    --                                            ABS (NVL (fc.fc_earthqke_comm, 0))
    --                     OR ABS (NVL (fc.fc_comm_amt, 0)) <
    --                                         ABS (NVL (fc.fc_net_less_eq_comm, 0))
    --                     OR ABS (  ABS (NVL (fc.fc_comm_amt, 0))
    --                             - (  ABS (NVL (fc.fc_earthqke_comm, 0))
    --                                + ABS (NVL (fc.fc_net_less_eq_comm, 0))
    --                               )
    --                            ) > 1
    --               THEN
    --                  --RAISE_ERROR('THE FACULTATIVE COMMISSION DO NOT ADD UP TOT:'||NVL(fc.FC_COMM_AMT,0)||' EQ:'||NVL(fc.FC_EARTHQKE_COMM,0)||' NETEQ:'||NVL(fc.FC_NET_LESS_EQ_COMM,0));
    --                  NULL;
    --               END IF;
    --            END LOOP;

    --            --ELSIF R.POL_POLICY_STATUS != 'CO' AND R.PIL_SECT_TYPE = 'EQ' THEN
    --            FOR trt IN cur_trts (r.prrd_code)
    --            LOOP
    --               IF NVL (trt.ptotr_rate, 0) NOT BETWEEN 0 AND 100
    --               THEN
    --                  NULL;
    ---- raise_error  (   v_err_msg || ' - ' || trt.ptotr_trs_sht_desc || ' THE TREATY CESSION RATES MUST BE BETWEEN 0 AND 100 ..' );
    --               ELSIF ABS (  ROUND (  NVL (trt.ptotr_earthqke_comm_rate, 0)
    --                                   / 100
    --                                   * NVL (trt.ptotr_earthqke_prem, 0)
    --                                  )
    --                          - ROUND (NVL (trt.ptotr_earthqke_comm, 0))
    --                         ) > 1
    --               THEN
    --                  --RAISE_ERROR(v_err_msg||' - '||trt.PTOTR_TRS_SHT_DESC||' THE TREATY EARTHQUAKE COMMISSION RATE  '||trt.PTOTR_EARTHQKE_COMM_RATE||' MULTIPLIED BY PREMIUM '||trt.PTOTR_EARTHQKE_PREM||' DOES NOT ADD UP TO COMMISSIONS '||trt.PTOTR_EARTHQKE_COMM||' ..');
    --                  NULL;
    --               ELSIF ABS (  ROUND (  NVL (trt.ptotr_comm_rate, 0)
    --                                   / 100
    --                                   * NVL (trt.ptotr_net_less_eq_prem, 0)
    --                                  )
    --                          - ROUND (NVL (trt.ptotr_net_less_eq_comm, 0))
    --                         ) > 1
    --               THEN
    --                  --RAISE_ERROR(v_err_msg||' - '||trt.PTOTR_TRS_SHT_DESC||' THE TREATY NON-EARTHQUAKE COMMISSION RATE  '||trt.PTOTR_COMM_RATE||' MULTIPLIED BY PREMIUM '||trt.PTOTR_NET_LESS_EQ_PREM||' DOES NOT ADD UP TO COMMISSIONS '||trt.PTOTR_NET_LESS_EQ_COMM||' ..');
    --                  NULL;
    --               ELSIF
    ----SIGN(NVL(trt.PTOTR_TRT_PREM_PCUR,0)) != SIGN(NVL(trt.PTOTR_EARTHQKE_PREM,0))
    --                       --OR SIGN(NVL(trt.PTOTR_TRT_PREM_PCUR,0)) != SIGN(NVL(trt.PTOTR_NET_LESS_EQ_PREM,0))
    --                       --OR
    --                        ABS (NVL (trt.ptotr_trt_prem_pcur, 0)) <
    --                                        ABS (NVL (trt.ptotr_earthqke_prem, 0))
    --                     OR ABS (NVL (trt.ptotr_trt_prem_pcur, 0)) <
    --                                     ABS (NVL (trt.ptotr_net_less_eq_prem, 0))
    --                     OR ABS (  ABS (NVL (trt.ptotr_trt_prem_pcur, 0))
    --                             - (  ABS (NVL (trt.ptotr_earthqke_prem, 0))
    --                                + ABS (NVL (trt.ptotr_net_less_eq_prem, 0))
    --                               )
    --                            ) > 1
    --               THEN
    --                  --RAISE_ERROR('THE TREATY EQ PREMIUMS DO NOT ADD UP TOT:'||NVL(trt.PTOTR_TRT_PREM_PCUR,0)||' EQ:'||NVL(trt.PTOTR_EARTHQKE_PREM,0)||' NETEQ:'||NVL(trt.PTOTR_NET_LESS_EQ_PREM,0));
    --                  NULL;
    --               ELSIF
    ----SIGN(NVL(trt.PTOTR_TRT_COMM_PCUR,0)) != SIGN(NVL(trt.PTOTR_EARTHQKE_COMM,0))
    --                       --OR SIGN(NVL(trt.PTOTR_TRT_COMM_PCUR,0)) != SIGN(NVL(trt.PTOTR_NET_LESS_EQ_COMM,0))
    --                       --OR
    --                        ABS (NVL (trt.ptotr_trt_comm_pcur, 0)) <
    --                                        ABS (NVL (trt.ptotr_earthqke_comm, 0))
    --                     OR ABS (NVL (trt.ptotr_trt_comm_pcur, 0)) <
    --                                     ABS (NVL (trt.ptotr_net_less_eq_comm, 0))
    --                     OR ABS (  ABS (NVL (trt.ptotr_trt_comm_pcur, 0))
    --                             - (  ABS (NVL (trt.ptotr_earthqke_comm, 0))
    --                                + ABS (NVL (trt.ptotr_net_less_eq_comm, 0))
    --                               )
    --                            ) > 1
    --               THEN
    --                  -- RAISE_ERROR('THE TREATY EQ COMMISSION DO NOT ADD UP TOT:'||NVL(trt.PTOTR_TRT_COMM_PCUR,0)||' EQ:'||NVL(trt.PTOTR_EARTHQKE_COMM,0)||' NETEQ:'||NVL(trt.PTOTR_NET_LESS_EQ_COMM,0));
    --                  NULL;
    --               END IF;
    --            END LOOP;

    --            FOR pool IN cur_pool (r.prrd_code)
    --            LOOP
    --               IF NVL (pool.prprd_rein_pool_rate, 0) NOT BETWEEN 0 AND 100
    --               THEN
    --                  raise_error
    --                      (   v_err_msg
    --                       || ' THE POOL CESSION RATES MUST BE BETWEEN 0 AND 100 ..'
    --                      );
    --               END IF;
    --            END LOOP;
    --         END IF;
    --      END LOOP;
    ----      RAISE_ERROR('HERE');
    --   END;

    PROCEDURE check_uw_ri (v_tran_no NUMBER                                --,
                                           --v_batch_no NUMBER
                                           )
    IS
        v_risk_ri_si       NUMBER := 0;
        v1                 NUMBER := 0;
        v_err_msg          VARCHAR2 (500);
        v_cover_duration   NUMBER := 0;
        v_remain_days      NUMBER := 0;
        v_rein_cur_param   VARCHAR2 (1);
        v_reinsure_amt     NUMBER := 0;
        v_exhange_rate     NUMBER;
        v_rnd              NUMBER;
        v_rnd_bcur         NUMBER;
        v_bcur_code        NUMBER;
        v_bcur_symbol      VARCHAR2 (10);

        CURSOR cur_rec IS
            SELECT pol_cur_code,
                   ipu_overrideride_ret_type,
                   pol_batch_no,
                   pol_policy_status,
                   prrd_special_comp_retention,
                   prrd_prem_diff,
                   ipu_pol_policy_no,
                   ipu_code,
                   prrd_code,
                   prrd_idx,
                   ipu_endos_diff_amt,
                   ipu_sec_scl_code,
                   NVL (prrd_ri_prem, 0)
                       prrd_ri_prem,
                   /*ABS(DECODE (ipu_endos_diff_amt,
                           0, ipu_reinsure_amt,
                           (NVL(ipu_reinsure_amt,0) -NVL(get_risk_prev_si(prrd_code),0) --NVL (prrd_prev_ri_si, 0)
                           )
                          ))*/
                   ipu_reinsure_amt, --/*get_risk_comp_retention(ipu_id,ipu_uw_yr,ipu_code)*/ 0 prev_comp_retention,
                   ipu_property_id,
                   ipu_item_desc,
                   prrd_net_prem,
                   ipu_tot_endos_prem_dif,
                   NVL (prrd_comp_net_rate, 0)
                       own_pct,
                   NVL (trts_pct, 0)
                       trts_pct,
                   NVL (facres_pct, 0)
                       facres_pct,
                   ROUND (
                         NVL (prrd_comp_net_rate, 0)
                       + NVL (trts_pct, 0)
                       + NVL (facres_pct, 0)
                       + NVL (pool_pct, 0))
                       tot_pct,
                   NVL (trts_comm_amt, 0)
                       trts_comm_amt,
                   NVL (trts_eq_comm_amt, 0)
                       trts_eq_comm_amt,
                   NVL (trts_neteq_comm_amt, 0)
                       trts_neteq_comm_amt,
                   NVL (facres_comm_amt, 0)
                       facres_comm_amt,
                   NVL (facres_eq_comm_amt, 0)
                       facres_eq_comm_amt,
                   NVL (facres_neteq_comm_amt, 0)
                       facres_neteq_comm_amt,
                   NVL (prrd_net_prem, 0)         /*- NVL (facres_excess, 0)*/
                       own_prem,
                   NVL (trts_prem, 0)
                       trts_prem,
                   NVL (trts_eq_prem, 0)
                       trts_eq_prem,
                   NVL (trts_neteq_prem, 0)
                       trts_neteq_prem,
                   NVL (facres_prem, 0) + NVL (facres_excess, 0)
                       facres_prem,
                   NVL (facres_eq_prem, 0)
                       facres_eq_prem,
                   NVL (facres_neteq_prem, 0)
                       facres_neteq_prem,
                     NVL (prrd_net_prem, 0)
                   + NVL (trts_prem, 0)
                   + NVL (facres_prem, 0)
                   + NVL (facres_excess, 0)
                   + NVL (pool_prem, 0)
                       tot_ceded_prem,
                   NVL (facres_excess, 0)
                       fac_excess,
                   NVL (prrd_comp_retention, 0)
                       own_si,
                   NVL (trts_si, 0)
                       trts_si,
                   NVL (facres_si, 0)
                       facres_si,
                     (  NVL (prrd_comp_retention, 0)
                      + NVL (prrd_special_comp_retention, 0)
                      + NVL (facres_si, 0)
                      + NVL (trts_si, 0)
                      + NVL (pool_si, 0))
                   - NVL (get_risk_prev_ri_si (ipu_code), 0)
                       tot_ceded_si,
                   ggt_uw_clm_tran,
                   -- (ipu_eff_wet - ggt_effective_date) remaining_days,
                   (ipu_eff_wet - ipu_eff_wef)
                       remaining_days,
                   (ipu_eff_wet - ipu_eff_wef)
                       cover_duration,
                   ipu_gp,
                   pol_cur_rate,
                   ipu_uw_yr,
                   pool_si,
                   pool_prem,
                   pool_pct
              FROM gin_policies,
                   gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_gis_transactions,         --,GIN_POLICY_INSURED_LIMITS,
                   (  SELECT ptotr_prrd_code,
                             SUM (NVL (ptotr_cession_pct, 0))
                                 trts_pct,
                             SUM (NVL (ptotr_trt_comm_pcur, 0))
                                 trts_comm_amt,
                             SUM (NVL (ptotr_earthqke_comm, 0))
                                 trts_eq_comm_amt,
                             SUM (NVL (ptotr_net_less_eq_comm, 0))
                                 trts_neteq_comm_amt,
                             SUM (NVL (ptotr_trt_prem_pcur, 0))
                                 trts_prem,
                             SUM (NVL (ptotr_earthqke_prem, 0))
                                 trts_eq_prem,
                             SUM (NVL (ptotr_net_less_eq_prem, 0))
                                 trts_neteq_prem,
                             SUM (NVL (ptotr_trt_si_pcur, 0))
                                 trts_si
                        FROM gin_policy_rein_risk_details
                       WHERE ptotr_ggt_tran_no = v_tran_no
                    GROUP BY ptotr_prrd_code),
                   (  SELECT fc_prrd_code,
                             SUM (NVL (fc_rate, 0))
                                 facres_pct,
                             SUM (NVL (fc_comm_amt, 0))
                                 facres_comm_amt,
                             SUM (NVL (fc_earthqke_comm, 0))
                                 facres_eq_comm_amt,
                             SUM (NVL (fc_net_less_eq_comm, 0))
                                 facres_neteq_comm_amt,
                             SUM (NVL (fc_prem_amt, 0))
                                 facres_prem,
                             SUM (NVL (fc_earthqke_prem, 0))
                                 facres_eq_prem,
                             SUM (NVL (fc_net_less_eq_prem, 0))
                                 facres_neteq_prem,
                             SUM (NVL (fc_amount, 0))
                                 facres_si,
                             SUM (NVL (fc_prem_diff_amt, 0))
                                 facres_excess
                        FROM gin_facre_cessions
                       WHERE fc_ggt_tran_no = v_tran_no
                    GROUP BY fc_prrd_code),
                   (  SELECT prprd_prrd_code,
                             SUM (NVL (prprd_rein_pool_amt, 0))
                                 pool_prem,
                             SUM (NVL (prprd_rein_pool_rate, 0))
                                 pool_pct,
                             SUM (NVL (prprd_pool_si, 0))
                                 pool_si,
                             SUM (NVL (prprd_prev_pool_rate, 0))
                                 pool_prev_pct,
                             SUM (NVL (prprd_rein_pool_comm_amt, 0))
                                 pool_comm_amt
                        FROM gin_pol_rein_pool_risk_details
                       WHERE prprd_ggt_tran_no = v_tran_no
                    GROUP BY prprd_prrd_code)
             WHERE     pol_batch_no = ipu_pol_batch_no
                   AND ipu_code = prrd_ipu_code
                   --AND IPU_CODE = PIL_IPU_CODE
                   AND prrd_code = ptotr_prrd_code(+)
                   AND prrd_code = fc_prrd_code(+)
                   AND prrd_code = prprd_prrd_code(+)
                   AND prrd_tran_no = ggt_trans_no
                   AND prrd_tran_no = v_tran_no;

        CURSOR cur_fc (v_prrd_code IN NUMBER)
        IS
            SELECT fc_agent_sht_desc,
                   fc_comm_rate,
                   fc_comm_amt,
                   fc_prem_amt,
                   fc_earthqke_prem,
                   fc_earthqke_comm_rate,
                   fc_earthqke_comm,
                   fc_net_less_eq_comm,
                   fc_net_less_eq_prem,
                   fc_rate
              FROM gin_facre_cessions
             WHERE fc_prrd_code = v_prrd_code;

        CURSOR cur_trts (v_prrd_code IN NUMBER)
        IS
            SELECT ptotr_trs_sht_desc,
                   ptotr_trt_prem_pcur,
                   ptotr_trt_comm_pcur,
                   ptotr_comm_rate,
                   ptotr_earthqke_prem,
                   ptotr_earthqke_comm_rate,
                   ptotr_earthqke_comm,
                   ptotr_net_less_eq_comm,
                   ptotr_net_less_eq_prem,
                   ptotr_rate
              FROM gin_policy_rein_risk_details
             WHERE ptotr_prrd_code = v_prrd_code;

        CURSOR cur_pool (v_prrd_code IN NUMBER)
        IS
            SELECT prprd_prrd_code,
                   prprd_rein_pool_amt,
                   prprd_rein_pool_rate,
                   prprd_pool_si,
                   prprd_prev_pool_rate,
                   prprd_rein_pool_comm_amt
              FROM gin_pol_rein_pool_risk_details
             WHERE prprd_prrd_code = v_prrd_code;
    --v_stat varchar(5);
    BEGIN
        --CHECK RISK RI CESSION RATES
        -- NULL;
        --raise_error('v_tran_no='||v_tran_no);
        FOR r IN cur_rec
        LOOP
            v_exhange_rate :=
                get_currexch_rate (r.pol_cur_code, v_rnd, v_rnd_bcur);

            BEGIN
                SELECT gin_parameters_pkg.get_param_varchar (
                           'REINS_IN_BASE_CURRENCY')
                  INTO v_rein_cur_param
                  FROM DUAL;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_rein_cur_param := 'N';
                WHEN OTHERS
                THEN
                    raise_error ('Error fetching Treaty  parameter...');
            END;

            v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

            IF NVL (v_rein_cur_param, 'N') = 'Y'
            THEN
                --             v_reinsure_amt :=ROUND((NVL ( r.ipu_reinsure_amt, 0)-NVL(r.prev_comp_retention,0))/ r.pol_cur_rate,v_rnd);
                IF r.pol_cur_code <> v_bcur_code
                THEN
                    SELECT ROUND (
                               DECODE (NVL (r.ipu_reinsure_amt, 0),
                                       0, 1,
                                       NVL (r.ipu_reinsure_amt, 0)),
                               v_rnd)
                      INTO v_reinsure_amt
                      FROM DUAL;
                ELSE
                    SELECT ROUND (
                                 DECODE (NVL (r.ipu_reinsure_amt, 0),
                                         0, 1,
                                         NVL (r.ipu_reinsure_amt, 0))
                               / r.pol_cur_rate,
                               v_rnd)
                      INTO v_reinsure_amt
                      FROM DUAL;
                END IF;
            ELSE
                --             v_reinsure_amt :=   ROUND(NVL ( r.ipu_reinsure_amt, 0)-NVL(r.prev_comp_retention,0),v_rnd);
                SELECT ROUND (
                           DECODE (NVL (r.ipu_reinsure_amt, 0),
                                   0, 1,
                                   NVL (r.ipu_reinsure_amt, 0)),
                           v_rnd)
                  INTO v_reinsure_amt
                  FROM DUAL;
            END IF;

            IF                                   --r.pol_batch_no != 200557672
               --  AND
               r.pol_policy_status != 'CO'
            -- THIS IS ADDED SO THAT USERS CAN GO AHEAD WITH CONTRA FOR PAST TRANSACTIONS BEFORE POOL WAS CHANGED
            THEN
                v_err_msg :=
                       'TRANS NO :'
                    || v_tran_no
                    || ' RISK '
                    || r.ipu_property_id;

                --RAISE_ERROR('Cannot authorise the risk '||r.IPU_PROPERTY_ID||' - '||r.IPU_ITEM_DESC);
                --RAISE_APPLICATION_ERROR(-20001,' NVL(R.IPU_TOT_ENDOS_PREM_DIF,0) '||ROUND(NVL(R.IPU_TOT_ENDOS_PREM_DIF,0),0) ||'  NVL(R.PRRD_RI_PREM,0)    '|| ROUND(NVL(R.PRRD_RI_PREM,0),0) );
                IF     r.ggt_uw_clm_tran != 'R'
                   AND                         /*NVL(R.IPU_ENDOS_DIFF_AMT,0)*/
                       ROUND (NVL (r.ipu_tot_endos_prem_dif, 0)) !=
                       ROUND (NVL (r.prrd_ri_prem, 0))
                   AND 1 = 3
                THEN
                    raise_error (
                           v_err_msg
                        || ' The Premium To Used For Treaty Cessioning '
                        || NVL (r.prrd_ri_prem, 0)
                        || ' SHOULD BE EQUAL TO THE ENDORSEMENT PREMIUM '
                        || NVL (r.ipu_endos_diff_amt, 0)
                        || '..'
                        || r.ipu_tot_endos_prem_dif);
                ELSIF r.ggt_uw_clm_tran = 'R'
                THEN
                    IF NVL (r.cover_duration, 0) = 0
                    THEN
                        v_cover_duration := 1;
                    ELSE
                        v_cover_duration := r.cover_duration;
                    END IF;

                    IF NVL (r.remaining_days, 0) = 0
                    THEN
                        v_remain_days := 1;
                    ELSE
                        v_remain_days := r.remaining_days;
                    END IF;

                    IF     ROUND (
                                 NVL (v_remain_days, 0)
                               / v_cover_duration
                               * NVL (r.ipu_endos_diff_amt, 0)) !=
                           ROUND (NVL (r.prrd_ri_prem, 0))
                       AND   ROUND (
                                   NVL (v_remain_days, 0)
                                 / v_cover_duration
                                 * NVL (r.ipu_endos_diff_amt, 0))
                           - ROUND (NVL (r.prrd_ri_prem, 0)) >
                           2
                    THEN
                        raise_error (
                               'prrd_ri_prem='
                            || NVL (r.prrd_ri_prem, 0)
                            || 'remaining_days='
                            || NVL (v_remain_days, 0)
                            || 'v_cover_duration='
                            || v_cover_duration
                            || 'ipu_endos_diff_amt='
                            || r.ipu_endos_diff_amt);
                        raise_error (
                               v_err_msg
                            || ' THE PREM TO USED FOR TREATY CESSIONING '
                            || NVL (r.prrd_ri_prem, 0)
                            || ' SHOULD BE EQUAL TO THE PRORATA ANNUAL PREMIUM  '
                            || ROUND (
                                     NVL (v_remain_days, 0)
                                   / v_cover_duration
                                   * NVL (r.ipu_endos_diff_amt, 0))
                            || '..'
                            || NVL (r.ipu_endos_diff_amt, 0));
                    END IF;
                END IF;

                DBMS_OUTPUT.put_line (
                       'Cannot authorise the risk '
                    || r.ipu_property_id
                    || ' - '
                    || r.ipu_item_desc
                    || ';'
                    || r.ipu_reinsure_amt
                    || ';'
                    || r.tot_ceded_si
                    || ';'
                    || r.tot_pct);

                IF NVL (r.trts_pct, 0) NOT BETWEEN 0 AND 100
                THEN
                    v1 := NVL (r.trts_pct, 0);
                    NULL;
                -- raise_error (   v_err_msg || ' THE TREATY % '  || v1 || ' MUST BE BETWEEN 0 AND 100%'  );
                -- this has to handle lines separately
                ELSIF NVL (r.facres_pct, 0) NOT BETWEEN 0 AND 100
                THEN
                    v1 := NVL (r.facres_pct, 0);
                    raise_error (
                           v_err_msg
                        || ' THE FAC RE % '
                        || v1
                        || ' MUST BE BETWEEN 0 AND 100%');
                ELSIF NVL (r.pool_pct, 0) NOT BETWEEN 0 AND 100
                THEN
                    v1 := NVL (r.pool_pct, 0);
                    raise_error (
                           v_err_msg
                        || ' THE POOL % '
                        || v1
                        || ' MUST BE BETWEEN 0 AND 100%');
                ELSIF ROUND (NVL (r.own_pct, 0)) NOT BETWEEN 0 AND 100
                THEN
                    v1 := NVL (r.own_pct, 0);
                    raise_error (
                           v_err_msg
                        || ' THE RETENTION % '
                        || v1
                        || ' MUST BE BETWEEN 0 AND 100%');
                ELSIF r.tot_pct != 100
                THEN
                    v1 :=
                        (  NVL (r.trts_pct, 0)
                         + NVL (r.facres_pct, 0)
                         + NVL (r.pool_pct, 0));
                    raise_error (
                           v_err_msg
                        || ' THE RI %  '
                        || v1
                        || ' +  RETEN % '
                        || r.own_pct
                        || ' NOT EQUAL TO 100%');
                ELSIF ABS (
                          NVL (r.prrd_ri_prem, 0) - NVL (r.tot_ceded_prem, 0)) >
                      20
                THEN
                    v1 := NVL (r.tot_ceded_prem, 0) + NVL (r.pool_prem, 0);
                    raise_error (
                           v_err_msg
                        || ' TOTAL CEDED PLUS OWN RETENTION PREM  '
                        || v1
                        || ' NOT EQUAL TO TOTAL PREMIUM '
                        || r.prrd_ri_prem
                        || ' ..');
                ELSIF     ABS (
                                NVL (v_reinsure_amt, 0)
                              - NVL (r.tot_ceded_si, 0)) >
                          1
                      AND   ABS (
                                  NVL (v_reinsure_amt, 0)
                                - NVL (r.tot_ceded_si, 0))
                          / ABS (v_reinsure_amt) >
                          0.1
                THEN
                    --               raise_error
                    --                  (   v_err_msg
                    --                   || ' THE TOTAL CEDED SI  PLUS OWN RETENTION SI  '
                    --                   || v_reinsure_amt
                    --                   || ' DO NOT ADD UP TO THE TOTAL TRANSACTION REINSURANCE AMOUNT '
                    --                   || r.tot_ceded_si
                    --                   || ' .1.'
                    --                  );
                    NULL;
                END IF;

                IF ABS (
                         ROUND ((r.own_pct / 100) * r.prrd_ri_prem)
                       - (ROUND (r.own_prem))) >
                   5
                THEN
                    v1 := r.own_prem / r.prrd_ri_prem;
                -- RAISE_ERROR(r.own_pct||';'||r.prrd_ri_prem||';'||r.prrd_prem_diff||';'||r.own_prem||';'||r.fac_excess);

                -- RAISE_ERROR(v1||'='||(ABS(v1) - ABS(r.own_pct / 100)));
                /*IF    (    (ABS (v1) - ABS (r.own_pct / 100) > .0002)
                       AND NVL (r.ipu_overrideride_ret_type, 'X') != 'P'
                      )
                   OR NVL (r.fac_excess, 0) != NVL (r.prrd_prem_diff, 0)
                THEN
                   raise_error (   v_err_msg
                                || ' THE OWN RETENTION %''S '
                                || r.own_pct
                                || ' MULTIPLIED BY THE REINSURANCE PREMIUM '
                                || r.prrd_ri_prem
                                || ' DOES NOT ADD UP TO THE RETAINED PREMIUM'
                                || r.own_prem
                                || ' ..'
                               );
                END IF;*/
                ELSIF ABS (
                            ROUND (r.trts_pct / 100 * r.prrd_ri_prem)
                          - ROUND (r.trts_prem)) >
                      500
                THEN
                    raise_error (
                           v_err_msg
                        || ' THE TOTAL TREATY %''S '
                        || r.trts_pct
                        || ' MULTIPLIED BY THE REINSURANCE PREMIUM '
                        || r.prrd_ri_prem
                        || ' DOES NOT ADD UP TO THE TOTAL TREATIES PREMIUM '
                        || r.trts_prem
                        || ' ..');
                ELSIF ABS (
                            ROUND (r.facres_pct / 100 * r.prrd_ri_prem)
                          - ROUND (r.facres_prem)) >
                      500
                THEN
                    raise_error (
                           v_err_msg
                        || ' THE FACULTATIVE RETENTION %''S'
                        || r.facres_pct
                        || '  MULTIPLIED BY THE REINSURANCE PREMIUM'
                        || r.prrd_ri_prem
                        || '  DOES NOT ADD UP TO THE RETAINED PREMIUM'
                        || r.facres_prem
                        || ' ..');
                END IF;

                IF     ROUND (r.own_pct / 100 * v_reinsure_amt) !=
                       ROUND (r.own_si)
                   AND   ABS (
                             (  ROUND (r.own_si)
                              - ROUND (r.own_pct / 100 * v_reinsure_amt)))
                       / ABS (v_reinsure_amt) >
                       0.1
                   AND NVL (r.prrd_special_comp_retention, 0) = 0
                THEN
                    /*raise_error (   v_err_msg
                                 || ' THE OWN RETENTION %'
                                 || r.own_pct
                                 || '  MULTIPLIED BY THE REINSURABLE AMOUNT '
                                 || v_reinsure_amt
                                 || ' DOES NOT ADD UP TO THE RETAINED SI '
                                 || r.own_si
                                 || ' ..'
                                );*/
                    NULL;
                ELSIF     ROUND (r.trts_pct / 100 * v_reinsure_amt) !=
                          ROUND (r.trts_si)
                      AND   ABS (
                                  ROUND (r.trts_si)
                                - ROUND (r.trts_pct / 100 * v_reinsure_amt))
                          / ABS (v_reinsure_amt) >
                          0.1
                THEN
                    --               raise_error
                    --                    (   v_err_msg
                    --                     || ' THE TREATIES %''S '
                    --                     || r.trts_pct
                    --                     || ' MULTIPLIED BY THE REINSURABLE AMOUNT '
                    --                     || v_reinsure_amt
                    --                     || ' DOES NOT ADD UP TO THE TOTAL TREATIES SUM ASSUREDS'
                    --                     || r.trts_si||';'||NVL(r.prev_comp_retention,0) || ' ..'  );
                    NULL;
                ELSIF     ROUND (r.facres_pct / 100 * v_reinsure_amt) !=
                          ROUND (r.facres_si)
                      AND   ABS (
                                  ROUND (r.facres_si)
                                - ROUND (r.facres_pct / 100 * v_reinsure_amt))
                          / ABS (v_reinsure_amt) >
                          0.1
                THEN
                    raise_error (
                           v_err_msg
                        || ' THE FACULTATIVE %''S '
                        || r.facres_pct
                        || ' MULTIPLIED BY THE REINSURABLE AMOUNT '
                        ||                              /*r.ipu_reinsure_amt*/
                           v_reinsure_amt
                        || ' DOES NOT ADD UP TO THE TOTAL FACULATIVE SUM ASSUREDS'
                        || r.facres_si
                        || ' ..');
                END IF;

                IF --SIGN(NVL(R.TRTS_COMM_AMT,0)) != SIGN(NVL(R.TRTS_EQ_COMM_AMT,0))
                      --OR SIGN(NVL(R.TRTS_COMM_AMT,0)) != SIGN(NVL(R.TRTS_NETEQ_COMM_AMT,0))
                                                                          --OR
                      ABS (NVL (r.trts_comm_amt, 0)) <
                      ABS (NVL (r.trts_eq_comm_amt, 0))
                   OR ABS (NVL (r.trts_comm_amt, 0)) <
                      ABS (NVL (r.trts_neteq_comm_amt, 0))
                   OR ABS (NVL (r.trts_comm_amt, 0)) !=
                        ABS (NVL (r.trts_eq_comm_amt, 0))
                      + ABS (NVL (r.trts_neteq_comm_amt, 0))
                THEN
                    -- RAISE_ERROR('THE TREATY EQ COMMISSION DO NOT ADD UP TOT:'||NVL(R.TRTS_COMM_AMT,0)||' EQ:'||NVL(R.TRTS_EQ_COMM_AMT,0)||' NETEQ:'||NVL(R.TRTS_NETEQ_COMM_AMT,0));
                    NULL;
                END IF;

                IF   --SIGN(NVL(R.TRTS_PREM,0)) != SIGN(NVL(R.TRTS_EQ_PREM,0))
               --OR SIGN(NVL(R.TRTS_PREM,0)) != SIGN(NVL(R.TRTS_NETEQ_PREM,0))
                                                                          --OR
                    ABS (NVL (r.trts_prem, 0)) <
                    ABS (NVL (r.trts_eq_prem, 0))
                 OR ABS (NVL (r.trts_prem, 0)) <
                    ABS (NVL (r.trts_neteq_prem, 0))
                 OR ABS (NVL (r.trts_prem, 0)) !=
                      ABS (NVL (r.trts_eq_prem, 0))
                    + ABS (NVL (r.trts_neteq_prem, 0))
                THEN
                    --RAISE_ERROR('THE TREATY EQ PREMIUMS DO NOT ADD UP TOT:'||NVL(R.TRTS_PREM,0)||' EQ:'||NVL(R.TRTS_EQ_PREM,0)||' NETEQ:'||NVL(R.TRTS_NETEQ_PREM,0));
                    NULL;
                END IF;

                FOR fc IN cur_fc (r.prrd_code)
                LOOP
                    IF NVL (fc.fc_rate, 0) NOT BETWEEN 0 AND 100
                    THEN
                        raise_error (
                               v_err_msg
                            || ' - '
                            || fc.fc_agent_sht_desc
                            || ' THE FACRE CESSION RATES MUST BE BETWEEN 0 AND 100 ..');
                    ELSIF ABS (
                                ROUND (
                                      NVL (fc.fc_comm_rate, 0)
                                    / 100
                                    * NVL (fc.fc_net_less_eq_prem, 0))
                              - ROUND (NVL (fc.fc_net_less_eq_comm, 0))) >
                          1
                    THEN
                        -- RAISE_ERROR(v_err_msg||' - '||fc.FC_AGENT_SHT_DESC||' THE FACRE COMM RATES '||NVL(fc.FC_COMM_RATE,0)||' MULTIPLIED BY PREMIUM TO FACRE '||NVL(fc.FC_NET_LESS_EQ_PREM,0)||' DOESNT ADD UP TO THE FACRE COMMISSIONS '||fc.FC_NET_LESS_EQ_COMM||' ..');
                        NULL;
                    ELSIF ABS (
                                ROUND (
                                      NVL (fc.fc_earthqke_comm_rate, 0)
                                    / 100
                                    * NVL (fc.fc_earthqke_prem, 0))
                              - ROUND (NVL (fc.fc_earthqke_comm, 0))) >
                          1
                    THEN
                        --  RAISE_ERROR(v_err_msg||' - '||fc.FC_AGENT_SHT_DESC||' THE FACRE EQ COMM RATES '||NVL(fc.FC_EARTHQKE_COMM_RATE,0)||' MULTIPLIED BY PREMIUM TO FACRE '||NVL(fc.FC_PREM_AMT,0)||' DOESNT ADD UP TO THE FACRE COMMISSIONS '||fc.FC_COMM_AMT||' ..');
                        NULL;
                    ELSIF --SIGN(NVL(fc.FC_PREM_AMT,0)) != SIGN(NVL(fc.FC_EARTHQKE_PREM,0))
                             --OR SIGN(NVL(fc.FC_PREM_AMT,0)) != SIGN(NVL(fc.FC_NET_LESS_EQ_PREM,0))
                                                                          --OR
                             ABS (NVL (fc.fc_prem_amt, 0)) <
                             ABS (NVL (fc.fc_earthqke_prem, 0))
                          OR ABS (NVL (fc.fc_prem_amt, 0)) <
                             ABS (NVL (fc.fc_net_less_eq_prem, 0))
                          OR ABS (
                                   ABS (NVL (fc.fc_prem_amt, 0))
                                 - (  ABS (NVL (fc.fc_earthqke_prem, 0))
                                    + ABS (NVL (fc.fc_net_less_eq_prem, 0)))) >
                             1
                    THEN
                        -- RAISE_ERROR('THE FACULTATIVE EQ PREMIUMS DO NOT ADD UP TOT:'||NVL(fc.FC_PREM_AMT,0)||' EQ:'||NVL(fc.FC_EARTHQKE_PREM,0)||' NETEQ:'||NVL(fc.FC_NET_LESS_EQ_PREM,0));
                        NULL;
                    ELSIF --SIGN(NVL(fc.FC_COMM_AMT,0)) != SIGN(NVL(fc.FC_EARTHQKE_COMM,0))
                             --OR SIGN(NVL(fc.FC_COMM_AMT,0)) != SIGN(NVL(fc.FC_NET_LESS_EQ_COMM,0))
                                                                          --OR
                             ABS (NVL (fc.fc_comm_amt, 0)) <
                             ABS (NVL (fc.fc_earthqke_comm, 0))
                          OR ABS (NVL (fc.fc_comm_amt, 0)) <
                             ABS (NVL (fc.fc_net_less_eq_comm, 0))
                          OR ABS (
                                   ABS (NVL (fc.fc_comm_amt, 0))
                                 - (  ABS (NVL (fc.fc_earthqke_comm, 0))
                                    + ABS (NVL (fc.fc_net_less_eq_comm, 0)))) >
                             1
                    THEN
                        --RAISE_ERROR('THE FACULTATIVE COMMISSION DO NOT ADD UP TOT:'||NVL(fc.FC_COMM_AMT,0)||' EQ:'||NVL(fc.FC_EARTHQKE_COMM,0)||' NETEQ:'||NVL(fc.FC_NET_LESS_EQ_COMM,0));
                        NULL;
                    END IF;
                END LOOP;

                --ELSIF R.POL_POLICY_STATUS != 'CO' AND R.PIL_SECT_TYPE = 'EQ' THEN
                FOR trt IN cur_trts (r.prrd_code)
                LOOP
                    IF NVL (trt.ptotr_rate, 0) NOT BETWEEN 0 AND 100
                    THEN
                        NULL;
                    -- raise_error  (   v_err_msg || ' - ' || trt.ptotr_trs_sht_desc || ' THE TREATY CESSION RATES MUST BE BETWEEN 0 AND 100 ..' );
                    ELSIF ABS (
                                ROUND (
                                      NVL (trt.ptotr_earthqke_comm_rate, 0)
                                    / 100
                                    * NVL (trt.ptotr_earthqke_prem, 0))
                              - ROUND (NVL (trt.ptotr_earthqke_comm, 0))) >
                          1
                    THEN
                        --RAISE_ERROR(v_err_msg||' - '||trt.PTOTR_TRS_SHT_DESC||' THE TREATY EARTHQUAKE COMMISSION RATE  '||trt.PTOTR_EARTHQKE_COMM_RATE||' MULTIPLIED BY PREMIUM '||trt.PTOTR_EARTHQKE_PREM||' DOES NOT ADD UP TO COMMISSIONS '||trt.PTOTR_EARTHQKE_COMM||' ..');
                        NULL;
                    ELSIF ABS (
                                ROUND (
                                      NVL (trt.ptotr_comm_rate, 0)
                                    / 100
                                    * NVL (trt.ptotr_net_less_eq_prem, 0))
                              - ROUND (NVL (trt.ptotr_net_less_eq_comm, 0))) >
                          1
                    THEN
                        --RAISE_ERROR(v_err_msg||' - '||trt.PTOTR_TRS_SHT_DESC||' THE TREATY NON-EARTHQUAKE COMMISSION RATE  '||trt.PTOTR_COMM_RATE||' MULTIPLIED BY PREMIUM '||trt.PTOTR_NET_LESS_EQ_PREM||' DOES NOT ADD UP TO COMMISSIONS '||trt.PTOTR_NET_LESS_EQ_COMM||' ..');
                        NULL;
                    ELSIF --SIGN(NVL(trt.PTOTR_TRT_PREM_PCUR,0)) != SIGN(NVL(trt.PTOTR_EARTHQKE_PREM,0))
                             --OR SIGN(NVL(trt.PTOTR_TRT_PREM_PCUR,0)) != SIGN(NVL(trt.PTOTR_NET_LESS_EQ_PREM,0))
                                                                          --OR
                             ABS (NVL (trt.ptotr_trt_prem_pcur, 0)) <
                             ABS (NVL (trt.ptotr_earthqke_prem, 0))
                          OR ABS (NVL (trt.ptotr_trt_prem_pcur, 0)) <
                             ABS (NVL (trt.ptotr_net_less_eq_prem, 0))
                          OR ABS (
                                   ABS (NVL (trt.ptotr_trt_prem_pcur, 0))
                                 - (  ABS (NVL (trt.ptotr_earthqke_prem, 0))
                                    + ABS (
                                          NVL (trt.ptotr_net_less_eq_prem, 0)))) >
                             1
                    THEN
                        --RAISE_ERROR('THE TREATY EQ PREMIUMS DO NOT ADD UP TOT:'||NVL(trt.PTOTR_TRT_PREM_PCUR,0)||' EQ:'||NVL(trt.PTOTR_EARTHQKE_PREM,0)||' NETEQ:'||NVL(trt.PTOTR_NET_LESS_EQ_PREM,0));
                        NULL;
                    ELSIF --SIGN(NVL(trt.PTOTR_TRT_COMM_PCUR,0)) != SIGN(NVL(trt.PTOTR_EARTHQKE_COMM,0))
                             --OR SIGN(NVL(trt.PTOTR_TRT_COMM_PCUR,0)) != SIGN(NVL(trt.PTOTR_NET_LESS_EQ_COMM,0))
                                                                          --OR
                             ABS (NVL (trt.ptotr_trt_comm_pcur, 0)) <
                             ABS (NVL (trt.ptotr_earthqke_comm, 0))
                          OR ABS (NVL (trt.ptotr_trt_comm_pcur, 0)) <
                             ABS (NVL (trt.ptotr_net_less_eq_comm, 0))
                          OR ABS (
                                   ABS (NVL (trt.ptotr_trt_comm_pcur, 0))
                                 - (  ABS (NVL (trt.ptotr_earthqke_comm, 0))
                                    + ABS (
                                          NVL (trt.ptotr_net_less_eq_comm, 0)))) >
                             1
                    THEN
                        -- RAISE_ERROR('THE TREATY EQ COMMISSION DO NOT ADD UP TOT:'||NVL(trt.PTOTR_TRT_COMM_PCUR,0)||' EQ:'||NVL(trt.PTOTR_EARTHQKE_COMM,0)||' NETEQ:'||NVL(trt.PTOTR_NET_LESS_EQ_COMM,0));
                        NULL;
                    END IF;
                END LOOP;

                FOR pool IN cur_pool (r.prrd_code)
                LOOP
                    IF NVL (pool.prprd_rein_pool_rate, 0) NOT BETWEEN 0
                                                                  AND 100
                    THEN
                        raise_error (
                               v_err_msg
                            || ' THE POOL CESSION RATES MUST BE BETWEEN 0 AND 100 ..');
                    END IF;
                END LOOP;
            END IF;
        END LOOP;
    --      RAISE_ERROR('HERE');
    END;


    --   PROCEDURE check_clm_ri (
    --      v_clm_no     IN   VARCHAR2,
    --      v_type       IN   VARCHAR2,
    --      v_trans_no   IN   NUMBER
    --   )
    --   IS
    --      v_trt_rate     NUMBER;
    --      v_own_rate     NUMBER;
    --      v_facre_rate   NUMBER;
    --      v_pool_rate    NUMBER;
    --
    --      CURSOR cur_revision
    --      IS
    --         SELECT clmrev_amt, clmrev_comp_retention, clmrev_man_amount,
    --                clmrev_quota_amount, clmrev_fstsup_amount,
    --                clmrev_secsup_amount, clmrev_facre_amount,
    --                clmrev_rein_pool_amt, clmrev_facre_ob_amount,
    --                  NVL (clmrev_comp_retention, 0)
    --                + NVL (clmrev_man_amount, 0)
    --                + NVL (clmrev_quota_amount, 0)
    --                + NVL (clmrev_fstsup_amount, 0)
    --                + NVL (clmrev_secsup_amount, 0)
    --                + NVL (clmrev_facre_amount, 0)
    --                + NVL (clmrev_facre_ob_amount, 0)
    --                + NVL (clmrev_rein_pool_amt, 0) tot
    --           FROM gin_claim_revisions
    --          WHERE clmrev_cmb_claim_no = v_clm_no
    --            AND clmrev_ggt_trans_no = v_trans_no;
    --
    --      CURSOR cur_recoveries
    --      IS
    --         SELECT clmr_amount, clmr_comp_retention, clmr_man_amount,
    --                clmr_quota_amount, clmr_fstsup_amount, clmr_secsup_amount,
    --                clmr_facre_amount, clmr_pool_amount, clmr_facre_ob_amount,
    --                  NVL (clmr_comp_retention, 0)
    --                + NVL (clmr_man_amount, 0)
    --                + NVL (clmr_quota_amount, 0)
    --                + NVL (clmr_fstsup_amount, 0)
    --                + NVL (clmr_secsup_amount, 0)
    --                + NVL (clmr_facre_amount, 0)
    --                + NVL (clmr_facre_ob_amount, 0)
    --                + NVL (clmr_pool_amount, 0) tot
    --           FROM gin_claim_recoveries
    --          WHERE clmr_cmb_claim_no = v_clm_no
    --                AND clmr_ggt_trans_no = v_trans_no;
    --
    --      CURSOR cur_payments
    --      IS
    --         SELECT cpv_amount, cpv_comp_retention, cpv_man_amount,
    --                cpv_quota_amount, cpv_fstsup_amount, cpv_secsup_amount,
    --                cpv_facre_amount, cpv_pool_amount, cpv_facre_ob_amount,
    --                  NVL (cpv_comp_retention, 0)
    --                + NVL (cpv_man_amount, 0)
    --                + NVL (cpv_quota_amount, 0)
    --                + NVL (cpv_fstsup_amount, 0)
    --                + NVL (cpv_secsup_amount, 0)
    --                + NVL (cpv_facre_amount, 0)
    --                + NVL (cpv_facre_ob_amount, 0)
    --                + +NVL (cpv_pool_amount, 0) tot
    --           FROM gin_clm_payment_vouchers
    --          WHERE cpv_cmb_claim_no = v_clm_no AND cpv_ggt_trans_no = v_trans_no;
    --   BEGIN
    --      BEGIN
    --         SELECT cmb_comp_retention_rate
    --           INTO v_own_rate
    --           FROM gin_claim_master_bookings
    --          WHERE cmb_claim_no = v_clm_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE OWN RETENTION RATE..');
    --      END;
    --
    --      BEGIN
    --         SELECT   SUM (NVL (ctrtc_rate, 0))
    --             INTO v_trt_rate
    --             FROM gin_claim_treaty_cessions
    --            WHERE ctrtc_cmb_claim_no = v_clm_no
    --         GROUP BY ctrtc_cmb_claim_no;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_trt_rate := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE TREATIES CESSION RATE..');
    --      END;
    --
    --      BEGIN
    --         SELECT   SUM (NVL (fcc_rate, 0))
    --             INTO v_facre_rate
    --             FROM gin_claim_facre_cessions
    --            WHERE fcc_cmb_claim_no = v_clm_no
    --         GROUP BY fcc_cmb_claim_no;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_facre_rate := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE FACULTATIVE CESSION RATE..');
    --      END;
    --
    --      BEGIN
    --         SELECT SUM (NVL (crpc_rate, 0))
    --           INTO v_pool_rate
    --           FROM gin_claim_rein_pool_cessions
    --          WHERE crpc_cmb_claim_no = v_clm_no;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_pool_rate := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE POOL CESSION RATE..');
    --      END;
    --
    --      IF ROUND (  NVL (v_own_rate, 0)
    --                + NVL (v_trt_rate, 0)
    --                + NVL (v_facre_rate, 0)
    --                + NVL (v_pool_rate, 0),
    --                2
    --               ) != 100
    --      THEN
    --         raise_error
    --            (   'THE OWN RETENTION RATE PLUS TREATIES CESSION RATES DOES NOT ADD UP TO 100% OWN=='
    --             || v_own_rate
    --             || ' TREATY  '
    --             || v_trt_rate
    --             || ' v_facre_rate   '
    --             || v_facre_rate
    --             || ' v_pool_rate   '
    --             || v_pool_rate
    --             || ' SUM IS==='
    --             || 1
    --            );
    --      END IF;
    --
    --      IF NVL (v_type, 'LR') IN ('LR', 'LOP', 'LO')
    --      THEN
    --         FOR crs IN cur_revision
    --         LOOP
    --            IF ABS (NVL (crs.clmrev_amt, 0) - NVL (crs.tot, 0)) > 1
    --            THEN
    --               raise_error
    --                  (   'REVISIONS OWN RETENTION PLUS TREATY/FACULTATIVE CESSION DOES NOT ADD UP TO TOTAL AMOUNT='
    --                   || crs.clmrev_amt
    --                   || ';'
    --                   || crs.tot
    --                  );
    --            END IF;
    --         --raise_error('SDFSDFSDF='||crs.clmrev_amt||'='||crs.tot);
    --         END LOOP;
    --      END IF;
    --
    --      IF NVL (v_type, 'CR') IN ('CR', 'CS')
    --      THEN
    --         FOR crv IN cur_recoveries
    --         LOOP
    --            IF ABS (NVL (crv.clmr_amount, 0) - NVL (crv.tot, 0)) > 1
    --            THEN
    --               raise_error
    --                  (   'RECOVERIES/SALVAGES OWN RETENTION PLUS TREATY/FACULTATIVE CESSION DOES NOT ADD UP TO TOTAL AMOUNT-'
    --                   || crv.clmr_amount
    --                   || ';'
    --                   || crv.tot
    --                  );
    --            END IF;
    --         END LOOP;
    --      END IF;
    --
    --      IF NVL (v_type, 'CF') IN ('CP', 'CF')
    --      THEN
    --         FOR cpv IN cur_payments
    --         LOOP
    --            IF ABS (NVL (cpv.cpv_amount, 0) - NVL (cpv.tot, 0)) > 1
    --            THEN
    --               raise_error (   'PAYMENTS OWN RETENTION '
    --                            || cpv.cpv_comp_retention
    --                            || 'PLUS TREATY/FACULTATIVE CESSION'
    --                            || cpv.cpv_man_amount
    --                            || '+'
    --                            || cpv.cpv_quota_amount
    --                            || '+'
    --                            || cpv.cpv_fstsup_amount
    --                            || '+'
    --                            || cpv.cpv_secsup_amount
    --                            || '+'
    --                            || cpv.cpv_facre_amount
    --                            || '+'
    --                            || cpv.cpv_pool_amount
    --                            || 'DOES NOT ADD UP TO TOTAL AMOUNT'
    --                            || ';'
    --                            || cpv.cpv_amount
    --                            || ';'
    --                            || cpv.tot
    --                           );
    --            END IF;
    --         END LOOP;
    --      END IF;
    --
    --      IF NVL (v_type, 'LR') NOT IN
    --             ('LR', 'LOP', 'CF', 'CP', 'CR', 'CS', 'LO', 'CPO', 'CFO', 'LRV')
    --      THEN
    --         raise_error ('TREATY CESSIONS COULD NOT BE VALIDATED..==' || v_type);
    --      END IF;
    --   END;
    --PROCEDURE check_clm_ri (
    --      v_clm_no     IN   VARCHAR2,
    --      v_type       IN   VARCHAR2,
    --      v_trans_no   IN   NUMBER
    --   )
    --   IS
    --      v_trt_rate     NUMBER;
    --      v_own_rate     NUMBER;
    --      v_facre_rate   NUMBER;
    --      v_pool_rate    NUMBER;
    --
    --      CURSOR cur_revision
    --      IS
    --         SELECT clmrev_amt, clmrev_comp_retention, clmrev_man_amount,
    --                clmrev_quota_amount, clmrev_fstsup_amount,
    --                clmrev_secsup_amount, clmrev_facre_amount,
    --                clmrev_rein_pool_amt, clmrev_facre_ob_amount,
    --                  NVL (clmrev_comp_retention, 0)
    --                + ROUND(NVL (clmrev_man_amount, 0))
    --                + ROUND(NVL (clmrev_quota_amount, 0))
    --                + ROUND(NVL (clmrev_fstsup_amount, 0))
    --                + ROUND(NVL (clmrev_secsup_amount, 0))
    --                + ROUND(NVL (clmrev_facre_amount, 0))
    --                + ROUND(NVL (clmrev_facre_ob_amount, 0))
    --                + ROUND(NVL (clmrev_rein_pool_amt, 0)) tot
    --           FROM gin_claim_revisions
    --          WHERE clmrev_cmb_claim_no = v_clm_no
    --            AND clmrev_ggt_trans_no = v_trans_no;
    --
    --      CURSOR cur_recoveries
    --      IS
    --         SELECT clmr_amount, clmr_comp_retention, clmr_man_amount,
    --                clmr_quota_amount, clmr_fstsup_amount, clmr_secsup_amount,
    --                clmr_facre_amount, clmr_pool_amount, clmr_facre_ob_amount,
    --                  NVL (clmr_comp_retention, 0)
    --                + NVL (clmr_man_amount, 0)
    --                + NVL (clmr_quota_amount, 0)
    --                + NVL (clmr_fstsup_amount, 0)
    --                + NVL (clmr_secsup_amount, 0)
    --                + NVL (clmr_facre_amount, 0)
    --                + NVL (clmr_facre_ob_amount, 0)
    --                + NVL (clmr_pool_amount, 0) tot
    --           FROM gin_claim_recoveries
    --          WHERE clmr_cmb_claim_no = v_clm_no
    --                AND clmr_ggt_trans_no = v_trans_no;
    --
    --      CURSOR cur_payments
    --      IS
    --         SELECT cpv_amount, cpv_comp_retention, cpv_man_amount,
    --                cpv_quota_amount, cpv_fstsup_amount, cpv_secsup_amount,
    --                cpv_facre_amount, cpv_pool_amount, cpv_facre_ob_amount,
    --                  NVL (cpv_comp_retention, 0)
    --                + NVL (cpv_man_amount, 0)
    --                + NVL (cpv_quota_amount, 0)
    --                + NVL (cpv_fstsup_amount, 0)
    --                + NVL (cpv_secsup_amount, 0)
    --                + NVL (cpv_facre_amount, 0)
    --                + NVL (cpv_facre_ob_amount, 0)
    --                + +NVL (cpv_pool_amount, 0) tot
    --           FROM gin_clm_payment_vouchers
    --          WHERE cpv_cmb_claim_no = v_clm_no AND cpv_ggt_trans_no = v_trans_no;
    --   BEGIN
    --      BEGIN
    --         SELECT cmb_comp_retention_rate
    --           INTO v_own_rate
    --           FROM gin_claim_master_bookings
    --          WHERE cmb_claim_no = v_clm_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE OWN RETENTION RATE..');
    --      END;
    --
    --      BEGIN
    --         SELECT   SUM (NVL (ctrtc_rate, 0))
    --             INTO v_trt_rate
    --             FROM gin_claim_treaty_cessions
    --            WHERE ctrtc_cmb_claim_no = v_clm_no
    --         GROUP BY ctrtc_cmb_claim_no;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_trt_rate := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE TREATIES CESSION RATE..');
    --      END;
    --
    --      BEGIN
    --         SELECT   SUM (NVL (fcc_rate, 0))
    --             INTO v_facre_rate
    --             FROM gin_claim_facre_cessions
    --            WHERE fcc_cmb_claim_no = v_clm_no
    --         GROUP BY fcc_cmb_claim_no;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_facre_rate := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE FACULTATIVE CESSION RATE..');
    --      END;
    --
    --      BEGIN
    --         SELECT SUM (NVL (crpc_rate, 0))
    --           INTO v_pool_rate
    --           FROM gin_claim_rein_pool_cessions
    --          WHERE crpc_cmb_claim_no = v_clm_no;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_pool_rate := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE POOL CESSION RATE..');
    --      END;
    --
    --      IF ROUND (  NVL (v_own_rate, 0)
    --                + NVL (v_trt_rate, 0)
    --                + NVL (v_facre_rate, 0)
    --                + NVL (v_pool_rate, 0),
    --                2
    --               ) != 100
    --      THEN
    --         raise_error
    --            (   'THE OWN RETENTION RATE PLUS TREATIES CESSION RATES DOES NOT ADD UP TO 100% OWN=='
    --             || v_own_rate
    --             || ' TREATY  '
    --             || v_trt_rate
    --             || ' v_facre_rate   '
    --             || v_facre_rate
    --             || ' v_pool_rate   '
    --             || v_pool_rate
    --             || ' SUM IS==='
    --             || 1
    --            );
    --      END IF;
    --
    --      IF NVL (v_type, 'LR') IN ('LR', 'LOP', 'LO')
    --      THEN
    --         FOR crs IN cur_revision
    --         LOOP
    --            IF ABS (NVL (crs.clmrev_amt, 0) - NVL (crs.tot, 0)) > 10
    --            THEN
    --               raise_error
    --                  (   'REVISIONS OWN RETENTION PLUS TREATY/FACULTATIVE CESSION DOES NOT ADD UP TO TOTAL AMOUNT='
    --                   || crs.clmrev_amt
    --                   || ';'
    --                   || crs.tot
    --                  );
    --            END IF;
    --      ---- raise_error('SDFSDFSDF='||crs.clmrev_amt||'='||crs.tot);
    --         END LOOP;
    --      END IF;
    --
    --      IF NVL (v_type, 'CR') IN ('CR', 'CS')
    --      THEN
    --         FOR crv IN cur_recoveries
    --         LOOP
    --            IF ABS (NVL (crv.clmr_amount, 0) - NVL (crv.tot, 0)) > 10
    --            THEN
    --               raise_error
    --                  (   'RECOVERIES/SALVAGES OWN RETENTION PLUS TREATY/FACULTATIVE CESSION DOES NOT ADD UP TO TOTAL AMOUNT-'
    --                   || crv.clmr_amount
    --                   || ';'
    --                   || crv.tot
    --                  );
    --            END IF;
    --         END LOOP;
    --      END IF;
    --
    --      IF NVL (v_type, 'CF') IN ('CP', 'CF')
    --      THEN
    --         FOR cpv IN cur_payments
    --         LOOP
    --            IF ABS (NVL (cpv.cpv_amount, 0) - NVL (cpv.tot, 0)) > 1
    --            THEN
    --               raise_error (   'PAYMENTS OWN RETENTION '
    --                            || cpv.cpv_comp_retention
    --                            || 'PLUS TREATY/FACULTATIVE CESSION'
    --                            || cpv.cpv_man_amount
    --                            || '+'
    --                            || cpv.cpv_quota_amount
    --                            || '+'
    --                            || cpv.cpv_fstsup_amount
    --                            || '+'
    --                            || cpv.cpv_secsup_amount
    --                            || '+'
    --                            || cpv.cpv_facre_amount
    --                            || '+'
    --                            || cpv.cpv_pool_amount
    --                            || 'DOES NOT ADD UP TO TOTAL AMOUNT'
    --                            || ';'
    --                            || cpv.cpv_amount
    --                            || ';'
    --                            || cpv.tot
    --                           );
    --            END IF;
    --         END LOOP;
    --      END IF;
    --
    --      IF NVL (v_type, 'LR') NOT IN
    --             ('LR', 'LOP', 'CF', 'CP', 'CR', 'CS', 'LO', 'CPO', 'CFO', 'LRV')
    --      THEN
    --         raise_error ('TREATY CESSIONS COULD NOT BE VALIDATED..==' || v_type);
    --      END IF;
    --   END;
    --   PROCEDURE check_clm_ri (v_clm_no     IN VARCHAR2,----22/11/2019
    --                           v_type       IN VARCHAR2,
    --                           v_trans_no   IN NUMBER)
    --   IS
    --      v_trt_rate     NUMBER;
    --      v_own_rate     NUMBER;
    --      v_facre_rate   NUMBER;
    --      v_pool_rate    NUMBER;
    --
    --      CURSOR cur_revision
    --      IS
    --         SELECT clmrev_amt,
    --                clmrev_comp_retention,
    --                clmrev_man_amount,
    --                clmrev_quota_amount,
    --                clmrev_fstsup_amount,
    --                clmrev_secsup_amount,
    --                clmrev_facre_amount,
    --                clmrev_rein_pool_amt,
    --                clmrev_facre_ob_amount,
    --                  NVL (clmrev_comp_retention, 0)
    --                + NVL (clmrev_man_amount, 0)
    --                + NVL (clmrev_quota_amount, 0)
    --                + NVL (clmrev_fstsup_amount, 0)
    --                + NVL (clmrev_secsup_amount, 0)
    --                + NVL (clmrev_facre_amount, 0)
    --                + NVL (clmrev_facre_ob_amount, 0)
    --                + NVL (clmrev_rein_pool_amt, 0)
    --                   tot
    --           FROM gin_claim_revisions
    --          WHERE     clmrev_cmb_claim_no = v_clm_no
    --                AND clmrev_ggt_trans_no = v_trans_no;
    --
    --      CURSOR cur_recoveries
    --      IS
    --         SELECT clmr_amount,
    --                clmr_comp_retention,
    --                clmr_man_amount,
    --                clmr_quota_amount,
    --                clmr_fstsup_amount,
    --                clmr_secsup_amount,
    --                clmr_facre_amount,
    --                clmr_pool_amount,
    --                clmr_facre_ob_amount,
    --                  NVL (clmr_comp_retention, 0)
    --                + NVL (clmr_man_amount, 0)
    --                + NVL (clmr_quota_amount, 0)
    --                + NVL (clmr_fstsup_amount, 0)
    --                + NVL (clmr_secsup_amount, 0)
    --                + NVL (clmr_facre_amount, 0)
    --                + NVL (clmr_facre_ob_amount, 0)
    --                + NVL (clmr_pool_amount, 0)
    --                   tot
    --           FROM gin_claim_recoveries
    --          WHERE     clmr_cmb_claim_no = v_clm_no
    --                AND clmr_ggt_trans_no = v_trans_no;
    --
    --      CURSOR cur_payments
    --      IS
    --         SELECT cpv_amount,
    --                cpv_comp_retention,
    --                cpv_man_amount,
    --                cpv_quota_amount,
    --                cpv_fstsup_amount,
    --                cpv_secsup_amount,
    --                cpv_facre_amount,
    --                cpv_pool_amount,
    --                cpv_facre_ob_amount,
    --                  NVL (cpv_comp_retention, 0)
    --                + NVL (cpv_man_amount, 0)
    --                + NVL (cpv_quota_amount, 0)
    --                + NVL (cpv_fstsup_amount, 0)
    --                + NVL (cpv_secsup_amount, 0)
    --                + NVL (cpv_facre_amount, 0)
    --                + NVL (cpv_facre_ob_amount, 0)
    --                + +NVL (cpv_pool_amount, 0)
    --                   tot
    --           FROM gin_clm_payment_vouchers
    --          WHERE cpv_cmb_claim_no = v_clm_no AND cpv_ggt_trans_no = v_trans_no;
    --   BEGIN
    --      BEGIN
    --         SELECT cmb_comp_retention_rate
    --           INTO v_own_rate
    --           FROM gin_claim_master_bookings
    --          WHERE cmb_claim_no = v_clm_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE OWN RETENTION RATE..');
    --      END;
    --
    --      BEGIN
    --           SELECT SUM (NVL (ctrtc_rate, 0))
    --             INTO v_trt_rate
    --             FROM gin_claim_treaty_cessions
    --            WHERE ctrtc_cmb_claim_no = v_clm_no
    --         GROUP BY ctrtc_cmb_claim_no;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_trt_rate := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE TREATIES CESSION RATE..');
    --      END;
    --
    --      BEGIN
    --           SELECT SUM (NVL (fcc_rate, 0))
    --             INTO v_facre_rate
    --             FROM gin_claim_facre_cessions
    --            WHERE fcc_cmb_claim_no = v_clm_no
    --         GROUP BY fcc_cmb_claim_no;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_facre_rate := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE FACULTATIVE CESSION RATE..');
    --      END;
    --
    --      BEGIN
    --         SELECT SUM (NVL (crpc_rate, 0))
    --           INTO v_pool_rate
    --           FROM gin_claim_rein_pool_cessions
    --          WHERE crpc_cmb_claim_no = v_clm_no;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_pool_rate := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('ERROR GETTING THE POOL CESSION RATE..');
    --      END;
    --
    --      IF ROUND (
    --              NVL (v_own_rate, 0)
    --            + NVL (v_trt_rate, 0)
    --            + NVL (v_facre_rate, 0)
    --            + NVL (v_pool_rate, 0),
    --            2) != 100
    --      THEN
    --         raise_error (
    --               'THE OWN RETENTION RATE PLUS TREATIES CESSION RATES DOES NOT ADD UP TO 100% OWN=='
    --            || v_own_rate
    --            || ' TREATY  '
    --            || v_trt_rate
    --            || ' v_facre_rate   '
    --            || v_facre_rate
    --            || ' v_pool_rate   '
    --            || v_pool_rate
    --            || ' SUM IS==='
    --            || 1);
    --      END IF;
    --
    --      IF NVL (v_type, 'LR') IN ('LR', 'LOP', 'LO')
    --      THEN
    --         FOR crs IN cur_revision
    --         LOOP
    --            IF ABS (NVL (crs.clmrev_amt, 0) - NVL (crs.tot, 0)) > 5
    --            THEN
    --               raise_error (
    --                     'REVISIONS OWN RETENTION PLUS TREATY/FACULTATIVE CESSION DOES NOT ADD UP TO TOTAL AMOUNT='
    --                  || crs.clmrev_amt
    --                  || ';'
    --                  || crs.tot);
    --            END IF;
    --         --raise_error('SDFSDFSDF='||crs.clmrev_amt||'='||crs.tot);
    --         END LOOP;
    --      END IF;
    --
    --      IF NVL (v_type, 'CR') IN ('CR', 'CS')
    --      THEN
    --         FOR crv IN cur_recoveries
    --         LOOP
    --            IF ABS (NVL (crv.clmr_amount, 0) - NVL (crv.tot, 0)) > 1
    --            THEN
    --               raise_error (
    --                     'RECOVERIES/SALVAGES OWN RETENTION PLUS TREATY/FACULTATIVE CESSION DOES NOT ADD UP TO TOTAL AMOUNT-'
    --                  || crv.clmr_amount
    --                  || ';'
    --                  || crv.tot);
    --            END IF;
    --         END LOOP;
    --      END IF;
    --
    --      IF NVL (v_type, 'CF') IN ('CP', 'CF')
    --      THEN
    --         FOR cpv IN cur_payments
    --         LOOP
    --            IF ABS (NVL (cpv.cpv_amount, 0) - NVL (cpv.tot, 0)) > 4
    --            THEN
    --               raise_error (
    --                     'PAYMENTS OWN RETENTION '
    --                  || cpv.cpv_comp_retention
    --                  || 'PLUS TREATY/FACULTATIVE CESSION'
    --                  || cpv.cpv_man_amount
    --                  || '+'
    --                  || cpv.cpv_quota_amount
    --                  || '+'
    --                  || cpv.cpv_fstsup_amount
    --                  || '+'
    --                  || cpv.cpv_secsup_amount
    --                  || '+'
    --                  || cpv.cpv_facre_amount
    --                  || '+'
    --                  || cpv.cpv_pool_amount
    --                  || 'DOES NOT ADD UP TO TOTAL AMOUNT'
    --                  || ';'
    --                  || cpv.cpv_amount
    --                  || ';'
    --                  || cpv.tot);
    --            END IF;
    --         END LOOP;
    --      END IF;
    --
    --      IF NVL (v_type, 'LR') NOT IN
    --            ('LR', 'LOP', 'CF', 'CP', 'CR', 'CS', 'LO', 'CPO', 'CFO', 'LRV')
    --      THEN
    --         raise_error ('TREATY CESSIONS COULD NOT BE VALIDATED..==' || v_type);
    --      END IF;
    --   END;
    PROCEDURE check_clm_ri (v_clm_no     IN VARCHAR2,
                            v_type       IN VARCHAR2,
                            v_trans_no   IN NUMBER)
    IS
        v_trt_rate     NUMBER;
        v_own_rate     NUMBER;
        v_facre_rate   NUMBER;
        v_pool_rate    NUMBER;

        CURSOR cur_revision IS
            SELECT clmrev_amt,
                   clmrev_comp_retention,
                   clmrev_man_amount,
                   clmrev_quota_amount,
                   clmrev_fstsup_amount,
                   clmrev_secsup_amount,
                   clmrev_facre_amount,
                   clmrev_rein_pool_amt,
                   clmrev_facre_ob_amount,
                     NVL (clmrev_comp_retention, 0)
                   + NVL (clmrev_man_amount, 0)
                   + NVL (clmrev_quota_amount, 0)
                   + NVL (clmrev_fstsup_amount, 0)
                   + NVL (clmrev_secsup_amount, 0)
                   + NVL (clmrev_facre_amount, 0)
                   + NVL (clmrev_facre_ob_amount, 0)
                   + NVL (clmrev_rein_pool_amt, 0)    tot
              FROM gin_claim_revisions
             WHERE     clmrev_cmb_claim_no = v_clm_no
                   AND clmrev_ggt_trans_no = v_trans_no;

        CURSOR cur_recoveries IS
            SELECT clmr_amount,
                   clmr_comp_retention,
                   clmr_man_amount,
                   clmr_quota_amount,
                   clmr_fstsup_amount,
                   clmr_secsup_amount,
                   clmr_facre_amount,
                   clmr_pool_amount,
                   clmr_facre_ob_amount,
                     NVL (clmr_comp_retention, 0)
                   + NVL (clmr_man_amount, 0)
                   + NVL (clmr_quota_amount, 0)
                   + NVL (clmr_fstsup_amount, 0)
                   + NVL (clmr_secsup_amount, 0)
                   + NVL (clmr_facre_amount, 0)
                   + NVL (clmr_facre_ob_amount, 0)
                   + NVL (clmr_pool_amount, 0)    tot
              FROM gin_claim_recoveries
             WHERE     clmr_cmb_claim_no = v_clm_no
                   AND clmr_ggt_trans_no = v_trans_no;

        CURSOR cur_payments IS
            SELECT cpv_amount,
                   cpv_comp_retention,
                   cpv_man_amount,
                   cpv_quota_amount,
                   cpv_fstsup_amount,
                   cpv_secsup_amount,
                   cpv_facre_amount,
                   cpv_pool_amount,
                   cpv_facre_ob_amount,
                     NVL (cpv_comp_retention, 0)
                   + NVL (cpv_man_amount, 0)
                   + NVL (cpv_quota_amount, 0)
                   + NVL (cpv_fstsup_amount, 0)
                   + NVL (cpv_secsup_amount, 0)
                   + NVL (cpv_facre_amount, 0)
                   + NVL (cpv_facre_ob_amount, 0)
                   + NVL (cpv_pool_amount, 0)    tot
              FROM gin_clm_payment_vouchers
             WHERE     cpv_cmb_claim_no = v_clm_no
                   AND cpv_ggt_trans_no = v_trans_no;
    BEGIN
        BEGIN
            SELECT cmb_comp_retention_rate
              INTO v_own_rate
              FROM gin_claim_master_bookings
             WHERE cmb_claim_no = v_clm_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('ERROR GETTING THE OWN RETENTION RATE..');
        END;

        BEGIN
              SELECT SUM (NVL (ctrtc_rate, 0))
                INTO v_trt_rate
                FROM gin_claim_treaty_cessions
               WHERE ctrtc_cmb_claim_no = v_clm_no
            GROUP BY ctrtc_cmb_claim_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_trt_rate := 0;
            WHEN OTHERS
            THEN
                raise_error ('ERROR GETTING THE TREATIES CESSION RATE..');
        END;

        BEGIN
              SELECT SUM (NVL (fcc_rate, 0))
                INTO v_facre_rate
                FROM gin_claim_facre_cessions
               WHERE fcc_cmb_claim_no = v_clm_no
            GROUP BY fcc_cmb_claim_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_facre_rate := 0;
            WHEN OTHERS
            THEN
                raise_error ('ERROR GETTING THE FACULTATIVE CESSION RATE..');
        END;

        BEGIN
            SELECT SUM (NVL (crpc_rate, 0))
              INTO v_pool_rate
              FROM gin_claim_rein_pool_cessions
             WHERE crpc_cmb_claim_no = v_clm_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_pool_rate := 0;
            WHEN OTHERS
            THEN
                raise_error ('ERROR GETTING THE POOL CESSION RATE..');
        END;

        IF ROUND (
                 NVL (v_own_rate, 0)
               + NVL (v_trt_rate, 0)
               + NVL (v_facre_rate, 0)
               + NVL (v_pool_rate, 0),
               2) !=
           100
        THEN
            raise_error (
                   'THE OWN RETENTION RATE PLUS TREATIES CESSION RATES DOES NOT ADD UP TO 100% OWN=='
                || v_own_rate
                || ' TREATY  '
                || v_trt_rate
                || ' v_facre_rate   '
                || v_facre_rate
                || ' v_pool_rate   '
                || v_pool_rate
                || ' SUM IS==='
                || 1);
        END IF;

        IF NVL (v_type, 'LR') IN ('LR', 'LOP', 'LO')
        THEN
            FOR crs IN cur_revision
            LOOP
                IF ABS (NVL (crs.clmrev_amt, 0) - NVL (crs.tot, 0)) > 5
                THEN
                    raise_error (
                           'REVISIONS OWN RETENTION PLUS TREATY/FACULTATIVE CESSION DOES NOT ADD UP TO TOTAL AMOUNT='
                        || crs.clmrev_amt
                        || ';'
                        || crs.tot);
                END IF;
            --raise_error('SDFSDFSDF='||crs.clmrev_amt||'='||crs.tot);
            END LOOP;
        END IF;

        IF NVL (v_type, 'CR') IN ('CR', 'CS')
        THEN
            FOR crv IN cur_recoveries
            LOOP
                IF ABS (NVL (crv.clmr_amount, 0) - NVL (crv.tot, 0)) > 1
                THEN
                    raise_error (
                           'RECOVERIES/SALVAGES OWN RETENTION PLUS TREATY/FACULTATIVE CESSION DOES NOT ADD UP TO TOTAL AMOUNT-'
                        || crv.clmr_amount
                        || ';'
                        || crv.tot);
                END IF;
            END LOOP;
        END IF;

        IF NVL (v_type, 'CF') IN ('CP', 'CF')
        THEN
            FOR cpv IN cur_payments
            LOOP
                --            IF ABS (NVL (cpv.cpv_amount, 0) - NVL (cpv.tot, 0)) > 4
                IF ABS (NVL (cpv.cpv_amount, 0)) - ABS (NVL (cpv.tot, 0)) > 4
                THEN
                    raise_error (
                           'PAYMENTS OWN RETENTION '
                        || cpv.cpv_comp_retention
                        || 'PLUS TREATY/FACULTATIVE CESSION'
                        || cpv.cpv_man_amount
                        || '+'
                        || cpv.cpv_quota_amount
                        || '+'
                        || cpv.cpv_fstsup_amount
                        || '+'
                        || cpv.cpv_secsup_amount
                        || '+'
                        || cpv.cpv_facre_amount
                        || '+'
                        || cpv.cpv_pool_amount
                        || 'DOES NOT ADD UP TO TOTAL AMOUNT'
                        || ';'
                        || cpv.cpv_amount
                        || ';'
                        || cpv.tot);
                END IF;
            END LOOP;
        END IF;

        IF NVL (v_type, 'LR') NOT IN ('LR',
                                      'LOP',
                                      'CF',
                                      'CP',
                                      'CR',
                                      'CS',
                                      'LO',
                                      'CPO',
                                      'CFO',
                                      'LRV')
        THEN
            raise_error (
                'TREATY CESSIONS COULD NOT BE VALIDATED..==' || v_type);
        END IF;
    END;

    PROCEDURE round_uw_ri_to_own (v_tran_no    NUMBER,
                                  v_ipu_code   NUMBER DEFAULT NULL         --,
                                                                  --v_batch_no NUMBER
                                                                  )
    IS
        v_risk_ri_si       NUMBER := 0;
        v1                 NUMBER := 0;
        --rpct NUMBER :=0;
        v_err_msg          VARCHAR2 (500);
        v_cover_duration   NUMBER := 0;

        CURSOR cur_rec IS
            SELECT ipu_pol_policy_no,
                   ipu_code,
                   prrd_code,
                   prrd_idx,
                   ipu_endos_diff_amt,
                   prrd_ri_prem,
                   ipu_reinsure_amt,
                   ipu_property_id,
                   ipu_item_desc,
                   prrd_net_prem,
                   NVL (prrd_comp_net_rate, 0)           own_pct,
                   NVL (trts_pct, 0)                     trts_pct,
                   NVL (facres_pct, 0)                   facres_pct,
                   ROUND (
                         NVL (prrd_comp_net_rate, 0)
                       + NVL (trts_pct, 0)
                       + NVL (facres_pct, 0))            tot_pct,
                   NVL (trts_comm_amt, 0)                trts_comm_amt,
                   NVL (trts_comm_pct, 0)                trts_comm_pct,
                   NVL (facres_comm_pct, 0)              facres_comm_pct,
                   NVL (facres_comm_amt, 0)              facres_comm_amt,
                   NVL (prrd_net_prem, 0)                own_prem,
                   NVL (trts_prem, 0)                    trts_prem,
                   NVL (facres_prem, 0)                  facres_prem,
                     NVL (prrd_net_prem, 0)
                   + NVL (trts_prem, 0)
                   + NVL (facres_prem, 0)                tot_ceded_prem,
                   NVL (prrd_comp_retention, 0)          own_si,
                   NVL (trts_si, 0)                      trts_si,
                   NVL (facres_si, 0)                    facres_si,
                     NVL (prrd_comp_retention, 0)
                   + NVL (facres_si, 0)
                   + NVL (trts_si, 0)                    tot_ceded_si,
                   ggt_uw_clm_tran,
                   (ipu_eff_wet - ggt_effective_date)    remaining_days,
                   (ipu_eff_wet - ipu_eff_wef)           cover_duration,
                   ipu_gp
              FROM gin_policies,
                   gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_gis_transactions,
                   (  SELECT ptotr_prrd_code,
                             SUM (NVL (ptotr_cession_pct, 0))
                                 trts_pct,
                             SUM (NVL (ptotr_trt_comm_pcur, 0))
                                 trts_comm_amt,
                             SUM (NVL (ptotr_comm_rate, 0))
                                 trts_comm_pct,
                             SUM (NVL (ptotr_trt_prem_pcur, 0))
                                 trts_prem,
                             SUM (NVL (ptotr_trt_si_pcur, 0))
                                 trts_si
                        FROM gin_policy_rein_risk_details
                       WHERE ptotr_ggt_tran_no = v_tran_no
                    GROUP BY ptotr_prrd_code),
                   (  SELECT fc_prrd_code,
                             SUM (NVL (fc_rate, 0))          facres_pct,
                             SUM (NVL (fc_comm_rate, 0))     facres_comm_pct,
                             SUM (NVL (fc_comm_amt, 0))      facres_comm_amt,
                             SUM (NVL (fc_prem_amt, 0))      facres_prem,
                             SUM (NVL (fc_amount, 0))        facres_si
                        FROM gin_facre_cessions
                       WHERE fc_ggt_tran_no = v_tran_no
                    GROUP BY fc_prrd_code)
             WHERE     pol_batch_no = ipu_pol_batch_no
                   AND ipu_code = prrd_ipu_code
                   AND prrd_code = ptotr_prrd_code(+)
                   AND prrd_code = fc_prrd_code(+)
                   AND prrd_tran_no = ggt_trans_no
                   AND ipu_code = NVL (v_ipu_code, ipu_code)
                   AND prrd_tran_no = v_tran_no;
    BEGIN
        FOR r IN cur_rec
        LOOP
            IF     r.tot_pct = 100
               AND NVL (r.prrd_ri_prem, 0) != NVL (r.tot_ceded_prem, 0)
               AND ABS (NVL (r.prrd_ri_prem, 0) - NVL (r.tot_ceded_prem, 0)) <
                   3
            THEN
                UPDATE gin_policy_risk_ri_dtls
                   SET prrd_net_prem =
                             NVL (prrd_net_prem, 0)
                           + (  NVL (r.prrd_ri_prem, 0)
                              - NVL (r.tot_ceded_prem, 0))
                 WHERE prrd_code = r.prrd_code;
            END IF;
        END LOOP;
    END;

    PROCEDURE update_pre_debit_registers (v_pol_batch_no      IN NUMBER,
                                          v_trans_no          IN NUMBER,
                                          v_rnd_param         IN NUMBER,
                                          v_orig_trans_date   IN DATE,
                                          v_pre_code          IN NUMBER)
    IS
        v_duties              NUMBER := 0;
        v_tran_type           VARCHAR2 (5);
        v_tran_sign           NUMBER := 0;
        v_tran_code           VARCHAR2 (5);
        al_id                 NUMBER;
        v_drcr                VARCHAR2 (25);
        v_prem_type           VARCHAR2 (2);
        v_sd                  NUMBER := 0;
        v_tl                  NUMBER := 0;
        v_phfund              NUMBER := 0;
        v_wtht                NUMBER := 0;
        v_eq_prem             NUMBER := 0;
        v_non_eq_prem         NUMBER := 0;
        v_seq                 NUMBER;
        v_com_ret             NUMBER := 0;
        v_rsk_net_prem        NUMBER := 0;
        v_seq_rsk             NUMBER;
        v_cnt                 NUMBER := 0;
        v_errmsg              VARCHAR2 (200);
        v_pol_stat            VARCHAR2 (20);
        v_net_rate            NUMBER := 0;
        v_open_cover          VARCHAR2 (1) := 'N';
        v_uw_yr               NUMBER;
        v_rsk_tot_net_prem    NUMBER;
        v_pol_net_prem        NUMBER;
        v_pol_prem            NUMBER;
        v_rsk_prem            NUMBER;
        v_mand_rate           NUMBER := 0;
        v_mand_prem           NUMBER := 0;
        v_mand_com            NUMBER := 0;
        v_mand_eq_prem        NUMBER := 0;
        v_mand_noneq_prem     NUMBER := 0;
        v_mand_eq_com         NUMBER := 0;
        v_mand_noneq_com      NUMBER := 0;
        v_qs_rate             NUMBER := 0;
        v_qs_com              NUMBER := 0;
        v_qs_prem             NUMBER := 0;
        v_qs_eq_prem          NUMBER := 0;
        v_qs_noneq_prem       NUMBER := 0;
        v_qs_eq_com           NUMBER := 0;
        v_qs_noneq_com        NUMBER := 0;
        v_fstsup_rate         NUMBER := 0;
        v_fstsup_com          NUMBER := 0;
        v_fstsup_prem         NUMBER := 0;
        v_fstsup_eq_prem      NUMBER := 0;
        v_fstsup_noneq_prem   NUMBER := 0;
        v_fstsup_eq_com       NUMBER := 0;
        v_fstsup_noneq_com    NUMBER := 0;
        v_secsup_prem         NUMBER := 0;
        v_secsup_rate         NUMBER := 0;
        v_secsup_com          NUMBER := 0;
        v_secsup_eq_prem      NUMBER := 0;
        v_secsup_noneq_prem   NUMBER := 0;
        v_secsup_eq_com       NUMBER := 0;
        v_secsup_noneq_com    NUMBER := 0;
        v_facre_rate          NUMBER := 0;
        v_facre_com           NUMBER := 0;
        v_facre_prem          NUMBER := 0;
        v_facre_eq_prem       NUMBER := 0;
        v_facre_noneq_prem    NUMBER := 0;
        v_facre_eq_com        NUMBER := 0;
        v_facre_noneq_com     NUMBER := 0;

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;

        CURSOR cur_all_risks IS
            SELECT *
              FROM gin_insured_property_unds
             WHERE ipu_pol_batch_no = v_pol_batch_no;

        CURSOR cur_rsk_rein (v_ipu_code NUMBER, v_trans_no NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))    mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))    mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_cession_pct, 0)),
                             0))    mand_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))    qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))    qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_cession_pct, 0)),
                             0))    qs_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))    fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))    fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_cession_pct, 0)),
                             0))    fstsup_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))    secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))    secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_cession_pct, 0)),
                             0))    secsup_pct
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ipu_code = v_ipu_code
                     AND ptotr_ggt_tran_no = v_trans_no
            GROUP BY ptotr_ipu_code;

        --PTOTR_REFUND_PREM, PTOTR_REFUND_COM
        /*************************treaty level summary************************/
        CURSOR cur_pol_rein (v_trans_no NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))    mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))    mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))    qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))    qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))    fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))    fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))    secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))    secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_com
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ggt_tran_no = v_trans_no
            GROUP BY ptotr_ggt_tran_no;

        --group by PTOTR_GGT_TRAN_NO,TRS_TRTG_CODE
        CURSOR cur_policy_own_ret (v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   ROUND (
                       SUM (
                             NVL (prrd_ri_prem, 0)
                           * NVL (prrd_com_retention_rate, 0)
                           / 100),
                       v_rnd_param)
                       comp_gross_ret,
                   ROUND (
                       SUM (
                             NVL (prrd_ri_prem, 0)
                           * NVL (prrd_comp_net_rate, 0)
                           / 100),
                       v_rnd_param)
                       comp_net_ret
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_own_ret (v_ipucode NUMBER, v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   ROUND (
                       SUM (
                             NVL (prrd_ri_prem, 0)
                           * NVL (prrd_com_retention_rate, 0)
                           / 100),
                       v_rnd_param)
                       comp_gross_ret,
                   ROUND (SUM (NVL (prrd_com_retention_rate, 0)), 5)
                       comp_gross_rate,
                   ROUND (
                       SUM (
                             NVL (prrd_ri_prem, 0)
                           * NVL (prrd_comp_net_rate, 0)
                           / 100),
                       v_rnd_param)
                       comp_net_ret,
                   ROUND (SUM (NVL (prrd_comp_net_rate, 0)), 5)
                       comp_net_rate
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND ipu_code = v_ipucode
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        CURSOR cur_facre IS
            SELECT SUM (NVL (fc_comm_amt, 0))             facre_com,
                   SUM (NVL (fc_prem_amt, 0))             facre_prem,
                   SUM (NVL (fc_earthqke_prem, 0))        facre_eq_prem,
                   SUM (NVL (fc_net_less_eq_prem, 0))     facre_noneq_prem,
                   SUM (NVL (fc_earthqke_comm, 0))        facre_eq_comm,
                   SUM (NVL (fc_net_less_eq_comm, 0))     facre_noneq_comm
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_trans_no;

        CURSOR cur_risk_facre (v_ipu_code NUMBER)
        IS
            SELECT SUM (NVL (fc_comm_amt, 0))             facre_com,
                   SUM (NVL (fc_prem_amt, 0))             facre_prem,
                   SUM (NVL (fc_rate, 0))                 facre_rate,
                   SUM (NVL (fc_earthqke_prem, 0))        facre_eq_prem,
                   SUM (NVL (fc_net_less_eq_prem, 0))     facre_noneq_prem,
                   SUM (NVL (fc_earthqke_comm, 0))        facre_eq_comm,
                   SUM (NVL (fc_net_less_eq_comm, 0))     facre_noneq_comm
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_trans_no AND fc_ipu_code = v_ipu_code;
    BEGIN
        FOR cur_pol_rec IN cur_pol
        LOOP
            v_tran_sign := SIGN (cur_pol_rec.pol_tot_endos_diff_amt);
            v_drcr := cur_pol_rec.pol_drcr_no;

            --    IF cur_pol_rec.pol_drcr_no IS NULL THEN
            --        RAISE_ERROR('UNABLE TO RETRIEVE POLICY DEBIT OR CREDIT NOTE CREDIT NOTE NUMBER..');
            --    END IF ;
            BEGIN
                SELECT SUM (
                           DECODE (UPPER (trnt_code),
                                   'TL', NVL (ptx_amount, 0),
                                   0))                      tl,
                       SUM (
                           DECODE (UPPER (trnt_code),
                                   'PHFUND', NVL (ptx_amount, 0),
                                   0))                      phfund,
                       SUM (
                           DECODE (UPPER (trnt_code),
                                   'SD', NVL (ptx_amount, 0),
                                   'MPSD', NVL (ptx_amount, 0),
                                   0))                      sd,
                       SUM (
                           DECODE (UPPER (trnt_code),
                                   'TL', 0,
                                   'SD', 0,
                                   'PHFUND', 0,
                                   'MPSD', 0,
                                   NVL (ptx_amount, 0)))    other_duties
                  INTO v_tl,
                       v_phfund,
                       v_sd,
                       v_duties
                  FROM gin_policy_taxes, gin_transaction_types
                 WHERE     ptx_trac_trnt_code = trnt_code
                       AND ptx_pol_batch_no = v_pol_batch_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                    v_duties := 0;
                WHEN OTHERS
                THEN
                    raise_error ('ERROR, UNABLE TO RETRIEVE POLICY TAXES..');
            END;

            v_duties := NVL (v_duties, 0) + NVL (v_phfund, 0);

            BEGIN
                SELECT ggt_btr_trans_code
                  INTO v_tran_code
                  FROM gin_gis_transactions
                 WHERE ggt_trans_no = v_trans_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                    raise_error (
                        'ERROR :- UNABLE TO GET THE TRANSACTION TYPE CODE WHILE UPDATING THE REGISTER...');
                WHEN TOO_MANY_ROWS
                THEN
                    raise_error (
                        'ERROR :- UNABLE TO GET THE TRANSACTION TYPE CODE WHILE UPDATING THE REGISTER.QUERY RETURNED TOO MANY ROWS...');
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR, UNABLE TO RETRIEVE TRANSACTION CODE..');
            END;

            IF cur_pol_rec.pol_policy_status != 'CO'
            THEN
                v_pol_stat := cur_pol_rec.pol_policy_status;
            ELSE
                BEGIN
                    SELECT pol_policy_status
                      INTO v_pol_stat
                      FROM gin_policies
                     WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'UNABLE TO RETRIEVE THE PREVIOUS TRANSACTION STATUS');
                END;
            END IF;

            --DBMS_OUTPUT.PUT_LINE('here 5');
            BEGIN
                SELECT DECODE (v_tran_sign,
                               1, btr_debit_code,
                               btr_credit_code)
                  INTO v_tran_type
                  FROM gin_business_transactions
                 WHERE btr_trans_code = v_pol_stat;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                           'THE TRANSACTIONS CODES HAVE NOT BEEN DEFINED FOR THE '
                        || cur_pol_rec.pol_policy_status
                        || ' TRANSACTION ..');
                WHEN OTHERS
                THEN
                    raise_error (
                           'UNABLE TO RETRIEVE THE TRANSACTIONS CODES FOR THE '
                        || v_pol_stat
                        || ' TRANSACTION ..');
            END;

            --DBMS_OUTPUT.PUT_LINE('here 6');
            IF v_pol_stat IN ('NB', 'SP')
            THEN
                v_prem_type := 'NB';
            ELSIF v_pol_stat IN ('EN',
                                 'EX',
                                 'DC',
                                 'CN',
                                 'RE')
            THEN
                IF SIGN (cur_pol_rec.pol_tot_endos_diff_amt) = 1
                THEN
                    v_prem_type := 'AP';
                ELSE
                    v_prem_type := 'RP';
                END IF;
            ELSIF v_pol_stat IN ('RN')
            THEN
                v_prem_type := 'RN';
            ELSE
                raise_error (
                       'PREM TYPE CODE FOR TRANSACTION TYPE '
                    || v_pol_stat
                    || ' NOT TAKEN CARE OF..');
            END IF;

            --DBMS_OUTPUT.PUT_LINE('here 7');
            /******************get treaty details***************************/
            FOR cur_pol_rein_rec IN cur_pol_rein (v_trans_no)
            LOOP
                v_mand_prem := cur_pol_rein_rec.mand_prem;
                v_mand_eq_prem := cur_pol_rein_rec.mand_eq_prem;
                v_mand_noneq_prem := cur_pol_rein_rec.mand_noneq_prem;
                v_mand_com := cur_pol_rein_rec.mand_com;
                v_mand_eq_com := cur_pol_rein_rec.mand_eq_com;
                v_mand_noneq_com := cur_pol_rein_rec.mand_noneq_com;
                v_qs_prem := cur_pol_rein_rec.qs_prem;
                v_qs_eq_prem := cur_pol_rein_rec.qs_eq_prem;
                v_qs_noneq_prem := cur_pol_rein_rec.qs_noneq_prem;
                v_qs_com := cur_pol_rein_rec.qs_com;
                v_qs_eq_com := cur_pol_rein_rec.qs_eq_com;
                v_qs_noneq_com := cur_pol_rein_rec.qs_noneq_com;
                v_fstsup_prem := cur_pol_rein_rec.fstsup_prem;
                v_fstsup_eq_prem := cur_pol_rein_rec.fstsup_eq_prem;
                v_fstsup_noneq_prem := cur_pol_rein_rec.fstsup_noneq_prem;
                v_fstsup_com := cur_pol_rein_rec.fstsup_com;
                v_fstsup_eq_com := cur_pol_rein_rec.fstsup_eq_com;
                v_fstsup_noneq_com := cur_pol_rein_rec.fstsup_noneq_com;
                v_secsup_prem := cur_pol_rein_rec.secsup_prem;
                v_secsup_eq_prem := cur_pol_rein_rec.secsup_eq_prem;
                v_secsup_noneq_prem := cur_pol_rein_rec.secsup_noneq_prem;
                v_secsup_com := cur_pol_rein_rec.secsup_com;
                v_secsup_eq_com := cur_pol_rein_rec.secsup_eq_com;
                v_secsup_noneq_com := cur_pol_rein_rec.secsup_noneq_com;
            END LOOP;                                      ---cur_pol_rein_rec

            ---facre sessions
            --DBMS_OUTPUT.PUT_LINE('here 8');
            FOR cur_facre_rec IN cur_facre
            LOOP
                v_facre_prem :=
                    NVL (v_facre_prem, 0) + NVL (cur_facre_rec.facre_prem, 0);
                v_facre_eq_prem :=
                      NVL (v_facre_eq_prem, 0)
                    + NVL (cur_facre_rec.facre_eq_prem, 0);
                v_facre_noneq_prem :=
                      NVL (v_facre_noneq_prem, 0)
                    + NVL (cur_facre_rec.facre_noneq_prem, 0);
                v_facre_com :=
                    NVL (v_facre_com, 0) + NVL (cur_facre_rec.facre_com, 0);
            END LOOP;

            v_com_ret := 0;
            v_rsk_net_prem := 0;

            --DBMS_OUTPUT.PUT_LINE('here 9');
            FOR cur_policy_own_ret_rec IN cur_policy_own_ret (v_trans_no)
            LOOP
                v_com_ret := cur_policy_own_ret_rec.comp_gross_ret;
                v_pol_net_prem := cur_policy_own_ret_rec.comp_net_ret;
                v_eq_prem := cur_policy_own_ret_rec.comp_eq_prem;
                v_non_eq_prem := cur_policy_own_ret_rec.comp_non_eq_prem;
            END LOOP;

            --DBMS_OUTPUT.PUT_LINE('here 10');
            --check if a policy summary record exists
            /* For Open Cover product policies and Binder policies, the  a new record is created in the policy summaries table for every transaction year. Unlike other
            policies where a record is created strictly per underwriting year as managed by the system..'*/
            IF     NVL (v_open_cover, 'N') = 'N'
               AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'N'
            THEN
                v_uw_yr := cur_pol_rec.pol_uw_year;
            ELSE
                v_uw_yr := TO_CHAR (cur_pol_rec.pol_wef_dt, 'YYYY');
            END IF;

            BEGIN
                SELECT COUNT ('X')
                  INTO v_cnt
                  FROM gin_pre_debit_policy_summary
                 WHERE     pdps_pdp_code = v_pre_code
                       AND pdps_pol_policy_no = cur_pol_rec.pol_policy_no
                       AND pdps_uw_year = v_uw_yr;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR DETERMINING IF POLICY SUMMARY RECORD ALREADY EXISTS..');
            END;

            /*************end of treaty details****************************/
            --IF v_tran_code !='CO' THEN
            --DBMS_OUTPUT.PUT_LINE('inserting POLICY register');
            --DBMS_OUTPUT.PUT_LINE('here 11');
            BEGIN
                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || gin_pdpr_code_seq.NEXTVAL)
                  INTO v_seq
                  FROM DUAL;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. PLEASE CONTACT TURNKE AFRICA FOR SUPPORT...');
            END;

            /************************maintain policy summary*************************/
            --DBMS_OUTPUT.PUT_LINE('here 12');
            IF v_cnt IS NULL OR v_cnt = 0
            THEN
                BEGIN
                    INSERT INTO gin_pre_debit_policy_summary (
                                    pdps_code,
                                    pdps_pol_policy_no,
                                    pdps_uw_year,
                                    pdps_sum_insured,
                                    pdps_sum_insured_bcur,
                                    pdps_commission,
                                    pdps_commission_bcur,
                                    pdps_premium,
                                    pdps_premium_bcur,
                                    pdps_cur_code,
                                    pdps_brn_code,
                                    pdps_cur_symbol,
                                    pdps_brn_sht_desc,
                                    pdps_prp_code,
                                    pdps_inception_uwyr,
                                    pdps_pro_code,
                                    pdps_pro_sht_desc,
                                    pdps_uwyr_length,
                                    pdps_policy_cover_to,
                                    pdps_policy_cover_from,
                                    pdps_stamp_duty,
                                    pdps_stamp_duty_bcur,
                                    pdps_tl,
                                    pdps_tl_bcur,
                                    pdps_other_duties,
                                    pdps_other_duties_bcur,
                                    pdps_wtht,
                                    pdps_wtht_bcur,
                                    pdps_prem_tax,
                                    pdps_prem_tax_bcur,
                                    pdps_agnt_agent_code,
                                    pdps_agnt_sht_desc,
                                    pdps_pdp_code)
                             VALUES (
                                 TO_NUMBER (
                                        TO_CHAR (SYSDATE, 'YY')
                                     || gin_pdps_code_seq.NEXTVAL),
                                 cur_pol_rec.pol_policy_no,
                                 v_uw_yr,
                                 DECODE (cur_pol_rec.pol_policy_status,
                                         'DC', 0,
                                         cur_pol_rec.pol_si_diff),
                                 DECODE (
                                     cur_pol_rec.pol_policy_status,
                                     'DC', 0,
                                       ROUND (cur_pol_rec.pol_si_diff)
                                     * cur_pol_rec.pol_cur_rate),
                                 cur_pol_rec.pol_comm_endos_diff_amt,
                                 ROUND (
                                       cur_pol_rec.pol_comm_endos_diff_amt
                                     * cur_pol_rec.pol_cur_rate),
                                 cur_pol_rec.pol_tot_endos_diff_amt,
                                 ROUND (
                                       cur_pol_rec.pol_tot_endos_diff_amt
                                     * cur_pol_rec.pol_cur_rate),
                                 cur_pol_rec.pol_cur_code,
                                 cur_pol_rec.pol_brn_code,
                                 cur_pol_rec.pol_cur_symbol,
                                 cur_pol_rec.pol_brn_sht_desc,
                                 cur_pol_rec.pol_prp_code,
                                 cur_pol_rec.pol_inception_uwyr,
                                 cur_pol_rec.pol_pro_code,
                                 cur_pol_rec.pol_pro_sht_desc,
                                 cur_pol_rec.pol_uwyr_length,
                                 cur_pol_rec.pol_policy_cover_to,
                                 cur_pol_rec.pol_policy_cover_from,
                                 v_sd,
                                 ROUND (v_sd * cur_pol_rec.pol_cur_rate),
                                 v_tl,
                                 ROUND (v_tl * cur_pol_rec.pol_cur_rate),
                                 v_duties,
                                 ROUND (v_duties * cur_pol_rec.pol_cur_rate),
                                 cur_pol_rec.pol_wtht,
                                 ROUND (
                                       cur_pol_rec.pol_wtht
                                     * cur_pol_rec.pol_cur_rate),
                                 cur_pol_rec.pol_prem_tax,
                                 ROUND (
                                       cur_pol_rec.pol_prem_tax
                                     * cur_pol_rec.pol_cur_rate),
                                 cur_pol_rec.pol_agnt_agent_code,
                                 cur_pol_rec.pol_agnt_sht_desc,
                                 v_pre_code);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO INSERT POLICY REGISTER...');
                END;
            ELSE
                BEGIN
                    UPDATE gin_pre_debit_policy_summary
                       SET pdps_sum_insured =
                                 NVL (pdps_sum_insured, 0)
                               + DECODE (cur_pol_rec.pol_policy_status,
                                         'DC', 0,
                                         NVL (cur_pol_rec.pol_si_diff, 0)),
                           pdps_commission =
                                 NVL (pdps_commission, 0)
                               + NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0),
                           pdps_premium =
                                 NVL (pdps_premium, 0)
                               + NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0),
                           pdps_policy_cover_to =
                               cur_pol_rec.pol_policy_cover_to,
                           pdps_policy_cover_from =
                               cur_pol_rec.pol_policy_cover_from,
                           pdps_stamp_duty =
                               NVL (pdps_stamp_duty, 0) + NVL (v_sd, 0),
                           pdps_tl = NVL (pdps_tl, 0) + NVL (v_tl, 0),
                           pdps_other_duties =
                               NVL (pdps_other_duties, 0) + NVL (v_duties, 0),
                           pdps_wtht =
                                 NVL (pdps_wtht, 0)
                               + NVL (cur_pol_rec.pol_wtht, 0),
                           pdps_prem_tax =
                                 NVL (pdps_prem_tax, 0)
                               + NVL (cur_pol_rec.pol_prem_tax, 0),
                           pdps_uwyr_length = cur_pol_rec.pol_uwyr_length,
                           pdps_sum_insured_bcur =
                                 NVL (pdps_sum_insured_bcur, 0)
                               + ROUND (
                                       DECODE (
                                           cur_pol_rec.pol_policy_status,
                                           'DC', 0,
                                           NVL (cur_pol_rec.pol_si_diff, 0))
                                     * cur_pol_rec.pol_cur_rate),
                           pdps_commission_bcur =
                                 NVL (pdps_commission_bcur, 0)
                               + ROUND (
                                       NVL (
                                           cur_pol_rec.pol_comm_endos_diff_amt,
                                           0)
                                     * cur_pol_rec.pol_cur_rate),
                           pdps_premium_bcur =
                                 NVL (pdps_premium_bcur, 0)
                               + ROUND (
                                       NVL (
                                           cur_pol_rec.pol_tot_endos_diff_amt,
                                           0)
                                     * cur_pol_rec.pol_cur_rate),
                           pdps_stamp_duty_bcur =
                                 NVL (pdps_stamp_duty_bcur, 0)
                               + ROUND (
                                     NVL (v_sd, 0) * cur_pol_rec.pol_cur_rate),
                           pdps_tl_bcur =
                                 NVL (pdps_tl_bcur, 0)
                               + ROUND (
                                     NVL (v_tl, 0) * cur_pol_rec.pol_cur_rate),
                           pdps_other_duties_bcur =
                                 NVL (pdps_other_duties_bcur, 0)
                               + ROUND (
                                       NVL (v_duties, 0)
                                     * cur_pol_rec.pol_cur_rate),
                           pdps_wtht_bcur =
                                 NVL (pdps_wtht_bcur, 0)
                               + ROUND (
                                       NVL (cur_pol_rec.pol_wtht, 0)
                                     * cur_pol_rec.pol_cur_rate),
                           pdps_prem_tax_bcur =
                                 NVL (pdps_prem_tax_bcur, 0)
                               + ROUND (
                                       NVL (cur_pol_rec.pol_prem_tax, 0)
                                     * cur_pol_rec.pol_cur_rate)
                     WHERE     pdps_pdp_code = v_pre_code
                           AND pdps_pol_policy_no = cur_pol_rec.pol_policy_no
                           AND pdps_uw_year = v_uw_yr;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO UPDATE POLICY REGISTER...');
                END;
            END IF;

            --raise_error(122);
            /***********************end policy summary***************************/
            BEGIN
                --PR_CODE, PR_POL_POLICY_NO, PR_POL_REN_ENDOS_NO, PR_POL_BATCH_NO, PR_AGNT_AGENT_CODE,
                --PR_AGNT_SHT_DESC, PR_WEF_DT, PR_WET_DT, PR_CUR_CODE, PR_BRN_CODE, PR_PREM_TYPE
                --DBMS_OUTPUT.PUT_LINE('here 14');
                --       IF cur_pol_rec.POL_TOT_PHFUND IS NULL THEN
                --             RAISE_APPLICATION_ERROR(20010,'Error :- Unable to insert record into the policy register dur to phfund.');
                --       ELSE
                INSERT INTO gin_pre_debit_policy_register (
                                pdpr_code,
                                pdpr_pol_policy_no,
                                pdpr_pol_ren_endos_no,
                                pdpr_pol_batch_no,
                                pdpr_agnt_agent_code,
                                pdpr_agnt_sht_desc,
                                pdpr_wef_dt,
                                pdpr_wet_dt,
                                pdpr_uw_year,
                                pdpr_sum_insured,
                                pdpr_comm_amt,
                                pdpr_transaction_date,
                                pdpr_tran_type,
                                pdpr_nett_premium,
                                pdpr_cur_code,
                                pdpr_client_policy_number,
                                pdpr_brn_code,
                                pdpr_cur_rate,
                                pdpr_comm_endos_diff_amt,
                                pdpr_fap,
                                pdpr_gp,
                                pdpr_endos_diff_amt,
                                pdpr_cur_symbol,
                                pdpr_brn_sht_desc,
                                pdpr_prp_code,
                                pdpr_current_status,
                                pdpr_inception_uwyr,
                                pdpr_pro_code,
                                pdpr_pro_sht_desc,
                                pdpr_prev_batch_no,
                                pdpr_uwyr_length,
                                pdpr_coinsure_pct,
                                pdpr_policy_cover_to,
                                pdpr_policy_cover_from,
                                pdpr_ggt_trans_no,
                                pdpr_policy_status,
                                pdpr_drcr_no,
                                pdpr_prem_type,
                                pdpr_si_diff,
                                pdpr_policy_type,
                                pdpr_stamp_duty,
                                pdpr_tl,
                                pdpr_other_duties,
                                pdpr_wtht,
                                pdpr_prem_tax,
                                pdpr_mand_prem,
                                pdpr_mand_com,
                                pdpr_quota_prem,
                                pdpr_quota_com,
                                pdpr_fstsup_prem,
                                pdpr_fstsup_com,
                                pdpr_secsup_prem,
                                pdpr_secsup_com,
                                pdpr_facre_prem,
                                pdpr_facre_com,
                                pdpr_comp_net_prem,
                                pdpr_comp_net_com,
                                pdpr_coin_fee_amt,
                                pdpr_mand_eq_prem,
                                pdpr_mand_noneq_prem,
                                pdpr_fstsup_eq_prem,
                                pdpr_fstsup_noneq_prem,
                                pdpr_secsup_eq_prem,
                                pdpr_secsup_noneq_prem,
                                pdpr_quota_eq_prem,
                                pdpr_quota_noneq_prem,
                                pdpr_facre_eq_prem,
                                pdpr_facre_noneq_prem,
                                pdpr_earthquake_prem,
                                pdpr_ri_net_less_eq_prem,
                                pdpr_mand_eq_com,
                                pdpr_mand_noneq_com,
                                pdpr_quota_eq_com,
                                pdpr_quota_noneq_com,
                                pdpr_fstsup_eq_com,
                                pdpr_fstsup_noneq_com,
                                pdpr_secsup_eq_com,
                                pdpr_secsup_noneq_com,
                                pdpr_facre_eq_com,
                                pdpr_facre_noneq_com,
                                pdpr_coinsurance,
                                pdpr_phfund,
                                pdpr_pdp_code)
                         VALUES (
                             v_seq,
                             cur_pol_rec.pol_policy_no,
                             cur_pol_rec.pol_ren_endos_no,
                             cur_pol_rec.pol_batch_no,
                             cur_pol_rec.pol_agnt_agent_code,
                             cur_pol_rec.pol_agnt_sht_desc,
                             cur_pol_rec.pol_wef_dt,
                             cur_pol_rec.pol_wet_dt,
                             cur_pol_rec.pol_uw_year,
                             cur_pol_rec.pol_total_sum_insured,
                             cur_pol_rec.pol_comm_amt,
                             v_orig_trans_date,
                             v_tran_type,
                             cur_pol_rec.pol_nett_premium,
                             cur_pol_rec.pol_cur_code,
                             cur_pol_rec.pol_client_policy_number,
                             cur_pol_rec.pol_brn_code,
                             cur_pol_rec.pol_cur_rate,
                             cur_pol_rec.pol_comm_endos_diff_amt,
                             cur_pol_rec.pol_total_gp,
                             cur_pol_rec.pol_total_gp,
                             cur_pol_rec.pol_tot_endos_diff_amt,
                             cur_pol_rec.pol_cur_symbol,
                             cur_pol_rec.pol_brn_sht_desc,
                             cur_pol_rec.pol_prp_code,
                             cur_pol_rec.pol_current_status,
                             cur_pol_rec.pol_inception_uwyr,
                             cur_pol_rec.pol_pro_code,
                             cur_pol_rec.pol_pro_sht_desc,
                             cur_pol_rec.pol_prev_batch_no,
                             cur_pol_rec.pol_uwyr_length,
                             cur_pol_rec.pol_coinsurance_share,
                             cur_pol_rec.pol_policy_cover_to,
                             cur_pol_rec.pol_policy_cover_from,
                             v_trans_no,
                             cur_pol_rec.pol_policy_status,
                             v_drcr,
                             v_prem_type,
                             DECODE (cur_pol_rec.pol_policy_status,
                                     'DC', 0,
                                     cur_pol_rec.pol_si_diff),
                             cur_pol_rec.pol_policy_type,
                             v_sd,
                             v_tl,
                             v_duties,
                             cur_pol_rec.pol_wtht,
                             cur_pol_rec.pol_prem_tax,
                             v_mand_prem,
                             v_mand_com,
                             v_qs_prem,
                             v_qs_com,
                             v_fstsup_prem,
                             v_fstsup_com,
                             v_secsup_prem,
                             v_secsup_com,
                             v_facre_prem,
                             v_facre_com,
                             v_pol_net_prem,
                             v_com_ret,
                             cur_pol_rec.pol_coin_fee_amt,
                             v_mand_eq_prem,
                             v_mand_noneq_prem,
                             v_fstsup_eq_prem,
                             v_fstsup_noneq_prem,
                             v_secsup_eq_prem,
                             v_secsup_noneq_prem,
                             v_qs_eq_prem,
                             v_qs_noneq_prem,
                             v_facre_eq_prem,
                             v_facre_noneq_prem,
                             v_eq_prem,
                             v_non_eq_prem,
                             v_mand_eq_com,
                             v_mand_noneq_com,
                             v_qs_eq_com,
                             v_qs_noneq_com,
                             v_fstsup_eq_com,
                             v_fstsup_noneq_com,
                             v_secsup_eq_com,
                             v_secsup_noneq_com,
                             v_facre_eq_com,
                             v_facre_noneq_com,
                             cur_pol_rec.pol_coinsurance,
                             DECODE (cur_pol_rec.pol_tot_phfund,
                                     NULL, cur_pol_rec.pol_tot_phfund,
                                     0, cur_pol_rec.pol_phfund,
                                     cur_pol_rec.pol_tot_phfund),
                             v_pre_code);
            --    END -IF;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR :- UNABLE TO INSERT RECORD INTO THE POLICY REGISTER.');
            END;

            --DBMS_OUTPUT.PUT_LINE('after insrting pol register');
            --DBMS_OUTPUT.PUT_LINE('here 14');
            --RAISE_APPLICATION_ERROR(-20097,'FAFAS');
            FOR cur_all_risk_rec IN cur_all_risks
            LOOP
                ---insert risk register
                v_mand_rate := 0;
                v_mand_prem := 0;
                v_mand_com := 0;
                v_mand_eq_prem := 0;
                v_mand_noneq_prem := 0;
                v_mand_noneq_com := 0;
                v_facre_rate := 0;
                v_facre_prem := 0;
                v_facre_com := 0;
                v_facre_eq_prem := 0;
                v_facre_noneq_prem := 0;
                v_facre_noneq_com := 0;
                v_fstsup_rate := 0;
                v_fstsup_com := 0;
                v_fstsup_prem := 0;
                v_fstsup_eq_prem := 0;
                v_fstsup_noneq_prem := 0;
                v_fstsup_noneq_com := 0;
                v_secsup_rate := 0;
                v_secsup_com := 0;
                v_secsup_prem := 0;
                v_secsup_eq_prem := 0;
                v_secsup_noneq_prem := 0;
                v_secsup_noneq_com := 0;
                v_qs_rate := 0;
                v_qs_com := 0;
                v_qs_prem := 0;
                v_qs_eq_prem := 0;
                v_qs_noneq_prem := 0;
                v_qs_noneq_com := 0;
                v_rsk_net_prem := 0;
                v_com_ret := 0;
                v_net_rate := 0;
                v_eq_prem := 0;
                v_non_eq_prem := 0;

                --DBMS_OUTPUT.PUT_LINE('here 15');
                FOR cur_rsk_rein_rec
                    IN cur_rsk_rein (cur_all_risk_rec.ipu_code, v_trans_no)
                LOOP
                    v_mand_rate := cur_rsk_rein_rec.mand_pct;
                    v_mand_prem := cur_rsk_rein_rec.mand_prem;
                    v_mand_com := cur_rsk_rein_rec.mand_com;
                    v_mand_eq_prem := cur_rsk_rein_rec.mand_eq_prem;
                    v_mand_noneq_prem := cur_rsk_rein_rec.mand_noneq_prem;
                    v_mand_eq_com := cur_rsk_rein_rec.mand_eq_com;
                    v_mand_noneq_com := cur_rsk_rein_rec.mand_noneq_com;
                    v_fstsup_rate := cur_rsk_rein_rec.fstsup_pct;
                    v_fstsup_com := cur_rsk_rein_rec.fstsup_com;
                    v_fstsup_prem := cur_rsk_rein_rec.fstsup_prem;
                    v_fstsup_eq_prem := cur_rsk_rein_rec.fstsup_eq_prem;
                    v_fstsup_noneq_prem := cur_rsk_rein_rec.fstsup_noneq_prem;
                    v_fstsup_eq_com := cur_rsk_rein_rec.fstsup_eq_com;
                    v_fstsup_noneq_com := cur_rsk_rein_rec.fstsup_noneq_com;
                    v_secsup_rate := cur_rsk_rein_rec.secsup_pct;
                    v_secsup_com := cur_rsk_rein_rec.secsup_com;
                    v_secsup_prem := cur_rsk_rein_rec.secsup_prem;
                    v_secsup_eq_prem := cur_rsk_rein_rec.secsup_eq_prem;
                    v_secsup_noneq_prem := cur_rsk_rein_rec.secsup_noneq_prem;
                    v_secsup_eq_com := cur_rsk_rein_rec.secsup_eq_com;
                    v_secsup_noneq_com := cur_rsk_rein_rec.secsup_noneq_com;
                    v_qs_rate := cur_rsk_rein_rec.qs_pct;
                    v_qs_com := cur_rsk_rein_rec.qs_com;
                    v_qs_prem := cur_rsk_rein_rec.qs_prem;
                    v_qs_eq_prem := cur_rsk_rein_rec.qs_eq_prem;
                    v_qs_noneq_prem := cur_rsk_rein_rec.qs_noneq_prem;
                    v_qs_eq_com := cur_rsk_rein_rec.qs_eq_com;
                    v_qs_noneq_com := cur_rsk_rein_rec.qs_noneq_com;
                END LOOP;                                   --cur_rsk_rein_rec

                --DBMS_OUTPUT.PUT_LINE('here 17');
                FOR cur_risk_facre_rec
                    IN cur_risk_facre (cur_all_risk_rec.ipu_code)
                LOOP
                    v_facre_prem :=
                          NVL (v_facre_prem, 0)
                        + NVL (cur_risk_facre_rec.facre_prem, 0);
                    v_facre_com :=
                          NVL (v_facre_com, 0)
                        + NVL (cur_risk_facre_rec.facre_com, 0);
                    v_facre_rate :=
                          NVL (v_facre_rate, 0)
                        + NVL (cur_risk_facre_rec.facre_rate, 0);
                    v_facre_eq_prem :=
                          NVL (v_facre_eq_prem, 0)
                        + NVL (cur_risk_facre_rec.facre_eq_prem, 0);
                    v_facre_noneq_prem :=
                          NVL (v_facre_noneq_prem, 0)
                        + NVL (cur_risk_facre_rec.facre_noneq_prem, 0);
                    v_facre_eq_com :=
                          NVL (v_facre_eq_com, 0)
                        + NVL (cur_risk_facre_rec.facre_eq_comm, 0);
                    v_facre_noneq_com :=
                          NVL (v_facre_noneq_com, 0)
                        + NVL (cur_risk_facre_rec.facre_noneq_comm, 0);
                END LOOP;

                --DBMS_OUTPUT.PUT_LINE('here 18');
                FOR cur_risk_own_ret_rec
                    IN cur_risk_own_ret (cur_all_risk_rec.ipu_code,
                                         v_trans_no)
                LOOP
                    v_rsk_net_prem := cur_risk_own_ret_rec.comp_net_ret;
                    v_net_rate := cur_risk_own_ret_rec.comp_net_rate;
                    v_eq_prem := cur_risk_own_ret_rec.comp_eq_prem;
                    v_non_eq_prem := cur_risk_own_ret_rec.comp_non_eq_prem;
                END LOOP;

                v_rsk_tot_net_prem :=
                    NVL (v_rsk_tot_net_prem, 0) + NVL (v_rsk_net_prem, 0);
                --DBMS_OUTPUT.PUT_LINE('here 19');
                --DBMS_OUTPUT.PUT_LINE('INSERTING RISK REGISTER');
                v_seq_rsk := NULL;

                BEGIN
                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_prskrg_code_seq.NEXTVAL)
                      INTO v_seq_rsk
                      FROM DUAL;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_RSKRG_CODE_SEQ . ');
                END;

                BEGIN
                    --DBMS_OUTPUT.PUT_LINE('here 20');
                    --DBMS_OUTPUT.PUT_LINE('inserting risk reg');
                    --DBMS_OUTPUT.PUT_LINE('cur_pol_rec.POL_POLICY_STATUS='||cur_pol_rec.POL_POLICY_STATUS);
                    INSERT INTO gin_pre_debit_policy_risk_reg (
                                    prskrg_code,
                                    prskrg_pol_policy_no,
                                    prskrg_pol_ren_endos_no,
                                    prskrg_pol_batch_no,
                                    prskrg_wef_dt,
                                    prskrg_wet_dt,
                                    prskrg_sum_insured,
                                    prskrg_nett_premium,
                                    prskrg_fap,
                                    prskrg_gp,
                                    prskrg_endos_diff_amt,
                                    prskrg_risk_cover_to,
                                    prskrg_risk_cover_from,
                                    prskrg_ipu_code,
                                    prskrg_scl_code,
                                    prskrg_si_diff,
                                    prskrg_ipu_id,
                                    prskrg_pr_code,
                                    prskrg_ggt_trans_no,
                                    prskrg_facre_rate,
                                    prskrg_com_ret_rate,
                                    prskrg_comp_net_ret,
                                    prskrg_mand_rate,
                                    prskrg_mand_prem,
                                    prskrg_mand_com,
                                    prskrg_quota_rate,
                                    prskrg_quota_com,
                                    prskrg_fstsup_rate,
                                    prskrg_fstsup_com,
                                    prskrg_secsup_rate,
                                    prskrg_secsup_com,
                                    prskrg_fstsup_prem,
                                    prskrg_secsup_prem,
                                    prskrg_facre_prem,
                                    prskrg_facre_com,
                                    prskrg_tran_date,
                                    prskrg_comm_endos_diff_amt,
                                    prskrg_quota_prem,
                                    prskrg_uw_yr,
                                    prskrg_tot_endos_prem_dif,
                                    prskrg_cur_code,
                                    prskrg_cur_symbol,
                                    prskrg_quz_code,
                                    prskrg_quz_sht_desc,
                                    prskrg_exchange_rate,
                                    prskrg_prem_tax,
                                    prskrg_ipu_property_id,
                                    prskrg_tran_type,
                                    prskrg_coin_own_pct,
                                    prskrg_brn_code,
                                    prskrg_brn_sht_desc,
                                    prskrg_tl,
                                    prskrg_policy_type,
                                    prskrg_agnt_sht_desc,
                                    prskrg_agnt_agent_code,
                                    prskrg_secsup_eq_prem,
                                    prskrg_secsup_noneq_prem,
                                    prskrg_fstsup_eq_prem,
                                    prskrg_fstsup_noneq_prem,
                                    prskrg_quota_eq_prem,
                                    prskrg_quota_noneq_prem,
                                    prskrg_facre_eq_prem,
                                    prskrg_facre_noneq_prem,
                                    prskrg_mand_eq_prem,
                                    prskrg_mand_noneq_prem,
                                    prskrg_prp_code,
                                    prskrg_earthquake_prem,
                                    prskrg_mand_eq_com,
                                    prskrg_mand_noneq_com,
                                    prskrg_quota_eq_com,
                                    prskrg_quota_noneq_com,
                                    prskrg_fstsup_eq_com,
                                    prskrg_fstsup_noneq_com,
                                    prskrg_secsup_eq_com,
                                    prskrg_secsup_noneq_com,
                                    prskrg_facre_eq_com,
                                    prskrg_facre_noneq_com,
                                    prskrg_pdp_code,
                                    prskrg_current_ri)
                             VALUES (
                                 v_seq_rsk,
                                 cur_pol_rec.pol_policy_no,
                                 cur_pol_rec.pol_ren_endos_no,
                                 cur_pol_rec.pol_batch_no,
                                 cur_all_risk_rec.ipu_wef,
                                 cur_all_risk_rec.ipu_wef,
                                 cur_all_risk_rec.ipu_value,
                                 cur_all_risk_rec.ipu_nett_premium,
                                 cur_all_risk_rec.ipu_fap,
                                 cur_all_risk_rec.ipu_gp,
                                 cur_all_risk_rec.ipu_endos_diff_amt,
                                 cur_all_risk_rec.ipu_eff_wet,
                                 cur_all_risk_rec.ipu_eff_wef,
                                 cur_all_risk_rec.ipu_code,
                                 cur_all_risk_rec.ipu_sec_scl_code,
                                 DECODE (cur_pol_rec.pol_policy_status,
                                         'DC', 0,
                                         cur_all_risk_rec.ipu_si_diff),
                                 cur_all_risk_rec.ipu_id,
                                 v_seq,
                                 v_trans_no,
                                 v_facre_rate,
                                 v_net_rate,
                                 v_rsk_net_prem,
                                 v_mand_rate,
                                 v_mand_prem,
                                 v_mand_com,
                                 v_qs_rate,
                                 v_qs_com,
                                 v_fstsup_rate,
                                 v_fstsup_com,
                                 v_secsup_rate,
                                 v_secsup_com,
                                 v_fstsup_prem,
                                 v_secsup_prem,
                                 v_facre_prem,
                                 v_facre_com,
                                 v_orig_trans_date,
                                   NVL (
                                       cur_all_risk_rec.ipu_comm_endos_diff_amt,
                                       0)
                                 + NVL (
                                       cur_all_risk_rec.ipu_ri_agnt_comm_amt,
                                       0),
                                 v_qs_prem,
                                 cur_pol_rec.pol_uw_year,
                                 cur_all_risk_rec.ipu_tot_endos_prem_dif,
                                 cur_pol_rec.pol_cur_code,
                                 cur_pol_rec.pol_cur_symbol,
                                 cur_all_risk_rec.ipu_quz_code,
                                 cur_all_risk_rec.ipu_quz_sht_desc,
                                 cur_pol_rec.pol_cur_rate,
                                 cur_all_risk_rec.ipu_prem_tax,
                                 cur_all_risk_rec.ipu_property_id,
                                 DECODE (cur_pol_rec.pol_policy_status,
                                         'DC', 'DC',
                                         cur_all_risk_rec.ipu_status),
                                 NVL (cur_pol_rec.pol_coinsurance_share, 100),
                                 cur_pol_rec.pol_brn_code,
                                 cur_pol_rec.pol_brn_sht_desc,
                                 cur_all_risk_rec.ipu_itl,
                                 cur_pol_rec.pol_policy_type,
                                 cur_pol_rec.pol_agnt_sht_desc,
                                 cur_pol_rec.pol_agnt_agent_code,
                                 v_secsup_eq_prem,
                                 v_secsup_noneq_prem,
                                 v_fstsup_eq_prem,
                                 v_fstsup_noneq_prem,
                                 v_qs_eq_prem,
                                 v_qs_noneq_prem,
                                 v_facre_eq_prem,
                                 v_facre_noneq_prem,
                                 v_mand_eq_prem,
                                 v_mand_noneq_prem,
                                 cur_all_risk_rec.ipu_prp_code,
                                 v_eq_prem,
                                 v_mand_eq_com,
                                 v_mand_noneq_com,
                                 v_qs_eq_com,
                                 v_qs_noneq_com,
                                 v_fstsup_eq_com,
                                 v_fstsup_noneq_com,
                                 v_secsup_eq_com,
                                 v_secsup_noneq_com,
                                 v_facre_eq_com,
                                 v_facre_noneq_com,
                                 v_pre_code,
                                 'Y');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO INSERT RECORD INTO THE POLICY RISK REGISTER.');
                END;

                NULL;
            END LOOP;

            IF ABS (
                     ABS (NVL (v_rsk_tot_net_prem, 0))
                   - ABS (NVL (v_pol_net_prem, 0))) >
               3
            THEN
                raise_error (
                       'THE NET PREMIUM AT RISK LEVEL DOES NOT TALLY WITH THAT AT POLICY LEVEL AT STEP 1..tot risk...'
                    || v_rsk_tot_net_prem
                    || ' net '
                    || v_pol_net_prem);
            END IF;

            BEGIN
                  SELECT NVL (pdpr_endos_diff_amt, 0),
                         SUM (NVL (prskrg_endos_diff_amt, 0))
                    INTO v_pol_prem, v_rsk_prem
                    FROM gin_pre_debit_policy_register,
                         gin_pre_debit_policy_risk_reg
                   WHERE     pdpr_pdp_code = v_pre_code
                         AND pdpr_code = prskrg_pr_code
                         AND pdpr_code = v_seq
                GROUP BY pdpr_code, pdpr_endos_diff_amt;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'ERROR POSTING TO REGISTERS. RECORD NOT CREATED..');
                WHEN OTHERS
                THEN
                    raise_error ('ERROR POSTING TO REGISTERS');
            END;

            IF NVL (v_pol_prem, 0) - NVL (v_rsk_prem, 0) > 15
            THEN
                --IF NVL(v_pol_prem,0) != NVL(v_rsk_prem,0) OR NVL(cur_pol_rec.POL_TOT_ENDOS_DIFF_AMT,0) != NVL(v_rsk_prem,0) THEN
                raise_error (
                       'THE NET PREMIUM AT RISK LEVEL: '
                    || NVL (v_rsk_prem, 0)
                    || ' DOES NOT TALLY WITH THAT AT POLICY LEVEL:'
                    || NVL (v_pol_prem, 0));
            END IF;
        END LOOP;
    --DBMS_OUTPUT.PUT_LINE('AFTER INSERTING RISK REGISTER');
    --**************************** removed from here
    END;

    PROCEDURE update_registers (v_pol_batch_no      IN NUMBER,
                                v_trans_no          IN NUMBER,
                                v_rnd_param         IN NUMBER,
                                v_orig_trans_date   IN DATE)
    IS
        v_duties                NUMBER := 0;
        v_tran_type             VARCHAR2 (5);
        v_tran_sign             NUMBER := 0;
        v_tran_code             VARCHAR2 (5);
        al_id                   NUMBER;
        v_drcr                  VARCHAR2 (25);
        v_prem_type             VARCHAR2 (2);
        v_sd                    NUMBER := 0;
        v_tl                    NUMBER := 0;
        v_phfund                NUMBER := 0;
        v_wtht                  NUMBER := 0;
        v_eq_prem               NUMBER := 0;
        v_non_eq_prem           NUMBER := 0;
        v_seq                   NUMBER;
        v_com_ret               NUMBER := 0;
        v_rsk_net_prem          NUMBER := 0;
        v_seq_rsk               NUMBER;
        v_cnt                   NUMBER := 0;
        v_errmsg                VARCHAR2 (200);
        v_pol_stat              VARCHAR2 (20);
        v_net_rate              NUMBER := 0;
        v_open_cover            VARCHAR2 (1) := 'N';
        v_uw_yr                 NUMBER;
        v_rsk_tot_net_prem      NUMBER;
        v_pol_net_prem          NUMBER;
        v_pol_prem              NUMBER;
        v_rsk_prem              NUMBER;
        v_mand_rate             NUMBER := 0;
        v_mand_prem             NUMBER := 0;
        v_mand_com              NUMBER := 0;
        v_mand_eq_prem          NUMBER := 0;
        v_mand_noneq_prem       NUMBER := 0;
        v_mand_eq_com           NUMBER := 0;
        v_mand_noneq_com        NUMBER := 0;
        v_qs_rate               NUMBER := 0;
        v_qs_com                NUMBER := 0;
        v_qs_prem               NUMBER := 0;
        v_qs_eq_prem            NUMBER := 0;
        v_qs_noneq_prem         NUMBER := 0;
        v_qs_eq_com             NUMBER := 0;
        v_qs_noneq_com          NUMBER := 0;
        v_fstsup_rate           NUMBER := 0;
        v_fstsup_com            NUMBER := 0;
        v_fstsup_prem           NUMBER := 0;
        v_fstsup_eq_prem        NUMBER := 0;
        v_fstsup_noneq_prem     NUMBER := 0;
        v_fstsup_eq_com         NUMBER := 0;
        v_fstsup_noneq_com      NUMBER := 0;
        v_secsup_prem           NUMBER := 0;
        v_secsup_rate           NUMBER := 0;
        v_secsup_com            NUMBER := 0;
        v_secsup_eq_prem        NUMBER := 0;
        v_secsup_noneq_prem     NUMBER := 0;
        v_secsup_eq_com         NUMBER := 0;
        v_secsup_noneq_com      NUMBER := 0;
        v_facre_rate            NUMBER := 0;
        v_facre_com             NUMBER := 0;
        v_facre_prem            NUMBER := 0;
        v_facre_eq_prem         NUMBER := 0;
        v_facre_noneq_prem      NUMBER := 0;
        v_facre_eq_com          NUMBER := 0;
        v_facre_noneq_com       NUMBER := 0;
        v_mand_si               NUMBER := 0;
        v_qs_si                 NUMBER := 0;
        v_fstsup_si             NUMBER := 0;
        v_secsup_si             NUMBER := 0;
        v_facre_si              NUMBER := 0;
        v_pol_net_si            NUMBER := 0;
        v_pol_gross_si          NUMBER := 0;
        v_ris_reg_cnt           NUMBER;
        v_pol_reg_cnt           NUMBER;
        v_rskrg_code            NUMBER;
        v_pr_code               NUMBER;
        v_exhange_rate          NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_rnd_cur               VARCHAR2 (1);
        v_cur_rnd               NUMBER;
        v_facre_diff_amt        NUMBER := 0;
        v_si_diff               NUMBER;
        v_prv_si_diff           NUMBER;
        v_ri_si_diff            NUMBER;
        v_ri_prv_si_diff        NUMBER;
        v_xol_prem              NUMBER;
        v_xol_comm              NUMBER;
        v_xol_si                NUMBER;
        v_xol_rate              NUMBER;

        --v_rcnt  number:= 0;
        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;

        CURSOR cur_all_risks IS
              SELECT *
                FROM gin_insured_property_unds
               WHERE ipu_pol_batch_no = v_pol_batch_no
            ORDER BY ipu_code;

        CURSOR cur_rsk_rein (v_ipu_code NUMBER, v_trans_no NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))    mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))    mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_cession_pct, 0)),
                             0))    mand_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_si_pcur, 0)),
                             0))    mand_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))    qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))    qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_cession_pct, 0)),
                             0))    qs_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_si_pcur, 0)),
                             0))    qs_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))    fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))    fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_cession_pct, 0)),
                             0))    fstsup_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_si_pcur, 0)),
                             0))    fstsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))    secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))    secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    secsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_cession_pct, 0)),
                             0))    secsup_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_si_pcur, 0)),
                             0))    secsup_si
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ipu_code = v_ipu_code
                     AND ptotr_ggt_tran_no = v_trans_no
            GROUP BY ptotr_ipu_code;

        CURSOR cur_rsk_rein_dtls (v_ipu_code NUMBER, v_trans_no NUMBER)
        IS
            SELECT *
              FROM gin_policy_rein_risk_details, gin_treaties
             WHERE     ptotr_trs_code = trs_code
                   AND ptotr_ipu_code = v_ipu_code
                   AND ptotr_ggt_tran_no = v_trans_no;

        CURSOR cur_rsk_rein_part_dtls (v_ptotr_code NUMBER)
        IS
            SELECT *
              FROM gin_participations
             WHERE part_ptotr_code = v_ptotr_code;

        --PTOTR_REFUND_PREM, PTOTR_REFUND_COM
        /*************************treaty level summary************************/
        CURSOR cur_pol_rein (v_trans_no NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))    mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))    mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_si_pcur, 0)),
                             0))    man_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))    qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))    qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_si_pcur, 0)),
                             0))    qs_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))    fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))    fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_si_pcur, 0)),
                             0))    fstsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))    secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))    secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    secsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_si_pcur, 0)),
                             0))    secsup_si
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ggt_tran_no = v_trans_no
            GROUP BY ptotr_ggt_tran_no;

        --group by PTOTR_GGT_TRAN_NO,TRS_TRTG_CODE
        CURSOR cur_policy_own_ret (v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   ROUND (
                       SUM (
                             NVL (prrd_net_prem, 0)
                           * NVL (prrd_com_retention_rate, 0)
                           / 100),
                       v_rnd_param)
                       comp_gross_ret,
                   ROUND (SUM (NVL (prrd_net_prem, 0)), v_rnd_param)
                       comp_net_ret,
                   ROUND (SUM (NVL (prrd_comp_retention, 0)), v_rnd_param)
                       comp_net_si,
                   ROUND (SUM (NVL (ipu_reinsure_amt, 0)), v_rnd_param)
                       comp_gross_si
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_own_ret (v_ipucode NUMBER, v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   SUM (
                         NVL (prrd_ri_prem, 0)
                       * NVL (prrd_com_retention_rate, 0)
                       / 100)
                       comp_gross_ret,
                   SUM (NVL (prrd_com_retention_rate, 0))
                       comp_gross_rate,
                   SUM (NVL (prrd_net_prem, 0))
                       comp_net_ret,
                   ROUND (SUM (NVL (prrd_comp_retention, 0)), v_rnd_param)
                       comp_net_si,
                   ROUND (SUM (NVL (ipu_reinsure_amt, 0)), v_rnd_param)
                       comp_gross_si,
                   SUM (NVL (prrd_comp_net_rate, 0))
                       comp_net_rate
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND ipu_code = v_ipucode
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        CURSOR RSKS (v_ipu_code IN NUMBER)
        IS
            SELECT CURR.IPU_POL_POLICY_NO        CURRPOLNO,
                   CURPOL.POL_BATCH_NO           CURBATCHN,
                   CURPOL.POL_BINDER_POLICY      CURBINDER,
                   CURPOL.POL_LOADED             CURLDED,
                   CURR.IPU_CODE,
                   CURPOL.POL_POLICY_STATUS      CURPSTS,
                   CURPOL.POL_CURRENT_sTATUS     CURPCSTS,
                   CURR.IPU_CODE                 CUR_IPU_CODE,
                   CURR.IPU_ID                   CUR_IPU_ID,
                   CURR.IPU_VALUE                CUR_IPU_VALUE,
                   CURR.IPU_SI_DIFF              CUR_IPU_SI_DIFF,
                   PREV.IPU_VALUE                PRV_IPU_VALUE,
                   PREV.IPU_SI_DIFF              PRV_IPU_SI_DIFF,
                   CURR.IPU_REINSURE_AMT         CUR_RI_AMNT,
                   CASE
                       WHEN NVL (CURPOL.POL_LOADED, 'N') = 'Y'
                       THEN
                           CURR.IPU_VALUE
                       WHEN CURPOL.POL_POLICY_STATUS IN ('RN',
                                                         'NB',
                                                         'SP',
                                                         'EX',
                                                         'ME',
                                                         'RE')
                       THEN
                           CURR.IPU_VALUE
                       WHEN CURPOL.POL_POLICY_STATUS IN ('CN')
                       THEN
                           -PREV.IPU_SI_DIFF
                       WHEN CURPOL.POL_POLICY_STATUS IN ('CO')
                       THEN
                           -PREV.IPU_SI_DIFF
                       ELSE
                           CURR.IPU_VALUE - PREV.IPU_VALUE
                   END                           DIFF,
                   CURR.IPU_REINSURE_DIFF_AMT    CUR_RI_AMNT_DIFF,
                   CURR.IPU_PREV_REINSURE_AMT,
                   PREV.IPU_REINSURE_AMT         PRV_RI_AMNT
              FROM GIN_POLICIES               CURPOL,
                   GIN_INSURED_PROPERTY_UNDS  CURR,
                   GIN_INSURED_PROPERTY_UNDS  PREV,
                   GIN_POLICIES               PRVPOL
             WHERE     CURPOL.POL_BATCH_NO = CURR.IPU_POL_BATCH_NO
                   AND CURR.IPU_PREV_IPU_CODE = PREV.IPU_CODE(+)
                   AND PREV.IPU_POL_BATCH_NO = PRVPOL.POL_BATCH_NO(+)
                   AND CURR.IPU_CODE = v_ipu_code
                   AND NVL (CURPOL.POL_BINDER_POLICY, 'N') != 'Y'
                   AND NVL (CURPOL.POL_LOADED, 'N') != 'Y';

        CURSOR cur_facre IS
            SELECT SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_comm_amt, 0)),
                           0))    facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_amount, 0)),
                           0))    facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_amt, 0)),
                           0))    facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_diff_amt, 0)),
                           0))    fc_prem_diff_amt,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_prem, 0)),
                           0))    facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))    facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_comm, 0)),
                           0))    facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))    facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_amount, 0)),
                           0))    ob_facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_comm_amt, 0)),
                           0))    ob_facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_prem_amt, 0)),
                           0))    ob_facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))    ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))    ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))    ob_facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))    ob_facre_noneq_comm
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_trans_no;

        CURSOR cur_risk_facre (v_ipu_code NUMBER)
        IS
            SELECT SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_comm_amt, 0)),
                           0))    facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_amount, 0)),
                           0))    facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_diff_amt, 0)),
                           0))    fc_prem_diff_amt,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_amt, 0)),
                           0))    facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_rate, 0)),
                           0))    facre_rate,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_prem, 0)),
                           0))    facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))    facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_comm, 0)),
                           0))    facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))    facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_comm_amt, 0)),
                           0))    ob_facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_amount, 0)),
                           0))    ob_facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_prem_amt, 0)),
                           0))    ob_facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_rate, 0)),
                           0))    ob_facre_rate,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))    ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))    ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))    ob_facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))    ob_facre_noneq_comm
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_trans_no AND fc_ipu_code = v_ipu_code;

        CURSOR cur_pol_pool_trans IS
            SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                   SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                   SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                   SUM (NVL (prprd_pool_si, 0))                pool_si,
                   SUM (NVL (prprd_rein_pool_rate, 0))         pool_rate
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_trans_no
                   AND prprd_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_pool_trans (v_ipu_code NUMBER)
        IS
            SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                   SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                   SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                   SUM (NVL (prprd_pool_si, 0))                pool_si,
                   SUM (NVL (prprd_rein_pool_rate, 0))         pool_rate
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_trans_no
                   AND prprd_pol_batch_no = v_pol_batch_no
                   AND prprd_ipu_code = v_ipu_code;

        CURSOR cur_pol_xol_trans IS
            SELECT SUM (NVL (prxrd_rein_xol_comm_amt, 0))     xol_comm,
                   SUM (NVL (prxrd_rein_xol_amt, 0))          xol_prem,
                   SUM (NVL (prxrd_xol_si, 0))                xol_si,
                   SUM (NVL (prxrd_rein_xol_rate, 0))         xol_rate
              FROM gin_pol_rein_xol_risk_details
             WHERE     prxrd_ggt_tran_no = v_trans_no
                   AND prxrd_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_xol_trans (v_ipu_code NUMBER)
        IS
            SELECT SUM (NVL (prxrd_rein_xol_comm_amt, 0))     xol_comm,
                   SUM (NVL (prxrd_rein_xol_amt, 0))          xol_prem,
                   SUM (NVL (prxrd_xol_si, 0))                xol_si,
                   SUM (NVL (prxrd_rein_xol_rate, 0))         xol_rate
              FROM gin_pol_rein_xol_risk_details
             WHERE     prxrd_ggt_tran_no = v_trans_no
                   AND prxrd_pol_batch_no = v_pol_batch_no
                   AND prxrd_ipu_code = v_ipu_code;

        CURSOR cur_risk_facre_dtls (v_ipu_code NUMBER)
        IS
            SELECT *
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_trans_no AND fc_ipu_code = v_ipu_code;

        --      CURSOR cur_pol_pool_trans
        --      IS
        --         SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0)) pool_comm,
        --                SUM (NVL (prprd_rein_pool_amt, 0)) pool_prem,
        --                SUM (NVL (prprd_rein_pool_vat_amt, 0)) pool_vat,
        --                SUM (NVL (prprd_pool_si, 0)) pool_si
        --           --SUM (NVL (prprd_rein_pool_rate, 0)) pool_rate
        --           FROM gin_pol_rein_pool_risk_details
        --          WHERE prprd_ggt_tran_no = v_trans_no
        --                AND prprd_pol_batch_no = v_pol_batch_no;

        --      CURSOR cur_risk_pool_trans (
        --         v_ipu_code NUMBER)
        --      IS
        --         SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0)) pool_comm,
        --                SUM (NVL (prprd_rein_pool_amt, 0)) pool_prem,
        --                SUM (NVL (prprd_rein_pool_vat_amt, 0)) pool_vat,
        --                SUM (NVL (prprd_pool_si, 0)) pool_si,
        --                SUM (NVL (prprd_rein_pool_rate, 0)) pool_rate
        --           FROM gin_pol_rein_pool_risk_details
        --          WHERE     prprd_ggt_tran_no = v_trans_no
        --                AND prprd_pol_batch_no = v_pol_batch_no
        --                AND prprd_ipu_code = v_ipu_code;
        CURSOR cur_risk_pool_dtls (v_ipu_code NUMBER)
        IS
            SELECT *
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_trans_no
                   AND prprd_pol_batch_no = v_pol_batch_no
                   AND prprd_ipu_code = v_ipu_code;

        v_pool_comm             NUMBER := 0;
        v_pool_prem             NUMBER := 0;
        v_pool_vat              NUMBER := 0;
        v_pool_si               NUMBER := 0;
        v_pool_rate             NUMBER := 0;
        v_ob_facre_prem         NUMBER := 0;
        v_ob_facre_eq_prem      NUMBER := 0;
        v_ob_facre_noneq_prem   NUMBER := 0;
        v_ob_facre_si           NUMBER := 0;
        v_ob_facre_com          NUMBER := 0;
        v_ob_facre_rate         NUMBER := 0;
        v_ob_facre_noneq_com    NUMBER := 0;
        v_ob_facre_eq_com       NUMBER := 0;
    BEGIN
        BEGIN
            SELECT cur_rnd
              INTO v_cur_rnd
              FROM gin_policies, tqc_currencies
             WHERE pol_cur_code = cur_code AND pol_batch_no = v_pol_batch_no;
        END;

        v_rnd_cur :=
            gin_parameters_pkg.get_param_varchar ('RNDBSEDONCURSETUP');

        --raise_error('*************here***************');
        FOR cur_pol_rec IN cur_pol
        LOOP
            IF     NVL (cur_pol_rec.pol_exch_rate_fixed, 'N') = 'N'
               AND cur_pol_rec.pol_policy_status != 'CO'
            THEN
                v_exhange_rate := 1;
                v_exhange_rate :=
                    get_currexch_rate (cur_pol_rec.pol_cur_code,
                                       v_rnd,
                                       v_bcur_rnd);
            ELSE                                 -- TO TAKE CARE OF FIXED RATE
                -- v_exhange_rate :=  get_currexch_rate (cur_pol_rec.pol_cur_code, v_rnd, v_bcur_rnd);
                v_exhange_rate := cur_pol_rec.pol_cur_rate;
                v_rnd :=
                    get_curr_rounding (cur_pol_rec.pol_cur_code, v_bcur_rnd);
            END IF;

            v_tran_sign := SIGN (cur_pol_rec.pol_tot_endos_diff_amt);
            v_drcr := cur_pol_rec.pol_drcr_no;

            IF cur_pol_rec.pol_drcr_no IS NULL
            THEN
                raise_error (
                    'UNABLE TO RETRIEVE POLICY DEBIT OR CREDIT NOTE CREDIT NOTE NUMBER..');
            END IF;

            BEGIN
                SELECT SUM (
                           DECODE (UPPER (trnt_code),
                                   'TL', NVL (ptx_amount, 0),
                                   0))                      tl,
                         SUM (
                             DECODE (UPPER (trnt_code),
                                     'PHFUND', NVL (ptx_amount, 0),
                                     0))
                       + SUM (
                             DECODE (UPPER (trnt_code),
                                     'COPHFUND', NVL (ptx_amount, 0),
                                     0))                    phfund,
                       SUM (
                           DECODE (UPPER (trnt_code),
                                   'SD', NVL (ptx_amount, 0),
                                   'MPSD', NVL (ptx_amount, 0),
                                   0))                      sd,
                       SUM (
                           DECODE (UPPER (trnt_code),
                                   'TL', 0,
                                   'SD', 0,
                                   'PHFUND', 0,
                                   'COPHFUND', 0,
                                   'MPSD', 0,
                                   NVL (ptx_amount, 0)))    other_duties
                  INTO v_tl,
                       v_phfund,
                       v_sd,
                       v_duties
                  FROM gin_policy_taxes, gin_transaction_types
                 WHERE     ptx_trac_trnt_code = trnt_code
                       AND ptx_pol_batch_no = v_pol_batch_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                    v_duties := 0;
                WHEN OTHERS
                THEN
                    raise_error ('ERROR, UNABLE TO RETRIEVE POLICY TAXES..');
            END;

            v_duties := NVL (v_duties, 0) + NVL (v_phfund, 0);

            -- this need to be separated such that stamp duty and phf are posted separately solo
            BEGIN
                SELECT ggt_btr_trans_code
                  INTO v_tran_code
                  FROM gin_gis_transactions
                 WHERE ggt_trans_no = v_trans_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                    raise_error (
                        'ERROR :- UNABLE TO GET THE TRANSACTION TYPE CODE WHILE UPDATING THE REGISTER...');
                WHEN TOO_MANY_ROWS
                THEN
                    raise_error (
                        'ERROR :- UNABLE TO GET THE TRANSACTION TYPE CODE WHILE UPDATING THE REGISTER.QUERY RETURNED TOO MANY ROWS...');
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR, UNABLE TO RETRIEVE TRANSACTION CODE..');
            END;

            IF cur_pol_rec.pol_policy_status != 'CO'
            THEN
                v_pol_stat := cur_pol_rec.pol_policy_status;
            ELSE
                BEGIN
                    SELECT pol_policy_status
                      INTO v_pol_stat
                      FROM gin_policies
                     WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'UNABLE TO RETRIEVE THE PREVIOUS TRANSACTION STATUS');
                END;
            END IF;

            --DBMS_OUTPUT.PUT_LINE('here 5');
            BEGIN
                SELECT DECODE (v_tran_sign,
                               1, btr_debit_code,
                               btr_credit_code)
                  INTO v_tran_type
                  FROM gin_business_transactions
                 WHERE btr_trans_code = v_pol_stat;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                           'THE TRANSACTIONS CODES HAVE NOT BEEN DEFINED FOR THE '
                        || cur_pol_rec.pol_policy_status
                        || ' TRANSACTION ..');
                WHEN OTHERS
                THEN
                    raise_error (
                           'UNABLE TO RETRIEVE THE TRANSACTIONS CODES FOR THE '
                        || v_pol_stat
                        || ' TRANSACTION ..');
            END;

            --DBMS_OUTPUT.PUT_LINE('here 6');
            IF v_pol_stat IN ('NB', 'SP')
            THEN
                v_prem_type := 'NB';
            ELSIF v_pol_stat IN ('EN',
                                 'EX',
                                 'DC',
                                 'CN',
                                 'RE')
            THEN
                IF SIGN (cur_pol_rec.pol_tot_endos_diff_amt) = 1
                THEN
                    v_prem_type := 'AP';
                ELSE
                    v_prem_type := 'RP';
                END IF;
            ELSIF v_pol_stat IN ('RN')
            THEN
                v_prem_type := 'RN';
            ELSE
                raise_error (
                       'PREM TYPE CODE FOR TRANSACTION TYPE '
                    || v_pol_stat
                    || ' NOT TAKEN CARE OF..');
            END IF;

            --DBMS_OUTPUT.PUT_LINE('here 7');
            /******************get treaty details***************************/
            FOR cur_pol_rein_rec IN cur_pol_rein (v_trans_no)
            LOOP
                v_mand_si := cur_pol_rein_rec.man_si;
                v_mand_prem := cur_pol_rein_rec.mand_prem;
                v_mand_eq_prem := v_tran_sign * cur_pol_rein_rec.mand_eq_prem;
                v_mand_noneq_prem :=
                    v_tran_sign * cur_pol_rein_rec.mand_noneq_prem;
                v_mand_com := cur_pol_rein_rec.mand_com;
                v_mand_eq_com := cur_pol_rein_rec.mand_eq_com;
                v_mand_noneq_com := cur_pol_rein_rec.mand_noneq_com;
                v_qs_si := cur_pol_rein_rec.qs_si;
                v_qs_prem := cur_pol_rein_rec.qs_prem;
                v_qs_eq_prem := v_tran_sign * cur_pol_rein_rec.qs_eq_prem;
                v_qs_noneq_prem :=
                    v_tran_sign * cur_pol_rein_rec.qs_noneq_prem;
                v_fstsup_si := cur_pol_rein_rec.fstsup_si;
                v_qs_com := cur_pol_rein_rec.qs_com;
                v_qs_eq_com := cur_pol_rein_rec.qs_eq_com;
                v_qs_noneq_com := cur_pol_rein_rec.qs_noneq_com;
                v_fstsup_prem := cur_pol_rein_rec.fstsup_prem;
                v_fstsup_eq_prem :=
                    v_tran_sign * cur_pol_rein_rec.fstsup_eq_prem;
                v_fstsup_noneq_prem := cur_pol_rein_rec.fstsup_noneq_prem;
                v_fstsup_com := cur_pol_rein_rec.fstsup_com;
                v_fstsup_eq_com := cur_pol_rein_rec.fstsup_eq_com;
                v_fstsup_noneq_com := cur_pol_rein_rec.fstsup_noneq_com;
                v_secsup_prem := cur_pol_rein_rec.secsup_prem;
                v_secsup_si := cur_pol_rein_rec.secsup_si;
                v_secsup_eq_prem :=
                    v_tran_sign * cur_pol_rein_rec.secsup_eq_prem;
                v_secsup_noneq_prem :=
                    v_tran_sign * cur_pol_rein_rec.secsup_noneq_prem;
                v_secsup_com := cur_pol_rein_rec.secsup_com;
                v_secsup_eq_com := cur_pol_rein_rec.secsup_eq_com;
                v_secsup_noneq_com := cur_pol_rein_rec.secsup_noneq_com;
            END LOOP;                                      ---cur_pol_rein_rec

            ---facre sessions
            --DBMS_OUTPUT.PUT_LINE('here 8');
            FOR cur_facre_rec IN cur_facre
            LOOP
                v_facre_si :=
                    NVL (v_facre_si, 0) + NVL (cur_facre_rec.facre_si, 0);
                v_facre_prem :=
                    NVL (v_facre_prem, 0) + NVL (cur_facre_rec.facre_prem, 0);
                v_facre_eq_prem :=
                      NVL (v_facre_eq_prem, 0)
                    + NVL (cur_facre_rec.facre_eq_prem, 0);
                v_facre_noneq_prem :=
                      NVL (v_facre_noneq_prem, 0)
                    + NVL (cur_facre_rec.facre_noneq_prem, 0);
                v_facre_com :=
                    NVL (v_facre_com, 0) + NVL (cur_facre_rec.facre_com, 0);
                v_ob_facre_si :=
                      NVL (v_ob_facre_si, 0)
                    + NVL (cur_facre_rec.ob_facre_si, 0);
                v_ob_facre_prem :=
                      NVL (v_ob_facre_prem, 0)
                    + NVL (cur_facre_rec.ob_facre_prem, 0);
                v_ob_facre_eq_prem :=
                      NVL (v_ob_facre_eq_prem, 0)
                    + NVL (cur_facre_rec.ob_facre_eq_prem, 0);
                v_ob_facre_noneq_prem :=
                      NVL (v_ob_facre_noneq_prem, 0)
                    + NVL (cur_facre_rec.ob_facre_noneq_prem, 0);
                v_ob_facre_com :=
                      NVL (v_ob_facre_com, 0)
                    + NVL (cur_facre_rec.ob_facre_com, 0);
                v_facre_diff_amt :=
                      NVL (v_facre_diff_amt, 0)
                    + NVL (cur_facre_rec.fc_prem_diff_amt, 0);
            END LOOP;

            v_facre_eq_prem := v_tran_sign * v_facre_eq_prem;
            v_facre_noneq_prem := v_facre_noneq_prem;
            v_ob_facre_eq_prem := v_tran_sign * v_ob_facre_eq_prem;
            v_ob_facre_noneq_prem := v_ob_facre_noneq_prem;


            v_com_ret := 0;
            v_rsk_net_prem := 0;
            v_pol_gross_si := 0;
            v_pol_net_si := 0;

            --DBMS_OUTPUT.PUT_LINE('here 9');
            -- pool at policy level
            FOR cur_pol_pool IN cur_pol_pool_trans
            LOOP
                v_pool_prem := cur_pol_pool.pool_prem;
                v_pool_comm := cur_pol_pool.pool_comm;
                v_pool_vat := cur_pol_pool.pool_vat;
                v_pool_si := cur_pol_pool.pool_si;
                v_pool_rate := cur_pol_pool.pool_rate;
            END LOOP;

            FOR cur_pol_xol IN cur_pol_xol_trans
            LOOP
                v_xol_prem := cur_pol_xol.xol_prem;
                v_xol_comm := cur_pol_xol.xol_comm;
                v_xol_si := cur_pol_xol.xol_si;
                v_xol_rate := cur_pol_xol.xol_rate;
            END LOOP;

            DBMS_OUTPUT.put_line ('v_pool_prem=' || v_pool_prem);

            FOR cur_policy_own_ret_rec IN cur_policy_own_ret (v_trans_no)
            LOOP
                v_com_ret := cur_policy_own_ret_rec.comp_gross_ret;
                v_pol_net_prem :=
                      cur_policy_own_ret_rec.comp_net_ret
                    - NVL (v_pool_prem, 0)
                    + NVL (v_facre_diff_amt, 0);
                v_pol_net_si := cur_policy_own_ret_rec.comp_net_si;
                v_pol_gross_si := cur_policy_own_ret_rec.comp_gross_si;
                DBMS_OUTPUT.put_line (
                       'v_pol_net_prem='
                    || v_pol_net_prem
                    || 'cur_policy_own_ret_rec.comp_net_ret='
                    || cur_policy_own_ret_rec.comp_net_ret);
                v_eq_prem :=
                    v_tran_sign * ABS (cur_policy_own_ret_rec.comp_eq_prem);
                v_non_eq_prem :=
                      v_tran_sign
                    * ABS (
                            cur_policy_own_ret_rec.comp_non_eq_prem
                          - NVL (v_pool_prem, 0));
            END LOOP;

            --         RAISE_ERROR('GIS_RI_PROCEDURES::LN 5483::v_fstsup_eq_prem = '||v_fstsup_eq_prem||';'||v_eq_prem||'& NON = '||v_non_eq_prem);
            --DBMS_OUTPUT.PUT_LINE('here 10');
            --check if a policy summary record exists
            /* For Open Cover product policies and Binder policies, the  a new record is created in the policy summaries table for every transaction year. Unlike other
            policies where a record is created strictly per underwriting year as managed by the system..'*/
            IF     NVL (v_open_cover, 'N') = 'N'
               AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'N'
            THEN
                v_uw_yr := cur_pol_rec.pol_uw_year;
            ELSE
                v_uw_yr := TO_CHAR (cur_pol_rec.pol_wef_dt, 'YYYY');
            END IF;

            BEGIN
                SELECT COUNT ('X')
                  INTO v_cnt
                  FROM gin_policy_summary
                 WHERE     ps_pol_policy_no = cur_pol_rec.pol_policy_no
                       AND ps_uw_year = v_uw_yr;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR DETERMINING IF POLICY SUMMARY RECORD ALREADY EXISTS..');
            END;

            /*************end of treaty details****************************/
            --IF v_tran_code !='CO' THEN
            --DBMS_OUTPUT.PUT_LINE('inserting POLICY register');
            --DBMS_OUTPUT.PUT_LINE('here 11');
            BEGIN
                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || gin_pr_code_seq.NEXTVAL)
                  INTO v_seq
                  FROM DUAL;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. PLEASE CONTACT TURNKE AFRICA FOR SUPPORT...');
            END;

            /************************maintain policy summary*************************/
            --DBMS_OUTPUT.PUT_LINE('here 12');
            IF v_cnt IS NULL OR v_cnt = 0
            THEN
                BEGIN
                    INSERT INTO gin_policy_summary (ps_code,
                                                    ps_pol_policy_no,
                                                    ps_uw_year,
                                                    ps_sum_insured,
                                                    ps_sum_insured_bcur,
                                                    ps_commission,
                                                    ps_commission_bcur,
                                                    ps_premium,
                                                    ps_premium_bcur,
                                                    ps_cur_code,
                                                    ps_brn_code,
                                                    ps_cur_symbol,
                                                    ps_brn_sht_desc,
                                                    ps_prp_code,
                                                    ps_inception_uwyr,
                                                    ps_pro_code,
                                                    ps_pro_sht_desc,
                                                    ps_uwyr_length,
                                                    ps_policy_cover_to,
                                                    ps_policy_cover_from,
                                                    ps_stamp_duty,
                                                    ps_stamp_duty_bcur,
                                                    ps_tl,
                                                    ps_tl_bcur,
                                                    ps_other_duties,
                                                    ps_other_duties_bcur,
                                                    ps_wtht,
                                                    ps_wtht_bcur,
                                                    ps_prem_tax,
                                                    ps_prem_tax_bcur,
                                                    ps_agnt_agent_code,
                                                    ps_agnt_sht_desc,
                                                    ps_vat_amt,
                                                    ps_uw_period)
                             VALUES (
                                 TO_NUMBER (
                                        TO_CHAR (SYSDATE, 'YY')
                                     || gin_ps_code_seq.NEXTVAL),
                                 cur_pol_rec.pol_policy_no,
                                 v_uw_yr,
                                 DECODE (cur_pol_rec.pol_policy_status,
                                         'DC', 0,
                                         cur_pol_rec.pol_si_diff),
                                 DECODE (
                                     cur_pol_rec.pol_policy_status,
                                     'DC', 0,
                                       ROUND (cur_pol_rec.pol_si_diff)
                                     * cur_pol_rec.pol_cur_rate),
                                 cur_pol_rec.pol_comm_endos_diff_amt,
                                 ROUND (
                                       cur_pol_rec.pol_comm_endos_diff_amt
                                     * cur_pol_rec.pol_cur_rate),
                                 cur_pol_rec.pol_tot_endos_diff_amt,
                                 ROUND (
                                       cur_pol_rec.pol_tot_endos_diff_amt
                                     * cur_pol_rec.pol_cur_rate),
                                 cur_pol_rec.pol_cur_code,
                                 cur_pol_rec.pol_brn_code,
                                 cur_pol_rec.pol_cur_symbol,
                                 cur_pol_rec.pol_brn_sht_desc,
                                 cur_pol_rec.pol_prp_code,
                                 cur_pol_rec.pol_inception_uwyr,
                                 cur_pol_rec.pol_pro_code,
                                 cur_pol_rec.pol_pro_sht_desc,
                                 cur_pol_rec.pol_uwyr_length,
                                 cur_pol_rec.pol_policy_cover_to,
                                 cur_pol_rec.pol_policy_cover_from,
                                 v_sd,
                                 ROUND (v_sd * v_exhange_rate),
                                 v_tl,
                                 ROUND (v_tl * v_exhange_rate),
                                 v_duties,
                                 ROUND (v_duties * v_exhange_rate),
                                 cur_pol_rec.pol_wtht,
                                 ROUND (
                                     cur_pol_rec.pol_wtht * v_exhange_rate),
                                 cur_pol_rec.pol_prem_tax,
                                 ROUND (
                                       cur_pol_rec.pol_prem_tax
                                     * v_exhange_rate),
                                 cur_pol_rec.pol_agnt_agent_code,
                                 cur_pol_rec.pol_agnt_sht_desc,
                                 cur_pol_rec.pol_vat_amt,
                                 1);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO INSERT POLICY REGISTER...');
                END;
            ELSE
                BEGIN
                    UPDATE gin_policy_summary
                       SET ps_sum_insured =
                                 NVL (ps_sum_insured, 0)
                               + DECODE (cur_pol_rec.pol_policy_status,
                                         'DC', 0,
                                         NVL (cur_pol_rec.pol_si_diff, 0)),
                           ps_commission =
                                 NVL (ps_commission, 0)
                               + NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0),
                           ps_premium =
                                 NVL (ps_premium, 0)
                               + NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0),
                           ps_policy_cover_to =
                               cur_pol_rec.pol_policy_cover_to,
                           ps_policy_cover_from =
                               cur_pol_rec.pol_policy_cover_from,
                           ps_stamp_duty =
                               NVL (ps_stamp_duty, 0) + NVL (v_sd, 0),
                           ps_tl = NVL (ps_tl, 0) + NVL (v_tl, 0),
                           ps_other_duties =
                               NVL (ps_other_duties, 0) + NVL (v_duties, 0),
                           ps_wtht =
                                 NVL (ps_wtht, 0)
                               + NVL (cur_pol_rec.pol_wtht, 0),
                           ps_prem_tax =
                                 NVL (ps_prem_tax, 0)
                               + NVL (cur_pol_rec.pol_prem_tax, 0),
                           ps_uwyr_length = cur_pol_rec.pol_uwyr_length,
                           ps_sum_insured_bcur =
                                 NVL (ps_sum_insured_bcur, 0)
                               + ROUND (
                                       DECODE (
                                           cur_pol_rec.pol_policy_status,
                                           'DC', 0,
                                           NVL (cur_pol_rec.pol_si_diff, 0))
                                     * v_exhange_rate),
                           ps_commission_bcur =
                                 NVL (ps_commission_bcur, 0)
                               + ROUND (
                                       NVL (
                                           cur_pol_rec.pol_comm_endos_diff_amt,
                                           0)
                                     * v_exhange_rate),
                           ps_premium_bcur =
                                 NVL (ps_premium_bcur, 0)
                               + ROUND (
                                       NVL (
                                           cur_pol_rec.pol_tot_endos_diff_amt,
                                           0)
                                     * v_exhange_rate),
                           ps_stamp_duty_bcur =
                                 NVL (ps_stamp_duty_bcur, 0)
                               + ROUND (NVL (v_sd, 0) * v_exhange_rate),
                           ps_tl_bcur =
                                 NVL (ps_tl_bcur, 0)
                               + ROUND (NVL (v_tl, 0) * v_exhange_rate),
                           ps_other_duties_bcur =
                                 NVL (ps_other_duties_bcur, 0)
                               + ROUND (NVL (v_duties, 0) * v_exhange_rate),
                           ps_wtht_bcur =
                                 NVL (ps_wtht_bcur, 0)
                               + ROUND (
                                       NVL (cur_pol_rec.pol_wtht, 0)
                                     * v_exhange_rate),
                           ps_prem_tax_bcur =
                                 NVL (ps_prem_tax_bcur, 0)
                               + ROUND (
                                       NVL (cur_pol_rec.pol_prem_tax, 0)
                                     * v_exhange_rate),
                           ps_vat_amt =
                                 NVL (ps_vat_amt, 0)
                               + NVL (cur_pol_rec.pol_vat_amt, 0)
                     WHERE     ps_pol_policy_no = cur_pol_rec.pol_policy_no
                           AND ps_uw_year = v_uw_yr;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO UPDATE POLICY REGISTER...');
                END;
            END IF;

            --raise_error(122);
            /***********************end policy summary***************************/
            BEGIN
                SELECT COUNT ('X')
                  INTO v_pol_reg_cnt
                  FROM gin_policy_register
                 WHERE pr_pol_batch_no = cur_pol_rec.pol_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR DETERMINING IF POLICY REGISTER RECORD ALREADY EXISTS..');
            END;

            --   RAISE_ERROR('v_eq_prem='||v_eq_prem||'BATCH NO ='||v_pol_batch_no);
            IF NVL (v_pol_reg_cnt, 0) = 0
            THEN
                BEGIN
                    INSERT INTO gin_policy_register (pr_code,
                                                     pr_pol_policy_no,
                                                     pr_pol_ren_endos_no,
                                                     pr_pol_batch_no,
                                                     pr_agnt_agent_code,
                                                     pr_agnt_sht_desc,
                                                     pr_wef_dt,
                                                     pr_wet_dt,
                                                     pr_uw_year,
                                                     pr_sum_insured,
                                                     pr_comm_amt,
                                                     pr_transaction_date,
                                                     pr_tran_type,
                                                     pr_nett_premium,
                                                     pr_cur_code,
                                                     pr_client_policy_number,
                                                     pr_brn_code,
                                                     pr_cur_rate,
                                                     pr_comm_endos_diff_amt,
                                                     pr_fap,
                                                     pr_gp,
                                                     pr_endos_diff_amt,
                                                     pr_cur_symbol,
                                                     pr_brn_sht_desc,
                                                     pr_prp_code,
                                                     pr_current_status,
                                                     pr_inception_uwyr,
                                                     pr_pro_code,
                                                     pr_pro_sht_desc,
                                                     pr_prev_batch_no,
                                                     pr_uwyr_length,
                                                     pr_coinsure_pct,
                                                     pr_policy_cover_to,
                                                     pr_policy_cover_from,
                                                     pr_ggt_trans_no,
                                                     pr_policy_status,
                                                     pr_drcr_no,
                                                     pr_prem_type,
                                                     pr_si_diff,
                                                     pr_policy_type,
                                                     pr_stamp_duty,
                                                     pr_tl,
                                                     pr_other_duties,
                                                     pr_wtht,
                                                     pr_prem_tax,
                                                     pr_mand_prem,
                                                     pr_mand_com,
                                                     pr_quota_prem,
                                                     pr_quota_com,
                                                     pr_fstsup_prem,
                                                     pr_fstsup_com,
                                                     pr_secsup_prem,
                                                     pr_secsup_com,
                                                     pr_facre_prem,
                                                     pr_facre_com,
                                                     pr_comp_net_prem,
                                                     pr_comp_net_com,
                                                     pr_coin_fee_amt,
                                                     pr_mand_eq_prem,
                                                     pr_mand_noneq_prem,
                                                     pr_fstsup_eq_prem,
                                                     pr_fstsup_noneq_prem,
                                                     pr_secsup_eq_prem,
                                                     pr_secsup_noneq_prem,
                                                     pr_quota_eq_prem,
                                                     pr_quota_noneq_prem,
                                                     pr_facre_eq_prem,
                                                     pr_facre_noneq_prem,
                                                     pr_earthquake_prem,
                                                     pr_ri_net_less_eq_prem,
                                                     pr_mand_eq_com,
                                                     pr_mand_noneq_com,
                                                     pr_quota_eq_com,
                                                     pr_quota_noneq_com,
                                                     pr_fstsup_eq_com,
                                                     pr_fstsup_noneq_com,
                                                     pr_secsup_eq_com,
                                                     pr_secsup_noneq_com,
                                                     pr_facre_eq_com,
                                                     pr_facre_noneq_com,
                                                     pr_coinsurance,
                                                     pr_phfund,
                                                     pr_vat_amt,
                                                     pr_pool_prem,
                                                     pr_pool_com,
                                                     pr_pool_si,
                                                     pr_pool_vat,
                                                     pr_pool_rate,
                                                     pr_mktr_agn_code,
                                                     pr_facre_ob_prem,
                                                     pr_facre_ob_eq_prem,
                                                     pr_facre_ob_noneq_prem,
                                                     pr_facre_ob_com,
                                                     pr_mand_si,
                                                     pr_quota_si,
                                                     pr_fstsup_si,
                                                     pr_secsup_si,
                                                     pr_facre_si,
                                                     pr_facre_ob_si,
                                                     pr_net_si,
                                                     pr_gross_si,
                                                     pr_health_tax,
                                                     pr_road_safety_tax,
                                                     pr_motor_levy,
                                                     pr_certchg,
                                                     pr_div_code,
                                                     pr_vipcertchg,
                                                     pr_xol_prem,
                                                     pr_xol_com,
                                                     pr_xol_si,
                                                     pr_xol_rate)
                             VALUES (
                                 v_seq,
                                 cur_pol_rec.pol_policy_no,
                                 cur_pol_rec.pol_ren_endos_no,
                                 cur_pol_rec.pol_batch_no,
                                 cur_pol_rec.pol_agnt_agent_code,
                                 cur_pol_rec.pol_agnt_sht_desc,
                                 cur_pol_rec.pol_wef_dt,
                                 cur_pol_rec.pol_wet_dt,
                                 cur_pol_rec.pol_uw_year,
                                 cur_pol_rec.pol_total_sum_insured,
                                 cur_pol_rec.pol_comm_amt,
                                 v_orig_trans_date,
                                 v_tran_type,
                                 cur_pol_rec.pol_nett_premium,
                                 cur_pol_rec.pol_cur_code,
                                 cur_pol_rec.pol_client_policy_number,
                                 cur_pol_rec.pol_brn_code,
                                 v_exhange_rate,
                                 cur_pol_rec.pol_comm_endos_diff_amt,
                                 cur_pol_rec.pol_total_gp,
                                 cur_pol_rec.pol_total_gp,
                                 cur_pol_rec.pol_tot_endos_diff_amt,
                                 cur_pol_rec.pol_cur_symbol,
                                 cur_pol_rec.pol_brn_sht_desc,
                                 cur_pol_rec.pol_prp_code,
                                 cur_pol_rec.pol_current_status,
                                 cur_pol_rec.pol_inception_uwyr,
                                 cur_pol_rec.pol_pro_code,
                                 cur_pol_rec.pol_pro_sht_desc,
                                 cur_pol_rec.pol_prev_batch_no,
                                 cur_pol_rec.pol_uwyr_length,
                                 cur_pol_rec.pol_coinsurance_share,
                                 cur_pol_rec.pol_policy_cover_to,
                                 cur_pol_rec.pol_policy_cover_from,
                                 v_trans_no,
                                 cur_pol_rec.pol_policy_status,
                                 v_drcr,
                                 v_prem_type,
                                 DECODE (cur_pol_rec.pol_policy_status,
                                         'DC', 0,
                                         cur_pol_rec.pol_si_diff),
                                 cur_pol_rec.pol_policy_type,
                                 v_sd,
                                 v_tl,
                                 v_duties,
                                 cur_pol_rec.pol_wtht,
                                 cur_pol_rec.pol_prem_tax,
                                 v_mand_prem,
                                 v_mand_com,
                                 v_qs_prem,
                                 v_qs_com,
                                 v_fstsup_prem,
                                 v_fstsup_com,
                                 v_secsup_prem,
                                 v_secsup_com,
                                 v_facre_prem,
                                 v_facre_com,
                                 v_pol_net_prem,
                                 v_com_ret,
                                 cur_pol_rec.pol_coin_fee_amt,
                                 v_mand_eq_prem,
                                 v_mand_noneq_prem,
                                 v_fstsup_eq_prem,
                                 v_fstsup_noneq_prem,
                                 v_secsup_eq_prem,
                                 v_secsup_noneq_prem,
                                 v_qs_eq_prem,
                                 v_qs_noneq_prem,
                                 v_facre_eq_prem,
                                 v_facre_noneq_prem,
                                 v_eq_prem,
                                 v_non_eq_prem,
                                 v_mand_eq_com,
                                 v_mand_noneq_com,
                                 v_qs_eq_com,
                                 v_qs_noneq_com,
                                 v_fstsup_eq_com,
                                 v_fstsup_noneq_com,
                                 v_secsup_eq_com,
                                 v_secsup_noneq_com,
                                 v_facre_eq_com,
                                 v_facre_noneq_com,
                                 cur_pol_rec.pol_coinsurance,
                                 DECODE (cur_pol_rec.pol_tot_phfund,
                                         NULL, cur_pol_rec.pol_tot_phfund,
                                         0, cur_pol_rec.pol_phfund,
                                         cur_pol_rec.pol_tot_phfund),
                                 cur_pol_rec.pol_vat_amt,
                                 v_pool_prem,
                                 v_pool_comm,
                                 v_pool_si,
                                 v_pool_vat,
                                 v_pool_rate,
                                 cur_pol_rec.pol_mktr_agn_code,
                                 v_ob_facre_prem,
                                 v_ob_facre_eq_prem,
                                 v_ob_facre_noneq_prem,
                                 v_ob_facre_com,
                                 v_mand_si,
                                 v_qs_si,
                                 v_fstsup_si,
                                 v_secsup_si,
                                 v_facre_si,
                                 v_ob_facre_si,
                                 v_pol_net_si,
                                 v_pol_gross_si,
                                 cur_pol_rec.pol_health_tax,
                                 cur_pol_rec.pol_road_safety_tax,
                                 cur_pol_rec.pol_motor_levy,
                                 cur_pol_rec.pol_certchg,
                                 cur_pol_rec.pol_div_code,
                                 cur_pol_rec.pol_vipcertchg,
                                 v_xol_prem,
                                 v_xol_comm,
                                 v_xol_si,
                                 v_xol_rate);
                --    END -IF;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO INSERT RECORD INTO THE POLICY REGISTER.');
                END;
            ELSE                           -- UPDATING REINSURANCE FIGUES ONLY
                BEGIN
                    UPDATE gin_policy_register
                       SET pr_mand_prem = v_mand_prem,
                           pr_mand_com = v_mand_com,
                           pr_quota_prem = v_qs_prem,
                           pr_quota_com = v_qs_com,
                           pr_fstsup_prem = v_fstsup_prem,
                           pr_fstsup_com = v_fstsup_com,
                           pr_secsup_prem = v_secsup_prem,
                           pr_secsup_com = v_secsup_com,
                           pr_facre_prem = v_facre_prem,
                           pr_facre_com = v_facre_com,
                           pr_comp_net_prem = v_pol_net_prem,
                           pr_comp_net_com = v_com_ret,
                           pr_mand_eq_prem = v_mand_eq_prem,
                           pr_mand_noneq_prem = v_mand_noneq_prem,
                           pr_fstsup_eq_prem = v_fstsup_eq_prem,
                           pr_fstsup_noneq_prem = v_fstsup_noneq_prem,
                           pr_secsup_eq_prem = v_secsup_eq_prem,
                           pr_secsup_noneq_prem = v_secsup_noneq_prem,
                           pr_quota_eq_prem = v_qs_eq_prem,
                           pr_quota_noneq_prem = v_qs_noneq_prem,
                           pr_facre_eq_prem = v_facre_eq_prem,
                           pr_facre_noneq_prem = v_facre_noneq_prem,
                           pr_earthquake_prem = v_eq_prem,
                           pr_ri_net_less_eq_prem = v_non_eq_prem,
                           pr_mand_eq_com = v_mand_eq_com,
                           pr_mand_noneq_com = v_mand_noneq_com,
                           pr_quota_eq_com = v_qs_eq_com,
                           pr_quota_noneq_com = v_qs_noneq_com,
                           pr_fstsup_eq_com = v_fstsup_eq_com,
                           pr_fstsup_noneq_com = v_fstsup_noneq_com,
                           pr_secsup_eq_com = v_secsup_eq_com,
                           pr_secsup_noneq_com = v_secsup_noneq_com,
                           pr_facre_eq_com = v_facre_eq_com,
                           pr_facre_noneq_com = v_facre_noneq_com,
                           pr_pool_prem = v_pool_prem,
                           pr_pool_com = v_pool_comm,
                           pr_pool_si = v_pool_si,
                           pr_pool_vat = v_pool_vat,
                           pr_pool_rate = v_pool_rate,
                           pr_mktr_agn_code = cur_pol_rec.pol_mktr_agn_code,
                           pr_facre_ob_prem = v_ob_facre_prem,
                           pr_facre_ob_eq_prem = v_ob_facre_eq_prem,
                           pr_facre_ob_noneq_prem = v_ob_facre_noneq_prem,
                           pr_facre_ob_com = v_ob_facre_com,
                           pr_mand_si = v_mand_si,
                           pr_quota_si = v_qs_si,
                           pr_fstsup_si = v_fstsup_si,
                           pr_secsup_si = v_secsup_si,
                           pr_facre_si = v_facre_si,
                           pr_facre_ob_si = v_ob_facre_si,
                           pr_net_si = v_pol_net_si,
                           pr_gross_si = v_pol_gross_si,
                           pr_xol_prem = v_xol_prem,
                           pr_xol_com = v_xol_comm,
                           pr_xol_si = v_xol_si,
                           pr_xol_rate = v_xol_rate
                     WHERE pr_pol_batch_no = cur_pol_rec.pol_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error updating reinsurance amounts to the policy register...');
                END;

                BEGIN
                    SELECT pr_code
                      INTO v_seq
                      FROM gin_policy_register
                     WHERE pr_pol_batch_no = cur_pol_rec.pol_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error determining if the record exists in policy register...');
                END;
            END IF;

            BEGIN
                SELECT pr_code
                  INTO v_pr_code
                  FROM gin_policy_register
                 WHERE     pr_pol_batch_no = cur_pol_rec.pol_batch_no
                       AND pr_ggt_trans_no = v_trans_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error determining if the record exists in policy register...');
            END;

            --DBMS_OUTPUT.PUT_LINE('after insrting pol register');
            --DBMS_OUTPUT.PUT_LINE('here 14');
            --RAISE_APPLICATION_ERROR(-20097,'FAFAS');
            FOR cur_all_risk_rec IN cur_all_risks
            LOOP
                ---insert risk register
                v_mand_rate := 0;
                v_mand_prem := 0;
                v_mand_com := 0;
                v_mand_si := 0;
                v_mand_eq_prem := 0;
                v_mand_noneq_prem := 0;
                v_mand_noneq_com := 0;
                v_facre_rate := 0;
                v_facre_si := 0;
                v_facre_prem := 0;
                v_facre_com := 0;
                v_facre_eq_prem := 0;
                v_facre_noneq_prem := 0;
                v_facre_noneq_com := 0;
                v_ob_facre_rate := 0;
                v_ob_facre_si := 0;
                v_ob_facre_prem := 0;
                v_ob_facre_com := 0;
                v_ob_facre_eq_prem := 0;
                v_ob_facre_noneq_prem := 0;
                v_fstsup_rate := 0;
                v_fstsup_com := 0;
                v_fstsup_si := 0;
                v_fstsup_prem := 0;
                v_fstsup_eq_prem := 0;
                v_fstsup_noneq_prem := 0;
                v_fstsup_noneq_com := 0;
                v_secsup_rate := 0;
                v_secsup_com := 0;
                v_secsup_si := 0;
                v_secsup_prem := 0;
                v_secsup_eq_prem := 0;
                v_secsup_noneq_prem := 0;
                v_secsup_noneq_com := 0;
                v_qs_rate := 0;
                v_qs_com := 0;
                v_qs_prem := 0;
                v_qs_si := 0;
                v_qs_eq_prem := 0;
                v_qs_noneq_prem := 0;
                v_qs_noneq_com := 0;
                v_rsk_net_prem := 0;
                v_com_ret := 0;
                v_net_rate := 0;
                v_eq_prem := 0;
                v_non_eq_prem := 0;
                v_pool_prem := 0;
                v_pool_comm := 0;
                v_pool_vat := 0;
                v_pool_si := 0;
                v_pool_rate := 0;
                v_facre_diff_amt := 0;

                --DBMS_OUTPUT.PUT_LINE('here 15');
                FOR cur_rsk_rein_rec
                    IN cur_rsk_rein (cur_all_risk_rec.ipu_code, v_trans_no)
                LOOP
                    v_mand_rate := cur_rsk_rein_rec.mand_pct;
                    v_mand_prem := cur_rsk_rein_rec.mand_prem;
                    v_mand_si := cur_rsk_rein_rec.mand_si;
                    v_mand_com := cur_rsk_rein_rec.mand_com;
                    v_mand_eq_prem :=
                        v_tran_sign * cur_rsk_rein_rec.mand_eq_prem;
                    v_mand_noneq_prem :=
                        v_tran_sign * cur_rsk_rein_rec.mand_noneq_prem;
                    v_mand_eq_com := cur_rsk_rein_rec.mand_eq_com;
                    v_mand_noneq_com := cur_rsk_rein_rec.mand_noneq_com;
                    v_fstsup_rate := cur_rsk_rein_rec.fstsup_pct;
                    v_fstsup_com := cur_rsk_rein_rec.fstsup_com;
                    v_fstsup_prem := cur_rsk_rein_rec.fstsup_prem;
                    v_fstsup_si := cur_rsk_rein_rec.fstsup_si;
                    v_fstsup_eq_prem :=
                        v_tran_sign * cur_rsk_rein_rec.fstsup_eq_prem;
                    v_fstsup_noneq_prem := cur_rsk_rein_rec.fstsup_noneq_prem;
                    v_fstsup_eq_com := cur_rsk_rein_rec.fstsup_eq_com;
                    v_fstsup_noneq_com := cur_rsk_rein_rec.fstsup_noneq_com;
                    v_secsup_rate := cur_rsk_rein_rec.secsup_pct;
                    v_secsup_com := cur_rsk_rein_rec.secsup_com;
                    v_secsup_prem := cur_rsk_rein_rec.secsup_prem;
                    v_secsup_si := cur_rsk_rein_rec.secsup_si;
                    v_secsup_eq_prem :=
                        v_tran_sign * cur_rsk_rein_rec.secsup_eq_prem;
                    v_secsup_noneq_prem := cur_rsk_rein_rec.secsup_noneq_prem;
                    v_secsup_eq_com := cur_rsk_rein_rec.secsup_eq_com;
                    v_secsup_noneq_com := cur_rsk_rein_rec.secsup_noneq_com;
                    v_qs_rate := cur_rsk_rein_rec.qs_pct;
                    v_qs_si := cur_rsk_rein_rec.qs_si;
                    v_qs_com := cur_rsk_rein_rec.qs_com;
                    v_qs_prem := cur_rsk_rein_rec.qs_prem;
                    v_qs_eq_prem := v_tran_sign * cur_rsk_rein_rec.qs_eq_prem;
                    v_qs_noneq_prem := cur_rsk_rein_rec.qs_noneq_prem;
                    v_qs_eq_com := cur_rsk_rein_rec.qs_eq_com;
                    v_qs_noneq_com := cur_rsk_rein_rec.qs_noneq_com;
                END LOOP;                                   --cur_rsk_rein_rec

                --DBMS_OUTPUT.PUT_LINE('here 17');
                FOR cur_risk_facre_rec
                    IN cur_risk_facre (cur_all_risk_rec.ipu_code)
                LOOP
                    v_facre_prem :=
                          NVL (v_facre_prem, 0)
                        + NVL (cur_risk_facre_rec.facre_prem, 0);
                    v_facre_si :=
                          NVL (v_facre_si, 0)
                        + NVL (cur_risk_facre_rec.facre_si, 0);
                    v_facre_com :=
                          NVL (v_facre_com, 0)
                        + NVL (cur_risk_facre_rec.facre_com, 0);
                    v_facre_rate :=
                          NVL (v_facre_rate, 0)
                        + NVL (cur_risk_facre_rec.facre_rate, 0);
                    v_facre_eq_prem :=
                          NVL (v_facre_eq_prem, 0)
                        + NVL (cur_risk_facre_rec.facre_eq_prem, 0);
                    v_facre_noneq_prem :=
                          NVL (v_facre_noneq_prem, 0)
                        + NVL (cur_risk_facre_rec.facre_noneq_prem, 0);
                    v_facre_eq_com :=
                          NVL (v_facre_eq_com, 0)
                        + NVL (cur_risk_facre_rec.facre_eq_comm, 0);
                    v_facre_noneq_com :=
                          NVL (v_facre_noneq_com, 0)
                        + NVL (cur_risk_facre_rec.facre_noneq_comm, 0);
                    v_ob_facre_prem :=
                          NVL (v_ob_facre_prem, 0)
                        + NVL (cur_risk_facre_rec.ob_facre_prem, 0);
                    v_ob_facre_si :=
                          NVL (v_ob_facre_si, 0)
                        + NVL (cur_risk_facre_rec.ob_facre_si, 0);
                    v_ob_facre_com :=
                          NVL (v_ob_facre_com, 0)
                        + NVL (cur_risk_facre_rec.ob_facre_com, 0);
                    v_ob_facre_rate :=
                          NVL (v_ob_facre_rate, 0)
                        + NVL (cur_risk_facre_rec.ob_facre_rate, 0);
                    v_ob_facre_eq_prem :=
                          NVL (v_ob_facre_eq_prem, 0)
                        + NVL (cur_risk_facre_rec.ob_facre_eq_prem, 0);
                    v_facre_diff_amt :=
                          NVL (v_facre_diff_amt, 0)
                        + NVL (cur_risk_facre_rec.fc_prem_diff_amt, 0);
                    v_ob_facre_noneq_prem :=
                          NVL (v_ob_facre_noneq_prem, 0)
                        + NVL (cur_risk_facre_rec.ob_facre_noneq_prem, 0);
                    v_ob_facre_eq_com :=
                          NVL (v_ob_facre_eq_com, 0)
                        + NVL (cur_risk_facre_rec.ob_facre_eq_comm, 0);
                    v_ob_facre_noneq_com :=
                          NVL (v_ob_facre_noneq_com, 0)
                        + NVL (cur_risk_facre_rec.ob_facre_noneq_comm, 0);
                END LOOP;

                v_facre_eq_prem := v_tran_sign * v_facre_eq_prem;
                v_facre_noneq_prem := v_facre_noneq_prem;
                v_ob_facre_eq_prem := v_tran_sign * v_ob_facre_eq_prem;
                v_ob_facre_noneq_prem := v_ob_facre_noneq_prem;

                --DBMS_OUTPUT.PUT_LINE('here 18');
                FOR cur_risk_pool
                    IN cur_risk_pool_trans (cur_all_risk_rec.ipu_code)
                LOOP
                    v_pool_prem := cur_risk_pool.pool_prem;
                    v_pool_comm := cur_risk_pool.pool_comm;
                    v_pool_vat := cur_risk_pool.pool_vat;
                    v_pool_si := cur_risk_pool.pool_si;
                    v_pool_rate := cur_risk_pool.pool_rate;
                END LOOP;

                FOR cur_risk_xol
                    IN cur_risk_xol_trans (cur_all_risk_rec.ipu_code)
                LOOP
                    v_xol_prem := cur_risk_xol.xol_prem;
                    v_xol_comm := cur_risk_xol.xol_comm;
                    v_xol_si := cur_risk_xol.xol_si;
                    v_xol_rate := cur_risk_xol.xol_rate;
                END LOOP;

                --DBMS_OUTPUT.PUT_LINE('v_pool_prem='||v_pool_prem);
                FOR cur_risk_own_ret_rec
                    IN cur_risk_own_ret (cur_all_risk_rec.ipu_code,
                                         v_trans_no)
                LOOP
                    --v_rcnt := nvl(v_rcnt,0) + 1;
                    v_rsk_net_prem :=
                          cur_risk_own_ret_rec.comp_net_ret
                        - NVL (v_pool_prem, 0)
                        + NVL (v_facre_diff_amt, 0);
                    --DBMS_OUTPUT.PUT_LINE('count='||v_rcnt||'ipucode='||cur_all_risk_rec.ipu_code||'v_risk_prem='||cur_all_risk_rec.IPU_ENDOS_DIFF_AMT||'v_rsk_net_prem='||v_rsk_net_prem||'cur_risk_own_ret_rec.comp_net_ret ='||cur_risk_own_ret_rec.comp_net_ret );
                    v_net_rate := cur_risk_own_ret_rec.comp_net_rate;
                    v_eq_prem := cur_risk_own_ret_rec.comp_eq_prem;
                    v_non_eq_prem :=
                          cur_risk_own_ret_rec.comp_non_eq_prem
                        - NVL (v_pool_prem, 0);

                    IF NVL (v_rnd_cur, 'N') = 'Y'
                    THEN
                        v_pol_net_si :=
                            ROUND (cur_risk_own_ret_rec.comp_net_si,
                                   v_cur_rnd);
                    ELSE
                        v_pol_net_si :=
                            ROUND (cur_risk_own_ret_rec.comp_net_si,
                                   v_rnd_param);
                    END IF;

                    v_pol_gross_si := cur_risk_own_ret_rec.comp_gross_si;
                END LOOP;

                v_eq_prem := v_tran_sign * ABS (v_eq_prem);
                v_non_eq_prem := v_tran_sign * ABS (v_non_eq_prem);

                FOR r IN rsks (cur_all_risk_rec.ipu_code)
                LOOP
                    IF R.CURPSTS IN ('RN',
                                     'NB',
                                     'SP',
                                     'EX',
                                     'ME',
                                     'RE')
                    THEN
                        v_si_diff := 0;
                        v_ri_si_diff := 0;

                        v_prv_si_diff := v_si_diff;
                        v_ri_prv_si_diff := v_ri_si_diff;

                        IF NVL (R.CURLDED, 'N') = 'Y'
                        THEN
                            v_si_diff := r.CUR_IPU_VALUE;
                            v_ri_si_diff := r.CUR_RI_AMNT;
                        ELSIF R.CURPSTS IN ('RN',
                                            'NB',
                                            'SP',
                                            'EX',
                                            'ME',
                                            'RE')
                        THEN
                            v_si_diff := r.CUR_IPU_VALUE;
                            v_ri_si_diff := r.CUR_RI_AMNT;
                        ELSIF R.CURPSTS IN ('CN')
                        THEN
                            v_si_diff := -v_prv_si_diff;
                            v_ri_si_diff := -v_ri_prv_si_diff;
                        ELSIF R.CURPSTS IN ('CO')
                        THEN
                            v_si_diff := -v_prv_si_diff;
                            v_ri_si_diff := -v_ri_prv_si_diff;
                        ELSE
                            v_si_diff :=
                                  NVL (r.CUR_IPU_VALUE, 0)
                                - NVL (r.PRV_IPU_VALUE, 0);
                            v_ri_si_diff :=
                                  NVL (r.CUR_RI_AMNT, 0)
                                - NVL (r.PRV_RI_AMNT, 0);
                        END IF;
                    -- RSKRG_SI_DIFF=v_si_diff,
                    --  RSKRG_REINSURE_AMT = r.CUR_RI_AMNT,
                    --  RSKRG_REINSURE_DIFF_AMT  =  v_RI_si_diff

                    END IF;
                END LOOP;

                v_rsk_tot_net_prem :=
                    NVL (v_rsk_tot_net_prem, 0) + NVL (v_rsk_net_prem, 0);

                --DBMS_OUTPUT.PUT_LINE('v_rsk_tot_net_prem='||v_rsk_tot_net_prem);

                --DBMS_OUTPUT.PUT_LINE('here 19');
                --DBMS_OUTPUT.PUT_LINE('INSERTING RISK REGISTER');
                BEGIN
                    SELECT COUNT (0)
                      INTO v_ris_reg_cnt
                      FROM gin_policy_risk_reg
                     WHERE     rskrg_pr_code = v_seq
                           AND rskrg_ipu_code = cur_all_risk_rec.ipu_code;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        NULL;
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error determining if the record exists in the risk register...');
                END;

                IF NVL (v_ris_reg_cnt, 0) = 0
                THEN
                    v_seq_rsk := NULL;

                    BEGIN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || gin_rskrg_code_seq.NEXTVAL)
                          INTO v_seq_rsk
                          FROM DUAL;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_RSKRG_CODE_SEQ . ');
                    END;

                    BEGIN
                        --DBMS_OUTPUT.PUT_LINE('here 20');
                        --DBMS_OUTPUT.PUT_LINE('inserting risk reg');
                        --DBMS_OUTPUT.PUT_LINE('cur_pol_rec.POL_POLICY_STATUS='||cur_pol_rec.POL_POLICY_STATUS);
                        --    raise_error('GIS_RI_PROCEDURES::LN 6327::Own ret = '||cur_all_risk_rec.ipu_endos_diff_amt - v_eq_prem);
                        INSERT INTO gin_policy_risk_reg (
                                        rskrg_code,
                                        rskrg_pol_policy_no,
                                        rskrg_pol_ren_endos_no,
                                        rskrg_pol_batch_no,
                                        rskrg_wef_dt,
                                        rskrg_wet_dt,
                                        rskrg_sum_insured,
                                        rskrg_nett_premium,
                                        rskrg_fap,
                                        rskrg_gp,
                                        rskrg_endos_diff_amt,
                                        rskrg_risk_cover_to,
                                        rskrg_risk_cover_from,
                                        rskrg_ipu_code,
                                        rskrg_scl_code,
                                        rskrg_si_diff,
                                        rskrg_ipu_id,
                                        rskrg_pr_code,
                                        rskrg_ggt_trans_no,
                                        rskrg_facre_rate,
                                        rskrg_com_ret_rate,
                                        rskrg_comp_net_ret,
                                        rskrg_mand_rate,
                                        rskrg_mand_prem,
                                        rskrg_mand_com,
                                        rskrg_quota_rate,
                                        rskrg_quota_com,
                                        rskrg_fstsup_rate,
                                        rskrg_fstsup_com,
                                        rskrg_secsup_rate,
                                        rskrg_secsup_com,
                                        rskrg_fstsup_prem,
                                        rskrg_secsup_prem,
                                        rskrg_facre_prem,
                                        rskrg_facre_com,
                                        rskrg_tran_date,
                                        rskrg_comm_endos_diff_amt,
                                        rskrg_quota_prem,
                                        rskrg_uw_yr,
                                        rskrg_tot_endos_prem_dif,
                                        rskrg_cur_code,
                                        rskrg_cur_symbol,
                                        rskrg_quz_code,
                                        rskrg_quz_sht_desc,
                                        rskrg_exchange_rate,
                                        rskrg_prem_tax,
                                        rskrg_ipu_property_id,
                                        rskrg_tran_type,
                                        rskrg_coin_own_pct,
                                        rskrg_brn_code,
                                        rskrg_brn_sht_desc,
                                        rskrg_tl,
                                        rskrg_policy_type,
                                        rskrg_agnt_sht_desc,
                                        rskrg_agnt_agent_code,
                                        rskrg_secsup_eq_prem,
                                        rskrg_secsup_noneq_prem,
                                        rskrg_fstsup_eq_prem,
                                        rskrg_fstsup_noneq_prem,
                                        rskrg_quota_eq_prem,
                                        rskrg_quota_noneq_prem,
                                        rskrg_facre_eq_prem,
                                        rskrg_facre_noneq_prem,
                                        rskrg_mand_eq_prem,
                                        rskrg_mand_noneq_prem,
                                        rskrg_prp_code,
                                        rskrg_earthquake_prem,
                                        rskrg_mand_eq_com,
                                        rskrg_mand_noneq_com,
                                        rskrg_quota_eq_com,
                                        rskrg_quota_noneq_com,
                                        rskrg_fstsup_eq_com,
                                        rskrg_fstsup_noneq_com,
                                        rskrg_secsup_eq_com,
                                        rskrg_secsup_noneq_com,
                                        rskrg_facre_eq_com,
                                        rskrg_facre_noneq_com,
                                        rskrg_pool_prem,
                                        rskrg_pool_com,
                                        rskrg_pool_vat,
                                        rskrg_pool_si,
                                        rskrg_pool_rate,
                                        rskrg_reinsure_amt,
                                        rskrg_facre_ob_prem,
                                        rskrg_facre_ob_rate,
                                        rskrg_facre_ob_com,
                                        rskrg_facre_eq_ob_prem,
                                        rskrg_facre_noneq_ob_prem,
                                        rskrg_facre_eq_ob_com,
                                        rskrg_facre_noneq_ob_com,
                                        rskrg_mand_si,
                                        rskrg_quota_si,
                                        rskrg_fstsup_si,
                                        rskrg_secsup_si,
                                        rskrg_facre_si,
                                        rskrg_facre_ob_si,
                                        rskrg_net_si,
                                        rskrg_gross_si,
                                        rskrg_covt_code,
                                        rskrg_health_tax,
                                        rskrg_road_safety_tax,
                                        rskrg_motor_levy,
                                        rskrg_certchg,
                                        rskrg_vipcertchg,
                                        rskrg_reinsure_diff_amt,
                                        rskrg_xol_prem,
                                        rskrg_xol_com,
                                        rskrg_xol_si,
                                        rskrg_xol_rate,
                                        rskrg_ri_net_less_eq_prem)
                                 VALUES (
                                     v_seq_rsk,
                                     cur_pol_rec.pol_policy_no,
                                     cur_pol_rec.pol_ren_endos_no,
                                     cur_pol_rec.pol_batch_no,
                                     cur_all_risk_rec.ipu_wef,
                                     cur_all_risk_rec.ipu_wef,
                                     cur_all_risk_rec.ipu_value,
                                     cur_all_risk_rec.ipu_nett_premium,
                                     cur_all_risk_rec.ipu_fap,
                                     cur_all_risk_rec.ipu_gp,
                                     cur_all_risk_rec.ipu_endos_diff_amt,
                                     cur_all_risk_rec.ipu_eff_wet,
                                     cur_all_risk_rec.ipu_eff_wef,
                                     cur_all_risk_rec.ipu_code,
                                     cur_all_risk_rec.ipu_sec_scl_code,
                                     DECODE (cur_pol_rec.pol_policy_status,
                                             'DC', 0,
                                             cur_all_risk_rec.ipu_si_diff),
                                     cur_all_risk_rec.ipu_id,
                                     v_seq,
                                     v_trans_no,
                                     v_facre_rate,
                                     v_net_rate,
                                     v_rsk_net_prem,
                                     v_mand_rate,
                                     v_mand_prem,
                                     v_mand_com,
                                     v_qs_rate,
                                     v_qs_com,
                                     v_fstsup_rate,
                                     v_fstsup_com,
                                     v_secsup_rate,
                                     v_secsup_com,
                                     v_fstsup_prem,
                                     v_secsup_prem,
                                     v_facre_prem,
                                     v_facre_com,
                                     v_orig_trans_date,
                                       NVL (
                                           cur_all_risk_rec.ipu_comm_endos_diff_amt,
                                           0)
                                     + NVL (
                                           cur_all_risk_rec.ipu_ri_agnt_comm_amt,
                                           0),
                                     v_qs_prem,
                                     cur_pol_rec.pol_uw_year,
                                     cur_all_risk_rec.ipu_tot_endos_prem_dif,
                                     cur_pol_rec.pol_cur_code,
                                     cur_pol_rec.pol_cur_symbol,
                                     cur_all_risk_rec.ipu_quz_code,
                                     cur_all_risk_rec.ipu_quz_sht_desc,
                                     v_exhange_rate,
                                     cur_all_risk_rec.ipu_prem_tax,
                                     cur_all_risk_rec.ipu_property_id,
                                     DECODE (cur_pol_rec.pol_policy_status,
                                             'DC', 'DC',
                                             cur_all_risk_rec.ipu_status),
                                     NVL (cur_pol_rec.pol_coinsurance_share,
                                          100),
                                     cur_pol_rec.pol_brn_code,
                                     cur_pol_rec.pol_brn_sht_desc,
                                     cur_all_risk_rec.ipu_itl,
                                     cur_pol_rec.pol_policy_type,
                                     cur_pol_rec.pol_agnt_sht_desc,
                                     cur_pol_rec.pol_agnt_agent_code,
                                     v_secsup_eq_prem,
                                     v_secsup_noneq_prem,
                                     v_fstsup_eq_prem,
                                     v_fstsup_noneq_prem,
                                     v_qs_eq_prem,
                                     v_qs_noneq_prem,
                                     v_facre_eq_prem,
                                     v_facre_noneq_prem,
                                     v_mand_eq_prem,
                                     v_mand_noneq_prem,
                                     cur_all_risk_rec.ipu_prp_code,
                                     v_eq_prem,
                                     v_mand_eq_com,
                                     v_mand_noneq_com,
                                     v_qs_eq_com,
                                     v_qs_noneq_com,
                                     v_fstsup_eq_com,
                                     v_fstsup_noneq_com,
                                     v_secsup_eq_com,
                                     v_secsup_noneq_com,
                                     v_facre_eq_com,
                                     v_facre_noneq_com,
                                     v_pool_prem,
                                     v_pool_comm,
                                     v_pool_vat,
                                     v_pool_si,
                                     v_pool_rate,
                                     cur_all_risk_rec.ipu_reinsure_amt,
                                     v_ob_facre_prem,
                                     v_ob_facre_rate,
                                     v_ob_facre_com,
                                     v_ob_facre_eq_prem,
                                     v_ob_facre_noneq_prem,
                                     v_facre_eq_com,
                                     v_facre_noneq_com,
                                     v_mand_si,
                                     v_qs_si,
                                     v_fstsup_si,
                                     v_secsup_si,
                                     v_facre_si,
                                     v_ob_facre_si,
                                     v_pol_net_si,
                                     v_pol_gross_si,
                                     cur_all_risk_rec.ipu_covt_code,
                                     cur_all_risk_rec.ipu_health_tax,
                                     cur_all_risk_rec.ipu_road_safety_tax,
                                     cur_all_risk_rec.ipu_motor_levy,
                                     cur_all_risk_rec.ipu_certchg,
                                     cur_all_risk_rec.ipu_vipcertchg,
                                     v_ri_si_diff,
                                     v_xol_prem,
                                     v_xol_comm,
                                     v_xol_si,
                                     v_xol_rate,
                                       cur_all_risk_rec.ipu_endos_diff_amt
                                     - v_eq_prem);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO INSERT RECORD INTO THE POLICY RISK REGISTER.');
                    END;

                    --               RAISE_ERROR('AHA AHA KWA PACKAGE...................');

                    NULL;
                ELSE
                    BEGIN
                        UPDATE gin_policy_risk_reg
                           SET rskrg_facre_rate = v_facre_rate,
                               rskrg_com_ret_rate = v_net_rate,
                               rskrg_comp_net_ret = v_rsk_net_prem,
                               rskrg_mand_rate = v_mand_rate,
                               rskrg_mand_prem = v_mand_prem,
                               rskrg_mand_com = v_mand_com,
                               rskrg_quota_rate = v_qs_rate,
                               rskrg_quota_com = v_qs_com,
                               rskrg_fstsup_rate = v_fstsup_rate,
                               rskrg_fstsup_com = v_fstsup_com,
                               rskrg_secsup_rate = v_secsup_rate,
                               rskrg_secsup_com = v_secsup_com,
                               rskrg_fstsup_prem = v_fstsup_prem,
                               rskrg_secsup_prem = v_secsup_prem,
                               rskrg_facre_prem = v_facre_prem,
                               rskrg_facre_com = v_facre_com,
                               rskrg_quota_prem = v_qs_prem,
                               rskrg_secsup_eq_prem = v_secsup_eq_prem,
                               rskrg_secsup_noneq_prem = v_secsup_noneq_prem,
                               rskrg_fstsup_eq_prem = v_fstsup_eq_prem,
                               rskrg_fstsup_noneq_prem = v_fstsup_noneq_prem,
                               rskrg_quota_eq_prem = v_qs_eq_prem,
                               rskrg_quota_noneq_prem = v_qs_noneq_prem,
                               rskrg_facre_eq_prem = v_facre_eq_prem,
                               rskrg_facre_noneq_prem = v_facre_noneq_prem,
                               rskrg_mand_eq_prem = v_mand_eq_prem,
                               rskrg_mand_noneq_prem = v_mand_noneq_prem,
                               rskrg_earthquake_prem = v_eq_prem,
                               rskrg_mand_eq_com = v_mand_eq_com,
                               rskrg_mand_noneq_com = v_qs_noneq_com,
                               rskrg_quota_eq_com = v_qs_eq_com,
                               rskrg_quota_noneq_com = v_qs_noneq_com,
                               rskrg_fstsup_eq_com = v_fstsup_eq_com,
                               rskrg_fstsup_noneq_com = v_fstsup_noneq_com,
                               rskrg_secsup_eq_com = v_secsup_eq_com,
                               rskrg_secsup_noneq_com = v_secsup_noneq_com,
                               rskrg_facre_eq_com = v_facre_eq_com,
                               rskrg_facre_noneq_com = v_facre_noneq_com,
                               rskrg_pool_prem = v_pool_prem,
                               rskrg_pool_com = v_pool_comm,
                               rskrg_pool_vat = v_pool_vat,
                               rskrg_pool_si = v_pool_si,
                               rskrg_pool_rate = v_pool_rate,
                               rskrg_reinsure_amt =
                                   cur_all_risk_rec.ipu_reinsure_amt,
                               rskrg_facre_ob_prem = v_ob_facre_prem,
                               rskrg_facre_ob_rate = v_ob_facre_rate,
                               rskrg_facre_ob_com = v_ob_facre_com,
                               rskrg_facre_eq_ob_prem = v_ob_facre_eq_prem,
                               rskrg_facre_noneq_ob_prem =
                                   v_ob_facre_noneq_prem,
                               rskrg_facre_eq_ob_com = v_facre_eq_com,
                               rskrg_facre_noneq_ob_com = v_facre_noneq_com,
                               rskrg_mand_si = v_mand_si,
                               rskrg_quota_si = v_qs_si,
                               rskrg_fstsup_si = v_fstsup_si,
                               rskrg_secsup_si = v_secsup_si,
                               rskrg_facre_si = v_facre_si,
                               rskrg_facre_ob_si = v_ob_facre_si,
                               rskrg_net_si = v_pol_net_si,
                               rskrg_gross_si = v_pol_gross_si,
                               rskrg_reinsure_diff_amt = v_ri_si_diff,
                               rskrg_xol_prem = v_xol_prem,
                               rskrg_xol_com = v_xol_comm,
                               rskrg_xol_si = v_xol_si,
                               rskrg_xol_rate = v_xol_rate,
                               rskrg_ri_net_less_eq_prem =
                                     cur_all_risk_rec.ipu_endos_diff_amt
                                   - v_eq_prem
                         WHERE     rskrg_pr_code = v_seq
                               AND rskrg_ipu_code = cur_all_risk_rec.ipu_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error updating reinsurance amounts in the risk register...');
                    END;
                END IF;

                --            raise_error('GIS_RI_PROCEDURES::LN 6641::v_non_eq_prem = '||v_eq_prem||
                --                        ';'||v_non_eq_prem||
                --                        ';'||v_fstsup_eq_prem||
                --                        ';'||v_fstsup_noneq_prem||
                --                        ';'||v_secsup_eq_prem||
                --                        ';'||v_secsup_noneq_prem||
                --                        ';'||v_facre_eq_prem||
                --                        ';'||v_facre_noneq_prem);
                BEGIN
                    SELECT rskrg_code
                      INTO v_rskrg_code
                      FROM gin_policy_register, gin_policy_risk_reg
                     WHERE     pr_code = rskrg_pr_code
                           AND rskrg_pr_code = v_pr_code
                           AND pr_ggt_trans_no = v_trans_no
                           AND rskrg_ipu_code = cur_all_risk_rec.ipu_code;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        NULL;
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error determining if the record exists in the risk register...');
                END;

                DELETE gin_policy_treaty_part_reg
                 WHERE     trtpg_pr_code = v_pr_code
                       AND trtpg_rskrg_code = v_rskrg_code;

                DELETE gin_policy_risk_treaty_reg
                 WHERE     trtrg_pr_code = v_pr_code
                       AND trtrg_rskrg_code = v_rskrg_code;



                FOR rdtls
                    IN cur_rsk_rein_dtls (cur_all_risk_rec.ipu_code,
                                          v_trans_no)
                LOOP
                    INSERT INTO gin_policy_risk_treaty_reg (
                                    trtrg_code,
                                    trtrg_ptotr_code,
                                    trtrg_pr_code,
                                    trtrg_rskrg_code,
                                    trtrg_rei_code,
                                    trtrg_trt_code,
                                    trtrg_ta_code,
                                    trtrg_as_code,
                                    trtrg_risk_cur_code,
                                    trtrg_trt_cur_code,
                                    trtrg_exch_rate,
                                    trtrg_trt_si_pcur,
                                    trtrg_trt_si_tcur,
                                    trtrg_trt_prem_pcur,
                                    trtrg_trt_prem_tcur,
                                    trtrg_trt_share,
                                    trtrg_trt_sht_desc,
                                    trtrg_rate,
                                    trtrg_trt_comm_pcur,
                                    trtrg_trt_comm_tcur,
                                    trtrg_cession_pct,
                                    trtrg_uwyr,
                                    trtrg_ipu_code,
                                    trtrg_pol_batch_no,
                                    trtrg_risk_cur_symbol,
                                    trtrg_trt_cur_symbol,
                                    trtrg_prem_tax_pcur,
                                    trtrg_prem_tax_tcur,
                                    trtrg_trs_code,
                                    trtrg_trs_sht_desc,
                                    trtrg_rate_type,
                                    trtrg_remarks,
                                    trtrg_ggt_tran_no,
                                    trtrg_tran_type,
                                    trtrg_rprem_tax_pcur,
                                    trtrg_prrd_code,
                                    trtrg_comm_rate,
                                    trtrg_auth_dt,
                                    trtrg_rprem_tax_tcur,
                                    trtrg_earthqke_prem,
                                    trtrg_earthqke_comm_rate,
                                    trtrg_earthqke_comm,
                                    trtrg_net_less_eq_comm,
                                    trtrg_net_less_eq_prem,
                                    trtrg_ctl_code,
                                    trtrg_co_rprem_tax_pcur)
                         VALUES (trtrg_code_seq.NEXTVAL,
                                 rdtls.ptotr_code,
                                 v_pr_code,
                                 v_rskrg_code,
                                 rdtls.ptotr_rei_code,
                                 rdtls.ptotr_trt_code,
                                 rdtls.ptotr_ta_code,
                                 rdtls.ptotr_as_code,
                                 rdtls.ptotr_risk_cur_code,
                                 rdtls.ptotr_trt_cur_code,
                                 rdtls.ptotr_exch_rate,
                                 rdtls.ptotr_trt_si_pcur,
                                 rdtls.ptotr_trt_si_tcur,
                                 rdtls.ptotr_trt_prem_pcur,
                                 rdtls.ptotr_trt_prem_tcur,
                                 rdtls.ptotr_trt_share,
                                 rdtls.ptotr_trt_sht_desc,
                                 rdtls.ptotr_rate,
                                 rdtls.ptotr_trt_comm_pcur,
                                 rdtls.ptotr_trt_comm_tcur,
                                 rdtls.ptotr_cession_pct,
                                 rdtls.ptotr_uwyr,
                                 rdtls.ptotr_ipu_code,
                                 rdtls.ptotr_pol_batch_no,
                                 rdtls.ptotr_risk_cur_symbol,
                                 rdtls.ptotr_trt_cur_symbol,
                                 rdtls.ptotr_prem_tax_pcur,
                                 rdtls.ptotr_prem_tax_tcur,
                                 rdtls.ptotr_trs_code,
                                 rdtls.ptotr_trs_sht_desc,
                                 rdtls.ptotr_rate_type,
                                 rdtls.ptotr_remarks,
                                 rdtls.ptotr_ggt_tran_no,
                                 rdtls.ptotr_tran_type,
                                 rdtls.ptotr_rprem_tax_pcur,
                                 rdtls.ptotr_prrd_code,
                                 rdtls.ptotr_comm_rate,
                                 rdtls.ptotr_auth_dt,
                                 rdtls.ptotr_rprem_tax_tcur,
                                 rdtls.ptotr_earthqke_prem,
                                 rdtls.ptotr_earthqke_comm_rate,
                                 rdtls.ptotr_earthqke_comm,
                                 rdtls.ptotr_net_less_eq_comm,
                                 rdtls.ptotr_net_less_eq_prem,
                                 rdtls.ptotr_ctl_code,
                                 rdtls.ptotr_trt_prem_tax_pcur);

                    FOR pdtls IN cur_rsk_rein_part_dtls (rdtls.ptotr_code)
                    LOOP
                        INSERT INTO gin_policy_treaty_part_reg (
                                        trtpg_code,
                                        trtpg_ptotr_code,
                                        trtpg_part_code,
                                        trtpg_pr_code,
                                        trtpg_rskrg_code,
                                        trtpg_trtrg_code,
                                        trtpg_rei_code,
                                        trtpg_cede_rate,
                                        trtpg_si_amt_pcur,
                                        trtpg_si_amt_tcur,
                                        trtpg_comm_amt_pcur,
                                        trtpg_comm_amt_tcur,
                                        trtpg_prem_amt_pcur,
                                        trtpg_prem_amt_tcur,
                                        trtpg_trt_code,
                                        trtpg_trt_sht_desc,
                                        trtpg_agnt_agent_code,
                                        trtpg_agnt_sht_desc,
                                        trtpg_uwyr,
                                        trtpg_pol_batch_no,
                                        trtpg_pol_policy_no,
                                        trtpg_pol_ren_endos_no,
                                        trtpg_ipu_code,
                                        trtpg_rprem_tax_pcur,
                                        trtpg_rprem_tax_tcur,
                                        trtpg_prem_tax_pcur,
                                        trtpg_prem_tax_tcur,
                                        trtpg_ta_code,
                                        trtpg_as_code,
                                        trtpg_fiscal_year,
                                        trtpg_trs_code,
                                        trtpg_trs_sht_desc,
                                        trtpg_trpa_code,
                                        trtpg_mgt_fee_tcur,
                                        trtpg_mgt_fee_pcur,
                                        trtpg_co_rprem_tax_pcur)
                             VALUES (trtpg_code_seq.NEXTVAL,
                                     rdtls.ptotr_code,
                                     pdtls.part_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     trtrg_code_seq.CURRVAL,
                                     rdtls.ptotr_rei_code,
                                     pdtls.part_cede_rate,
                                     pdtls.part_si_amt_pcur,
                                     pdtls.part_si_amt_tcur,
                                     pdtls.part_comm_amt_pcur,
                                     pdtls.part_comm_amt_tcur,
                                     pdtls.part_prem_amt_pcur,
                                     pdtls.part_prem_amt_tcur,
                                     pdtls.part_trt_code,
                                     pdtls.part_trt_sht_desc,
                                     pdtls.part_agnt_agent_code,
                                     pdtls.part_agnt_sht_desc,
                                     pdtls.part_uwyr,
                                     pdtls.part_pol_batch_no,
                                     pdtls.part_pol_policy_no,
                                     pdtls.part_pol_ren_endos_no,
                                     pdtls.part_ipu_code,
                                     pdtls.part_rprem_tax_pcur,
                                     pdtls.part_rprem_tax_tcur,
                                     pdtls.part_prem_tax_pcur,
                                     pdtls.part_prem_tax_tcur,
                                     pdtls.part_ta_code,
                                     pdtls.part_as_code,
                                     pdtls.part_fiscal_year,
                                     pdtls.part_trs_code,
                                     pdtls.part_trs_sht_desc,
                                     pdtls.part_trpa_code,
                                     pdtls.part_mgt_fee_tcur,
                                     pdtls.part_mgt_fee_pcur,
                                     pdtls.part_trt_prem_tax_pcur);
                    END LOOP;
                END LOOP;

                DELETE gin_policy_risk_facre_reg
                 WHERE     facrg_pr_code = v_pr_code
                       AND facrg_rskrg_code = v_rskrg_code;

                FOR fdtls IN cur_risk_facre_dtls (cur_all_risk_rec.ipu_code)
                LOOP
                    INSERT INTO gin_policy_risk_facre_reg (
                                    facrg_code,
                                    facrg_fc_code,
                                    facrg_pr_code,
                                    facrg_rskrg_code,
                                    facrg_agnt_agent_code,
                                    facrg_amount,
                                    facrg_wef,
                                    facrg_ipu_code,
                                    facrg_agent_sht_desc,
                                    facrg_rate,
                                    facrg_comm_rate,
                                    facrg_comm_amt,
                                    facrg_don_by,
                                    facrg_dc_no,
                                    facrg_prem_amt,
                                    facrg_pol_batch_no,
                                    facrg_uwyr,
                                    facrg_ggt_tran_no,
                                    facrg_tran_type,
                                    facrg_scl_code,
                                    facrg_amt_or_rate,
                                    facrg_prrd_code,
                                    facrg_auth_dt,
                                    facrg_wet,
                                    facrg_earthqke_prem,
                                    facrg_earthqke_comm_rate,
                                    facrg_earthqke_comm,
                                    facrg_net_less_eq_comm,
                                    facrg_net_less_eq_prem,
                                    facrg_facre_type,
                                    facrg_prem_diff_amt,
                                    facrg_remark,
                                    facrg_vat_amt,
                                    facrg_vat_rate,
                                    facrg_mngmnt_amt,
                                    facrg_rein_tax_amt,
                                    facrg_mngmnt_type,
                                    facrg_mngmnt_value,
                                    facrg_rein_tax_type,
                                    facrg_rein_tax_value)
                         VALUES (facrg_code_seq.NEXTVAL,
                                 fdtls.fc_code,
                                 v_pr_code,
                                 v_rskrg_code,
                                 fdtls.fc_agnt_agent_code,
                                 fdtls.fc_amount,
                                 fdtls.fc_wef,
                                 fdtls.fc_ipu_code,
                                 fdtls.fc_agent_sht_desc,
                                 fdtls.fc_rate,
                                 fdtls.fc_comm_rate,
                                 fdtls.fc_comm_amt,
                                 fdtls.fc_don_by,
                                 fdtls.fc_dc_no,
                                 fdtls.fc_prem_amt,
                                 fdtls.fc_pol_batch_no,
                                 fdtls.fc_uwyr,
                                 fdtls.fc_ggt_tran_no,
                                 fdtls.fc_tran_type,
                                 fdtls.fc_scl_code,
                                 fdtls.fc_amt_or_rate,
                                 fdtls.fc_prrd_code,
                                 fdtls.fc_auth_dt,
                                 fdtls.fc_wet,
                                 fdtls.fc_earthqke_prem,
                                 fdtls.fc_earthqke_comm_rate,
                                 fdtls.fc_earthqke_comm,
                                 fdtls.fc_net_less_eq_comm,
                                 fdtls.fc_net_less_eq_prem,
                                 fdtls.fc_facre_type,
                                 fdtls.fc_prem_diff_amt,
                                 fdtls.fc_remark,
                                 fdtls.fc_vat_amt,
                                 fdtls.fc_vat_rate,
                                 fdtls.fc_mngmnt_amt,
                                 fdtls.fc_rein_tax_amt,
                                 fdtls.fc_mngmnt_type,
                                 fdtls.fc_mngmnt_value,
                                 fdtls.fc_rein_tax_type,
                                 fdtls.fc_rein_tax_value);
                END LOOP;

                DELETE gin_policy_risk_pool_reg
                 WHERE     poorg_pr_code = v_pr_code
                       AND poorg_rskrg_code = v_rskrg_code;

                FOR pdtls IN cur_risk_pool_dtls (cur_all_risk_rec.ipu_code)
                LOOP
                    INSERT INTO gin_policy_risk_pool_reg (
                                    poorg_code,
                                    poorg_prprd_code,
                                    poorg_pr_code,
                                    poorg_rskrg_code,
                                    poorg_scrpr_code,
                                    poorg_rein_pool_rate,
                                    poorg_ipu_code,
                                    poorg_scl_code,
                                    poorg_covt_code,
                                    poorg_pol_batch_no,
                                    poorg_rein_pool_amt,
                                    poorg_rein_pool_comm_rate,
                                    poorg_rein_pool_vat_rate,
                                    poorg_rein_pool_comm_amt,
                                    poorg_rein_pool_vat_amt,
                                    poorg_ggt_tran_no,
                                    poorg_uwyr,
                                    poorg_pol_ren_endos_no,
                                    poorg_date,
                                    poorg_risk_trt_own_ret_amt,
                                    poorg_pta_code,
                                    poorg_os_claim_amt,
                                    poorg_paid_claim_amt,
                                    poorg_pool_net_amt,
                                    poorg_prrd_code,
                                    poorg_pool_si)
                         VALUES (poorg_code_seq.NEXTVAL,
                                 pdtls.prprd_code,
                                 v_pr_code,
                                 v_rskrg_code,
                                 pdtls.prprd_scrpr_code,
                                 pdtls.prprd_rein_pool_rate,
                                 pdtls.prprd_ipu_code,
                                 pdtls.prprd_scl_code,
                                 pdtls.prprd_covt_code,
                                 pdtls.prprd_pol_batch_no,
                                 pdtls.prprd_rein_pool_amt,
                                 pdtls.prprd_rein_pool_comm_rate,
                                 pdtls.prprd_rein_pool_vat_rate,
                                 pdtls.prprd_rein_pool_comm_amt,
                                 pdtls.prprd_rein_pool_vat_amt,
                                 pdtls.prprd_ggt_tran_no,
                                 pdtls.prprd_uwyr,
                                 pdtls.prprd_pol_ren_endos_no,
                                 pdtls.prprd_date,
                                 pdtls.prprd_risk_trt_own_ret_amt,
                                 pdtls.prprd_pta_code,
                                 pdtls.prprd_os_claim_amt,
                                 pdtls.prprd_paid_claim_amt,
                                 pdtls.prprd_pool_net_amt,
                                 pdtls.prprd_prrd_code,
                                 pdtls.prprd_pool_si);
                END LOOP;
            END LOOP;

            IF ABS (
                     ABS (NVL (v_rsk_tot_net_prem, 0))
                   - ABS (NVL (v_pol_net_prem, 0))) >
               15
            THEN
                raise_error (
                       'THE NET PREMIUM AT RISK LEVEL DOES NOT TALLY WITH THAT AT POLICY LEVEL AT STEP 2..'
                    || v_rsk_tot_net_prem
                    || ' net '
                    || v_pol_net_prem);
            END IF;

            BEGIN
                SELECT NVL (pr_endos_diff_amt, 0)
                  INTO v_pol_prem
                  FROM gin_policy_register
                 WHERE pr_code = v_seq;
            --GROUP BY pr_code,PR_ENDOS_DIFF_AMT;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'ERROR POSTING TO REGISTERS. RECORD NOT CREATED..');
                WHEN OTHERS
                THEN
                    raise_error ('ERROR POSTING TO REGISTERS');
            END;

            BEGIN
                SELECT SUM (NVL (rskrg_endos_diff_amt, 0))
                  INTO v_rsk_prem
                  FROM gin_policy_risk_reg
                 WHERE rskrg_pr_code = v_seq;
            --GROUP BY pr_code,PR_ENDOS_DIFF_AMT;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_rsk_prem := 0;
                WHEN OTHERS
                THEN
                    raise_error ('ERROR POSTING TO REGISTERS');
            END;

            IF NVL (v_pol_prem, 0) - NVL (v_rsk_prem, 0) > 15
            THEN
                raise_error (
                       'THE NET PREMIUM AT RISK LEVEL: '
                    || NVL (v_rsk_prem, 0)
                    || ' DOES NOT TALLY WITH THAT AT POLICY LEVEL:'
                    || NVL (v_pol_prem, 0));
            END IF;
        END LOOP;
    --  raise_error('done');
    --DBMS_OUTPUT.PUT_LINE('AFTER INSERTING RISK REGISTER');
    --**************************** removed from here
    END;

    PROCEDURE update_ri_register (v_pol_batch_no      NUMBER,
                                  v_tran_no        IN NUMBER,
                                  v_tran_dt           DATE)
    IS
        v_tran_type             VARCHAR2 (5);
        v_facre_com             NUMBER := 0;
        v_facre_ref_com         NUMBER := 0;
        v_facre_prem            NUMBER := 0;
        v_facre_ref_prem        NUMBER := 0;
        v_facre_eq_prem         NUMBER := 0;
        v_facre_noneq_prem      NUMBER := 0;
        v_facre_eq_com          NUMBER := 0;
        v_facre_noneq_com       NUMBER := 0;

        v_errmsg                VARCHAR2 (200);
        v_seq                   NUMBER;
        al_id                   NUMBER;
        v_prem_type             VARCHAR2 (20);
        v_seq_rsk               NUMBER;
        v_comp_rate             NUMBER := 0;
        v_ri_premium            NUMBER := 0;
        v_facre_com_rate        NUMBER := 0;
        v_facre_ref_com_rate    NUMBER := 0;
        v_facre_prem_rate       NUMBER := 0;
        v_facre_ref_prem_rate   NUMBER := 0;
        v_xol_prem              NUMBER := 0;
        v_xol_comm              NUMBER := 0;
        v_xol_si                NUMBER := 0;
        v_xol_rate              NUMBER := 0;
        v_eq_prem               NUMBER := 0;
        v_non_eq_prem           NUMBER := 0;
        v_com_ret               NUMBER := 0;
        v_pol_net_prem          NUMBER := 0;
        v_pool_prem             NUMBER := 0;
        v_pol_net_si            NUMBER := 0;
        v_pol_gross_si          NUMBER := 0;
        v_mand_eq_prem          NUMBER := 0;
        v_mand_noneq_prem       NUMBER := 0;
        v_mand_eq_com           NUMBER := 0;
        v_mand_noneq_com        NUMBER := 0;
        v_fstsup_eq_prem        NUMBER := 0;
        v_fstsup_noneq_prem     NUMBER := 0;
        v_fstsup_eq_com         NUMBER := 0;
        v_fstsup_noneq_com      NUMBER := 0;

        v_secsup_eq_prem        NUMBER := 0;
        v_secsup_noneq_prem     NUMBER := 0;
        v_secsup_eq_com         NUMBER := 0;
        v_secsup_noneq_com      NUMBER := 0;

        v_qs_eq_prem            NUMBER := 0;
        v_qs_noneq_prem         NUMBER := 0;
        v_qs_eq_com             NUMBER := 0;
        v_qs_noneq_com          NUMBER := 0;
        v_tran_sign             NUMBER;

        CURSOR cur_all_risks IS
            SELECT prrd_code,
                   pol_policy_no,
                   pol_ren_endos_no,
                   pol_batch_no,
                   pol_policy_type,
                   pol_agnt_agent_code,
                   pol_agnt_sht_desc,
                   pol_wef_dt,
                   pol_wet_dt,
                   pol_cur_code,
                   pol_brn_code,
                   pol_cur_symbol,
                   pol_brn_sht_desc,
                   pol_inception_uwyr,
                   pol_pro_code,
                   pol_prev_batch_no,
                   ipu_wef,
                   ipu_wet,
                   ipu_eff_wet,
                   ipu_eff_wef,
                   ipu_code,
                   pol_uw_year,
                   ipu_sec_scl_code,
                   ipu_id,
                   prrd_comp_retention,
                   pol_policy_status,
                   ipu_comm_endos_diff_amt,
                   ipu_quz_code,
                   ipu_quz_sht_desc,
                   pol_cur_rate,
                   ipu_prem_tax,
                   ipu_property_id,
                   ipu_status,
                   pol_coinsurance_share,
                   ipu_current_prrd_code,
                   ipu_endos_diff_amt,
                   ipu_si_diff,
                   prrd_net_prem,
                   prrd_ri_prem,
                   pol_si_diff,
                   pol_tot_endos_diff_amt,
                   prrd_refund_net_prem,
                   pol_comm_amt,
                   pol_comm_endos_diff_amt,
                   pol_client_policy_number,
                   pol_prp_code,
                   pol_current_status,
                   pol_uwyr_length,
                   pol_policy_cover_to,
                   pol_policy_cover_from,
                   ipu_covt_code,
                   ipu_vipcertchg,
                   prrd_earthquake_prem
              FROM gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_policies
             WHERE     ipu_code = prrd_ipu_code
                   AND ipu_pol_batch_no = pol_batch_no
                   AND pol_batch_no = v_pol_batch_no
                   AND pol_loaded != 'Y'
                   AND prrd_tran_no = v_tran_no;

        CURSOR cur_rein (v_ipu_code NUMBER, v_prrd_code NUMBER)
        IS
              --           SELECT ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1001, NVL (ptotr_trt_prem_tcur, 0)),
              --                           0)))
              --                     mand_prem,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1001, NVL (ptotr_refund_prem, 0)),
              --                           0)))
              --                     mand_ref_prem,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1001, NVL (ptotr_trt_comm_tcur, 0)),
              --                           0)))
              --                     mand_com,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1001, NVL (ptotr_refund_com, 0)),
              --                           0)))
              --                     mand_ref_com,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1001, NVL (ptotr_cession_pct, 0)),
              --                           0)),
              --                     4)
              --                     mand_pct,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1001, NVL (ptotr_prev_cession_rate, 0)),
              --                           0)),
              --                     4)
              --                     mand_ref_pct,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1003, NVL (ptotr_trt_prem_tcur, 0)),
              --                           0)))
              --                     qs_prem,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1003, NVL (ptotr_trt_comm_tcur, 0)),
              --                           0)))
              --                     qs_com,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1003, NVL (ptotr_cession_pct, 0)),
              --                           0)),
              --                     4)
              --                     qs_pct,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1003, NVL (ptotr_refund_prem, 0)),
              --                           0)))
              --                     qs_ref_prem,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1003, NVL (ptotr_refund_com, 0)),
              --                           0)))
              --                     qs_ref_com,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   1003, NVL (ptotr_prev_cession_rate, 0)),
              --                           0)),
              --                     4)
              --                     qs_ref_pct,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10041, NVL (ptotr_trt_prem_tcur, 0)),
              --                           0)))
              --                     fstsup_prem,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10041, NVL (ptotr_trt_comm_tcur, 0)),
              --                           0)))
              --                     fstsup_com,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10041, NVL (ptotr_cession_pct, 0)),
              --                           0)),
              --                     4)
              --                     fstsup_pct,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10041, NVL (ptotr_refund_prem, 0)),
              --                           0)))
              --                     fstsup_ref_prem,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10041, NVL (ptotr_refund_com, 0)),
              --                           0)))
              --                     fstsup_ref_com,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10041, NVL (ptotr_prev_cession_rate, 0)),
              --                           0)),
              --                     4)
              --                     fstsup_ref_pct,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10042, NVL (ptotr_trt_prem_tcur, 0)),
              --                           0)))
              --                     secsup_prem,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10042, NVL (ptotr_trt_comm_tcur, 0)),
              --                           0)))
              --                     secsup_com,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10042, NVL (ptotr_cession_pct, 0)),
              --                           0)),
              --                     4)
              --                     secsup_pct,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10042, NVL (ptotr_refund_prem, 0)),
              --                           0)))
              --                     secsup_ref_prem,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10042, NVL (ptotr_refund_com, 0)),
              --                           0)))
              --                     secsup_ref_com,
              --                  ROUND (
              --                     SUM (
              --                        NVL (
              --                           DECODE (trs_trtg_code,
              --                                   10042, NVL (ptotr_prev_cession_rate, 0)),
              --                           0)),
              --                     4)
              --                     secsup_ref_pct
              --             FROM gin_policy_rein_risk_details, gin_treaties
              --            WHERE ptotr_trs_code = trs_code AND ptotr_prrd_code = v_prrd_code
              --         GROUP BY ptotr_ipu_code;

              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))         mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))         mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))         mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))         mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))         mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_comm, 0)),
                             0))         mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_cession_pct, 0)),
                             0))         mand_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_si_pcur, 0)),
                             0))         mand_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_prem, 0)),
                                 0)))    mand_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_com, 0)),
                                 0)))    mand_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1001, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              mand_ref_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))         qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))         qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))         qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))         qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))         qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_comm, 0)),
                             0))         qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_cession_pct, 0)),
                             0))         qs_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_si_pcur, 0)),
                             0))         qs_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))         fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))         fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))         fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))         fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))         fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                             0))         fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_cession_pct, 0)),
                             0))         fstsup_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_si_pcur, 0)),
                             0))         fstsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))         secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))         secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))         secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))         secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))         secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                             0))         secsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_cession_pct, 0)),
                             0))         secsup_pct,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_si_pcur, 0)),
                             0))         secsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_prem, 0)),
                                 0)))    secsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_com, 0)),
                                 0)))    secsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              secsup_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_prem, 0)),
                                 0)))    fstsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_com, 0)),
                                 0)))    fstsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              fstsup_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_prem, 0)),
                                 0)))    qs_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_com, 0)),
                                 0)))    qs_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1003, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              qs_ref_pct
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ipu_code = v_ipu_code
                     AND ptotr_ggt_tran_no = v_tran_no
                     AND ptotr_prrd_code = v_prrd_code
            GROUP BY ptotr_ipu_code;

        CURSOR cur_facre                              ----(v_prrd_code NUMBER)
                         IS
            SELECT SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_comm_amt, 0)),
                           0))                         facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_amount, 0)),
                           0))                         facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_amt, 0)),
                           0))                         facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_diff_amt, 0)),
                           0))                         fc_prem_diff_amt,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_prem, 0)),
                           0))                         facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))                         facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_comm, 0)),
                           0))                         facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))                         facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_amount, 0)),
                           0))                         ob_facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_comm_amt, 0)),
                           0))                         ob_facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_prem_amt, 0)),
                           0))                         ob_facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))                         ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))                         ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))                         ob_facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))                         ob_facre_noneq_comm,
                   SUM (NVL (fc_refund_comm, 0))       facre_ref_com,
                   SUM (NVL (fc_prev_comm_rate, 0))    facre_ref_com_rate,
                   SUM (NVL (fc_comm_rate, 0))         facre_com_rate,
                   --                  SUM (NVL (fc_prem_amt, 0)) facre_prem,
                   SUM (NVL (fc_rate, 0))              facre_rate,
                   SUM (NVL (fc_refund_prem, 0))       facre_ref_prem,
                   SUM (NVL (fc_prev_rate, 0))         facre_ref_prem_rate
              FROM gin_facre_cessions
             WHERE                               ---fc_prrd_code = v_prrd_code
                   ---AND
                    fc_ggt_tran_no = v_tran_no;

        --
        --           SELECT SUM (NVL (fc_comm_amt, 0)) facre_com,
        --                  SUM (NVL (fc_comm_rate, 0)) facre_com_rate,
        --                  SUM (NVL (fc_refund_comm, 0)) facre_ref_com,
        --                  SUM (NVL (fc_prev_comm_rate, 0)) facre_ref_com_rate,
        --                  SUM (NVL (fc_prem_amt, 0)) facre_prem,
        --                  SUM (NVL (fc_rate, 0)) facre_rate,
        --                  SUM (NVL (fc_refund_prem, 0)) facre_ref_prem,
        --                  SUM (NVL (fc_prev_rate, 0)) facre_ref_prem_rate
        --             FROM gin_facre_cessions
        --            WHERE fc_prrd_code = v_prrd_code
        --         GROUP BY fc_prrd_code;

        CURSOR cur_pol_xol_trans IS
            SELECT SUM (NVL (prxrd_rein_xol_comm_amt, 0))     xol_comm,
                   SUM (NVL (prxrd_rein_xol_amt, 0))          xol_prem,
                   SUM (NVL (prxrd_xol_si, 0))                xol_si,
                   SUM (NVL (prxrd_rein_xol_rate, 0))         xol_rate
              FROM gin_pol_rein_xol_risk_details
             WHERE     prxrd_ggt_tran_no = v_tran_no
                   AND prxrd_pol_batch_no = v_pol_batch_no;

        CURSOR cur_policy_own_ret (v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   SUM (
                         NVL (prrd_net_prem, 0)
                       * NVL (prrd_com_retention_rate, 0)
                       / 100)
                       --                   ROUND (
                       --                       SUM (
                       --                             NVL (prrd_net_prem, 0)
                       --                           * NVL (prrd_com_retention_rate, 0)
                       --                           / 100),
                       --                       v_rnd_param)
                       comp_gross_ret,
                   SUM (NVL (prrd_net_prem, 0))
                       --                   ROUND (SUM (NVL (prrd_net_prem, 0)), v_rnd_param)
                       comp_net_ret,
                   --                   ROUND (SUM (NVL (prrd_comp_retention, 0)), v_rnd_param)
                   SUM (NVL (prrd_comp_retention, 0))
                       comp_net_si,
                   --                   ROUND (SUM (NVL (ipu_reinsure_amt, 0)), v_rnd_param)
                   SUM (NVL (ipu_reinsure_amt, 0))
                       comp_gross_si
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_xol_trans (v_ipu_code NUMBER)
        IS
            SELECT SUM (NVL (prxrd_rein_xol_comm_amt, 0))     xol_comm,
                   SUM (NVL (prxrd_rein_xol_amt, 0))          xol_prem,
                   SUM (NVL (prxrd_xol_si, 0))                xol_si,
                   SUM (NVL (prxrd_rein_xol_rate, 0))         xol_rate
              FROM gin_pol_rein_xol_risk_details
             WHERE     prxrd_ggt_tran_no = v_tran_no
                   AND prxrd_pol_batch_no = v_pol_batch_no
                   AND prxrd_ipu_code = v_ipu_code;
    BEGIN
        FOR cur_all_risks_rec IN cur_all_risks
        LOOP
            v_prem_type := NULL;
            v_prem_type := cur_all_risks_rec.pol_policy_status;

            BEGIN
                v_comp_rate := 0;
                v_ri_premium := 0;
                v_facre_com_rate := 0;
                v_facre_prem_rate := 0;

                SELECT prrd_com_retention_rate, prrd_ri_prem, prrd_facre_rate
                  INTO v_comp_rate, v_ri_premium, v_facre_prem_rate
                  FROM gin_policy_risk_ri_dtls
                 WHERE prrd_code = cur_all_risks_rec.prrd_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR- UNABLE TO RETRIVE THE RISK PREVIOUS SESSIONS..AT 4. ');
            END;

            FOR cur_policy_own_ret_rec IN cur_policy_own_ret (v_tran_no)
            LOOP
                v_com_ret := cur_policy_own_ret_rec.comp_gross_ret;
                v_pol_net_prem := cur_policy_own_ret_rec.comp_net_ret;
                --                    - NVL (v_pool_prem, 0)
                --                    + NVL (v_facre_diff_amt, 0);
                v_pol_net_si := cur_policy_own_ret_rec.comp_net_si;
                v_pol_gross_si := cur_policy_own_ret_rec.comp_gross_si;
                DBMS_OUTPUT.put_line (
                       'v_pol_net_prem='
                    || v_pol_net_prem
                    || 'cur_policy_own_ret_rec.comp_net_ret='
                    || cur_policy_own_ret_rec.comp_net_ret);
                v_eq_prem :=
                    v_tran_sign * ABS (cur_policy_own_ret_rec.comp_eq_prem);
                v_non_eq_prem :=
                      v_tran_sign
                    * ABS (
                            cur_policy_own_ret_rec.comp_non_eq_prem
                          - NVL (v_pool_prem, 0));
            END LOOP;

            v_eq_prem := cur_all_risks_rec.prrd_earthquake_prem;
            v_non_eq_prem :=
                  cur_all_risks_rec.prrd_ri_prem
                - cur_all_risks_rec.prrd_earthquake_prem;
            --                  - NVL (v_pool_prem, 0);

            v_tran_sign := SIGN (cur_all_risks_rec.prrd_ri_prem);
            v_eq_prem := v_tran_sign * ABS (v_eq_prem);
            v_non_eq_prem := v_tran_sign * ABS (v_non_eq_prem);

            v_facre_com := 0;
            v_facre_ref_com := 0;
            v_facre_prem := 0;
            v_facre_ref_prem := 0;
            v_facre_com_rate := 0;
            v_facre_ref_com_rate := 0;
            v_facre_ref_prem_rate := 0;

            FOR cur_facre_rec IN cur_facre    -- (cur_all_risks_rec.prrd_code)
            LOOP
                v_facre_com_rate := cur_facre_rec.facre_com_rate;
                v_facre_ref_com_rate := cur_facre_rec.facre_ref_com_rate;
                v_facre_com := cur_facre_rec.facre_com;
                v_facre_ref_com := cur_facre_rec.facre_ref_com;
                v_facre_prem := cur_facre_rec.facre_prem;
                v_facre_ref_prem := cur_facre_rec.facre_ref_prem;
                v_facre_prem_rate := cur_facre_rec.facre_rate;
                v_facre_ref_prem_rate := cur_facre_rec.facre_ref_prem_rate;

                v_facre_eq_prem := NVL (cur_facre_rec.facre_eq_prem, 0);
                v_facre_noneq_prem := NVL (cur_facre_rec.facre_noneq_prem, 0);
                v_facre_eq_com := NVL (cur_facre_rec.facre_eq_comm, 0);
                v_facre_noneq_com := NVL (v_facre_noneq_com, 0);
            END LOOP;                                          --cur_facre_rec

            FOR cur_rsk_rein_rec
                IN cur_rein (cur_all_risks_rec.ipu_code,
                             cur_all_risks_rec.prrd_code)
            LOOP
                BEGIN
                    v_seq := NULL;

                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_pr_code_seq.NEXTVAL)
                      INTO v_seq
                      FROM DUAL;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. ERR AT 5...');
                END;

                v_mand_eq_prem := cur_rsk_rein_rec.mand_eq_prem;
                v_mand_noneq_prem := cur_rsk_rein_rec.mand_noneq_prem;
                v_mand_eq_com := cur_rsk_rein_rec.mand_eq_com;
                v_mand_noneq_com := cur_rsk_rein_rec.mand_noneq_com;

                v_fstsup_eq_prem := cur_rsk_rein_rec.fstsup_eq_prem;
                v_fstsup_noneq_prem := cur_rsk_rein_rec.fstsup_noneq_prem;
                v_fstsup_eq_com := cur_rsk_rein_rec.fstsup_eq_com;
                v_fstsup_noneq_com := cur_rsk_rein_rec.fstsup_noneq_com;

                v_secsup_eq_prem := cur_rsk_rein_rec.secsup_eq_prem;
                v_secsup_noneq_prem := cur_rsk_rein_rec.secsup_noneq_prem;
                v_secsup_eq_com := cur_rsk_rein_rec.secsup_eq_com;
                v_secsup_noneq_com := cur_rsk_rein_rec.secsup_noneq_com;

                v_qs_eq_prem := cur_rsk_rein_rec.qs_eq_prem;
                v_qs_noneq_prem := cur_rsk_rein_rec.qs_noneq_prem;
                v_qs_eq_com := cur_rsk_rein_rec.qs_eq_com;
                v_qs_noneq_com := cur_rsk_rein_rec.qs_noneq_com;

                --post refund to register ---refunds
                BEGIN
                    INSERT INTO gin_policy_register (pr_code,
                                                     pr_transaction_date,
                                                     pr_pol_policy_no,
                                                     pr_pol_ren_endos_no,
                                                     pr_pol_batch_no,
                                                     pr_agnt_agent_code,
                                                     pr_agnt_sht_desc,
                                                     pr_wef_dt,
                                                     pr_wet_dt,
                                                     pr_cur_code,
                                                     pr_brn_code,
                                                     pr_cur_symbol,
                                                     pr_brn_sht_desc,
                                                     pr_inception_uwyr,
                                                     pr_pro_code,
                                                     pr_prev_batch_no,
                                                     pr_prem_type,
                                                     pr_mand_prem,
                                                     pr_mand_com,
                                                     pr_quota_prem,
                                                     pr_quota_com,
                                                     pr_fstsup_prem,
                                                     pr_fstsup_com,
                                                     pr_secsup_prem,
                                                     pr_secsup_com,
                                                     pr_comp_net_prem,
                                                     pr_si_diff,
                                                     pr_endos_diff_amt,
                                                     pr_comm_amt,
                                                     pr_comm_endos_diff_amt,
                                                     pr_uw_year,
                                                     pr_tran_type,
                                                     pr_client_policy_number,
                                                     pr_prp_code,
                                                     pr_current_status,
                                                     pr_uwyr_length,
                                                     pr_policy_cover_to,
                                                     pr_policy_cover_from,
                                                     pr_ggt_trans_no,
                                                     pr_facre_prem,
                                                     pr_facre_com,
                                                     pr_comp_net_com,
                                                     --                                                     pr_coin_fee_amt,
                                                     --                                                     pr_mand_eq_prem,
                                                     --                                                     pr_mand_noneq_prem,
                                                     --                                                     pr_fstsup_eq_prem,
                                                     --                                                     pr_fstsup_noneq_prem,
                                                     --                                                     pr_secsup_eq_prem,
                                                     --                                                     pr_secsup_noneq_prem,
                                                     --                                                     pr_quota_eq_prem,
                                                     --                                                     pr_quota_noneq_prem,
                                                     --                                                     pr_facre_eq_prem,
                                                     --                                                     pr_facre_noneq_prem,
                                                     pr_earthquake_prem,
                                                     pr_ri_net_less_eq_prem,
                                                     pr_mand_eq_com,
                                                     pr_mand_noneq_com,
                                                     pr_quota_eq_com,
                                                     pr_quota_noneq_com,
                                                     pr_fstsup_eq_com,
                                                     pr_fstsup_noneq_com,
                                                     pr_secsup_eq_com,
                                                     pr_secsup_noneq_com,
                                                     pr_facre_eq_com,
                                                     pr_facre_noneq_com)
                             VALUES (
                                 v_seq,
                                 TRUNC (v_tran_dt),
                                 cur_all_risks_rec.pol_policy_no,
                                 cur_all_risks_rec.pol_ren_endos_no,
                                 cur_all_risks_rec.pol_batch_no,
                                 cur_all_risks_rec.pol_agnt_agent_code,
                                 cur_all_risks_rec.pol_agnt_sht_desc,
                                 cur_all_risks_rec.pol_wef_dt,
                                 cur_all_risks_rec.pol_wet_dt,
                                 cur_all_risks_rec.pol_cur_code,
                                 cur_all_risks_rec.pol_brn_code,
                                 cur_all_risks_rec.pol_cur_symbol,
                                 cur_all_risks_rec.pol_brn_sht_desc,
                                 cur_all_risks_rec.pol_inception_uwyr,
                                 cur_all_risks_rec.pol_pro_code,
                                 cur_all_risks_rec.pol_prev_batch_no,
                                 v_prem_type,
                                 -NVL (cur_rsk_rein_rec.mand_ref_prem, 0),
                                 -NVL (cur_rsk_rein_rec.mand_ref_com, 0),
                                 -NVL (cur_rsk_rein_rec.qs_ref_prem, 0),
                                 -NVL (cur_rsk_rein_rec.qs_ref_com, 0),
                                 -NVL (cur_rsk_rein_rec.fstsup_ref_prem, 0),
                                 -NVL (cur_rsk_rein_rec.fstsup_ref_com, 0),
                                 -NVL (cur_rsk_rein_rec.secsup_ref_prem, 0),
                                 -NVL (cur_rsk_rein_rec.secsup_ref_com, 0),
                                 -NVL (
                                      cur_all_risks_rec.prrd_refund_net_prem,
                                      0),
                                 0,
                                 -NVL (cur_all_risks_rec.prrd_ri_prem, 0),
                                 0,
                                 0,
                                 cur_all_risks_rec.pol_uw_year,
                                 'RIR',
                                 cur_all_risks_rec.pol_client_policy_number,
                                 cur_all_risks_rec.pol_prp_code,
                                 cur_all_risks_rec.pol_current_status,
                                 cur_all_risks_rec.pol_uwyr_length,
                                 cur_all_risks_rec.pol_policy_cover_to,
                                 cur_all_risks_rec.pol_policy_cover_from,
                                 v_tran_no,
                                 -v_facre_ref_prem,
                                 -v_facre_ref_com,
                                 v_com_ret,
                                 --                                 cur_pol_rec.pol_coin_fee_amt,
                                 --                                 v_mand_eq_prem,
                                 --                                 v_mand_noneq_prem,
                                 --                                 v_fstsup_eq_prem,
                                 --                                 v_fstsup_noneq_prem,
                                 --                                 v_secsup_eq_prem,
                                 --                                 v_secsup_noneq_prem,
                                 --                                 v_qs_eq_prem,
                                 --                                 v_qs_noneq_prem,
                                 --                                 v_facre_eq_prem,
                                 --                                 v_facre_noneq_prem,
                                 v_eq_prem,
                                 v_non_eq_prem,
                                 v_mand_eq_com,
                                 v_mand_noneq_com,
                                 v_qs_eq_com,
                                 v_qs_noneq_com,
                                 v_fstsup_eq_com,
                                 v_fstsup_noneq_com,
                                 v_secsup_eq_com,
                                 v_secsup_noneq_com,
                                 v_facre_eq_com,
                                 v_facre_noneq_com);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO POST REINSURANCE REFUNDS INTO POLICY REGISTER...AT 6..');
                END;

                BEGIN
                    v_seq_rsk := NULL;

                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                           || gin_rskrg_code_seq.NEXTVAL
                      INTO v_seq_rsk
                      FROM DUAL;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR : UNABLE TO GENERATE SEQUENCE GIN_RSKRG_CODE_SEQ..AT 7.');
                END;

                BEGIN
                    v_seq_rsk := NULL;

                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                           || gin_rskrg_code_seq.NEXTVAL
                      INTO v_seq_rsk
                      FROM DUAL;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR : UNABLE TO GENERATE SEQUENCE GIN_RSKRG_CODE_SEQ..AT 7.');
                END;

                BEGIN
                    INSERT INTO gin_policy_risk_reg (
                                    rskrg_code,
                                    rskrg_pol_policy_no,
                                    rskrg_pol_ren_endos_no,
                                    rskrg_pol_batch_no,
                                    rskrg_wef_dt,
                                    rskrg_wet_dt,
                                    rskrg_risk_cover_to,
                                    rskrg_risk_cover_from,
                                    rskrg_ipu_code,
                                    rskrg_scl_code,
                                    rskrg_ipu_id,
                                    rskrg_pr_code,
                                    rskrg_ggt_trans_no,
                                    rskrg_mand_rate,
                                    rskrg_mand_prem,
                                    rskrg_mand_com,
                                    rskrg_quota_rate,
                                    rskrg_quota_com,
                                    rskrg_fstsup_rate,
                                    rskrg_fstsup_com,
                                    rskrg_secsup_rate,
                                    rskrg_secsup_com,
                                    rskrg_fstsup_prem,
                                    rskrg_secsup_prem,
                                    rskrg_tran_date,
                                    rskrg_quota_prem,
                                    rskrg_uw_yr,
                                    rskrg_comm_endos_diff_amt,
                                    rskrg_cur_code,
                                    rskrg_cur_symbol,
                                    rskrg_quz_code,
                                    rskrg_quz_sht_desc,
                                    rskrg_exchange_rate,
                                    rskrg_prem_tax,
                                    rskrg_ipu_property_id,
                                    rskrg_tran_type,
                                    rskrg_coin_own_pct,
                                    rskrg_com_ret_rate,
                                    rskrg_facre_rate,
                                    rskrg_endos_diff_amt,
                                    rskrg_si_diff,
                                    rskrg_facre_prem,
                                    rskrg_facre_com,
                                    rskrg_brn_code,
                                    rskrg_brn_sht_desc,
                                    rskrg_policy_type,
                                    rskrg_agnt_sht_desc,
                                    rskrg_agnt_agent_code,
                                    rskrg_prp_code,
                                    rskrg_covt_code,
                                    rskrg_comp_net_ret,
                                    rskrg_vipcertchg,
                                    rskrg_earthquake_prem,
                                    rskrg_ri_net_less_eq_prem)
                             VALUES (
                                 v_seq_rsk,
                                 cur_all_risks_rec.pol_policy_no,
                                 cur_all_risks_rec.pol_ren_endos_no,
                                 cur_all_risks_rec.pol_batch_no,
                                 cur_all_risks_rec.ipu_wef,
                                 cur_all_risks_rec.ipu_wef,
                                 cur_all_risks_rec.ipu_eff_wet,
                                 cur_all_risks_rec.ipu_eff_wef,
                                 cur_all_risks_rec.ipu_code,
                                 cur_all_risks_rec.ipu_sec_scl_code,
                                 cur_all_risks_rec.ipu_id,
                                 v_seq,
                                 v_tran_no,
                                 NVL (cur_rsk_rein_rec.mand_ref_pct, 0),
                                 -NVL (cur_rsk_rein_rec.mand_ref_prem, 0),
                                 -NVL (cur_rsk_rein_rec.mand_ref_com, 0),
                                 NVL (cur_rsk_rein_rec.qs_ref_pct, 0),
                                 -NVL (cur_rsk_rein_rec.qs_ref_com, 0),
                                 NVL (cur_rsk_rein_rec.fstsup_ref_pct, 0),
                                 -NVL (cur_rsk_rein_rec.fstsup_ref_com, 0),
                                 NVL (cur_rsk_rein_rec.secsup_ref_pct, 0),
                                 -NVL (cur_rsk_rein_rec.secsup_ref_com, 0),
                                 -NVL (cur_rsk_rein_rec.fstsup_ref_prem, 0),
                                 -NVL (cur_rsk_rein_rec.secsup_ref_prem, 0),
                                 cur_all_risks_rec.pol_wef_dt,
                                 -NVL (cur_rsk_rein_rec.qs_prem, 0),
                                 cur_all_risks_rec.pol_uw_year,
                                 0,
                                 cur_all_risks_rec.pol_cur_code,
                                 cur_all_risks_rec.pol_cur_symbol,
                                 cur_all_risks_rec.ipu_quz_code,
                                 cur_all_risks_rec.ipu_quz_sht_desc,
                                 cur_all_risks_rec.pol_cur_rate,
                                 NVL (cur_all_risks_rec.ipu_prem_tax, 0),
                                 cur_all_risks_rec.ipu_property_id,
                                 'RIR',
                                 NVL (
                                     cur_all_risks_rec.pol_coinsurance_share,
                                     100),
                                 NVL (v_comp_rate, 0),
                                 NVL (v_facre_ref_prem_rate, 0),
                                 -NVL (cur_all_risks_rec.prrd_ri_prem, 0),
                                 -NVL (cur_all_risks_rec.ipu_si_diff, 0),
                                 -v_facre_ref_prem,
                                 -v_facre_ref_com,
                                 cur_all_risks_rec.pol_brn_code,
                                 cur_all_risks_rec.pol_brn_sht_desc,
                                 cur_all_risks_rec.pol_policy_type,
                                 cur_all_risks_rec.pol_agnt_sht_desc,
                                 cur_all_risks_rec.pol_agnt_agent_code,
                                 cur_all_risks_rec.pol_prp_code,
                                 cur_all_risks_rec.ipu_covt_code,
                                 -NVL (
                                      cur_all_risks_rec.prrd_refund_net_prem,
                                      0),
                                 NVL (cur_all_risks_rec.ipu_vipcertchg, 0),
                                 --                              -NVL (cur_all_risks_rec.ipu_earthqke_prem_diff,
                                 --                                    0),
                                 v_eq_prem,
                                 v_non_eq_prem);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO INSERT RI REFUND INTO THE RISK REGISTER..AT 8.');
                END;

                ---
                BEGIN
                    v_seq := NULL;

                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_pr_code_seq.NEXTVAL)
                      INTO v_seq
                      FROM DUAL;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. ERR AT 5...');
                END;

                BEGIN
                    INSERT INTO gin_policy_register (pr_code,
                                                     pr_transaction_date,
                                                     pr_pol_policy_no,
                                                     pr_pol_ren_endos_no,
                                                     pr_pol_batch_no,
                                                     pr_agnt_agent_code,
                                                     pr_agnt_sht_desc,
                                                     pr_wef_dt,
                                                     pr_wet_dt,
                                                     pr_cur_code,
                                                     pr_brn_code,
                                                     pr_cur_symbol,
                                                     pr_brn_sht_desc,
                                                     pr_inception_uwyr,
                                                     pr_pro_code,
                                                     pr_prev_batch_no,
                                                     pr_prem_type,
                                                     pr_mand_prem,
                                                     pr_mand_com,
                                                     pr_quota_prem,
                                                     pr_quota_com,
                                                     pr_fstsup_prem,
                                                     pr_fstsup_com,
                                                     pr_secsup_prem,
                                                     pr_secsup_com,
                                                     pr_comp_net_prem,
                                                     pr_si_diff,
                                                     pr_endos_diff_amt,
                                                     pr_comm_amt,
                                                     pr_comm_endos_diff_amt,
                                                     pr_uw_year,
                                                     pr_tran_type,
                                                     pr_client_policy_number,
                                                     pr_prp_code,
                                                     pr_current_status,
                                                     pr_uwyr_length,
                                                     pr_policy_cover_to,
                                                     pr_policy_cover_from,
                                                     pr_ggt_trans_no,
                                                     pr_facre_prem,
                                                     pr_facre_com)
                         VALUES (v_seq,
                                 TRUNC (v_tran_dt),
                                 cur_all_risks_rec.pol_policy_no,
                                 cur_all_risks_rec.pol_ren_endos_no,
                                 cur_all_risks_rec.pol_batch_no,
                                 cur_all_risks_rec.pol_agnt_agent_code,
                                 cur_all_risks_rec.pol_agnt_sht_desc,
                                 cur_all_risks_rec.pol_wef_dt,
                                 cur_all_risks_rec.pol_wet_dt,
                                 cur_all_risks_rec.pol_cur_code,
                                 cur_all_risks_rec.pol_brn_code,
                                 cur_all_risks_rec.pol_cur_symbol,
                                 cur_all_risks_rec.pol_brn_sht_desc,
                                 cur_all_risks_rec.pol_inception_uwyr,
                                 cur_all_risks_rec.pol_pro_code,
                                 cur_all_risks_rec.pol_prev_batch_no,
                                 v_prem_type,
                                 NVL (cur_rsk_rein_rec.mand_prem, 0),
                                 NVL (cur_rsk_rein_rec.mand_com, 0),
                                 NVL (cur_rsk_rein_rec.qs_prem, 0),
                                 NVL (cur_rsk_rein_rec.qs_com, 0),
                                 NVL (cur_rsk_rein_rec.fstsup_prem, 0),
                                 NVL (cur_rsk_rein_rec.fstsup_com, 0),
                                 NVL (cur_rsk_rein_rec.secsup_prem, 0),
                                 NVL (cur_rsk_rein_rec.secsup_com, 0),
                                 NVL (cur_all_risks_rec.prrd_net_prem, 0),
                                 0,
                                 --NVL(cur_all_risks_rec.POL_SI_DIFF,0),
                                 NVL (cur_all_risks_rec.prrd_ri_prem, 0),
                                 --NVL(cur_all_risks_rec.POL_TOT_ENDOS_DIFF_AMT,0),
                                 0,
                                 --NVL(cur_all_risks_rec.POL_COMM_AMT,0),
                                 0,
                                 --NVL(cur_all_risks_rec.POL_COMM_ENDOS_DIFF_AMT,0),
                                 cur_all_risks_rec.pol_uw_year,
                                 'RIC',
                                 cur_all_risks_rec.pol_client_policy_number,
                                 cur_all_risks_rec.pol_prp_code,
                                 cur_all_risks_rec.pol_current_status,
                                 cur_all_risks_rec.pol_uwyr_length,
                                 cur_all_risks_rec.pol_policy_cover_to,
                                 cur_all_risks_rec.pol_policy_cover_from,
                                 v_tran_no,
                                 v_facre_prem,
                                 v_facre_com);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO POST REINSURANCE REFUNDS INTO POLICY REGISTER...AT 6..');
                END;

                ------------------------post risk new cessions-------------register
                BEGIN
                    v_seq_rsk := NULL;

                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                           || gin_rskrg_code_seq.NEXTVAL
                      INTO v_seq_rsk
                      FROM DUAL;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR : UNABLE TO GENERATE SEQUENCE GIN_RSKRG_CODE_SEQ..AT 7.');
                END;

                BEGIN
                    --DBMS_OUTPUT.PUT_LINE('inserting risk reg new cecssion');
                    INSERT INTO gin_policy_risk_reg (
                                    rskrg_code,
                                    rskrg_pol_policy_no,
                                    rskrg_pol_ren_endos_no,
                                    rskrg_pol_batch_no,
                                    rskrg_wef_dt,
                                    rskrg_wet_dt,
                                    rskrg_risk_cover_to,
                                    rskrg_risk_cover_from,
                                    rskrg_ipu_code,
                                    rskrg_scl_code,
                                    rskrg_ipu_id,
                                    rskrg_pr_code,
                                    rskrg_ggt_trans_no,
                                    rskrg_mand_rate,
                                    rskrg_mand_prem,
                                    rskrg_mand_com,
                                    rskrg_quota_rate,
                                    rskrg_quota_com,
                                    rskrg_fstsup_rate,
                                    rskrg_fstsup_com,
                                    rskrg_secsup_rate,
                                    rskrg_secsup_com,
                                    rskrg_fstsup_prem,
                                    rskrg_secsup_prem,
                                    rskrg_tran_date,
                                    rskrg_quota_prem,
                                    rskrg_uw_yr,
                                    rskrg_comm_endos_diff_amt,
                                    rskrg_cur_code,
                                    rskrg_cur_symbol,
                                    rskrg_quz_code,
                                    rskrg_quz_sht_desc,
                                    rskrg_exchange_rate,
                                    rskrg_prem_tax,
                                    rskrg_ipu_property_id,
                                    rskrg_tran_type,
                                    rskrg_coin_own_pct,
                                    rskrg_com_ret_rate,
                                    rskrg_facre_rate,
                                    rskrg_endos_diff_amt,
                                    rskrg_si_diff,
                                    rskrg_facre_prem,
                                    rskrg_facre_com,
                                    rskrg_brn_code,
                                    rskrg_brn_sht_desc,
                                    rskrg_policy_type,
                                    rskrg_agnt_sht_desc,
                                    rskrg_agnt_agent_code,
                                    rskrg_prp_code,
                                    rskrg_covt_code,
                                    rskrg_comp_net_ret,
                                    rskrg_vipcertchg,
                                    rskrg_earthquake_prem,
                                    rskrg_ri_net_less_eq_prem)
                             VALUES (
                                 v_seq_rsk,
                                 cur_all_risks_rec.pol_policy_no,
                                 cur_all_risks_rec.pol_ren_endos_no,
                                 cur_all_risks_rec.pol_batch_no,
                                 cur_all_risks_rec.ipu_wef,
                                 cur_all_risks_rec.ipu_wef,
                                 cur_all_risks_rec.ipu_eff_wet,
                                 cur_all_risks_rec.ipu_eff_wef,
                                 cur_all_risks_rec.ipu_code,
                                 cur_all_risks_rec.ipu_sec_scl_code,
                                 cur_all_risks_rec.ipu_id,
                                 v_seq,
                                 v_tran_no,
                                 NVL (cur_rsk_rein_rec.mand_pct, 0),
                                 -NVL (cur_rsk_rein_rec.mand_prem, 0),
                                 NVL (cur_rsk_rein_rec.mand_com, 0),
                                 NVL (cur_rsk_rein_rec.qs_pct, 0),
                                 NVL (cur_rsk_rein_rec.qs_com, 0),
                                 NVL (cur_rsk_rein_rec.fstsup_pct, 0),
                                 NVL (cur_rsk_rein_rec.fstsup_com, 0),
                                 NVL (cur_rsk_rein_rec.secsup_pct, 0),
                                 NVL (cur_rsk_rein_rec.secsup_com, 0),
                                 NVL (cur_rsk_rein_rec.fstsup_prem, 0),
                                 NVL (cur_rsk_rein_rec.secsup_prem, 0),
                                 cur_all_risks_rec.pol_wef_dt,
                                 NVL (cur_rsk_rein_rec.qs_prem, 0),
                                 cur_all_risks_rec.pol_uw_year,
                                 0,
                                 cur_all_risks_rec.pol_cur_code,
                                 cur_all_risks_rec.pol_cur_symbol,
                                 cur_all_risks_rec.ipu_quz_code,
                                 cur_all_risks_rec.ipu_quz_sht_desc,
                                 cur_all_risks_rec.pol_cur_rate,
                                 NVL (cur_all_risks_rec.ipu_prem_tax, 0),
                                 cur_all_risks_rec.ipu_property_id,
                                 'RIC',
                                 NVL (
                                     cur_all_risks_rec.pol_coinsurance_share,
                                     100),
                                 NVL (v_comp_rate, 0),
                                 NVL (v_facre_prem_rate, 0),
                                 NVL (cur_all_risks_rec.prrd_ri_prem, 0),
                                 NVL (cur_all_risks_rec.ipu_si_diff, 0),
                                 v_facre_prem,
                                 v_facre_com,
                                 cur_all_risks_rec.pol_brn_code,
                                 cur_all_risks_rec.pol_brn_sht_desc,
                                 cur_all_risks_rec.pol_policy_type,
                                 cur_all_risks_rec.pol_agnt_sht_desc,
                                 cur_all_risks_rec.pol_agnt_agent_code,
                                 cur_all_risks_rec.pol_prp_code,
                                 cur_all_risks_rec.ipu_covt_code,
                                 NVL (cur_all_risks_rec.prrd_net_prem, 0),
                                 NVL (cur_all_risks_rec.ipu_vipcertchg, 0),
                                 --                              NVL (cur_all_risks_rec.ipu_earthqke_prem_diff,
                                 --                                   0),
                                 v_eq_prem,
                                 v_non_eq_prem);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO INSERT RI REFUND INTO THE RISK REGISTER..AT 8.');
                END;
            END LOOP;                                       --cur_rsk_rein_rec
        END LOOP;                                              --cur_all_risks

        gin_uw_author_proc.check_pol_ri_risk_values (v_pol_batch_no);
    END;

    PROCEDURE update_brk_coin_reg (v_pol_batch_no      IN NUMBER,
                                   v_trans_no          IN NUMBER,
                                   v_rnd_param         IN NUMBER,
                                   v_orig_trans_date   IN DATE)
    IS
        v_duties              NUMBER := 0;
        v_tran_type           VARCHAR2 (5);
        v_tran_sign           NUMBER := 0;
        v_tran_code           VARCHAR2 (5);
        al_id                 NUMBER;
        v_drcr                VARCHAR2 (25);
        v_prem_type           VARCHAR2 (2);
        v_sd                  NUMBER := 0;
        v_tl                  NUMBER := 0;
        v_phfund              NUMBER := 0;
        v_wtht                NUMBER := 0;
        v_eq_prem             NUMBER := 0;
        v_non_eq_prem         NUMBER := 0;
        v_seq                 NUMBER;
        v_com_ret             NUMBER := 0;
        v_rsk_net_prem        NUMBER := 0;
        v_seq_rsk             NUMBER;
        v_cnt                 NUMBER := 0;
        v_errmsg              VARCHAR2 (200);
        v_pol_stat            VARCHAR2 (20);
        v_net_rate            NUMBER := 0;
        v_open_cover          VARCHAR2 (1) := 'N';
        v_uw_yr               NUMBER;
        v_rsk_tot_net_prem    NUMBER;
        v_pol_net_prem        NUMBER;
        v_pol_prem            NUMBER;
        v_rsk_prem            NUMBER;
        v_mand_rate           NUMBER := 0;
        v_mand_prem           NUMBER := 0;
        v_mand_com            NUMBER := 0;
        v_mand_eq_prem        NUMBER := 0;
        v_mand_noneq_prem     NUMBER := 0;
        v_mand_eq_com         NUMBER := 0;
        v_mand_noneq_com      NUMBER := 0;
        v_qs_rate             NUMBER := 0;
        v_qs_com              NUMBER := 0;
        v_qs_prem             NUMBER := 0;
        v_qs_eq_prem          NUMBER := 0;
        v_qs_noneq_prem       NUMBER := 0;
        v_qs_eq_com           NUMBER := 0;
        v_qs_noneq_com        NUMBER := 0;
        v_fstsup_rate         NUMBER := 0;
        v_fstsup_com          NUMBER := 0;
        v_fstsup_prem         NUMBER := 0;
        v_fstsup_eq_prem      NUMBER := 0;
        v_fstsup_noneq_prem   NUMBER := 0;
        v_fstsup_eq_com       NUMBER := 0;
        v_fstsup_noneq_com    NUMBER := 0;
        v_secsup_prem         NUMBER := 0;
        v_secsup_rate         NUMBER := 0;
        v_secsup_com          NUMBER := 0;
        v_secsup_eq_prem      NUMBER := 0;
        v_secsup_noneq_prem   NUMBER := 0;
        v_secsup_eq_com       NUMBER := 0;
        v_secsup_noneq_com    NUMBER := 0;
        v_facre_rate          NUMBER := 0;
        v_facre_com           NUMBER := 0;
        v_facre_prem          NUMBER := 0;
        v_facre_eq_prem       NUMBER := 0;
        v_facre_noneq_prem    NUMBER := 0;
        v_facre_eq_com        NUMBER := 0;
        v_facre_noneq_com     NUMBER := 0;
        v_coin_pct            NUMBER := 0;
        v_factor              NUMBER := 0;
        v_tot_si              NUMBER := 0;
        v_coin_si_diff        NUMBER := 0;
        v_coin_prem           NUMBER := 0;
        v_coin_net_prem       NUMBER := 0;
        v_coin_comm           NUMBER := 0;
        v_coin_tot_comm       NUMBER := 0;
        v_coin_whtx           NUMBER := 0;
        v_coin_tl             NUMBER := 0;
        v_coin_phfund         NUMBER := 0;
        v_coin_duties         NUMBER := 0;
        v_coin_premtax        NUMBER := 0;
        v_coin_tot_gp         NUMBER := 0;
        v_coin_rsk_si_diff    NUMBER := 0;
        v_coin_rsk_prem       NUMBER := 0;
        v_coin_rsk_net_prem   NUMBER := 0;
        v_coin_rsk_fap        NUMBER := 0;
        v_coin_rsk_gp         NUMBER := 0;
        v_coin_rsk_value      NUMBER := 0;
        v_coin_rks_tl         NUMBER := 0;
        v_coin_rsk_premtax    NUMBER := 0;

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;

        CURSOR cur_coins IS
            SELECT *
              FROM gin_coinsurers
             WHERE coin_pol_batch_no = v_pol_batch_no;

        CURSOR cur_all_risks IS
            SELECT *
              FROM gin_insured_property_unds
             WHERE ipu_pol_batch_no = v_pol_batch_no;
    BEGIN
        FOR cur_pol_rec IN cur_pol
        LOOP
            v_tran_sign := SIGN (cur_pol_rec.pol_tot_endos_diff_amt);
            v_drcr := cur_pol_rec.pol_drcr_no;

            IF cur_pol_rec.pol_drcr_no IS NULL
            THEN
                raise_error (
                    'UNABLE TO RETRIEVE POLICY DEBIT OR CREDIT NOTE CREDIT NOTE NUMBER..');
            END IF;

            BEGIN
                SELECT SUM (
                           DECODE (UPPER (trnt_code),
                                   'TL', NVL (ptx_amount, 0),
                                   0))                      tl,
                       SUM (
                           DECODE (UPPER (trnt_code),
                                   'PHFUND', NVL (ptx_amount, 0),
                                   0))                      phfund,
                       SUM (
                           DECODE (UPPER (trnt_code),
                                   'TL', 0,
                                   'SD', 0,
                                   'PHFUND', 0,
                                   'MPSD', 0,
                                   NVL (ptx_amount, 0)))    other_duties
                  INTO v_tl, v_phfund, v_duties
                  FROM gin_policy_taxes, gin_transaction_types
                 WHERE     ptx_trac_trnt_code = trnt_code
                       AND ptx_pol_batch_no = v_pol_batch_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                    v_duties := 0;
                WHEN OTHERS
                THEN
                    raise_error ('ERROR, UNABLE TO RETRIEVE POLICY TAXES..');
            END;

            v_sd := 0;
            v_duties := NVL (v_duties, 0) + NVL (v_phfund, 0);

            BEGIN
                SELECT ggt_btr_trans_code
                  INTO v_tran_code
                  FROM gin_gis_transactions
                 WHERE ggt_trans_no = v_trans_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                    raise_error (
                        'ERROR :- UNABLE TO GET THE TRANSACTION TYPE CODE WHILE UPDATING THE REGISTER...');
                WHEN TOO_MANY_ROWS
                THEN
                    raise_error (
                        'ERROR :- UNABLE TO GET THE TRANSACTION TYPE CODE WHILE UPDATING THE REGISTER.QUERY RETURNED TOO MANY ROWS...');
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR, UNABLE TO RETRIEVE TRANSACTION CODE..');
            END;

            IF cur_pol_rec.pol_policy_status != 'CO'
            THEN
                v_pol_stat := cur_pol_rec.pol_policy_status;
            ELSE
                BEGIN
                    SELECT pol_policy_status
                      INTO v_pol_stat
                      FROM gin_policies
                     WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'UNABLE TO RETRIEVE THE PREVIOUS TRANSACTION STATUS');
                END;
            END IF;

            --DBMS_OUTPUT.PUT_LINE('here 5');
            BEGIN
                SELECT DECODE (v_tran_sign,
                               1, btr_debit_code,
                               btr_credit_code)
                  INTO v_tran_type
                  FROM gin_business_transactions
                 WHERE btr_trans_code = v_pol_stat;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                           'THE TRANSACTIONS CODES HAVE NOT BEEN DEFINED FOR THE '
                        || cur_pol_rec.pol_policy_status
                        || ' TRANSACTION ..');
                WHEN OTHERS
                THEN
                    raise_error (
                           'UNABLE TO RETRIEVE THE TRANSACTIONS CODES FOR THE '
                        || v_pol_stat
                        || ' TRANSACTION ..');
            END;

            --DBMS_OUTPUT.PUT_LINE('here 6');
            IF v_pol_stat IN ('NB', 'SP')
            THEN
                v_prem_type := 'NB';
            ELSIF v_pol_stat IN ('EN',
                                 'EX',
                                 'DC',
                                 'CN',
                                 'RE')
            THEN
                IF SIGN (cur_pol_rec.pol_tot_endos_diff_amt) = 1
                THEN
                    v_prem_type := 'AP';
                ELSE
                    v_prem_type := 'RP';
                END IF;
            ELSIF v_pol_stat IN ('RN')
            THEN
                v_prem_type := 'RN';
            ELSE
                raise_error (
                       'PREM TYPE CODE FOR TRANSACTION TYPE '
                    || v_pol_stat
                    || ' NOT TAKEN CARE OF..');
            END IF;

            v_com_ret := 0;
            v_rsk_net_prem := 0;

            IF     NVL (v_open_cover, 'N') = 'N'
               AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'N'
            THEN
                v_uw_yr := cur_pol_rec.pol_uw_year;
            ELSE
                v_uw_yr := TO_CHAR (cur_pol_rec.pol_wef_dt, 'YYYY');
            END IF;

            BEGIN
                SELECT COUNT ('X')
                  INTO v_cnt
                  FROM gin_policy_summary
                 WHERE     ps_pol_policy_no = cur_pol_rec.pol_policy_no
                       AND ps_uw_year = v_uw_yr;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR DETERMINING IF POLICY SUMMARY RECORD ALREADY EXISTS..');
            END;

            FOR cur_coin_rec IN cur_coins
            LOOP
                BEGIN
                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_pr_code_seq.NEXTVAL)
                      INTO v_seq
                      FROM DUAL;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. PLEASE CONTACT TURNKE AFRICA FOR SUPPORT...');
                END;

                v_coin_pct := NVL (cur_coin_rec.coin_perct, 0);
                v_factor :=
                      NVL (cur_coin_rec.coin_perct, 0)
                    / NVL (cur_pol_rec.pol_coinsurance_share, 0);
                --RAISE_ERROR('v_coin_pct='||v_coin_pct||' v_factor='||v_factor);
                v_tot_si :=
                    ROUND (
                        NVL (cur_pol_rec.pol_total_sum_insured, 0) * v_factor);
                v_coin_si_diff :=
                    ROUND (NVL (cur_pol_rec.pol_si_diff, 0) * v_factor);
                v_coin_prem :=
                    ROUND (
                          NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0)
                        * v_factor);
                v_coin_net_prem :=
                    ROUND (NVL (cur_pol_rec.pol_nett_premium, 0) * v_factor);
                v_coin_comm :=
                    ROUND (
                          NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0)
                        * v_factor);
                v_coin_tot_comm :=
                    ROUND (NVL (cur_pol_rec.pol_comm_amt, 0) * v_factor);
                v_coin_whtx :=
                    ROUND (NVL (cur_pol_rec.pol_wtht, 0) * v_factor);
                v_coin_tl := ROUND (NVL (v_tl, 0) * v_factor);
                v_coin_phfund := ROUND (NVL (v_phfund, 0) * v_factor);
                v_coin_duties := ROUND (NVL (v_duties, 0) * v_factor);
                v_coin_premtax := 0;
                v_coin_tot_gp :=
                    ROUND (NVL (cur_pol_rec.pol_total_gp, 0) * v_factor);

                IF v_cnt IS NULL OR v_cnt = 0
                THEN
                    BEGIN
                        INSERT INTO gin_policy_summary (ps_code,
                                                        ps_pol_policy_no,
                                                        ps_uw_year,
                                                        ps_sum_insured,
                                                        ps_sum_insured_bcur,
                                                        ps_commission,
                                                        ps_commission_bcur,
                                                        ps_premium,
                                                        ps_premium_bcur,
                                                        ps_cur_code,
                                                        ps_brn_code,
                                                        ps_cur_symbol,
                                                        ps_brn_sht_desc,
                                                        ps_prp_code,
                                                        ps_inception_uwyr,
                                                        ps_pro_code,
                                                        ps_pro_sht_desc,
                                                        ps_uwyr_length,
                                                        ps_policy_cover_to,
                                                        ps_policy_cover_from,
                                                        ps_stamp_duty,
                                                        ps_stamp_duty_bcur,
                                                        ps_tl,
                                                        ps_tl_bcur,
                                                        ps_other_duties,
                                                        ps_other_duties_bcur,
                                                        ps_wtht,
                                                        ps_wtht_bcur,
                                                        ps_prem_tax,
                                                        ps_prem_tax_bcur,
                                                        ps_agnt_agent_code,
                                                        ps_agnt_sht_desc)
                                 VALUES (
                                     TO_NUMBER (
                                            TO_CHAR (SYSDATE, 'YY')
                                         || gin_ps_code_seq.NEXTVAL),
                                     cur_pol_rec.pol_policy_no,
                                     v_uw_yr,
                                     DECODE (cur_pol_rec.pol_policy_status,
                                             'DC', 0,
                                             v_coin_si_diff),
                                     DECODE (
                                         cur_pol_rec.pol_policy_status,
                                         'DC', 0,
                                           ROUND (v_coin_si_diff)
                                         * cur_pol_rec.pol_cur_rate),
                                     v_coin_comm,
                                     ROUND (
                                           v_coin_comm
                                         * cur_pol_rec.pol_cur_rate),
                                     v_coin_prem,
                                     ROUND (
                                           v_coin_prem
                                         * cur_pol_rec.pol_cur_rate),
                                     cur_pol_rec.pol_cur_code,
                                     cur_pol_rec.pol_brn_code,
                                     cur_pol_rec.pol_cur_symbol,
                                     cur_pol_rec.pol_brn_sht_desc,
                                     cur_pol_rec.pol_prp_code,
                                     cur_pol_rec.pol_inception_uwyr,
                                     cur_pol_rec.pol_pro_code,
                                     cur_pol_rec.pol_pro_sht_desc,
                                     cur_pol_rec.pol_uwyr_length,
                                     cur_pol_rec.pol_policy_cover_to,
                                     cur_pol_rec.pol_policy_cover_from,
                                     v_sd,
                                     ROUND (v_sd * cur_pol_rec.pol_cur_rate),
                                     v_tl,
                                     ROUND (
                                         v_coin_tl * cur_pol_rec.pol_cur_rate),
                                     v_duties,
                                     ROUND (
                                           v_coin_duties
                                         * cur_pol_rec.pol_cur_rate),
                                     v_coin_whtx,
                                     ROUND (
                                           v_coin_whtx
                                         * cur_pol_rec.pol_cur_rate),
                                     v_coin_premtax,
                                     ROUND (
                                           v_coin_premtax
                                         * cur_pol_rec.pol_cur_rate),
                                     cur_pol_rec.pol_agnt_agent_code,
                                     cur_pol_rec.pol_agnt_sht_desc);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO INSERT POLICY REGISTER...');
                    END;
                ELSE
                    BEGIN
                        UPDATE gin_policy_summary
                           SET ps_sum_insured =
                                     NVL (ps_sum_insured, 0)
                                   + DECODE (cur_pol_rec.pol_policy_status,
                                             'DC', 0,
                                             v_coin_si_diff),
                               ps_commission =
                                     NVL (ps_commission, 0)
                                   + NVL (v_coin_comm, 0),
                               ps_premium =
                                   NVL (ps_premium, 0) + NVL (v_coin_prem, 0),
                               ps_policy_cover_to =
                                   cur_pol_rec.pol_policy_cover_to,
                               ps_policy_cover_from =
                                   cur_pol_rec.pol_policy_cover_from,
                               ps_stamp_duty =
                                   NVL (ps_stamp_duty, 0) + NVL (v_sd, 0),
                               ps_tl = NVL (ps_tl, 0) + NVL (v_coin_tl, 0),
                               ps_other_duties =
                                     NVL (ps_other_duties, 0)
                                   + NVL (v_coin_duties, 0),
                               ps_wtht =
                                   NVL (ps_wtht, 0) + NVL (v_coin_whtx, 0),
                               ps_prem_tax =
                                     NVL (ps_prem_tax, 0)
                                   + NVL (v_coin_premtax, 0),
                               ps_uwyr_length = cur_pol_rec.pol_uwyr_length,
                               ps_sum_insured_bcur =
                                     NVL (ps_sum_insured_bcur, 0)
                                   + ROUND (
                                           DECODE (
                                               cur_pol_rec.pol_policy_status,
                                               'DC', 0,
                                               v_coin_si_diff)
                                         * cur_pol_rec.pol_cur_rate),
                               ps_commission_bcur =
                                     NVL (ps_commission_bcur, 0)
                                   + ROUND (
                                           NVL (v_coin_comm, 0)
                                         * cur_pol_rec.pol_cur_rate),
                               ps_premium_bcur =
                                     NVL (ps_premium_bcur, 0)
                                   + ROUND (
                                           NVL (v_coin_prem, 0)
                                         * cur_pol_rec.pol_cur_rate),
                               ps_stamp_duty_bcur =
                                     NVL (ps_stamp_duty_bcur, 0)
                                   + ROUND (
                                           NVL (v_sd, 0)
                                         * cur_pol_rec.pol_cur_rate),
                               ps_tl_bcur =
                                     NVL (ps_tl_bcur, 0)
                                   + ROUND (
                                           NVL (v_coin_tl, 0)
                                         * cur_pol_rec.pol_cur_rate),
                               ps_other_duties_bcur =
                                     NVL (ps_other_duties_bcur, 0)
                                   + ROUND (
                                           NVL (v_coin_duties, 0)
                                         * cur_pol_rec.pol_cur_rate),
                               ps_wtht_bcur =
                                     NVL (ps_wtht_bcur, 0)
                                   + ROUND (
                                           NVL (v_coin_whtx, 0)
                                         * cur_pol_rec.pol_cur_rate),
                               ps_prem_tax_bcur =
                                     NVL (ps_prem_tax_bcur, 0)
                                   + ROUND (
                                           NVL (v_coin_premtax, 0)
                                         * cur_pol_rec.pol_cur_rate)
                         WHERE     ps_pol_policy_no =
                                   cur_pol_rec.pol_policy_no
                               AND ps_uw_year = v_uw_yr;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO UPDATE POLICY REGISTER...');
                    END;
                END IF;

                BEGIN
                    INSERT INTO gin_policy_register (pr_code,
                                                     pr_pol_policy_no,
                                                     pr_pol_ren_endos_no,
                                                     pr_pol_batch_no,
                                                     pr_agnt_agent_code,
                                                     pr_agnt_sht_desc,
                                                     pr_wef_dt,
                                                     pr_wet_dt,
                                                     pr_uw_year,
                                                     pr_sum_insured,
                                                     pr_comm_amt,
                                                     pr_transaction_date,
                                                     pr_tran_type,
                                                     pr_nett_premium,
                                                     pr_cur_code,
                                                     pr_client_policy_number,
                                                     pr_brn_code,
                                                     pr_cur_rate,
                                                     pr_comm_endos_diff_amt,
                                                     pr_fap,
                                                     pr_gp,
                                                     pr_endos_diff_amt,
                                                     pr_cur_symbol,
                                                     pr_brn_sht_desc,
                                                     pr_prp_code,
                                                     pr_current_status,
                                                     pr_inception_uwyr,
                                                     pr_pro_code,
                                                     pr_pro_sht_desc,
                                                     pr_prev_batch_no,
                                                     pr_uwyr_length,
                                                     pr_coinsure_pct,
                                                     pr_policy_cover_to,
                                                     pr_policy_cover_from,
                                                     pr_ggt_trans_no,
                                                     pr_policy_status,
                                                     pr_drcr_no,
                                                     pr_prem_type,
                                                     pr_si_diff,
                                                     pr_policy_type,
                                                     pr_stamp_duty,
                                                     pr_tl,
                                                     pr_other_duties,
                                                     pr_wtht,
                                                     pr_prem_tax,
                                                     pr_mand_prem,
                                                     pr_mand_com,
                                                     pr_quota_prem,
                                                     pr_quota_com,
                                                     pr_fstsup_prem,
                                                     pr_fstsup_com,
                                                     pr_secsup_prem,
                                                     pr_secsup_com,
                                                     pr_facre_prem,
                                                     pr_facre_com,
                                                     pr_comp_net_prem,
                                                     pr_comp_net_com,
                                                     pr_coin_fee_amt,
                                                     pr_mand_eq_prem,
                                                     pr_mand_noneq_prem,
                                                     pr_fstsup_eq_prem,
                                                     pr_fstsup_noneq_prem,
                                                     pr_secsup_eq_prem,
                                                     pr_secsup_noneq_prem,
                                                     pr_quota_eq_prem,
                                                     pr_quota_noneq_prem,
                                                     pr_facre_eq_prem,
                                                     pr_facre_noneq_prem,
                                                     pr_earthquake_prem,
                                                     pr_ri_net_less_eq_prem,
                                                     pr_mand_eq_com,
                                                     pr_mand_noneq_com,
                                                     pr_quota_eq_com,
                                                     pr_quota_noneq_com,
                                                     pr_fstsup_eq_com,
                                                     pr_fstsup_noneq_com,
                                                     pr_secsup_eq_com,
                                                     pr_secsup_noneq_com,
                                                     pr_facre_eq_com,
                                                     pr_facre_noneq_com,
                                                     pr_coinsurance,
                                                     pr_phfund)
                             VALUES (
                                 v_seq,
                                 cur_pol_rec.pol_policy_no,
                                 cur_pol_rec.pol_ren_endos_no,
                                 cur_pol_rec.pol_batch_no,
                                 cur_coin_rec.coin_agnt_agent_code,
                                 cur_coin_rec.coin_agnt_sht_desc,
                                 cur_pol_rec.pol_wef_dt,
                                 cur_pol_rec.pol_wet_dt,
                                 cur_pol_rec.pol_uw_year,
                                 v_tot_si,
                                 v_coin_tot_comm,
                                 v_orig_trans_date,
                                 v_tran_type,
                                 v_coin_net_prem,
                                 cur_pol_rec.pol_cur_code,
                                 cur_pol_rec.pol_client_policy_number,
                                 cur_pol_rec.pol_brn_code,
                                 cur_pol_rec.pol_cur_rate,
                                 v_coin_comm,
                                 v_coin_tot_gp,
                                 v_coin_tot_gp,
                                 v_coin_prem,
                                 cur_pol_rec.pol_cur_symbol,
                                 cur_pol_rec.pol_brn_sht_desc,
                                 cur_pol_rec.pol_prp_code,
                                 cur_pol_rec.pol_current_status,
                                 cur_pol_rec.pol_inception_uwyr,
                                 cur_pol_rec.pol_pro_code,
                                 cur_pol_rec.pol_pro_sht_desc,
                                 cur_pol_rec.pol_prev_batch_no,
                                 cur_pol_rec.pol_uwyr_length,
                                 v_coin_pct,
                                 cur_pol_rec.pol_policy_cover_to,
                                 cur_pol_rec.pol_policy_cover_from,
                                 v_trans_no,
                                 cur_pol_rec.pol_policy_status,
                                 v_drcr,
                                 v_prem_type,
                                 DECODE (cur_pol_rec.pol_policy_status,
                                         'DC', 0,
                                         v_coin_si_diff),
                                 cur_pol_rec.pol_policy_type,
                                 v_sd,
                                 v_coin_tl,
                                 v_coin_duties,
                                 v_coin_whtx,
                                 v_coin_premtax,
                                 v_mand_prem,
                                 v_mand_com,
                                 v_qs_prem,
                                 v_qs_com,
                                 v_fstsup_prem,
                                 v_fstsup_com,
                                 v_secsup_prem,
                                 v_secsup_com,
                                 v_facre_prem,
                                 v_facre_com,
                                 v_pol_net_prem,
                                 v_com_ret,
                                 cur_pol_rec.pol_coin_fee_amt,
                                 v_mand_eq_prem,
                                 v_mand_noneq_prem,
                                 v_fstsup_eq_prem,
                                 v_fstsup_noneq_prem,
                                 v_secsup_eq_prem,
                                 v_secsup_noneq_prem,
                                 v_qs_eq_prem,
                                 v_qs_noneq_prem,
                                 v_facre_eq_prem,
                                 v_facre_noneq_prem,
                                 v_eq_prem,
                                 v_non_eq_prem,
                                 v_mand_eq_com,
                                 v_mand_noneq_com,
                                 v_qs_eq_com,
                                 v_qs_noneq_com,
                                 v_fstsup_eq_com,
                                 v_fstsup_noneq_com,
                                 v_secsup_eq_com,
                                 v_secsup_noneq_com,
                                 v_facre_eq_com,
                                 v_facre_noneq_com,
                                 cur_pol_rec.pol_coinsurance,
                                 v_coin_phfund);
                --    END -IF;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO INSERT RECORD INTO THE POLICY REGISTER.');
                END;

                FOR cur_all_risk_rec IN cur_all_risks
                LOOP
                    v_coin_rsk_si_diff :=
                        ROUND (
                            NVL (cur_all_risk_rec.ipu_si_diff, 0) * v_factor);
                    v_coin_rsk_prem :=
                        ROUND (
                              NVL (cur_all_risk_rec.ipu_endos_diff_amt, 0)
                            * v_factor);
                    v_coin_rsk_net_prem :=
                        ROUND (
                              NVL (cur_all_risk_rec.ipu_nett_premium, 0)
                            * v_factor);
                    v_coin_rsk_fap :=
                        ROUND (NVL (cur_all_risk_rec.ipu_fap, 0) * v_factor);
                    v_coin_rsk_gp :=
                        ROUND (NVL (cur_all_risk_rec.ipu_gp, 0) * v_factor);
                    v_coin_rsk_value :=
                        ROUND (
                            NVL (cur_all_risk_rec.ipu_value, 0) * v_factor);
                    v_coin_rks_tl :=
                        ROUND (NVL (cur_all_risk_rec.ipu_itl, 0) * v_factor);
                    v_coin_rsk_premtax :=
                        ROUND (
                            NVL (cur_all_risk_rec.ipu_prem_tax, 0) * v_factor);

                    BEGIN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || gin_rskrg_code_seq.NEXTVAL)
                          INTO v_seq_rsk
                          FROM DUAL;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_RSKRG_CODE_SEQ . ');
                    END;

                    BEGIN
                        INSERT INTO gin_policy_risk_reg (
                                        rskrg_code,
                                        rskrg_pol_policy_no,
                                        rskrg_pol_ren_endos_no,
                                        rskrg_pol_batch_no,
                                        rskrg_wef_dt,
                                        rskrg_wet_dt,
                                        rskrg_sum_insured,
                                        rskrg_nett_premium,
                                        rskrg_fap,
                                        rskrg_gp,
                                        rskrg_endos_diff_amt,
                                        rskrg_risk_cover_to,
                                        rskrg_risk_cover_from,
                                        rskrg_ipu_code,
                                        rskrg_scl_code,
                                        rskrg_si_diff,
                                        rskrg_ipu_id,
                                        rskrg_pr_code,
                                        rskrg_ggt_trans_no,
                                        rskrg_facre_rate,
                                        rskrg_com_ret_rate,
                                        rskrg_comp_net_ret,
                                        rskrg_mand_rate,
                                        rskrg_mand_prem,
                                        rskrg_mand_com,
                                        rskrg_quota_rate,
                                        rskrg_quota_com,
                                        rskrg_fstsup_rate,
                                        rskrg_fstsup_com,
                                        rskrg_secsup_rate,
                                        rskrg_secsup_com,
                                        rskrg_fstsup_prem,
                                        rskrg_secsup_prem,
                                        rskrg_facre_prem,
                                        rskrg_facre_com,
                                        rskrg_tran_date,
                                        rskrg_comm_endos_diff_amt,
                                        rskrg_quota_prem,
                                        rskrg_uw_yr,
                                        rskrg_tot_endos_prem_dif,
                                        rskrg_cur_code,
                                        rskrg_cur_symbol,
                                        rskrg_quz_code,
                                        rskrg_quz_sht_desc,
                                        rskrg_exchange_rate,
                                        rskrg_prem_tax,
                                        rskrg_ipu_property_id,
                                        rskrg_tran_type,
                                        rskrg_coin_own_pct,
                                        rskrg_brn_code,
                                        rskrg_brn_sht_desc,
                                        rskrg_tl,
                                        rskrg_policy_type,
                                        rskrg_agnt_sht_desc,
                                        rskrg_agnt_agent_code,
                                        rskrg_secsup_eq_prem,
                                        rskrg_secsup_noneq_prem,
                                        rskrg_fstsup_eq_prem,
                                        rskrg_fstsup_noneq_prem,
                                        rskrg_quota_eq_prem,
                                        rskrg_quota_noneq_prem,
                                        rskrg_facre_eq_prem,
                                        rskrg_facre_noneq_prem,
                                        rskrg_mand_eq_prem,
                                        rskrg_mand_noneq_prem,
                                        rskrg_prp_code,
                                        rskrg_earthquake_prem,
                                        rskrg_mand_eq_com,
                                        rskrg_mand_noneq_com,
                                        rskrg_quota_eq_com,
                                        rskrg_quota_noneq_com,
                                        rskrg_fstsup_eq_com,
                                        rskrg_fstsup_noneq_com,
                                        rskrg_secsup_eq_com,
                                        rskrg_secsup_noneq_com,
                                        rskrg_facre_eq_com,
                                        rskrg_facre_noneq_com,
                                        rskrg_covt_code)
                                 VALUES (
                                     v_seq_rsk,
                                     cur_pol_rec.pol_policy_no,
                                     cur_pol_rec.pol_ren_endos_no,
                                     cur_pol_rec.pol_batch_no,
                                     cur_all_risk_rec.ipu_wef,
                                     cur_all_risk_rec.ipu_wef,
                                     v_coin_rsk_value,
                                     v_coin_rsk_net_prem,
                                     v_coin_rsk_fap,
                                     v_coin_rsk_gp,
                                     v_coin_rsk_prem,
                                     cur_all_risk_rec.ipu_eff_wet,
                                     cur_all_risk_rec.ipu_eff_wef,
                                     cur_all_risk_rec.ipu_code,
                                     cur_all_risk_rec.ipu_sec_scl_code,
                                     DECODE (cur_pol_rec.pol_policy_status,
                                             'DC', 0,
                                             v_coin_rsk_si_diff),
                                     cur_all_risk_rec.ipu_id,
                                     v_seq,
                                     v_trans_no,
                                     v_facre_rate,
                                     v_net_rate,
                                     v_rsk_net_prem,
                                     v_mand_rate,
                                     v_mand_prem,
                                     v_mand_com,
                                     v_qs_rate,
                                     v_qs_com,
                                     v_fstsup_rate,
                                     v_fstsup_com,
                                     v_secsup_rate,
                                     v_secsup_com,
                                     v_fstsup_prem,
                                     v_secsup_prem,
                                     v_facre_prem,
                                     v_facre_com,
                                     v_orig_trans_date,
                                     v_coin_comm,
                                     v_qs_prem,
                                     cur_pol_rec.pol_uw_year,
                                     cur_all_risk_rec.ipu_tot_endos_prem_dif,
                                     cur_pol_rec.pol_cur_code,
                                     cur_pol_rec.pol_cur_symbol,
                                     cur_all_risk_rec.ipu_quz_code,
                                     cur_all_risk_rec.ipu_quz_sht_desc,
                                     cur_pol_rec.pol_cur_rate,
                                     v_coin_rsk_premtax,
                                     cur_all_risk_rec.ipu_property_id,
                                     DECODE (cur_pol_rec.pol_policy_status,
                                             'DC', 'DC',
                                             cur_all_risk_rec.ipu_status),
                                     v_coin_pct,
                                     cur_pol_rec.pol_brn_code,
                                     cur_pol_rec.pol_brn_sht_desc,
                                     v_coin_rks_tl,
                                     cur_pol_rec.pol_policy_type,
                                     cur_pol_rec.pol_agnt_sht_desc,
                                     cur_pol_rec.pol_agnt_agent_code,
                                     v_secsup_eq_prem,
                                     v_secsup_noneq_prem,
                                     v_fstsup_eq_prem,
                                     v_fstsup_noneq_prem,
                                     v_qs_eq_prem,
                                     v_qs_noneq_prem,
                                     v_facre_eq_prem,
                                     v_facre_noneq_prem,
                                     v_mand_eq_prem,
                                     v_mand_noneq_prem,
                                     cur_all_risk_rec.ipu_prp_code,
                                     v_eq_prem,
                                     v_mand_eq_com,
                                     v_mand_noneq_com,
                                     v_qs_eq_com,
                                     v_qs_noneq_com,
                                     v_fstsup_eq_com,
                                     v_fstsup_noneq_com,
                                     v_secsup_eq_com,
                                     v_secsup_noneq_com,
                                     v_facre_eq_com,
                                     v_facre_noneq_com,
                                     cur_all_risk_rec.ipu_covt_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO INSERT RECORD INTO THE POLICY RISK REGISTER.');
                    END;

                    NULL;
                END LOOP;
            END LOOP;
        /*IF NVL(v_rsk_tot_net_prem,0) != NVL(v_pol_net_prem,0) THEN
            RAISE_ERROR('THE NET PREMIUM AT RISK LEVEL DOES NOT TALLY WITH THAT AT POLICY LEVEL..');
        END IF;
        BEGIN
            SELECT NVL(PR_ENDOS_DIFF_AMT,0), SUM(NVL(RSKRG_ENDOS_DIFF_AMT,0))
            INTO v_pol_prem, v_rsk_prem
            FROM GIN_POLICY_REGISTER,GIN_POLICY_RISK_REG
            WHERE PR_CODE = RSKRG_PR_CODE
            AND PR_CODE = v_seq
            GROUP BY pr_code,PR_ENDOS_DIFF_AMT;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_ERROR('ERROR POSTING TO REGISTERS. RECORD NOT CREATED..');
            WHEN OTHERS THEN
                RAISE_ERROR('ERROR POSTING TO REGISTERS');
        END;
        IF NVL(v_pol_prem,0) != NVL(v_rsk_prem,0) OR NVL(v_coin_prem,0) != NVL(v_rsk_prem,0) THEN
            RAISE_ERROR('THE NET PREMIUM AT RISK LEVEL: '||NVL(v_rsk_prem,0)||' DOES NOT TALLY WITH THAT AT POLICY LEVEL:'||NVL(v_pol_prem,0));
        END IF;*/
        END LOOP;
    --DBMS_OUTPUT.PUT_LINE('AFTER INSERTING RISK REGISTER');
    --**************************** removed from here
    END;

    PROCEDURE reinsure_risk_dc_cn (v_batch_no           IN NUMBER,
                                   v_cur_code           IN NUMBER,
                                   v_base_cur_code      IN NUMBER,
                                   v_pol_cur_sht_desc   IN VARCHAR2,
                                   v_tran_no            IN NUMBER,
                                   v_tran_type          IN VARCHAR2)
    IS
        v_d                           NUMBER;
        v_user                        VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_diary_item                  VARCHAR2 (1000);
        v_exhange_rate                NUMBER := 1;
        v_tot_si                      NUMBER := 0;
        v_amt_to_reinsure             NUMBER := 0;
        v_trt_rate                    NUMBER;
        v_trt_si_tcur                 NUMBER := 0;
        v_accprd                      NUMBER;
        v_acpr_sht_desc               VARCHAR2 (25);
        msg                           VARCHAR2 (200);
        al_id                         NUMBER;
        v_cession_rate                NUMBER := 0;
        v_trt_prem_tcur               NUMBER := 0;
        v_trt_com_tcur                NUMBER := 0;
        v_trt_si_pcur                 NUMBER := 0;
        v_trt_prem_pcur               NUMBER := 0;
        v_trt_com_pcur                NUMBER := 0;
        v_ptax_amount                 NUMBER := 0;
        v_ptax_tcur                   NUMBER := 0;
        v_ctax_amount                 NUMBER := 0;
        v_ctax_tcur                   NUMBER := 0;
        v_ret_limit                   NUMBER := 0;
        v_gross_ret                   NUMBER := 0;
        v_net_ret                     NUMBER := 0;
        v_prec_tax                    NUMBER := 0;
        v_crec_tax                    NUMBER := 0;
        v_rtax_amount_pcur            NUMBER := 0;
        v_rtax_amount_tcur            NUMBER := 0;
        v_prem_rec_tax                NUMBER := 0;
        v_prem_tax                    NUMBER;
        -- :=NVL(:GIN_POLICIES.POL_PREM_TAX,0);
        --v_pol_com        NUMBER :=NVL(:GIN_POLICIES.POL_COMM_ENDOS_DIFF_AMT,0);
        v_pol_com                     NUMBER := 0;
        v_prrd_code                   NUMBER;
        v_part_prem_tax               NUMBER := 0;
        v_trt_rprem_tax               NUMBER := 0;
        v_trt_prem_tax                NUMBER := 0;
        v_trt_eq_prem_pcur            NUMBER := 0;
        v_trt_net_less_eq_prem_pcur   NUMBER := 0;
        v_trt_net_less_eq_comm_pcur   NUMBER := 0;
        v_trt_eq_com_pcur             NUMBER := 0;
        v_rnd                         NUMBER := 0;
        v_bcur_rnd                    NUMBER := 0;
        v_q                           NUMBER;
        v_zero_devide                 EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        v_ctl_si_start_from           NUMBER;
        v_ctl_limit_amt               NUMBER;
        v_pool_si                     NUMBER;
        v_pool_prem                   NUMBER;
        v_pool_rate                   NUMBER;

        v_ta_code                     NUMBER;
        v_ta_type                     VARCHAR2 (2);
        v_trt_cur_code                NUMBER;
        v_trt_cur_rate                NUMBER;

        -- select the current accounting period
        CURSOR cur_accprd IS
            SELECT acpr_code, acpr_sht_desc
              FROM gin_acc_periods
             WHERE TRUNC (SYSDATE) BETWEEN TO_DATE (
                                                  TO_CHAR (acpr_wef,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY')
                                       AND TO_DATE (
                                                  TO_CHAR (acpr_wet,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY');

        --select all single the policy risks that have not been reinsured and are ready for reinsurance
        CURSOR cur_all_risks IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     prrd_gross_comp_retention     gross_comp_ret,
                     ipu_pol_est_max_loss,
                     prrd_avail_fulc_bal,
                     prrd_ri_prem,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_sect_sht_desc,
                     ipu_cur_code,
                     prrd_facre_amount,
                     ipu_reinsure_amt,
                     prrd_gross_comp_retention,
                     prrd_prev_ret_rate,
                     prrd_ri_net_less_eq_prem,
                     prrd_earthquake_prem,
                     pol_prem_tax,
                     prrd_code,
                     prrd_facoblig_excess,
                     ipu_uw_yr,
                     pol_cur_code,
                     pol_cur_symbol
                FROM gin_policies,
                     gin_insured_property_unds,
                     gin_policy_risk_ri_dtls
               WHERE     pol_batch_no = ipu_pol_batch_no
                     AND ipu_code = prrd_ipu_code
                     AND prrd_tran_no = v_tran_no
                     AND ipu_reinsured = 1
                     AND ipu_pol_batch_no = v_batch_no
            --AND IPU_CUMMULATIVE_REINS ='N'
            --AND IPU_RELR_CODE IS NULL
            ORDER BY ipu_code;



        -- select risk treaty setup
        -- get teaty setups
        CURSOR cur_treaties (v_ipu_code   IN NUMBER,
                             v_type       IN NUMBER,
                             v_prrd          NUMBER)
        IS
              SELECT clt_ta_sht_desc,
                     clt_scl_code,
                     clt_retention_limit,
                     trt_code,
                     trt_sht_desc,
                     trt_level,
                     rei_code,
                     rei_trt_code,
                     rei_trt_sht_desc,
                     rei_comm_rate,
                     rei_limit,
                     ptotr_rate,
                     rei_rate_type,
                     rei_quake_limit,
                     rei_retained_prem,
                     rei_cur_code,
                     rei_cur_symbol,
                     rei_as_code,
                     rei_ta_code,
                     rei_trs_code,
                     rei_trs_sht_desc,
                     rei_si_start_from,
                     ptotr_property_id,
                     ptotr_uwyr,
                     ptotr_ipu_code,
                     ptotr_pol_batch_no,
                     ptotr_pol_policy_no,
                     ptotr_pol_ren_endos_no,
                     ptotr_sect_code,
                     ptotr_risk_cur_code,
                     ptotr_cession_pct,
                     rei_earthqke_comm_rate,
                     ptotr_ctl_code,
                     ptotr_code
                FROM gin_policy_rein_risk_details, gin_treaty_setups_vw
               WHERE     ptotr_clt_scl_code = clt_scl_code
                     AND ptotr_rei_code = rei_code
                     AND ptotr_ipu_code = v_ipu_code
                     AND trt_code = v_type
                     AND ptotr_prrd_code = v_prrd
            ORDER BY trt_level;

        --get retention limit
        CURSOR cur_arrangement_det (v_ipu_code NUMBER, v_scl_code NUMBER)
        IS
            SELECT DISTINCT clt_retention_limit
              FROM gin_class_treaties, gin_policy_rein_risk_details
             WHERE     clt_as_code = ptotr_as_code
                   AND ptotr_ipu_code = v_ipu_code
                   AND clt_scl_code = v_scl_code;

        CURSOR cur_participant_rate (v_rei_code IN NUMBER)
        IS
            SELECT trpa_agnt_agent_code,
                   trpa_agnt_sht_desc,
                   trpa_rei_code,
                   trpa_uw_year,
                   trpa_comp_rate,
                   trpa_rei_prem_taxable,
                   trpa_trs_code,
                   trpa_trs_sht_desc
              FROM gin_treaty_participants
             WHERE trpa_rei_code = v_rei_code;

        ---get tax rates
        CURSOR cur_tax_rates IS
            SELECT taxr_rate,
                   taxr_wef,
                   taxr_wet,
                   trnt_application_lvl,
                   trnt_type,
                   taxr_min_amt,
                   taxr_round_nxt,
                   taxr_trnt_code,
                   taxr_division_factor
              FROM gin_tax_rates, gin_transaction_types
             WHERE     trnt_code = taxr_trnt_code
                   AND (trnt_type LIKE 'WTHTX%' OR trnt_type IN ('PRP'))
                   AND (   (TRUNC (SYSDATE) BETWEEN taxr_wef AND taxr_wet)
                        OR (TRUNC (SYSDATE) >= taxr_wef AND taxr_wet IS NULL));
    --R0 = Reinsurance tax
    --R1 = Reinsurance premium tax
    --R2 = Reinsurance interest tax
    --R3 = Reinsurance commission tax
    BEGIN
        v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        FOR cur_all_risks_rec IN cur_all_risks
        LOOP
            v_prem_tax := NVL (cur_all_risks_rec.pol_prem_tax, 0);

            BEGIN
                v_prrd_code := NULL;

                SELECT prrd_code, prrd_as_code
                  INTO v_prrd_code, v_ta_code
                  FROM gin_policy_risk_ri_dtls
                 WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                       AND prrd_tran_no = v_tran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'Error :- Unable Please populate treaties again....');
            END;

            BEGIN
                SELECT DISTINCT ta_cur_code, ta_type
                  INTO v_trt_cur_code, v_ta_type
                  FROM gin_class_treaties,
                       gin_arrangement_setups,
                       gin_treaty_arrangements
                 WHERE     as_ta_code = ta_code
                       AND clt_as_code = as_code
                       AND clt_scl_code = cur_all_risks_rec.ipu_sec_scl_code
                       AND AS_CODE = v_ta_code
                       AND as_uwyr = cur_all_risks_rec.ipu_uw_yr;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    raise_error (
                        'Unable to retrieve the arrangement retention limit');
            END;

            --    RAISE_ERROR(v_ta_type);
            IF NVL (v_ta_type, 'U') = 'X'
            THEN
                EXIT;
            END IF;

            --          v_trt_cur_rate := get_exchange_rate (v_base_cur_code,v_trt_cur_code);
            --         v_exhange_rate :=v_trt_cur_rate;
            --   raise_error(v_trt_cur_rate);
            --v_exhange_rate := get_exchange_rate(cur_all_risks_rec.IPU_CUR_CODE,v_base_cur_code, trunc(sysdate));
            v_pool_si := get_risk_ri_pool (cur_all_risks_rec.prrd_code);
            v_pool_prem := get_ri_pool_prem (cur_all_risks_rec.prrd_code);
            v_pool_rate := get_ri_pool_rate (cur_all_risks_rec.prrd_code);
            v_tot_si := cur_all_risks_rec.ipu_reinsure_amt; --* v_exhange_rate;
            --         raise_error(v_tot_si||';'||cur_all_risks_rec.ipu_reinsure_amt);
            v_amt_to_reinsure :=
                ((  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                  - NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0)
                  - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                  - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
                  - NVL (v_pool_si, 0))                   --  * v_exhange_rate
                                       );

            --RAISE_ERROR('HERE='||v_amt_to_reinsure);
            DBMS_OUTPUT.PUT_LINE (
                   ' NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)='
                || NVL (cur_all_risks_rec.IPU_REINSURE_AMT, 0)
                || ' - NVL(cur_all_risks_rec.prrd_avail_fulc_bal,0)='
                || NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0)
                || 'NVL(cur_all_risks_rec.prrd_FACRE_AMOUNT,0)='
                || -NVL (cur_all_risks_rec.prrd_FACRE_AMOUNT, 0)
                || ' v_amt_to_reinsure= '
                || v_amt_to_reinsure);

            IF NVL (v_amt_to_reinsure, 0) != 0
            THEN
                -- here
                IF NVL (v_amt_to_reinsure, 0) < 0
                THEN
                    IF NVL (v_pool_si, 0) >
                       (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                        - NVL (cur_all_risks_rec.prrd_facre_amount, 0))
                    THEN
                        raise_error (
                            'The pool rate specified is greater than the available excess on risk. Please remove some of the facre cessions..');
                    ELSIF NVL (v_pool_si, 0) <
                          (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                           - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                           - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0))
                    THEN
                        UPDATE gin_policy_risk_ri_dtls
                           SET prrd_avail_fulc_bal = 0
                         WHERE prrd_code = v_prrd_code;

                        v_amt_to_reinsure :=
                            (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                             - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                             - NVL (cur_all_risks_rec.prrd_facoblig_excess,
                                    0)
                             - NVL (v_pool_si, 0));
                    ELSIF NVL (v_pool_si, 0) <
                          (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                           - NVL (cur_all_risks_rec.prrd_facre_amount, 0))
                    THEN
                        UPDATE gin_policy_risk_ri_dtls
                           SET prrd_avail_fulc_bal = 0,
                               prrd_facoblig_excess = 0
                         WHERE prrd_code = v_prrd_code;

                        v_amt_to_reinsure :=
                            (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                             - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                             - NVL (v_pool_si, 0));
                    END IF;
                END IF;

                --up to here
                DBMS_OUTPUT.PUT_LINE (
                       'v_amt_to_reinsure = '
                    || v_amt_to_reinsure
                    || ' '
                    || v_prrd_code);

                IF NVL (v_amt_to_reinsure, 0) = 0
                THEN
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_com_retention_rate =
                               (100 - NVL (v_pool_rate, 0)),
                           prrd_comp_net_rate = (100 - NVL (v_pool_rate, 0)),
                           prrd_net_prem =
                               ROUND (
                                     ((100 - NVL (v_pool_rate, 0)) / 100)
                                   * NVL (prrd_ri_prem, 0),
                                   2)
                     WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                           AND prrd_code = v_prrd_code
                           AND prrd_tran_no = v_tran_no;
                ELSE
                    FOR cur_treaties_rec
                        IN cur_treaties (cur_all_risks_rec.ipu_code,
                                         1001,
                                         v_prrd_code)
                    LOOP
                        -- Its A Mandatory Type treaty
                        -- calculate treaty sum insured in policy currency
                        v_cession_rate := cur_treaties_rec.ptotr_cession_pct;
                        v_trt_si_pcur := v_tot_si * (v_cession_rate / 100);
                        v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
                        v_trt_rate := (cur_treaties_rec.ptotr_rate);
                        -- Culculate treaty premium
                        DBMS_OUTPUT.PUT_LINE (
                               'v_trt_rate='
                            || v_trt_rate
                            || 'v_cession_rate='
                            || v_cession_rate
                            || 'prrd_ri_net_less_eq_prem='
                            || cur_all_risks_rec.prrd_ri_net_less_eq_prem
                            || 'prrd_earthquake_prem='
                            || cur_all_risks_rec.prrd_earthquake_prem);
                        v_trt_net_less_eq_prem_pcur :=
                            (  v_cession_rate
                             * NVL (
                                   cur_all_risks_rec.prrd_ri_net_less_eq_prem,
                                   0)
                             / 100);
                        --v_trt_prem_pcur := (v_cession_rate * cur_all_risks_rec.PRRD_RI_PREM / 100);
                        v_trt_net_less_eq_prem_pcur :=
                            ROUND (v_trt_net_less_eq_prem_pcur, v_rnd);
                        --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
                        v_trt_eq_prem_pcur :=
                            (  v_cession_rate
                             * NVL (cur_all_risks_rec.prrd_earthquake_prem,
                                    0)
                             / 100);
                        v_trt_eq_prem_pcur :=
                            ROUND (v_trt_eq_prem_pcur, v_rnd);
                        --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
                        v_trt_prem_pcur :=
                              NVL (v_trt_eq_prem_pcur, 0)
                            + NVL (v_trt_net_less_eq_prem_pcur, 0);
                        v_trt_prem_tcur :=
                            ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_prem_pcur=' || v_trt_prem_pcur);
                        -- calculate mandatory commission
                        v_trt_net_less_eq_comm_pcur :=
                            ROUND (
                                (  (  v_trt_net_less_eq_prem_pcur
                                    * cur_treaties_rec.rei_comm_rate)
                                 / 100),
                                v_rnd);
                        v_trt_eq_com_pcur :=
                            ROUND (
                                (  (  v_trt_eq_prem_pcur
                                    * cur_treaties_rec.rei_earthqke_comm_rate)
                                 / 100),
                                v_rnd);
                        --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
                        v_trt_com_pcur :=
                              NVL (v_trt_net_less_eq_comm_pcur, 0)
                            + NVL (v_trt_eq_com_pcur, 0);
                        v_trt_com_tcur :=
                            ROUND (v_trt_com_pcur * v_exhange_rate);
                        v_amt_to_reinsure :=
                            (v_amt_to_reinsure - v_trt_si_pcur);
                        --v_quota_bal       := v_quota_bal - v_trt_si_pcur;
                        --v_eml_to_reinsure := v_eml_to_reinsure - v_trt_si_tcur;
                        /*********tax part**************************/
                        --------calculate reinsurance tax, reinsurance commission tax part
                        v_ptax_amount := 0;
                        v_ctax_amount := 0;
                        v_ptax_tcur := 0;
                        v_ctax_tcur := 0;
                        v_ptax_amount := ROUND (NVL (v_prem_tax, 0));
                        v_ctax_amount :=
                            ROUND (NVL (v_pol_com, 0) * v_cession_rate);
                        v_ptax_tcur := v_ptax_amount * v_exhange_rate;
                        v_ctax_tcur := v_ctax_amount * v_exhange_rate;

                        /***********************************************************************/
                        UPDATE gin_policy_rein_risk_details
                           SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
                               ptotr_risk_si_tcur =
                                   ROUND (ptotr_trt_si_tcur * v_exhange_rate),
                               ptotr_risk_prem_tcur =
                                   ROUND (
                                       ptotr_trt_prem_tcur * v_exhange_rate),
                               ptotr_trt_si_pcur = ROUND (v_trt_si_pcur),
                               ptotr_trt_si_tcur = ROUND (v_trt_si_tcur),
                               ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur),
                               ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur),
                               ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur),
                               ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur),
                               ptotr_cession_pct = ROUND (v_cession_rate, 4),
                               ptotr_acpr_sht_desc = v_acpr_sht_desc,
                               ptotr_acpr_code = v_accprd,
                               ptotr_prem_tax_pcur = ROUND (v_ptax_amount),
                               ptotr_prem_tax_tcur = ROUND (v_ptax_tcur),
                               ptotr_comm_tax_pcur = ROUND (v_ctax_amount),
                               ptotr_comm_tax_tcur = ROUND (v_ctax_tcur),
                               ptotr_ggt_tran_no = v_tran_no,
                               ptotr_tran_type = v_tran_type,
                               ptotr_comm_rate =
                                   cur_treaties_rec.rei_comm_rate,
                               ptotr_earthqke_prem =
                                   ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
                               ptotr_earthqke_comm =
                                   ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
                               ptotr_net_less_eq_prem =
                                   ROUND (v_trt_net_less_eq_prem_pcur,
                                          v_bcur_rnd),
                               ptotr_net_less_eq_comm =
                                   ROUND (v_trt_net_less_eq_comm_pcur,
                                          v_bcur_rnd)
                         WHERE     ptotr_ipu_code =
                                   cur_all_risks_rec.ipu_code
                               AND ptotr_as_code =
                                   cur_treaties_rec.rei_as_code
                               AND ptotr_rei_code = cur_treaties_rec.rei_code
                               AND ptotr_prrd_code = v_prrd_code;

                        /************************start participartion *****/
                        --------------------insert participarticipation for each risk

                        Update_treaty_partipants (
                            cur_treaties_rec.rei_code,
                            v_prrd_code,
                            cur_treaties_rec.ptotr_code,
                            v_trt_si_pcur,
                            v_trt_si_tcur,
                            v_trt_prem_pcur,
                            v_trt_prem_tcur,
                            v_trt_com_pcur,
                            v_trt_com_tcur,
                            cur_all_risks_rec.pol_cur_code,
                            cur_all_risks_rec.pol_cur_symbol,
                            cur_all_risks_rec.ipu_pol_batch_no,
                            cur_all_risks_rec.ipu_pol_policy_no,
                            cur_all_risks_rec.ipu_pol_ren_endos_no,
                            v_tran_no,
                            v_tran_type,
                            cur_all_risks_rec.ipu_code,
                            cur_all_risks_rec.ipu_sec_scl_code,
                            v_exhange_rate,
                            v_rnd,
                            v_bcur_rnd);
                    -- risk participation
                    /*********************************end participation**********************/
                    END LOOP;                                    --- mandatory

                    -- calculate company retention
                    /*** THIS PART WAS REMMED ON 09/10/2001 IN THE SENSE THAT ALWAYs USE THE RISK COMPANY RETENTION AND NOT PICKING FROM THE SETUPS */
                    --OPEN cur_arrangement_det(cur_all_risks_rec.ipu_code,cur_all_risks_rec.IPU_SEC_SCL_CODE);
                    --FETCH cur_arrangement_det INTO v_ret_limit;
                    --CLOSE cur_arrangement_det;
                    /*    v_ret_limit :=cur_all_risks_rec.prrd_GROSS_COMP_RETENTION;
                        IF v_amt_to_reinsure > NVL(v_ret_limit,0) THEN
                            v_gross_ret := NVL(v_ret_limit,0);
                        ELSE
                            v_gross_ret := v_amt_to_reinsure;
                        END IF;
                        v_gross_ret := NVL(cur_all_risks_rec.prrd_GROSS_COMP_RETENTION,v_gross_ret);
                        v_net_ret := v_gross_ret;
                        v_amt_to_reinsure := v_amt_to_reinsure - v_gross_ret;
                    */
                    DBMS_OUTPUT.PUT_LINE (
                           ' NVL(cur_all_risks_rec.PRRD_PREV_RET_RATE,0)='
                        || NVL (cur_all_risks_rec.PRRD_PREV_RET_RATE, 0)
                        || ' - v_tot_si='
                        || NVL (v_tot_si, 0)
                        || 'v_net_ret='
                        || NVL (v_net_ret, 0)
                        || ' v_amt_to_reinsure= '
                        || v_amt_to_reinsure);

                    v_net_ret :=
                          (  NVL (cur_all_risks_rec.prrd_prev_ret_rate, 0)
                           / 100
                           * v_tot_si)
                        - NVL (v_pool_si, 0);
                    DBMS_OUTPUT.PUT_LINE (
                           v_amt_to_reinsure
                        || ';'
                        || v_net_ret
                        || ';'
                        || cur_all_risks_rec.prrd_prev_ret_rate
                        || ';'
                        || v_tot_si
                        || ';'
                        || v_pool_si);
                    v_amt_to_reinsure := v_amt_to_reinsure - v_net_ret;
                    v_gross_ret := NVL (v_net_ret, 0);

                    -- process quota share
                    FOR cur_treaties_rec
                        IN cur_treaties (cur_all_risks_rec.ipu_code,
                                         1003,
                                         v_prrd_code)
                    LOOP
                        -- Its A Quota share Type treaty
                        -- calculate treaty sum insured in policy currency
                        BEGIN
                            SELECT ctl_si_start_from, ctl_limit_amt
                              INTO v_ctl_si_start_from, v_ctl_limit_amt
                              FROM gin_class_treaty_limits
                             WHERE ctl_code = cur_treaties_rec.ptotr_ctl_code;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                NULL;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error fetching class treaty quota share limits....');
                        END;

                        v_ctl_si_start_from :=
                            NVL (v_ctl_si_start_from,
                                 cur_treaties_rec.rei_si_start_from);

                        --IF NVL(cur_treaties_rec.REI_SI_START_FROM,0) < NVL(v_gross_ret,0) THEN

                        IF NVL (v_ctl_si_start_from, 0) <
                           NVL (v_gross_ret, 0)
                        THEN
                            --                  raise_error(v_trt_si_pcur||';'||v_exhange_rate||';'||v_tot_si);

                            v_trt_rate := (cur_treaties_rec.ptotr_rate);
                            -- Culculate treaty premium
                            v_cession_rate :=
                                ROUND (cur_treaties_rec.ptotr_cession_pct, 4);
                            v_trt_si_pcur :=
                                v_tot_si * (v_cession_rate / 100);
                            v_trt_si_tcur :=
                                ROUND (v_trt_si_pcur * v_exhange_rate, v_rnd);

                            --raise_error(v_trt_si_pcur||';'||v_amt_to_reinsure||';'||v_tot_si||';'||v_cession_rate||';'||v_gross_ret||';'||v_trt_si_tcur);
                            v_gross_ret :=
                                NVL (v_gross_ret, 0) + v_trt_si_pcur;
                            v_amt_to_reinsure :=
                                v_amt_to_reinsure - v_trt_si_pcur;

                            -- Culculate treaty premium
                            v_trt_net_less_eq_prem_pcur :=
                                (  v_cession_rate
                                 * NVL (
                                       cur_all_risks_rec.prrd_ri_net_less_eq_prem,
                                       0)
                                 / 100);
                            --v_trt_prem_pcur := (v_cession_rate * cur_all_risks_rec.PRRD_RI_PREM / 100);
                            v_trt_net_less_eq_prem_pcur :=
                                ROUND (v_trt_net_less_eq_prem_pcur, v_rnd);
                            v_trt_eq_prem_pcur :=
                                (  v_cession_rate
                                 * NVL (
                                       cur_all_risks_rec.prrd_earthquake_prem,
                                       0)
                                 / 100);
                            v_trt_eq_prem_pcur :=
                                ROUND (v_trt_eq_prem_pcur, v_rnd);
                            v_trt_prem_pcur :=
                                  NVL (v_trt_eq_prem_pcur, 0)
                                + NVL (v_trt_net_less_eq_prem_pcur, 0);
                            v_trt_prem_tcur :=
                                ROUND (v_trt_prem_pcur * v_exhange_rate,
                                       v_rnd);
                            -- calculate QUOTA commission
                            v_trt_net_less_eq_comm_pcur :=
                                ROUND (
                                    (  (  v_trt_net_less_eq_prem_pcur
                                        * cur_treaties_rec.rei_comm_rate)
                                     / 100),
                                    v_rnd);
                            v_trt_eq_com_pcur :=
                                ROUND (
                                    (  (  v_trt_eq_prem_pcur
                                        * cur_treaties_rec.rei_earthqke_comm_rate)
                                     / 100),
                                    v_rnd);
                            --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
                            v_trt_com_pcur :=
                                  NVL (v_trt_net_less_eq_comm_pcur, 0)
                                + NVL (v_trt_eq_com_pcur, 0);
                            v_trt_com_tcur :=
                                ROUND (v_trt_com_pcur * v_exhange_rate,
                                       v_rnd);
                            --v_quota_bal       := v_quota_bal - v_trt_si_pcur;
                            --v_eml_to_reinsure := v_eml_to_reinsure - v_trt_si_tcur;
                            --v_pool_amt := NVL(v_pool_amt,0) + (NVL(v_gross_ret,0) - (NVL(v_net_ret,0) + NVL(v_trt_si_pcur,0)));
                            --------calculate reinsurance tax, reinsurance commission tax part
                            v_ptax_tcur := 0;
                            v_ctax_tcur := 0;
                            v_ptax_amount :=
                                ROUND (
                                      NVL (v_prem_tax, 0)
                                    * v_cession_rate
                                    / 100);
                            v_ctax_amount :=
                                ROUND (
                                    NVL (v_pol_com, 0) * v_cession_rate / 100);
                            v_ptax_tcur :=
                                ROUND (v_ptax_amount * v_exhange_rate, v_rnd);
                            v_ctax_tcur :=
                                ROUND (v_ctax_amount * v_exhange_rate, v_rnd);

                            --raise_error(v_trt_si_pcur||';'||v_trt_si_tcur);
                            /***********************************************************************/
                            UPDATE gin_policy_rein_risk_details
                               SET ptotr_exch_rate =
                                       ROUND (v_exhange_rate, 4),
                                   ptotr_risk_si_tcur =
                                       ROUND (
                                           ptotr_trt_si_pcur * v_exhange_rate,
                                           v_rnd),
                                   ptotr_risk_prem_tcur =
                                       ROUND (
                                             ptotr_trt_prem_tcur
                                           * v_exhange_rate,
                                           v_rnd),
                                   ptotr_trt_si_pcur = ROUND (v_trt_si_pcur),
                                   ptotr_trt_si_tcur = ROUND (v_trt_si_tcur),
                                   ptotr_trt_prem_pcur =
                                       ROUND (v_trt_prem_pcur),
                                   ptotr_trt_prem_tcur =
                                       ROUND (v_trt_prem_tcur),
                                   ptotr_trt_comm_pcur =
                                       ROUND (v_trt_com_pcur),
                                   ptotr_trt_comm_tcur =
                                       ROUND (v_trt_com_tcur),
                                   ptotr_cession_pct =
                                       ROUND (v_cession_rate, 4),
                                   ptotr_acpr_sht_desc = v_acpr_sht_desc,
                                   ptotr_acpr_code = v_accprd,
                                   ptotr_prem_tax_pcur =
                                       ROUND (v_ptax_amount),
                                   ptotr_prem_tax_tcur = ROUND (v_ptax_tcur),
                                   ptotr_comm_tax_pcur =
                                       ROUND (v_ctax_amount),
                                   ptotr_comm_tax_tcur = ROUND (v_ctax_tcur),
                                   ptotr_ggt_tran_no = v_tran_no,
                                   ptotr_tran_type = v_tran_type,
                                   ptotr_comm_rate =
                                       cur_treaties_rec.rei_comm_rate,
                                   ptotr_earthqke_prem =
                                       ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
                                   ptotr_earthqke_comm =
                                       ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
                                   ptotr_net_less_eq_prem =
                                       ROUND (v_trt_net_less_eq_prem_pcur,
                                              v_bcur_rnd),
                                   ptotr_net_less_eq_comm =
                                       ROUND (v_trt_net_less_eq_comm_pcur,
                                              v_bcur_rnd)
                             WHERE     ptotr_ipu_code =
                                       cur_all_risks_rec.ipu_code
                                   AND ptotr_as_code =
                                       cur_treaties_rec.rei_as_code
                                   AND ptotr_rei_code =
                                       cur_treaties_rec.rei_code
                                   AND ptotr_prrd_code = v_prrd_code;

                            /************************start participartion *****/
                            --------------------insert participarticipation for each risk
                            Update_treaty_partipants (
                                cur_treaties_rec.rei_code,
                                v_prrd_code,
                                cur_treaties_rec.ptotr_code,
                                v_trt_si_pcur,
                                v_trt_si_tcur,
                                v_trt_prem_pcur,
                                v_trt_prem_tcur,
                                v_trt_com_pcur,
                                v_trt_com_tcur,
                                cur_all_risks_rec.pol_cur_code,
                                cur_all_risks_rec.pol_cur_symbol,
                                cur_all_risks_rec.ipu_pol_batch_no,
                                cur_all_risks_rec.ipu_pol_policy_no,
                                cur_all_risks_rec.ipu_pol_ren_endos_no,
                                v_tran_no,
                                v_tran_type,
                                cur_all_risks_rec.ipu_code,
                                cur_all_risks_rec.ipu_sec_scl_code,
                                v_exhange_rate,
                                v_rnd,
                                v_bcur_rnd);
                        END IF;
                    END LOOP;                                    --qouta share

                    --end quota******************************************************************************************
                    FOR cur_treaties_rec
                        IN cur_treaties (cur_all_risks_rec.ipu_code,
                                         1004,
                                         v_prrd_code)
                    LOOP
                        v_trt_rprem_tax := 0;
                        v_trt_prem_tax := 0;
                        -- Its A Surplus Type treaty
                        -- calculate treaty sum insured in policy currency
                        v_cession_rate :=
                            ROUND (cur_treaties_rec.ptotr_cession_pct, 4);
                        v_trt_si_pcur := v_tot_si * (v_cession_rate / 100);
                        v_trt_si_tcur :=
                            ROUND (v_trt_si_pcur * v_exhange_rate, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                               'v_trt_prem_pcur='
                            || v_trt_prem_pcur
                            || 'v_amt_to_reinsure='
                            || v_amt_to_reinsure);
                        v_amt_to_reinsure :=
                            v_amt_to_reinsure - v_trt_si_pcur;
                        DBMS_OUTPUT.PUT_LINE (
                               'v_trt_prem_pcur='
                            || v_trt_prem_pcur
                            || 'v_amt_to_reinsure='
                            || v_amt_to_reinsure);
                        v_trt_rate := (cur_treaties_rec.ptotr_rate);
                        DBMS_OUTPUT.PUT_LINE (
                               'v_cession_rate='
                            || v_cession_rate
                            || 'v_tot_si='
                            || v_tot_si
                            || 'v_trt_si_tcur='
                            || v_trt_si_tcur
                            || 'prrd_ri_net_less_eq_prem='
                            || cur_all_risks_rec.prrd_ri_net_less_eq_prem
                            || 'prrd_earthquake_prem='
                            || cur_all_risks_rec.prrd_earthquake_prem);
                        -- Culculate treaty premium
                        --v_cession_rate := ROUND(cur_treaties_rec.ptotr_cession_pct,4);
                        v_trt_net_less_eq_prem_pcur :=
                            (  v_cession_rate
                             * NVL (
                                   cur_all_risks_rec.prrd_ri_net_less_eq_prem,
                                   0)
                             / 100);
                        --v_trt_prem_pcur := (v_cession_rate * cur_all_risks_rec.PRRD_RI_PREM / 100);
                        v_trt_net_less_eq_prem_pcur :=
                            ROUND (v_trt_net_less_eq_prem_pcur, v_rnd);
                        v_trt_eq_prem_pcur :=
                            (  v_cession_rate
                             * NVL (cur_all_risks_rec.prrd_earthquake_prem,
                                    0)
                             / 100);
                        v_trt_eq_prem_pcur :=
                            ROUND (v_trt_eq_prem_pcur, v_rnd);
                        v_trt_prem_pcur :=
                              NVL (v_trt_eq_prem_pcur, 0)
                            + NVL (v_trt_net_less_eq_prem_pcur, 0);
                        v_trt_prem_tcur :=
                            ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                        -- calculate QUOTA commission
                        v_trt_net_less_eq_comm_pcur :=
                            ROUND (
                                (  (  v_trt_net_less_eq_prem_pcur
                                    * cur_treaties_rec.rei_comm_rate)
                                 / 100),
                                v_rnd);
                        v_trt_eq_com_pcur :=
                            ROUND (
                                (  (  v_trt_eq_prem_pcur
                                    * cur_treaties_rec.rei_earthqke_comm_rate)
                                 / 100),
                                v_rnd);
                        --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
                        v_trt_com_pcur :=
                              NVL (v_trt_net_less_eq_comm_pcur, 0)
                            + NVL (v_trt_eq_com_pcur, 0);
                        v_trt_com_tcur := v_trt_com_pcur / v_exhange_rate;
                        /*********tax part**************************/
                        --------calculate reinsurance tax, reinsurance commission tax part
                        v_ptax_tcur := 0;
                        v_ctax_tcur := 0;
                        v_ptax_amount :=
                            ROUND (
                                NVL (v_prem_tax, 0) * v_cession_rate / 100);
                        v_ctax_amount :=
                            ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100);
                        v_ptax_tcur := v_ptax_amount * v_exhange_rate;
                        v_ctax_tcur := v_ctax_amount * v_exhange_rate;

                        /***********************************************************************/
                        UPDATE gin_policy_rein_risk_details
                           SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
                               ptotr_risk_si_tcur =
                                   ROUND (ptotr_trt_si_pcur * v_exhange_rate),
                               ptotr_risk_prem_tcur =
                                   ROUND (
                                       ptotr_trt_prem_tcur * v_exhange_rate),
                               ptotr_trt_si_pcur = ROUND (v_trt_si_pcur),
                               ptotr_trt_si_tcur = ROUND (v_trt_si_tcur),
                               ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur),
                               ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur),
                               ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur),
                               ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur),
                               ptotr_cession_pct = ROUND (v_cession_rate, 4),
                               ptotr_acpr_sht_desc = v_acpr_sht_desc,
                               ptotr_acpr_code = v_accprd,
                               ptotr_prem_tax_pcur = ROUND (v_ptax_amount),
                               ptotr_prem_tax_tcur = ROUND (v_ptax_tcur),
                               ptotr_comm_tax_pcur = ROUND (v_ctax_amount),
                               ptotr_comm_tax_tcur = ROUND (v_ctax_tcur),
                               ptotr_ggt_tran_no = v_tran_no,
                               ptotr_tran_type = v_tran_type,
                               ptotr_comm_rate =
                                   cur_treaties_rec.rei_comm_rate,
                               ptotr_earthqke_prem =
                                   ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
                               ptotr_earthqke_comm =
                                   ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
                               ptotr_net_less_eq_prem =
                                   ROUND (v_trt_net_less_eq_prem_pcur,
                                          v_bcur_rnd),
                               ptotr_net_less_eq_comm =
                                   ROUND (v_trt_net_less_eq_comm_pcur,
                                          v_bcur_rnd)
                         WHERE     ptotr_ipu_code =
                                   cur_all_risks_rec.ipu_code
                               AND ptotr_as_code =
                                   cur_treaties_rec.rei_as_code
                               AND ptotr_rei_code = cur_treaties_rec.rei_code
                               AND ptotr_prrd_code = v_prrd_code;

                        /************************start participartion *****/
                        --------------------insert participarticipation for each risk
                        Update_treaty_partipants (
                            cur_treaties_rec.rei_code,
                            v_prrd_code,
                            cur_treaties_rec.ptotr_code,
                            v_trt_si_pcur,
                            v_trt_si_tcur,
                            v_trt_prem_pcur,
                            v_trt_prem_tcur,
                            v_trt_com_pcur,
                            v_trt_com_tcur,
                            cur_all_risks_rec.pol_cur_code,
                            cur_all_risks_rec.pol_cur_symbol,
                            cur_all_risks_rec.ipu_pol_batch_no,
                            cur_all_risks_rec.ipu_pol_policy_no,
                            cur_all_risks_rec.ipu_pol_ren_endos_no,
                            v_tran_no,
                            v_tran_type,
                            cur_all_risks_rec.ipu_code,
                            cur_all_risks_rec.ipu_sec_scl_code,
                            v_exhange_rate,
                            v_rnd,
                            v_bcur_rnd);                 -- risk participation
                    /*********************************end participation**********************/
                    END LOOP;                                        --surplus

                    DBMS_OUTPUT.PUT_LINE (
                        'HERE=' || v_gross_ret || ';' || v_net_ret);
                    DBMS_OUTPUT.PUT_LINE (
                           'ipu_reinsure_amt'
                        || cur_all_risks_rec.ipu_reinsure_amt);

                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_comp_retention = v_net_ret,
                           prrd_gross_comp_retention =
                               NVL (prrd_gross_comp_retention, v_gross_ret),
                           prrd_com_retention_rate =
                               ROUND (
                                     NVL (prrd_gross_comp_retention, 0)
                                   / NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                          0)
                                   * 100,
                                   4),
                           prrd_comp_net_rate =
                               ROUND (
                                     v_net_ret
                                   / NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                          0)
                                   * 100,
                                   4),
                           prrd_net_prem =
                               ROUND (
                                     ROUND (
                                           v_net_ret
                                         / NVL (
                                               cur_all_risks_rec.ipu_reinsure_amt,
                                               0)
                                         * 100,
                                         4)
                                   * NVL (prrd_ri_prem, 0)
                                   / 100)
                     WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                           AND prrd_code = v_prrd_code
                           AND prrd_tran_no = v_tran_no;

                    DBMS_OUTPUT.PUT_LINE (
                        'v_amt_to_reinsure' || v_amt_to_reinsure);

                    IF v_amt_to_reinsure > 0
                    THEN
                        ---added a rounding off of figures available for facultative ceding(PRRD_AVAIL_FULC_BAL) - maynard 29052005 -----
                        UPDATE gin_policy_risk_ri_dtls
                           SET prrd_avail_fulc_bal =
                                   ROUND (
                                         NVL (prrd_avail_fulc_bal, 0)
                                       + v_amt_to_reinsure),
                               prrd_excess_pct =
                                   ROUND (
                                         (  NVL (prrd_avail_fulc_bal, 0)
                                          + v_amt_to_reinsure)
                                       / NVL (
                                             cur_all_risks_rec.ipu_reinsure_amt,
                                             0)
                                       * 100,
                                       4),
                               prrd_comp_retention = v_net_ret,
                               prrd_gross_comp_retention = v_gross_ret,
                               prrd_com_retention_rate =
                                   ROUND (
                                         NVL (prrd_gross_comp_retention, 0)
                                       / NVL (
                                             cur_all_risks_rec.ipu_reinsure_amt,
                                             0)
                                       * 100,
                                       4),
                               prrd_comp_net_rate =
                                   ROUND (
                                         v_net_ret
                                       / NVL (
                                             cur_all_risks_rec.ipu_reinsure_amt,
                                             0)
                                       * 100,
                                       4),
                               prrd_net_prem =
                                   ROUND (
                                         ROUND (
                                               v_net_ret
                                             / NVL (
                                                   cur_all_risks_rec.ipu_reinsure_amt,
                                                   0)
                                             * 100,
                                             4)
                                       * NVL (prrd_ri_prem, 0)
                                       / 100)
                         WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                               AND prrd_code = v_prrd_code
                               AND prrd_tran_no = v_tran_no;
                    --DBMS_OUTPUT.PUT_LINE('inserting diary item');
                    -- insert diary item
                    --v_diary_item :='Reinsurance auto message :-  reinsuring policy no '||:POL_CLIENT_POLICY_NUMBER||' The risk '||:IPU_ITEM_DESC||' id '|| cur_all_risks_rec.IPU_PROPERTY_ID ||' system risk code '||cur_all_risks_rec.ipu_code||' has an excess amount of '||TO_CHAR(NVL(cur_all_risks_rec.IPU_AVAIL_FULC_BAL,0) + v_amt_to_reinsure)||' to be reinsured facultatively...';
                    END IF;

                    fix_rounding_errors (v_prrd_code);
                END IF;
            END IF;
        END LOOP;

        NULL;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            --DBMS_OUTPUT.PUT_LINE('Hata miti ni dawa...You are a genius...you just did a Zero devide..',no_acknowledge);
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0.Continue if covered by XOL...');
    END;

    PROCEDURE Update_treaty_partipants (v_rei_code           IN NUMBER,
                                       v_prrd_code          IN NUMBER,
                                       v_ptotr_code         IN NUMBER,
                                       v_trt_si_pcur        IN NUMBER,
                                       v_trt_si_tcur        IN NUMBER,
                                       v_trt_prem_pcur      IN NUMBER,
                                       v_trt_prem_tcur      IN NUMBER,
                                       v_trt_com_pcur       IN NUMBER,
                                       v_trt_com_tcur       IN NUMBER,
                                       v_pol_cur_code       IN NUMBER,
                                       v_pol_cur_symbol     IN VARCHAR2,
                                       v_pol_batch_no       IN NUMBER,
                                       v_pol_policy_no      IN VARCHAR2,
                                       v_pol_ren_endos_no   IN VARCHAR2,
                                       v_tran_no            IN NUMBER,
                                       v_tran_type          IN VARCHAR2,
                                       v_ipu_code           IN NUMBER,
                                       v_ipu_sec_scl_code   IN NUMBER,
                                       v_exhange_rate       IN NUMBER,
                                       v_rnd                IN NUMBER,
                                       v_bcur_rnd           IN NUMBER)
   IS
      CURSOR cur_participant_rate
      IS
         SELECT trpa_agnt_agent_code,
                trpa_agnt_sht_desc,
                trpa_rei_code,
                trpa_uw_year,
                trpa_comp_rate,
                trpa_rei_prem_taxable,
                trpa_trs_code,
                trpa_trs_sht_desc,
                trpa_prem_tax_rate,
                trpa_part_type,
                trpa_code,
                rei_ri_prem_tax_rate,
                REI_MGT_FEE,
                rei_ri_prem_tax_div_fact,
                rei_trs_sht_desc,
                rei_trs_code,
                rei_as_code,
                rei_ta_code,
                rei_uw_year,
                rei_trt_code,
                rei_trt_sht_desc, trpa_div_fact
           FROM gin_treaty_setups, gin_treaty_participants
          WHERE trpa_rei_code = rei_code AND trpa_rei_code = v_rei_code;

      v_cnt                  NUMBER := 0;
      v_part_code            NUMBER := 0;
      v_part_si_pcur         NUMBER := 0;
      v_part_si_tcur         NUMBER := 0;
      v_part_prem_pcur       NUMBER := 0;
      v_part_prem_tcur       NUMBER := 0;
      v_part_comm_pcur       NUMBER := 0;
      v_part_comm_tcur       NUMBER := 0;
      v_part_rpremtax_pcur   NUMBER := 0;
      v_part_rpremtax_tcur   NUMBER := 0;
      v_part_premtax_pcur    NUMBER := 0;
      v_part_premtax_tcur    NUMBER := 0;
      v_part_manafee_pcur    NUMBER := 0;
      v_part_manafee_tcur    NUMBER := 0;
      v_trt_rpremtax_pcur    NUMBER := 0;
      v_trt_rpremtax_tcur    NUMBER := 0;
      v_trt_premtax_pcur     NUMBER := 0;
      v_trt_premtax_tcur     NUMBER := 0;
      v_tot_si               NUMBER := 0;
      v_cession_rate         NUMBER := 0;
      v_trt_prem_tax         NUMBER := 0;
      v_ipu_prem_tax         NUMBER := 0;
   BEGIN
        BEGIN
            SELECT ipu_reinsure_amt, ipu_prem_tax
              INTO v_tot_si, v_ipu_prem_tax
              FROM gin_insured_property_unds
             WHERE ipu_code = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error getting risk Premium Tax..');
        END;
      v_cession_rate := ROUND (v_trt_si_pcur / v_tot_si * 100, 4);
      v_trt_prem_tax :=(nvl(v_cession_rate,0) *NVL (v_ipu_prem_tax, 0))/100;
      
      FOR cur_part_rec IN cur_participant_rate
      LOOP
         v_part_si_pcur :=
            ROUND (
               v_trt_si_pcur * NVL (cur_part_rec.trpa_comp_rate, 0) / 100,
               v_rnd);
         v_part_si_tcur :=
            ROUND (
               v_trt_si_tcur * NVL (cur_part_rec.trpa_comp_rate, 0) / 100,
               v_rnd);
         v_part_prem_pcur :=
            ROUND (
               v_trt_prem_pcur * NVL (cur_part_rec.trpa_comp_rate, 0) / 100,
               v_rnd);
         v_part_prem_tcur :=
            ROUND (
               v_trt_prem_tcur * NVL (cur_part_rec.trpa_comp_rate, 0) / 100,
               v_rnd);
         v_part_comm_pcur :=
            ROUND (
               v_trt_com_pcur * NVL (cur_part_rec.trpa_comp_rate, 0) / 100,
               v_rnd);
         v_part_comm_tcur :=
            ROUND (
               v_trt_com_tcur * NVL (cur_part_rec.trpa_comp_rate, 0) / 100,
               v_rnd);
         v_part_rpremtax_pcur := 0;
         v_part_rpremtax_tcur := 0;
         v_part_premtax_pcur := 0;
         v_part_premtax_pcur := 0;

         IF cur_part_rec.trpa_rei_prem_taxable NOT IN ('UN', 'N', 'RI', 'B')
         THEN
            raise_when_others (
                  'Specify the taxes applicable for the '
               || cur_part_rec.trpa_trs_sht_desc
               || ' participant '
               || cur_part_rec.trpa_agnt_sht_desc);
         END IF;

         IF cur_part_rec.trpa_rei_prem_taxable IN ('RI', 'B')
         THEN
            v_part_rpremtax_pcur :=
               ROUND (
                    (  NVL (cur_part_rec.trpa_comp_rate, 0)
                     / 100
                     * v_trt_prem_pcur
                     * NVL (cur_part_rec.trpa_prem_tax_rate, 0))
                  / NVL (cur_part_rec.trpa_div_fact, 100),
                  v_rnd);
            v_part_rpremtax_tcur :=
               ROUND (
                    (  NVL (cur_part_rec.trpa_comp_rate, 0)
                     / 100
                     * v_trt_prem_tcur
                     * NVL (cur_part_rec.trpa_prem_tax_rate, 0))
                  / NVL (cur_part_rec.trpa_div_fact, 100),
                  v_rnd);
            v_trt_rpremtax_pcur :=
               NVL (v_trt_rpremtax_pcur, 0) + NVL (v_part_rpremtax_pcur, 0);
            v_trt_rpremtax_tcur :=
               NVL (v_trt_rpremtax_tcur, 0) + NVL (v_part_rpremtax_tcur, 0);
         ELSE
            v_part_rpremtax_pcur := 0;
            v_part_rpremtax_tcur := 0;
         END IF;

         /* COMMENTED ON 13042017 TO SORT PREMIUM TAX CALCULATION FOR PARTICIPANTS*/
         IF cur_part_rec.trpa_rei_prem_taxable IN ('UN', 'B')
         THEN
--            v_part_premtax_pcur :=
--               ROUND (
--                    (  NVL (cur_part_rec.trpa_comp_rate, 0)
--                     / 100
--                     * v_trt_prem_pcur
--                     * NVL (cur_part_rec.trpa_prem_tax_rate, 0))
--                  / 100,
--                  v_rnd);
            v_part_premtax_pcur := ROUND(nvl(v_trt_prem_tax,0)* NVL (cur_part_rec.trpa_comp_rate, 0) / 100, v_rnd);
--            v_part_premtax_tcur :=
--               ROUND (
--                    (  NVL (cur_part_rec.trpa_comp_rate, 0)
--                     / 100
--                     * v_trt_prem_tcur
--                     * NVL (cur_part_rec.trpa_prem_tax_rate, 0))
--                  / 100,
--                  v_rnd);
             v_part_premtax_tcur := ROUND (v_part_premtax_pcur * v_exhange_rate, v_rnd);
         ELSE
            v_part_premtax_pcur := 0;
            v_part_premtax_tcur := 0;
         END IF;

         v_trt_premtax_pcur :=
            NVL (v_trt_premtax_pcur, 0) + NVL (v_part_premtax_pcur, 0);
         v_trt_premtax_tcur :=
            NVL (v_trt_premtax_tcur, 0) + NVL (v_part_premtax_tcur, 0);
         --management fee
         v_part_manafee_pcur := 0;
         v_part_manafee_tcur := 0;

         IF cur_part_rec.rei_mgt_fee != 0
         THEN
            v_part_manafee_pcur :=
               ROUND (
                    (  NVL (cur_part_rec.trpa_comp_rate, 0)
                     / 100
                     * v_trt_prem_pcur
                     * NVL (cur_part_rec.rei_mgt_fee, 0))
                  / 100,
                  v_rnd);
            v_part_manafee_tcur :=
               ROUND (
                    (  NVL (cur_part_rec.trpa_comp_rate, 0)
                     / 100
                     * v_trt_prem_tcur
                     * NVL (cur_part_rec.rei_mgt_fee, 0))
                  / 100,
                  v_rnd);
         END IF;

         --- update participation
         BEGIN
            SELECT COUNT (1)
              INTO v_cnt
              FROM gin_participations
             WHERE     part_agnt_agent_code =
                          cur_part_rec.trpa_agnt_agent_code
                   AND part_rei_code = cur_part_rec.trpa_rei_code
                   AND part_ptotr_code = v_ptotr_code;
         EXCEPTION
            WHEN OTHERS
            THEN
               raise_when_others ('Error checking participant records..');
         END;

         IF NVL (v_cnt, 0) = 0
         THEN
            BEGIN
               SELECT gin_part_code_seq.NEXTVAL INTO v_part_code FROM DUAL;

               INSERT INTO gin_participations (part_code,
                                               part_cede_rate,
                                               part_trt_code,
                                               part_trt_sht_desc,
                                               part_agnt_agent_code,
                                               part_agnt_sht_desc,
                                               part_ptotr_code,
                                               part_rei_code,
                                               part_pol_cur_code,
                                               part_pol_cur_symbol,
                                               part_uwyr,
                                               part_pol_batch_no,
                                               part_pol_policy_no,
                                               part_pol_ren_endos_no,
                                               part_ipu_code,
                                               part_ta_code,
                                               part_as_code,
                                               part_fiscal_year,
                                               part_acc_posted,
                                               part_trs_code,
                                               part_trs_sht_desc,
                                               part_scl_code,
                                               part_ggt_tran_no,
                                               part_tran_type,
                                               part_prrd_code,
                                               part_si_amt_pcur,
                                               part_si_amt_tcur,
                                               part_comm_amt_pcur,
                                               part_comm_amt_tcur,
                                               part_prem_amt_pcur,
                                               part_prem_amt_tcur,
                                               part_rprem_tax_pcur,
                                               part_rprem_tax_tcur,
                                               part_trpa_code,
                                               part_mgt_fee_pcur,
                                               part_mgt_fee_tcur,
                                               part_prem_tax_pcur,
                                               part_prem_tax_tcur)
                    VALUES (v_part_code,
                            cur_part_rec.trpa_comp_rate,
                            cur_part_rec.rei_trt_code,
                            cur_part_rec.rei_trt_sht_desc,
                            cur_part_rec.trpa_agnt_agent_code,
                            cur_part_rec.trpa_agnt_sht_desc,
                            v_ptotr_code,
                            v_rei_code,
                            v_pol_cur_code,
                            v_pol_cur_symbol,
                            cur_part_rec.rei_uw_year,
                            v_pol_batch_no,
                            v_pol_policy_no,
                            v_pol_ren_endos_no,
                            v_ipu_code,
                            cur_part_rec.rei_ta_code,
                            cur_part_rec.rei_as_code,
                            TO_CHAR (SYSDATE, 'YYYY'),
                            'R',
                            cur_part_rec.rei_trs_code,
                            cur_part_rec.rei_trs_sht_desc,
                            v_ipu_sec_scl_code,
                            v_tran_no,
                            v_tran_type,
                            v_prrd_code,
                            v_part_si_pcur,
                            v_part_si_tcur,
                            v_part_comm_pcur,
                            v_part_comm_tcur,
                            v_part_prem_pcur,
                            v_part_prem_tcur,
                            v_part_rpremtax_pcur,
                            v_part_rpremtax_tcur,
                            cur_part_rec.trpa_code,
                            v_part_manafee_pcur,
                            v_part_manafee_tcur,
                            v_part_premtax_pcur,
                            v_part_premtax_tcur);
            EXCEPTION
               WHEN OTHERS
               THEN
                  raise_when_others ('Error populating particant cessions..');
            END;
         ELSE
            BEGIN
               UPDATE gin_participations
                  SET part_si_amt_pcur = v_part_si_pcur,
                      part_si_amt_tcur = v_part_si_tcur,
                      part_comm_amt_pcur = v_part_comm_pcur,
                      part_comm_amt_tcur = v_part_comm_tcur,
                      part_prem_amt_pcur = v_part_prem_pcur,
                      part_prem_amt_tcur = v_part_prem_tcur,
                      part_rprem_tax_pcur = v_part_rpremtax_pcur,
                      PART_RPREM_TAX_TCUR = v_part_rpremtax_tcur,
                      part_prem_tax_pcur = v_part_premtax_pcur,
                      PART_PREM_TAX_TCUR = v_part_premtax_tcur,
                      part_mgt_fee_pcur = v_part_manafee_pcur,
                      part_mgt_fee_tcur = v_part_manafee_tcur
                WHERE     part_agnt_agent_code =
                             cur_part_rec.trpa_agnt_agent_code
                      AND part_rei_code = v_rei_code
                      AND part_ptotr_code = v_ptotr_code
                      AND part_trpa_code = cur_part_rec.trpa_code;
            EXCEPTION
               WHEN OTHERS
               THEN
                  raise_when_others ('Error updating participant cessions..');
            END;
         END IF;
      END LOOP;                                          -- risk participation

      /*********************************end participation**********************/
      UPDATE gin_policy_rein_risk_details
         SET ptotr_rprem_tax_pcur = v_trt_rpremtax_pcur,
             ptotr_rprem_tax_tcur = v_trt_rpremtax_tcur,
             ptotr_prem_tax_pcur = v_trt_premtax_pcur,
             ptotr_prem_tax_tcur = v_trt_premtax_tcur
       WHERE ptotr_code = v_ptotr_code;
   /*********************************end participation**********************/
   END;

    --PROCEDURE reinsure_risks (
    --      v_batch_no           IN   NUMBER,
    --      v_cur_code           IN   NUMBER,
    --      v_base_cur_code      IN   NUMBER,
    --      v_pol_cur_sht_desc   IN   VARCHAR2,
    --      v_tran_no            IN   NUMBER,
    --      v_tran_type          IN   VARCHAR2,
    --      v_ipucode IN NUMBER
    --   )
    --   IS
    --      v_d                           NUMBER;
    --      v_exhange_rate                NUMBER          := 1;
    --      --v_tot_si                      NUMBER          := 0;
    --      v_amt_to_reinsure             NUMBER          := 0;
    --      --v_trt_rate                    NUMBER;
    --      v_trt_si_tcur                 NUMBER          := 0;
    --      v_accprd                      NUMBER;
    --      v_acpr_sht_desc               VARCHAR2 (200);
    --      v_cession_rate                NUMBER          := 0;
    --      v_trt_prem_tcur               NUMBER          := 0;
    --      v_trt_com_tcur                NUMBER          := 0;
    --      v_trt_si_pcur                 NUMBER          := 0;
    --      v_trt_prem_pcur               NUMBER          := 0;
    --      v_trt_com_pcur                NUMBER          := 0;
    --      v_ptax_amount                 NUMBER          := 0;
    --      v_ptax_tcur                   NUMBER          := 0;
    --      v_ctax_amount                 NUMBER          := 0;
    --      v_ctax_tcur                   NUMBER          := 0;
    --      v_ret_limit                   NUMBER          := 0;
    --      v_gross_ret                   NUMBER          := 0;
    --      v_net_ret                     NUMBER          := 0;
    --      v_prec_tax                    NUMBER          := 0;
    --      v_crec_tax                    NUMBER          := 0;
    ----      v_trt_rpremtax_pcur           NUMBER          := 0;
    ----      v_part_rpremtax_pcur          NUMBER          := 0;
    ----      v_trt_premtax_pcur            NUMBER          := 0;
    ----      v_part_premtax_pcur           NUMBER          := 0;
    --      v_prem_tax                    NUMBER;
    --      v_pol_com                     NUMBER          := 0;
    --      v_prrd_code                   NUMBER;
    --      v_trt_rprem_tax               NUMBER          := 0;
    --      v_trt_prem_tax                NUMBER          := 0;
    --      v_no_ri_si                    VARCHAR2 (15);
    --      v_bind_max_exp                NUMBER          := 0;
    --      v_dummy                       NUMBER (2)      := 0;
    --      v_pool_amt                    NUMBER          := 0;
    --      v_trt_eq_prem_pcur            NUMBER          := 0;
    --      v_trt_net_less_eq_prem_pcur   NUMBER          := 0;
    --      v_trt_net_less_eq_comm_pcur   NUMBER          := 0;
    --      v_trt_eq_com_pcur             NUMBER          := 0;
    --      v_rnd                         NUMBER          := 0;
    --      v_bcur_rnd                    NUMBER          := 0;
    --      v_cnt                         NUMBER          := 0;
    ----      v_part_si_pcur                NUMBER          := 0;
    ----      v_part_si_tcur                NUMBER          := 0;
    ----      v_part_comm_pcur              NUMBER          := 0;
    ----      v_part_comm_tcur              NUMBER          := 0;
    ----      v_part_prem_pcur              NUMBER          := 0;
    ----      v_part_prem_tcur              NUMBER          := 0;
    ----      v_part_code                   NUMBER;
    --      v_facoblig_excess             NUMBER          := 0;
    --      v_facnorml_excess             NUMBER          := 0;
    --      v_total_facoblig_ceded        NUMBER          := 0;
    --      v_special_ret_limit           NUMBER          := 0;
    --      v_special_ret_diff            NUMBER          := 0;
    --      v_q                           NUMBER;
    --      v_zero_devide                 EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      v_ctl_si_start_from           NUMBER;
    --      v_ctl_limit_amt               NUMBER;
    --      v_pool_si                     NUMBER;
    --      v_pool_prem                   NUMBER;
    --      v_pool_rate                   NUMBER;
    --      v_facoblig_limit              NUMBER;
    --      v_avail_fulc_bal              NUMBER;
    ----      v_part_manafee_pcur           NUMBER          := 0;
    ----      v_part_manafee_tcur           NUMBER          := 0;
    --      v_rein_cur_param              VARCHAR2 (1);
    --      v_ipu_reinsure_amt    NUMBER          := 0;
    --      v_fac_amt                NUMBER            := 0;
    --      v_risk_count             NUMBER            :=0;
    --      v_rsk_excl                VARCHAR2(1);
    --      v_rsk_excl_param     VARCHAR2(1);
    ----      v_trpa_prem_tax_rate   NUMBER;
    ----      v_trpa_part_type     VARCHAR2(1);
    --
    --      v_trt_cur_code  NUMBER;
    --      v_as_code NUMBER;
    --       v_bcur_code  number ;
    --       v_bcur_symbol  VARCHAR2(10);
    --       v_trt_cur_rate number ;
    --
    --        v_rc_code NUMBER;
    --        v_retention_amt NUMBER;
    --        v_treat_limit_amt NUMBER;
    --        v_excess_pct NUMBER;
    --     --   v_prev_fc_amnt NUMBER;
    --        v_prev_si NUMBER;
    --        v_ret_rate NUMBER;
    --        v_tot_risk_si NUMBER;
    --        v_endors_si NUMBER;
    --
    --        v_gross_ret_is NUMBER;
    --        v_comp_net_rate NUMBER;
    --        v_comp_net_prem NUMBER;
    --
    --        v_ta_type VARCHAR2(2);
    --        v_prev_net_retention NUMBER;
    --        v_trans_sign NUMBER;
    --
    --       v_user VARCHAR(30);
    --       v_ri_cur_rate NUMBER;
    --       v_ri_prem_formular varchar2(20);
    --       v_fc_prem number;
    --
    ----select all single the policy risks that have not been reinsured and are ready for reinsurance
    --      CURSOR cur_all_risks
    --      IS
    --         SELECT ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  prrd_gross_comp_retention gross_comp_ret,
    --                  ipu_pol_est_max_loss, prrd_avail_fulc_bal, prrd_ri_prem,
    --                  ipu_sec_scl_code, ipu_related_ipu_code, ipu_bp, ipu_gp,
    --                  ipu_fp, ipu_fap, ipu_nett_premium, ipu_eml_si,
    --                  ipu_cummulative_reins, ipu_sec_sect_code, ipu_sect_sht_desc,
    --                  ipu_cur_code, prrd_facre_amount, ipu_reinsure_amt,
    --                  prrd_gross_comp_retention, ipu_prem_tax, ipu_bind_code,
    --                  ipu_max_exposure, prrd_earthquake_prem,
    --                  prrd_ri_net_less_eq_prem, pol_prem_tax, pol_binder_policy,
    --                  pol_cur_symbol, pol_cur_code, prrd_facoblig_excess,
    --                  prrd_facoblig_limit, prrd_code, ipu_override_ri_retention,
    --                  prrd_facoblig_user_excess, prrd_facoblig_alloc_chk,prrd_prev_facre_si,prrd_prev_ri_si,
    --                  pol_exch_rate_fixed,pol_cur_rate,ipu_overrideride_ret_type,ipu_uw_yr,ipu_prev_ipu_code,
    --                  --get_risk_comp_retention(ipu_id,ipu_uw_yr,ipu_code)
    --                  prrd_prev_net_retention,
    --                  ipu_id,prrd_comp_net_rate,ipu_rc_code,
    --                  ipu_eml_based_on,prrd_comp_ret_edited,pol_policy_status,
    --                  prrd_tran_no,pol_uw_year,prrd_cumm_ri_prem,prrd_ri_prev_prem,
    --                  prrd_net_prev_prem,prrd_prev_facre_prem,scl_no_ri_si,PRRD_PREV_RET_RATE
    --             FROM gin_policies,
    --                  gin_insured_property_unds,
    --                  gin_policy_risk_ri_dtls,gin_sub_classes
    --            WHERE pol_batch_no = ipu_pol_batch_no
    --              AND ipu_code = prrd_ipu_code
    --              and ipu_sec_scl_code = scl_code
    --              and ipu_code = v_ipucode
    --              AND prrd_tran_no = v_tran_no
    ----              AND ipu_reinsured = 1
    --              AND ipu_pol_batch_no = v_batch_no
    --         ORDER BY ipu_code;

    ----AND IPU_CUMMULATIVE_REINS ='N'
    ----AND IPU_RELR_CODE IS NULL
    ---- select risk treaty setup
    ---- get teaty setups
    --      CURSOR cur_treaties (
    --         v_ipu_code   IN   NUMBER,
    --         v_type       IN   NUMBER,
    --         v_prrd            NUMBER
    --      )
    --      IS
    --         SELECT   clt_ta_sht_desc, clt_scl_code, clt_retention_limit,
    --                  trt_code, trt_sht_desc, trt_level, rei_code, rei_trt_code,
    --                  rei_trt_sht_desc, rei_comm_rate, rei_limit, ptotr_rate,
    --                  rei_rate_type, rei_quake_limit, rei_retained_prem,
    --                  rei_cur_code, rei_cur_symbol, rei_as_code, rei_ta_code,
    --                  rei_trs_code, rei_trs_sht_desc,
    --                  NVL (rei_si_start_from, 0) rei_si_start_from,
    --                  rei_ri_prem_tax_rate, rei_ri_prem_tax_div_fact,
    --                  ptotr_property_id, ptotr_uwyr, ptotr_ipu_code,
    --                  ptotr_pol_batch_no, ptotr_pol_policy_no,
    --                  ptotr_pol_ren_endos_no, ptotr_sect_code,
    --                  ptotr_risk_cur_code, rei_earthqke_comm_rate, ptotr_code,
    --                  ptotr_ctl_code, rei_mgt_fee,ptotr_allowed_rate,
    --                  PTOTR_PREV_CESSION_RATE
    --             FROM gin_policy_rein_risk_details, gin_treaty_setups_vw
    --            WHERE ptotr_clt_scl_code = clt_scl_code
    --              AND ptotr_rei_code = rei_code
    --              AND ptotr_ipu_code = v_ipu_code
    --              AND trt_code = v_type
    --              AND ptotr_prrd_code = v_prrd
    --         ORDER BY trt_level, rei_si_start_from;

    ----get retention limit
    --      CURSOR cur_arrangement_det (v_ipu_code NUMBER, v_scl_code NUMBER)
    --      IS
    --         SELECT DISTINCT clt_retention_limit
    --                    FROM gin_class_treaties, gin_policy_rein_risk_details
    --                   WHERE clt_as_code = ptotr_as_code
    --                     AND ptotr_ipu_code = v_ipu_code
    --                     AND clt_scl_code = v_scl_code;

    ----      CURSOR cur_participant_rate (v_rei_code IN NUMBER)
    ----      IS
    ----         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    ----                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    ----                trpa_trs_code, trpa_trs_sht_desc,trpa_prem_tax_rate,trpa_part_type,trpa_code
    ----           FROM gin_treaty_participants
    ----          WHERE trpa_rei_code = v_rei_code;

    -----get tax rates
    --      CURSOR cur_tax_rates
    --      IS
    --         SELECT taxr_rate, taxr_wef, taxr_wet, trnt_application_lvl,
    --                trnt_type, taxr_min_amt, taxr_round_nxt, taxr_trnt_code,
    --                taxr_division_factor
    --           FROM gin_tax_rates, gin_transaction_types
    --          WHERE trnt_code = taxr_trnt_code
    --            AND (trnt_type LIKE 'WTHTX%' OR trnt_type IN ('PRP'))
    --            AND (   (TRUNC (SYSDATE) BETWEEN taxr_wef AND taxr_wet)
    --                 OR (TRUNC (SYSDATE) >= taxr_wef AND taxr_wet IS NULL)
    --                );
    --
    --      CURSOR cur_prev_facre(v_ipu_code in number) IS SELECT * FROM gin_facre_cessions
    --      WHERE fc_ipu_code=v_ipu_code;
    ----R0 = Reinsurance tax
    ----R1 = Reinsurance premium tax
    ----R2 = Reinsurance interest tax
    ----R3 = Reinsurance commission tax
    ----v_prev_ipu_reinsure_amt NUMBER;
    --   BEGIN

    --      BEGIN
    --         SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('CHECK_RISK_EXCL_ZONES') INTO v_rsk_excl_param FROM DUAL;
    --      EXCEPTION WHEN OTHERS
    --      THEN
    --          v_rsk_excl_param := 'N';
    --      END;
    --
    --      IF v_rsk_excl_param = 'Y'
    --      THEN
    --          BEGIN
    --           SELECT COUNT(*) INTO v_risk_count
    --               FROM gin_insured_property_unds
    --              WHERE ipu_pol_batch_no = v_batch_no
    --                AND ipu_quza_code IN (
    --                       SELECT tuqz_quza_code
    --                         FROM gin_treaty_uncvd_quake_zones,
    --                              gin_treaty_setups,
    --                              gin_class_treaties
    --                        WHERE tuqz_ta_code = rei_ta_code
    --                          AND tuqz_as_code = rei_as_code
    --                          AND clt_scl_code = ipu_sec_scl_code
    --                          AND clt_as_code = rei_as_code
    --                          AND rei_uw_year = TO_NUMBER (TO_CHAR (ipu_wef, 'RRRR'))
    --                          )
    --                         AND ipu_quza_code IS NULL;
    --          EXCEPTION WHEN OTHERS
    --          THEN
    --            v_risk_count := 0;
    --          END;
    --      END IF;
    --
    --      IF v_risk_count > 0 THEN
    --        v_rsk_excl := 'Y';
    --      ELSE
    --        v_rsk_excl := 'N';
    --      END IF;

    --      v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --      v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar  ('REINS_IN_BASE_CURRENCY')
    --           INTO v_rein_cur_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_rein_cur_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Treaty  parameter...');
    --      END;
    --
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar  ('RI_PREM_FORMULAR')
    --           INTO v_ri_prem_formular
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_ri_prem_formular := null;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Reinsurance Premium Calculation Option...');
    --      END;

    --      FOR cur_all_risks_rec IN cur_all_risks LOOP
    --         v_prem_tax := NVL (cur_all_risks_rec.ipu_prem_tax, 0);
    --         v_bind_max_exp := 0;
    --         v_dummy := 0;

    --         IF     NVL (v_bind_max_exp, 0) = 0
    --            AND cur_all_risks_rec.pol_binder_policy = 'Y'
    --         THEN
    --            SELECT COUNT ('x')
    --              INTO v_dummy
    --              FROM gin_binder_details
    --             WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --               AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;

    --            IF NVL (v_dummy, 0) > 1
    --            THEN
    --               raise_error
    --                  ('Setup Error, Maximum accumulation defined more than once for this binder'
    --                  );
    --            ELSIF NVL (v_dummy, 0) = 1
    --            THEN
    --               BEGIN
    --                  SELECT db_max_limit
    --                    INTO v_bind_max_exp
    --                    FROM gin_binder_details
    --                   WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                     AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --               EXCEPTION
    --                  WHEN OTHERS THEN
    --                     raise_error
    --                        ('Unable to retrieve the maximum exposure for the bordereaux scl'
    --                        );
    --               END;
    --            ELSIF NVL (v_dummy, 0) = 0
    --            THEN
    --               BEGIN
    --                  SELECT NVL (bind_max_exposure, 0)
    --                    INTO v_bind_max_exp
    --                    FROM gin_binders
    --                   WHERE bind_code = cur_all_risks_rec.ipu_bind_code;
    --               EXCEPTION
    --                  WHEN OTHERS THEN
    --                     raise_error
    --                        ('Unable to retrieve the maxmium exposure for the bordereaux'
    --                        );
    --               END;
    --            END IF;

    --            IF     NVL (v_bind_max_exp, 0) > 0
    --               AND NVL (v_bind_max_exp, 0) <
    --                                   NVL (cur_all_risks_rec.ipu_max_exposure, 0)
    --            THEN
    --               raise_error (   'The maximum exposure amount for the risk '
    --                            || cur_all_risks_rec.ipu_property_id
    --                            || ' is greater than the allowed limit of '
    --                            || v_bind_max_exp
    --                           );
    --            END IF;
    --         END IF;
    --------------------
    --

    --         IF NVL (cur_all_risks_rec.scl_no_ri_si, 'N') = 'N' AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0 THEN
    --            raise_error  ('No reinsure amount specified, cannot reinsure this risk');
    --         END IF;

    --         BEGIN
    --            v_prrd_code := NULL;

    --            SELECT prrd_code,PRRD_AS_CODE
    --              INTO v_prrd_code,v_as_code
    --              FROM gin_policy_risk_ri_dtls
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_tran_no = v_tran_no;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               raise_error
    --                        ('Error :- Unable Please populate treaties again....');
    --         END;
    --         BEGIN
    --           SELECT DISTINCT  ta_cur_code,TA_TYPE,REI_CUR_RATE
    --                      INTO  v_trt_cur_code,v_ta_type,v_ri_cur_rate
    --                      FROM gin_class_treaties,
    --                           gin_arrangement_setups,
    --                           gin_treaty_arrangements,
    --                           gin_treaty_setups -- for now... this needs to be looked into afresh
    --                     WHERE as_ta_code = ta_code
    --                       AND clt_as_code = as_code
    --                       AND clt_scl_code =  cur_all_risks_rec.ipu_sec_scl_code
    --                       AND AS_CODE =v_as_code
    --                       AND REI_AS_CODE=as_code
    --                       AND REI_TA_CODE = ta_code
    --                       AND as_uwyr = cur_all_risks_rec.ipu_uw_yr;
    --        EXCEPTION
    --           WHEN NO_DATA_FOUND
    --           THEN
    --             NULL;
    --           WHEN OTHERS
    --           THEN
    --              raise_error
    --                 ('Unable to retrieve the arrangement retention limit'
    --                 );
    --        END;
    --
    --          IF NVL(v_rein_cur_param,'N') = 'Y' AND v_trt_cur_code != cur_all_risks_rec.pol_cur_code THEN
    --             IF v_bcur_code =v_trt_cur_code THEN
    --                 v_ipu_reinsure_amt :=( NVL(cur_all_risks_rec.ipu_reinsure_amt,0));
    --             ELSE
    --                 v_ipu_reinsure_amt :=( NVL(cur_all_risks_rec.ipu_reinsure_amt,0)) / cur_all_risks_rec.pol_cur_rate;
    --             END IF;
    --         ELSE
    --             v_ipu_reinsure_amt := NVL(cur_all_risks_rec.ipu_reinsure_amt,0);
    --         END IF;
    --
    --         SELECT  SIGN(NVL (cur_all_risks_rec.prrd_ri_prem, 0)) INTO v_trans_sign FROM DUAL;

    --         IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code THEN
    --            IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y')  THEN
    --              -- v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt / cur_all_risks_rec.pol_cur_rate,  v_rnd  );
    --               v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
    --            ELSE
    --              v_trt_cur_rate := get_exchange_rate (v_bcur_code,v_trt_cur_code);
    --             v_exhange_rate :=v_trt_cur_rate;
    --          --v_ipu_reinsure_amt := ROUND (  v_ipu_reinsure_amt / nvl(v_ri_cur_rate,v_trt_cur_rate),  v_rnd );
    --            END IF;
    --         ELSE
    --            v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
    --         END IF;

    --         v_pool_si := get_risk_ri_pool (cur_all_risks_rec.prrd_code);
    --         v_pool_prem := get_ri_pool_prem (cur_all_risks_rec.prrd_code);
    --         v_pool_rate := get_ri_pool_rate (cur_all_risks_rec.prrd_code);
    --         v_prev_net_retention :=NVL(cur_all_risks_rec.prrd_prev_net_retention,0);

    ----          SELECT decode(NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+ NVL(v_prev_net_retention,0)),0,v_ipu_reinsure_amt,NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(v_prev_net_retention,0)))
    ----          INTO v_tot_si FROM DUAL;
    --
    --         v_tot_risk_si :=v_ipu_reinsure_amt;
    --         v_avail_fulc_bal := 0;--NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0);
    --         DBMS_OUTPUT.put_line (   'v_ipu_reinsure_amt=' || v_ipu_reinsure_amt);
    --         v_amt_to_reinsure :=
    --            (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --             - NVL (v_avail_fulc_bal, 0)
    --             - (NVL (cur_all_risks_rec.prrd_facre_amount, 0))
    --             - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --             - NVL (v_pool_si, 0)  );
    --          DBMS_OUTPUT.put_line (   'prrd_facre_amount=' || cur_all_risks_rec.prrd_facre_amount);
    --         DBMS_OUTPUT.put_line (   'v_amt_to_reinsure=' || v_amt_to_reinsure || 'v_avail_fulc_bal=' || v_avail_fulc_bal  || 'v_pool_si=' || v_pool_si || 'v_amt_to_reinsure='  || v_amt_to_reinsure   );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)- NVL (cur_all_risks_rec.prrd_facre_amount, 0) - NVL (cur_all_risks_rec.prrd_facoblig_excess,0  ) );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)  - NVL (cur_all_risks_rec.prrd_facre_amount, 0) );

    --         IF NVL (v_amt_to_reinsure, 0) < 0 THEN
    --            IF NVL (v_pool_si, 0) >
    --                  (  NVL (v_ipu_reinsure_amt/*cur_all_risks_rec.ipu_reinsure_amt*/, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                  )
    --            THEN
    --              raise_error ('The pool rate specified is greater than the available excess on risk. Please remove some of the facre cessions..'||v_pool_si||';'||v_ipu_reinsure_amt||';'||cur_all_risks_rec.prrd_facre_amount);
    --            ELSIF NVL (v_pool_si, 0) <
    --                    (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --                    )
    --            THEN
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = 0
    --                WHERE prrd_code = v_prrd_code;

    --               v_avail_fulc_bal := 0;
    --               v_amt_to_reinsure :=
    --                  (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --                   - NVL (v_pool_si, 0)
    --                  );
    --            ELSIF NVL (v_pool_si, 0) <
    --                    (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                    )
    --            THEN
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = 0,
    --                      prrd_facoblig_excess = 0
    --                WHERE prrd_code = v_prrd_code;

    --               v_avail_fulc_bal := 0;
    --               v_amt_to_reinsure :=
    --                  (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                   - NVL (v_pool_si, 0)
    --                  );
    --            END IF;
    --         END IF;

    --         DBMS_OUTPUT.put_line (   'v_amt_to_reinsure='
    --                               || v_amt_to_reinsure
    --                               || 'v_pool_si='
    --                               || v_pool_si
    --                               || 'v_amt_to_reinsure='
    --                               || v_amt_to_reinsure
    --                              );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facoblig_excess,
    --                                      0
    --                                     )
    --                              );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                              );

    ----RAISE_ERROR(34);
    ----raise_error(v_amt_to_reinsure);
    --         IF NVL (v_amt_to_reinsure, 0) = 0 THEN
    --            UPDATE gin_policy_risk_ri_dtls
    --               SET prrd_com_retention_rate = (100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))),
    --                   prrd_comp_net_rate = (100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))),
    --                   prrd_net_prem =ROUND (  ((100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))) / 100)  * NVL (prrd_ri_prem, 0), 2 )
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_code = v_prrd_code
    --               AND prrd_tran_no = v_tran_no;
    --         ELSE
    ----MANDATORY
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code, 1001,  v_prrd_code  ) LOOP -- Its A Mandatory Type treaty
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    --               -- calculate treaty sum insured in policy currency
    ----                v_tot_si := v_ipu_reinsure_amt;
    --                v_prev_net_retention :=0;
    --               v_trt_si_pcur := v_tot_risk_si * (cur_treaties_rec.ptotr_rate / 100);
    --               v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --               -- Culculate treaty premium
    ----               RAISE_ERROR('v_trt_si_pcur11111='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --               v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;
    ----DBMS_OUTPUT.PUT_LINE('v_cession_rate='||v_cession_rate);
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0  THEN
    --                   v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               END if ;
    --            -- calculate mandatory commission
    --               v_trt_net_less_eq_comm_pcur :=
    --                  ROUND ((  (  v_trt_net_less_eq_prem_pcur
    --                             * cur_treaties_rec.rei_comm_rate
    --                            )
    --                          / 100
    --                         ),
    --                         v_rnd
    --                        );
    --               v_trt_eq_com_pcur :=
    --                  ROUND ((  (  v_trt_eq_prem_pcur
    --                             * cur_treaties_rec.rei_earthqke_comm_rate
    --                            )
    --                          / 100
    --                         ),
    --                         v_rnd
    --                        );
    --               --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
    --               v_trt_com_pcur :=   NVL (v_trt_net_less_eq_comm_pcur, 0)  + NVL (v_trt_eq_com_pcur, 0);
    --               v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --               v_amt_to_reinsure := (v_amt_to_reinsure - v_trt_si_tcur);
    --/*********tax part**************************/
    ----------calculate reinsurance tax, reinsurance commission tax part
    --               v_ptax_amount := 0;
    --               v_ctax_amount := 0;
    --               v_ptax_tcur := 0;
    --               v_ctax_tcur := 0;
    --               v_ptax_amount := ROUND (NVL (v_prem_tax, 0), v_rnd);
    --               v_ctax_amount :=
    --                             ROUND (NVL (v_pol_com, 0) * v_cession_rate,
    --                                    v_rnd);
    --               v_ptax_tcur := v_ptax_amount * v_exhange_rate;
    --               v_ctax_tcur := v_ctax_amount * v_exhange_rate;

    --/***********************************************************************/
    --               UPDATE gin_policy_rein_risk_details
    --                  SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                      ptotr_risk_si_tcur =  ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
    --                      ptotr_risk_prem_tcur =  ROUND (cur_all_risks_rec.prrd_ri_prem    * v_exhange_rate,  v_bcur_rnd  ),
    --                      ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                      ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                      ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                      ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                      ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                      ptotr_earthqke_comm_rate =  cur_treaties_rec.rei_earthqke_comm_rate,
    --                      ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                      ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                      ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                      ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                      ptotr_acpr_code = v_accprd,
    --                      ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                      ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                      ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                      ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                      ptotr_ggt_tran_no = v_tran_no,
    --                      ptotr_tran_type = v_tran_type,
    --                      ptotr_earthqke_prem = ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_earthqke_comm = ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_prem = ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_comm = ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                  AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                  AND ptotr_prrd_code = v_prrd_code;

    --/************************start participartion *****/
    ----               v_trt_rpremtax_pcur := 0;
    ----               v_trt_premtax_pcur := 0;

    --

    --              Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                               v_prrd_code,
    --                               cur_treaties_rec.ptotr_code,
    --                               v_trt_si_pcur,
    --                               v_trt_si_tcur,
    --                               v_trt_prem_pcur,
    --                               v_trt_prem_tcur,
    --                               v_trt_com_pcur,
    --                               v_trt_com_tcur,
    --                               cur_all_risks_rec.pol_cur_code,
    --                               cur_all_risks_rec.pol_cur_symbol,
    --                               cur_all_risks_rec.ipu_pol_batch_no,
    --                               cur_all_risks_rec.ipu_pol_policy_no,
    --                               cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                v_tran_no,
    --                                v_tran_type,
    --                               cur_all_risks_rec.ipu_code,
    --                               cur_all_risks_rec.ipu_sec_scl_code,
    --                                v_exhange_rate,
    --                                v_rnd,
    --                                v_bcur_rnd
    --                               );
    --            END LOOP;                                            --- mandatory



    --            /* v_ret_limit := NVL(cur_all_risks_rec.prrd_gross_comp_retention,0)-NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            IF v_amt_to_reinsure > NVL (v_ret_limit, 0) THEN
    --               IF SIGN(NVL(v_ret_limit,0)) =-1 THEN
    --                 v_ret_limit :=0;
    --               END IF;
    --                v_gross_ret := NVL (v_ret_limit, 0);
    --            ELSE
    --               v_gross_ret := v_amt_to_reinsure;
    --            END IF;*/
    --/*get subclass gross retention from the setups. Function get_scl_uwyr_g_ret*/
    --         IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --            IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                IF (v_bcur_code = v_trt_cur_code) THEN
    --                    v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code)/ cur_all_risks_rec.pol_cur_rate ,v_rnd);
    --                 ELSE
    --                    v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code) ,v_rnd);
    --               END IF;
    --            ELSE
    --               v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_trt_cur_code, cur_all_risks_rec.ipu_rc_code) *nvl(v_ri_cur_rate,v_trt_cur_rate),v_rnd);
    --            END IF;
    --         ELSE
    --              v_retention_amt := get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_cur_code, cur_all_risks_rec.ipu_rc_code);
    --         END IF;
    --            DBMS_OUTPUT.put_line (   '1 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_prrd_code='
    --                                  || v_prrd_code
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'prrd_gross_comp_retention='
    --                                  || cur_all_risks_rec.prrd_gross_comp_retention
    --                                  || 'v_retention_amt='
    --                                  || v_retention_amt
    --                                  || 'prrd_comp_ret_edited='
    --                                  || cur_all_risks_rec.prrd_comp_ret_edited
    --                                  || 'v_ret_limit='
    --                                  || v_ret_limit
    --                                 );
    --
    --           IF NVL(cur_all_risks_rec.prrd_gross_comp_retention,0) <> NVL(v_retention_amt,0) /*AND NVL(cur_all_risks_rec.prrd_comp_ret_edited,'N') ='Y' cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */THEN
    --           v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --            END IF;
    --       --v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --            IF v_amt_to_reinsure < v_retention_amt THEN
    --                v_ret_limit := NVL(v_amt_to_reinsure,0);---NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            ELSE
    --                v_ret_limit := v_retention_amt;-- -NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            END IF;
    --DBMS_OUTPUT.put_line (   '1 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_ipu_reinsure_amt='
    --                                  || v_ipu_reinsure_amt
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'prrd_gross_comp_retention='
    --                                  || cur_all_risks_rec.prrd_gross_comp_retention
    --                                  || 'v_retention_amt='
    --                                  || v_retention_amt
    --                                  || 'prrd_comp_ret_edited='
    --                                  || cur_all_risks_rec.prrd_comp_ret_edited
    --                                  || 'v_ret_limit='
    --                                  || v_ret_limit
    --                                 );
    --           IF v_amt_to_reinsure > NVL (v_ret_limit, 0) THEN
    --               IF SIGN(NVL(v_ret_limit,0)) =-1 THEN
    --                 v_ret_limit :=0;
    --               END IF;
    --                v_gross_ret := NVL (v_ret_limit, 0);
    --            ELSE
    --               v_gross_ret := v_amt_to_reinsure;
    --            END IF;
    --
    --             IF NVL(v_amt_to_reinsure,0) > NVL(v_retention_amt,0) THEN
    --               v_amt_to_reinsure := NVL(v_amt_to_reinsure,0)-NVL(v_retention_amt,0);
    --               --     v_amt_to_reinsure := NVL(v_tot_risk_si,0)-NVL(v_retention_amt,0);
    --             ELSE
    --                v_amt_to_reinsure := 0;
    --            END IF;

    --          v_special_ret_limit := v_gross_ret;
    --            v_special_ret_diff := 0;

    --            IF NVL (cur_all_risks_rec.ipu_override_ri_retention, 0) != 0
    --            THEN
    --               v_special_ret_limit :=   NVL (cur_all_risks_rec.ipu_override_ri_retention, 0);

    --               IF v_special_ret_limit > v_amt_to_reinsure
    --               THEN
    --                  v_special_ret_limit := v_amt_to_reinsure;
    --               END IF;

    --               v_special_ret_diff := v_special_ret_limit - v_gross_ret;
    --            END IF;
    ----          v_special_ret_limit :=
    ----                      NVL (v_amt_to_reinsure, 0);
    ----            v_amt_to_reinsure :=
    ----                      NVL (v_amt_to_reinsure, 0)
    ----                      - NVL (v_special_ret_limit, 0);
    ----       RAISE_ERROR(v_special_ret_limit||';'||v_amt_to_reinsure);
    ----           IF v_rsk_excl = 'Y'
    ----           THEN
    ----               v_facnorml_excess    :=v_amt_to_reinsure;
    ----               v_facoblig_limit       :=v_amt_to_reinsure;
    ----               v_fac_amt :=  v_amt_to_reinsure;
    ----               v_amt_to_reinsure :=0;
    ----           END IF;
    --
    --            v_net_ret := 0;
    --            v_gross_ret := NVL (v_gross_ret, 0);
    --            DBMS_OUTPUT.put_line (   '2 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_prrd_code='
    --                                  || v_prrd_code
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                 );
    --            -- process quota share
    --            v_pool_amt := 0;
    ----raise_error(v_gross_ret);
    ----RAISE_ERROR('IPU_CODE='||cur_all_risks_rec.ipu_code||'v_prrd_code='||v_prrd_code);
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code, 1003, v_prrd_code   )
    --            LOOP
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    ----QUOTA SHARE
    ----RAISE_eRROR('ERERE');
    --               -- Its A Quota share Type treaty
    --        -- calculate treaty sum insured in policy currency
    --         v_tot_risk_si := v_ipu_reinsure_amt;
    --
    --         v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --         v_prev_net_retention :=0;
    --               DBMS_OUTPUT.put_line
    --                                (   'startfrrom='
    --                                 || (  NVL
    --                                          (cur_treaties_rec.rei_si_start_from,
    --                                           0
    --                                          )
    --                                     * v_exhange_rate
    --                                    )
    --                                 || 'vgrossret='
    --                                 || NVL (v_gross_ret, 0)
    --                                );
    ---- raise_error(v_ipu_reinsure_amt||';'||v_retention_amt);
    --               BEGIN
    --                  SELECT ctl_si_start_from, ctl_limit_amt
    --                    INTO v_ctl_si_start_from, v_ctl_limit_amt
    --                    FROM gin_class_treaty_limits
    --                   WHERE ctl_code = cur_treaties_rec.ptotr_ctl_code;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error fetching class treaty quota share limits....');
    --               END;
    --
    --
    --             IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --                IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                    IF (v_bcur_code = v_trt_cur_code) THEN
    --                       v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   )/ cur_all_risks_rec.pol_cur_rate;
    --                        v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit)/ cur_all_risks_rec.pol_cur_rate;
    ----                        RAISE_ERROR('v_ctl_limit_amt='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
    --                     ELSE
    --                        v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   );
    --                       v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);
    ----                       RAISE_ERROR('v_ctl_limit_amt111='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
    --                   END IF;
    --                ELSE
    --
    --                    v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   )*nvl(v_ri_cur_rate,v_trt_cur_rate);
    --                   v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit)*nvl(v_ri_cur_rate,v_trt_cur_rate);
    ----                   RAISE_ERROR('v_ctl_limit_amt22='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si||'REI LIMIT='||cur_treaties_rec.rei_limit||'v_ri_cur_rate='||v_ri_cur_rate||'v_trt_cur_rate='||v_trt_cur_rate);
    --                END IF;
    --             ELSE
    --                 v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   );
    --                   v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);
    --             END IF;
    --
    --               --IF (NVL(cur_treaties_rec.REI_SI_START_FROM,0) * v_exhange_rate) < NVL(v_gross_ret,0) THEN
    ----         RAISE_ERROR(v_exhange_rate||';'||v_ctl_si_start_from||';'||v_gross_ret);
    --               IF (NVL (v_ctl_si_start_from, 0) * v_exhange_rate) < NVL (v_gross_ret, 0) THEN
    --                    v_gross_ret := NVL (v_gross_ret, 0) - NVL (v_pool_amt, 0);
    --                  IF NVL (v_gross_ret, 0) >  (NVL (v_ctl_limit_amt, 0) * v_exhange_rate ) THEN
    --                     v_trt_si_pcur := ROUND (  NVL (v_ctl_limit_amt, 0) * v_exhange_rate * (cur_treaties_rec.ptotr_rate / 100));
    --                     v_net_ret :=  NVL (v_net_ret, 0) + (  (  NVL (v_ctl_limit_amt, 0) * NVL (v_exhange_rate, 0))  - NVL (v_trt_si_pcur, 0) );
    --                      RAISE_ERROR('v_trt_si_pcur222='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --                  ELSE
    --                     v_trt_si_pcur := ROUND (  NVL (v_gross_ret, 0)  * (NVL (cur_treaties_rec.ptotr_rate, 0) / 100) );
    --                     v_net_ret :=  NVL (v_net_ret, 0)  + (NVL (v_gross_ret, 0) - NVL (v_trt_si_pcur, 0));
    ----                       RAISE_ERROR('v_trt_si_pcur333='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    ----raise_error (   'v_gross_ret=' || v_gross_ret  || 'v_trt_si_pcur='  || v_trt_si_pcur || 'v_net_ret=' || v_net_ret  );
    --                  END IF;
    --                  v_gross_ret :=v_net_ret;
    ----RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_trt_si_pcur||';'||v_tot_si||';'||v_exhange_rate);
    --                  DBMS_OUTPUT.put_line (   ' v_ipu_code='
    --                                        || cur_all_risks_rec.ipu_code
    --                                        || ' v_type='
    --                                        || 1003
    --                                        || ' v_prrd='
    --                                        || v_prrd_code
    --                                       );
    --                  DBMS_OUTPUT.put_line ('    v_trt_si_pcur=' || v_trt_si_pcur);
    --                  DBMS_OUTPUT.put_line ('    v_net_ret=' || v_net_ret);
    --                  v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --                  -- Culculate treaty premium
    ----                  RAISE_ERROR('v_trt_si_pcur='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --                  v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;
    --
    --
    --                   IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0 THEN
    --                       v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                       v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                       v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                       v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --                   ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                       v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                       v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                       v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                       v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                       v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                       v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --                   END if ;
    --
    --                  -- calculate QUOTA commission
    --                  v_trt_net_less_eq_comm_pcur :=
    --                     ROUND ((  (  v_trt_net_less_eq_prem_pcur
    --                                * cur_treaties_rec.rei_comm_rate
    --                               )
    --                             / 100
    --                            ),
    --                            v_rnd
    --                           );
    --                  v_trt_eq_com_pcur :=
    --                     ROUND ((  (  v_trt_eq_prem_pcur
    --                                * cur_treaties_rec.rei_earthqke_comm_rate
    --                               )
    --                             / 100
    --                            ),
    --                            v_rnd
    --                           );
    --                  v_trt_com_pcur :=
    --                       NVL (v_trt_net_less_eq_comm_pcur, 0)
    --                     + NVL (v_trt_eq_com_pcur, 0);
    --                  v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --                  v_pool_amt :=
    --                       NVL (v_pool_amt, 0)
    --                     + (  NVL (v_gross_ret, 0)
    --                        - (NVL (v_net_ret, 0) + NVL (v_trt_si_pcur, 0))
    --                       );
    --            /*********tax part**************************/
    ----------calculate reinsurance tax, reinsurance commission tax part
    --                  v_ptax_tcur := 0;
    --                  v_ctax_tcur := 0;
    --                  v_ptax_amount :=
    --                      ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,
    --                             v_rnd);
    --                  v_ctax_amount :=
    --                       ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,
    --                              v_rnd);
    --                  v_ptax_tcur :=
    --                            ROUND (v_ptax_amount * v_exhange_rate, v_bcur_rnd);
    --                  v_ctax_tcur :=
    --                            ROUND (v_ctax_amount * v_exhange_rate, v_bcur_rnd);

    --/***********************************************************************/
    ----                RAISE_ERROR('v_cession_rate='||v_cession_rate);
    --                  UPDATE gin_policy_rein_risk_details
    --                     SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                         ptotr_risk_si_tcur =
    --                                         ROUND (ptotr_trt_si_tcur, v_bcur_rnd),
    --                         ptotr_risk_prem_tcur =
    --                                       ROUND (ptotr_trt_prem_tcur, v_bcur_rnd),
    --                         ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                         ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                         ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                         ptotr_trt_prem_tcur =
    --                                           ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                         ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                         ptotr_earthqke_comm_rate =
    --                                       cur_treaties_rec.rei_earthqke_comm_rate,
    --                         ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                         ptotr_trt_comm_tcur =
    --                                            ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                         ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                         ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                         ptotr_acpr_code = v_accprd,
    --                         ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                         ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                         ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                         ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                         ptotr_ggt_tran_no = v_tran_no,
    --                         ptotr_tran_type = v_tran_type,
    --                         ptotr_earthqke_prem =
    --                                        ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                         ptotr_earthqke_comm =
    --                                         ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                         ptotr_net_less_eq_prem =
    --                               ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                         ptotr_net_less_eq_comm =
    --                               ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                   WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                     AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                     AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                     AND ptotr_prrd_code = v_prrd_code;

    --            /************************start participartion *****/
    ----------------------insert participarticipation for each risk
    ----                  v_trt_rpremtax_pcur := 0;
    ----                  v_trt_premtax_pcur := 0;

    --

    --                  Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                                   v_prrd_code,
    --                                   cur_treaties_rec.ptotr_code,
    --                                   v_trt_si_pcur,
    --                                   v_trt_si_tcur,
    --                                   v_trt_prem_pcur,
    --                                   v_trt_prem_tcur,
    --                                   v_trt_com_pcur,
    --                                   v_trt_com_tcur,
    --                                   cur_all_risks_rec.pol_cur_code,
    --                                   cur_all_risks_rec.pol_cur_symbol,
    --                                   cur_all_risks_rec.ipu_pol_batch_no,
    --                                   cur_all_risks_rec.ipu_pol_policy_no,
    --                                   cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                    v_tran_no,
    --                                    v_tran_type,
    --                                   cur_all_risks_rec.ipu_code,
    --                                   cur_all_risks_rec.ipu_sec_scl_code,
    --                                    v_exhange_rate,
    --                                    v_rnd,
    --                                    v_bcur_rnd
    --                                   );
    --               END IF;
    --            END LOOP;                                            --qouta share

    ----end quota******************************************************************************************
    --            DBMS_OUTPUT.put_line (   'be sup v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                 );

    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code,
    --                                                  1004,
    --                                                  v_prrd_code
    --                                                 )
    --            LOOP
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    --               v_trt_rprem_tax := 0;
    --               v_trt_prem_tax := 0;
    --               v_trt_com_pcur := 0;
    --
    --                -- Its A Surplus Type treaty
    --               -- calculate treaty sum insured in policy currency
    --               IF cur_treaties_rec.ptotr_rate * v_ret_limit >
    --                                                            v_amt_to_reinsure
    --               THEN
    --                  v_trt_si_pcur := v_amt_to_reinsure;
    --               ELSE
    --                  v_trt_si_pcur := cur_treaties_rec.ptotr_rate * v_ret_limit;
    --               END IF;

    --               -- Its A Surplus Type treaty
    --               -- calculate treaty sum insured in policy currency
    ----               raise_error(v_gross_ret||';'||v_prev_net_retention);
    ----                  IF SIGN( v_gross_ret-NVL(v_prev_net_retention,0)) = 1 THEN
    ----                    v_gross_ret := v_gross_ret-NVL(v_prev_net_retention,0);
    ----                  END IF;
    --       DBMS_OUTPUT.put_line (   ' v_gross_ret='
    --                                        || v_gross_ret
    --                                        || ' v_prev_net_retention='
    --                                        || v_prev_net_retention);
    --/*Get treaty limit from the function gettreatylimit*/
    --                IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --                    IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                        v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code)/cur_all_risks_rec.pol_cur_rate-NVL(v_retention_amt,0);
    --                    ELSE
    --                       v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_trt_cur_code, cur_all_risks_rec.ipu_rc_code)*v_trt_cur_rate-NVL(v_retention_amt,0);
    --                    END IF;
    --                ELSE
    --                    v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_cur_code, cur_all_risks_rec.ipu_rc_code)-NVL(v_retention_amt,0);
    --                END IF;
    --
    --               IF (NVL(v_treat_limit_amt,0) <> NVL(v_retention_amt,0) AND NVL(cur_all_risks_rec.prrd_comp_ret_edited,'N') ='Y') OR (NVL(cur_treaties_rec.ptotr_rate,0)  <> NVL(cur_treaties_rec.ptotr_allowed_rate,0))/* cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */THEN
    --                  v_treat_limit_amt :=  cur_treaties_rec.ptotr_rate * NVL(cur_all_risks_rec.prrd_gross_comp_retention,0);---NVL(v_retention_amt,0);
    --                END IF;
    --              DBMS_OUTPUT.put_line (   ' v_amt_to_reinsure='
    --                                        || v_amt_to_reinsure
    --                                        || ' v_treat_limit_amt='
    --                                        || v_treat_limit_amt
    --                                        || ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur);
    --
    --              IF v_trt_si_pcur > v_treat_limit_amt THEN
    --                    v_trt_si_pcur := v_treat_limit_amt;
    --              ELSif v_amt_to_reinsure <= v_trt_si_pcur AND v_amt_to_reinsure <> 0 THEN
    --                    v_trt_si_pcur := v_amt_to_reinsure;
    ----              ELSE
    ----                v_trt_si_pcur :=0;
    --              END IF;
    --              DBMS_OUTPUT.put_line (   ' v_amt_to_reinsure='
    --                                        || v_amt_to_reinsure
    --                                        || ' v_treat_limit_amt='
    --                                        || v_treat_limit_amt
    --                                        || ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur);

    --              v_trt_si_pcur :=abs(v_trt_si_pcur);
    --              v_tot_risk_si :=abs(v_tot_risk_si);
    --              v_trt_si_tcur := 0;
    --               v_amt_to_reinsure := v_amt_to_reinsure - v_trt_si_pcur;
    --               v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --        -- Culculate treaty premium
    --               v_cession_rate := v_trt_si_pcur/ v_tot_risk_si * 100;
    --       DBMS_OUTPUT.put_line (   ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur
    --                                        || ' v_tot_risk_si='
    --                                        || v_tot_risk_si);
    --       DBMS_OUTPUT.PUT_LINE('v_ri_prem_formular='||v_ri_prem_formular);
    --                IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN')) OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0 THEN
    --                   v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --     DBMS_OUTPUT.put_line (   ' v_cession_rate='
    --                                        || v_cession_rate
    --                                        || ' ipu_GP='
    --                                        || cur_all_risks_rec.ipu_GP
    --                                        || 'PTOTR_PREV_CESSION_RAT='
    --                                        || cur_treaties_rec.PTOTR_PREV_CESSION_RATe
    --                                        || 'PRRD_RI_PREM='
    --                                        || cur_all_risks_rec.PRRD_RI_PREM
    --                                        || 'prrd_ri_net_less_eq_prem='
    --                                        || cur_all_risks_rec.prrd_ri_net_less_eq_prem
    --                                       );
    --                   v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSE
    --                RAISE_ERROR('Reinsurance computation method not setup in parameters. RI_PREM_FORMULAR');
    --               END if ;
    --
    --                 -- calculate QUOTA commission
    --               v_trt_net_less_eq_comm_pcur :=  ROUND ((  (  v_trt_net_less_eq_prem_pcur   * cur_treaties_rec.rei_comm_rate   )   / 100  ),   v_rnd     );
    --               v_trt_eq_com_pcur :=  ROUND ((  (  v_trt_eq_prem_pcur   * cur_treaties_rec.rei_earthqke_comm_rate    )  / 100   ),  v_rnd );
    --               --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
    --               v_trt_com_pcur :=   NVL (v_trt_net_less_eq_comm_pcur, 0)  + NVL (v_trt_eq_com_pcur, 0);
    --               v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --        --------calculate reinsurance tax, reinsurance commission tax part
    --               v_ptax_tcur := 0;
    --               v_ctax_tcur := 0;
    --               v_ptax_amount := ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,   v_rnd);
    --               v_ctax_amount := ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,  v_rnd);
    --               v_ptax_tcur := v_ptax_amount * v_exhange_rate;
    --               v_ctax_tcur := v_ctax_amount * v_exhange_rate;
    --               v_cession_rate := ROUND (v_trt_si_pcur/ v_tot_risk_si * 100,4);
    --           UPDATE gin_policy_rein_risk_details
    --                  SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                      ptotr_risk_si_tcur = ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
    --                      ptotr_risk_prem_tcur = ROUND (cur_all_risks_rec.prrd_ri_prem, v_bcur_rnd),
    --                      ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                      ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                      ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                      ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                      ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                      ptotr_earthqke_comm_rate = cur_treaties_rec.rei_earthqke_comm_rate,
    --                      ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                      ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                      ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                      ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                      ptotr_acpr_code = v_accprd,
    --                      ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                      ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                      ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                      ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                      ptotr_ggt_tran_no = v_tran_no,
    --                      ptotr_tran_type = v_tran_type,
    --                      ptotr_earthqke_prem =  ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_earthqke_comm =  ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_prem = ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_comm = ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                  AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                  AND ptotr_prrd_code = v_prrd_code;

    --        /************************start participartion *****/
    ----------------------insert participarticipation for each risk
    ----               v_trt_rpremtax_pcur := 0;
    ----               v_trt_premtax_pcur := 0;

    --              Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                               v_prrd_code,
    --                               cur_treaties_rec.ptotr_code,
    --                               v_trt_si_pcur,
    --                               v_trt_si_tcur,
    --                               v_trt_prem_pcur,
    --                               v_trt_prem_tcur,
    --                               v_trt_com_pcur,
    --                               v_trt_com_tcur,
    --                               cur_all_risks_rec.pol_cur_code,
    --                               cur_all_risks_rec.pol_cur_symbol,
    --                               cur_all_risks_rec.ipu_pol_batch_no,
    --                               cur_all_risks_rec.ipu_pol_policy_no,
    --                               cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                v_tran_no,
    --                                v_tran_type,
    --                               cur_all_risks_rec.ipu_code,
    --                               cur_all_risks_rec.ipu_sec_scl_code,
    --                                v_exhange_rate,
    --                                v_rnd,
    --                                v_bcur_rnd
    --                               );
    --            END LOOP;                                                --surplus
    ----raise_error('here=='||v_net_ret||';'||v_special_ret_limit||';'||v_special_ret_diff);
    --            IF NVL (v_net_ret, 0) = 0
    --            THEN
    --               v_net_ret := v_special_ret_limit;
    --            ELSE
    --               v_net_ret := NVL (v_net_ret, 0) + v_special_ret_diff;
    --            END IF;

    --            DBMS_OUTPUT.put_line (   '11v_net_ret='
    --                                  || v_net_ret
    --                                  || 'v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'cur_all_risks_rec.ipu_reinsure_amt='
    --                                  || cur_all_risks_rec.ipu_reinsure_amt
    --                                 );
    ----raise_error(v_ipu_reinsure_amt||';'||get_risk_prev_si(cur_all_risks_rec.prrd_code));
    --v_ipu_reinsure_amt := ABS(NVL(v_ipu_reinsure_amt,0) -NVL(cur_all_risks_rec.prrd_prev_ri_si,0));

    ----CHECK THIS !!!!!!!!!!!!!!!!!!!

    --            IF NVL(v_gross_ret,0) = 0 THEN
    ----               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_risk_si,0) * 100,   4   );
    --               v_ret_rate := ROUND (  NVL (cur_all_risks_rec.prrd_gross_comp_retention,0)  / NVL(v_tot_risk_si,0) * 100,   4   );
    -- --               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_si,0) * 100,   4   );
    ----                IF v_ret_rate > 100 THEN
    ----                    v_ret_rate :=100;
    ----                    v_net_ret := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
    ----                END IF;
    ----                v_gross_ret_is := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
    --            ELSE
    --                v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_risk_si,0)  * 100,   4   );
    ----                 v_ret_rate := ROUND ( (v_gross_ret+NVL(v_prev_net_retention,0)) / NVL(v_tot_risk_si,0)  * 100,   4   );
    -- --               v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_si,0)  * 100,   4   );
    --            END IF;

    ----RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_ipu_reinsure_amt||';'||v_ret_rate||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_tot_si||';'||v_tot_risk_si||';'||cur_all_risks_rec.prrd_prev_net_retention);
    --              v_gross_ret_is := NVL (v_gross_ret, cur_all_risks_rec.prrd_gross_comp_retention);
    --              SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   )  INTO v_comp_net_rate FROM DUAL;
    --
    --         --     SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ) * NVL (cur_all_risks_rec.prrd_ri_prem, 0) / 100 INTO v_comp_net_prem FROM DUAL;

    --            IF NVL(v_gross_ret_is,0) =0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0  */AND NVL(v_ret_rate,0) <> 0 THEN
    --       --         v_comp_net_prem :=(v_ret_rate*NVL(cur_all_risks_rec.prrd_cumm_ri_prem,cur_all_risks_rec.prrd_ri_prem)/100)-NVL(cur_all_risks_rec.prrd_net_prev_prem,0);
    ----                v_net_ret :=0;
    --                    v_gross_ret_is :=v_net_ret;
    --            END IF;
    --            IF NVL(cur_all_risks_rec.prrd_ri_prem,0) <> 0 THEN
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(cur_all_risks_rec.IPU_FP,0) !=0  THEN
    --                   v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    --               END if ;
    --            ELSE
    --                v_comp_net_prem :=0;
    --            END IF;
    --DBMS_OUTPUT.put_line (   'v_comp_net_prem='
    --                                  || v_comp_net_prem);
    --          UPDATE gin_policy_risk_ri_dtls
    --               SET prrd_comp_retention = v_net_ret,
    --                   prrd_gross_comp_retention = v_gross_ret_is,--NVL (v_gross_ret, prrd_gross_comp_retention),
    --                   prrd_com_retention_rate =  v_ret_rate,
    --                   --ROUND (  NVL (v_gross_ret, prrd_gross_comp_retention)  / NVL (v_ipu_reinsure_amt/*cur_all_risks_rec.ipu_reinsure_amt*/, 0)  * 100,   4   ),
    --                   prrd_comp_net_rate = nvl(v_ret_rate,v_comp_net_rate),--ROUND (  v_net_ret  / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ),
    --                   prrd_net_prem =  v_comp_net_prem--ROUND (  (  v_net_ret   / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100   ))  * NVL (prrd_ri_prem, 0) / 100
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_code = v_prrd_code
    --               AND prrd_tran_no = v_tran_no;

    --            DBMS_OUTPUT.put_line (   'v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'avail_fulc_bal '
    --                                  || v_avail_fulc_bal
    --                                  || '  facoblig_user_excess '
    --                                  || cur_all_risks_rec.prrd_facoblig_user_excess
    --                                 );

    --            BEGIN
    --               SELECT SUM (NVL (fc_amount, 0))
    --                 INTO v_total_facoblig_ceded
    --                 FROM gin_facre_cessions
    --                WHERE fc_prrd_code = cur_all_risks_rec.prrd_code
    --                  AND fc_facre_type = 'O';
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error getting fac obliq cession..');
    --            END;

    --            IF NVL (cur_all_risks_rec.prrd_facoblig_alloc_chk, 'N') = 'Y'
    --            THEN
    --               IF NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0) > 0
    --               THEN
    --                  v_facoblig_limit := NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0);
    --               ELSE
    --                  v_facoblig_limit :=  NVL (cur_all_risks_rec.prrd_facoblig_limit, 0);
    --               END IF;
    --            ELSE
    --               v_facoblig_limit := 0;
    ----               BEGIN
    ----                   IF v_rsk_excl = 'Y' THEN
    ----                       v_facoblig_limit :=v_fac_amt;
    ----                       v_avail_fulc_bal :=v_fac_amt;
    ----                   END IF;
    ----               END;
    --            END IF;
    --DBMS_OUTPUT.put_line ('v_amt_to_reinsure='||v_amt_to_reinsure||';'||v_avail_fulc_bal||';'||v_facoblig_limit||';'||v_total_facoblig_ceded);
    --            IF    v_amt_to_reinsure > 0
    --               OR (    NVL (v_avail_fulc_bal, 0) > 0
    --                   and NVL (v_facoblig_limit, 0) > 0
    --                  )
    --             THEN
    --               IF     NVL (v_amt_to_reinsure, 0) > 0
    --                  AND NVL (v_facoblig_limit, 0) > 0
    --                  AND NVL (v_total_facoblig_ceded, 0) = 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('XXXXXXXXXXXXXXXXXXX');

    --                  IF v_amt_to_reinsure > v_facoblig_limit
    --                  THEN
    --                     -- raise_error('here');
    --                     v_facoblig_excess := v_facoblig_limit;
    --                     v_facnorml_excess :=
    --                               v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
    --                  ELSE
    --                     v_facoblig_excess := v_amt_to_reinsure;
    --                     v_facnorml_excess := 0;
    --                  END IF;
    --               ELSIF     NVL (v_amt_to_reinsure, 0) > 0
    --                     AND NVL (v_facoblig_limit, 0) > 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('YYYYYYYYYYYYYYYYYYY');
    --                  v_facoblig_excess :=
    --                       NVL (v_facoblig_limit, 0)
    --                     - NVL (v_total_facoblig_ceded, 0);

    --                  IF v_amt_to_reinsure > v_facoblig_excess
    --                  THEN
    --                     -- raise_error('here');
    --                     v_facoblig_excess := v_facoblig_excess;
    --                     v_facnorml_excess :=
    --                               v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
    --                  ELSE
    --                     v_facoblig_excess := v_amt_to_reinsure;
    --                     v_facnorml_excess := 0;
    --                  END IF;
    --               ELSE
    --                  DBMS_OUTPUT.put_line ('ZZZZZZZZZZZZZZZZZZZ');
    --                  v_facoblig_excess :=
    --                           v_facoblig_limit - NVL (v_total_facoblig_ceded, 0);
    --                  v_facnorml_excess :=
    --                       NVL (v_amt_to_reinsure, 0)
    --                       - NVL (v_facoblig_excess, 0);
    --               END IF;
    --
    ----                    v_avail_fulc_bal :=NVL(v_facnorml_excess,0)-NVL(cur_all_risks_rec.prrd_prev_facre_si,0);
    --
    ----                   IF v_rsk_excl = 'Y' THEN
    ----                        v_avail_fulc_bal :=0;
    ----                   END IF;
    ------
    ----                 BEGIN
    ----                    SELECT SUM(DECODE(SIGN(FC_PREM_AMT),1,ABS(NVL(fc_amount,0)),-ABS(NVL(fc_amount,0))))
    ----                      INTO v_prev_fc_amnt
    ----                      FROM gin_facre_cessions,
    ----                      gin_insured_property_unds
    ----                     WHERE FC_IPU_CODE=IPU_CODE
    ----                     and IPU_ID = cur_all_risks_rec.ipu_id
    ----                     AND IPU_UW_YR=cur_all_risks_rec.IPU_UW_YR ;
    ----                 EXCEPTION
    ----                    WHEN OTHERS
    ----                    THEN
    ----                       v_prev_fc_amnt := 0;
    ----                 END;
    --
    ----            IF NVL(v_tot_risk_si,0) > NVL(v_trans_sign*v_trt_si_pcur,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0) THEN
    ----                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trt_si_pcur,0)+NVL(v_net_ret,0),0));
    ----            ELSE
    ----             v_avail_fulc_bal :=NVL(v_prev_fc_amnt,0);
    ----            END IF;
    --DBMS_OUTPUT.put_line (   'v_facnorml_excess='
    --                                  || v_facnorml_excess
    --                                  || 'v_ipu_reinsure_amt='
    --                                  || v_ipu_reinsure_amt
    --                                  || 'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal);
    --                v_excess_pct := ROUND (  (  NVL (v_facnorml_excess, 0) + NVL (v_avail_fulc_bal, 0)) / NVL(v_tot_risk_si,0) * 100, 4 );
    --                IF v_gross_ret = 0 THEN
    --                   v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_risk_si,0) * 100,   4   );
    --                ELSE
    --                    v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_risk_si,0)  * 100,   4   );
    --                END IF;
    --              v_gross_ret_is := NVL (v_gross_ret, cur_all_risks_rec.prrd_gross_comp_retention);
    --               SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ) INTO v_comp_net_rate FROM DUAL;
    --
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))   OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0 THEN
    --                   v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    --               END if ;
    --       DBMS_OUTPUT.put_line (   'v_comp_net_prem='
    --                                  || v_comp_net_prem
    --                                  || 'v_gross_ret_is='
    --                                  || v_gross_ret_is
    --                                  || 'v_ret_rate='
    --                                  || v_ret_rate
    ----                                  || 'v_prev_fc_amnt='
    ----                                  || v_prev_fc_amnt
    --                                  || 'v_excess_pct='
    --                                  || v_excess_pct
    --                                  || 'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal);
    --     DBMS_OUTPUT.put_line (   'v_tot_risk_si='
    --                                  || v_tot_risk_si
    --                                  || 'v_trt_si_pcur='
    --                                  || v_trt_si_pcur
    --                                  || 'prrd_prev_ri_si='
    --                                  || cur_all_risks_rec.prrd_prev_ri_si
    --                                  || 'v_net_ret='
    --                                  || v_net_ret
    ----                                  || 'v_prev_fc_amnt='
    ----                                  || v_prev_fc_amnt
    --                                  );
    ----             IF NVL(v_gross_ret_is,0) =0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0 */ AND NVL(v_ret_rate,0) <> 0 THEN
    ----                 v_excess_pct := ROUND(NVL(v_prev_fc_amnt,0)/NVL(v_tot_risk_si,0)*100,4);
    ----                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trans_sign*v_trt_si_pcur,0)+abs(NVL(cur_all_risks_rec.prrd_prev_ri_si,0))+NVL(v_net_ret,0),0)- NVL(v_prev_fc_amnt,0));
    ----                 v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0)+NVL(v_trt_si_pcur,0),0));
    ----                v_net_ret := 0;
    ----                  v_excess_pct :=ROUND (  ( NVL (v_avail_fulc_bal, 0)  )   / NVL (v_tot_risk_si, 0)* 100,4 );
    ----           END IF;
    -- DBMS_OUTPUT.put_line (  'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal|| 'v_facnorml_excess='
    --                                  || v_facnorml_excess);
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = v_facnorml_excess + NVL (v_avail_fulc_bal, 0),
    --                      prrd_facoblig_excess = v_facoblig_excess,
    --                      --PRRD_FACOBLIG_USER_EXCESS =v_facoblig_excess,
    --                      prrd_excess_pct = v_excess_pct,
    --                      prrd_comp_retention = v_net_ret,
    --                      prrd_gross_comp_retention = v_gross_ret_is,--v_gross_ret,
    --                      prrd_com_retention_rate = v_ret_rate,--ROUND (  NVL (prrd_gross_comp_retention, 0) / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))  * 100,  4  ),
    --                      prrd_comp_net_rate = v_ret_rate,-- ROUND (  v_net_ret  / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))   * 100,    4  ),
    --                      prrd_net_prem = v_comp_net_prem--  ( (v_net_ret /DECODE( (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0)) ,0,1, (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))) * 100  )   * NVL (prrd_ri_prem, 0) / 100  )                                                 --,
    --                --PRRD_FACRE_AMOUNT =v_facoblig_excess
    --               WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND prrd_code = v_prrd_code
    --                  AND prrd_tran_no = v_tran_no;

    --               DELETE gin_facre_cessions
    --                     WHERE fc_ipu_code = cur_all_risks_rec.ipu_code
    --                       AND fc_facre_type = 'O';
    --
    --            END IF;
    --            fix_rounding_errors(cur_all_risks_rec.prrd_codE);
    ----            -- IF SI TO FACRE IS ZERO AND PREMIUM IS NOT ZERO, THEN POPULATE THE PREVIOUS FACRE ACCOUNTS
    ------            raise_error(v_avail_fulc_bal||'v_excess_pct='||v_excess_pct);
    ----/*populate facre automatically where fac SI is zero and rate <> zero*/
    ----            IF NVL (v_avail_fulc_bal, 0) =0  THEN
    ----                FOR cur_prev_facre_rec IN cur_prev_facre(cur_all_risks_rec.ipu_prev_ipu_code) LOOP
    ----                    IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','CN')) THEN
    ----                       v_fc_prem := round(cur_prev_facre_rec.fc_rate*NVL (cur_all_risks_rec.prrd_ri_prem, 0)/100, v_rnd );
    ----                    ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    ----                       v_fc_prem:=ROUND((cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)-(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)+(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    ----                    END if ;
    ----
    ------                RAISE_ERROR(cur_prev_facre_rec.FC_RATE||';'||cur_all_risks_rec.ipu_prev_ipu_code);
    ----                     INSERT INTO gin_facre_cessions
    ----                        (fc_code, fc_agnt_agent_code, fc_amount,
    ----                         fc_wef, fc_ipu_code, fc_agent_sht_desc,
    ----                         fc_rate, fc_comm_rate, fc_comm_amt, fc_don_by,
    ----                         fc_dc_no, fc_prem_amt, fc_pol_batch_no, fc_uwyr,
    ----                         fc_ggt_tran_no, fc_tran_type, fc_scl_code, fc_amt_or_rate, fc_prrd_code,
    ----                         fc_auth_dt, fc_prev_si, fc_prev_rate,  fc_refund_prem, fc_refund_comm, fc_prev_amount,
    ----                         fc_wet, fc_prev_comm_rate, fc_prev_fc_code,  fc_earthqke_prem, fc_earthqke_comm_rate,
    ----                         fc_earthqke_comm, fc_net_less_eq_comm,
    ----                         fc_net_less_eq_prem, fc_facre_type, fc_accepted_date, fc_accepted, fc_prem_diff_amt,
    ----                         fc_vat_amt, fc_vat_rate, fc_mngmnt_type, fc_mngmnt_value, fc_rein_tax_type,
    ----                         fc_rein_tax_value, fc_mngmnt_amt,fc_rein_tax_amt, fc_override_prem,
    ----                         fc_override_type, fc_override_value, fc_remark, fc_whtx_rate, fc_whtx_amt
    ----                        )
    ----                 VALUES (gin_fc_code_seq.NEXTVAL, cur_prev_facre_rec.fc_agnt_agent_code, 0,
    ----                         cur_all_risks_rec.ipu_wef, cur_all_risks_rec.ipu_code, cur_prev_facre_rec.fc_agent_sht_desc,
    ----                         cur_prev_facre_rec.fc_rate, cur_prev_facre_rec.fc_comm_rate, round(cur_prev_facre_rec.fc_comm_rate*v_fc_prem/100,v_rnd), v_user,
    ----                         NULL, v_fc_prem, v_batch_no, cur_all_risks_rec.pol_uw_year,
    ----                         cur_all_risks_rec.prrd_tran_no, cur_all_risks_rec.pol_policy_status,
    ----                         cur_all_risks_rec.ipu_sec_scl_code, cur_prev_facre_rec.fc_amt_or_rate, cur_all_risks_rec.prrd_code,
    ----                         NULL, NULL, cur_prev_facre_rec.fc_rate,
    ----                         0, 0, cur_prev_facre_rec.fc_prem_amt,
    ----                         cur_all_risks_rec.ipu_wet, cur_prev_facre_rec.fc_comm_amt, cur_prev_facre_rec.fc_code,
    ----                         0, 0,
    ----                         0, 0,
    ----                         0, cur_prev_facre_rec.fc_facre_type,
    ----                         cur_all_risks_rec.ipu_wef, 'Y', 0,
    ----                         0, 0, null,
    ----                         0, null,
    ----                         0, 0,
    ----                         0, 0,
    ----                         null, 0,
    ----                         'Auto facre cedding as si is zero', 0, 0
    ----                        );
    ----                  END LOOP;
    ----             END IF;
    --         END IF;
    --      END LOOP;
    --
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         --DBMS_OUTPUT.PUT_LINE('Hata miti ni dawa...You are a genius...you just did a Zero devide..',no_acknowledge);
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0.Continue if covered by XOL...'
    --            );
    --   END;

    --PROCEDURE reinsure_risks (---commented out on 5th Nov 2018 to sort out credit raised on the same inception date as the debit
    --      v_batch_no           IN   NUMBER,
    --      v_cur_code           IN   NUMBER,
    --      v_base_cur_code      IN   NUMBER,
    --      v_pol_cur_sht_desc   IN   VARCHAR2,
    --      v_tran_no            IN   NUMBER,
    --      v_tran_type          IN   VARCHAR2,
    --      v_ipucode IN NUMBER
    --   )
    --   IS
    --      v_d                           NUMBER;
    --      v_exhange_rate                NUMBER          := 1;
    --      --v_tot_si                      NUMBER          := 0;
    --      v_amt_to_reinsure             NUMBER          := 0;
    --      --v_trt_rate                    NUMBER;
    --      v_trt_si_tcur                 NUMBER          := 0;
    --      v_accprd                      NUMBER;
    --      v_acpr_sht_desc               VARCHAR2 (200);
    --      v_cession_rate                NUMBER          := 0;
    --      v_trt_prem_tcur               NUMBER          := 0;
    --      v_trt_com_tcur                NUMBER          := 0;
    --      v_trt_si_pcur                 NUMBER          := 0;
    --      v_trt_prem_pcur               NUMBER          := 0;
    --      v_trt_com_pcur                NUMBER          := 0;
    --      v_ptax_amount                 NUMBER          := 0;
    --      v_ptax_tcur                   NUMBER          := 0;
    --      v_ctax_amount                 NUMBER          := 0;
    --      v_ctax_tcur                   NUMBER          := 0;
    --      v_ret_limit                   NUMBER          := 0;
    --      v_gross_ret                   NUMBER          := 0;
    --      v_net_ret                     NUMBER          := 0;
    --      v_prec_tax                    NUMBER          := 0;
    --      v_crec_tax                    NUMBER          := 0;
    ----      v_trt_rpremtax_pcur           NUMBER          := 0;
    ----      v_part_rpremtax_pcur          NUMBER          := 0;
    ----      v_trt_premtax_pcur            NUMBER          := 0;
    ----      v_part_premtax_pcur           NUMBER          := 0;
    --      v_prem_tax                    NUMBER;
    --      v_pol_com                     NUMBER          := 0;
    --      v_prrd_code                   NUMBER;
    --      v_trt_rprem_tax               NUMBER          := 0;
    --      v_trt_prem_tax                NUMBER          := 0;
    --      v_no_ri_si                    VARCHAR2 (15);
    --      v_bind_max_exp                NUMBER          := 0;
    --      v_dummy                       NUMBER (2)      := 0;
    --      v_pool_amt                    NUMBER          := 0;
    --      v_trt_eq_prem_pcur            NUMBER          := 0;
    --      v_trt_net_less_eq_prem_pcur   NUMBER          := 0;
    --      v_trt_net_less_eq_comm_pcur   NUMBER          := 0;
    --      v_trt_eq_com_pcur             NUMBER          := 0;
    --      v_rnd                         NUMBER          := 0;
    --      v_bcur_rnd                    NUMBER          := 0;
    --      v_cnt                         NUMBER          := 0;
    ----      v_part_si_pcur                NUMBER          := 0;
    ----      v_part_si_tcur                NUMBER          := 0;
    ----      v_part_comm_pcur              NUMBER          := 0;
    ----      v_part_comm_tcur              NUMBER          := 0;
    ----      v_part_prem_pcur              NUMBER          := 0;
    ----      v_part_prem_tcur              NUMBER          := 0;
    ----      v_part_code                   NUMBER;
    --      v_facoblig_excess             NUMBER          := 0;
    --      v_facnorml_excess             NUMBER          := 0;
    --      v_total_facoblig_ceded        NUMBER          := 0;
    --      v_special_ret_limit           NUMBER          := 0;
    --      v_special_ret_diff            NUMBER          := 0;
    --      v_q                           NUMBER;
    --      v_zero_devide                 EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      v_ctl_si_start_from           NUMBER;
    --      v_ctl_limit_amt               NUMBER;
    --      v_pool_si                     NUMBER;
    --      v_pool_prem                   NUMBER;
    --      v_pool_rate                   NUMBER;
    --      v_facoblig_limit              NUMBER;
    --      v_avail_fulc_bal              NUMBER;
    ----      v_part_manafee_pcur           NUMBER          := 0;
    ----      v_part_manafee_tcur           NUMBER          := 0;
    --      v_rein_cur_param              VARCHAR2 (1);
    --      v_ipu_reinsure_amt    NUMBER          := 0;
    --      v_fac_amt                NUMBER            := 0;
    --      v_risk_count             NUMBER            :=0;
    --      v_rsk_excl                VARCHAR2(1);
    --      v_rsk_excl_param     VARCHAR2(1);
    ----      v_trpa_prem_tax_rate   NUMBER;
    ----      v_trpa_part_type     VARCHAR2(1);
    --
    --      v_trt_cur_code  NUMBER;
    --      v_as_code NUMBER;
    --       v_bcur_code  number ;
    --       v_bcur_symbol  VARCHAR2(10);
    --       v_trt_cur_rate number ;
    --
    --        v_rc_code NUMBER;
    --        v_retention_amt NUMBER;
    --        v_treat_limit_amt NUMBER;
    --        v_excess_pct NUMBER;
    --     --   v_prev_fc_amnt NUMBER;
    --        v_prev_si NUMBER;
    --        v_ret_rate NUMBER;
    --        v_tot_risk_si NUMBER;
    --        v_endors_si NUMBER;
    --
    --        v_gross_ret_is NUMBER;
    --        v_comp_net_rate NUMBER;
    --        v_comp_net_prem NUMBER;
    --
    --        v_ta_type VARCHAR2(2);
    --        v_prev_net_retention NUMBER;
    --        v_trans_sign NUMBER;
    --
    --       v_user VARCHAR(30);
    --       v_ri_cur_rate NUMBER;
    --       v_ri_prem_formular varchar2(20);
    --       v_fc_prem number;
    --
    ----select all single the policy risks that have not been reinsured and are ready for reinsurance
    --      CURSOR cur_all_risks
    --      IS
    --         SELECT ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  prrd_gross_comp_retention gross_comp_ret,
    --                  ipu_pol_est_max_loss, prrd_avail_fulc_bal, prrd_ri_prem,
    --                  ipu_sec_scl_code, ipu_related_ipu_code, ipu_bp, ipu_gp,
    --                  ipu_fp, ipu_fap, ipu_nett_premium, ipu_eml_si,
    --                  ipu_cummulative_reins, ipu_sec_sect_code, ipu_sect_sht_desc,
    --                  ipu_cur_code, prrd_facre_amount, ipu_reinsure_amt,
    --                  prrd_gross_comp_retention, ipu_prem_tax, ipu_bind_code,
    --                  ipu_max_exposure, prrd_earthquake_prem,
    --                  prrd_ri_net_less_eq_prem, pol_prem_tax, pol_binder_policy,
    --                  pol_cur_symbol, pol_cur_code, prrd_facoblig_excess,
    --                  prrd_facoblig_limit, prrd_code, ipu_override_ri_retention,
    --                  prrd_facoblig_user_excess, prrd_facoblig_alloc_chk,prrd_prev_facre_si,prrd_prev_ri_si,
    --                  pol_exch_rate_fixed,pol_cur_rate,ipu_overrideride_ret_type,ipu_uw_yr,ipu_prev_ipu_code,
    --                  --get_risk_comp_retention(ipu_id,ipu_uw_yr,ipu_code)
    --                  prrd_prev_net_retention,
    --                  ipu_id,prrd_comp_net_rate,ipu_rc_code,
    --                  ipu_eml_based_on,prrd_comp_ret_edited,pol_policy_status,
    --                  prrd_tran_no,pol_uw_year,prrd_cumm_ri_prem,prrd_ri_prev_prem,
    --                  prrd_net_prev_prem,prrd_prev_facre_prem,scl_no_ri_si,PRRD_PREV_RET_RATE
    --             FROM gin_policies,
    --                  gin_insured_property_unds,
    --                  gin_policy_risk_ri_dtls,gin_sub_classes
    --            WHERE pol_batch_no = ipu_pol_batch_no
    --              AND ipu_code = prrd_ipu_code
    --              and ipu_sec_scl_code = scl_code
    --              and ipu_code = v_ipucode
    --              AND prrd_tran_no = v_tran_no
    ----              AND ipu_reinsured = 1
    --              AND ipu_pol_batch_no = v_batch_no
    --         ORDER BY ipu_code;
    --
    ----AND IPU_CUMMULATIVE_REINS ='N'
    ----AND IPU_RELR_CODE IS NULL
    ---- select risk treaty setup
    ---- get teaty setups
    --      CURSOR cur_treaties (
    --         v_ipu_code   IN   NUMBER,
    --         v_type       IN   NUMBER,
    --         v_prrd            NUMBER
    --      )
    --      IS
    --         SELECT   clt_ta_sht_desc, clt_scl_code, clt_retention_limit,
    --                  trt_code, trt_sht_desc, trt_level, rei_code, rei_trt_code,
    --                  rei_trt_sht_desc, rei_comm_rate, rei_limit, ptotr_rate,
    --                  rei_rate_type, rei_quake_limit, rei_retained_prem,
    --                  rei_cur_code, rei_cur_symbol, rei_as_code, rei_ta_code,
    --                  rei_trs_code, rei_trs_sht_desc,
    --                  NVL (rei_si_start_from, 0) rei_si_start_from,
    --                  rei_ri_prem_tax_rate, rei_ri_prem_tax_div_fact,
    --                  ptotr_property_id, ptotr_uwyr, ptotr_ipu_code,
    --                  ptotr_pol_batch_no, ptotr_pol_policy_no,
    --                  ptotr_pol_ren_endos_no, ptotr_sect_code,
    --                  ptotr_risk_cur_code, rei_earthqke_comm_rate, ptotr_code,
    --                  ptotr_ctl_code, rei_mgt_fee,ptotr_allowed_rate,
    --                  PTOTR_PREV_CESSION_RATE
    --             FROM gin_policy_rein_risk_details, gin_treaty_setups_vw
    --            WHERE ptotr_clt_scl_code = clt_scl_code
    --              AND ptotr_rei_code = rei_code
    --              AND ptotr_ipu_code = v_ipu_code
    --              AND trt_code = v_type
    --              AND ptotr_prrd_code = v_prrd
    --         ORDER BY trt_level, rei_si_start_from;
    --
    ----get retention limit
    --      CURSOR cur_arrangement_det (v_ipu_code NUMBER, v_scl_code NUMBER)
    --      IS
    --         SELECT DISTINCT clt_retention_limit
    --                    FROM gin_class_treaties, gin_policy_rein_risk_details
    --                   WHERE clt_as_code = ptotr_as_code
    --                     AND ptotr_ipu_code = v_ipu_code
    --                     AND clt_scl_code = v_scl_code;
    --
    ----      CURSOR cur_participant_rate (v_rei_code IN NUMBER)
    ----      IS
    ----         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    ----                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    ----                trpa_trs_code, trpa_trs_sht_desc,trpa_prem_tax_rate,trpa_part_type,trpa_code
    ----           FROM gin_treaty_participants
    ----          WHERE trpa_rei_code = v_rei_code;
    --
    -----get tax rates
    --      CURSOR cur_tax_rates
    --      IS
    --         SELECT taxr_rate, taxr_wef, taxr_wet, trnt_application_lvl,
    --                trnt_type, taxr_min_amt, taxr_round_nxt, taxr_trnt_code,
    --                taxr_division_factor
    --           FROM gin_tax_rates, gin_transaction_types
    --          WHERE trnt_code = taxr_trnt_code
    --            AND (trnt_type LIKE 'WTHTX%' OR trnt_type IN ('PRP'))
    --            AND (   (TRUNC (SYSDATE) BETWEEN taxr_wef AND taxr_wet)
    --                 OR (TRUNC (SYSDATE) >= taxr_wef AND taxr_wet IS NULL)
    --                );
    --
    --      CURSOR cur_prev_facre(v_ipu_code in number) IS SELECT * FROM gin_facre_cessions
    --      WHERE fc_ipu_code=v_ipu_code;
    ----R0 = Reinsurance tax
    ----R1 = Reinsurance premium tax
    ----R2 = Reinsurance interest tax
    ----R3 = Reinsurance commission tax
    ----v_prev_ipu_reinsure_amt NUMBER;
    --   BEGIN
    --
    --      BEGIN
    --         SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('CHECK_RISK_EXCL_ZONES') INTO v_rsk_excl_param FROM DUAL;
    --      EXCEPTION WHEN OTHERS
    --      THEN
    --          v_rsk_excl_param := 'N';
    --      END;
    --
    --      IF v_rsk_excl_param = 'Y'
    --      THEN
    --          BEGIN
    --           SELECT COUNT(*) INTO v_risk_count
    --               FROM gin_insured_property_unds
    --              WHERE ipu_pol_batch_no = v_batch_no
    --                AND ipu_quza_code IN (
    --                       SELECT tuqz_quza_code
    --                         FROM gin_treaty_uncvd_quake_zones,
    --                              gin_treaty_setups,
    --                              gin_class_treaties
    --                        WHERE tuqz_ta_code = rei_ta_code
    --                          AND tuqz_as_code = rei_as_code
    --                          AND clt_scl_code = ipu_sec_scl_code
    --                          AND clt_as_code = rei_as_code
    --                          AND rei_uw_year = TO_NUMBER (TO_CHAR (ipu_wef, 'RRRR'))
    --                          )
    --                         AND ipu_quza_code IS NULL;
    --          EXCEPTION WHEN OTHERS
    --          THEN
    --            v_risk_count := 0;
    --          END;
    --      END IF;
    --
    --      IF v_risk_count > 0 THEN
    --        v_rsk_excl := 'Y';
    --      ELSE
    --        v_rsk_excl := 'N';
    --      END IF;
    --
    --      v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --      v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar  ('REINS_IN_BASE_CURRENCY')
    --           INTO v_rein_cur_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_rein_cur_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Treaty  parameter...');
    --      END;
    --
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar  ('RI_PREM_FORMULAR')
    --           INTO v_ri_prem_formular
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_ri_prem_formular := null;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Reinsurance Premium Calculation Option...');
    --      END;
    --
    --      FOR cur_all_risks_rec IN cur_all_risks LOOP
    --         v_prem_tax := NVL (cur_all_risks_rec.ipu_prem_tax, 0);
    --         v_bind_max_exp := 0;
    --         v_dummy := 0;
    --
    --         IF     NVL (v_bind_max_exp, 0) = 0
    --            AND cur_all_risks_rec.pol_binder_policy = 'Y'
    --         THEN
    --            SELECT COUNT ('x')
    --              INTO v_dummy
    --              FROM gin_binder_details
    --             WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --               AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --
    --            IF NVL (v_dummy, 0) > 1
    --            THEN
    --               raise_error
    --                  ('Setup Error, Maximum accumulation defined more than once for this binder'
    --                  );
    --            ELSIF NVL (v_dummy, 0) = 1
    --            THEN
    --               BEGIN
    --                  SELECT db_max_limit
    --                    INTO v_bind_max_exp
    --                    FROM gin_binder_details
    --                   WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                     AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --               EXCEPTION
    --                  WHEN OTHERS THEN
    --                     raise_error
    --                        ('Unable to retrieve the maximum exposure for the bordereaux scl'
    --                        );
    --               END;
    --            ELSIF NVL (v_dummy, 0) = 0
    --            THEN
    --               BEGIN
    --                  SELECT NVL (bind_max_exposure, 0)
    --                    INTO v_bind_max_exp
    --                    FROM gin_binders
    --                   WHERE bind_code = cur_all_risks_rec.ipu_bind_code;
    --               EXCEPTION
    --                  WHEN OTHERS THEN
    --                     raise_error
    --                        ('Unable to retrieve the maxmium exposure for the bordereaux'
    --                        );
    --               END;
    --            END IF;
    --
    --            IF     NVL (v_bind_max_exp, 0) > 0
    --               AND NVL (v_bind_max_exp, 0) <
    --                                   NVL (cur_all_risks_rec.ipu_max_exposure, 0)
    --            THEN
    --               raise_error (   'The maximum exposure amount for the risk '
    --                            || cur_all_risks_rec.ipu_property_id
    --                            || ' is greater than the allowed limit of '
    --                            || v_bind_max_exp
    --                           );
    --            END IF;
    --         END IF;
    --------------------
    --
    --
    --         IF NVL (cur_all_risks_rec.scl_no_ri_si, 'N') = 'N' AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0 THEN
    --            raise_error  ('No reinsure amount specified, cannot reinsure this risk');
    --         END IF;
    --
    --         BEGIN
    --            v_prrd_code := NULL;
    --
    --            SELECT prrd_code,PRRD_AS_CODE
    --              INTO v_prrd_code,v_as_code
    --              FROM gin_policy_risk_ri_dtls
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_tran_no = v_tran_no;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               raise_error
    --                        ('Error :- Unable Please populate treaties again....');
    --         END;
    --         BEGIN
    --           SELECT DISTINCT  ta_cur_code,TA_TYPE,REI_CUR_RATE
    --                      INTO  v_trt_cur_code,v_ta_type,v_ri_cur_rate
    --                      FROM gin_class_treaties,
    --                           gin_arrangement_setups,
    --                           gin_treaty_arrangements,
    --                           gin_treaty_setups -- for now... this needs to be looked into afresh
    --                     WHERE as_ta_code = ta_code
    --                       AND clt_as_code = as_code
    --                       AND clt_scl_code =  cur_all_risks_rec.ipu_sec_scl_code
    --                       AND AS_CODE =v_as_code
    --                       AND REI_AS_CODE=as_code
    --                       AND REI_TA_CODE = ta_code
    --                       AND as_uwyr = cur_all_risks_rec.ipu_uw_yr;
    --        EXCEPTION
    --           WHEN NO_DATA_FOUND
    --           THEN
    --             NULL;
    --           WHEN OTHERS
    --           THEN
    --              raise_error
    --                 ('Unable to retrieve the arrangement retention limit'
    --                 );
    --        END;
    --
    --          IF NVL(v_rein_cur_param,'N') = 'Y' AND v_trt_cur_code != cur_all_risks_rec.pol_cur_code THEN
    --             IF v_bcur_code =v_trt_cur_code THEN
    --                 v_ipu_reinsure_amt :=( NVL(cur_all_risks_rec.ipu_reinsure_amt,0));
    --             ELSE
    --                 v_ipu_reinsure_amt :=( NVL(cur_all_risks_rec.ipu_reinsure_amt,0)) / cur_all_risks_rec.pol_cur_rate;
    --             END IF;
    --         ELSE
    --             v_ipu_reinsure_amt := NVL(cur_all_risks_rec.ipu_reinsure_amt,0);
    --         END IF;
    --
    --         SELECT  SIGN(NVL (cur_all_risks_rec.prrd_ri_prem, 0)) INTO v_trans_sign FROM DUAL;
    --
    --         IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code THEN
    --            IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y')  THEN
    --              -- v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt / cur_all_risks_rec.pol_cur_rate,  v_rnd  );
    --               v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
    --            ELSE
    --              v_trt_cur_rate := get_exchange_rate (v_bcur_code,v_trt_cur_code);
    --             v_exhange_rate :=v_trt_cur_rate;
    --          --v_ipu_reinsure_amt := ROUND (  v_ipu_reinsure_amt / nvl(v_ri_cur_rate,v_trt_cur_rate),  v_rnd );
    --            END IF;
    --         ELSE
    --            v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
    --         END IF;
    --
    --         v_pool_si := get_risk_ri_pool (cur_all_risks_rec.prrd_code);
    --         v_pool_prem := get_ri_pool_prem (cur_all_risks_rec.prrd_code);
    --         v_pool_rate := get_ri_pool_rate (cur_all_risks_rec.prrd_code);
    --         v_prev_net_retention :=NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --
    ----          SELECT decode(NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+ NVL(v_prev_net_retention,0)),0,v_ipu_reinsure_amt,NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(v_prev_net_retention,0)))
    ----          INTO v_tot_si FROM DUAL;
    --
    --         v_tot_risk_si :=v_ipu_reinsure_amt;
    --         v_avail_fulc_bal := 0;--NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0);
    --         DBMS_OUTPUT.put_line (   'v_ipu_reinsure_amt=' || v_ipu_reinsure_amt);
    --         v_amt_to_reinsure :=
    --            (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --             - NVL (v_avail_fulc_bal, 0)
    --             - (NVL (cur_all_risks_rec.prrd_facre_amount, 0))
    --             - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --             - NVL (v_pool_si, 0)  );
    --          DBMS_OUTPUT.put_line (   'prrd_facre_amount=' || cur_all_risks_rec.prrd_facre_amount);
    --         DBMS_OUTPUT.put_line (   'v_amt_to_reinsure=' || v_amt_to_reinsure || 'v_avail_fulc_bal=' || v_avail_fulc_bal  || 'v_pool_si=' || v_pool_si || 'v_amt_to_reinsure='  || v_amt_to_reinsure   );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)- NVL (cur_all_risks_rec.prrd_facre_amount, 0) - NVL (cur_all_risks_rec.prrd_facoblig_excess,0  ) );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)  - NVL (cur_all_risks_rec.prrd_facre_amount, 0) );
    --
    --         IF NVL (v_amt_to_reinsure, 0) < 0 THEN
    --            IF NVL (v_pool_si, 0) >
    --                  (  NVL (v_ipu_reinsure_amt/*cur_all_risks_rec.ipu_reinsure_amt*/, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                  )
    --            THEN
    --              raise_error ('The pool rate specified is greater than the available excess on risk. Please remove some of the facre cessions..'||v_pool_si||';'||v_ipu_reinsure_amt||';'||cur_all_risks_rec.prrd_facre_amount);
    --            ELSIF NVL (v_pool_si, 0) <
    --                    (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --                    )
    --            THEN
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = 0
    --                WHERE prrd_code = v_prrd_code;
    --
    --               v_avail_fulc_bal := 0;
    --               v_amt_to_reinsure :=
    --                  (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --                   - NVL (v_pool_si, 0)
    --                  );
    --            ELSIF NVL (v_pool_si, 0) <
    --                    (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                    )
    --            THEN
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = 0,
    --                      prrd_facoblig_excess = 0
    --                WHERE prrd_code = v_prrd_code;
    --
    --               v_avail_fulc_bal := 0;
    --               v_amt_to_reinsure :=
    --                  (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                   - NVL (v_pool_si, 0)
    --                  );
    --            END IF;
    --         END IF;
    --
    --         DBMS_OUTPUT.put_line (   'v_amt_to_reinsure='
    --                               || v_amt_to_reinsure
    --                               || 'v_pool_si='
    --                               || v_pool_si
    --                               || 'v_amt_to_reinsure='
    --                               || v_amt_to_reinsure
    --                              );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facoblig_excess,
    --                                      0
    --                                     )
    --                              );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                              );
    --
    ----RAISE_ERROR(34);
    ----raise_error(v_amt_to_reinsure);
    --         IF NVL (v_amt_to_reinsure, 0) = 0 THEN
    --            UPDATE gin_policy_risk_ri_dtls
    --               SET prrd_com_retention_rate = (100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))),
    --                   prrd_comp_net_rate = (100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))),
    --                   prrd_net_prem =ROUND (  ((100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))) / 100)  * NVL (prrd_ri_prem, 0), 2 )
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_code = v_prrd_code
    --               AND prrd_tran_no = v_tran_no;
    --         END IF;
    ----MANDATORY
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code, 1001,  v_prrd_code  ) LOOP -- Its A Mandatory Type treaty
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    --               -- calculate treaty sum insured in policy currency
    ----                v_tot_si := v_ipu_reinsure_amt;
    --                v_prev_net_retention :=0;
    --               v_trt_si_pcur := v_tot_risk_si * (cur_treaties_rec.ptotr_rate / 100);
    --               v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --               -- Culculate treaty premium
    ----               RAISE_ERROR('v_trt_si_pcur11111='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --               v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;
    ----DBMS_OUTPUT.PUT_LINE('v_cession_rate='||v_cession_rate);
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0  THEN
    --                   v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               END if ;
    --            -- calculate mandatory commission
    --               v_trt_net_less_eq_comm_pcur :=
    --                  ROUND ((  (  v_trt_net_less_eq_prem_pcur
    --                             * cur_treaties_rec.rei_comm_rate
    --                            )
    --                          / 100
    --                         ),
    --                         v_rnd
    --                        );
    --               v_trt_eq_com_pcur :=
    --                  ROUND ((  (  v_trt_eq_prem_pcur
    --                             * cur_treaties_rec.rei_earthqke_comm_rate
    --                            )
    --                          / 100
    --                         ),
    --                         v_rnd
    --                        );
    --               --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
    --               v_trt_com_pcur :=   NVL (v_trt_net_less_eq_comm_pcur, 0)  + NVL (v_trt_eq_com_pcur, 0);
    --               v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --               v_amt_to_reinsure := (v_amt_to_reinsure - v_trt_si_tcur);
    --/*********tax part**************************/
    ----------calculate reinsurance tax, reinsurance commission tax part
    --               v_ptax_amount := 0;
    --               v_ctax_amount := 0;
    --               v_ptax_tcur := 0;
    --               v_ctax_tcur := 0;
    --               v_ptax_amount := ROUND (NVL (v_prem_tax, 0), v_rnd);
    --               v_ctax_amount :=
    --                             ROUND (NVL (v_pol_com, 0) * v_cession_rate,
    --                                    v_rnd);
    --               v_ptax_tcur := v_ptax_amount * v_exhange_rate;
    --               v_ctax_tcur := v_ctax_amount * v_exhange_rate;
    --
    --/***********************************************************************/
    --               UPDATE gin_policy_rein_risk_details
    --                  SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                      ptotr_risk_si_tcur =  ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
    --                      ptotr_risk_prem_tcur =  ROUND (cur_all_risks_rec.prrd_ri_prem    * v_exhange_rate,  v_bcur_rnd  ),
    --                      ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                      ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                      ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                      ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                      ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                      ptotr_earthqke_comm_rate =  cur_treaties_rec.rei_earthqke_comm_rate,
    --                      ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                      ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                      ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                      ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                      ptotr_acpr_code = v_accprd,
    --                      ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                      ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                      ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                      ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                      ptotr_ggt_tran_no = v_tran_no,
    --                      ptotr_tran_type = v_tran_type,
    --                      ptotr_earthqke_prem = ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_earthqke_comm = ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_prem = ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_comm = ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                  AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                  AND ptotr_prrd_code = v_prrd_code;
    --
    --/************************start participartion *****/
    ----               v_trt_rpremtax_pcur := 0;
    ----               v_trt_premtax_pcur := 0;
    --
    --
    --
    --              Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                               v_prrd_code,
    --                               cur_treaties_rec.ptotr_code,
    --                               v_trt_si_pcur,
    --                               v_trt_si_tcur,
    --                               v_trt_prem_pcur,
    --                               v_trt_prem_tcur,
    --                               v_trt_com_pcur,
    --                               v_trt_com_tcur,
    --                               cur_all_risks_rec.pol_cur_code,
    --                               cur_all_risks_rec.pol_cur_symbol,
    --                               cur_all_risks_rec.ipu_pol_batch_no,
    --                               cur_all_risks_rec.ipu_pol_policy_no,
    --                               cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                v_tran_no,
    --                                v_tran_type,
    --                               cur_all_risks_rec.ipu_code,
    --                               cur_all_risks_rec.ipu_sec_scl_code,
    --                                v_exhange_rate,
    --                                v_rnd,
    --                                v_bcur_rnd
    --                               );
    --            END LOOP;                                            --- mandatory
    --
    --
    --
    --            /* v_ret_limit := NVL(cur_all_risks_rec.prrd_gross_comp_retention,0)-NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            IF v_amt_to_reinsure > NVL (v_ret_limit, 0) THEN
    --               IF SIGN(NVL(v_ret_limit,0)) =-1 THEN
    --                 v_ret_limit :=0;
    --               END IF;
    --                v_gross_ret := NVL (v_ret_limit, 0);
    --            ELSE
    --               v_gross_ret := v_amt_to_reinsure;
    --            END IF;*/
    --/*get subclass gross retention from the setups. Function get_scl_uwyr_g_ret*/
    --         IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --            IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                IF (v_bcur_code = v_trt_cur_code) THEN
    --                    v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code)/ cur_all_risks_rec.pol_cur_rate ,v_rnd);
    --                 ELSE
    --                    v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code) ,v_rnd);
    --               END IF;
    --            ELSE
    --               v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_trt_cur_code, cur_all_risks_rec.ipu_rc_code) *nvl(v_ri_cur_rate,v_trt_cur_rate),v_rnd);
    --            END IF;
    --         ELSE
    --              v_retention_amt := get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_cur_code, cur_all_risks_rec.ipu_rc_code);
    --         END IF;
    --            DBMS_OUTPUT.put_line (   '1 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_prrd_code='
    --                                  || v_prrd_code
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'prrd_gross_comp_retention='
    --                                  || cur_all_risks_rec.prrd_gross_comp_retention
    --                                  || 'v_retention_amt='
    --                                  || v_retention_amt
    --                                  || 'prrd_comp_ret_edited='
    --                                  || cur_all_risks_rec.prrd_comp_ret_edited
    --                                  || 'v_ret_limit='
    --                                  || v_ret_limit
    --                                 );
    --
    --           IF NVL(cur_all_risks_rec.prrd_gross_comp_retention,0) <> NVL(v_retention_amt,0) /*AND NVL(cur_all_risks_rec.prrd_comp_ret_edited,'N') ='Y' cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */THEN
    --           v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --            END IF;
    --       --v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --            IF v_amt_to_reinsure < v_retention_amt THEN
    --                v_ret_limit := NVL(v_amt_to_reinsure,0);---NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            ELSE
    --                v_ret_limit := v_retention_amt;-- -NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            END IF;
    --DBMS_OUTPUT.put_line (   '1 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_ipu_reinsure_amt='
    --                                  || v_ipu_reinsure_amt
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'prrd_gross_comp_retention='
    --                                  || cur_all_risks_rec.prrd_gross_comp_retention
    --                                  || 'v_retention_amt='
    --                                  || v_retention_amt
    --                                  || 'prrd_comp_ret_edited='
    --                                  || cur_all_risks_rec.prrd_comp_ret_edited
    --                                  || 'v_ret_limit='
    --                                  || v_ret_limit
    --                                 );
    --           IF v_amt_to_reinsure > NVL (v_ret_limit, 0) THEN
    --               IF SIGN(NVL(v_ret_limit,0)) =-1 THEN
    --                 v_ret_limit :=0;
    --               END IF;
    --                v_gross_ret := NVL (v_ret_limit, 0);
    --            ELSE
    --               v_gross_ret := v_amt_to_reinsure;
    --            END IF;
    --
    --             IF NVL(v_amt_to_reinsure,0) > NVL(v_retention_amt,0) THEN
    --               v_amt_to_reinsure := NVL(v_amt_to_reinsure,0)-NVL(v_retention_amt,0);
    --               --     v_amt_to_reinsure := NVL(v_tot_risk_si,0)-NVL(v_retention_amt,0);
    --             ELSE
    --                v_amt_to_reinsure := 0;
    --            END IF;
    --
    --          v_special_ret_limit := v_gross_ret;
    --            v_special_ret_diff := 0;
    --
    --            IF NVL (cur_all_risks_rec.ipu_override_ri_retention, 0) != 0
    --            THEN
    --               v_special_ret_limit :=   NVL (cur_all_risks_rec.ipu_override_ri_retention, 0);
    --
    --               IF v_special_ret_limit > v_amt_to_reinsure
    --               THEN
    --                  v_special_ret_limit := v_amt_to_reinsure;
    --               END IF;
    --
    --               v_special_ret_diff := v_special_ret_limit - v_gross_ret;
    --            END IF;
    ----          v_special_ret_limit :=
    ----                      NVL (v_amt_to_reinsure, 0);
    ----            v_amt_to_reinsure :=
    ----                      NVL (v_amt_to_reinsure, 0)
    ----                      - NVL (v_special_ret_limit, 0);
    ----       RAISE_ERROR(v_special_ret_limit||';'||v_amt_to_reinsure);
    ----           IF v_rsk_excl = 'Y'
    ----           THEN
    ----               v_facnorml_excess    :=v_amt_to_reinsure;
    ----               v_facoblig_limit       :=v_amt_to_reinsure;
    ----               v_fac_amt :=  v_amt_to_reinsure;
    ----               v_amt_to_reinsure :=0;
    ----           END IF;
    --
    --            v_net_ret := 0;
    --            v_gross_ret := NVL (v_gross_ret, 0);
    --            DBMS_OUTPUT.put_line (   '2 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_prrd_code='
    --                                  || v_prrd_code
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                 );
    --            -- process quota share
    --            v_pool_amt := 0;
    ----raise_error(v_gross_ret);
    ----RAISE_ERROR('IPU_CODE='||cur_all_risks_rec.ipu_code||'v_prrd_code='||v_prrd_code);
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code, 1003, v_prrd_code   )
    --            LOOP
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    ----QUOTA SHARE
    ----RAISE_eRROR('ERERE');
    --               -- Its A Quota share Type treaty
    --        -- calculate treaty sum insured in policy currency
    --         v_tot_risk_si := v_ipu_reinsure_amt;
    --
    --         v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --         v_prev_net_retention :=0;
    --               DBMS_OUTPUT.put_line
    --                                (   'startfrrom='
    --                                 || (  NVL
    --                                          (cur_treaties_rec.rei_si_start_from,
    --                                           0
    --                                          )
    --                                     * v_exhange_rate
    --                                    )
    --                                 || 'vgrossret='
    --                                 || NVL (v_gross_ret, 0)
    --                                );
    ---- raise_error(v_ipu_reinsure_amt||';'||v_retention_amt);
    --            IF NVL(v_tot_risk_si,0)=0 THEN
    --                v_tot_risk_si :=100;
    --                v_retention_amt :=100;
    --                v_gross_ret:=100;
    --            END IF;
    --               BEGIN
    --                  SELECT ctl_si_start_from, ctl_limit_amt
    --                    INTO v_ctl_si_start_from, v_ctl_limit_amt
    --                    FROM gin_class_treaty_limits
    --                   WHERE ctl_code = cur_treaties_rec.ptotr_ctl_code;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error fetching class treaty quota share limits....');
    --               END;
    --
    --
    --             IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --                IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                    IF (v_bcur_code = v_trt_cur_code) THEN
    --                       v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   )/ cur_all_risks_rec.pol_cur_rate;
    --                        v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit)/ cur_all_risks_rec.pol_cur_rate;
    ----                        RAISE_ERROR('v_ctl_limit_amt='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
    --                     ELSE
    --                        v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   );
    --                       v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);
    ----                       RAISE_ERROR('v_ctl_limit_amt111='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
    --                   END IF;
    --                ELSE
    --
    --                    v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   )*nvl(v_ri_cur_rate,v_trt_cur_rate);
    --                   v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit)*nvl(v_ri_cur_rate,v_trt_cur_rate);
    ----                   RAISE_ERROR('v_ctl_limit_amt22='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si||'REI LIMIT='||cur_treaties_rec.rei_limit||'v_ri_cur_rate='||v_ri_cur_rate||'v_trt_cur_rate='||v_trt_cur_rate);
    --                END IF;
    --             ELSE
    --                 v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   );
    --                   v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);
    --             END IF;
    --
    --               --IF (NVL(cur_treaties_rec.REI_SI_START_FROM,0) * v_exhange_rate) < NVL(v_gross_ret,0) THEN
    ----         RAISE_ERROR(v_exhange_rate||';'||v_ctl_si_start_from||';'||v_gross_ret);
    --               IF (NVL (v_ctl_si_start_from, 0) * v_exhange_rate) < NVL (v_gross_ret, 0) THEN
    --                    v_gross_ret := NVL (v_gross_ret, 0) - NVL (v_pool_amt, 0);
    --                  IF NVL (v_gross_ret, 0) >  (NVL (v_ctl_limit_amt, 0) * v_exhange_rate ) THEN
    --                     v_trt_si_pcur := ROUND (  NVL (v_ctl_limit_amt, 0) * v_exhange_rate * (cur_treaties_rec.ptotr_rate / 100));
    --                     v_net_ret :=  NVL (v_net_ret, 0) + (  (  NVL (v_ctl_limit_amt, 0) * NVL (v_exhange_rate, 0))  - NVL (v_trt_si_pcur, 0) );
    --                      RAISE_ERROR('v_trt_si_pcur222='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --                  ELSE
    --                     v_trt_si_pcur := ROUND (  NVL (v_gross_ret, 0)  * (NVL (cur_treaties_rec.ptotr_rate, 0) / 100) );
    --                     v_net_ret :=  NVL (v_net_ret, 0)  + (NVL (v_gross_ret, 0) - NVL (v_trt_si_pcur, 0));
    ----                       RAISE_ERROR('v_trt_si_pcur333='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    ----raise_error (   'v_gross_ret=' || v_gross_ret  || 'v_trt_si_pcur='  || v_trt_si_pcur || 'v_net_ret=' || v_net_ret  );
    --                  END IF;
    --                  v_gross_ret :=v_net_ret;
    ----RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_trt_si_pcur||';'||v_tot_si||';'||v_exhange_rate);
    --                  DBMS_OUTPUT.put_line (   ' v_ipu_code='
    --                                        || cur_all_risks_rec.ipu_code
    --                                        || ' v_type='
    --                                        || 1003
    --                                        || ' v_prrd='
    --                                        || v_prrd_code
    --                                       );
    --                  DBMS_OUTPUT.put_line ('    v_trt_si_pcur=' || v_trt_si_pcur);
    --                  DBMS_OUTPUT.put_line ('    v_net_ret=' || v_net_ret);
    --                  v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --                  -- Culculate treaty premium
    ----                  RAISE_ERROR('v_trt_si_pcur='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --                  v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;
    --
    ----         RAISE_ERROR('v_cession_rate='||v_cession_rate);
    --                   IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0 THEN
    --                       v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                       v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                       v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                       v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --                   ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                       v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                       v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                       v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                       v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                       v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                       v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --                   END if ;
    --
    --                  -- calculate QUOTA commission
    --                  v_trt_net_less_eq_comm_pcur :=
    --                     ROUND ((  (  v_trt_net_less_eq_prem_pcur
    --                                * cur_treaties_rec.rei_comm_rate
    --                               )
    --                             / 100
    --                            ),
    --                            v_rnd
    --                           );
    --                  v_trt_eq_com_pcur :=
    --                     ROUND ((  (  v_trt_eq_prem_pcur
    --                                * cur_treaties_rec.rei_earthqke_comm_rate
    --                               )
    --                             / 100
    --                            ),
    --                            v_rnd
    --                           );
    --                  v_trt_com_pcur :=
    --                       NVL (v_trt_net_less_eq_comm_pcur, 0)
    --                     + NVL (v_trt_eq_com_pcur, 0);
    --                  v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --                  v_pool_amt :=
    --                       NVL (v_pool_amt, 0)
    --                     + (  NVL (v_gross_ret, 0)
    --                        - (NVL (v_net_ret, 0) + NVL (v_trt_si_pcur, 0))
    --                       );
    --            /*********tax part**************************/
    ----------calculate reinsurance tax, reinsurance commission tax part
    --                  v_ptax_tcur := 0;
    --                  v_ctax_tcur := 0;
    --                  v_ptax_amount :=
    --                      ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,
    --                             v_rnd);
    --                  v_ctax_amount :=
    --                       ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,
    --                              v_rnd);
    --                  v_ptax_tcur :=
    --                            ROUND (v_ptax_amount * v_exhange_rate, v_bcur_rnd);
    --                  v_ctax_tcur :=
    --                            ROUND (v_ctax_amount * v_exhange_rate, v_bcur_rnd);
    --
    --/***********************************************************************/
    ----                RAISE_ERROR('v_cession_rate='||v_cession_rate);
    --                  UPDATE gin_policy_rein_risk_details
    --                     SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                         ptotr_risk_si_tcur =
    --                                         ROUND (ptotr_trt_si_tcur, v_bcur_rnd),
    --                         ptotr_risk_prem_tcur =
    --                                       ROUND (ptotr_trt_prem_tcur, v_bcur_rnd),
    --                         ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                         ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                         ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                         ptotr_trt_prem_tcur =
    --                                           ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                         ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                         ptotr_earthqke_comm_rate =
    --                                       cur_treaties_rec.rei_earthqke_comm_rate,
    --                         ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                         ptotr_trt_comm_tcur =
    --                                            ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                         ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                         ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                         ptotr_acpr_code = v_accprd,
    --                         ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                         ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                         ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                         ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                         ptotr_ggt_tran_no = v_tran_no,
    --                         ptotr_tran_type = v_tran_type,
    --                         ptotr_earthqke_prem =
    --                                        ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                         ptotr_earthqke_comm =
    --                                         ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                         ptotr_net_less_eq_prem =
    --                               ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                         ptotr_net_less_eq_comm =
    --                               ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                   WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                     AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                     AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                     AND ptotr_prrd_code = v_prrd_code;
    --
    --            /************************start participartion *****/
    ----------------------insert participarticipation for each risk
    ----                  v_trt_rpremtax_pcur := 0;
    ----                  v_trt_premtax_pcur := 0;
    --
    --
    --
    --                  Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                                   v_prrd_code,
    --                                   cur_treaties_rec.ptotr_code,
    --                                   v_trt_si_pcur,
    --                                   v_trt_si_tcur,
    --                                   v_trt_prem_pcur,
    --                                   v_trt_prem_tcur,
    --                                   v_trt_com_pcur,
    --                                   v_trt_com_tcur,
    --                                   cur_all_risks_rec.pol_cur_code,
    --                                   cur_all_risks_rec.pol_cur_symbol,
    --                                   cur_all_risks_rec.ipu_pol_batch_no,
    --                                   cur_all_risks_rec.ipu_pol_policy_no,
    --                                   cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                    v_tran_no,
    --                                    v_tran_type,
    --                                   cur_all_risks_rec.ipu_code,
    --                                   cur_all_risks_rec.ipu_sec_scl_code,
    --                                    v_exhange_rate,
    --                                    v_rnd,
    --                                    v_bcur_rnd
    --                                   );
    --               END IF;
    --            END LOOP;                                            --qouta share
    --
    ----end quota******************************************************************************************
    --            DBMS_OUTPUT.put_line (   'be sup v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                 );
    --
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code,
    --                                                  1004,
    --                                                  v_prrd_code
    --                                                 )
    --            LOOP
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    --               v_trt_rprem_tax := 0;
    --               v_trt_prem_tax := 0;
    --               v_trt_com_pcur := 0;
    --
    --                -- Its A Surplus Type treaty
    --               -- calculate treaty sum insured in policy currency
    --               IF cur_treaties_rec.ptotr_rate * v_ret_limit >
    --                                                            v_amt_to_reinsure
    --               THEN
    --                  v_trt_si_pcur := v_amt_to_reinsure;
    --               ELSE
    --                  v_trt_si_pcur := cur_treaties_rec.ptotr_rate * v_ret_limit;
    --               END IF;
    --
    --               -- Its A Surplus Type treaty
    --               -- calculate treaty sum insured in policy currency
    ----               raise_error(v_gross_ret||';'||v_prev_net_retention);
    ----                  IF SIGN( v_gross_ret-NVL(v_prev_net_retention,0)) = 1 THEN
    ----                    v_gross_ret := v_gross_ret-NVL(v_prev_net_retention,0);
    ----                  END IF;
    --       DBMS_OUTPUT.put_line (   ' v_gross_ret='
    --                                        || v_gross_ret
    --                                        || ' v_prev_net_retention='
    --                                        || v_prev_net_retention);
    --/*Get treaty limit from the function gettreatylimit*/
    --                IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --                    IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                        v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code)/cur_all_risks_rec.pol_cur_rate-NVL(v_retention_amt,0);
    --                    ELSE
    --                       v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_trt_cur_code, cur_all_risks_rec.ipu_rc_code)*v_trt_cur_rate-NVL(v_retention_amt,0);
    --                    END IF;
    --                ELSE
    --                    v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_cur_code, cur_all_risks_rec.ipu_rc_code)-NVL(v_retention_amt,0);
    --                END IF;
    --
    --               IF (NVL(v_treat_limit_amt,0) <> NVL(v_retention_amt,0) AND NVL(cur_all_risks_rec.prrd_comp_ret_edited,'N') ='Y') OR (NVL(cur_treaties_rec.ptotr_rate,0)  <> NVL(cur_treaties_rec.ptotr_allowed_rate,0))/* cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */THEN
    --                  v_treat_limit_amt :=  cur_treaties_rec.ptotr_rate * NVL(cur_all_risks_rec.prrd_gross_comp_retention,0);---NVL(v_retention_amt,0);
    --                END IF;
    --              DBMS_OUTPUT.put_line (   ' v_amt_to_reinsure='
    --                                        || v_amt_to_reinsure
    --                                        || ' v_treat_limit_amt='
    --                                        || v_treat_limit_amt
    --                                        || ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur);
    --
    --              IF v_trt_si_pcur > v_treat_limit_amt THEN
    --                    v_trt_si_pcur := v_treat_limit_amt;
    --              ELSif v_amt_to_reinsure <= v_trt_si_pcur AND v_amt_to_reinsure <> 0 THEN
    --                    v_trt_si_pcur := v_amt_to_reinsure;
    ----              ELSE
    ----                v_trt_si_pcur :=0;
    --              END IF;
    --              DBMS_OUTPUT.put_line (   ' v_amt_to_reinsure='
    --                                        || v_amt_to_reinsure
    --                                        || ' v_treat_limit_amt='
    --                                        || v_treat_limit_amt
    --                                        || ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur);
    --
    --              v_trt_si_pcur :=abs(v_trt_si_pcur);
    --              v_tot_risk_si :=abs(v_tot_risk_si);
    --              v_trt_si_tcur := 0;
    --               v_amt_to_reinsure := v_amt_to_reinsure - v_trt_si_pcur;
    --               v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --        -- Culculate treaty premium
    --               v_cession_rate := v_trt_si_pcur/ v_tot_risk_si * 100;
    --       DBMS_OUTPUT.put_line (   ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur
    --                                        || ' v_tot_risk_si='
    --                                        || v_tot_risk_si);
    --       DBMS_OUTPUT.PUT_LINE('v_ri_prem_formular='||v_ri_prem_formular);
    --                IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN')) OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0 THEN
    --                   v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --     DBMS_OUTPUT.put_line (   ' v_cession_rate='
    --                                        || v_cession_rate
    --                                        || ' ipu_GP='
    --                                        || cur_all_risks_rec.ipu_GP
    --                                        || 'PTOTR_PREV_CESSION_RAT='
    --                                        || cur_treaties_rec.PTOTR_PREV_CESSION_RATe
    --                                        || 'PRRD_RI_PREM='
    --                                        || cur_all_risks_rec.PRRD_RI_PREM
    --                                        || 'prrd_ri_net_less_eq_prem='
    --                                        || cur_all_risks_rec.prrd_ri_net_less_eq_prem
    --                                       );
    --                   v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSE
    --                RAISE_ERROR('Reinsurance computation method not setup in parameters. RI_PREM_FORMULAR');
    --               END if ;
    --
    --                 -- calculate QUOTA commission
    --               v_trt_net_less_eq_comm_pcur :=  ROUND ((  (  v_trt_net_less_eq_prem_pcur   * cur_treaties_rec.rei_comm_rate   )   / 100  ),   v_rnd     );
    --               v_trt_eq_com_pcur :=  ROUND ((  (  v_trt_eq_prem_pcur   * cur_treaties_rec.rei_earthqke_comm_rate    )  / 100   ),  v_rnd );
    --               --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
    --               v_trt_com_pcur :=   NVL (v_trt_net_less_eq_comm_pcur, 0)  + NVL (v_trt_eq_com_pcur, 0);
    --               v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --        --------calculate reinsurance tax, reinsurance commission tax part
    --               v_ptax_tcur := 0;
    --               v_ctax_tcur := 0;
    --               v_ptax_amount := ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,   v_rnd);
    --               v_ctax_amount := ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,  v_rnd);
    --               v_ptax_tcur := v_ptax_amount * v_exhange_rate;
    --               v_ctax_tcur := v_ctax_amount * v_exhange_rate;
    --               v_cession_rate := ROUND (v_trt_si_pcur/ v_tot_risk_si * 100,4);
    --           UPDATE gin_policy_rein_risk_details
    --                  SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                      ptotr_risk_si_tcur = ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
    --                      ptotr_risk_prem_tcur = ROUND (cur_all_risks_rec.prrd_ri_prem, v_bcur_rnd),
    --                      ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                      ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                      ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                      ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                      ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                      ptotr_earthqke_comm_rate = cur_treaties_rec.rei_earthqke_comm_rate,
    --                      ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                      ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                      ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                      ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                      ptotr_acpr_code = v_accprd,
    --                      ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                      ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                      ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                      ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                      ptotr_ggt_tran_no = v_tran_no,
    --                      ptotr_tran_type = v_tran_type,
    --                      ptotr_earthqke_prem =  ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_earthqke_comm =  ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_prem = ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_comm = ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                  AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                  AND ptotr_prrd_code = v_prrd_code;
    --
    --        /************************start participartion *****/
    ----------------------insert participarticipation for each risk
    ----               v_trt_rpremtax_pcur := 0;
    ----               v_trt_premtax_pcur := 0;
    --
    --              Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                               v_prrd_code,
    --                               cur_treaties_rec.ptotr_code,
    --                               v_trt_si_pcur,
    --                               v_trt_si_tcur,
    --                               v_trt_prem_pcur,
    --                               v_trt_prem_tcur,
    --                               v_trt_com_pcur,
    --                               v_trt_com_tcur,
    --                               cur_all_risks_rec.pol_cur_code,
    --                               cur_all_risks_rec.pol_cur_symbol,
    --                               cur_all_risks_rec.ipu_pol_batch_no,
    --                               cur_all_risks_rec.ipu_pol_policy_no,
    --                               cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                v_tran_no,
    --                                v_tran_type,
    --                               cur_all_risks_rec.ipu_code,
    --                               cur_all_risks_rec.ipu_sec_scl_code,
    --                                v_exhange_rate,
    --                                v_rnd,
    --                                v_bcur_rnd
    --                               );
    --            END LOOP;                                                --surplus
    ----raise_error('here=='||v_net_ret||';'||v_special_ret_limit||';'||v_special_ret_diff);
    --            IF NVL (v_net_ret, 0) = 0
    --            THEN
    --               v_net_ret := v_special_ret_limit;
    --            ELSE
    --               v_net_ret := NVL (v_net_ret, 0) + v_special_ret_diff;
    --            END IF;
    --
    --            DBMS_OUTPUT.put_line (   '11v_net_ret='
    --                                  || v_net_ret
    --                                  || 'v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'cur_all_risks_rec.ipu_reinsure_amt='
    --                                  || cur_all_risks_rec.ipu_reinsure_amt
    --                                 );
    ----raise_error(v_ipu_reinsure_amt||';'||get_risk_prev_si(cur_all_risks_rec.prrd_code));
    --v_ipu_reinsure_amt := ABS(NVL(v_ipu_reinsure_amt,0) -NVL(cur_all_risks_rec.prrd_prev_ri_si,0));
    --
    ----CHECK THIS !!!!!!!!!!!!!!!!!!!
    --
    --            IF NVL(v_gross_ret,0) = 0 THEN
    ----               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_risk_si,0) * 100,   4   );
    --               v_ret_rate := ROUND (  NVL (cur_all_risks_rec.prrd_gross_comp_retention,0)  / NVL(v_tot_risk_si,0) * 100,   4   );
    -- --               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_si,0) * 100,   4   );
    ----                IF v_ret_rate > 100 THEN
    ----                    v_ret_rate :=100;
    ----                    v_net_ret := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
    ----                END IF;
    ----                v_gross_ret_is := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
    --            ELSE
    --                v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_risk_si,0)  * 100,   4   );
    ----                 v_ret_rate := ROUND ( (v_gross_ret+NVL(v_prev_net_retention,0)) / NVL(v_tot_risk_si,0)  * 100,   4   );
    -- --               v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_si,0)  * 100,   4   );
    --            END IF;
    --
    ----RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_ipu_reinsure_amt||';'||v_ret_rate||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_tot_si||';'||v_tot_risk_si||';'||cur_all_risks_rec.prrd_prev_net_retention);
    --              v_gross_ret_is := NVL (v_gross_ret, cur_all_risks_rec.prrd_gross_comp_retention);
    --              SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   )  INTO v_comp_net_rate FROM DUAL;
    --
    --         --     SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ) * NVL (cur_all_risks_rec.prrd_ri_prem, 0) / 100 INTO v_comp_net_prem FROM DUAL;
    --
    --            IF NVL(v_gross_ret_is,0) =0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0  */AND NVL(v_ret_rate,0) <> 0 THEN
    --       --         v_comp_net_prem :=(v_ret_rate*NVL(cur_all_risks_rec.prrd_cumm_ri_prem,cur_all_risks_rec.prrd_ri_prem)/100)-NVL(cur_all_risks_rec.prrd_net_prev_prem,0);
    ----                v_net_ret :=0;
    --                    v_gross_ret_is :=v_net_ret;
    --            END IF;
    --            IF NVL(cur_all_risks_rec.prrd_ri_prem,0) <> 0 THEN
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(cur_all_risks_rec.IPU_FP,0) !=0  THEN
    --                   v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    --               END if ;
    --            ELSE
    --                v_comp_net_prem :=0;
    --            END IF;
    --DBMS_OUTPUT.put_line (   'v_comp_net_prem='
    --                                  || v_comp_net_prem);
    --          UPDATE gin_policy_risk_ri_dtls
    --               SET prrd_comp_retention = v_net_ret,
    --                   prrd_gross_comp_retention = v_gross_ret_is,--NVL (v_gross_ret, prrd_gross_comp_retention),
    --                   prrd_com_retention_rate =  v_ret_rate,
    --                   --ROUND (  NVL (v_gross_ret, prrd_gross_comp_retention)  / NVL (v_ipu_reinsure_amt/*cur_all_risks_rec.ipu_reinsure_amt*/, 0)  * 100,   4   ),
    --                   prrd_comp_net_rate = nvl(v_ret_rate,v_comp_net_rate),--ROUND (  v_net_ret  / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ),
    --                   prrd_net_prem =  v_comp_net_prem--ROUND (  (  v_net_ret   / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100   ))  * NVL (prrd_ri_prem, 0) / 100
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_code = v_prrd_code
    --               AND prrd_tran_no = v_tran_no;
    --
    --            DBMS_OUTPUT.put_line (   'v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'avail_fulc_bal '
    --                                  || v_avail_fulc_bal
    --                                  || '  facoblig_user_excess '
    --                                  || cur_all_risks_rec.prrd_facoblig_user_excess
    --                                 );
    --
    --            BEGIN
    --               SELECT SUM (NVL (fc_amount, 0))
    --                 INTO v_total_facoblig_ceded
    --                 FROM gin_facre_cessions
    --                WHERE fc_prrd_code = cur_all_risks_rec.prrd_code
    --                  AND fc_facre_type = 'O';
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error getting fac obliq cession..');
    --            END;
    --
    --            IF NVL (cur_all_risks_rec.prrd_facoblig_alloc_chk, 'N') = 'Y'
    --            THEN
    --               IF NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0) > 0
    --               THEN
    --                  v_facoblig_limit := NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0);
    --               ELSE
    --                  v_facoblig_limit :=  NVL (cur_all_risks_rec.prrd_facoblig_limit, 0);
    --               END IF;
    --            ELSE
    --               v_facoblig_limit := 0;
    ----               BEGIN
    ----                   IF v_rsk_excl = 'Y' THEN
    ----                       v_facoblig_limit :=v_fac_amt;
    ----                       v_avail_fulc_bal :=v_fac_amt;
    ----                   END IF;
    ----               END;
    --            END IF;
    --DBMS_OUTPUT.put_line ('v_amt_to_reinsure='||v_amt_to_reinsure||';'||v_avail_fulc_bal||';'||v_facoblig_limit||';'||v_total_facoblig_ceded);
    --            IF    v_amt_to_reinsure > 0
    --               OR (    NVL (v_avail_fulc_bal, 0) > 0
    --                   and NVL (v_facoblig_limit, 0) > 0
    --                  )
    --             THEN
    --               IF     NVL (v_amt_to_reinsure, 0) > 0
    --                  AND NVL (v_facoblig_limit, 0) > 0
    --                  AND NVL (v_total_facoblig_ceded, 0) = 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('XXXXXXXXXXXXXXXXXXX');
    --
    --                  IF v_amt_to_reinsure > v_facoblig_limit
    --                  THEN
    --                     -- raise_error('here');
    --                     v_facoblig_excess := v_facoblig_limit;
    --                     v_facnorml_excess :=
    --                               v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
    --                  ELSE
    --                     v_facoblig_excess := v_amt_to_reinsure;
    --                     v_facnorml_excess := 0;
    --                  END IF;
    --               ELSIF     NVL (v_amt_to_reinsure, 0) > 0
    --                     AND NVL (v_facoblig_limit, 0) > 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('YYYYYYYYYYYYYYYYYYY');
    --                  v_facoblig_excess :=
    --                       NVL (v_facoblig_limit, 0)
    --                     - NVL (v_total_facoblig_ceded, 0);
    --
    --                  IF v_amt_to_reinsure > v_facoblig_excess
    --                  THEN
    --                     -- raise_error('here');
    --                     v_facoblig_excess := v_facoblig_excess;
    --                     v_facnorml_excess :=
    --                               v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
    --                  ELSE
    --                     v_facoblig_excess := v_amt_to_reinsure;
    --                     v_facnorml_excess := 0;
    --                  END IF;
    --               ELSE
    --                  DBMS_OUTPUT.put_line ('ZZZZZZZZZZZZZZZZZZZ');
    --                  v_facoblig_excess :=
    --                           v_facoblig_limit - NVL (v_total_facoblig_ceded, 0);
    --                  v_facnorml_excess :=
    --                       NVL (v_amt_to_reinsure, 0)
    --                       - NVL (v_facoblig_excess, 0);
    --               END IF;
    --
    ----                    v_avail_fulc_bal :=NVL(v_facnorml_excess,0)-NVL(cur_all_risks_rec.prrd_prev_facre_si,0);
    --
    ----                   IF v_rsk_excl = 'Y' THEN
    ----                        v_avail_fulc_bal :=0;
    ----                   END IF;
    ------
    ----                 BEGIN
    ----                    SELECT SUM(DECODE(SIGN(FC_PREM_AMT),1,ABS(NVL(fc_amount,0)),-ABS(NVL(fc_amount,0))))
    ----                      INTO v_prev_fc_amnt
    ----                      FROM gin_facre_cessions,
    ----                      gin_insured_property_unds
    ----                     WHERE FC_IPU_CODE=IPU_CODE
    ----                     and IPU_ID = cur_all_risks_rec.ipu_id
    ----                     AND IPU_UW_YR=cur_all_risks_rec.IPU_UW_YR ;
    ----                 EXCEPTION
    ----                    WHEN OTHERS
    ----                    THEN
    ----                       v_prev_fc_amnt := 0;
    ----                 END;
    --
    ----            IF NVL(v_tot_risk_si,0) > NVL(v_trans_sign*v_trt_si_pcur,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0) THEN
    ----                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trt_si_pcur,0)+NVL(v_net_ret,0),0));
    ----            ELSE
    ----             v_avail_fulc_bal :=NVL(v_prev_fc_amnt,0);
    ----            END IF;
    --DBMS_OUTPUT.put_line (   'v_facnorml_excess='
    --                                  || v_facnorml_excess
    --                                  || 'v_ipu_reinsure_amt='
    --                                  || v_ipu_reinsure_amt
    --                                  || 'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal);
    --                v_excess_pct := ROUND (  (  NVL (v_facnorml_excess, 0) + NVL (v_avail_fulc_bal, 0)) / NVL(v_tot_risk_si,0) * 100, 4 );
    --                IF v_gross_ret = 0 THEN
    --                   v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_risk_si,0) * 100,   4   );
    --                ELSE
    --                    v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_risk_si,0)  * 100,   4   );
    --                END IF;
    --              v_gross_ret_is := NVL (v_gross_ret, cur_all_risks_rec.prrd_gross_comp_retention);
    --               SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ) INTO v_comp_net_rate FROM DUAL;
    --
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))   OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0 THEN
    --                   v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    --               END if ;
    --       DBMS_OUTPUT.put_line (   'v_comp_net_prem='
    --                                  || v_comp_net_prem
    --                                  || 'v_gross_ret_is='
    --                                  || v_gross_ret_is
    --                                  || 'v_ret_rate='
    --                                  || v_ret_rate
    ----                                  || 'v_prev_fc_amnt='
    ----                                  || v_prev_fc_amnt
    --                                  || 'v_excess_pct='
    --                                  || v_excess_pct
    --                                  || 'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal);
    --     DBMS_OUTPUT.put_line (   'v_tot_risk_si='
    --                                  || v_tot_risk_si
    --                                  || 'v_trt_si_pcur='
    --                                  || v_trt_si_pcur
    --                                  || 'prrd_prev_ri_si='
    --                                  || cur_all_risks_rec.prrd_prev_ri_si
    --                                  || 'v_net_ret='
    --                                  || v_net_ret
    ----                                  || 'v_prev_fc_amnt='
    ----                                  || v_prev_fc_amnt
    --                                  );
    ----             IF NVL(v_gross_ret_is,0) =0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0 */ AND NVL(v_ret_rate,0) <> 0 THEN
    ----                 v_excess_pct := ROUND(NVL(v_prev_fc_amnt,0)/NVL(v_tot_risk_si,0)*100,4);
    ----                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trans_sign*v_trt_si_pcur,0)+abs(NVL(cur_all_risks_rec.prrd_prev_ri_si,0))+NVL(v_net_ret,0),0)- NVL(v_prev_fc_amnt,0));
    ----                 v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0)+NVL(v_trt_si_pcur,0),0));
    ----                v_net_ret := 0;
    ----                  v_excess_pct :=ROUND (  ( NVL (v_avail_fulc_bal, 0)  )   / NVL (v_tot_risk_si, 0)* 100,4 );
    ----           END IF;
    -- DBMS_OUTPUT.put_line (  'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal|| 'v_facnorml_excess='
    --                                  || v_facnorml_excess);
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = v_facnorml_excess + NVL (v_avail_fulc_bal, 0),
    --                      prrd_facoblig_excess = v_facoblig_excess,
    --                      --PRRD_FACOBLIG_USER_EXCESS =v_facoblig_excess,
    --                      prrd_excess_pct = v_excess_pct,
    --                      prrd_comp_retention = v_net_ret,
    --                      prrd_gross_comp_retention = v_gross_ret_is,--v_gross_ret,
    --                      prrd_com_retention_rate = v_ret_rate,--ROUND (  NVL (prrd_gross_comp_retention, 0) / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))  * 100,  4  ),
    --                      prrd_comp_net_rate = v_ret_rate,-- ROUND (  v_net_ret  / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))   * 100,    4  ),
    --                      prrd_net_prem = v_comp_net_prem--  ( (v_net_ret /DECODE( (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0)) ,0,1, (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))) * 100  )   * NVL (prrd_ri_prem, 0) / 100  )                                                 --,
    --                --PRRD_FACRE_AMOUNT =v_facoblig_excess
    --               WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND prrd_code = v_prrd_code
    --                  AND prrd_tran_no = v_tran_no;
    --
    --               DELETE gin_facre_cessions
    --                     WHERE fc_ipu_code = cur_all_risks_rec.ipu_code
    --                       AND fc_facre_type = 'O';
    --
    --            END IF;
    --            fix_rounding_errors(cur_all_risks_rec.prrd_codE);
    ----            -- IF SI TO FACRE IS ZERO AND PREMIUM IS NOT ZERO, THEN POPULATE THE PREVIOUS FACRE ACCOUNTS
    ------            raise_error(v_avail_fulc_bal||'v_excess_pct='||v_excess_pct);
    ----/*populate facre automatically where fac SI is zero and rate <> zero*/
    ----            IF NVL (v_avail_fulc_bal, 0) =0  THEN
    ----                FOR cur_prev_facre_rec IN cur_prev_facre(cur_all_risks_rec.ipu_prev_ipu_code) LOOP
    ----                    IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','CN')) THEN
    ----                       v_fc_prem := round(cur_prev_facre_rec.fc_rate*NVL (cur_all_risks_rec.prrd_ri_prem, 0)/100, v_rnd );
    ----                    ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    ----                       v_fc_prem:=ROUND((cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)-(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)+(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    ----                    END if ;
    ----
    ------                RAISE_ERROR(cur_prev_facre_rec.FC_RATE||';'||cur_all_risks_rec.ipu_prev_ipu_code);
    ----                     INSERT INTO gin_facre_cessions
    ----                        (fc_code, fc_agnt_agent_code, fc_amount,
    ----                         fc_wef, fc_ipu_code, fc_agent_sht_desc,
    ----                         fc_rate, fc_comm_rate, fc_comm_amt, fc_don_by,
    ----                         fc_dc_no, fc_prem_amt, fc_pol_batch_no, fc_uwyr,
    ----                         fc_ggt_tran_no, fc_tran_type, fc_scl_code, fc_amt_or_rate, fc_prrd_code,
    ----                         fc_auth_dt, fc_prev_si, fc_prev_rate,  fc_refund_prem, fc_refund_comm, fc_prev_amount,
    ----                         fc_wet, fc_prev_comm_rate, fc_prev_fc_code,  fc_earthqke_prem, fc_earthqke_comm_rate,
    ----                         fc_earthqke_comm, fc_net_less_eq_comm,
    ----                         fc_net_less_eq_prem, fc_facre_type, fc_accepted_date, fc_accepted, fc_prem_diff_amt,
    ----                         fc_vat_amt, fc_vat_rate, fc_mngmnt_type, fc_mngmnt_value, fc_rein_tax_type,
    ----                         fc_rein_tax_value, fc_mngmnt_amt,fc_rein_tax_amt, fc_override_prem,
    ----                         fc_override_type, fc_override_value, fc_remark, fc_whtx_rate, fc_whtx_amt
    ----                        )
    ----                 VALUES (gin_fc_code_seq.NEXTVAL, cur_prev_facre_rec.fc_agnt_agent_code, 0,
    ----                         cur_all_risks_rec.ipu_wef, cur_all_risks_rec.ipu_code, cur_prev_facre_rec.fc_agent_sht_desc,
    ----                         cur_prev_facre_rec.fc_rate, cur_prev_facre_rec.fc_comm_rate, round(cur_prev_facre_rec.fc_comm_rate*v_fc_prem/100,v_rnd), v_user,
    ----                         NULL, v_fc_prem, v_batch_no, cur_all_risks_rec.pol_uw_year,
    ----                         cur_all_risks_rec.prrd_tran_no, cur_all_risks_rec.pol_policy_status,
    ----                         cur_all_risks_rec.ipu_sec_scl_code, cur_prev_facre_rec.fc_amt_or_rate, cur_all_risks_rec.prrd_code,
    ----                         NULL, NULL, cur_prev_facre_rec.fc_rate,
    ----                         0, 0, cur_prev_facre_rec.fc_prem_amt,
    ----                         cur_all_risks_rec.ipu_wet, cur_prev_facre_rec.fc_comm_amt, cur_prev_facre_rec.fc_code,
    ----                         0, 0,
    ----                         0, 0,
    ----                         0, cur_prev_facre_rec.fc_facre_type,
    ----                         cur_all_risks_rec.ipu_wef, 'Y', 0,
    ----                         0, 0, null,
    ----                         0, null,
    ----                         0, 0,
    ----                         0, 0,
    ----                         null, 0,
    ----                         'Auto facre cedding as si is zero', 0, 0
    ----                        );
    ----                  END LOOP;
    ----             END IF;
    --      --   END IF; FOR ZERO
    --      END LOOP;
    --
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         --DBMS_OUTPUT.PUT_LINE('Hata miti ni dawa...You are a genius...you just did a Zero devide..',no_acknowledge);
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0.Continue if covered by XOL...'
    --            );
    --   END;
    --   PROCEDURE reinsure_risks (
    --      v_batch_no           IN   NUMBER,
    --      v_cur_code           IN   NUMBER,
    --      v_base_cur_code      IN   NUMBER,
    --      v_pol_cur_sht_desc   IN   VARCHAR2,
    --      v_tran_no            IN   NUMBER,
    --      v_tran_type          IN   VARCHAR2,
    --      v_ipucode IN NUMBER
    --   )
    --   IS
    --      v_d                           NUMBER;
    --      v_exhange_rate                NUMBER          := 1;
    --      --v_tot_si                      NUMBER          := 0;
    --      v_amt_to_reinsure             NUMBER          := 0;
    --      --v_trt_rate                    NUMBER;
    --      v_trt_si_tcur                 NUMBER          := 0;
    --      v_accprd                      NUMBER;
    --      v_acpr_sht_desc               VARCHAR2 (200);
    --      v_cession_rate                NUMBER          := 0;
    --      v_trt_prem_tcur               NUMBER          := 0;
    --      v_trt_com_tcur                NUMBER          := 0;
    --      v_trt_si_pcur                 NUMBER          := 0;
    --      v_trt_prem_pcur               NUMBER          := 0;
    --      v_trt_com_pcur                NUMBER          := 0;
    --      v_ptax_amount                 NUMBER          := 0;
    --      v_ptax_tcur                   NUMBER          := 0;
    --      v_ctax_amount                 NUMBER          := 0;
    --      v_ctax_tcur                   NUMBER          := 0;
    --      v_ret_limit                   NUMBER          := 0;
    --      v_gross_ret                   NUMBER          := 0;
    --      v_net_ret                     NUMBER          := 0;
    --      v_prec_tax                    NUMBER          := 0;
    --      v_crec_tax                    NUMBER          := 0;
    ----      v_trt_rpremtax_pcur           NUMBER          := 0;
    ----      v_part_rpremtax_pcur          NUMBER          := 0;
    ----      v_trt_premtax_pcur            NUMBER          := 0;
    ----      v_part_premtax_pcur           NUMBER          := 0;
    --      v_prem_tax                    NUMBER;
    --      v_pol_com                     NUMBER          := 0;
    --      v_prrd_code                   NUMBER;
    --      v_trt_rprem_tax               NUMBER          := 0;
    --      v_trt_prem_tax                NUMBER          := 0;
    --      v_no_ri_si                    VARCHAR2 (15);
    --      v_bind_max_exp                NUMBER          := 0;
    --      v_dummy                       NUMBER (2)      := 0;
    --      v_pool_amt                    NUMBER          := 0;
    --      v_trt_eq_prem_pcur            NUMBER          := 0;
    --      v_trt_net_less_eq_prem_pcur   NUMBER          := 0;
    --      v_trt_net_less_eq_comm_pcur   NUMBER          := 0;
    --      v_trt_eq_com_pcur             NUMBER          := 0;
    --      v_rnd                         NUMBER          := 0;
    --      v_bcur_rnd                    NUMBER          := 0;
    --      v_cnt                         NUMBER          := 0;
    ----      v_part_si_pcur                NUMBER          := 0;
    ----      v_part_si_tcur                NUMBER          := 0;
    ----      v_part_comm_pcur              NUMBER          := 0;
    ----      v_part_comm_tcur              NUMBER          := 0;
    ----      v_part_prem_pcur              NUMBER          := 0;
    ----      v_part_prem_tcur              NUMBER          := 0;
    ----      v_part_code                   NUMBER;
    --      v_facoblig_excess             NUMBER          := 0;
    --      v_facnorml_excess             NUMBER          := 0;
    --      v_total_facoblig_ceded        NUMBER          := 0;
    --      v_special_ret_limit           NUMBER          := 0;
    --      v_special_ret_diff            NUMBER          := 0;
    --      v_q                           NUMBER;
    --      v_zero_devide                 EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      v_ctl_si_start_from           NUMBER;
    --      v_ctl_limit_amt               NUMBER;
    --      v_pool_si                     NUMBER;
    --      v_pool_prem                   NUMBER;
    --      v_pool_rate                   NUMBER;
    --      v_facoblig_limit              NUMBER;
    --      v_avail_fulc_bal              NUMBER;
    ----      v_part_manafee_pcur           NUMBER          := 0;
    ----      v_part_manafee_tcur           NUMBER          := 0;
    --      v_rein_cur_param              VARCHAR2 (1);
    --      v_ipu_reinsure_amt    NUMBER          := 0;
    --      v_fac_amt                NUMBER            := 0;
    --      v_risk_count             NUMBER            :=0;
    --      v_rsk_excl                VARCHAR2(1);
    --      v_rsk_excl_param     VARCHAR2(1);
    ----      v_trpa_prem_tax_rate   NUMBER;
    ----      v_trpa_part_type     VARCHAR2(1);
    --
    --      v_trt_cur_code  NUMBER;
    --      v_as_code NUMBER;
    --       v_bcur_code  number ;
    --       v_bcur_symbol  VARCHAR2(10);
    --       v_trt_cur_rate number ;
    --
    --        v_rc_code NUMBER;
    --        v_retention_amt NUMBER;
    --        v_treat_limit_amt NUMBER;
    --        v_excess_pct NUMBER;
    --     --   v_prev_fc_amnt NUMBER;
    --        v_prev_si NUMBER;
    --        v_ret_rate NUMBER;
    --        v_tot_risk_si NUMBER;
    --        v_endors_si NUMBER;
    --
    --        v_gross_ret_is NUMBER;
    --        v_comp_net_rate NUMBER;
    --        v_comp_net_prem NUMBER;
    --
    --        v_ta_type VARCHAR2(2);
    --        v_prev_net_retention NUMBER;
    --        v_trans_sign NUMBER;
    --
    --       v_user VARCHAR(30);
    --       v_ri_cur_rate NUMBER;
    --       v_ri_prem_formular varchar2(20);
    --       v_fc_prem number;
    --       v_prev_wef date;
    --       v_prev_wet date;
    --
    ----select all single the policy risks that have not been reinsured and are ready for reinsurance
    --      CURSOR cur_all_risks
    --      IS
    --         SELECT ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  prrd_gross_comp_retention gross_comp_ret,
    --                  ipu_pol_est_max_loss, prrd_avail_fulc_bal, prrd_ri_prem,
    --                  ipu_sec_scl_code, ipu_related_ipu_code, ipu_bp, ipu_gp,
    --                  ipu_fp, ipu_fap, ipu_nett_premium, ipu_eml_si,
    --                  ipu_cummulative_reins, ipu_sec_sect_code, ipu_sect_sht_desc,
    --                  ipu_cur_code, prrd_facre_amount, ipu_reinsure_amt,
    --                  prrd_gross_comp_retention, ipu_prem_tax, ipu_bind_code,
    --                  ipu_max_exposure, prrd_earthquake_prem,
    --                  prrd_ri_net_less_eq_prem, pol_prem_tax, pol_binder_policy,
    --                  pol_cur_symbol, pol_cur_code, prrd_facoblig_excess,
    --                  prrd_facoblig_limit, prrd_code, ipu_override_ri_retention,
    --                  prrd_facoblig_user_excess, prrd_facoblig_alloc_chk,prrd_prev_facre_si,prrd_prev_ri_si,
    --                  pol_exch_rate_fixed,pol_cur_rate,ipu_overrideride_ret_type,ipu_uw_yr,ipu_prev_ipu_code,
    --                  --get_risk_comp_retention(ipu_id,ipu_uw_yr,ipu_code)
    --                  prrd_prev_net_retention,
    --                  ipu_id,prrd_comp_net_rate,ipu_rc_code,
    --                  ipu_eml_based_on,prrd_comp_ret_edited,pol_policy_status,
    --                  prrd_tran_no,pol_uw_year,prrd_cumm_ri_prem,prrd_ri_prev_prem,
    --                  prrd_net_prev_prem,prrd_prev_facre_prem,scl_no_ri_si,prrd_prev_ret_rate
    --             FROM gin_policies,
    --                  gin_insured_property_unds,
    --                  gin_policy_risk_ri_dtls,gin_sub_classes
    --            WHERE pol_batch_no = ipu_pol_batch_no
    --              AND ipu_code = prrd_ipu_code
    --              and ipu_sec_scl_code = scl_code
    --              and ipu_code = v_ipucode
    --              AND prrd_tran_no = v_tran_no
    ----              AND ipu_reinsured = 1
    --              AND ipu_pol_batch_no = v_batch_no
    --         ORDER BY ipu_code;

    ----AND IPU_CUMMULATIVE_REINS ='N'
    ----AND IPU_RELR_CODE IS NULL
    ---- select risk treaty setup
    ---- get teaty setups
    --      CURSOR cur_treaties (
    --         v_ipu_code   IN   NUMBER,
    --         v_type       IN   NUMBER,
    --         v_prrd            NUMBER
    --      )
    --      IS
    --         SELECT   clt_ta_sht_desc, clt_scl_code, clt_retention_limit,
    --                  trt_code, trt_sht_desc, trt_level, rei_code, rei_trt_code,
    --                  rei_trt_sht_desc, rei_comm_rate, rei_limit, ptotr_rate,
    --                  rei_rate_type, rei_quake_limit, rei_retained_prem,
    --                  rei_cur_code, rei_cur_symbol, rei_as_code, rei_ta_code,
    --                  rei_trs_code, rei_trs_sht_desc,
    --                  NVL (rei_si_start_from, 0) rei_si_start_from,
    --                  rei_ri_prem_tax_rate, rei_ri_prem_tax_div_fact,
    --                  ptotr_property_id, ptotr_uwyr, ptotr_ipu_code,
    --                  ptotr_pol_batch_no, ptotr_pol_policy_no,
    --                  ptotr_pol_ren_endos_no, ptotr_sect_code,
    --                  ptotr_risk_cur_code, rei_earthqke_comm_rate, ptotr_code,
    --                  ptotr_ctl_code, rei_mgt_fee,ptotr_allowed_rate,
    --                  PTOTR_PREV_CESSION_RATE
    --             FROM gin_policy_rein_risk_details, gin_treaty_setups_vw
    --            WHERE ptotr_clt_scl_code = clt_scl_code
    --              AND ptotr_rei_code = rei_code
    --              AND ptotr_ipu_code = v_ipu_code
    --              AND trt_code = v_type
    --              AND ptotr_prrd_code = v_prrd
    --         ORDER BY trt_level, rei_si_start_from;

    ----get retention limit
    --      CURSOR cur_arrangement_det (v_ipu_code NUMBER, v_scl_code NUMBER)
    --      IS
    --         SELECT DISTINCT clt_retention_limit
    --                    FROM gin_class_treaties, gin_policy_rein_risk_details
    --                   WHERE clt_as_code = ptotr_as_code
    --                     AND ptotr_ipu_code = v_ipu_code
    --                     AND clt_scl_code = v_scl_code;

    ----      CURSOR cur_participant_rate (v_rei_code IN NUMBER)
    ----      IS
    ----         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    ----                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    ----                trpa_trs_code, trpa_trs_sht_desc,trpa_prem_tax_rate,trpa_part_type,trpa_code
    ----           FROM gin_treaty_participants
    ----          WHERE trpa_rei_code = v_rei_code;

    -----get tax rates
    --      CURSOR cur_tax_rates
    --      IS
    --         SELECT taxr_rate, taxr_wef, taxr_wet, trnt_application_lvl,
    --                trnt_type, taxr_min_amt, taxr_round_nxt, taxr_trnt_code,
    --                taxr_division_factor
    --           FROM gin_tax_rates, gin_transaction_types
    --          WHERE trnt_code = taxr_trnt_code
    --            AND (trnt_type LIKE 'WTHTX%' OR trnt_type IN ('PRP'))
    --            AND (   (TRUNC (SYSDATE) BETWEEN taxr_wef AND taxr_wet)
    --                 OR (TRUNC (SYSDATE) >= taxr_wef AND taxr_wet IS NULL)
    --                );
    --
    --      CURSOR cur_prev_facre(v_ipu_code in number) IS SELECT * FROM gin_facre_cessions
    --      WHERE fc_ipu_code=v_ipu_code;
    ----R0 = Reinsurance tax
    ----R1 = Reinsurance premium tax
    ----R2 = Reinsurance interest tax
    ----R3 = Reinsurance commission tax
    ----v_prev_ipu_reinsure_amt NUMBER;
    --   BEGIN

    --      BEGIN
    --         SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('CHECK_RISK_EXCL_ZONES') INTO v_rsk_excl_param FROM DUAL;
    --      EXCEPTION WHEN OTHERS
    --      THEN
    --          v_rsk_excl_param := 'N';
    --      END;
    --
    --
    --      IF v_rsk_excl_param = 'Y'
    --      THEN
    --          BEGIN
    --           SELECT COUNT(*) INTO v_risk_count
    --               FROM gin_insured_property_unds
    --              WHERE ipu_pol_batch_no = v_batch_no
    --                AND ipu_quza_code IN (
    --                       SELECT tuqz_quza_code
    --                         FROM gin_treaty_uncvd_quake_zones,
    --                              gin_treaty_setups,
    --                              gin_class_treaties
    --                        WHERE tuqz_ta_code = rei_ta_code
    --                          AND tuqz_as_code = rei_as_code
    --                          AND clt_scl_code = ipu_sec_scl_code
    --                          AND clt_as_code = rei_as_code
    --                          AND rei_uw_year = TO_NUMBER (TO_CHAR (ipu_wef, 'RRRR'))
    --                          )
    --                         AND ipu_quza_code IS NULL;
    --          EXCEPTION WHEN OTHERS
    --          THEN
    --            v_risk_count := 0;
    --          END;
    --      END IF;
    --
    --      IF v_risk_count > 0 THEN
    --        v_rsk_excl := 'Y';
    --      ELSE
    --        v_rsk_excl := 'N';
    --      END IF;

    --      v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --      v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar  ('REINS_IN_BASE_CURRENCY')
    --           INTO v_rein_cur_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_rein_cur_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Treaty  parameter...');
    --      END;
    --
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar  ('RI_PREM_FORMULAR')
    --           INTO v_ri_prem_formular
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_ri_prem_formular := null;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Reinsurance Premium Calculation Option...');
    --      END;

    --      FOR cur_all_risks_rec IN cur_all_risks LOOP
    --
    --       begin
    --        select  ipu_wef, ipu_wet into v_prev_wef,v_prev_wet
    --        from  gin_insured_property_unds
    --        where ipu_code= cur_all_risks_rec.ipu_prev_ipu_code;
    --        exception when others then
    --        null;
    --        end;
    --         v_prem_tax := NVL (cur_all_risks_rec.ipu_prem_tax, 0);
    --         v_bind_max_exp := 0;
    --         v_dummy := 0;

    --         IF     NVL (v_bind_max_exp, 0) = 0
    --            AND cur_all_risks_rec.pol_binder_policy = 'Y'
    --         THEN
    --            SELECT COUNT ('x')
    --              INTO v_dummy
    --              FROM gin_binder_details
    --             WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --               AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;

    --            IF NVL (v_dummy, 0) > 1
    --            THEN
    --               raise_error
    --                  ('Setup Error, Maximum accumulation defined more than once for this binder'
    --                  );
    --            ELSIF NVL (v_dummy, 0) = 1
    --            THEN
    --               BEGIN
    --                  SELECT db_max_limit
    --                    INTO v_bind_max_exp
    --                    FROM gin_binder_details
    --                   WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                     AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --               EXCEPTION
    --                  WHEN OTHERS THEN
    --                     raise_error
    --                        ('Unable to retrieve the maximum exposure for the bordereaux scl'
    --                        );
    --               END;
    --            ELSIF NVL (v_dummy, 0) = 0
    --            THEN
    --               BEGIN
    --                  SELECT NVL (bind_max_exposure, 0)
    --                    INTO v_bind_max_exp
    --                    FROM gin_binders
    --                   WHERE bind_code = cur_all_risks_rec.ipu_bind_code;
    --               EXCEPTION
    --                  WHEN OTHERS THEN
    --                     raise_error
    --                        ('Unable to retrieve the maxmium exposure for the bordereaux'
    --                        );
    --               END;
    --            END IF;

    --            IF     NVL (v_bind_max_exp, 0) > 0
    --               AND NVL (v_bind_max_exp, 0) <
    --                                   NVL (cur_all_risks_rec.ipu_max_exposure, 0)
    --            THEN
    --               raise_error (   'The maximum exposure amount for the risk '
    --                            || cur_all_risks_rec.ipu_property_id
    --                            || ' is greater than the allowed limit of '
    --                            || v_bind_max_exp
    --                           );
    --            END IF;
    --         END IF;
    --------------------
    --

    --         IF NVL (cur_all_risks_rec.scl_no_ri_si, 'N') = 'N' AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0 THEN
    --            raise_error  ('No reinsure amount specified, cannot reinsure this risk');
    --         END IF;

    --         BEGIN
    --            v_prrd_code := NULL;

    --            SELECT prrd_code,PRRD_AS_CODE
    --              INTO v_prrd_code,v_as_code
    --              FROM gin_policy_risk_ri_dtls
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_tran_no = v_tran_no;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               raise_error
    --                        ('Error :- Unable Please populate treaties again....');
    --         END;
    --         BEGIN
    --           SELECT DISTINCT  ta_cur_code,TA_TYPE,REI_CUR_RATE
    --                      INTO  v_trt_cur_code,v_ta_type,v_ri_cur_rate
    --                      FROM gin_class_treaties,
    --                           gin_arrangement_setups,
    --                           gin_treaty_arrangements,
    --                           gin_treaty_setups -- for now... this needs to be looked into afresh
    --                     WHERE as_ta_code = ta_code
    --                       AND clt_as_code = as_code
    --                       AND clt_scl_code =  cur_all_risks_rec.ipu_sec_scl_code
    --                       AND AS_CODE =v_as_code
    --                       AND REI_AS_CODE=as_code
    --                       AND REI_TA_CODE = ta_code
    --                       AND as_uwyr = cur_all_risks_rec.ipu_uw_yr;
    --        EXCEPTION
    --           WHEN NO_DATA_FOUND
    --           THEN
    --             NULL;
    --           WHEN OTHERS
    --           THEN
    --              raise_error
    --                 ('Unable to retrieve the arrangement retention limit'
    --                 );
    --        END;
    --
    --          IF NVL(v_rein_cur_param,'N') = 'Y' AND v_trt_cur_code != cur_all_risks_rec.pol_cur_code THEN
    --             IF v_bcur_code =v_trt_cur_code THEN
    --                 v_ipu_reinsure_amt :=( NVL(cur_all_risks_rec.ipu_reinsure_amt,0));
    --             ELSE
    --                 v_ipu_reinsure_amt :=( NVL(cur_all_risks_rec.ipu_reinsure_amt,0)) / cur_all_risks_rec.pol_cur_rate;
    --             END IF;
    --         ELSE
    --             v_ipu_reinsure_amt := NVL(cur_all_risks_rec.ipu_reinsure_amt,0);
    --         END IF;
    --
    --         SELECT  SIGN(NVL (cur_all_risks_rec.prrd_ri_prem, 0)) INTO v_trans_sign FROM DUAL;

    --         IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code THEN
    --            IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y')  THEN
    --              -- v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt / cur_all_risks_rec.pol_cur_rate,  v_rnd  );
    --               v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
    --            ELSE
    --              v_trt_cur_rate := get_exchange_rate (v_bcur_code,v_trt_cur_code);
    --             v_exhange_rate :=v_trt_cur_rate;
    --          --v_ipu_reinsure_amt := ROUND (  v_ipu_reinsure_amt / nvl(v_ri_cur_rate,v_trt_cur_rate),  v_rnd );
    --            END IF;
    --         ELSE
    --            v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
    --         END IF;

    --         v_pool_si := get_risk_ri_pool (cur_all_risks_rec.prrd_code);
    --         v_pool_prem := get_ri_pool_prem (cur_all_risks_rec.prrd_code);
    --         v_pool_rate := get_ri_pool_rate (cur_all_risks_rec.prrd_code);
    --         v_prev_net_retention :=NVL(cur_all_risks_rec.prrd_prev_net_retention,0);

    ----          SELECT decode(NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+ NVL(v_prev_net_retention,0)),0,v_ipu_reinsure_amt,NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(v_prev_net_retention,0)))
    ----          INTO v_tot_si FROM DUAL;
    --
    --         v_tot_risk_si :=v_ipu_reinsure_amt;
    --         v_avail_fulc_bal := 0;--NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0);
    --         DBMS_OUTPUT.put_line (   'v_ipu_reinsure_amt=' || v_ipu_reinsure_amt);
    --         v_amt_to_reinsure :=
    --            (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --             - NVL (v_avail_fulc_bal, 0)
    --             - (NVL (cur_all_risks_rec.prrd_facre_amount, 0))
    --             - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --             - NVL (v_pool_si, 0)  );
    --          DBMS_OUTPUT.put_line (   'prrd_facre_amount=' || cur_all_risks_rec.prrd_facre_amount);
    --         DBMS_OUTPUT.put_line (   'v_amt_to_reinsure=' || v_amt_to_reinsure || 'v_avail_fulc_bal=' || v_avail_fulc_bal  || 'v_pool_si=' || v_pool_si || 'v_amt_to_reinsure='  || v_amt_to_reinsure   );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)- NVL (cur_all_risks_rec.prrd_facre_amount, 0) - NVL (cur_all_risks_rec.prrd_facoblig_excess,0  ) );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)  - NVL (cur_all_risks_rec.prrd_facre_amount, 0) );

    --         IF NVL (v_amt_to_reinsure, 0) < 0 THEN
    --            IF NVL (v_pool_si, 0) >
    --                  (  NVL (v_ipu_reinsure_amt/*cur_all_risks_rec.ipu_reinsure_amt*/, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                  )
    --            THEN
    --              raise_error ('The pool rate specified is greater than the available excess on risk. Please remove some of the facre cessions..'||v_pool_si||';'||v_ipu_reinsure_amt||';'||cur_all_risks_rec.prrd_facre_amount);
    --            ELSIF NVL (v_pool_si, 0) <
    --                    (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --                    )
    --            THEN
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = 0
    --                WHERE prrd_code = v_prrd_code;

    --               v_avail_fulc_bal := 0;
    --               v_amt_to_reinsure :=
    --                  (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --                   - NVL (v_pool_si, 0)
    --                  );
    --            ELSIF NVL (v_pool_si, 0) <
    --                    (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                    )
    --            THEN
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = 0,
    --                      prrd_facoblig_excess = 0
    --                WHERE prrd_code = v_prrd_code;

    --               v_avail_fulc_bal := 0;
    --               v_amt_to_reinsure :=
    --                  (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                   - NVL (v_pool_si, 0)
    --                  );
    --            END IF;
    --         END IF;

    --         DBMS_OUTPUT.put_line (   'v_amt_to_reinsure='
    --                               || v_amt_to_reinsure
    --                               || 'v_pool_si='
    --                               || v_pool_si
    --                               || 'v_amt_to_reinsure='
    --                               || v_amt_to_reinsure
    --                              );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facoblig_excess,
    --                                      0
    --                                     )
    --                              );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                              );

    ----RAISE_ERROR(34);
    ----raise_error(v_amt_to_reinsure);
    --         IF NVL (v_amt_to_reinsure, 0) = 0 THEN
    --            UPDATE gin_policy_risk_ri_dtls
    --               SET prrd_com_retention_rate = (100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))),
    --                   prrd_comp_net_rate = (100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))),
    --                   prrd_net_prem =ROUND (  ((100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))) / 100)  * NVL (prrd_ri_prem, 0), 2 )
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_code = v_prrd_code
    --               AND prrd_tran_no = v_tran_no;
    --         END IF;
    ----MANDATORY
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code, 1001,  v_prrd_code  ) LOOP -- Its A Mandatory Type treaty
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    --               -- calculate treaty sum insured in policy currency
    ----                v_tot_si := v_ipu_reinsure_amt;
    --                v_prev_net_retention :=0;
    --               v_trt_si_pcur := v_tot_risk_si * (cur_treaties_rec.ptotr_rate / 100);
    --               v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --               -- Culculate treaty premium
    ----               RAISE_ERROR('v_trt_si_pcur11111='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --               v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;
    ----DBMS_OUTPUT.PUT_LINE('v_cession_rate='||v_cession_rate);
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION'
    --               OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))
    --               OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0
    --               OR (cur_all_risks_rec.POL_POLICY_STATUS ='EN' AND cur_all_risks_rec.ipu_wef=v_prev_wef and cur_all_risks_rec.ipu_wet=v_prev_wet)
    --               THEN
    --                   v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               END if ;
    --            -- calculate mandatory commission
    --               v_trt_net_less_eq_comm_pcur :=
    --                  ROUND ((  (  v_trt_net_less_eq_prem_pcur
    --                             * cur_treaties_rec.rei_comm_rate
    --                            )
    --                          / 100
    --                         ),
    --                         v_rnd
    --                        );
    --               v_trt_eq_com_pcur :=
    --                  ROUND ((  (  v_trt_eq_prem_pcur
    --                             * cur_treaties_rec.rei_earthqke_comm_rate
    --                            )
    --                          / 100
    --                         ),
    --                         v_rnd
    --                        );
    --               --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
    --               v_trt_com_pcur :=   NVL (v_trt_net_less_eq_comm_pcur, 0)  + NVL (v_trt_eq_com_pcur, 0);
    --               v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --               v_amt_to_reinsure := (v_amt_to_reinsure - v_trt_si_tcur);
    --/*********tax part**************************/
    ----------calculate reinsurance tax, reinsurance commission tax part
    --               v_ptax_amount := 0;
    --               v_ctax_amount := 0;
    --               v_ptax_tcur := 0;
    --               v_ctax_tcur := 0;
    --               v_ptax_amount := ROUND (NVL (v_prem_tax, 0), v_rnd);
    --               v_ctax_amount :=
    --                             ROUND (NVL (v_pol_com, 0) * v_cession_rate,
    --                                    v_rnd);
    --               v_ptax_tcur := v_ptax_amount * v_exhange_rate;
    --               v_ctax_tcur := v_ctax_amount * v_exhange_rate;

    --/***********************************************************************/
    --               UPDATE gin_policy_rein_risk_details
    --                  SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                      ptotr_risk_si_tcur =  ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
    --                      ptotr_risk_prem_tcur =  ROUND (cur_all_risks_rec.prrd_ri_prem    * v_exhange_rate,  v_bcur_rnd  ),
    --                      ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                      ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                      ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                      ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                      ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                      ptotr_earthqke_comm_rate =  cur_treaties_rec.rei_earthqke_comm_rate,
    --                      ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                      ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                      ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                      ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                      ptotr_acpr_code = v_accprd,
    --                      ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                      ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                      ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                      ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                      ptotr_ggt_tran_no = v_tran_no,
    --                      ptotr_tran_type = v_tran_type,
    --                      ptotr_earthqke_prem = ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_earthqke_comm = ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_prem = ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_comm = ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                  AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                  AND ptotr_prrd_code = v_prrd_code;

    --/************************start participartion *****/
    ----               v_trt_rpremtax_pcur := 0;
    ----               v_trt_premtax_pcur := 0;

    --

    --              Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                               v_prrd_code,
    --                               cur_treaties_rec.ptotr_code,
    --                               v_trt_si_pcur,
    --                               v_trt_si_tcur,
    --                               v_trt_prem_pcur,
    --                               v_trt_prem_tcur,
    --                               v_trt_com_pcur,
    --                               v_trt_com_tcur,
    --                               cur_all_risks_rec.pol_cur_code,
    --                               cur_all_risks_rec.pol_cur_symbol,
    --                               cur_all_risks_rec.ipu_pol_batch_no,
    --                               cur_all_risks_rec.ipu_pol_policy_no,
    --                               cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                v_tran_no,
    --                                v_tran_type,
    --                               cur_all_risks_rec.ipu_code,
    --                               cur_all_risks_rec.ipu_sec_scl_code,
    --                                v_exhange_rate,
    --                                v_rnd,
    --                                v_bcur_rnd
    --                               );
    --            END LOOP;                                            --- mandatory



    --            /* v_ret_limit := NVL(cur_all_risks_rec.prrd_gross_comp_retention,0)-NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            IF v_amt_to_reinsure > NVL (v_ret_limit, 0) THEN
    --               IF SIGN(NVL(v_ret_limit,0)) =-1 THEN
    --                 v_ret_limit :=0;
    --               END IF;
    --                v_gross_ret := NVL (v_ret_limit, 0);
    --            ELSE
    --               v_gross_ret := v_amt_to_reinsure;
    --            END IF;*/
    --/*get subclass gross retention from the setups. Function get_scl_uwyr_g_ret*/
    --         IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --            IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                IF (v_bcur_code = v_trt_cur_code) THEN
    --                    v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code)/ cur_all_risks_rec.pol_cur_rate ,v_rnd);
    --                 ELSE
    --                    v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code) ,v_rnd);
    --               END IF;
    --            ELSE
    --               v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_trt_cur_code, cur_all_risks_rec.ipu_rc_code) *nvl(v_ri_cur_rate,v_trt_cur_rate),v_rnd);
    --            END IF;
    --         ELSE
    --              v_retention_amt := get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_cur_code, cur_all_risks_rec.ipu_rc_code);
    --         END IF;
    --            DBMS_OUTPUT.put_line (   '1 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_prrd_code='
    --                                  || v_prrd_code
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'prrd_gross_comp_retention='
    --                                  || cur_all_risks_rec.prrd_gross_comp_retention
    --                                  || 'v_retention_amt='
    --                                  || v_retention_amt
    --                                  || 'prrd_comp_ret_edited='
    --                                  || cur_all_risks_rec.prrd_comp_ret_edited
    --                                  || 'v_ret_limit='
    --                                  || v_ret_limit
    --                                 );
    --
    --           IF NVL(cur_all_risks_rec.prrd_gross_comp_retention,0) <> NVL(v_retention_amt,0) /*AND NVL(cur_all_risks_rec.prrd_comp_ret_edited,'N') ='Y' cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */THEN
    --           v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --            END IF;
    --       --v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --            IF v_amt_to_reinsure < v_retention_amt THEN
    --                v_ret_limit := NVL(v_amt_to_reinsure,0);---NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            ELSE
    --                v_ret_limit := v_retention_amt;-- -NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            END IF;
    --DBMS_OUTPUT.put_line (   '1 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_ipu_reinsure_amt='
    --                                  || v_ipu_reinsure_amt
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'prrd_gross_comp_retention='
    --                                  || cur_all_risks_rec.prrd_gross_comp_retention
    --                                  || 'v_retention_amt='
    --                                  || v_retention_amt
    --                                  || 'prrd_comp_ret_edited='
    --                                  || cur_all_risks_rec.prrd_comp_ret_edited
    --                                  || 'v_ret_limit='
    --                                  || v_ret_limit
    --                                 );
    --           IF v_amt_to_reinsure > NVL (v_ret_limit, 0) THEN
    --               IF SIGN(NVL(v_ret_limit,0)) =-1 THEN
    --                 v_ret_limit :=0;
    --               END IF;
    --                v_gross_ret := NVL (v_ret_limit, 0);
    --            ELSE
    --               v_gross_ret := v_amt_to_reinsure;
    --            END IF;
    --
    --             IF NVL(v_amt_to_reinsure,0) > NVL(v_retention_amt,0) THEN
    --               v_amt_to_reinsure := NVL(v_amt_to_reinsure,0)-NVL(v_retention_amt,0);
    --               --     v_amt_to_reinsure := NVL(v_tot_risk_si,0)-NVL(v_retention_amt,0);
    --             ELSE
    --                v_amt_to_reinsure := 0;
    --            END IF;

    --          v_special_ret_limit := v_gross_ret;
    --            v_special_ret_diff := 0;

    --            IF NVL (cur_all_risks_rec.ipu_override_ri_retention, 0) != 0
    --            THEN
    --               v_special_ret_limit :=   NVL (cur_all_risks_rec.ipu_override_ri_retention, 0);

    --               IF v_special_ret_limit > v_amt_to_reinsure
    --               THEN
    --                  v_special_ret_limit := v_amt_to_reinsure;
    --               END IF;

    --               v_special_ret_diff := v_special_ret_limit - v_gross_ret;
    --            END IF;
    ----          v_special_ret_limit :=
    ----                      NVL (v_amt_to_reinsure, 0);
    ----            v_amt_to_reinsure :=
    ----                      NVL (v_amt_to_reinsure, 0)
    ----                      - NVL (v_special_ret_limit, 0);
    ----       RAISE_ERROR(v_special_ret_limit||';'||v_amt_to_reinsure);
    ----           IF v_rsk_excl = 'Y'
    ----           THEN
    ----               v_facnorml_excess    :=v_amt_to_reinsure;
    ----               v_facoblig_limit       :=v_amt_to_reinsure;
    ----               v_fac_amt :=  v_amt_to_reinsure;
    ----               v_amt_to_reinsure :=0;
    ----           END IF;
    --
    --            v_net_ret := 0;
    --            v_gross_ret := NVL (v_gross_ret, 0);
    --            DBMS_OUTPUT.put_line (   '2 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_prrd_code='
    --                                  || v_prrd_code
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                 );
    --            -- process quota share
    --            v_pool_amt := 0;
    ----raise_error(v_gross_ret);
    ----RAISE_ERROR('IPU_CODE='||cur_all_risks_rec.ipu_code||'v_prrd_code='||v_prrd_code);
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code, 1003, v_prrd_code   )
    --            LOOP
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    ----QUOTA SHARE
    ----RAISE_eRROR('ERERE');
    --               -- Its A Quota share Type treaty
    --        -- calculate treaty sum insured in policy currency
    --         v_tot_risk_si := v_ipu_reinsure_amt;
    --
    --         v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --         v_prev_net_retention :=0;
    --               DBMS_OUTPUT.put_line
    --                                (   'startfrrom='
    --                                 || (  NVL
    --                                          (cur_treaties_rec.rei_si_start_from,
    --                                           0
    --                                          )
    --                                     * v_exhange_rate
    --                                    )
    --                                 || 'vgrossret='
    --                                 || NVL (v_gross_ret, 0)
    --                                );
    ---- raise_error(v_ipu_reinsure_amt||';'||v_retention_amt);
    --            IF NVL(v_tot_risk_si,0)=0 THEN
    --                v_tot_risk_si :=100;
    --                v_retention_amt :=100;
    --                v_gross_ret:=100;
    --            END IF;
    --               BEGIN
    --                  SELECT ctl_si_start_from, ctl_limit_amt
    --                    INTO v_ctl_si_start_from, v_ctl_limit_amt
    --                    FROM gin_class_treaty_limits
    --                   WHERE ctl_code = cur_treaties_rec.ptotr_ctl_code;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error fetching class treaty quota share limits....');
    --               END;
    --
    --
    --             IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --                IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                    IF (v_bcur_code = v_trt_cur_code) THEN
    --                       v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   )/ cur_all_risks_rec.pol_cur_rate;
    --                        v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit)/ cur_all_risks_rec.pol_cur_rate;
    ----                        RAISE_ERROR('v_ctl_limit_amt='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
    --                     ELSE
    --                        v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   );
    --                       v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);
    ----                       RAISE_ERROR('v_ctl_limit_amt111='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
    --                   END IF;
    --                ELSE
    --
    --                    v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   )*nvl(v_ri_cur_rate,v_trt_cur_rate);
    --                   v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit)*nvl(v_ri_cur_rate,v_trt_cur_rate);
    ----                   RAISE_ERROR('v_ctl_limit_amt22='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si||'REI LIMIT='||cur_treaties_rec.rei_limit||'v_ri_cur_rate='||v_ri_cur_rate||'v_trt_cur_rate='||v_trt_cur_rate);
    --                END IF;
    --             ELSE
    --                 v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   );
    --                   v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);
    --             END IF;
    --
    --               --IF (NVL(cur_treaties_rec.REI_SI_START_FROM,0) * v_exhange_rate) < NVL(v_gross_ret,0) THEN
    ----         RAISE_ERROR(v_exhange_rate||';'||v_ctl_si_start_from||';'||v_gross_ret);
    --               IF (NVL (v_ctl_si_start_from, 0) * v_exhange_rate) < NVL (v_gross_ret, 0) THEN
    --                    v_gross_ret := NVL (v_gross_ret, 0) - NVL (v_pool_amt, 0);
    --                  IF NVL (v_gross_ret, 0) >  (NVL (v_ctl_limit_amt, 0) * v_exhange_rate ) THEN
    --                     v_trt_si_pcur := ROUND (  NVL (v_ctl_limit_amt, 0) * v_exhange_rate * (cur_treaties_rec.ptotr_rate / 100));
    --                     v_net_ret :=  NVL (v_net_ret, 0) + (  (  NVL (v_ctl_limit_amt, 0) * NVL (v_exhange_rate, 0))  - NVL (v_trt_si_pcur, 0) );
    ----                      RAISE_ERROR('v_trt_si_pcur222='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --                  ELSE
    --                     v_trt_si_pcur := ROUND (  NVL (v_gross_ret, 0)  * (NVL (cur_treaties_rec.ptotr_rate, 0) / 100) );
    --                     v_net_ret :=  NVL (v_net_ret, 0)  + (NVL (v_gross_ret, 0) - NVL (v_trt_si_pcur, 0));
    ----                       RAISE_ERROR('v_trt_si_pcur333='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    ----raise_error (   'v_gross_ret=' || v_gross_ret  || 'v_trt_si_pcur='  || v_trt_si_pcur || 'v_net_ret=' || v_net_ret  );
    --                  END IF;
    --                  v_gross_ret :=v_net_ret;
    ----RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_trt_si_pcur||';'||v_tot_si||';'||v_exhange_rate);
    --                  DBMS_OUTPUT.put_line (   ' v_ipu_code='
    --                                        || cur_all_risks_rec.ipu_code
    --                                        || ' v_type='
    --                                        || 1003
    --                                        || ' v_prrd='
    --                                        || v_prrd_code
    --                                       );
    --                  DBMS_OUTPUT.put_line ('    v_trt_si_pcur=' || v_trt_si_pcur);
    --                  DBMS_OUTPUT.put_line ('    v_net_ret=' || v_net_ret);
    --                  v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --                  -- Culculate treaty premium
    ----                  RAISE_ERROR('v_trt_si_pcur='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --                  v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;
    --
    ----         RAISE_ERROR('v_cession_rate='||v_cession_rate);
    --                   IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION'
    --                   OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))
    --                   OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0
    --                   OR (cur_all_risks_rec.POL_POLICY_STATUS ='EN' AND cur_all_risks_rec.ipu_wef=v_prev_wef and cur_all_risks_rec.ipu_wet=v_prev_wet)
    --                   THEN
    --                       v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                       v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                       v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                       v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --                   ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                       v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                       v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                       v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                       v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                       v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                       v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --                   END if ;
    --
    --                  -- calculate QUOTA commission
    --                  v_trt_net_less_eq_comm_pcur :=
    --                     ROUND ((  (  v_trt_net_less_eq_prem_pcur
    --                                * cur_treaties_rec.rei_comm_rate
    --                               )
    --                             / 100
    --                            ),
    --                            v_rnd
    --                           );
    --                  v_trt_eq_com_pcur :=
    --                     ROUND ((  (  v_trt_eq_prem_pcur
    --                                * cur_treaties_rec.rei_earthqke_comm_rate
    --                               )
    --                             / 100
    --                            ),
    --                            v_rnd
    --                           );
    --                  v_trt_com_pcur :=
    --                       NVL (v_trt_net_less_eq_comm_pcur, 0)
    --                     + NVL (v_trt_eq_com_pcur, 0);
    --                  v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --                  v_pool_amt :=
    --                       NVL (v_pool_amt, 0)
    --                     + (  NVL (v_gross_ret, 0)
    --                        - (NVL (v_net_ret, 0) + NVL (v_trt_si_pcur, 0))
    --                       );
    --            /*********tax part**************************/
    ----------calculate reinsurance tax, reinsurance commission tax part
    --                  v_ptax_tcur := 0;
    --                  v_ctax_tcur := 0;
    --                  v_ptax_amount :=
    --                      ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,
    --                             v_rnd);
    --                  v_ctax_amount :=
    --                       ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,
    --                              v_rnd);
    --                  v_ptax_tcur :=
    --                            ROUND (v_ptax_amount * v_exhange_rate, v_bcur_rnd);
    --                  v_ctax_tcur :=
    --                            ROUND (v_ctax_amount * v_exhange_rate, v_bcur_rnd);

    --/***********************************************************************/
    ----                RAISE_ERROR('v_cession_rate='||v_cession_rate);
    --                  UPDATE gin_policy_rein_risk_details
    --                     SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                         ptotr_risk_si_tcur =
    --                                         ROUND (ptotr_trt_si_tcur, v_bcur_rnd),
    --                         ptotr_risk_prem_tcur =
    --                                       ROUND (ptotr_trt_prem_tcur, v_bcur_rnd),
    --                         ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                         ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                         ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                         ptotr_trt_prem_tcur =
    --                                           ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                         ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                         ptotr_earthqke_comm_rate =
    --                                       cur_treaties_rec.rei_earthqke_comm_rate,
    --                         ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                         ptotr_trt_comm_tcur =
    --                                            ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                         ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                         ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                         ptotr_acpr_code = v_accprd,
    --                         ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                         ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                         ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                         ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                         ptotr_ggt_tran_no = v_tran_no,
    --                         ptotr_tran_type = v_tran_type,
    --                         ptotr_earthqke_prem =
    --                                        ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                         ptotr_earthqke_comm =
    --                                         ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                         ptotr_net_less_eq_prem =
    --                               ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                         ptotr_net_less_eq_comm =
    --                               ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                   WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                     AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                     AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                     AND ptotr_prrd_code = v_prrd_code;

    --            /************************start participartion *****/
    ----------------------insert participarticipation for each risk
    ----                  v_trt_rpremtax_pcur := 0;
    ----                  v_trt_premtax_pcur := 0;

    --

    --                  Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                                   v_prrd_code,
    --                                   cur_treaties_rec.ptotr_code,
    --                                   v_trt_si_pcur,
    --                                   v_trt_si_tcur,
    --                                   v_trt_prem_pcur,
    --                                   v_trt_prem_tcur,
    --                                   v_trt_com_pcur,
    --                                   v_trt_com_tcur,
    --                                   cur_all_risks_rec.pol_cur_code,
    --                                   cur_all_risks_rec.pol_cur_symbol,
    --                                   cur_all_risks_rec.ipu_pol_batch_no,
    --                                   cur_all_risks_rec.ipu_pol_policy_no,
    --                                   cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                    v_tran_no,
    --                                    v_tran_type,
    --                                   cur_all_risks_rec.ipu_code,
    --                                   cur_all_risks_rec.ipu_sec_scl_code,
    --                                    v_exhange_rate,
    --                                    v_rnd,
    --                                    v_bcur_rnd
    --                                   );
    --               END IF;
    --            END LOOP;                                            --qouta share

    ----end quota******************************************************************************************
    --            DBMS_OUTPUT.put_line (   'be sup v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                 );

    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code,
    --                                                  1004,
    --                                                  v_prrd_code
    --                                                 )
    --            LOOP
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    --               v_trt_rprem_tax := 0;
    --               v_trt_prem_tax := 0;
    --               v_trt_com_pcur := 0;
    --
    --                -- Its A Surplus Type treaty
    --               -- calculate treaty sum insured in policy currency
    --               IF cur_treaties_rec.ptotr_rate * v_ret_limit >
    --                                                            v_amt_to_reinsure
    --               THEN
    --                  v_trt_si_pcur := v_amt_to_reinsure;
    --               ELSE
    --                  v_trt_si_pcur := cur_treaties_rec.ptotr_rate * v_ret_limit;
    --               END IF;

    --               -- Its A Surplus Type treaty
    --               -- calculate treaty sum insured in policy currency
    ----               raise_error(v_gross_ret||';'||v_prev_net_retention);
    ----                  IF SIGN( v_gross_ret-NVL(v_prev_net_retention,0)) = 1 THEN
    ----                    v_gross_ret := v_gross_ret-NVL(v_prev_net_retention,0);
    ----                  END IF;
    --       DBMS_OUTPUT.put_line (   ' v_gross_ret='
    --                                        || v_gross_ret
    --                                        || ' v_prev_net_retention='
    --                                        || v_prev_net_retention);
    --/*Get treaty limit from the function gettreatylimit*/
    --                IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --                    IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                        v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code)/cur_all_risks_rec.pol_cur_rate-NVL(v_retention_amt,0);
    --                    ELSE
    --                       v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_trt_cur_code, cur_all_risks_rec.ipu_rc_code)*v_trt_cur_rate-NVL(v_retention_amt,0);
    --                    END IF;
    --                ELSE
    --                    v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_cur_code, cur_all_risks_rec.ipu_rc_code)-NVL(v_retention_amt,0);
    --                END IF;
    --
    --               IF (NVL(v_treat_limit_amt,0) <> NVL(v_retention_amt,0) AND NVL(cur_all_risks_rec.prrd_comp_ret_edited,'N') ='Y') OR (NVL(cur_treaties_rec.ptotr_rate,0)  <> NVL(cur_treaties_rec.ptotr_allowed_rate,0))/* cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */THEN
    --                  v_treat_limit_amt :=  cur_treaties_rec.ptotr_rate * NVL(cur_all_risks_rec.prrd_gross_comp_retention,0);---NVL(v_retention_amt,0);
    --                END IF;
    --              DBMS_OUTPUT.put_line (   ' v_amt_to_reinsure='
    --                                        || v_amt_to_reinsure
    --                                        || ' v_treat_limit_amt='
    --                                        || v_treat_limit_amt
    --                                        || ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur);
    --
    --              IF v_trt_si_pcur > v_treat_limit_amt THEN
    --                    v_trt_si_pcur := v_treat_limit_amt;
    --              ELSif v_amt_to_reinsure <= v_trt_si_pcur AND v_amt_to_reinsure <> 0 THEN
    --                    v_trt_si_pcur := v_amt_to_reinsure;
    ----              ELSE
    ----                v_trt_si_pcur :=0;
    --              END IF;
    --              DBMS_OUTPUT.put_line (   ' v_amt_to_reinsure='
    --                                        || v_amt_to_reinsure
    --                                        || ' v_treat_limit_amt='
    --                                        || v_treat_limit_amt
    --                                        || ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur);

    --              v_trt_si_pcur :=abs(v_trt_si_pcur);
    --              v_tot_risk_si :=abs(v_tot_risk_si);
    --              v_trt_si_tcur := 0;
    --               v_amt_to_reinsure := v_amt_to_reinsure - v_trt_si_pcur;
    --               v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --        -- Culculate treaty premium
    --               v_cession_rate := v_trt_si_pcur/ v_tot_risk_si * 100;
    --       DBMS_OUTPUT.put_line (   ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur
    --                                        || ' v_tot_risk_si='
    --                                        || v_tot_risk_si);
    --       DBMS_OUTPUT.PUT_LINE('v_ri_prem_formular='||v_ri_prem_formular);
    --                IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION'
    --                OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))
    --                OR NVL(cur_all_risks_rec.IPU_FP,0) !=0
    --                OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0
    --                ---HANDLES EN downward effected on the same date as the previous active transaction.
    --                OR (cur_all_risks_rec.POL_POLICY_STATUS ='EN' AND cur_all_risks_rec.ipu_wef=v_prev_wef and cur_all_risks_rec.ipu_wet=v_prev_wet)
    --                THEN
    --                   v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --
    --     DBMS_OUTPUT.put_line (   ' v_cession_rate='
    --                                        || v_cession_rate
    --                                        || ' ipu_GP='
    --                                        || cur_all_risks_rec.ipu_GP
    --                                        || 'PTOTR_PREV_CESSION_RAT='
    --                                        || cur_treaties_rec.PTOTR_PREV_CESSION_RATe
    --                                        || 'PRRD_RI_PREM='
    --                                        || cur_all_risks_rec.PRRD_RI_PREM
    --                                        || 'prrd_ri_net_less_eq_prem='
    --                                        || cur_all_risks_rec.prrd_ri_net_less_eq_prem
    --                                       );
    --                   v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSE
    --                RAISE_ERROR('Reinsurance computation method not setup in parameters. RI_PREM_FORMULAR');
    --               END if ;
    --
    ----               ptotr_trt_prem_pcur

    --                 -- calculate QUOTA commission
    --               v_trt_net_less_eq_comm_pcur :=  ROUND ((  (  v_trt_net_less_eq_prem_pcur   * cur_treaties_rec.rei_comm_rate   )   / 100  ),   v_rnd     );
    --               v_trt_eq_com_pcur :=  ROUND ((  (  v_trt_eq_prem_pcur   * cur_treaties_rec.rei_earthqke_comm_rate    )  / 100   ),  v_rnd );
    --               --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
    --               v_trt_com_pcur :=   NVL (v_trt_net_less_eq_comm_pcur, 0)  + NVL (v_trt_eq_com_pcur, 0);
    --               v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --        --------calculate reinsurance tax, reinsurance commission tax part
    --               v_ptax_tcur := 0;
    --               v_ctax_tcur := 0;
    --               v_ptax_amount := ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,   v_rnd);
    --               v_ctax_amount := ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,  v_rnd);
    --               v_ptax_tcur := v_ptax_amount * v_exhange_rate;
    --               v_ctax_tcur := v_ctax_amount * v_exhange_rate;
    --               v_cession_rate := ROUND (v_trt_si_pcur/ v_tot_risk_si * 100,4);
    --           UPDATE gin_policy_rein_risk_details
    --                  SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                      ptotr_risk_si_tcur = ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
    --                      ptotr_risk_prem_tcur = ROUND (cur_all_risks_rec.prrd_ri_prem, v_bcur_rnd),
    --                      ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                      ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                      ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                      ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                      ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                      ptotr_earthqke_comm_rate = cur_treaties_rec.rei_earthqke_comm_rate,
    --                      ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                      ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                      ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                      ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                      ptotr_acpr_code = v_accprd,
    --                      ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                      ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                      ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                      ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                      ptotr_ggt_tran_no = v_tran_no,
    --                      ptotr_tran_type = v_tran_type,
    --                      ptotr_earthqke_prem =  ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_earthqke_comm =  ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_prem = ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_comm = ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                  AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                  AND ptotr_prrd_code = v_prrd_code;

    --        /************************start participartion *****/
    ----------------------insert participarticipation for each risk
    ----               v_trt_rpremtax_pcur := 0;
    ----               v_trt_premtax_pcur := 0;

    --              Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                               v_prrd_code,
    --                               cur_treaties_rec.ptotr_code,
    --                               v_trt_si_pcur,
    --                               v_trt_si_tcur,
    --                               v_trt_prem_pcur,
    --                               v_trt_prem_tcur,
    --                               v_trt_com_pcur,
    --                               v_trt_com_tcur,
    --                               cur_all_risks_rec.pol_cur_code,
    --                               cur_all_risks_rec.pol_cur_symbol,
    --                               cur_all_risks_rec.ipu_pol_batch_no,
    --                               cur_all_risks_rec.ipu_pol_policy_no,
    --                               cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                v_tran_no,
    --                                v_tran_type,
    --                               cur_all_risks_rec.ipu_code,
    --                               cur_all_risks_rec.ipu_sec_scl_code,
    --                                v_exhange_rate,
    --                                v_rnd,
    --                                v_bcur_rnd
    --                               );
    --            END LOOP;                                                --surplus
    ----raise_error('here=='||v_net_ret||';'||v_special_ret_limit||';'||v_special_ret_diff);
    --            IF NVL (v_net_ret, 0) = 0
    --            THEN
    --               v_net_ret := v_special_ret_limit;
    --            ELSE
    --               v_net_ret := NVL (v_net_ret, 0) + v_special_ret_diff;
    --            END IF;

    --            DBMS_OUTPUT.put_line (   '11v_net_ret='
    --                                  || v_net_ret
    --                                  || 'v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'cur_all_risks_rec.ipu_reinsure_amt='
    --                                  || cur_all_risks_rec.ipu_reinsure_amt
    --                                 );
    ----raise_error(v_ipu_reinsure_amt||';'||get_risk_prev_si(cur_all_risks_rec.prrd_code));
    --v_ipu_reinsure_amt := ABS(NVL(v_ipu_reinsure_amt,0) -NVL(cur_all_risks_rec.prrd_prev_ri_si,0));

    ----CHECK THIS !!!!!!!!!!!!!!!!!!!

    ----raise_error('v_gross_ret='||v_gross_ret||'gross_ret='||cur_all_risks_rec.prrd_gross_comp_retention||'v_tot_risk_si='||v_tot_risk_si);
    --            IF NVL(v_gross_ret,0) = 0 THEN
    ----               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_risk_si,0) * 100,   4   );
    --               v_ret_rate := ROUND (  NVL (cur_all_risks_rec.prrd_gross_comp_retention,0)  / NVL(v_tot_risk_si,0) * 100,   4   );
    -- --               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_si,0) * 100,   4   );
    ----                IF v_ret_rate > 100 THEN
    ----                    v_ret_rate :=100;
    ----                    v_net_ret := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
    ----                END IF;
    ----                v_gross_ret_is := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
    --            ELSE
    --                v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_risk_si,0)  * 100,   4   );
    ----                 v_ret_rate := ROUND ( (v_gross_ret+NVL(v_prev_net_retention,0)) / NVL(v_tot_risk_si,0)  * 100,   4   );
    -- --               v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_si,0)  * 100,   4   );
    --            END IF;

    ----RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_ipu_reinsure_amt||';'||v_ret_rate||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_tot_si||';'||v_tot_risk_si||';'||cur_all_risks_rec.prrd_prev_net_retention);
    --              v_gross_ret_is := NVL (v_gross_ret, cur_all_risks_rec.prrd_gross_comp_retention);
    --              SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   )  INTO v_comp_net_rate FROM DUAL;
    --
    --         --     SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ) * NVL (cur_all_risks_rec.prrd_ri_prem, 0) / 100 INTO v_comp_net_prem FROM DUAL;

    --            IF NVL(v_gross_ret_is,0) =0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0  */AND NVL(v_ret_rate,0) <> 0 THEN
    --       --         v_comp_net_prem :=(v_ret_rate*NVL(cur_all_risks_rec.prrd_cumm_ri_prem,cur_all_risks_rec.prrd_ri_prem)/100)-NVL(cur_all_risks_rec.prrd_net_prev_prem,0);
    ----                v_net_ret :=0;
    --                    v_gross_ret_is :=v_net_ret;
    --            END IF;
    --

    ---- raise_error('v_ipu_reinsure_amt='||v_ipu_reinsure_amt||'ri prem='||cur_all_risks_rec.prrd_ri_prem||'cur_all_risks_rec.ipu_wef='||cur_all_risks_rec.ipu_wef||'cur_all_risks_rec.ipu_wet='||cur_all_risks_rec.ipu_wet||'prev prem='||cur_all_risks_rec.prrd_ri_prev_prem
    ---- ||'v_prev_wef='||v_prev_wef||'v_prev_wet='||v_prev_wet||'v_ret_rate='||v_ret_rate||'v_comp_net_rate='||v_comp_net_rate);
    --           IF NVL(cur_all_risks_rec.prrd_ri_prem,0) <> 0 THEN
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(cur_all_risks_rec.IPU_FP,0) !=0  THEN
    --                   v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                IF cur_all_risks_rec.pol_policy_status ='EN' AND cur_all_risks_rec.ipu_wef=v_prev_wef and cur_all_risks_rec.ipu_wet=v_prev_wet THEN
    --                IF NVL(v_ipu_reinsure_amt,0)=0 THEN
    --                v_ipu_reinsure_amt:=1;
    --                END IF;
    --                 v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --                  -- v_comp_net_prem:=ROUND (  (  v_net_ret   / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0) * 100   ))  * NVL (cur_all_risks_rec.prrd_ri_prem, 0) / 100;
    --                ELSE
    --                   v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    --               END IF;
    --               END if ;
    --            ELSE
    --                v_comp_net_prem :=0;
    --            END IF;
    --DBMS_OUTPUT.put_line (   'v_comp_net_prem='
    --                                  || v_comp_net_prem);
    --          UPDATE gin_policy_risk_ri_dtls
    --               SET prrd_comp_retention = v_net_ret,
    --                   prrd_gross_comp_retention = v_gross_ret_is,--NVL (v_gross_ret, prrd_gross_comp_retention),
    --                   prrd_com_retention_rate =  v_ret_rate,
    --                   --ROUND (  NVL (v_gross_ret, prrd_gross_comp_retention)  / NVL (v_ipu_reinsure_amt/*cur_all_risks_rec.ipu_reinsure_amt*/, 0)  * 100,   4   ),
    --                   prrd_comp_net_rate = nvl(v_ret_rate,v_comp_net_rate),--ROUND (  v_net_ret  / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ),
    --                   prrd_net_prem =  v_comp_net_prem--ROUND (  (  v_net_ret   / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100   ))  * NVL (prrd_ri_prem, 0) / 100
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_code = v_prrd_code
    --               AND prrd_tran_no = v_tran_no;

    --            DBMS_OUTPUT.put_line (   'v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'avail_fulc_bal '
    --                                  || v_avail_fulc_bal
    --                                  || '  facoblig_user_excess '
    --                                  || cur_all_risks_rec.prrd_facoblig_user_excess
    --                                 );

    --            BEGIN
    --               SELECT SUM (NVL (fc_amount, 0))
    --                 INTO v_total_facoblig_ceded
    --                 FROM gin_facre_cessions
    --                WHERE fc_prrd_code = cur_all_risks_rec.prrd_code
    --                  AND fc_facre_type = 'O';
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error getting fac obliq cession..');
    --            END;

    --            IF NVL (cur_all_risks_rec.prrd_facoblig_alloc_chk, 'N') = 'Y'
    --            THEN
    --               IF NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0) > 0
    --               THEN
    --                  v_facoblig_limit := NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0);
    --               ELSE
    --                  v_facoblig_limit :=  NVL (cur_all_risks_rec.prrd_facoblig_limit, 0);
    --               END IF;
    --            ELSE
    --               v_facoblig_limit := 0;
    ----               BEGIN
    ----                   IF v_rsk_excl = 'Y' THEN
    ----                       v_facoblig_limit :=v_fac_amt;
    ----                       v_avail_fulc_bal :=v_fac_amt;
    ----                   END IF;
    ----               END;
    --            END IF;
    --DBMS_OUTPUT.put_line ('v_amt_to_reinsure='||v_amt_to_reinsure||';'||v_avail_fulc_bal||';'||v_facoblig_limit||';'||v_total_facoblig_ceded);
    --            IF    v_amt_to_reinsure > 0
    --               OR (    NVL (v_avail_fulc_bal, 0) > 0
    --                   and NVL (v_facoblig_limit, 0) > 0
    --                  )
    --             THEN
    --               IF     NVL (v_amt_to_reinsure, 0) > 0
    --                  AND NVL (v_facoblig_limit, 0) > 0
    --                  AND NVL (v_total_facoblig_ceded, 0) = 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('XXXXXXXXXXXXXXXXXXX');

    --                  IF v_amt_to_reinsure > v_facoblig_limit
    --                  THEN
    --                     -- raise_error('here');
    --                     v_facoblig_excess := v_facoblig_limit;
    --                     v_facnorml_excess :=
    --                               v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
    --                  ELSE
    --                     v_facoblig_excess := v_amt_to_reinsure;
    --                     v_facnorml_excess := 0;
    --                  END IF;
    --               ELSIF     NVL (v_amt_to_reinsure, 0) > 0
    --                     AND NVL (v_facoblig_limit, 0) > 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('YYYYYYYYYYYYYYYYYYY');
    --                  v_facoblig_excess :=
    --                       NVL (v_facoblig_limit, 0)
    --                     - NVL (v_total_facoblig_ceded, 0);

    --                  IF v_amt_to_reinsure > v_facoblig_excess
    --                  THEN
    --                     -- raise_error('here');
    --                     v_facoblig_excess := v_facoblig_excess;
    --                     v_facnorml_excess :=
    --                               v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
    --                  ELSE
    --                     v_facoblig_excess := v_amt_to_reinsure;
    --                     v_facnorml_excess := 0;
    --                  END IF;
    --               ELSE
    --                  DBMS_OUTPUT.put_line ('ZZZZZZZZZZZZZZZZZZZ');
    --                  v_facoblig_excess :=
    --                           v_facoblig_limit - NVL (v_total_facoblig_ceded, 0);
    --                  v_facnorml_excess :=
    --                       NVL (v_amt_to_reinsure, 0)
    --                       - NVL (v_facoblig_excess, 0);
    --               END IF;
    --
    ----                    v_avail_fulc_bal :=NVL(v_facnorml_excess,0)-NVL(cur_all_risks_rec.prrd_prev_facre_si,0);
    --
    ----                   IF v_rsk_excl = 'Y' THEN
    ----                        v_avail_fulc_bal :=0;
    ----                   END IF;
    ------
    ----                 BEGIN
    ----                    SELECT SUM(DECODE(SIGN(FC_PREM_AMT),1,ABS(NVL(fc_amount,0)),-ABS(NVL(fc_amount,0))))
    ----                      INTO v_prev_fc_amnt
    ----                      FROM gin_facre_cessions,
    ----                      gin_insured_property_unds
    ----                     WHERE FC_IPU_CODE=IPU_CODE
    ----                     and IPU_ID = cur_all_risks_rec.ipu_id
    ----                     AND IPU_UW_YR=cur_all_risks_rec.IPU_UW_YR ;
    ----                 EXCEPTION
    ----                    WHEN OTHERS
    ----                    THEN
    ----                       v_prev_fc_amnt := 0;
    ----                 END;
    --
    ----            IF NVL(v_tot_risk_si,0) > NVL(v_trans_sign*v_trt_si_pcur,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0) THEN
    ----                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trt_si_pcur,0)+NVL(v_net_ret,0),0));
    ----            ELSE
    ----             v_avail_fulc_bal :=NVL(v_prev_fc_amnt,0);
    ----            END IF;
    --DBMS_OUTPUT.put_line (   'v_facnorml_excess='
    --                                  || v_facnorml_excess
    --                                  || 'v_ipu_reinsure_amt='
    --                                  || v_ipu_reinsure_amt
    --                                  || 'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal);
    --                v_excess_pct := ROUND (  (  NVL (v_facnorml_excess, 0) + NVL (v_avail_fulc_bal, 0)) / NVL(v_tot_risk_si,0) * 100, 4 );
    --                IF v_gross_ret = 0 THEN
    --                   v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_risk_si,0) * 100,   4   );
    --                ELSE
    --                    v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_risk_si,0)  * 100,   4   );
    --                END IF;
    --              v_gross_ret_is := NVL (v_gross_ret, cur_all_risks_rec.prrd_gross_comp_retention);
    --               SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ) INTO v_comp_net_rate FROM DUAL;
    --
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))   OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0 THEN
    --                   v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    --               END if ;
    --       DBMS_OUTPUT.put_line (   'v_comp_net_prem='
    --                                  || v_comp_net_prem
    --                                  || 'v_gross_ret_is='
    --                                  || v_gross_ret_is
    --                                  || 'v_ret_rate='
    --                                  || v_ret_rate
    ----                                  || 'v_prev_fc_amnt='
    ----                                  || v_prev_fc_amnt
    --                                  || 'v_excess_pct='
    --                                  || v_excess_pct
    --                                  || 'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal);
    --     DBMS_OUTPUT.put_line (   'v_tot_risk_si='
    --                                  || v_tot_risk_si
    --                                  || 'v_trt_si_pcur='
    --                                  || v_trt_si_pcur
    --                                  || 'prrd_prev_ri_si='
    --                                  || cur_all_risks_rec.prrd_prev_ri_si
    --                                  || 'v_net_ret='
    --                                  || v_net_ret
    ----                                  || 'v_prev_fc_amnt='
    ----                                  || v_prev_fc_amnt
    --                                  );
    ----             IF NVL(v_gross_ret_is,0) =0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0 */ AND NVL(v_ret_rate,0) <> 0 THEN
    ----                 v_excess_pct := ROUND(NVL(v_prev_fc_amnt,0)/NVL(v_tot_risk_si,0)*100,4);
    ----                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trans_sign*v_trt_si_pcur,0)+abs(NVL(cur_all_risks_rec.prrd_prev_ri_si,0))+NVL(v_net_ret,0),0)- NVL(v_prev_fc_amnt,0));
    ----                 v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0)+NVL(v_trt_si_pcur,0),0));
    ----                v_net_ret := 0;
    ----                  v_excess_pct :=ROUND (  ( NVL (v_avail_fulc_bal, 0)  )   / NVL (v_tot_risk_si, 0)* 100,4 );
    ----           END IF;
    -- DBMS_OUTPUT.put_line (  'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal|| 'v_facnorml_excess='
    --                                  || v_facnorml_excess);
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = v_facnorml_excess + NVL (v_avail_fulc_bal, 0),
    --                      prrd_facoblig_excess = v_facoblig_excess,
    --                      --PRRD_FACOBLIG_USER_EXCESS =v_facoblig_excess,
    --                      prrd_excess_pct = v_excess_pct,
    --                      prrd_comp_retention = v_net_ret,
    --                      prrd_gross_comp_retention = v_gross_ret_is,--v_gross_ret,
    --                      prrd_com_retention_rate = v_ret_rate,--ROUND (  NVL (prrd_gross_comp_retention, 0) / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))  * 100,  4  ),
    --                      prrd_comp_net_rate = v_ret_rate,-- ROUND (  v_net_ret  / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))   * 100,    4  ),
    --                      prrd_net_prem = v_comp_net_prem--  ( (v_net_ret /DECODE( (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0)) ,0,1, (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))) * 100  )   * NVL (prrd_ri_prem, 0) / 100  )                                                 --,
    --                --PRRD_FACRE_AMOUNT =v_facoblig_excess
    --               WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND prrd_code = v_prrd_code
    --                  AND prrd_tran_no = v_tran_no;

    --               DELETE gin_facre_cessions
    --                     WHERE fc_ipu_code = cur_all_risks_rec.ipu_code
    --                       AND fc_facre_type = 'O';
    --
    --            END IF;
    --            fix_rounding_errors(cur_all_risks_rec.prrd_codE);
    ----            -- IF SI TO FACRE IS ZERO AND PREMIUM IS NOT ZERO, THEN POPULATE THE PREVIOUS FACRE ACCOUNTS
    ------            raise_error(v_avail_fulc_bal||'v_excess_pct='||v_excess_pct);
    ----/*populate facre automatically where fac SI is zero and rate <> zero*/
    ----            IF NVL (v_avail_fulc_bal, 0) =0  THEN
    ----                FOR cur_prev_facre_rec IN cur_prev_facre(cur_all_risks_rec.ipu_prev_ipu_code) LOOP
    ----                    IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','CN')) THEN
    ----                       v_fc_prem := round(cur_prev_facre_rec.fc_rate*NVL (cur_all_risks_rec.prrd_ri_prem, 0)/100, v_rnd );
    ----                    ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    ----                       v_fc_prem:=ROUND((cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)-(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)+(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    ----                    END if ;
    ----
    ------                RAISE_ERROR(cur_prev_facre_rec.FC_RATE||';'||cur_all_risks_rec.ipu_prev_ipu_code);
    ----                     INSERT INTO gin_facre_cessions
    ----                        (fc_code, fc_agnt_agent_code, fc_amount,
    ----                         fc_wef, fc_ipu_code, fc_agent_sht_desc,
    ----                         fc_rate, fc_comm_rate, fc_comm_amt, fc_don_by,
    ----                         fc_dc_no, fc_prem_amt, fc_pol_batch_no, fc_uwyr,
    ----                         fc_ggt_tran_no, fc_tran_type, fc_scl_code, fc_amt_or_rate, fc_prrd_code,
    ----                         fc_auth_dt, fc_prev_si, fc_prev_rate,  fc_refund_prem, fc_refund_comm, fc_prev_amount,
    ----                         fc_wet, fc_prev_comm_rate, fc_prev_fc_code,  fc_earthqke_prem, fc_earthqke_comm_rate,
    ----                         fc_earthqke_comm, fc_net_less_eq_comm,
    ----                         fc_net_less_eq_prem, fc_facre_type, fc_accepted_date, fc_accepted, fc_prem_diff_amt,
    ----                         fc_vat_amt, fc_vat_rate, fc_mngmnt_type, fc_mngmnt_value, fc_rein_tax_type,
    ----                         fc_rein_tax_value, fc_mngmnt_amt,fc_rein_tax_amt, fc_override_prem,
    ----                         fc_override_type, fc_override_value, fc_remark, fc_whtx_rate, fc_whtx_amt
    ----                        )
    ----                 VALUES (gin_fc_code_seq.NEXTVAL, cur_prev_facre_rec.fc_agnt_agent_code, 0,
    ----                         cur_all_risks_rec.ipu_wef, cur_all_risks_rec.ipu_code, cur_prev_facre_rec.fc_agent_sht_desc,
    ----                         cur_prev_facre_rec.fc_rate, cur_prev_facre_rec.fc_comm_rate, round(cur_prev_facre_rec.fc_comm_rate*v_fc_prem/100,v_rnd), v_user,
    ----                         NULL, v_fc_prem, v_batch_no, cur_all_risks_rec.pol_uw_year,
    ----                         cur_all_risks_rec.prrd_tran_no, cur_all_risks_rec.pol_policy_status,
    ----                         cur_all_risks_rec.ipu_sec_scl_code, cur_prev_facre_rec.fc_amt_or_rate, cur_all_risks_rec.prrd_code,
    ----                         NULL, NULL, cur_prev_facre_rec.fc_rate,
    ----                         0, 0, cur_prev_facre_rec.fc_prem_amt,
    ----                         cur_all_risks_rec.ipu_wet, cur_prev_facre_rec.fc_comm_amt, cur_prev_facre_rec.fc_code,
    ----                         0, 0,
    ----                         0, 0,
    ----                         0, cur_prev_facre_rec.fc_facre_type,
    ----                         cur_all_risks_rec.ipu_wef, 'Y', 0,
    ----                         0, 0, null,
    ----                         0, null,
    ----                         0, 0,
    ----                         0, 0,
    ----                         null, 0,
    ----                         'Auto facre cedding as si is zero', 0, 0
    ----                        );
    ----                  END LOOP;
    ----             END IF;
    --      --   END IF; FOR ZERO
    --      END LOOP;
    --
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         --DBMS_OUTPUT.PUT_LINE('Hata miti ni dawa...You are a genius...you just did a Zero devide..',no_acknowledge);
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0.Continue if covered by XOL...'
    --            );
    --   END;
    /****ABOVE COMMENTED BY OLSON***********/

    --PROCEDURE reinsure_risks (-----commented out on 28th May to sort out Marine policies not cededing out
    --      v_batch_no           IN   NUMBER,
    --      v_cur_code           IN   NUMBER,
    --      v_base_cur_code      IN   NUMBER,
    --      v_pol_cur_sht_desc   IN   VARCHAR2,
    --      v_tran_no            IN   NUMBER,
    --      v_tran_type          IN   VARCHAR2,
    --      v_ipucode IN NUMBER
    --   )
    --   IS
    --      v_d                           NUMBER;
    --      v_exhange_rate                NUMBER          := 1;
    --      --v_tot_si                      NUMBER          := 0;
    --      v_amt_to_reinsure             NUMBER          := 0;
    --      --v_trt_rate                    NUMBER;
    --      v_trt_si_tcur                 NUMBER          := 0;
    --      v_accprd                      NUMBER;
    --      v_acpr_sht_desc               VARCHAR2 (200);
    --      v_cession_rate                NUMBER          := 0;
    --      v_trt_prem_tcur               NUMBER          := 0;
    --      v_trt_com_tcur                NUMBER          := 0;
    --      v_trt_si_pcur                 NUMBER          := 0;
    --      v_trt_prem_pcur               NUMBER          := 0;
    --      v_trt_com_pcur                NUMBER          := 0;
    --      v_ptax_amount                 NUMBER          := 0;
    --      v_ptax_tcur                   NUMBER          := 0;
    --      v_ctax_amount                 NUMBER          := 0;
    --      v_ctax_tcur                   NUMBER          := 0;
    --      v_ret_limit                   NUMBER          := 0;
    --      v_gross_ret                   NUMBER          := 0;
    --      v_net_ret                     NUMBER          := 0;
    --      v_prec_tax                    NUMBER          := 0;
    --      v_crec_tax                    NUMBER          := 0;
    ----      v_trt_rpremtax_pcur           NUMBER          := 0;
    ----      v_part_rpremtax_pcur          NUMBER          := 0;
    ----      v_trt_premtax_pcur            NUMBER          := 0;
    ----      v_part_premtax_pcur           NUMBER          := 0;
    --      v_prem_tax                    NUMBER;
    --      v_pol_com                     NUMBER          := 0;
    --      v_prrd_code                   NUMBER;
    --      v_trt_rprem_tax               NUMBER          := 0;
    --      v_trt_prem_tax                NUMBER          := 0;
    --      v_no_ri_si                    VARCHAR2 (15);
    --      v_bind_max_exp                NUMBER          := 0;
    --      v_dummy                       NUMBER (2)      := 0;
    --      v_pool_amt                    NUMBER          := 0;
    --      v_trt_eq_prem_pcur            NUMBER          := 0;
    --      v_trt_net_less_eq_prem_pcur   NUMBER          := 0;
    --      v_trt_net_less_eq_comm_pcur   NUMBER          := 0;
    --      v_trt_eq_com_pcur             NUMBER          := 0;
    --      v_rnd                         NUMBER          := 0;
    --      v_bcur_rnd                    NUMBER          := 0;
    --      v_cnt                         NUMBER          := 0;
    ----      v_part_si_pcur                NUMBER          := 0;
    ----      v_part_si_tcur                NUMBER          := 0;
    ----      v_part_comm_pcur              NUMBER          := 0;
    ----      v_part_comm_tcur              NUMBER          := 0;
    ----      v_part_prem_pcur              NUMBER          := 0;
    ----      v_part_prem_tcur              NUMBER          := 0;
    ----      v_part_code                   NUMBER;
    --      v_facoblig_excess             NUMBER          := 0;
    --      v_facnorml_excess             NUMBER          := 0;
    --      v_total_facoblig_ceded        NUMBER          := 0;
    --      v_special_ret_limit           NUMBER          := 0;
    --      v_special_ret_diff            NUMBER          := 0;
    --      v_q                           NUMBER;
    --      v_zero_devide                 EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      v_ctl_si_start_from           NUMBER;
    --      v_ctl_limit_amt               NUMBER;
    --      v_pool_si                     NUMBER;
    --      v_pool_prem                   NUMBER;
    --      v_pool_rate                   NUMBER;
    --      v_facoblig_limit              NUMBER;
    --      v_avail_fulc_bal              NUMBER;
    ----      v_part_manafee_pcur           NUMBER          := 0;
    ----      v_part_manafee_tcur           NUMBER          := 0;
    --      v_rein_cur_param              VARCHAR2 (1);
    --      v_ipu_reinsure_amt    NUMBER          := 0;
    --      v_fac_amt                NUMBER            := 0;
    --      v_risk_count             NUMBER            :=0;
    --      v_rsk_excl                VARCHAR2(1);
    --      v_rsk_excl_param     VARCHAR2(1);
    ----      v_trpa_prem_tax_rate   NUMBER;
    ----      v_trpa_part_type     VARCHAR2(1);
    --
    --      v_trt_cur_code  NUMBER;
    --      v_as_code NUMBER;
    --       v_bcur_code  number ;
    --       v_bcur_symbol  VARCHAR2(10);
    --       v_trt_cur_rate number ;
    --
    --        v_rc_code NUMBER;
    --        v_retention_amt NUMBER;
    --        v_treat_limit_amt NUMBER;
    --        v_excess_pct NUMBER;
    --     --   v_prev_fc_amnt NUMBER;
    --        v_prev_si NUMBER;
    --        v_ret_rate NUMBER;
    --        v_tot_risk_si NUMBER;
    --        v_endors_si NUMBER;
    --
    --        v_gross_ret_is NUMBER;
    --        v_comp_net_rate NUMBER;
    --        v_comp_net_prem NUMBER;
    --
    --        v_ta_type VARCHAR2(2);
    --        v_prev_net_retention NUMBER;
    --        v_trans_sign NUMBER;
    --
    --       v_user VARCHAR(30);
    --       v_ri_cur_rate NUMBER;
    --       v_ri_prem_formular varchar2(20);
    --       v_fc_prem number;
    --       v_prev_wef date;
    --       v_prev_wet date;
    --
    ----select all single the policy risks that have not been reinsured and are ready for reinsurance
    --      CURSOR cur_all_risks
    --      IS
    --         SELECT ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  prrd_gross_comp_retention gross_comp_ret,
    --                  ipu_pol_est_max_loss, prrd_avail_fulc_bal, prrd_ri_prem,
    --                  ipu_sec_scl_code, ipu_related_ipu_code, ipu_bp, ipu_gp,
    --                  ipu_fp, ipu_fap, ipu_nett_premium, ipu_eml_si,
    --                  ipu_cummulative_reins, ipu_sec_sect_code, ipu_sect_sht_desc,
    --                  ipu_cur_code, prrd_facre_amount, ipu_reinsure_amt,
    --                  prrd_gross_comp_retention, ipu_prem_tax, ipu_bind_code,
    --                  ipu_max_exposure, prrd_earthquake_prem,
    --                  prrd_ri_net_less_eq_prem, pol_prem_tax, pol_binder_policy,
    --                  pol_cur_symbol, pol_cur_code, prrd_facoblig_excess,
    --                  prrd_facoblig_limit, prrd_code, ipu_override_ri_retention,
    --                  prrd_facoblig_user_excess, prrd_facoblig_alloc_chk,prrd_prev_facre_si,prrd_prev_ri_si,
    --                  pol_exch_rate_fixed,pol_cur_rate,ipu_overrideride_ret_type,ipu_uw_yr,ipu_prev_ipu_code,
    --                  --get_risk_comp_retention(ipu_id,ipu_uw_yr,ipu_code)
    --                  prrd_prev_net_retention,
    --                  ipu_id,prrd_comp_net_rate,ipu_rc_code,
    --                  ipu_eml_based_on,prrd_comp_ret_edited,pol_policy_status,
    --                  prrd_tran_no,pol_uw_year,prrd_cumm_ri_prem,prrd_ri_prev_prem,
    --                  prrd_net_prev_prem,prrd_prev_facre_prem,scl_no_ri_si,prrd_prev_ret_rate
    --             FROM gin_policies,
    --                  gin_insured_property_unds,
    --                  gin_policy_risk_ri_dtls,gin_sub_classes
    --            WHERE pol_batch_no = ipu_pol_batch_no
    --              AND ipu_code = prrd_ipu_code
    --              and ipu_sec_scl_code = scl_code
    --              and ipu_code = v_ipucode
    --              AND prrd_tran_no = v_tran_no
    ----              AND ipu_reinsured = 1
    --              AND ipu_pol_batch_no = v_batch_no
    --         ORDER BY ipu_code;
    --
    ----AND IPU_CUMMULATIVE_REINS ='N'
    ----AND IPU_RELR_CODE IS NULL
    ---- select risk treaty setup
    ---- get teaty setups
    --      CURSOR cur_treaties (
    --         v_ipu_code   IN   NUMBER,
    --         v_type       IN   NUMBER,
    --         v_prrd            NUMBER
    --      )
    --      IS
    --         SELECT   clt_ta_sht_desc, clt_scl_code, clt_retention_limit,
    --                  trt_code, trt_sht_desc, trt_level, rei_code, rei_trt_code,
    --                  rei_trt_sht_desc, rei_comm_rate, rei_limit, ptotr_rate,
    --                  rei_rate_type, rei_quake_limit, rei_retained_prem,
    --                  rei_cur_code, rei_cur_symbol, rei_as_code, rei_ta_code,
    --                  rei_trs_code, rei_trs_sht_desc,
    --                  NVL (rei_si_start_from, 0) rei_si_start_from,
    --                  rei_ri_prem_tax_rate, rei_ri_prem_tax_div_fact,
    --                  ptotr_property_id, ptotr_uwyr, ptotr_ipu_code,
    --                  ptotr_pol_batch_no, ptotr_pol_policy_no,
    --                  ptotr_pol_ren_endos_no, ptotr_sect_code,
    --                  ptotr_risk_cur_code, rei_earthqke_comm_rate, ptotr_code,
    --                  ptotr_ctl_code, rei_mgt_fee,ptotr_allowed_rate,
    --                  PTOTR_PREV_CESSION_RATE
    --             FROM gin_policy_rein_risk_details, gin_treaty_setups_vw
    --            WHERE ptotr_clt_scl_code = clt_scl_code
    --              AND ptotr_rei_code = rei_code
    --              AND ptotr_ipu_code = v_ipu_code
    --              AND trt_code = v_type
    --              AND ptotr_prrd_code = v_prrd
    --         ORDER BY trt_level, rei_si_start_from;
    --
    ----get retention limit
    --      CURSOR cur_arrangement_det (v_ipu_code NUMBER, v_scl_code NUMBER)
    --      IS
    --         SELECT DISTINCT clt_retention_limit
    --                    FROM gin_class_treaties, gin_policy_rein_risk_details
    --                   WHERE clt_as_code = ptotr_as_code
    --                     AND ptotr_ipu_code = v_ipu_code
    --                     AND clt_scl_code = v_scl_code;
    --
    ----      CURSOR cur_participant_rate (v_rei_code IN NUMBER)
    ----      IS
    ----         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    ----                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    ----                trpa_trs_code, trpa_trs_sht_desc,trpa_prem_tax_rate,trpa_part_type,trpa_code
    ----           FROM gin_treaty_participants
    ----          WHERE trpa_rei_code = v_rei_code;
    --
    -----get tax rates
    --      CURSOR cur_tax_rates
    --      IS
    --         SELECT taxr_rate, taxr_wef, taxr_wet, trnt_application_lvl,
    --                trnt_type, taxr_min_amt, taxr_round_nxt, taxr_trnt_code,
    --                taxr_division_factor
    --           FROM gin_tax_rates, gin_transaction_types
    --          WHERE trnt_code = taxr_trnt_code
    --            AND (trnt_type LIKE 'WTHTX%' OR trnt_type IN ('PRP'))
    --            AND (   (TRUNC (SYSDATE) BETWEEN taxr_wef AND taxr_wet)
    --                 OR (TRUNC (SYSDATE) >= taxr_wef AND taxr_wet IS NULL)
    --                );
    --
    --      CURSOR cur_prev_facre(v_ipu_code in number) IS SELECT * FROM gin_facre_cessions
    --      WHERE fc_ipu_code=v_ipu_code;
    ----R0 = Reinsurance tax
    ----R1 = Reinsurance premium tax
    ----R2 = Reinsurance interest tax
    ----R3 = Reinsurance commission tax
    ----v_prev_ipu_reinsure_amt NUMBER;
    --   BEGIN
    --
    --      BEGIN
    --         SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('CHECK_RISK_EXCL_ZONES') INTO v_rsk_excl_param FROM DUAL;
    --      EXCEPTION WHEN OTHERS
    --      THEN
    --          v_rsk_excl_param := 'N';
    --      END;
    --
    --
    --      IF v_rsk_excl_param = 'Y'
    --      THEN
    --          BEGIN
    --           SELECT COUNT(*) INTO v_risk_count
    --               FROM gin_insured_property_unds
    --              WHERE ipu_pol_batch_no = v_batch_no
    --                AND ipu_quza_code IN (
    --                       SELECT tuqz_quza_code
    --                         FROM gin_treaty_uncvd_quake_zones,
    --                              gin_treaty_setups,
    --                              gin_class_treaties
    --                        WHERE tuqz_ta_code = rei_ta_code
    --                          AND tuqz_as_code = rei_as_code
    --                          AND clt_scl_code = ipu_sec_scl_code
    --                          AND clt_as_code = rei_as_code
    --                          AND rei_uw_year = TO_NUMBER (TO_CHAR (ipu_wef, 'RRRR'))
    --                          )
    --                         AND ipu_quza_code IS NULL;
    --          EXCEPTION WHEN OTHERS
    --          THEN
    --            v_risk_count := 0;
    --          END;
    --      END IF;
    --
    --      IF v_risk_count > 0 THEN
    --        v_rsk_excl := 'Y';
    --      ELSE
    --        v_rsk_excl := 'N';
    --      END IF;
    --
    --      v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --      v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar  ('REINS_IN_BASE_CURRENCY')
    --           INTO v_rein_cur_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_rein_cur_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Treaty  parameter...');
    --      END;
    --
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar  ('RI_PREM_FORMULAR')
    --           INTO v_ri_prem_formular
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_ri_prem_formular := null;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Reinsurance Premium Calculation Option...');
    --      END;
    --
    --      FOR cur_all_risks_rec IN cur_all_risks LOOP
    --
    --       begin
    --        select  ipu_wef, ipu_wet into v_prev_wef,v_prev_wet
    --        from  gin_insured_property_unds
    --        where ipu_code= cur_all_risks_rec.ipu_prev_ipu_code;
    --        exception when others then
    --        null;
    --        end;
    --         v_prem_tax := NVL (cur_all_risks_rec.ipu_prem_tax, 0);
    --         v_bind_max_exp := 0;
    --         v_dummy := 0;
    --
    --         IF     NVL (v_bind_max_exp, 0) = 0
    --            AND cur_all_risks_rec.pol_binder_policy = 'Y'
    --         THEN
    --            SELECT COUNT ('x')
    --              INTO v_dummy
    --              FROM gin_binder_details
    --             WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --               AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --
    --            IF NVL (v_dummy, 0) > 1
    --            THEN
    --               raise_error
    --                  ('Setup Error, Maximum accumulation defined more than once for this binder'
    --                  );
    --            ELSIF NVL (v_dummy, 0) = 1
    --            THEN
    --               BEGIN
    --                  SELECT db_max_limit
    --                    INTO v_bind_max_exp
    --                    FROM gin_binder_details
    --                   WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                     AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --               EXCEPTION
    --                  WHEN OTHERS THEN
    --                     raise_error
    --                        ('Unable to retrieve the maximum exposure for the bordereaux scl'
    --                        );
    --               END;
    --            ELSIF NVL (v_dummy, 0) = 0
    --            THEN
    --               BEGIN
    --                  SELECT NVL (bind_max_exposure, 0)
    --                    INTO v_bind_max_exp
    --                    FROM gin_binders
    --                   WHERE bind_code = cur_all_risks_rec.ipu_bind_code;
    --               EXCEPTION
    --                  WHEN OTHERS THEN
    --                     raise_error
    --                        ('Unable to retrieve the maxmium exposure for the bordereaux'
    --                        );
    --               END;
    --            END IF;
    --
    --            IF     NVL (v_bind_max_exp, 0) > 0
    --               AND NVL (v_bind_max_exp, 0) <
    --                                   NVL (cur_all_risks_rec.ipu_max_exposure, 0)
    --            THEN
    --               raise_error (   'The maximum exposure amount for the risk '
    --                            || cur_all_risks_rec.ipu_property_id
    --                            || ' is greater than the allowed limit of '
    --                            || v_bind_max_exp
    --                           );
    --            END IF;
    --         END IF;
    --------------------
    --
    --
    --         IF NVL (cur_all_risks_rec.scl_no_ri_si, 'N') = 'N' AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0 THEN
    --            raise_error  ('No reinsure amount specified, cannot reinsure this risk');
    --         END IF;
    --
    --         BEGIN
    --            v_prrd_code := NULL;
    --
    --            SELECT prrd_code,PRRD_AS_CODE
    --              INTO v_prrd_code,v_as_code
    --              FROM gin_policy_risk_ri_dtls
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_tran_no = v_tran_no;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               raise_error
    --                        ('Error :- Unable Please populate treaties again....');
    --         END;
    --         BEGIN
    --           SELECT DISTINCT  ta_cur_code,TA_TYPE,REI_CUR_RATE
    --                      INTO  v_trt_cur_code,v_ta_type,v_ri_cur_rate
    --                      FROM gin_class_treaties,
    --                           gin_arrangement_setups,
    --                           gin_treaty_arrangements,
    --                           gin_treaty_setups -- for now... this needs to be looked into afresh
    --                     WHERE as_ta_code = ta_code
    --                       AND clt_as_code = as_code
    --                       AND clt_scl_code =  cur_all_risks_rec.ipu_sec_scl_code
    --                       AND AS_CODE =v_as_code
    --                       AND REI_AS_CODE=as_code
    --                       AND REI_TA_CODE = ta_code
    --                       AND as_uwyr = cur_all_risks_rec.ipu_uw_yr;
    --        EXCEPTION
    --           WHEN NO_DATA_FOUND
    --           THEN
    --             NULL;
    --           WHEN OTHERS
    --           THEN
    --              raise_error
    --                 ('Unable to retrieve the arrangement retention limit'
    --                 );
    --        END;
    --
    --          IF NVL(v_rein_cur_param,'N') = 'Y' AND v_trt_cur_code != cur_all_risks_rec.pol_cur_code THEN
    --             IF v_bcur_code =v_trt_cur_code THEN
    --                 v_ipu_reinsure_amt :=( NVL(cur_all_risks_rec.ipu_reinsure_amt,0));
    --             ELSE
    --                 v_ipu_reinsure_amt :=( NVL(cur_all_risks_rec.ipu_reinsure_amt,0)) / cur_all_risks_rec.pol_cur_rate;
    --             END IF;
    --         ELSE
    --             v_ipu_reinsure_amt := NVL(cur_all_risks_rec.ipu_reinsure_amt,0);
    --         END IF;
    --
    --         SELECT  SIGN(NVL (cur_all_risks_rec.prrd_ri_prem, 0)) INTO v_trans_sign FROM DUAL;
    --
    --         IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code THEN
    --            IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y')  THEN
    --              -- v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt / cur_all_risks_rec.pol_cur_rate,  v_rnd  );
    --               v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
    --            ELSE
    --              v_trt_cur_rate := get_exchange_rate (v_bcur_code,v_trt_cur_code);
    --             v_exhange_rate :=v_trt_cur_rate;
    --          --v_ipu_reinsure_amt := ROUND (  v_ipu_reinsure_amt / nvl(v_ri_cur_rate,v_trt_cur_rate),  v_rnd );
    --            END IF;
    --         ELSE
    --            v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
    --         END IF;
    --
    --         v_pool_si := get_risk_ri_pool (cur_all_risks_rec.prrd_code);
    --         v_pool_prem := get_ri_pool_prem (cur_all_risks_rec.prrd_code);
    --         v_pool_rate := get_ri_pool_rate (cur_all_risks_rec.prrd_code);
    --         v_prev_net_retention :=NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --
    ----          SELECT decode(NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+ NVL(v_prev_net_retention,0)),0,v_ipu_reinsure_amt,NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(v_prev_net_retention,0)))
    ----          INTO v_tot_si FROM DUAL;
    --
    --         v_tot_risk_si :=v_ipu_reinsure_amt;
    --         v_avail_fulc_bal := 0;--NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0);
    --         DBMS_OUTPUT.put_line (   'v_ipu_reinsure_amt=' || v_ipu_reinsure_amt);
    --         v_amt_to_reinsure :=
    --            (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --             - NVL (v_avail_fulc_bal, 0)
    --             - (NVL (cur_all_risks_rec.prrd_facre_amount, 0))
    --             - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --             - NVL (v_pool_si, 0)  );
    --          DBMS_OUTPUT.put_line (   'prrd_facre_amount=' || cur_all_risks_rec.prrd_facre_amount);
    --         DBMS_OUTPUT.put_line (   'v_amt_to_reinsure=' || v_amt_to_reinsure || 'v_avail_fulc_bal=' || v_avail_fulc_bal  || 'v_pool_si=' || v_pool_si || 'v_amt_to_reinsure='  || v_amt_to_reinsure   );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)- NVL (cur_all_risks_rec.prrd_facre_amount, 0) - NVL (cur_all_risks_rec.prrd_facoblig_excess,0  ) );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)  - NVL (cur_all_risks_rec.prrd_facre_amount, 0) );
    --
    --         IF NVL (v_amt_to_reinsure, 0) < 0 THEN
    --            IF NVL (v_pool_si, 0) >
    --                  (  NVL (v_ipu_reinsure_amt/*cur_all_risks_rec.ipu_reinsure_amt*/, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                  )
    --            THEN
    --              raise_error ('The pool rate specified is greater than the available excess on risk. Please remove some of the facre cessions..'||v_pool_si||';'||v_ipu_reinsure_amt||';'||cur_all_risks_rec.prrd_facre_amount);
    --            ELSIF NVL (v_pool_si, 0) <
    --                    (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --                    )
    --            THEN
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = 0
    --                WHERE prrd_code = v_prrd_code;
    --
    --               v_avail_fulc_bal := 0;
    --               v_amt_to_reinsure :=
    --                  (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
    --                   - NVL (v_pool_si, 0)
    --                  );
    --            ELSIF NVL (v_pool_si, 0) <
    --                    (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                     - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                    )
    --            THEN
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = 0,
    --                      prrd_facoblig_excess = 0
    --                WHERE prrd_code = v_prrd_code;
    --
    --               v_avail_fulc_bal := 0;
    --               v_amt_to_reinsure :=
    --                  (  NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0)
    --                   - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                   - NVL (v_pool_si, 0)
    --                  );
    --            END IF;
    --         END IF;
    --
    --         DBMS_OUTPUT.put_line (   'v_amt_to_reinsure='
    --                               || v_amt_to_reinsure
    --                               || 'v_pool_si='
    --                               || v_pool_si
    --                               || 'v_amt_to_reinsure='
    --                               || v_amt_to_reinsure
    --                              );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facoblig_excess,
    --                                      0
    --                                     )
    --                              );
    --         DBMS_OUTPUT.put_line (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
    --                              );
    --
    ----RAISE_ERROR(34);
    ----raise_error(v_amt_to_reinsure);
    --         IF NVL (v_amt_to_reinsure, 0) = 0 THEN
    --            UPDATE gin_policy_risk_ri_dtls
    --               SET prrd_com_retention_rate = (100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))),
    --                   prrd_comp_net_rate = (100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))),
    --                   prrd_net_prem =ROUND (  ((100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))) / 100)  * NVL (prrd_ri_prem, 0), 2 )
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_code = v_prrd_code
    --               AND prrd_tran_no = v_tran_no;
    --         END IF;
    ----MANDATORY
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code, 1001,  v_prrd_code  ) LOOP -- Its A Mandatory Type treaty
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    --               -- calculate treaty sum insured in policy currency
    ----                v_tot_si := v_ipu_reinsure_amt;
    --                v_prev_net_retention :=0;
    --               v_trt_si_pcur := v_tot_risk_si * (cur_treaties_rec.ptotr_rate / 100);
    --               v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --               -- Culculate treaty premium
    ----               RAISE_ERROR('v_trt_si_pcur11111='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --               v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;
    ----DBMS_OUTPUT.PUT_LINE('v_cession_rate='||v_cession_rate);
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION'
    --               OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))
    --               OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0
    --               OR (cur_all_risks_rec.POL_POLICY_STATUS ='EN' AND cur_all_risks_rec.ipu_wef=v_prev_wef and cur_all_risks_rec.ipu_wet=v_prev_wet)
    --               THEN
    --                   v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               END if ;
    --            -- calculate mandatory commission
    --               v_trt_net_less_eq_comm_pcur :=
    --                  ROUND ((  (  v_trt_net_less_eq_prem_pcur
    --                             * cur_treaties_rec.rei_comm_rate
    --                            )
    --                          / 100
    --                         ),
    --                         v_rnd
    --                        );
    --               v_trt_eq_com_pcur :=
    --                  ROUND ((  (  v_trt_eq_prem_pcur
    --                             * cur_treaties_rec.rei_earthqke_comm_rate
    --                            )
    --                          / 100
    --                         ),
    --                         v_rnd
    --                        );
    --               --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
    --               v_trt_com_pcur :=   NVL (v_trt_net_less_eq_comm_pcur, 0)  + NVL (v_trt_eq_com_pcur, 0);
    --               v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --               v_amt_to_reinsure := (v_amt_to_reinsure - v_trt_si_tcur);
    --/*********tax part**************************/
    ----------calculate reinsurance tax, reinsurance commission tax part
    --               v_ptax_amount := 0;
    --               v_ctax_amount := 0;
    --               v_ptax_tcur := 0;
    --               v_ctax_tcur := 0;
    --               v_ptax_amount := ROUND (NVL (v_prem_tax, 0), v_rnd);
    --               v_ctax_amount :=
    --                             ROUND (NVL (v_pol_com, 0) * v_cession_rate,
    --                                    v_rnd);
    --               v_ptax_tcur := v_ptax_amount * v_exhange_rate;
    --               v_ctax_tcur := v_ctax_amount * v_exhange_rate;
    --
    --/***********************************************************************/
    --               UPDATE gin_policy_rein_risk_details
    --                  SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                      ptotr_risk_si_tcur =  ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
    --                      ptotr_risk_prem_tcur =  ROUND (cur_all_risks_rec.prrd_ri_prem    * v_exhange_rate,  v_bcur_rnd  ),
    --                      ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                      ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                      ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                      ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                      ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                      ptotr_earthqke_comm_rate =  cur_treaties_rec.rei_earthqke_comm_rate,
    --                      ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                      ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                      ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                      ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                      ptotr_acpr_code = v_accprd,
    --                      ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                      ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                      ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                      ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                      ptotr_ggt_tran_no = v_tran_no,
    --                      ptotr_tran_type = v_tran_type,
    --                      ptotr_earthqke_prem = ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_earthqke_comm = ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_prem = ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_comm = ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                  AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                  AND ptotr_prrd_code = v_prrd_code;
    --
    --/************************start participartion *****/
    ----               v_trt_rpremtax_pcur := 0;
    ----               v_trt_premtax_pcur := 0;
    --
    --
    --
    --              Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                               v_prrd_code,
    --                               cur_treaties_rec.ptotr_code,
    --                               v_trt_si_pcur,
    --                               v_trt_si_tcur,
    --                               v_trt_prem_pcur,
    --                               v_trt_prem_tcur,
    --                               v_trt_com_pcur,
    --                               v_trt_com_tcur,
    --                               cur_all_risks_rec.pol_cur_code,
    --                               cur_all_risks_rec.pol_cur_symbol,
    --                               cur_all_risks_rec.ipu_pol_batch_no,
    --                               cur_all_risks_rec.ipu_pol_policy_no,
    --                               cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                v_tran_no,
    --                                v_tran_type,
    --                               cur_all_risks_rec.ipu_code,
    --                               cur_all_risks_rec.ipu_sec_scl_code,
    --                                v_exhange_rate,
    --                                v_rnd,
    --                                v_bcur_rnd
    --                               );
    --            END LOOP;                                            --- mandatory
    --
    --
    --
    --            /* v_ret_limit := NVL(cur_all_risks_rec.prrd_gross_comp_retention,0)-NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            IF v_amt_to_reinsure > NVL (v_ret_limit, 0) THEN
    --               IF SIGN(NVL(v_ret_limit,0)) =-1 THEN
    --                 v_ret_limit :=0;
    --               END IF;
    --                v_gross_ret := NVL (v_ret_limit, 0);
    --            ELSE
    --               v_gross_ret := v_amt_to_reinsure;
    --            END IF;*/
    --/*get subclass gross retention from the setups. Function get_scl_uwyr_g_ret*/
    --         IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --            IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                IF (v_bcur_code = v_trt_cur_code) THEN
    --                    v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code)/ cur_all_risks_rec.pol_cur_rate ,v_rnd);
    --                 ELSE
    --                    v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code) ,v_rnd);
    --               END IF;
    --            ELSE
    --               v_retention_amt := ROUND(get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_trt_cur_code, cur_all_risks_rec.ipu_rc_code) *nvl(v_ri_cur_rate,v_trt_cur_rate),v_rnd);
    --            END IF;
    --         ELSE
    --              v_retention_amt := get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_cur_code, cur_all_risks_rec.ipu_rc_code);
    --         END IF;
    --            DBMS_OUTPUT.put_line (   '1 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_prrd_code='
    --                                  || v_prrd_code
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'prrd_gross_comp_retention='
    --                                  || cur_all_risks_rec.prrd_gross_comp_retention
    --                                  || 'v_retention_amt='
    --                                  || v_retention_amt
    --                                  || 'prrd_comp_ret_edited='
    --                                  || cur_all_risks_rec.prrd_comp_ret_edited
    --                                  || 'v_ret_limit='
    --                                  || v_ret_limit
    --                                 );
    --
    --           IF NVL(cur_all_risks_rec.prrd_gross_comp_retention,0) <> NVL(v_retention_amt,0) /*AND NVL(cur_all_risks_rec.prrd_comp_ret_edited,'N') ='Y' cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */THEN
    --           v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --            END IF;
    --       --v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --            IF v_amt_to_reinsure < v_retention_amt THEN
    --                v_ret_limit := NVL(v_amt_to_reinsure,0);---NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            ELSE
    --                v_ret_limit := v_retention_amt;-- -NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
    --            END IF;
    --DBMS_OUTPUT.put_line (   '1 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_ipu_reinsure_amt='
    --                                  || v_ipu_reinsure_amt
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'prrd_gross_comp_retention='
    --                                  || cur_all_risks_rec.prrd_gross_comp_retention
    --                                  || 'v_retention_amt='
    --                                  || v_retention_amt
    --                                  || 'prrd_comp_ret_edited='
    --                                  || cur_all_risks_rec.prrd_comp_ret_edited
    --                                  || 'v_ret_limit='
    --                                  || v_ret_limit
    --                                 );
    --           IF v_amt_to_reinsure > NVL (v_ret_limit, 0) THEN
    --               IF SIGN(NVL(v_ret_limit,0)) =-1 THEN
    --                 v_ret_limit :=0;
    --               END IF;
    --                v_gross_ret := NVL (v_ret_limit, 0);
    --            ELSE
    --               v_gross_ret := v_amt_to_reinsure;
    --            END IF;
    --
    --             IF NVL(v_amt_to_reinsure,0) > NVL(v_retention_amt,0) THEN
    --               v_amt_to_reinsure := NVL(v_amt_to_reinsure,0)-NVL(v_retention_amt,0);
    --               --     v_amt_to_reinsure := NVL(v_tot_risk_si,0)-NVL(v_retention_amt,0);
    --             ELSE
    --                v_amt_to_reinsure := 0;
    --            END IF;
    --
    --          v_special_ret_limit := v_gross_ret;
    --            v_special_ret_diff := 0;
    --
    --            IF NVL (cur_all_risks_rec.ipu_override_ri_retention, 0) != 0
    --            THEN
    --               v_special_ret_limit :=   NVL (cur_all_risks_rec.ipu_override_ri_retention, 0);
    --
    --               IF v_special_ret_limit > v_amt_to_reinsure
    --               THEN
    --                  v_special_ret_limit := v_amt_to_reinsure;
    --               END IF;
    --
    --               v_special_ret_diff := v_special_ret_limit - v_gross_ret;
    --            END IF;
    ----          v_special_ret_limit :=
    ----                      NVL (v_amt_to_reinsure, 0);
    ----            v_amt_to_reinsure :=
    ----                      NVL (v_amt_to_reinsure, 0)
    ----                      - NVL (v_special_ret_limit, 0);
    ----       RAISE_ERROR(v_special_ret_limit||';'||v_amt_to_reinsure);
    ----           IF v_rsk_excl = 'Y'
    ----           THEN
    ----               v_facnorml_excess    :=v_amt_to_reinsure;
    ----               v_facoblig_limit       :=v_amt_to_reinsure;
    ----               v_fac_amt :=  v_amt_to_reinsure;
    ----               v_amt_to_reinsure :=0;
    ----           END IF;
    --
    --            v_net_ret := 0;
    --            v_gross_ret := NVL (v_gross_ret, 0);
    --            DBMS_OUTPUT.put_line (   '2 be qst v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_gross_ret='
    --                                  || v_gross_ret
    --                                  || 'v_prrd_code='
    --                                  || v_prrd_code
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                 );
    --            -- process quota share
    --            v_pool_amt := 0;
    ----raise_error(v_gross_ret);
    ----RAISE_ERROR('IPU_CODE='||cur_all_risks_rec.ipu_code||'v_prrd_code='||v_prrd_code);
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code, 1003, v_prrd_code   )
    --            LOOP
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    ----QUOTA SHARE
    ----RAISE_eRROR('ERERE');
    --               -- Its A Quota share Type treaty
    --        -- calculate treaty sum insured in policy currency
    --         v_tot_risk_si := v_ipu_reinsure_amt;
    --
    --         v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
    --         v_prev_net_retention :=0;
    --               DBMS_OUTPUT.put_line
    --                                (   'startfrrom='
    --                                 || (  NVL
    --                                          (cur_treaties_rec.rei_si_start_from,
    --                                           0
    --                                          )
    --                                     * v_exhange_rate
    --                                    )
    --                                 || 'vgrossret='
    --                                 || NVL (v_gross_ret, 0)
    --                                );
    ---- raise_error(v_ipu_reinsure_amt||';'||v_retention_amt);
    --            IF NVL(v_tot_risk_si,0)=0 THEN
    --                v_tot_risk_si :=100;
    --                v_retention_amt :=100;
    --                v_gross_ret:=100;
    --            END IF;
    --               BEGIN
    --                  SELECT ctl_si_start_from, ctl_limit_amt
    --                    INTO v_ctl_si_start_from, v_ctl_limit_amt
    --                    FROM gin_class_treaty_limits
    --                   WHERE ctl_code = cur_treaties_rec.ptotr_ctl_code;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error fetching class treaty quota share limits....');
    --               END;
    --
    --
    --             IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --                IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                    IF (v_bcur_code = v_trt_cur_code) THEN
    --                       v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   )/ cur_all_risks_rec.pol_cur_rate;
    --                        v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit)/ cur_all_risks_rec.pol_cur_rate;
    ----                        RAISE_ERROR('v_ctl_limit_amt='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
    --                     ELSE
    --                        v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   );
    --                       v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);
    ----                       RAISE_ERROR('v_ctl_limit_amt111='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
    --                   END IF;
    --                ELSE
    --
    --                    v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   )*nvl(v_ri_cur_rate,v_trt_cur_rate);
    --                   v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit)*nvl(v_ri_cur_rate,v_trt_cur_rate);
    ----                   RAISE_ERROR('v_ctl_limit_amt22='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si||'REI LIMIT='||cur_treaties_rec.rei_limit||'v_ri_cur_rate='||v_ri_cur_rate||'v_trt_cur_rate='||v_trt_cur_rate);
    --                END IF;
    --             ELSE
    --                 v_ctl_si_start_from := NVL (NVL (v_ctl_si_start_from, cur_treaties_rec.rei_si_start_from ),   0   );
    --                   v_ctl_limit_amt := NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);
    --             END IF;
    --
    --               --IF (NVL(cur_treaties_rec.REI_SI_START_FROM,0) * v_exhange_rate) < NVL(v_gross_ret,0) THEN
    ----         RAISE_ERROR(v_exhange_rate||';'||v_ctl_si_start_from||';'||v_gross_ret);
    --               IF (NVL (v_ctl_si_start_from, 0) * v_exhange_rate) < NVL (v_gross_ret, 0) THEN
    --                    v_gross_ret := NVL (v_gross_ret, 0) - NVL (v_pool_amt, 0);
    --                  IF NVL (v_gross_ret, 0) >  (NVL (v_ctl_limit_amt, 0) * v_exhange_rate ) THEN
    --                     v_trt_si_pcur := ROUND (  NVL (v_ctl_limit_amt, 0) * v_exhange_rate * (cur_treaties_rec.ptotr_rate / 100));
    --                     v_net_ret :=  NVL (v_net_ret, 0) + (  (  NVL (v_ctl_limit_amt, 0) * NVL (v_exhange_rate, 0))  - NVL (v_trt_si_pcur, 0) );
    ----                      RAISE_ERROR('v_trt_si_pcur222='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --                  ELSE
    --                     v_trt_si_pcur := ROUND (  NVL (v_gross_ret, 0)  * (NVL (cur_treaties_rec.ptotr_rate, 0) / 100) );
    --                     v_net_ret :=  NVL (v_net_ret, 0)  + (NVL (v_gross_ret, 0) - NVL (v_trt_si_pcur, 0));
    ----                       RAISE_ERROR('v_trt_si_pcur333='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    ----raise_error (   'v_gross_ret=' || v_gross_ret  || 'v_trt_si_pcur='  || v_trt_si_pcur || 'v_net_ret=' || v_net_ret  );
    --                  END IF;
    --                  v_gross_ret :=v_net_ret;
    ----RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_trt_si_pcur||';'||v_tot_si||';'||v_exhange_rate);
    --                  DBMS_OUTPUT.put_line (   ' v_ipu_code='
    --                                        || cur_all_risks_rec.ipu_code
    --                                        || ' v_type='
    --                                        || 1003
    --                                        || ' v_prrd='
    --                                        || v_prrd_code
    --                                       );
    --                  DBMS_OUTPUT.put_line ('    v_trt_si_pcur=' || v_trt_si_pcur);
    --                  DBMS_OUTPUT.put_line ('    v_net_ret=' || v_net_ret);
    --                  v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --                  -- Culculate treaty premium
    ----                  RAISE_ERROR('v_trt_si_pcur='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
    --                  v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;
    --
    ----         RAISE_ERROR('v_cession_rate='||v_cession_rate);
    --                   IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION'
    --                   OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))
    --                   OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0
    --                   OR (cur_all_risks_rec.POL_POLICY_STATUS ='EN' AND cur_all_risks_rec.ipu_wef=v_prev_wef and cur_all_risks_rec.ipu_wet=v_prev_wet)
    --                   THEN
    --                       v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                       v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                       v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                       v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --        --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --                   ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                       v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                       v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                       v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                       v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                       v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                       v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --        DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --                   END if ;
    --
    --                  -- calculate QUOTA commission
    --                  v_trt_net_less_eq_comm_pcur :=
    --                     ROUND ((  (  v_trt_net_less_eq_prem_pcur
    --                                * cur_treaties_rec.rei_comm_rate
    --                               )
    --                             / 100
    --                            ),
    --                            v_rnd
    --                           );
    --                  v_trt_eq_com_pcur :=
    --                     ROUND ((  (  v_trt_eq_prem_pcur
    --                                * cur_treaties_rec.rei_earthqke_comm_rate
    --                               )
    --                             / 100
    --                            ),
    --                            v_rnd
    --                           );
    --                  v_trt_com_pcur :=
    --                       NVL (v_trt_net_less_eq_comm_pcur, 0)
    --                     + NVL (v_trt_eq_com_pcur, 0);
    --                  v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --                  v_pool_amt :=
    --                       NVL (v_pool_amt, 0)
    --                     + (  NVL (v_gross_ret, 0)
    --                        - (NVL (v_net_ret, 0) + NVL (v_trt_si_pcur, 0))
    --                       );
    --            /*********tax part**************************/
    ----------calculate reinsurance tax, reinsurance commission tax part
    --                  v_ptax_tcur := 0;
    --                  v_ctax_tcur := 0;
    --                  v_ptax_amount :=
    --                      ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,
    --                             v_rnd);
    --                  v_ctax_amount :=
    --                       ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,
    --                              v_rnd);
    --                  v_ptax_tcur :=
    --                            ROUND (v_ptax_amount * v_exhange_rate, v_bcur_rnd);
    --                  v_ctax_tcur :=
    --                            ROUND (v_ctax_amount * v_exhange_rate, v_bcur_rnd);
    --
    --/***********************************************************************/
    ----                RAISE_ERROR('v_cession_rate='||v_cession_rate);
    --                  UPDATE gin_policy_rein_risk_details
    --                     SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                         ptotr_risk_si_tcur =
    --                                         ROUND (ptotr_trt_si_tcur, v_bcur_rnd),
    --                         ptotr_risk_prem_tcur =
    --                                       ROUND (ptotr_trt_prem_tcur, v_bcur_rnd),
    --                         ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                         ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                         ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                         ptotr_trt_prem_tcur =
    --                                           ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                         ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                         ptotr_earthqke_comm_rate =
    --                                       cur_treaties_rec.rei_earthqke_comm_rate,
    --                         ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                         ptotr_trt_comm_tcur =
    --                                            ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                         ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                         ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                         ptotr_acpr_code = v_accprd,
    --                         ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                         ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                         ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                         ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                         ptotr_ggt_tran_no = v_tran_no,
    --                         ptotr_tran_type = v_tran_type,
    --                         ptotr_earthqke_prem =
    --                                        ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                         ptotr_earthqke_comm =
    --                                         ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                         ptotr_net_less_eq_prem =
    --                               ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                         ptotr_net_less_eq_comm =
    --                               ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                   WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                     AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                     AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                     AND ptotr_prrd_code = v_prrd_code;
    --
    --            /************************start participartion *****/
    ----------------------insert participarticipation for each risk
    ----                  v_trt_rpremtax_pcur := 0;
    ----                  v_trt_premtax_pcur := 0;
    --
    --
    --
    --                  Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                                   v_prrd_code,
    --                                   cur_treaties_rec.ptotr_code,
    --                                   v_trt_si_pcur,
    --                                   v_trt_si_tcur,
    --                                   v_trt_prem_pcur,
    --                                   v_trt_prem_tcur,
    --                                   v_trt_com_pcur,
    --                                   v_trt_com_tcur,
    --                                   cur_all_risks_rec.pol_cur_code,
    --                                   cur_all_risks_rec.pol_cur_symbol,
    --                                   cur_all_risks_rec.ipu_pol_batch_no,
    --                                   cur_all_risks_rec.ipu_pol_policy_no,
    --                                   cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                    v_tran_no,
    --                                    v_tran_type,
    --                                   cur_all_risks_rec.ipu_code,
    --                                   cur_all_risks_rec.ipu_sec_scl_code,
    --                                    v_exhange_rate,
    --                                    v_rnd,
    --                                    v_bcur_rnd
    --                                   );
    --               END IF;
    --            END LOOP;                                            --qouta share
    --
    ----end quota******************************************************************************************
    --            DBMS_OUTPUT.put_line (   'be sup v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                 );
    --
    --            FOR cur_treaties_rec IN cur_treaties (cur_all_risks_rec.ipu_code,
    --                                                  1004,
    --                                                  v_prrd_code
    --                                                 )
    --            LOOP
    --               check_treaty_participation (cur_treaties_rec.rei_code);
    --               v_trt_rprem_tax := 0;
    --               v_trt_prem_tax := 0;
    --               v_trt_com_pcur := 0;
    --
    --                -- Its A Surplus Type treaty
    --               -- calculate treaty sum insured in policy currency
    --               IF cur_treaties_rec.ptotr_rate * v_ret_limit >
    --                                                            v_amt_to_reinsure
    --               THEN
    --                  v_trt_si_pcur := v_amt_to_reinsure;
    --               ELSE
    --                  v_trt_si_pcur := cur_treaties_rec.ptotr_rate * v_ret_limit;
    --               END IF;
    --
    --               -- Its A Surplus Type treaty
    --               -- calculate treaty sum insured in policy currency
    ----               raise_error(v_gross_ret||';'||v_prev_net_retention);
    ----                  IF SIGN( v_gross_ret-NVL(v_prev_net_retention,0)) = 1 THEN
    ----                    v_gross_ret := v_gross_ret-NVL(v_prev_net_retention,0);
    ----                  END IF;
    --       DBMS_OUTPUT.put_line (   ' v_gross_ret='
    --                                        || v_gross_ret
    --                                        || ' v_prev_net_retention='
    --                                        || v_prev_net_retention);
    --/*Get treaty limit from the function gettreatylimit*/
    --                IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code  THEN
    --                    IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_all_risks_rec.pol_exch_rate_fixed,'N') = 'Y') AND NVL(v_rein_cur_param,'N')='Y'   THEN
    --                        v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_bcur_code, cur_all_risks_rec.ipu_rc_code)/cur_all_risks_rec.pol_cur_rate-NVL(v_retention_amt,0);
    --                    ELSE
    --                       v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_trt_cur_code, cur_all_risks_rec.ipu_rc_code)*v_trt_cur_rate-NVL(v_retention_amt,0);
    --                    END IF;
    --                ELSE
    --                    v_treat_limit_amt := gettreatylimit (cur_all_risks_rec.ipu_uw_yr, cur_all_risks_rec.ipu_sec_scl_code, v_cur_code, cur_all_risks_rec.ipu_rc_code)-NVL(v_retention_amt,0);
    --                END IF;
    --
    --               IF (NVL(v_treat_limit_amt,0) <> NVL(v_retention_amt,0) AND NVL(cur_all_risks_rec.prrd_comp_ret_edited,'N') ='Y') OR (NVL(cur_treaties_rec.ptotr_rate,0)  <> NVL(cur_treaties_rec.ptotr_allowed_rate,0))/* cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */THEN
    --                  v_treat_limit_amt :=  cur_treaties_rec.ptotr_rate * NVL(cur_all_risks_rec.prrd_gross_comp_retention,0);---NVL(v_retention_amt,0);
    --                END IF;
    --              DBMS_OUTPUT.put_line (   ' v_amt_to_reinsure='
    --                                        || v_amt_to_reinsure
    --                                        || ' v_treat_limit_amt='
    --                                        || v_treat_limit_amt
    --                                        || ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur);
    --
    --              IF v_trt_si_pcur > v_treat_limit_amt THEN
    --                    v_trt_si_pcur := v_treat_limit_amt;
    --              ELSif v_amt_to_reinsure <= v_trt_si_pcur AND v_amt_to_reinsure <> 0 THEN
    --                    v_trt_si_pcur := v_amt_to_reinsure;
    ----              ELSE
    ----                v_trt_si_pcur :=0;
    --              END IF;
    --              DBMS_OUTPUT.put_line (   ' v_amt_to_reinsure='
    --                                        || v_amt_to_reinsure
    --                                        || ' v_treat_limit_amt='
    --                                        || v_treat_limit_amt
    --                                        || ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur);
    --
    --              v_trt_si_pcur :=abs(v_trt_si_pcur);
    --              v_tot_risk_si :=abs(v_tot_risk_si);
    --              v_trt_si_tcur := 0;
    --               v_amt_to_reinsure := v_amt_to_reinsure - v_trt_si_pcur;
    --               v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
    --        -- Culculate treaty premium
    --               v_cession_rate := v_trt_si_pcur/ v_tot_risk_si * 100;
    --       DBMS_OUTPUT.put_line (   ' v_trt_si_pcur='
    --                                        || v_trt_si_pcur
    --                                        || ' v_tot_risk_si='
    --                                        || v_tot_risk_si);
    --       DBMS_OUTPUT.PUT_LINE('v_ri_prem_formular='||v_ri_prem_formular);
    --                IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION'
    --                OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))
    --                OR NVL(cur_all_risks_rec.IPU_FP,0) !=0
    --                OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0
    --                ---HANDLES EN downward effected on the same date as the previous active transaction.
    --                OR (cur_all_risks_rec.POL_POLICY_STATUS ='EN' AND cur_all_risks_rec.ipu_wef=v_prev_wef and cur_all_risks_rec.ipu_wet=v_prev_wet)
    --                THEN
    --                   v_trt_net_less_eq_prem_pcur := ROUND(  v_cession_rate  * NVL (cur_all_risks_rec.prrd_ri_net_less_eq_prem, 0)    / 100, v_rnd   );
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ROUND(v_cession_rate * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0) / 100,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --
    --     DBMS_OUTPUT.put_line (   ' v_cession_rate='
    --                                        || v_cession_rate
    --                                        || ' ipu_GP='
    --                                        || cur_all_risks_rec.ipu_GP
    --                                        || 'PTOTR_PREV_CESSION_RAT='
    --                                        || cur_treaties_rec.PTOTR_PREV_CESSION_RATe
    --                                        || 'PRRD_RI_PREM='
    --                                        || cur_all_risks_rec.PRRD_RI_PREM
    --                                        || 'prrd_ri_net_less_eq_prem='
    --                                        || cur_all_risks_rec.prrd_ri_net_less_eq_prem
    --                                       );
    --                   v_trt_net_less_eq_prem_pcur:=((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_ri_net_less_eq_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_net_less_eq_prem_pcur:= round(v_trt_net_less_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
    --                   v_trt_eq_prem_pcur := ((v_cession_rate/100*cur_all_risks_rec.ipu_GP)-(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_treaties_rec.PTOTR_PREV_CESSION_RATE/100*cur_all_risks_rec.PRRD_RI_PREM)) * cur_all_risks_rec.prrd_earthquake_prem/cur_all_risks_rec.PRRD_RI_PREM;
    --                   v_trt_eq_prem_pcur:= round(v_trt_eq_prem_pcur,v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
    --                   v_trt_prem_pcur :=   NVL (v_trt_eq_prem_pcur, 0)  + NVL (v_trt_net_less_eq_prem_pcur, 0);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_pcur='||v_trt_prem_pcur);
    --                   v_trt_prem_tcur :=   ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
    --    DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
    --               ELSE
    --                RAISE_ERROR('Reinsurance computation method not setup in parameters. RI_PREM_FORMULAR');
    --               END if ;
    --
    ----               ptotr_trt_prem_pcur
    --
    --                 -- calculate QUOTA commission
    --               v_trt_net_less_eq_comm_pcur :=  ROUND ((  (  v_trt_net_less_eq_prem_pcur   * cur_treaties_rec.rei_comm_rate   )   / 100  ),   v_rnd     );
    --               v_trt_eq_com_pcur :=  ROUND ((  (  v_trt_eq_prem_pcur   * cur_treaties_rec.rei_earthqke_comm_rate    )  / 100   ),  v_rnd );
    --               --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
    --               v_trt_com_pcur :=   NVL (v_trt_net_less_eq_comm_pcur, 0)  + NVL (v_trt_eq_com_pcur, 0);
    --               v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
    --        --------calculate reinsurance tax, reinsurance commission tax part
    --               v_ptax_tcur := 0;
    --               v_ctax_tcur := 0;
    --               v_ptax_amount := ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,   v_rnd);
    --               v_ctax_amount := ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,  v_rnd);
    --               v_ptax_tcur := v_ptax_amount * v_exhange_rate;
    --               v_ctax_tcur := v_ctax_amount * v_exhange_rate;
    --               v_cession_rate := ROUND (v_trt_si_pcur/ v_tot_risk_si * 100,4);
    --           UPDATE gin_policy_rein_risk_details
    --                  SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
    --                      ptotr_risk_si_tcur = ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
    --                      ptotr_risk_prem_tcur = ROUND (cur_all_risks_rec.prrd_ri_prem, v_bcur_rnd),
    --                      ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
    --                      ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
    --                      ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
    --                      ptotr_trt_prem_tcur = ROUND (v_trt_prem_tcur, v_bcur_rnd),
    --                      ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
    --                      ptotr_earthqke_comm_rate = cur_treaties_rec.rei_earthqke_comm_rate,
    --                      ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
    --                      ptotr_trt_comm_tcur = ROUND (v_trt_com_tcur, v_bcur_rnd),
    --                      ptotr_cession_pct = ROUND (v_cession_rate, 4),
    --                      ptotr_acpr_sht_desc = v_acpr_sht_desc,
    --                      ptotr_acpr_code = v_accprd,
    --                      ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
    --                      ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
    --                      ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
    --                      ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
    --                      ptotr_ggt_tran_no = v_tran_no,
    --                      ptotr_tran_type = v_tran_type,
    --                      ptotr_earthqke_prem =  ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_earthqke_comm =  ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_prem = ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
    --                      ptotr_net_less_eq_comm = ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
    --                WHERE ptotr_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND ptotr_as_code = cur_treaties_rec.rei_as_code
    --                  AND ptotr_rei_code = cur_treaties_rec.rei_code
    --                  AND ptotr_prrd_code = v_prrd_code;
    --
    --        /************************start participartion *****/
    ----------------------insert participarticipation for each risk
    ----               v_trt_rpremtax_pcur := 0;
    ----               v_trt_premtax_pcur := 0;
    --
    --              Update_treaty_partipants(cur_treaties_rec.rei_code,
    --                               v_prrd_code,
    --                               cur_treaties_rec.ptotr_code,
    --                               v_trt_si_pcur,
    --                               v_trt_si_tcur,
    --                               v_trt_prem_pcur,
    --                               v_trt_prem_tcur,
    --                               v_trt_com_pcur,
    --                               v_trt_com_tcur,
    --                               cur_all_risks_rec.pol_cur_code,
    --                               cur_all_risks_rec.pol_cur_symbol,
    --                               cur_all_risks_rec.ipu_pol_batch_no,
    --                               cur_all_risks_rec.ipu_pol_policy_no,
    --                               cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                v_tran_no,
    --                                v_tran_type,
    --                               cur_all_risks_rec.ipu_code,
    --                               cur_all_risks_rec.ipu_sec_scl_code,
    --                                v_exhange_rate,
    --                                v_rnd,
    --                                v_bcur_rnd
    --                               );
    --            END LOOP;                                                --surplus
    ----raise_error('here=='||v_net_ret||';'||v_special_ret_limit||';'||v_special_ret_diff);
    --            IF NVL (v_net_ret, 0) = 0
    --            THEN
    --               v_net_ret := v_special_ret_limit;
    --            ELSE
    --               v_net_ret := NVL (v_net_ret, 0) + v_special_ret_diff;
    --            END IF;
    --
    --            DBMS_OUTPUT.put_line (   '11v_net_ret='
    --                                  || v_net_ret
    --                                  || 'v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'v_special_ret_diff='
    --                                  || v_special_ret_diff
    --                                  || 'cur_all_risks_rec.ipu_reinsure_amt='
    --                                  || cur_all_risks_rec.ipu_reinsure_amt
    --                                 );
    ----raise_error(v_ipu_reinsure_amt||';'||get_risk_prev_si(cur_all_risks_rec.prrd_code));
    --v_ipu_reinsure_amt := ABS(NVL(v_ipu_reinsure_amt,0) -NVL(cur_all_risks_rec.prrd_prev_ri_si,0));
    --
    ----CHECK THIS !!!!!!!!!!!!!!!!!!!
    --
    ----raise_error('v_gross_ret='||v_gross_ret||'gross_ret='||cur_all_risks_rec.prrd_gross_comp_retention||'v_tot_risk_si='||v_tot_risk_si);
    --            IF NVL(v_gross_ret,0) = 0 THEN
    ----               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_risk_si,0) * 100,   4   );
    --               v_ret_rate := ROUND (  NVL (cur_all_risks_rec.prrd_gross_comp_retention,0)  / NVL(v_tot_risk_si,0) * 100,   4   );
    -- --               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_si,0) * 100,   4   );
    ----                IF v_ret_rate > 100 THEN
    ----                    v_ret_rate :=100;
    ----                    v_net_ret := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
    ----                END IF;
    ----                v_gross_ret_is := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
    --            ELSE
    --                v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_risk_si,0)  * 100,   4   );
    ----                 v_ret_rate := ROUND ( (v_gross_ret+NVL(v_prev_net_retention,0)) / NVL(v_tot_risk_si,0)  * 100,   4   );
    -- --               v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_si,0)  * 100,   4   );
    --            END IF;
    --
    ----RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_ipu_reinsure_amt||';'||v_ret_rate||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_tot_si||';'||v_tot_risk_si||';'||cur_all_risks_rec.prrd_prev_net_retention);
    --              v_gross_ret_is := NVL (v_gross_ret, cur_all_risks_rec.prrd_gross_comp_retention);
    --              SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   )  INTO v_comp_net_rate FROM DUAL;
    --
    --         --     SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ) * NVL (cur_all_risks_rec.prrd_ri_prem, 0) / 100 INTO v_comp_net_prem FROM DUAL;
    --
    --            IF NVL(v_gross_ret_is,0) =0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0  */AND NVL(v_ret_rate,0) <> 0 THEN
    --       --         v_comp_net_prem :=(v_ret_rate*NVL(cur_all_risks_rec.prrd_cumm_ri_prem,cur_all_risks_rec.prrd_ri_prem)/100)-NVL(cur_all_risks_rec.prrd_net_prev_prem,0);
    ----                v_net_ret :=0;
    --                    v_gross_ret_is :=v_net_ret;
    --            END IF;
    --
    --
    ---- raise_error('v_ipu_reinsure_amt='||v_ipu_reinsure_amt||'ri prem='||cur_all_risks_rec.prrd_ri_prem||'cur_all_risks_rec.ipu_wef='||cur_all_risks_rec.ipu_wef||'cur_all_risks_rec.ipu_wet='||cur_all_risks_rec.ipu_wet||'prev prem='||cur_all_risks_rec.prrd_ri_prev_prem
    ---- ||'v_prev_wef='||v_prev_wef||'v_prev_wet='||v_prev_wet||'v_ret_rate='||v_ret_rate||'v_comp_net_rate='||v_comp_net_rate);
    --
    --            IF NVL(cur_all_risks_rec.prrd_ri_prem,0) <> 0 THEN
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(cur_all_risks_rec.IPU_FP,0) !=0  THEN
    --                   v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                IF cur_all_risks_rec.pol_policy_status ='EN' AND cur_all_risks_rec.ipu_wef=v_prev_wef and cur_all_risks_rec.ipu_wet=v_prev_wet THEN
    --                IF NVL(v_ipu_reinsure_amt,0)=0 THEN
    --                v_ipu_reinsure_amt:=1;
    --                END IF;
    --
    --                 v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --                  -- v_comp_net_prem:=ROUND (  (  v_net_ret   / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0) * 100   ))  * NVL (cur_all_risks_rec.prrd_ri_prem, 0) / 100;
    --
    --                ELSE
    --                 --RAISE_ERROR('v_comp_net_prem111='||v_comp_net_prem||'RI PREM='||cur_all_risks_rec.prrd_ri_prem);
    --                 --  v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    --                   v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(NVL(cur_all_risks_rec.PRRD_PREV_RET_RATE,0)/100*cur_all_risks_rec.ipu_GP)+(NVL(cur_all_risks_rec.PRRD_PREV_RET_RATE,0)/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    --
    --             END IF;
    --               END if ;
    --            ELSE
    --                v_comp_net_prem :=0;
    --            END IF;
    --DBMS_OUTPUT.put_line (   'v_comp_net_prem='
    --                                  || v_comp_net_prem);
    --
    --          UPDATE gin_policy_risk_ri_dtls
    --               SET prrd_comp_retention = v_net_ret,
    --                   prrd_gross_comp_retention = v_gross_ret_is,--NVL (v_gross_ret, prrd_gross_comp_retention),
    --                   prrd_com_retention_rate =  v_ret_rate,
    --                   --ROUND (  NVL (v_gross_ret, prrd_gross_comp_retention)  / NVL (v_ipu_reinsure_amt/*cur_all_risks_rec.ipu_reinsure_amt*/, 0)  * 100,   4   ),
    --                   prrd_comp_net_rate = nvl(v_ret_rate,v_comp_net_rate),--ROUND (  v_net_ret  / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ),
    --                   prrd_net_prem =  v_comp_net_prem--ROUND (  (  v_net_ret   / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100   ))  * NVL (prrd_ri_prem, 0) / 100
    --             WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --               AND prrd_code = v_prrd_code
    --               AND prrd_tran_no = v_tran_no;
    --
    --            DBMS_OUTPUT.put_line (   'v_amt_to_reinsure='
    --                                  || v_amt_to_reinsure
    --                                  || 'avail_fulc_bal '
    --                                  || v_avail_fulc_bal
    --                                  || '  facoblig_user_excess '
    --                                  || cur_all_risks_rec.prrd_facoblig_user_excess
    --                                 );
    --
    --            BEGIN
    --               SELECT SUM (NVL (fc_amount, 0))
    --                 INTO v_total_facoblig_ceded
    --                 FROM gin_facre_cessions
    --                WHERE fc_prrd_code = cur_all_risks_rec.prrd_code
    --                  AND fc_facre_type = 'O';
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error getting fac obliq cession..');
    --            END;
    --
    --            IF NVL (cur_all_risks_rec.prrd_facoblig_alloc_chk, 'N') = 'Y'
    --            THEN
    --               IF NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0) > 0
    --               THEN
    --                  v_facoblig_limit := NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0);
    --               ELSE
    --                  v_facoblig_limit :=  NVL (cur_all_risks_rec.prrd_facoblig_limit, 0);
    --               END IF;
    --            ELSE
    --               v_facoblig_limit := 0;
    ----               BEGIN
    ----                   IF v_rsk_excl = 'Y' THEN
    ----                       v_facoblig_limit :=v_fac_amt;
    ----                       v_avail_fulc_bal :=v_fac_amt;
    ----                   END IF;
    ----               END;
    --            END IF;
    --DBMS_OUTPUT.put_line ('v_amt_to_reinsure='||v_amt_to_reinsure||';'||v_avail_fulc_bal||';'||v_facoblig_limit||';'||v_total_facoblig_ceded);
    --            IF    v_amt_to_reinsure > 0
    --               OR (    NVL (v_avail_fulc_bal, 0) > 0
    --                   and NVL (v_facoblig_limit, 0) > 0
    --                  )
    --             THEN
    --               IF     NVL (v_amt_to_reinsure, 0) > 0
    --                  AND NVL (v_facoblig_limit, 0) > 0
    --                  AND NVL (v_total_facoblig_ceded, 0) = 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('XXXXXXXXXXXXXXXXXXX');
    --
    --                  IF v_amt_to_reinsure > v_facoblig_limit
    --                  THEN
    --                     -- raise_error('here');
    --                     v_facoblig_excess := v_facoblig_limit;
    --                     v_facnorml_excess :=
    --                               v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
    --                  ELSE
    --                     v_facoblig_excess := v_amt_to_reinsure;
    --                     v_facnorml_excess := 0;
    --                  END IF;
    --               ELSIF     NVL (v_amt_to_reinsure, 0) > 0
    --                     AND NVL (v_facoblig_limit, 0) > 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('YYYYYYYYYYYYYYYYYYY');
    --                  v_facoblig_excess :=
    --                       NVL (v_facoblig_limit, 0)
    --                     - NVL (v_total_facoblig_ceded, 0);
    --
    --                  IF v_amt_to_reinsure > v_facoblig_excess
    --                  THEN
    --                     -- raise_error('here');
    --                     v_facoblig_excess := v_facoblig_excess;
    --                     v_facnorml_excess :=
    --                               v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
    --                  ELSE
    --                     v_facoblig_excess := v_amt_to_reinsure;
    --                     v_facnorml_excess := 0;
    --                  END IF;
    --               ELSE
    --                  DBMS_OUTPUT.put_line ('ZZZZZZZZZZZZZZZZZZZ');
    --                  v_facoblig_excess :=
    --                           v_facoblig_limit - NVL (v_total_facoblig_ceded, 0);
    --                  v_facnorml_excess :=
    --                       NVL (v_amt_to_reinsure, 0)
    --                       - NVL (v_facoblig_excess, 0);
    --               END IF;
    --
    ----                    v_avail_fulc_bal :=NVL(v_facnorml_excess,0)-NVL(cur_all_risks_rec.prrd_prev_facre_si,0);
    --
    ----                   IF v_rsk_excl = 'Y' THEN
    ----                        v_avail_fulc_bal :=0;
    ----                   END IF;
    ------
    ----                 BEGIN
    ----                    SELECT SUM(DECODE(SIGN(FC_PREM_AMT),1,ABS(NVL(fc_amount,0)),-ABS(NVL(fc_amount,0))))
    ----                      INTO v_prev_fc_amnt
    ----                      FROM gin_facre_cessions,
    ----                      gin_insured_property_unds
    ----                     WHERE FC_IPU_CODE=IPU_CODE
    ----                     and IPU_ID = cur_all_risks_rec.ipu_id
    ----                     AND IPU_UW_YR=cur_all_risks_rec.IPU_UW_YR ;
    ----                 EXCEPTION
    ----                    WHEN OTHERS
    ----                    THEN
    ----                       v_prev_fc_amnt := 0;
    ----                 END;
    --
    ----            IF NVL(v_tot_risk_si,0) > NVL(v_trans_sign*v_trt_si_pcur,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0) THEN
    ----                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trt_si_pcur,0)+NVL(v_net_ret,0),0));
    ----            ELSE
    ----             v_avail_fulc_bal :=NVL(v_prev_fc_amnt,0);
    ----            END IF;
    --DBMS_OUTPUT.put_line (   'v_facnorml_excess='
    --                                  || v_facnorml_excess
    --                                  || 'v_ipu_reinsure_amt='
    --                                  || v_ipu_reinsure_amt
    --                                  || 'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal);
    --                v_excess_pct := ROUND (  (  NVL (v_facnorml_excess, 0) + NVL (v_avail_fulc_bal, 0)) / NVL(v_tot_risk_si,0) * 100, 4 );
    --                IF v_gross_ret = 0 THEN
    --                   v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_risk_si,0) * 100,   4   );
    --                ELSE
    --                    v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_risk_si,0)  * 100,   4   );
    --                END IF;
    --              v_gross_ret_is := NVL (v_gross_ret, cur_all_risks_rec.prrd_gross_comp_retention);
    --               SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ) INTO v_comp_net_rate FROM DUAL;
    --
    --               IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))   OR NVL(cur_all_risks_rec.IPU_FP,0) !=0 OR NVL(cur_all_risks_rec.PRRD_RI_PREM,0)  =0 THEN
    --                   v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --               ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                   v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    --               IF NVL(v_comp_net_prem,0) <ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   ) THEN
    --
    --                 v_comp_net_prem := ROUND(  v_ret_rate  * NVL (cur_all_risks_rec.prrd_ri_prem, 0)    / 100, v_rnd   );
    --
    --                END IF;
    --               END if ;
    --       DBMS_OUTPUT.put_line (   'v_comp_net_prem='
    --                                  || v_comp_net_prem
    --                                  || 'v_gross_ret_is='
    --                                  || v_gross_ret_is
    --                                  || 'v_ret_rate='
    --                                  || v_ret_rate
    ----                                  || 'v_prev_fc_amnt='
    ----                                  || v_prev_fc_amnt
    --                                  || 'v_excess_pct='
    --                                  || v_excess_pct
    --                                  || 'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal);
    --     DBMS_OUTPUT.put_line (   'v_tot_risk_si='
    --                                  || v_tot_risk_si
    --                                  || 'v_trt_si_pcur='
    --                                  || v_trt_si_pcur
    --                                  || 'prrd_prev_ri_si='
    --                                  || cur_all_risks_rec.prrd_prev_ri_si
    --                                  || 'v_net_ret='
    --                                  || v_net_ret
    ----                                  || 'v_prev_fc_amnt='
    ----                                  || v_prev_fc_amnt
    --                                  );
    ----             IF NVL(v_gross_ret_is,0) =0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0 */ AND NVL(v_ret_rate,0) <> 0 THEN
    ----                 v_excess_pct := ROUND(NVL(v_prev_fc_amnt,0)/NVL(v_tot_risk_si,0)*100,4);
    ----                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trans_sign*v_trt_si_pcur,0)+abs(NVL(cur_all_risks_rec.prrd_prev_ri_si,0))+NVL(v_net_ret,0),0)- NVL(v_prev_fc_amnt,0));
    ----                 v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0)+NVL(v_trt_si_pcur,0),0));
    ----                v_net_ret := 0;
    ----                  v_excess_pct :=ROUND (  ( NVL (v_avail_fulc_bal, 0)  )   / NVL (v_tot_risk_si, 0)* 100,4 );
    ----           END IF;
    -- DBMS_OUTPUT.put_line (  'v_avail_fulc_bal='
    --                                  || v_avail_fulc_bal|| 'v_facnorml_excess='
    --                                  || v_facnorml_excess);
    ----             RAISE_ERROR('v_comp_net_prem333='||v_comp_net_prem||'RI PREM='||cur_all_risks_rec.prrd_ri_prem);
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_avail_fulc_bal = v_facnorml_excess + NVL (v_avail_fulc_bal, 0),
    --                      prrd_facoblig_excess = v_facoblig_excess,
    --                      --PRRD_FACOBLIG_USER_EXCESS =v_facoblig_excess,
    --                      prrd_excess_pct = v_excess_pct,
    --                      prrd_comp_retention = v_net_ret,
    --                      prrd_gross_comp_retention = v_gross_ret_is,--v_gross_ret,
    --                      prrd_com_retention_rate = v_ret_rate,--ROUND (  NVL (prrd_gross_comp_retention, 0) / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))  * 100,  4  ),
    --                      prrd_comp_net_rate = v_ret_rate,-- ROUND (  v_net_ret  / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))   * 100,    4  ),
    --                      prrd_net_prem = v_comp_net_prem--  ( (v_net_ret /DECODE( (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0)) ,0,1, (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))) * 100  )   * NVL (prrd_ri_prem, 0) / 100  )                                                 --,
    --                --PRRD_FACRE_AMOUNT =v_facoblig_excess
    --               WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND prrd_code = v_prrd_code
    --                  AND prrd_tran_no = v_tran_no;
    --
    --               DELETE gin_facre_cessions
    --                     WHERE fc_ipu_code = cur_all_risks_rec.ipu_code
    --                       AND fc_facre_type = 'O';
    --
    --            END IF;
    --            fix_rounding_errors(cur_all_risks_rec.prrd_codE);
    ----            -- IF SI TO FACRE IS ZERO AND PREMIUM IS NOT ZERO, THEN POPULATE THE PREVIOUS FACRE ACCOUNTS
    ------            raise_error(v_avail_fulc_bal||'v_excess_pct='||v_excess_pct);
    ----/*populate facre automatically where fac SI is zero and rate <> zero*/
    ----            IF NVL (v_avail_fulc_bal, 0) =0  THEN
    ----                FOR cur_prev_facre_rec IN cur_prev_facre(cur_all_risks_rec.ipu_prev_ipu_code) LOOP
    ----                    IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','CN')) THEN
    ----                       v_fc_prem := round(cur_prev_facre_rec.fc_rate*NVL (cur_all_risks_rec.prrd_ri_prem, 0)/100, v_rnd );
    ----                    ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    ----                       v_fc_prem:=ROUND((cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)-(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)+(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
    ----                    END if ;
    ----
    ------                RAISE_ERROR(cur_prev_facre_rec.FC_RATE||';'||cur_all_risks_rec.ipu_prev_ipu_code);
    ----                     INSERT INTO gin_facre_cessions
    ----                        (fc_code, fc_agnt_agent_code, fc_amount,
    ----                         fc_wef, fc_ipu_code, fc_agent_sht_desc,
    ----                         fc_rate, fc_comm_rate, fc_comm_amt, fc_don_by,
    ----                         fc_dc_no, fc_prem_amt, fc_pol_batch_no, fc_uwyr,
    ----                         fc_ggt_tran_no, fc_tran_type, fc_scl_code, fc_amt_or_rate, fc_prrd_code,
    ----                         fc_auth_dt, fc_prev_si, fc_prev_rate,  fc_refund_prem, fc_refund_comm, fc_prev_amount,
    ----                         fc_wet, fc_prev_comm_rate, fc_prev_fc_code,  fc_earthqke_prem, fc_earthqke_comm_rate,
    ----                         fc_earthqke_comm, fc_net_less_eq_comm,
    ----                         fc_net_less_eq_prem, fc_facre_type, fc_accepted_date, fc_accepted, fc_prem_diff_amt,
    ----                         fc_vat_amt, fc_vat_rate, fc_mngmnt_type, fc_mngmnt_value, fc_rein_tax_type,
    ----                         fc_rein_tax_value, fc_mngmnt_amt,fc_rein_tax_amt, fc_override_prem,
    ----                         fc_override_type, fc_override_value, fc_remark, fc_whtx_rate, fc_whtx_amt
    ----                        )
    ----                 VALUES (gin_fc_code_seq.NEXTVAL, cur_prev_facre_rec.fc_agnt_agent_code, 0,
    ----                         cur_all_risks_rec.ipu_wef, cur_all_risks_rec.ipu_code, cur_prev_facre_rec.fc_agent_sht_desc,
    ----                         cur_prev_facre_rec.fc_rate, cur_prev_facre_rec.fc_comm_rate, round(cur_prev_facre_rec.fc_comm_rate*v_fc_prem/100,v_rnd), v_user,
    ----                         NULL, v_fc_prem, v_batch_no, cur_all_risks_rec.pol_uw_year,
    ----                         cur_all_risks_rec.prrd_tran_no, cur_all_risks_rec.pol_policy_status,
    ----                         cur_all_risks_rec.ipu_sec_scl_code, cur_prev_facre_rec.fc_amt_or_rate, cur_all_risks_rec.prrd_code,
    ----                         NULL, NULL, cur_prev_facre_rec.fc_rate,
    ----                         0, 0, cur_prev_facre_rec.fc_prem_amt,
    ----                         cur_all_risks_rec.ipu_wet, cur_prev_facre_rec.fc_comm_amt, cur_prev_facre_rec.fc_code,
    ----                         0, 0,
    ----                         0, 0,
    ----                         0, cur_prev_facre_rec.fc_facre_type,
    ----                         cur_all_risks_rec.ipu_wef, 'Y', 0,
    ----                         0, 0, null,
    ----                         0, null,
    ----                         0, 0,
    ----                         0, 0,
    ----                         null, 0,
    ----                         'Auto facre cedding as si is zero', 0, 0
    ----                        );
    ----                  END LOOP;
    ----             END IF;
    --      --   END IF; FOR ZERO
    --      END LOOP;
    --
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         --DBMS_OUTPUT.PUT_LINE('Hata miti ni dawa...You are a genius...you just did a Zero devide..',no_acknowledge);
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0.Continue if covered by XOL...'
    --            );
    --   END;
    PROCEDURE process_facoblig (v_batch_no    IN NUMBER,
                                v_tran_no     IN NUMBER,
                                v_tran_type   IN VARCHAR2,
                                v_user        IN VARCHAR2,
                                v_ipu_code    IN NUMBER)
    IS
        CURSOR cur_all_risks IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     prrd_gross_comp_retention     gross_comp_ret,
                     ipu_pol_est_max_loss,
                     prrd_avail_fulc_bal,
                     prrd_ri_prem,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_sect_sht_desc,
                     ipu_cur_code,
                     prrd_facre_amount,
                     ipu_reinsure_amt,
                     prrd_gross_comp_retention,
                     ipu_prem_tax,
                     ipu_bind_code,
                     ipu_max_exposure,
                     prrd_earthquake_prem,
                     prrd_ri_net_less_eq_prem,
                     prrd_code,
                     pol_prem_tax,
                     pol_binder_policy,
                     prrd_as_code,
                     prrd_facoblig_excess,
                     prrd_facoblig_user_excess,
                     prrd_facoblig_alloc_chk
                FROM gin_policies,
                     gin_insured_property_unds,
                     gin_policy_risk_ri_dtls
               WHERE     pol_batch_no = ipu_pol_batch_no
                     AND ipu_code = prrd_ipu_code
                     AND prrd_tran_no = v_tran_no
                     --  AND IPU_REINSURED = 1
                     --              AND (   NVL (prrd_avail_fulc_bal, 0) > 0
                     --                   OR NVL (prrd_facoblig_excess, 0) > 0
                     --                  )
                     AND ipu_pol_batch_no = v_batch_no
            ORDER BY ipu_code;

        CURSOR cur_fac_oblig (vascode IN NUMBER)
        IS
            SELECT *
              FROM gin_arrangmnt_facoblig, tqc_agencies
             WHERE afob_agn_code = agn_code AND afob_as_code = vascode;

        CURSOR cur_fac_obj IS
            SELECT GIN_FACRE_CESSIONS.*
              FROM GIN_FACRE_CESSIONS
             WHERE     FC_POL_BATCH_NO = v_batch_no
                   AND FC_GGT_TRAN_NO = v_tran_no;

        v_ceded                NUMBER;
        v_fc_code              NUMBER;
        -- v_user     VARCHAR(30);
        v_as_fac_oblig_limit   NUMBER;
        v_tot_pcts             NUMBER;
        v_cnt                  NUMBER;
    BEGIN
        DBMS_OUTPUT.put_line (
            'PROCESS_FACOBLIG' || v_batch_no || ';' || v_tran_no);

        --                raise_error('v_tran_no='||v_tran_no||' = '||v_batch_no);
        FOR cur_all_risks_rec IN cur_all_risks
        LOOP
            DBMS_OUTPUT.put_line (
                'v_as_fac_oblig_limit' || v_as_fac_oblig_limit);
            --    DELETE GIN_FACRE_CESSIONS WHERE FC_IPU_CODE = cur_all_risks_rec.ipu_code AND FC_FACRE_TYPE = 'O';

            /*BEGIN
                SELECT NVL(CLT_FAC_OBLIG_LIMIT,0)
                   INTO v_as_fac_oblig_limit
                   FROM GIN_CLASS_TREATIES
                   WHERE CLT_AS_CODE = cur_all_risks_rec.PRRD_AS_CODE
                   AND CLT_SCL_CODE =cur_all_risks_rec.ipu_sec_scl_code;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    NULL;
               WHEN OTHERS THEN
                   TQC_ERROR_MANAGER.RAISE_UNANTICIPATED(text_in => 'Error getting facultative obligatory limit.');
            END;*/

            /*
            BEGIN
               SELECT NVL(AFOB_MAX_SI_LIMIT,0)
               INTO v_as_fac_oblig_limit
               FROM GIN_ARRANGMNT_FACOBLIG
               WHERE AFOB_AS_CODE = cur_all_risks_rec.PRRD_AS_CODE;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    NULL;
               WHEN OTHERS THEN
                   TQC_ERROR_MANAGER.RAISE_UNANTICIPATED(text_in => 'Error getting facultative obligatory limit.');
            END;
               */
            DBMS_OUTPUT.put_line (
                   'NVL(v_as_fac_oblig_limit,0)='
                || NVL (v_as_fac_oblig_limit, 0));
            DBMS_OUTPUT.put_line (
                   'NVL(PRRD_FACOBLIG_USER_EXCESS,0)='
                || cur_all_risks_rec.prrd_facoblig_user_excess);
            DBMS_OUTPUT.put_line (
                   'NVL(PRRD_FACOBLIG_EXCESS,0)='
                || cur_all_risks_rec.prrd_facoblig_excess);

            IF NVL (cur_all_risks_rec.prrd_facoblig_alloc_chk, 'N') = 'Y'
            THEN
                --raise_Error('innn='||cur_all_risks_rec.prrd_facoblig_alloc_chk
                --||'='||v_as_fac_oblig_limit||'='||cur_all_risks_rec.prrd_facoblig_excess);
                --IF NVL(v_as_fac_oblig_limit,0) >0 OR NVL(cur_all_risks_rec.PRRD_FACOBLIG_USER_EXCESS,cur_all_risks_rec.PRRD_FACOBLIG_EXCESS) >0 THEN
                IF    NVL (v_as_fac_oblig_limit, 0) > 0
                   OR NVL (cur_all_risks_rec.prrd_facoblig_excess, 0) > 0
                THEN
                    BEGIN
                        SELECT SUM (NVL (afob_cession_rate, 0)), COUNT (1)
                          INTO v_tot_pcts, v_cnt
                          FROM gin_arrangmnt_facoblig
                         WHERE afob_as_code = cur_all_risks_rec.prrd_as_code;

                        IF NVL (v_tot_pcts, 0) != 100 AND NVL (v_cnt, 0) > 0
                        THEN
                            tqc_error_manager.raise_unanticipated (
                                text_in   =>
                                    'Facultative obligatory participation does not add up to 100%');
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            --                     tqc_error_manager.raise_unanticipated
                            --                        (text_in      => 'Error checking facultative obligatory treaty participation '
                            --                        );
                            raise_error (
                                'Error checking facultative obligatory treaty participation ');
                    END;

                    --raise_error('cur_all_risks_rec.PRRD_FACOBLIG_EXCESS '||cur_all_risks_rec.PRRD_FACOBLIG_EXCESS);
                    IF NVL (cur_all_risks_rec.prrd_facoblig_excess, 0) != 0
                    THEN
                        v_ceded :=
                            NVL (cur_all_risks_rec.prrd_facoblig_excess, 0);
                    ELSIF NVL (v_as_fac_oblig_limit, 0) <=
                          NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0)
                    THEN
                        v_ceded := NVL (v_as_fac_oblig_limit, 0);
                    ELSE
                        v_ceded :=
                            NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0);
                    END IF;

                    --                UPDATE GIN_POLICY_RISK_RI_DTLS
                    --                SET PRRD_FACOBLIG_EXCESS =NVL(PRRD_FACOBLIG_USER_EXCESS,v_as_fac_oblig_limit)
                    --                WHERE PRRD_CODE =cur_all_risks_rec.PRRD_CODE;
                    --RAISE_ERROR('v_ceded '||v_ceded||'v_as_fac_oblig_limit='||v_as_fac_oblig_limit||'v_OBLexcess='||cur_all_risks_rec.PRRD_FACOBLIG_EXCESS||';'||cur_all_risks_rec.PRRD_FACOBLIG_USER_EXCESS||';'||cur_all_risks_rec.PRRD_CODE);
                    IF v_ceded > 0
                    THEN
                        -- v_cnt := 0;
                        FOR cur_fac_oblig_rec
                            IN cur_fac_oblig (cur_all_risks_rec.prrd_as_code)
                        LOOP
                            v_cnt := NVL (v_cnt, 0) + 1;

                            --                   raise_Error('in');
                            IF NVL (cur_fac_oblig_rec.afob_cession_rate, 0) =
                               0
                            THEN
                                raise_error (
                                    'Cession rates for facultative obligatory participants has not been specified.');
                            END IF;

                            insert_facre (
                                v_batch_no,
                                cur_all_risks_rec.ipu_code,
                                cur_fac_oblig_rec.afob_agn_code,
                                cur_fac_oblig_rec.agn_sht_desc,
                                'A',
                                  NVL (cur_fac_oblig_rec.afob_cession_rate,
                                       0)
                                / 100
                                * NVL (v_ceded, 0),
                                v_user,
                                'A',
                                v_fc_code,
                                'O',
                                SYSDATE,
                                'N',
                                cur_fac_oblig_rec.afob_comm_rate,
                                NULL,
                                NULL,
                                NULL,
                                NULL);
                        END LOOP;

                        --raise_error('v_cnt='||v_cnt||';'||cur_all_risks_rec.PRRD_AS_CODE);
                        IF NVL (v_cnt, 0) = 0
                        THEN
                            raise_error (
                                'A facultative treaty obligatory limit has been set but the participants have not been defined.');
                        END IF;
                    END IF;
                END IF;
            ELSE
                --         RAISE_ERROR('HERE');
                FOR cur_fac_oblig_rec
                    IN cur_fac_oblig (cur_all_risks_rec.prrd_as_code)
                LOOP
                    FOR cur_fac_obj_rec IN cur_fac_obj
                    LOOP
                        insert_facre (
                            v_batch_no,
                            cur_all_risks_rec.ipu_code,
                            cur_fac_oblig_rec.afob_agn_code,
                            cur_fac_oblig_rec.agn_sht_desc,
                            'A',
                              NVL (cur_fac_oblig_rec.afob_cession_rate, 0)
                            / 100
                            * NVL (cur_fac_obj_rec.fc_amount, 0),
                            v_user,
                            'E',
                            cur_fac_obj_rec.fc_code,
                            'O',
                            SYSDATE,
                            'N',
                            cur_fac_oblig_rec.afob_comm_rate,
                            NULL,
                            NULL,
                            NULL,
                            NULL);
                    END LOOP;
                END LOOP;
            END IF;
        END LOOP;
    END;

    --   PROCEDURE populate_prev_cessions (
    --      v_batch_no      IN   NUMBER,
    --      v_pol_uw_year   IN   NUMBER,
    --      v_cur_code      IN   NUMBER,
    --      v_tran_no       IN   NUMBER,
    --      v_tran_type     IN   VARCHAR2,
    --      v_ipu_code      IN   NUMBER
    --   )
    --   IS
    --      v_trt_uwyr        NUMBER         := NULL;
    --      cnt               NUMBER         := 1;
    --      v_retention_amt   NUMBER         := 0;
    --      v_facre_rate      NUMBER         := 0;
    --      al_id             NUMBER;
    --      v_cnt             NUMBER         := 0;
    --      v_prrd_code       NUMBER;
    --      v_errmsg          VARCHAR2 (200);
    --      v_facre_amt       NUMBER         := 0;
    --      v_zero_devide     EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      v_scl_code        NUMBER;
    --      v_grp_tot_ret     NUMBER         := 0;
    --      v_grp_pct         NUMBER         := 0;
    --      v_group_si        NUMBER         := 0;
    --      v_grp_flag        BOOLEAN        := FALSE;
    --      v_reinsure_amt    NUMBER         := 0;
    --      v_no_ri_si        VARCHAR2 (2);
    --      v_rei_code        NUMBER;
    --      v_as_code         NUMBER;
    --      v_allowed_rate    NUMBER;
    --      v_eq_prem         NUMBER         := 0;
    --      v_facre_msg       VARCHAR2 (150);
    --      v_rnd             NUMBER         := 0;
    --      v_bcur_rnd        NUMBER         := 0;
    --      v_exhange_rate    NUMBER         := 0;
    --      v_ctl_code        NUMBER;
    --      v_prev_ri_si      NUMBER;
    --      v_prev_facre_amt  NUMBER;
    --
    --        v_prev_net_retention NUMBER;
    --        v_net_prev_prem NUMBER;
    --        v_ri_prev_prem NUMBER;
    --        v_cumm_ri_prem NUMBER;
    --        v_prev_facre_prem NUMBER;
    --      v_user                   VARCHAR2 (35);
    --
    --      CURSOR cur_all_risks
    --      IS
    --         SELECT   ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  ipu_comp_retention, ipu_pol_est_max_loss,
    --                  ipu_avail_fulc_bal, ipu_endos_diff_amt, ipu_sec_scl_code,
    --                  ipu_related_ipu_code, ipu_bp, ipu_gp, ipu_fp, ipu_fap,
    --                  ipu_nett_premium, ipu_eml_si, ipu_cummulative_reins,
    --                  ipu_sec_sect_code, ipu_reinsure_amt, ipu_facre_amount,
    --                  ipu_prev_ipu_code, ipu_grp_si_risk_pct, ipu_grp_top_loc,
    --                  ipu_grp_comp_gross_ret, ipu_relr_code, ipu_eff_wef,
    --                  ipu_eff_wet, ipu_id, ipu_uw_yr, ipu_status,
    --                  ipu_earthqke_prem_diff, pol_policy_status, ipu_rc_code
    --             FROM gin_insured_property_unds, gin_policies
    --            WHERE ipu_pol_batch_no = pol_batch_no
    --              AND ipu_pol_batch_no = v_batch_no
    --              AND ipu_reinsured = 1
    --              AND ipu_code = v_ipu_code
    --         ORDER BY 1;
    --
    --      CURSOR cur_old_risk (v_prev_ipu NUMBER)
    --      IS
    --         SELECT prrd_ipu_code, prrd_com_retention_rate, prrd_code,
    --                prrd_comp_net_rate, prrd_comp_retention, prrd_as_uwyr,
    --                prrd_gross_comp_retention, prrd_as_code, prrd_facoblig_excess,
    --                prrd_facoblig_limit, prrd_facoblig_user_excess,
    --                prrd_cede_pool,prrd_net_prem,prrd_ri_prem,prrd_ri_si,prrd_facre_rate,prrd_facre_amount
    --           FROM gin_policy_risk_ri_dtls
    --          WHERE prrd_ipu_code = v_prev_ipu
    --            AND prrd_current = 'Y'
    --            AND prrd_idx =
    --                    (SELECT MAX (prrd_idx)
    --                       FROM gin_policy_risk_ri_dtls
    --                      WHERE prrd_ipu_code = v_prev_ipu AND prrd_current = 'Y');
    --
    --      CURSOR cur_prev_treaty_cession (
    --         v_old_ipu_code    NUMBER,
    --         v_ipu             NUMBER,
    --         v_old_prrd_code   NUMBER
    --      )
    --      IS
    --         SELECT ptotr_code, ptotr_risk_cur_code, ptotr_trt_cur_code,
    --                ptotr_risk_si_pcur, ptotr_risk_prem_pcur, ptotr_rei_code,
    --                ptotr_trt_code, ptotr_trt_sht_desc, ptotr_clt_scl_code,
    --                ptotr_rate, ptotr_rate_type, ptotr_property_id, ptotr_uwyr,
    --                ptotr_ipu_code, ptotr_risk_cur_symbol, ptotr_trt_cur_symbol,
    --                ptotr_sect_code, ptotr_ta_code, ptotr_as_code, ptotr_trs_code,
    --                ptotr_trs_sht_desc, ptotr_prev_cession_rate,
    --                ptotr_cession_pct, ta_type, ptotr_date,ptotr_trt_si_pcur,
    --                ptotr_earthqke_comm_rate, ptotr_allowed_rate, ptotr_ctl_code
    --           FROM gin_policy_rein_risk_details, gin_treaty_arrangements
    --          WHERE ptotr_ta_code = ta_code
    --            AND ptotr_ipu_code = v_old_ipu_code
    --            AND ptotr_prrd_code = v_old_prrd_code
    --            AND ptotr_rei_code NOT IN (
    --                   SELECT ptotr_rei_code
    --                     FROM gin_policy_rein_risk_details
    --                    WHERE ptotr_ipu_code = v_ipu
    --                      AND ptotr_ggt_tran_no = v_tran_no);
    --
    --      CURSOR cur_participant (v_rei_code IN NUMBER)
    --      IS
    --         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    --                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    --                trpa_trs_code, trpa_trs_sht_desc, trpa_code
    --           FROM gin_treaty_participants
    --          WHERE trpa_rei_code = v_rei_code;
    --
    --      CURSOR cur_all_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT SUM (NVL (ipu_reinsure_amt, 0)) si
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);
    --
    --      CURSOR cur_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT ipu_code, ipu_reinsure_amt, pol_cur_rate
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);
    --   BEGIN
    ----raise_error('here');
    ---- open all risk cursor
    --      v_scl_code := NULL;
    --      v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --
    --      FOR cur_all_risks_rec IN cur_all_risks
    --      LOOP
    --         BEGIN
    --            v_no_ri_si := NULL;
    --
    --            SELECT NVL (scl_no_ri_si, 'N')
    --              INTO v_no_ri_si
    --              FROM gin_sub_classes
    --             WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                     (   'Unable to retrieve RI SI status for the sub class '
    --                      || cur_all_risks_rec.ipu_sec_scl_code
    --                     );
    --         END;
    --
    ----DBMS_OUTPUT.PUT_LINE('v_no_ri_si='||v_no_ri_si);
    --         IF     NVL (v_no_ri_si, 'N') = 'N'
    --            AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --         THEN
    --            raise_error
    --               (   'No reinsure amount specified, cannot reinsure this risk '
    --                || cur_all_risks_rec.ipu_item_desc
    --               );
    --         END IF;
    --
    --         IF NVL (cur_all_risks_rec.ipu_status, 'O') != 'RN'
    --         THEN
    --            v_scl_code := cur_all_risks_rec.ipu_sec_scl_code;
    --
    --            -- open arrangements cursor
    --            --reserve facre sessions if its not a new business or renewal
    --            BEGIN
    --               v_prrd_code := NULL;
    --
    --               SELECT prrd_code
    --                 INTO v_prrd_code
    --                 FROM gin_policy_risk_ri_dtls
    --                WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND prrd_tran_no = v_tran_no;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  --set_alert_property('CFG_WARNING_A',ALERT_MESSAGE_TEXT,'Error :- Unable to populate previous treaties ....');
    --                  --al_id :=SHOW_ALERT( 'CFG_WARNING_A');
    --                  --RAISE FORM_TRIGGER_FAILURE;
    --                  v_prrd_code := NULL;
    --            END;
    --
    --            v_retention_amt := 0;
    --            v_grp_tot_ret := 0;
    --
    --            IF cur_all_risks_rec.ipu_relr_code IS NOT NULL
    --            THEN
    --               v_group_si := 0;
    --               v_grp_flag := TRUE;
    --               v_group_si :=
    --                  get_group_top_loc (cur_all_risks_rec.ipu_pol_batch_no,
    --                                     cur_all_risks_rec.ipu_pol_policy_no,
    --                                     cur_all_risks_rec.ipu_relr_code,
    --                                     cur_all_risks_rec.ipu_rc_code,
    --                                     cur_all_risks_rec.ipu_eff_wef
    --                                    );
    --
    --               IF NVL (v_group_si, 0) = 0
    --               THEN
    --                  v_group_si := 1;
    --               END IF;
    --
    --               FOR cur_related_risks_rec IN
    --                  cur_related_risks (cur_all_risks_rec.ipu_relr_code,
    --                                     cur_all_risks_rec.ipu_eff_wef,
    --                                     cur_all_risks_rec.ipu_id
    --                                    )
    --               LOOP
    --                  BEGIN
    --                     UPDATE gin_insured_property_unds
    --                        SET ipu_reinsured = 1,
    --                            ipu_grp_top_loc = NVL (v_group_si, 0),
    --                            ipu_grp_si_risk_pct =
    --                               ROUND
    --                                  (  NVL
    --                                        (cur_related_risks_rec.ipu_reinsure_amt,
    --                                         0
    --                                        )
    --                                   / DECODE (NVL (v_group_si, 0),
    --                                             0, 100,
    --                                             v_group_si
    --                                            )
    --                                   * 100,
    --                                   4
    --                                  )
    --                      WHERE ipu_code = cur_related_risks_rec.ipu_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                            ('Unable to update related risks RI details, ...');
    --                  END;
    --               END LOOP;
    --
    --               v_grp_pct :=
    --                  ROUND (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                         / v_group_si
    --                         * 100,
    --                         4
    --                        );
    --               v_reinsure_amt := v_group_si;
    --            ELSE
    --               NULL;
    --               v_grp_pct := 100;
    --               v_reinsure_amt := NVL (cur_all_risks_rec.ipu_reinsure_amt, 0);
    --            END IF;
    --
    --            FOR cur_old_risk_rec IN   cur_old_risk (cur_all_risks_rec.ipu_prev_ipu_code)
    --            LOOP
    --               BEGIN
    --                  v_facre_rate := 0;
    --                  v_facre_amt := 0;
    --
    --                  SELECT SUM (NVL (fc_rate, 0))
    --                    INTO v_facre_rate
    --                    FROM gin_facre_cessions
    --                   WHERE fc_ipu_code = cur_old_risk_rec.prrd_ipu_code
    --                     AND fc_prrd_code = cur_old_risk_rec.prrd_code
    --                     AND fc_amt_or_rate = 'R'
    --                     AND NVL (fc_facre_type, 'N') != 'O';
    --
    ------To sort issue on negative excess when you reinsure a policy with Fac Oblig
    --                  SELECT SUM (NVL (fc_amount, 0))
    --                    INTO v_facre_amt
    --                    FROM gin_facre_cessions
    --                   WHERE fc_ipu_code = cur_old_risk_rec.prrd_ipu_code
    --                     AND fc_prrd_code = cur_old_risk_rec.prrd_code
    --                     AND fc_amt_or_rate = 'A'
    --                     AND NVL (fc_facre_type, 'N') != 'O';
    --
    --                       SELECT SUM (NVL (fc_amount, 0))
    --                    INTO v_prev_facre_amt
    --                    FROM gin_facre_cessions
    --                   WHERE fc_ipu_code = cur_old_risk_rec.prrd_ipu_code
    --                     AND fc_prrd_code = cur_old_risk_rec.prrd_code
    --                     AND NVL (fc_facre_type, 'N') != 'O';
    --
    ----RAISE_ERROR(v_prev_facre_amt||';'||v_facre_rate);
    ------To sort issue on negative excess when you reinsure a policy with Fac Oblig
    --                  IF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) != 0
    --                  THEN
    --                     v_facre_amt :=
    --                          NVL (v_facre_amt, 0)
    --                        / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                        * 100;
    --                  ELSE
    --                     v_facre_amt := 0;
    --                  END IF;
    --
    --                  v_facre_rate := NVL (v_facre_rate, 0) + NVL (v_facre_amt, 0);
    --
    --                  IF v_facre_rate > 100
    --                  THEN
    --                     v_facre_rate := 0;
    --                     v_facre_msg :=
    --                        'Unable to preserve facre excess, the previous Facre SI/Rate is greater than current SI. Remember to reaportion facre afresh if required...';
    --                  END IF;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     v_facre_rate := 0;
    --               END;
    --
    --
    --               IF cur_all_risks_rec.pol_policy_status IN ('NB', 'RN', 'SP')
    --               THEN
    --                  v_eq_prem :=
    --                       cur_all_risks_rec.ipu_earthqke_prem_diff
    --                     * SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0));
    --               ELSE
    --                  v_eq_prem := 0;
    --               END IF;
    --
    --                 IF cur_all_risks_rec.ipu_status IN ('NB', 'RN', 'SP') THEN
    --                    v_prev_ri_si := 0;
    --                 ELSE
    --                    v_prev_ri_si:= cur_old_risk_rec.prrd_ri_si;
    --                 END IF;
    --
    --                v_prev_net_retention :=NVL(get_risk_comp_retention(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,cur_all_risks_rec.ipu_code),0);
    --                v_net_prev_prem :=NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'O',cur_all_risks_rec.ipu_code),0);
    --                v_ri_prev_prem :=NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'T',cur_all_risks_rec.ipu_code),0);
    --                v_prev_ri_si :=get_risk_ri_si(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_code,cur_all_risks_rec.ipu_uw_yr);
    --                v_cumm_ri_prem :=NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'G',cur_all_risks_rec.ipu_code),0);
    --                v_prev_facre_prem := NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'F',cur_all_risks_rec.ipu_code),0);
    --
    --               IF v_prrd_code IS NULL
    --               THEN
    --                  BEGIN
    --                     SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_prrd_code_seq.NEXTVAL
    --                                      )
    --                       INTO v_prrd_code
    --                       FROM DUAL;
    --
    --                     INSERT INTO gin_policy_risk_ri_dtls
    --                                 (prrd_code, prrd_ipu_code, prrd_idx,
    --                                  prrd_tran_no, prrd_wef,
    --                                  prrd_wet, prrd_current,
    --                                  prrd_comp_retention,
    --                                  prrd_excess_pct,
    --                                  prrd_avail_fulc_bal,
    --                                  prrd_gross_comp_retention,
    --                                  prrd_allowed_grs_comp_ret,
    --                                  prrd_com_retention_rate,
    --                                  prrd_grp_si_risk_pct,
    --                                  prrd_grp_top_loc,
    --                                  prrd_grp_comp_gross_ret,
    --                                  prrd_grp_comp_net_ret, prrd_ri_prem,
    --                                  prrd_prev_ret_rate,
    --                                  prrd_prev_facre_rate, prrd_earthquake_prem,
    --                                  prrd_ri_net_less_eq_prem,
    --                                  prrd_as_uwyr,
    --                                  prrd_prev_prrd_code,
    --                                  prrd_as_code,
    --                                  prrd_facoblig_excess,
    --                                  prrd_facoblig_limit,
    --                                  prrd_facoblig_user_excess,
    --                                  prrd_cede_pool,
    --                                prrd_prev_net_rate,
    --                                prrd_prev_net_retention,
    --                                prrd_net_prev_prem,
    --                                prrd_ri_prev_prem,
    --                                prrd_prev_ri_si,
    --                                prrd_prev_facre_si ,
    --                                prrd_cumm_ri_prem,
    --                                prrd_prev_facre_prem
    --                                 )
    --                          VALUES (v_prrd_code, cur_all_risks_rec.ipu_code, 1,
    --                                  v_tran_no, cur_all_risks_rec.ipu_wef,
    --                                  cur_all_risks_rec.ipu_wet, 'Y',
    --                                  ROUND
    --                                     (  NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           )
    --                                      * (  DECODE
    --                                              (NVL
    --                                                  (cur_old_risk_rec.prrd_com_retention_rate,
    --                                                   0
    --                                                  ),
    --                                               0, 100,
    --                                               cur_old_risk_rec.prrd_com_retention_rate
    --                                              )
    --                                         / 100
    --                                        )
    --                                      * NVL (v_grp_pct, 100)
    --                                     ),
    --                                  ROUND (v_facre_rate, 4),
    --                                  ROUND  (  v_facre_rate  * DECODE  (NVL  (cur_all_risks_rec.ipu_reinsure_amt,  0  ),   0, 100,  NVL (cur_all_risks_rec.ipu_reinsure_amt,  0 ) / 100  ) ),
    --                                  ROUND
    --                                     (  NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           )
    --                                      * (  DECODE
    --                                              (NVL
    --                                                  (cur_old_risk_rec.prrd_com_retention_rate,
    --                                                   0
    --                                                  ),
    --                                               0, 100,
    --                                               cur_old_risk_rec.prrd_com_retention_rate
    --                                              )
    --                                         / 100
    --                                        )
    --                                      * NVL (v_grp_pct, 100)
    --                                     ),
    --                                  NVL
    --                                     (cur_old_risk_rec.prrd_gross_comp_retention,
    --                                      0
    --                                     ),
    --                                  cur_old_risk_rec.prrd_com_retention_rate,
    --                                  cur_all_risks_rec.ipu_grp_si_risk_pct,
    --                                  cur_all_risks_rec.ipu_grp_top_loc,
    --                                  cur_all_risks_rec.ipu_grp_comp_gross_ret,
    --                                  0, cur_all_risks_rec.ipu_endos_diff_amt,
    --                                  --cur_old_risk_rec.prrd_comp_net_rate,
    --                                  cur_old_risk_rec.prrd_com_retention_rate,
    --                                  cur_old_risk_rec.prrd_facre_rate, v_eq_prem,
    ----cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                                    ROUND
    --                                       (NVL
    --                                           (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - v_eq_prem,
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))),
    --                                  NVL (cur_old_risk_rec.prrd_as_uwyr,
    --                                       cur_all_risks_rec.ipu_uw_yr
    --                                      ),
    --                                  cur_old_risk_rec.prrd_code,
    --                                  cur_old_risk_rec.prrd_as_code,
    --                                  cur_old_risk_rec.prrd_facoblig_excess,
    --                                  cur_old_risk_rec.prrd_facoblig_limit,
    --                                  cur_old_risk_rec.prrd_facoblig_user_excess,
    --                                  cur_old_risk_rec.prrd_cede_pool,
    --                                  cur_old_risk_rec.prrd_comp_net_rate,
    --                                 -- cur_old_risk_rec.prrd_comp_retention,
    --                                  v_prev_net_retention,
    ----                                  cur_old_risk_rec.prrd_net_prem,
    --                                  v_net_prev_prem,
    --                                  --cur_old_risk_rec.prrd_ri_prem,
    --                                  v_ri_prev_prem,
    --                                 -- v_prev_ri_si,
    --                                 v_prev_ri_si,
    --                                  v_prev_facre_amt,
    --                                  v_cumm_ri_prem,
    --                                  v_prev_facre_prem
    --                                 );
    --
    --                  END;
    --
    --                  BEGIN
    --                     UPDATE gin_insured_property_unds
    --                        SET ipu_current_prrd_code = v_prrd_code
    --                      WHERE ipu_code = cur_all_risks_rec.ipu_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Unable to update risks current RI details code, ...'
    --                           );
    --                  END;
    --               ELSE
    ----                  raise_error('v_facre_rate='||NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'T',cur_all_risks_rec.ipu_code),0)||';'||v_prrd_code||';'||v_tran_no);
    --                  UPDATE gin_policy_risk_ri_dtls
    --                     SET prrd_comp_retention =
    --                            ROUND
    --                               (((  NVL (cur_all_risks_rec.ipu_reinsure_amt,  0) * DECODE  (NVL  (cur_old_risk_rec.prrd_comp_net_rate, 0  ),  0, 100, cur_old_risk_rec.prrd_comp_net_rate  ) / 100   ) ), v_rnd  ),
    --                         prrd_avail_fulc_bal =ROUND  (  v_facre_rate * DECODE (NVL (cur_all_risks_rec.ipu_reinsure_amt,   0  ),  0, 100,  cur_all_risks_rec.ipu_reinsure_amt / 100 ), v_rnd  ),
    --                         prrd_excess_pct = ROUND (v_facre_rate, 4),
    --                         prrd_gross_comp_retention =
    --                            ROUND
    --                               (((  NVL (cur_all_risks_rec.ipu_reinsure_amt,
    --                                         0)
    --                                  * DECODE
    --                                       (NVL
    --                                           (cur_old_risk_rec.prrd_com_retention_rate,
    --                                            0
    --                                           ),
    --                                        0, 100,
    --                                        cur_old_risk_rec.prrd_com_retention_rate
    --                                       )
    --                                  / 100
    --                                 )
    --                                ),
    --                                v_rnd
    --                               ),
    --                         prrd_allowed_grs_comp_ret =
    --                            NVL (cur_old_risk_rec.prrd_gross_comp_retention,
    --                                 0),
    --                         prrd_com_retention_rate =
    --                                      cur_old_risk_rec.prrd_com_retention_rate,
    --                         prrd_grp_top_loc = cur_all_risks_rec.ipu_grp_top_loc,
    --                         prrd_grp_si_risk_pct =
    --                                         cur_all_risks_rec.ipu_grp_si_risk_pct,
    --                         prrd_grp_comp_gross_ret =
    --                                      cur_all_risks_rec.ipu_grp_comp_gross_ret,
    --                         prrd_ri_prem = cur_all_risks_rec.ipu_endos_diff_amt,
    --                         prrd_comp_net_rate =
    --                                  NVL (cur_old_risk_rec.prrd_comp_net_rate, 0),
    --                         prrd_prev_ret_rate =
    --                                           cur_old_risk_rec.prrd_comp_net_rate,
    --                         prrd_prev_facre_rate = cur_old_risk_rec.prrd_facre_rate,
    --                         prrd_earthquake_prem = v_eq_prem,
    ----cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                         prrd_ri_net_less_eq_prem =
    --                              ROUND
    --                                   (NVL (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                         0
    --                                        )
    --                                   )
    --                            - v_eq_prem,
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))),
    --                         prrd_as_uwyr =
    --                            NVL (cur_old_risk_rec.prrd_as_uwyr,
    --                                 cur_all_risks_rec.ipu_uw_yr
    --                                ),
    --                         prrd_as_code = cur_old_risk_rec.prrd_as_code,
    --                         prrd_facoblig_excess =
    --                                         cur_old_risk_rec.prrd_facoblig_excess,
    --                         prrd_facoblig_limit =
    --                                          cur_old_risk_rec.prrd_facoblig_limit,
    --                         prrd_facoblig_user_excess =
    --                                    cur_old_risk_rec.prrd_facoblig_user_excess,
    --                         prrd_cede_pool = cur_old_risk_rec.prrd_cede_pool,
    --                         prrd_prev_prrd_code=cur_old_risk_rec.prrd_code,
    --                        prrd_prev_net_rate=cur_old_risk_rec.prrd_comp_net_rate,
    --                        prrd_prev_net_retention=v_prev_net_retention,
    --                        prrd_net_prev_prem=v_net_prev_prem,
    --                        prrd_ri_prev_prem=v_ri_prev_prem,
    --                        prrd_prev_ri_si=v_prev_ri_si,
    --                        prrd_prev_facre_si=cur_old_risk_rec.prrd_facre_amount,
    --                        prrd_cumm_ri_prem=v_cumm_ri_prem,
    --                        prrd_prev_facre_prem= v_prev_facre_prem
    --                   WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                     AND prrd_code = v_prrd_code
    --                     AND prrd_tran_no = v_tran_no;
    --               END IF;
    --
    ----DBMS_OUTPUT.PUT_LINE(cur_all_risks_rec.ipu_prev_ipu_code||'='||cur_all_risks_rec.ipu_code||'='||cur_old_risk_rec.prrd_code);
    --               FOR cur_prev_treaty_cession_rec IN
    --                  cur_prev_treaty_cession
    --                                         (cur_all_risks_rec.ipu_prev_ipu_code,
    --                                          cur_all_risks_rec.ipu_code,
    --                                          cur_old_risk_rec.prrd_code
    --                                         )
    --               LOOP
    --                  v_rei_code := NULL;
    --                  v_as_code := NULL;
    --                  v_rei_code := cur_prev_treaty_cession_rec.ptotr_rei_code;
    --                  v_as_code := cur_prev_treaty_cession_rec.ptotr_as_code;
    --                  v_ctl_code := cur_prev_treaty_cession_rec.ptotr_ctl_code;
    --
    --/**** commented out to get backto theoriginal position
    --as required by agreement btn BGN and Gichane on friday 12/04/2002
    --
    --            IF (cur_prev_treaty_cession_rec.ta_type  ='U') OR (cur_prev_treaty_cession_rec.ta_type  ='C'  AND TO_NUMBER(TO_CHAR(cur_prev_treaty_cession_rec.ptotr_date,'YYYY')) = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))) THEN
    --                v_rei_code := cur_prev_treaty_cession_rec.ptotr_rei_code;
    --                v_as_code  := cur_prev_treaty_cession_rec.PTOTR_AS_CODE;
    --            ELSE
    --                -- get this years treaty setup code
    --                BEGIN
    --                    SELECT DISTINCT rei_code,as_code
    --                    INTO v_rei_code,v_as_code
    --                    FROM GIN_TREATY_SETUPS,GIN_ARRANGEMENT_SETUPS
    --                    WHERE REI_TRS_CODE =cur_prev_treaty_cession_rec.PTOTR_TRS_CODE
    --                    AND REI_AS_CODE =AS_CODE
    --                    AND AS_UWYR = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'));
    --                EXCEPTION
    --                    WHEN NO_DATA_FOUND THEN
    --                        raise_error('This years treaty setup NOT done for the treaty '||cur_prev_treaty_cession_rec.PTOTR_TRS_SHT_DESC);
    --                        RAISE FORM_TRIGGER_FAILURE;
    --                    WHEN OTHERS THEN
    --                        raise_error('Unable to retrieve this years treaty setup details for the treaty '||cur_prev_treaty_cession_rec.PTOTR_TRS_SHT_DESC||',  risk '||cur_all_risks_rec.ipu_property_id);
    --                        RAISE FORM_TRIGGER_FAILURE;
    --                END;
    --            END IF;
    --*//* the following code has been added on the 06/09/03 to carry forward the set ceding rate for old treaties so that it does not raise the reinsuance cession rate exception
    --            BY KIZITO
    --            */--***************************************************
    --                  IF NVL (cur_prev_treaty_cession_rec.ptotr_allowed_rate, 0) =
    --                                                                            0
    --                  THEN
    --                     BEGIN
    --                        SELECT ctl_cede_rate
    --                          INTO v_allowed_rate
    --                          FROM gin_class_treaty_limits
    --                         WHERE ctl_code = v_ctl_code;
    --                     EXCEPTION
    --                        WHEN NO_DATA_FOUND
    --                        THEN
    --                           BEGIN
    --                              SELECT rei_cede_rate
    --                                INTO v_allowed_rate
    --                                FROM gin_treaty_setups
    --                               WHERE rei_code = v_rei_code;
    --                           EXCEPTION
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_error
    --                                    ('Error determining the allowed cede rate for a previous apportionment.1.'
    --                                    );
    --                           END;
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Error determining the allowed cede rate for a previous apportionment.2.'
    --                              );
    --                     END;
    --                  ELSE
    --                     v_allowed_rate :=
    --                               cur_prev_treaty_cession_rec.ptotr_allowed_rate;
    --                  END IF;
    --
    ----*****************************************************
    ----RAISE_ERROR('PREV ='||cur_prev_treaty_cession_rec.ptotr_trt_si_pcur);
    --                  BEGIN
    --                     INSERT INTO gin_policy_rein_risk_details
    --                                 (ptotr_code,
    --                                  ptotr_risk_cur_code,
    --                                  ptotr_trt_cur_code,
    --                                  ptotr_rei_code,
    --                                  ptotr_trt_code,
    --                                  ptotr_trt_sht_desc,
    --                                  ptotr_clt_scl_code,
    --                                  ptotr_rate,
    --                                  ptotr_rate_type,
    --                                  ptotr_property_id,
    --                                  ptotr_uwyr,
    --                                  ptotr_ipu_code,
    --                                  ptotr_pol_batch_no,
    --                                  ptotr_pol_policy_no,
    --                                  ptotr_pol_ren_endos_no,
    --                                  ptotr_risk_cur_symbol,
    --                                  ptotr_trt_cur_symbol,
    --                                  ptotr_sect_code,
    --                                  ptotr_ta_code,
    --                                  ptotr_as_code,
    --                                  ptotr_trs_code,
    --                                  ptotr_trs_sht_desc,
    --                                  ptotr_prev_cession_rate,
    --                                  ptotr_ggt_tran_no, ptotr_tran_type,
    --                                  ptotr_prrd_code,
    --                                  ptotr_cession_pct,
    --                                  ptotr_earthqke_comm_rate,
    --                                  ptotr_allowed_rate,
    --                                  ptotr_prev_code,
    --                                  ptotr_trt_prev_si_pcur
    --                                 )
    --                          VALUES (ptotr_code_seq.NEXTVAL,
    --                                  cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_cur_code,
    --                                  v_rei_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
    --                                  cur_prev_treaty_cession_rec.ptotr_clt_scl_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_rate,
    --                                  cur_prev_treaty_cession_rec.ptotr_rate_type,
    --                                  cur_all_risks_rec.ipu_property_id,
    --                                  cur_all_risks_rec.ipu_uw_yr,
    --                                  cur_all_risks_rec.ipu_code,
    --                                  cur_all_risks_rec.ipu_pol_batch_no,
    --                                  cur_all_risks_rec.ipu_pol_policy_no,
    --                                  cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                  cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_cur_symbol,
    --                                  cur_prev_treaty_cession_rec.ptotr_sect_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_ta_code,
    --                                  v_as_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trs_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
    --                                  cur_prev_treaty_cession_rec.ptotr_cession_pct,
    --                                  v_tran_no, v_tran_type,
    --                                  v_prrd_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_cession_pct,
    --                                  cur_prev_treaty_cession_rec.ptotr_earthqke_comm_rate,
    --                                  v_allowed_rate,
    --                                  cur_prev_treaty_cession_rec.ptotr_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_si_pcur
    --                                 );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Error in populate_prev_cessins :- Unable to insert previous treaty details...'
    --                           );
    --                  END;
    --
    --                  FOR cur_participant_rec IN cur_participant (v_rei_code)
    --                  LOOP
    --                     BEGIN
    --                        INSERT INTO gin_participations
    --                                    (part_code,
    --                                     part_cede_rate,
    --                                     part_trt_code,
    --                                     part_trt_sht_desc,
    --                                     part_agnt_agent_code,
    --                                     part_agnt_sht_desc,
    --                                     part_ptotr_code, part_rei_code,
    --                                     part_pol_cur_code,
    --                                     part_pol_cur_symbol,
    --                                     part_uwyr,
    --                                     part_pol_batch_no,
    --                                     part_pol_policy_no,
    --                                     part_pol_ren_endos_no,
    --                                     part_ipu_code,
    --                                     part_ta_code,
    --                                     part_as_code,
    --                                     part_fiscal_year,
    --                                     part_acc_posted,
    --                                     part_trs_code,
    --                                     part_trs_sht_desc,
    --                                     part_scl_code,
    --                                     part_ggt_tran_no, part_tran_type,
    --                                     part_prrd_code,
    --                                     part_trpa_code
    --                                    )
    --                             VALUES (gin_part_code_seq.NEXTVAL,
    --                                     cur_participant_rec.trpa_comp_rate,
    --                                     cur_prev_treaty_cession_rec.ptotr_trt_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
    --                                     cur_participant_rec.trpa_agnt_agent_code,
    --                                     cur_participant_rec.trpa_agnt_sht_desc,
    --                                     ptotr_code_seq.CURRVAL, v_rei_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
    --                                     cur_all_risks_rec.ipu_uw_yr,
    --                                     cur_all_risks_rec.ipu_pol_batch_no,
    --                                     cur_all_risks_rec.ipu_pol_policy_no,
    --                                     cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                     cur_all_risks_rec.ipu_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_ta_code,
    --                                     v_as_code,
    --                                     TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')),
    --                                     'R',
    --                                     cur_prev_treaty_cession_rec.ptotr_trs_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
    --                                     cur_all_risks_rec.ipu_sec_scl_code,
    --                                     v_tran_no, v_tran_type,
    --                                     v_prrd_code,
    --                                     cur_participant_rec.trpa_code
    --                                    );
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Error in populate prev cessions :- Unable to insert participants details...'
    --                              );
    --                     END;
    --                  END LOOP;                       --cur_prev_participation_rec
    --               END LOOP;                             --cur_prev_treaty_cession
    --     dbms_output.put_line('b4 Insert_Prev_facre ='||cur_old_risk_rec.prrd_ipu_code||';'||cur_old_risk_rec.prrd_code);
    --
    --               Insert_Prev_facre(cur_old_risk_rec.prrd_ipu_code,
    --                                cur_old_risk_rec.prrd_code,
    --                                cur_all_risks_rec.ipu_pol_batch_no,
    --                                cur_all_risks_rec.ipu_code,
    --                                v_tran_no,
    --                                NVL (cur_all_risks_rec.ipu_reinsure_amt, 0),
    --                                cur_all_risks_rec.ipu_endos_diff_amt,
    --                                cur_all_risks_rec.ipu_GP,
    --                                v_user);
    --            END LOOP;                                              --old risks
    ----DBMS_OUTPUT.PUT_LINE('HERE 4');
    --         END IF;
    --      END LOOP;                                                        --risks
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null.Continue if covered by XOL...'
    --            );
    --   END;
    --  PROCEDURE populate_prev_cessions (---commented out on 11th November 2018 ---premium bdrx issue
    --      v_batch_no      IN   NUMBER,
    --      v_pol_uw_year   IN   NUMBER,
    --      v_cur_code      IN   NUMBER,
    --      v_tran_no       IN   NUMBER,
    --      v_tran_type     IN   VARCHAR2,
    --      v_ipu_code      IN   NUMBER
    --   )
    --   IS
    --      v_trt_uwyr        NUMBER         := NULL;
    --      cnt               NUMBER         := 1;
    --      v_retention_amt   NUMBER         := 0;
    --      v_facre_rate      NUMBER         := 0;
    --      al_id             NUMBER;
    --      v_cnt             NUMBER         := 0;
    --      v_prrd_code       NUMBER;
    --      v_errmsg          VARCHAR2 (200);
    --      v_facre_amt       NUMBER         := 0;
    --      v_zero_devide     EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      v_scl_code        NUMBER;
    --      v_grp_tot_ret     NUMBER         := 0;
    --      v_grp_pct         NUMBER         := 0;
    --      v_group_si        NUMBER         := 0;
    --      v_grp_flag        BOOLEAN        := FALSE;
    --      v_reinsure_amt    NUMBER         := 0;
    --      v_no_ri_si        VARCHAR2 (2);
    --      v_rei_code        NUMBER;
    --      v_as_code         NUMBER;
    --      v_allowed_rate    NUMBER;
    --      v_eq_prem         NUMBER         := 0;
    --      v_facre_msg       VARCHAR2 (150);
    --      v_rnd             NUMBER         := 0;
    --      v_bcur_rnd        NUMBER         := 0;
    --      v_exhange_rate    NUMBER         := 0;
    --      v_ctl_code        NUMBER;
    --      v_prev_ri_si      NUMBER;
    --      v_prev_facre_amt  NUMBER;
    --
    --        v_prev_net_retention NUMBER;
    --        v_net_prev_prem NUMBER;
    --        v_ri_prev_prem NUMBER;
    --        v_cumm_ri_prem NUMBER;
    --        v_prev_facre_prem NUMBER;
    --      v_user                   VARCHAR2 (35);
    --
    --      CURSOR cur_all_risks
    --      IS
    --         SELECT   ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  ipu_comp_retention, ipu_pol_est_max_loss,
    --                  ipu_avail_fulc_bal, ipu_endos_diff_amt, ipu_sec_scl_code,
    --                  ipu_related_ipu_code, ipu_bp, ipu_gp, ipu_fp, ipu_fap,
    --                  ipu_nett_premium, ipu_eml_si, ipu_cummulative_reins,
    --                  ipu_sec_sect_code, ipu_reinsure_amt, ipu_facre_amount,
    --                  ipu_prev_ipu_code, ipu_grp_si_risk_pct, ipu_grp_top_loc,
    --                  ipu_grp_comp_gross_ret, ipu_relr_code, ipu_eff_wef,
    --                  ipu_eff_wet, ipu_id, ipu_uw_yr, ipu_status,
    --                  ipu_earthqke_prem_diff, pol_policy_status, ipu_rc_code
    --             FROM gin_insured_property_unds, gin_policies
    --            WHERE ipu_pol_batch_no = pol_batch_no
    --              AND ipu_pol_batch_no = v_batch_no
    --              AND ipu_reinsured = 1
    --              AND ipu_code = v_ipu_code
    --         ORDER BY 1;
    --
    --      CURSOR cur_old_risk (v_prev_ipu NUMBER)
    --      IS
    --         SELECT prrd_ipu_code, prrd_com_retention_rate, prrd_code,
    --                prrd_comp_net_rate, prrd_comp_retention, prrd_as_uwyr,
    --                prrd_gross_comp_retention, prrd_as_code, prrd_facoblig_excess,
    --                prrd_facoblig_limit, prrd_facoblig_user_excess,
    --                prrd_cede_pool,prrd_net_prem,prrd_ri_prem,prrd_ri_si,prrd_facre_rate,prrd_facre_amount
    --           FROM gin_policy_risk_ri_dtls
    --          WHERE prrd_ipu_code = v_prev_ipu
    --            AND prrd_current = 'Y'
    --            AND prrd_idx =
    --                    (SELECT MAX (prrd_idx)
    --                       FROM gin_policy_risk_ri_dtls
    --                      WHERE prrd_ipu_code = v_prev_ipu AND prrd_current = 'Y');
    --
    --      CURSOR cur_prev_treaty_cession (
    --         v_old_ipu_code    NUMBER,
    --         v_ipu             NUMBER,
    --         v_old_prrd_code   NUMBER
    --      )
    --      IS
    --         SELECT ptotr_code, ptotr_risk_cur_code, ptotr_trt_cur_code,
    --                ptotr_risk_si_pcur, ptotr_risk_prem_pcur, ptotr_rei_code,
    --                ptotr_trt_code, ptotr_trt_sht_desc, ptotr_clt_scl_code,
    --                ptotr_rate, ptotr_rate_type, ptotr_property_id, ptotr_uwyr,
    --                ptotr_ipu_code, ptotr_risk_cur_symbol, ptotr_trt_cur_symbol,
    --                ptotr_sect_code, ptotr_ta_code, ptotr_as_code, ptotr_trs_code,
    --                ptotr_trs_sht_desc, ptotr_prev_cession_rate,
    --                ptotr_cession_pct, ta_type, ptotr_date,ptotr_trt_si_pcur,
    --                ptotr_earthqke_comm_rate, ptotr_allowed_rate, ptotr_ctl_code
    --           FROM gin_policy_rein_risk_details, gin_treaty_arrangements
    --          WHERE ptotr_ta_code = ta_code
    --            AND ptotr_ipu_code = v_old_ipu_code
    --            AND ptotr_prrd_code = v_old_prrd_code
    --            AND ptotr_rei_code NOT IN (
    --                   SELECT ptotr_rei_code
    --                     FROM gin_policy_rein_risk_details
    --                    WHERE ptotr_ipu_code = v_ipu
    --                      AND ptotr_ggt_tran_no = v_tran_no);
    --
    --      CURSOR cur_participant (v_rei_code IN NUMBER)
    --      IS
    --         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    --                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    --                trpa_trs_code, trpa_trs_sht_desc, trpa_code
    --           FROM gin_treaty_participants
    --          WHERE trpa_rei_code = v_rei_code;
    --
    --      CURSOR cur_all_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT SUM (NVL (ipu_reinsure_amt, 0)) si
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);
    --
    --      CURSOR cur_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT ipu_code, ipu_reinsure_amt, pol_cur_rate
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);
    --   BEGIN
    ----raise_error('here');
    ---- open all risk cursor
    --      v_scl_code := NULL;
    --      v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --
    --      FOR cur_all_risks_rec IN cur_all_risks
    --      LOOP
    --         BEGIN
    --            v_no_ri_si := NULL;
    --
    --            SELECT NVL (scl_no_ri_si, 'N')
    --              INTO v_no_ri_si
    --              FROM gin_sub_classes
    --             WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                     (   'Unable to retrieve RI SI status for the sub class '
    --                      || cur_all_risks_rec.ipu_sec_scl_code
    --                     );
    --         END;
    --
    ----DBMS_OUTPUT.PUT_LINE('v_no_ri_si='||v_no_ri_si);
    --         IF     NVL (v_no_ri_si, 'N') = 'N'
    --            AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --         THEN
    --            raise_error
    --               (   'No reinsure amount specified, cannot reinsure this risk '
    --                || cur_all_risks_rec.ipu_item_desc
    --               );
    --         END IF;
    --
    --         IF NVL (cur_all_risks_rec.ipu_status, 'O') != 'RN'
    --         THEN
    --            v_scl_code := cur_all_risks_rec.ipu_sec_scl_code;
    --
    --            -- open arrangements cursor
    --            --reserve facre sessions if its not a new business or renewal
    --            BEGIN
    --               v_prrd_code := NULL;
    --
    --               SELECT prrd_code
    --                 INTO v_prrd_code
    --                 FROM gin_policy_risk_ri_dtls
    --                WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                  AND prrd_tran_no = v_tran_no;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  --set_alert_property('CFG_WARNING_A',ALERT_MESSAGE_TEXT,'Error :- Unable to populate previous treaties ....');
    --                  --al_id :=SHOW_ALERT( 'CFG_WARNING_A');
    --                  --RAISE FORM_TRIGGER_FAILURE;
    --                  v_prrd_code := NULL;
    --            END;
    --
    --            v_retention_amt := 0;
    --            v_grp_tot_ret := 0;
    --
    --            IF cur_all_risks_rec.ipu_relr_code IS NOT NULL
    --            THEN
    --               v_group_si := 0;
    --               v_grp_flag := TRUE;
    --               v_group_si :=
    --                  get_group_top_loc (cur_all_risks_rec.ipu_pol_batch_no,
    --                                     cur_all_risks_rec.ipu_pol_policy_no,
    --                                     cur_all_risks_rec.ipu_relr_code,
    --                                     cur_all_risks_rec.ipu_rc_code,
    --                                     cur_all_risks_rec.ipu_eff_wef
    --                                    );
    --
    --               IF NVL (v_group_si, 0) = 0
    --               THEN
    --                  v_group_si := 1;
    --               END IF;
    --
    --               FOR cur_related_risks_rec IN
    --                  cur_related_risks (cur_all_risks_rec.ipu_relr_code,
    --                                     cur_all_risks_rec.ipu_eff_wef,
    --                                     cur_all_risks_rec.ipu_id
    --                                    )
    --               LOOP
    --                  BEGIN
    --                     UPDATE gin_insured_property_unds
    --                        SET ipu_reinsured = 1,
    --                            ipu_grp_top_loc = NVL (v_group_si, 0),
    --                            ipu_grp_si_risk_pct =
    --                               ROUND
    --                                  (  NVL
    --                                        (cur_related_risks_rec.ipu_reinsure_amt,
    --                                         0
    --                                        )
    --                                   / DECODE (NVL (v_group_si, 0),
    --                                             0, 100,
    --                                             v_group_si
    --                                            )
    --                                   * 100,
    --                                   4
    --                                  )
    --                      WHERE ipu_code = cur_related_risks_rec.ipu_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                            ('Unable to update related risks RI details, ...');
    --                  END;
    --               END LOOP;
    --
    --               v_grp_pct :=
    --                  ROUND (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                         / v_group_si
    --                         * 100,
    --                         4
    --                        );
    --               v_reinsure_amt := v_group_si;
    --            ELSE
    --               NULL;
    --               v_grp_pct := 100;
    --               v_reinsure_amt := NVL (cur_all_risks_rec.ipu_reinsure_amt, 0);
    --            END IF;
    --
    --            FOR cur_old_risk_rec IN   cur_old_risk (cur_all_risks_rec.ipu_prev_ipu_code)
    --            LOOP
    --               BEGIN
    --                  v_facre_rate := 0;
    --                  v_facre_amt := 0;
    --
    --                  SELECT SUM (NVL (fc_rate, 0))
    --                    INTO v_facre_rate
    --                    FROM gin_facre_cessions
    --                   WHERE fc_ipu_code = cur_old_risk_rec.prrd_ipu_code
    --                     AND fc_prrd_code = cur_old_risk_rec.prrd_code
    --                     AND fc_amt_or_rate = 'R'
    --                     AND NVL (fc_facre_type, 'N') != 'O';
    --
    ------To sort issue on negative excess when you reinsure a policy with Fac Oblig
    --                  SELECT SUM (NVL (fc_amount, 0))
    --                    INTO v_facre_amt
    --                    FROM gin_facre_cessions
    --                   WHERE fc_ipu_code = cur_old_risk_rec.prrd_ipu_code
    --                     AND fc_prrd_code = cur_old_risk_rec.prrd_code
    --                     AND fc_amt_or_rate = 'A'
    --                     AND NVL (fc_facre_type, 'N') != 'O';
    --
    --                       SELECT SUM (NVL (fc_amount, 0))
    --                    INTO v_prev_facre_amt
    --                    FROM gin_facre_cessions
    --                   WHERE fc_ipu_code = cur_old_risk_rec.prrd_ipu_code
    --                     AND fc_prrd_code = cur_old_risk_rec.prrd_code
    --                     AND NVL (fc_facre_type, 'N') != 'O';
    --
    ----RAISE_ERROR(v_prev_facre_amt||';'||v_facre_rate);
    ------To sort issue on negative excess when you reinsure a policy with Fac Oblig
    --                  IF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) != 0
    --                  THEN
    --                     v_facre_amt :=
    --                          NVL (v_facre_amt, 0)
    --                        / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                        * 100;
    --                  ELSE
    --                     v_facre_amt := 0;
    --                  END IF;
    --
    --                  v_facre_rate := NVL (v_facre_rate, 0) + NVL (v_facre_amt, 0);
    --
    --                  IF v_facre_rate > 100
    --                  THEN
    --                     v_facre_rate := 0;
    --                     v_facre_msg :=
    --                        'Unable to preserve facre excess, the previous Facre SI/Rate is greater than current SI. Remember to reaportion facre afresh if required...';
    --                  END IF;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     v_facre_rate := 0;
    --               END;
    --
    --
    --               IF cur_all_risks_rec.pol_policy_status IN ('NB', 'RN', 'SP','CO','CN','EN')
    --               THEN
    --                  v_eq_prem :=
    --                       cur_all_risks_rec.ipu_earthqke_prem_diff
    --                     * SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0));
    --               ELSE
    --                  v_eq_prem := 0;
    --               END IF;
    --
    --                 IF cur_all_risks_rec.ipu_status IN ('NB', 'RN', 'SP') THEN
    --                    v_prev_ri_si := 0;
    --                 ELSE
    --                    v_prev_ri_si:= cur_old_risk_rec.prrd_ri_si;
    --                 END IF;
    --
    --                v_prev_net_retention :=NVL(get_risk_comp_retention(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,cur_all_risks_rec.ipu_code),0);
    --                v_net_prev_prem :=NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'O',cur_all_risks_rec.ipu_code),0);
    --                v_ri_prev_prem :=NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'T',cur_all_risks_rec.ipu_code),0);
    --                v_prev_ri_si :=get_risk_ri_si(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_code,cur_all_risks_rec.ipu_uw_yr);
    --                v_cumm_ri_prem :=NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'G',cur_all_risks_rec.ipu_code),0);
    --                v_prev_facre_prem := NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'F',cur_all_risks_rec.ipu_code),0);
    --
    --               IF v_prrd_code IS NULL
    --               THEN
    --                  BEGIN
    --                     SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_prrd_code_seq.NEXTVAL
    --                                      )
    --                       INTO v_prrd_code
    --                       FROM DUAL;
    --
    --                     INSERT INTO gin_policy_risk_ri_dtls
    --                                 (prrd_code, prrd_ipu_code, prrd_idx,
    --                                  prrd_tran_no, prrd_wef,
    --                                  prrd_wet, prrd_current,
    --                                  prrd_comp_retention,
    --                                  prrd_excess_pct,
    --                                  prrd_avail_fulc_bal,
    --                                  prrd_gross_comp_retention,
    --                                  prrd_allowed_grs_comp_ret,
    --                                  prrd_com_retention_rate,
    --                                  prrd_grp_si_risk_pct,
    --                                  prrd_grp_top_loc,
    --                                  prrd_grp_comp_gross_ret,
    --                                  prrd_grp_comp_net_ret, prrd_ri_prem,
    --                                  prrd_prev_ret_rate,
    --                                  prrd_prev_facre_rate, prrd_earthquake_prem,
    --                                  prrd_ri_net_less_eq_prem,
    --                                  prrd_as_uwyr,
    --                                  prrd_prev_prrd_code,
    --                                  prrd_as_code,
    --                                  prrd_facoblig_excess,
    --                                  prrd_facoblig_limit,
    --                                  prrd_facoblig_user_excess,
    --                                  prrd_cede_pool,
    --                                prrd_prev_net_rate,
    --                                prrd_prev_net_retention,
    --                                prrd_net_prev_prem,
    --                                prrd_ri_prev_prem,
    --                                prrd_prev_ri_si,
    --                                prrd_prev_facre_si ,
    --                                prrd_cumm_ri_prem,
    --                                prrd_prev_facre_prem
    --                                 )
    --                          VALUES (v_prrd_code, cur_all_risks_rec.ipu_code, 1,
    --                                  v_tran_no, cur_all_risks_rec.ipu_wef,
    --                                  cur_all_risks_rec.ipu_wet, 'Y',
    --                                  ROUND
    --                                     (  NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           )
    --                                      * (  DECODE
    --                                              (NVL
    --                                                  (cur_old_risk_rec.prrd_com_retention_rate,
    --                                                   0
    --                                                  ),
    --                                               0, 100,
    --                                               cur_old_risk_rec.prrd_com_retention_rate
    --                                              )
    --                                         / 100
    --                                        )
    --                                      * NVL (v_grp_pct, 100)
    --                                     ),
    --                                  ROUND (v_facre_rate, 4),
    --                                  ROUND  (  v_facre_rate  * DECODE  (NVL  (cur_all_risks_rec.ipu_reinsure_amt,  0  ),   0, 100,  NVL (cur_all_risks_rec.ipu_reinsure_amt,  0 ) / 100  ) ),
    --                                  ROUND
    --                                     (  NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           )
    --                                      * (  DECODE
    --                                              (NVL
    --                                                  (cur_old_risk_rec.prrd_com_retention_rate,
    --                                                   0
    --                                                  ),
    --                                               0, 100,
    --                                               cur_old_risk_rec.prrd_com_retention_rate
    --                                              )
    --                                         / 100
    --                                        )
    --                                      * NVL (v_grp_pct, 100)
    --                                     ),
    --                                  NVL
    --                                     (cur_old_risk_rec.prrd_gross_comp_retention,
    --                                      0
    --                                     ),
    --                                  cur_old_risk_rec.prrd_com_retention_rate,
    --                                  cur_all_risks_rec.ipu_grp_si_risk_pct,
    --                                  cur_all_risks_rec.ipu_grp_top_loc,
    --                                  cur_all_risks_rec.ipu_grp_comp_gross_ret,
    --                                  0, cur_all_risks_rec.ipu_endos_diff_amt,
    --                                  --cur_old_risk_rec.prrd_comp_net_rate,
    --                                  cur_old_risk_rec.prrd_com_retention_rate,
    --                                  cur_old_risk_rec.prrd_facre_rate, v_eq_prem,
    ----cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                                    ROUND
    --                                       (NVL
    --                                           (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - v_eq_prem,
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))),
    --                                  NVL (cur_old_risk_rec.prrd_as_uwyr,
    --                                       cur_all_risks_rec.ipu_uw_yr
    --                                      ),
    --                                  cur_old_risk_rec.prrd_code,
    --                                  cur_old_risk_rec.prrd_as_code,
    --                                  cur_old_risk_rec.prrd_facoblig_excess,
    --                                  cur_old_risk_rec.prrd_facoblig_limit,
    --                                  cur_old_risk_rec.prrd_facoblig_user_excess,
    --                                  cur_old_risk_rec.prrd_cede_pool,
    --                                  cur_old_risk_rec.prrd_comp_net_rate,
    --                                 -- cur_old_risk_rec.prrd_comp_retention,
    --                                  v_prev_net_retention,
    ----                                  cur_old_risk_rec.prrd_net_prem,
    --                                  v_net_prev_prem,
    --                                  --cur_old_risk_rec.prrd_ri_prem,
    --                                  v_ri_prev_prem,
    --                                 -- v_prev_ri_si,
    --                                 v_prev_ri_si,
    --                                  v_prev_facre_amt,
    --                                  v_cumm_ri_prem,
    --                                  v_prev_facre_prem
    --                                 );
    --
    --                  END;
    --
    --                  BEGIN
    --                     UPDATE gin_insured_property_unds
    --                        SET ipu_current_prrd_code = v_prrd_code
    --                      WHERE ipu_code = cur_all_risks_rec.ipu_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Unable to update risks current RI details code, ...'
    --                           );
    --                  END;
    --               ELSE
    ----                  raise_error('v_facre_rate='||NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'T',cur_all_risks_rec.ipu_code),0)||';'||v_prrd_code||';'||v_tran_no);
    --                  UPDATE gin_policy_risk_ri_dtls
    --                     SET prrd_comp_retention =
    --                            ROUND
    --                               (((  NVL (cur_all_risks_rec.ipu_reinsure_amt,  0) * DECODE  (NVL  (cur_old_risk_rec.prrd_comp_net_rate, 0  ),  0, 100, cur_old_risk_rec.prrd_comp_net_rate  ) / 100   ) ), v_rnd  ),
    --                         prrd_avail_fulc_bal =ROUND  (  v_facre_rate * DECODE (NVL (cur_all_risks_rec.ipu_reinsure_amt,   0  ),  0, 100,  cur_all_risks_rec.ipu_reinsure_amt / 100 ), v_rnd  ),
    --                         prrd_excess_pct = ROUND (v_facre_rate, 4),
    --                         prrd_gross_comp_retention =
    --                            ROUND
    --                               (((  NVL (cur_all_risks_rec.ipu_reinsure_amt,
    --                                         0)
    --                                  * DECODE
    --                                       (NVL
    --                                           (cur_old_risk_rec.prrd_com_retention_rate,
    --                                            0
    --                                           ),
    --                                        0, 100,
    --                                        cur_old_risk_rec.prrd_com_retention_rate
    --                                       )
    --                                  / 100
    --                                 )
    --                                ),
    --                                v_rnd
    --                               ),
    --                         prrd_allowed_grs_comp_ret =
    --                            NVL (cur_old_risk_rec.prrd_gross_comp_retention,
    --                                 0),
    --                         prrd_com_retention_rate =
    --                                      cur_old_risk_rec.prrd_com_retention_rate,
    --                         prrd_grp_top_loc = cur_all_risks_rec.ipu_grp_top_loc,
    --                         prrd_grp_si_risk_pct =
    --                                         cur_all_risks_rec.ipu_grp_si_risk_pct,
    --                         prrd_grp_comp_gross_ret =
    --                                      cur_all_risks_rec.ipu_grp_comp_gross_ret,
    --                         prrd_ri_prem = cur_all_risks_rec.ipu_endos_diff_amt,
    --                         prrd_comp_net_rate =
    --                                  NVL (cur_old_risk_rec.prrd_comp_net_rate, 0),
    --                         prrd_prev_ret_rate =
    --                                           cur_old_risk_rec.prrd_comp_net_rate,
    --                         prrd_prev_facre_rate = cur_old_risk_rec.prrd_facre_rate,
    --                         prrd_earthquake_prem = v_eq_prem,
    ----cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                         prrd_ri_net_less_eq_prem =
    --                              ROUND
    --                                   (NVL (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                         0
    --                                        )
    --                                   )
    --                            - v_eq_prem,
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))),
    --                         prrd_as_uwyr =
    --                            NVL (cur_old_risk_rec.prrd_as_uwyr,
    --                                 cur_all_risks_rec.ipu_uw_yr
    --                                ),
    --                         prrd_as_code = cur_old_risk_rec.prrd_as_code,
    --                         prrd_facoblig_excess =
    --                                         cur_old_risk_rec.prrd_facoblig_excess,
    --                         prrd_facoblig_limit =
    --                                          cur_old_risk_rec.prrd_facoblig_limit,
    --                         prrd_facoblig_user_excess =
    --                                    cur_old_risk_rec.prrd_facoblig_user_excess,
    --                         prrd_cede_pool = cur_old_risk_rec.prrd_cede_pool,
    --                         prrd_prev_prrd_code=cur_old_risk_rec.prrd_code,
    --                        prrd_prev_net_rate=cur_old_risk_rec.prrd_comp_net_rate,
    --                        prrd_prev_net_retention=v_prev_net_retention,
    --                        prrd_net_prev_prem=v_net_prev_prem,
    --                        prrd_ri_prev_prem=v_ri_prev_prem,
    --                        prrd_prev_ri_si=v_prev_ri_si,
    --                        prrd_prev_facre_si=cur_old_risk_rec.prrd_facre_amount,
    --                        prrd_cumm_ri_prem=v_cumm_ri_prem,
    --                        prrd_prev_facre_prem= v_prev_facre_prem
    --                   WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                     AND prrd_code = v_prrd_code
    --                     AND prrd_tran_no = v_tran_no;
    --               END IF;
    --
    ----DBMS_OUTPUT.PUT_LINE(cur_all_risks_rec.ipu_prev_ipu_code||'='||cur_all_risks_rec.ipu_code||'='||cur_old_risk_rec.prrd_code);
    --               FOR cur_prev_treaty_cession_rec IN
    --                  cur_prev_treaty_cession
    --                                         (cur_all_risks_rec.ipu_prev_ipu_code,
    --                                          cur_all_risks_rec.ipu_code,
    --                                          cur_old_risk_rec.prrd_code
    --                                         )
    --               LOOP
    --                  v_rei_code := NULL;
    --                  v_as_code := NULL;
    --                  v_rei_code := cur_prev_treaty_cession_rec.ptotr_rei_code;
    --                  v_as_code := cur_prev_treaty_cession_rec.ptotr_as_code;
    --                  v_ctl_code := cur_prev_treaty_cession_rec.ptotr_ctl_code;
    --
    --/**** commented out to get backto theoriginal position
    --as required by agreement btn BGN and Gichane on friday 12/04/2002
    --
    --            IF (cur_prev_treaty_cession_rec.ta_type  ='U') OR (cur_prev_treaty_cession_rec.ta_type  ='C'  AND TO_NUMBER(TO_CHAR(cur_prev_treaty_cession_rec.ptotr_date,'YYYY')) = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))) THEN
    --                v_rei_code := cur_prev_treaty_cession_rec.ptotr_rei_code;
    --                v_as_code  := cur_prev_treaty_cession_rec.PTOTR_AS_CODE;
    --            ELSE
    --                -- get this years treaty setup code
    --                BEGIN
    --                    SELECT DISTINCT rei_code,as_code
    --                    INTO v_rei_code,v_as_code
    --                    FROM GIN_TREATY_SETUPS,GIN_ARRANGEMENT_SETUPS
    --                    WHERE REI_TRS_CODE =cur_prev_treaty_cession_rec.PTOTR_TRS_CODE
    --                    AND REI_AS_CODE =AS_CODE
    --                    AND AS_UWYR = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'));
    --                EXCEPTION
    --                    WHEN NO_DATA_FOUND THEN
    --                        raise_error('This years treaty setup NOT done for the treaty '||cur_prev_treaty_cession_rec.PTOTR_TRS_SHT_DESC);
    --                        RAISE FORM_TRIGGER_FAILURE;
    --                    WHEN OTHERS THEN
    --                        raise_error('Unable to retrieve this years treaty setup details for the treaty '||cur_prev_treaty_cession_rec.PTOTR_TRS_SHT_DESC||',  risk '||cur_all_risks_rec.ipu_property_id);
    --                        RAISE FORM_TRIGGER_FAILURE;
    --                END;
    --            END IF;
    --*//* the following code has been added on the 06/09/03 to carry forward the set ceding rate for old treaties so that it does not raise the reinsuance cession rate exception
    --            BY KIZITO
    --            */--***************************************************
    --                  IF NVL (cur_prev_treaty_cession_rec.ptotr_allowed_rate, 0) =
    --                                                                            0
    --                  THEN
    --                     BEGIN
    --                        SELECT ctl_cede_rate
    --                          INTO v_allowed_rate
    --                          FROM gin_class_treaty_limits
    --                         WHERE ctl_code = v_ctl_code;
    --                     EXCEPTION
    --                        WHEN NO_DATA_FOUND
    --                        THEN
    --                           BEGIN
    --                              SELECT rei_cede_rate
    --                                INTO v_allowed_rate
    --                                FROM gin_treaty_setups
    --                               WHERE rei_code = v_rei_code;
    --                           EXCEPTION
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_error
    --                                    ('Error determining the allowed cede rate for a previous apportionment.1.'
    --                                    );
    --                           END;
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Error determining the allowed cede rate for a previous apportionment.2.'
    --                              );
    --                     END;
    --                  ELSE
    --                     v_allowed_rate :=
    --                               cur_prev_treaty_cession_rec.ptotr_allowed_rate;
    --                  END IF;
    --
    ----*****************************************************
    ----RAISE_ERROR('PREV ='||cur_prev_treaty_cession_rec.ptotr_trt_si_pcur);
    --                  BEGIN
    --                     INSERT INTO gin_policy_rein_risk_details
    --                                 (ptotr_code,
    --                                  ptotr_risk_cur_code,
    --                                  ptotr_trt_cur_code,
    --                                  ptotr_rei_code,
    --                                  ptotr_trt_code,
    --                                  ptotr_trt_sht_desc,
    --                                  ptotr_clt_scl_code,
    --                                  ptotr_rate,
    --                                  ptotr_rate_type,
    --                                  ptotr_property_id,
    --                                  ptotr_uwyr,
    --                                  ptotr_ipu_code,
    --                                  ptotr_pol_batch_no,
    --                                  ptotr_pol_policy_no,
    --                                  ptotr_pol_ren_endos_no,
    --                                  ptotr_risk_cur_symbol,
    --                                  ptotr_trt_cur_symbol,
    --                                  ptotr_sect_code,
    --                                  ptotr_ta_code,
    --                                  ptotr_as_code,
    --                                  ptotr_trs_code,
    --                                  ptotr_trs_sht_desc,
    --                                  ptotr_prev_cession_rate,
    --                                  ptotr_ggt_tran_no, ptotr_tran_type,
    --                                  ptotr_prrd_code,
    --                                  ptotr_cession_pct,
    --                                  ptotr_earthqke_comm_rate,
    --                                  ptotr_allowed_rate,
    --                                  ptotr_prev_code,
    --                                  ptotr_trt_prev_si_pcur
    --                                 )
    --                          VALUES (ptotr_code_seq.NEXTVAL,
    --                                  cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_cur_code,
    --                                  v_rei_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
    --                                  cur_prev_treaty_cession_rec.ptotr_clt_scl_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_rate,
    --                                  cur_prev_treaty_cession_rec.ptotr_rate_type,
    --                                  cur_all_risks_rec.ipu_property_id,
    --                                  cur_all_risks_rec.ipu_uw_yr,
    --                                  cur_all_risks_rec.ipu_code,
    --                                  cur_all_risks_rec.ipu_pol_batch_no,
    --                                  cur_all_risks_rec.ipu_pol_policy_no,
    --                                  cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                  cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_cur_symbol,
    --                                  cur_prev_treaty_cession_rec.ptotr_sect_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_ta_code,
    --                                  v_as_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trs_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
    --                                  cur_prev_treaty_cession_rec.ptotr_cession_pct,
    --                                  v_tran_no, v_tran_type,
    --                                  v_prrd_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_cession_pct,
    --                                  cur_prev_treaty_cession_rec.ptotr_earthqke_comm_rate,
    --                                  v_allowed_rate,
    --                                  cur_prev_treaty_cession_rec.ptotr_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_si_pcur
    --                                 );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Error in populate_prev_cessins :- Unable to insert previous treaty details...'
    --                           );
    --                  END;
    --
    --                  FOR cur_participant_rec IN cur_participant (v_rei_code)
    --                  LOOP
    --                     BEGIN
    --                        INSERT INTO gin_participations
    --                                    (part_code,
    --                                     part_cede_rate,
    --                                     part_trt_code,
    --                                     part_trt_sht_desc,
    --                                     part_agnt_agent_code,
    --                                     part_agnt_sht_desc,
    --                                     part_ptotr_code, part_rei_code,
    --                                     part_pol_cur_code,
    --                                     part_pol_cur_symbol,
    --                                     part_uwyr,
    --                                     part_pol_batch_no,
    --                                     part_pol_policy_no,
    --                                     part_pol_ren_endos_no,
    --                                     part_ipu_code,
    --                                     part_ta_code,
    --                                     part_as_code,
    --                                     part_fiscal_year,
    --                                     part_acc_posted,
    --                                     part_trs_code,
    --                                     part_trs_sht_desc,
    --                                     part_scl_code,
    --                                     part_ggt_tran_no, part_tran_type,
    --                                     part_prrd_code,
    --                                     part_trpa_code
    --                                    )
    --                             VALUES (gin_part_code_seq.NEXTVAL,
    --                                     cur_participant_rec.trpa_comp_rate,
    --                                     cur_prev_treaty_cession_rec.ptotr_trt_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
    --                                     cur_participant_rec.trpa_agnt_agent_code,
    --                                     cur_participant_rec.trpa_agnt_sht_desc,
    --                                     ptotr_code_seq.CURRVAL, v_rei_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
    --                                     cur_all_risks_rec.ipu_uw_yr,
    --                                     cur_all_risks_rec.ipu_pol_batch_no,
    --                                     cur_all_risks_rec.ipu_pol_policy_no,
    --                                     cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                     cur_all_risks_rec.ipu_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_ta_code,
    --                                     v_as_code,
    --                                     TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')),
    --                                     'R',
    --                                     cur_prev_treaty_cession_rec.ptotr_trs_code,
    --                                     cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
    --                                     cur_all_risks_rec.ipu_sec_scl_code,
    --                                     v_tran_no, v_tran_type,
    --                                     v_prrd_code,
    --                                     cur_participant_rec.trpa_code
    --                                    );
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Error in populate prev cessions :- Unable to insert participants details...'
    --                              );
    --                     END;
    --                  END LOOP;                       --cur_prev_participation_rec
    --               END LOOP;                             --cur_prev_treaty_cession
    --     dbms_output.put_line('b4 Insert_Prev_facre ='||cur_old_risk_rec.prrd_ipu_code||';'||cur_old_risk_rec.prrd_code);
    --
    --               Insert_Prev_facre(cur_old_risk_rec.prrd_ipu_code,
    --                                cur_old_risk_rec.prrd_code,
    --                                cur_all_risks_rec.ipu_pol_batch_no,
    --                                cur_all_risks_rec.ipu_code,
    --                                v_tran_no,
    --                                NVL (cur_all_risks_rec.ipu_reinsure_amt, 0),
    --                                cur_all_risks_rec.ipu_endos_diff_amt,
    --                                cur_all_risks_rec.ipu_GP,
    --                                v_user);
    --            END LOOP;                                              --old risks
    ----DBMS_OUTPUT.PUT_LINE('HERE 4');
    --         END IF;
    --      END LOOP;                                                        --risks
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null.Continue if covered by XOL...'
    --            );
    --   END;
    PROCEDURE populate_prev_cessions (v_batch_no      IN NUMBER,
                                      v_pol_uw_year   IN NUMBER,
                                      v_cur_code      IN NUMBER,
                                      v_tran_no       IN NUMBER,
                                      v_tran_type     IN VARCHAR2,
                                      v_ipu_code      IN NUMBER)
    IS
        v_trt_uwyr             NUMBER := NULL;
        cnt                    NUMBER := 1;
        v_retention_amt        NUMBER := 0;
        v_facre_rate           NUMBER := 0;
        al_id                  NUMBER;
        v_cnt                  NUMBER := 0;
        v_cede_rate            NUMBER := 0;
        v_prrd_code            NUMBER;
        v_errmsg               VARCHAR2 (200);
        v_facre_amt            NUMBER := 0;
        v_zero_devide          EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        v_scl_code             NUMBER;
        v_grp_tot_ret          NUMBER := 0;
        v_grp_pct              NUMBER := 0;
        v_group_si             NUMBER := 0;
        v_grp_flag             BOOLEAN := FALSE;
        v_reinsure_amt         NUMBER := 0;
        v_no_ri_si             VARCHAR2 (2);
        v_rei_code             NUMBER;
        v_as_code              NUMBER;
        v_allowed_rate         NUMBER;
        v_eq_prem              NUMBER := 0;
        v_facre_msg            VARCHAR2 (150);
        v_rnd                  NUMBER := 0;
        v_bcur_rnd             NUMBER := 0;
        v_exhange_rate         NUMBER := 0;
        v_ctl_code             NUMBER;
        v_prev_ri_si           NUMBER;
        v_prev_facre_amt       NUMBER;

        v_prev_net_retention   NUMBER;
        v_net_prev_prem        NUMBER;
        v_ri_prev_prem         NUMBER;
        v_cumm_ri_prem         NUMBER;
        v_prev_facre_prem      NUMBER;
        v_user                 VARCHAR2 (35);

        CURSOR cur_all_risks IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     ipu_comp_retention,
                     ipu_pol_est_max_loss,
                     ipu_avail_fulc_bal,
                     ipu_endos_diff_amt,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_reinsure_amt,
                     ipu_facre_amount,
                     ipu_prev_ipu_code,
                     ipu_grp_si_risk_pct,
                     ipu_grp_top_loc,
                     ipu_grp_comp_gross_ret,
                     ipu_relr_code,
                     ipu_eff_wef,
                     ipu_eff_wet,
                     ipu_id,
                     ipu_uw_yr,
                     ipu_status,
                     ipu_earthqke_prem_diff,
                     ipu_earth_quake_prem,
                     pol_policy_status,
                     ipu_rc_code
                FROM gin_insured_property_unds, gin_policies
               WHERE     ipu_pol_batch_no = pol_batch_no
                     AND ipu_pol_batch_no = v_batch_no
                     AND ipu_reinsured = 1
                     AND ipu_code = v_ipu_code
            ORDER BY 1;

        CURSOR cur_old_risk (v_prev_ipu NUMBER)
        IS
            SELECT prrd_ipu_code,
                   prrd_com_retention_rate,
                   prrd_code,
                   prrd_comp_net_rate,
                   prrd_comp_retention,
                   prrd_as_uwyr,
                   prrd_gross_comp_retention,
                   prrd_as_code,
                   prrd_facoblig_excess,
                   prrd_facoblig_limit,
                   prrd_facoblig_user_excess,
                   prrd_cede_pool,
                   prrd_net_prem,
                   prrd_ri_prem,
                   prrd_ri_si,
                   prrd_facre_rate,
                   prrd_facre_amount
              FROM gin_policy_risk_ri_dtls
             WHERE     prrd_ipu_code = v_prev_ipu
                   AND prrd_current = 'Y'
                   AND prrd_idx =
                       (SELECT MAX (prrd_idx)
                          FROM gin_policy_risk_ri_dtls
                         WHERE     prrd_ipu_code = v_prev_ipu
                               AND prrd_current = 'Y');

        CURSOR cur_prev_treaty_cession (v_old_ipu_code    NUMBER,
                                        v_ipu             NUMBER,
                                        v_old_prrd_code   NUMBER)
        IS
            SELECT ptotr_code,
                   ptotr_risk_cur_code,
                   ptotr_trt_cur_code,
                   ptotr_risk_si_pcur,
                   ptotr_risk_prem_pcur,
                   ptotr_rei_code,
                   ptotr_trt_code,
                   ptotr_trt_sht_desc,
                   ptotr_clt_scl_code,
                   ptotr_rate,
                   ptotr_rate_type,
                   ptotr_property_id,
                   ptotr_uwyr,
                   ptotr_ipu_code,
                   ptotr_risk_cur_symbol,
                   ptotr_trt_cur_symbol,
                   ptotr_sect_code,
                   ptotr_ta_code,
                   ptotr_as_code,
                   ptotr_trs_code,
                   ptotr_trs_sht_desc,
                   ptotr_prev_cession_rate,
                   ptotr_cession_pct,
                   ta_type,
                   ptotr_date,
                   ptotr_trt_si_pcur,
                   ptotr_earthqke_comm_rate,
                   ptotr_allowed_rate,
                   ptotr_ctl_code
              FROM gin_policy_rein_risk_details, gin_treaty_arrangements
             WHERE     ptotr_ta_code = ta_code
                   AND ptotr_ipu_code = v_old_ipu_code
                   AND ptotr_prrd_code = v_old_prrd_code
                   AND ptotr_rei_code NOT IN
                           (SELECT ptotr_rei_code
                              FROM gin_policy_rein_risk_details
                             WHERE     ptotr_ipu_code = v_ipu
                                   AND ptotr_ggt_tran_no = v_tran_no);

        CURSOR cur_participant (v_rei_code IN NUMBER)
        IS
            SELECT trpa_agnt_agent_code,
                   trpa_agnt_sht_desc,
                   trpa_rei_code,
                   trpa_uw_year,
                   trpa_comp_rate,
                   trpa_rei_prem_taxable,
                   trpa_trs_code,
                   trpa_trs_sht_desc,
                   trpa_code
              FROM gin_treaty_participants
             WHERE trpa_rei_code = v_rei_code;

        CURSOR cur_all_related_risks (v_rel_code        IN NUMBER,
                                      v_cover_from_dt      DATE,
                                      v_ipu_id             NUMBER)
        IS
            SELECT SUM (NVL (ipu_reinsure_amt, 0))     si
              FROM gin_policies,
                   gin_policy_active_risks,
                   gin_insured_property_unds
             WHERE     pol_batch_no = polar_pol_batch_no
                   AND polar_ipu_code = ipu_code
                   AND ipu_id != v_ipu_id
                   AND ipu_relr_code = v_rel_code
                   AND ipu_eff_wet >= v_cover_from_dt
                   AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);

        CURSOR cur_related_risks (v_rel_code        IN NUMBER,
                                  v_cover_from_dt      DATE,
                                  v_ipu_id             NUMBER)
        IS
            SELECT ipu_code, ipu_reinsure_amt, pol_cur_rate
              FROM gin_policies,
                   gin_policy_active_risks,
                   gin_insured_property_unds
             WHERE     pol_batch_no = polar_pol_batch_no
                   AND polar_ipu_code = ipu_code
                   AND ipu_id != v_ipu_id
                   AND ipu_relr_code = v_rel_code
                   AND ipu_eff_wet >= v_cover_from_dt
                   AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);
    BEGIN
        --raise_error('here');
        -- open all risk cursor
        v_scl_code := NULL;
        v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        FOR cur_all_risks_rec IN cur_all_risks
        LOOP
            BEGIN
                v_no_ri_si := NULL;

                SELECT NVL (scl_no_ri_si, 'N')
                  INTO v_no_ri_si
                  FROM gin_sub_classes
                 WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'Unable to retrieve RI SI status for the sub class '
                        || cur_all_risks_rec.ipu_sec_scl_code);
            END;

            --DBMS_OUTPUT.PUT_LINE('v_no_ri_si='||v_no_ri_si);
            IF     NVL (v_no_ri_si, 'N') = 'N'
               AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
            THEN
                raise_error (
                       'No reinsure amount specified, cannot reinsure this risk '
                    || cur_all_risks_rec.ipu_item_desc);
            END IF;

            IF NVL (cur_all_risks_rec.ipu_status, 'O') != 'RN'
            THEN
                v_scl_code := cur_all_risks_rec.ipu_sec_scl_code;

                -- open arrangements cursor
                --reserve facre sessions if its not a new business or renewal
                BEGIN
                    v_prrd_code := NULL;

                    SELECT prrd_code
                      INTO v_prrd_code
                      FROM gin_policy_risk_ri_dtls
                     WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                           AND prrd_tran_no = v_tran_no;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        --set_alert_property('CFG_WARNING_A',ALERT_MESSAGE_TEXT,'Error :- Unable to populate previous treaties ....');
                        --al_id :=SHOW_ALERT( 'CFG_WARNING_A');
                        --RAISE FORM_TRIGGER_FAILURE;
                        v_prrd_code := NULL;
                END;

                v_retention_amt := 0;
                v_grp_tot_ret := 0;

                IF cur_all_risks_rec.ipu_relr_code IS NOT NULL
                THEN
                    v_group_si := 0;
                    v_grp_flag := TRUE;
                    v_group_si :=
                        get_group_top_loc (
                            cur_all_risks_rec.ipu_pol_batch_no,
                            cur_all_risks_rec.ipu_pol_policy_no,
                            cur_all_risks_rec.ipu_relr_code,
                            cur_all_risks_rec.ipu_rc_code,
                            cur_all_risks_rec.ipu_eff_wef);

                    IF NVL (v_group_si, 0) = 0
                    THEN
                        v_group_si := 1;
                    END IF;

                    FOR cur_related_risks_rec
                        IN cur_related_risks (
                               cur_all_risks_rec.ipu_relr_code,
                               cur_all_risks_rec.ipu_eff_wef,
                               cur_all_risks_rec.ipu_id)
                    LOOP
                        BEGIN
                            UPDATE gin_insured_property_unds
                               SET ipu_reinsured = 1,
                                   ipu_grp_top_loc = NVL (v_group_si, 0),
                                   ipu_grp_si_risk_pct =
                                       ROUND (
                                             NVL (
                                                 cur_related_risks_rec.ipu_reinsure_amt,
                                                 0)
                                           / DECODE (NVL (v_group_si, 0),
                                                     0, 100,
                                                     v_group_si)
                                           * 100,
                                           4)
                             WHERE ipu_code = cur_related_risks_rec.ipu_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to update related risks RI details, ...');
                        END;
                    END LOOP;

                    v_grp_pct :=
                        ROUND (
                              NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                            / v_group_si
                            * 100,
                            4);
                    v_reinsure_amt := v_group_si;
                ELSE
                    NULL;
                    v_grp_pct := 100;
                    v_reinsure_amt :=
                        NVL (cur_all_risks_rec.ipu_reinsure_amt, 0);
                END IF;

                FOR cur_old_risk_rec
                    IN cur_old_risk (cur_all_risks_rec.ipu_prev_ipu_code)
                LOOP
                    BEGIN
                        v_facre_rate := 0;
                        v_facre_amt := 0;

                        SELECT SUM (NVL (fc_rate, 0))
                          INTO v_facre_rate
                          FROM gin_facre_cessions
                         WHERE     fc_ipu_code =
                                   cur_old_risk_rec.prrd_ipu_code
                               AND fc_prrd_code = cur_old_risk_rec.prrd_code
                               AND fc_amt_or_rate = 'R'
                               AND NVL (fc_facre_type, 'N') != 'O';

                        ----To sort issue on negative excess when you reinsure a policy with Fac Oblig
                        SELECT SUM (NVL (fc_amount, 0))
                          INTO v_facre_amt
                          FROM gin_facre_cessions
                         WHERE     fc_ipu_code =
                                   cur_old_risk_rec.prrd_ipu_code
                               AND fc_prrd_code = cur_old_risk_rec.prrd_code
                               AND fc_amt_or_rate = 'A'
                               AND NVL (fc_facre_type, 'N') != 'O';

                        SELECT SUM (NVL (fc_amount, 0))
                          INTO v_prev_facre_amt
                          FROM gin_facre_cessions
                         WHERE     fc_ipu_code =
                                   cur_old_risk_rec.prrd_ipu_code
                               AND fc_prrd_code = cur_old_risk_rec.prrd_code
                               AND NVL (fc_facre_type, 'N') != 'O';

                        --RAISE_ERROR(v_prev_facre_amt||';'||v_facre_rate);
                        ----To sort issue on negative excess when you reinsure a policy with Fac Oblig
                        IF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) != 0
                        THEN
                            v_facre_amt :=
                                  NVL (v_facre_amt, 0)
                                / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                                * 100;
                        ELSE
                            v_facre_amt := 0;
                        END IF;

                        v_facre_rate :=
                            NVL (v_facre_rate, 0) + NVL (v_facre_amt, 0);

                        IF v_facre_rate > 100
                        THEN
                            v_facre_rate := 0;
                            v_facre_msg :=
                                'Unable to preserve facre excess, the previous Facre SI/Rate is greater than current SI. Remember to reaportion facre afresh if required...';
                        END IF;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            v_facre_rate := 0;
                    END;

                    /**
                                   IF cur_all_risks_rec.pol_policy_status IN
                                         ('NB', 'RN', 'SP', 'CO', 'CN', 'EN')
                                   THEN
                                      v_eq_prem :=
                                           cur_all_risks_rec.ipu_earthqke_prem_diff
                                         * SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0));
                                   ELSE
                                      v_eq_prem := 0;
                                   END IF;
                    **/
                    IF cur_all_risks_rec.pol_policy_status IN ('NB',
                                                               'RN',
                                                               'SP',
                                                               'CO')
                    THEN
                        v_eq_prem :=
                              cur_all_risks_rec.ipu_earth_quake_prem
                            * SIGN (
                                  NVL (cur_all_risks_rec.ipu_endos_diff_amt,
                                       0));
                    ELSIF cur_all_risks_rec.pol_policy_status IN ('EN', 'CN')
                    THEN
                        v_eq_prem :=
                              cur_all_risks_rec.ipu_earthqke_prem_diff
                            * SIGN (
                                  NVL (cur_all_risks_rec.ipu_endos_diff_amt,
                                       0));
                    ELSE
                        v_eq_prem := 0;
                    END IF;

                    IF cur_all_risks_rec.pol_policy_status IN ('NB',
                                                               'RN',
                                                               'SP',
                                                               'CO',
                                                               'CN',
                                                               'EN')
                    THEN
                        v_eq_prem :=
                              cur_all_risks_rec.ipu_earth_quake_prem
                            * SIGN (
                                  NVL (cur_all_risks_rec.ipu_endos_diff_amt,
                                       0));
                    ELSE
                        v_eq_prem := 0;
                    END IF;

                    IF cur_all_risks_rec.ipu_status IN ('NB', 'RN', 'SP')
                    THEN
                        v_prev_ri_si := 0;
                    ELSE
                        v_prev_ri_si := cur_old_risk_rec.prrd_ri_si;
                    END IF;

                    v_prev_net_retention :=
                        NVL (
                            get_risk_comp_retention (
                                cur_all_risks_rec.ipu_id,
                                cur_all_risks_rec.ipu_uw_yr,
                                cur_all_risks_rec.ipu_code),
                            0);
                    v_net_prev_prem :=
                        NVL (
                            get_risk_cumulative_prem (
                                cur_all_risks_rec.ipu_id,
                                cur_all_risks_rec.ipu_uw_yr,
                                'O',
                                cur_all_risks_rec.ipu_code),
                            0);
                    v_ri_prev_prem :=
                        NVL (
                            get_risk_cumulative_prem (
                                cur_all_risks_rec.ipu_id,
                                cur_all_risks_rec.ipu_uw_yr,
                                'T',
                                cur_all_risks_rec.ipu_code),
                            0);
                    v_prev_ri_si :=
                        get_risk_ri_si (cur_all_risks_rec.ipu_id,
                                        cur_all_risks_rec.ipu_code,
                                        cur_all_risks_rec.ipu_uw_yr);
                    v_cumm_ri_prem :=
                        NVL (
                            get_risk_cumulative_prem (
                                cur_all_risks_rec.ipu_id,
                                cur_all_risks_rec.ipu_uw_yr,
                                'G',
                                cur_all_risks_rec.ipu_code),
                            0);
                    v_prev_facre_prem :=
                        NVL (
                            get_risk_cumulative_prem (
                                cur_all_risks_rec.ipu_id,
                                cur_all_risks_rec.ipu_uw_yr,
                                'F',
                                cur_all_risks_rec.ipu_code),
                            0);

                    IF v_prrd_code IS NULL
                    THEN
                        BEGIN
                            SELECT TO_NUMBER (
                                          TO_CHAR (SYSDATE, 'YYYY')
                                       || gin_prrd_code_seq.NEXTVAL)
                              INTO v_prrd_code
                              FROM DUAL;

                            INSERT INTO gin_policy_risk_ri_dtls (
                                            prrd_code,
                                            prrd_ipu_code,
                                            prrd_idx,
                                            prrd_tran_no,
                                            prrd_wef,
                                            prrd_wet,
                                            prrd_current,
                                            prrd_comp_retention,
                                            prrd_excess_pct,
                                            prrd_avail_fulc_bal,
                                            prrd_gross_comp_retention,
                                            prrd_allowed_grs_comp_ret,
                                            prrd_com_retention_rate,
                                            prrd_grp_si_risk_pct,
                                            prrd_grp_top_loc,
                                            prrd_grp_comp_gross_ret,
                                            prrd_grp_comp_net_ret,
                                            prrd_ri_prem,
                                            prrd_prev_ret_rate,
                                            prrd_prev_facre_rate,
                                            prrd_earthquake_prem,
                                            prrd_ri_net_less_eq_prem,
                                            prrd_as_uwyr,
                                            prrd_prev_prrd_code,
                                            prrd_as_code,
                                            prrd_facoblig_excess,
                                            prrd_facoblig_limit,
                                            prrd_facoblig_user_excess,
                                            prrd_cede_pool,
                                            prrd_prev_net_rate,
                                            prrd_prev_net_retention,
                                            prrd_net_prev_prem,
                                            prrd_ri_prev_prem,
                                            prrd_prev_ri_si,
                                            prrd_prev_facre_si,
                                            prrd_cumm_ri_prem,
                                            prrd_prev_facre_prem)
                                     VALUES (
                                         v_prrd_code,
                                         cur_all_risks_rec.ipu_code,
                                         1,
                                         v_tran_no,
                                         cur_all_risks_rec.ipu_wef,
                                         cur_all_risks_rec.ipu_wet,
                                         'Y',
                                         ROUND (
                                               NVL (
                                                   cur_all_risks_rec.ipu_reinsure_amt,
                                                   0)
                                             * (  DECODE (
                                                      NVL (
                                                          cur_old_risk_rec.prrd_com_retention_rate,
                                                          0),
                                                      0, 100,
                                                      cur_old_risk_rec.prrd_com_retention_rate)
                                                / 100)
                                             * NVL (v_grp_pct, 100)),
                                         ROUND (v_facre_rate, 4),
                                         ROUND (
                                               v_facre_rate
                                             * DECODE (
                                                   NVL (
                                                       cur_all_risks_rec.ipu_reinsure_amt,
                                                       0),
                                                   0, 100,
                                                     NVL (
                                                         cur_all_risks_rec.ipu_reinsure_amt,
                                                         0)
                                                   / 100)),
                                         ROUND (
                                               NVL (
                                                   cur_all_risks_rec.ipu_reinsure_amt,
                                                   0)
                                             * (  DECODE (
                                                      NVL (
                                                          cur_old_risk_rec.prrd_com_retention_rate,
                                                          0),
                                                      0, 100,
                                                      cur_old_risk_rec.prrd_com_retention_rate)
                                                / 100)
                                             * NVL (v_grp_pct, 100)),
                                         NVL (
                                             cur_old_risk_rec.prrd_gross_comp_retention,
                                             0),
                                         cur_old_risk_rec.prrd_com_retention_rate,
                                         cur_all_risks_rec.ipu_grp_si_risk_pct,
                                         cur_all_risks_rec.ipu_grp_top_loc,
                                         cur_all_risks_rec.ipu_grp_comp_gross_ret,
                                         0,
                                         cur_all_risks_rec.ipu_endos_diff_amt,
                                         --cur_old_risk_rec.prrd_comp_net_rate,
                                         cur_old_risk_rec.prrd_com_retention_rate,
                                         cur_old_risk_rec.prrd_facre_rate,
                                         v_eq_prem,
                                           --cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
                                           ROUND (
                                               NVL (
                                                   cur_all_risks_rec.ipu_endos_diff_amt,
                                                   0))
                                         - v_eq_prem,
                                         --(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))),
                                         NVL (cur_old_risk_rec.prrd_as_uwyr,
                                              cur_all_risks_rec.ipu_uw_yr),
                                         cur_old_risk_rec.prrd_code,
                                         cur_old_risk_rec.prrd_as_code,
                                         cur_old_risk_rec.prrd_facoblig_excess,
                                         cur_old_risk_rec.prrd_facoblig_limit,
                                         cur_old_risk_rec.prrd_facoblig_user_excess,
                                         cur_old_risk_rec.prrd_cede_pool,
                                         cur_old_risk_rec.prrd_comp_net_rate,
                                         -- cur_old_risk_rec.prrd_comp_retention,
                                         v_prev_net_retention,
                                         --                                  cur_old_risk_rec.prrd_net_prem,
                                         v_net_prev_prem,
                                         --cur_old_risk_rec.prrd_ri_prem,
                                         v_ri_prev_prem,
                                         -- v_prev_ri_si,
                                         v_prev_ri_si,
                                         v_prev_facre_amt,
                                         v_cumm_ri_prem,
                                         v_prev_facre_prem);
                        END;

                        BEGIN
                            UPDATE gin_insured_property_unds
                               SET ipu_current_prrd_code = v_prrd_code
                             WHERE ipu_code = cur_all_risks_rec.ipu_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to update risks current RI details code, ...');
                        END;
                    ELSE
                        --                  raise_error('v_facre_rate='||NVL(get_risk_cumulative_prem(cur_all_risks_rec.ipu_id,cur_all_risks_rec.ipu_uw_yr,'T',cur_all_risks_rec.ipu_code),0)||';'||v_prrd_code||';'||v_tran_no);
                        UPDATE gin_policy_risk_ri_dtls
                           SET prrd_comp_retention =
                                   ROUND (
                                       ((  NVL (
                                               cur_all_risks_rec.ipu_reinsure_amt,
                                               0)
                                         * DECODE (
                                               NVL (
                                                   cur_old_risk_rec.prrd_comp_net_rate,
                                                   0),
                                               0, 100,
                                               cur_old_risk_rec.prrd_comp_net_rate)
                                         / 100)),
                                       v_rnd),
                               prrd_avail_fulc_bal =
                                   ROUND (
                                         v_facre_rate
                                       * DECODE (
                                             NVL (
                                                 cur_all_risks_rec.ipu_reinsure_amt,
                                                 0),
                                             0, 100,
                                               cur_all_risks_rec.ipu_reinsure_amt
                                             / 100),
                                       v_rnd),
                               prrd_excess_pct = ROUND (v_facre_rate, 4),
                               prrd_gross_comp_retention =
                                   ROUND (
                                       ((  NVL (
                                               cur_all_risks_rec.ipu_reinsure_amt,
                                               0)
                                         * DECODE (
                                               NVL (
                                                   cur_old_risk_rec.prrd_com_retention_rate,
                                                   0),
                                               0, 100,
                                               cur_old_risk_rec.prrd_com_retention_rate)
                                         / 100)),
                                       v_rnd),
                               prrd_allowed_grs_comp_ret =
                                   NVL (
                                       cur_old_risk_rec.prrd_gross_comp_retention,
                                       0),
                               prrd_com_retention_rate =
                                   cur_old_risk_rec.prrd_com_retention_rate,
                               prrd_grp_top_loc =
                                   cur_all_risks_rec.ipu_grp_top_loc,
                               prrd_grp_si_risk_pct =
                                   cur_all_risks_rec.ipu_grp_si_risk_pct,
                               prrd_grp_comp_gross_ret =
                                   cur_all_risks_rec.ipu_grp_comp_gross_ret,
                               prrd_ri_prem =
                                   cur_all_risks_rec.ipu_endos_diff_amt,
                               prrd_comp_net_rate =
                                   NVL (cur_old_risk_rec.prrd_comp_net_rate,
                                        0),
                               prrd_prev_ret_rate =
                                   cur_old_risk_rec.prrd_comp_net_rate,
                               prrd_prev_facre_rate =
                                   cur_old_risk_rec.prrd_facre_rate,
                               prrd_earthquake_prem = v_eq_prem,
                               --cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
                               prrd_ri_net_less_eq_prem =
                                     ROUND (
                                         NVL (
                                             cur_all_risks_rec.ipu_endos_diff_amt,
                                             0))
                                   - v_eq_prem,
                               --(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))),
                               prrd_as_uwyr =
                                   NVL (cur_old_risk_rec.prrd_as_uwyr,
                                        cur_all_risks_rec.ipu_uw_yr),
                               prrd_as_code = cur_old_risk_rec.prrd_as_code,
                               prrd_facoblig_excess =
                                   cur_old_risk_rec.prrd_facoblig_excess,
                               prrd_facoblig_limit =
                                   cur_old_risk_rec.prrd_facoblig_limit,
                               prrd_facoblig_user_excess =
                                   cur_old_risk_rec.prrd_facoblig_user_excess,
                               prrd_cede_pool =
                                   cur_old_risk_rec.prrd_cede_pool,
                               prrd_prev_prrd_code =
                                   cur_old_risk_rec.prrd_code,
                               prrd_prev_net_rate =
                                   cur_old_risk_rec.prrd_comp_net_rate,
                               prrd_prev_net_retention = v_prev_net_retention,
                               prrd_net_prev_prem = v_net_prev_prem,
                               prrd_ri_prev_prem = v_ri_prev_prem,
                               prrd_prev_ri_si = v_prev_ri_si,
                               prrd_prev_facre_si =
                                   cur_old_risk_rec.prrd_facre_amount,
                               prrd_cumm_ri_prem = v_cumm_ri_prem,
                               prrd_prev_facre_prem = v_prev_facre_prem
                         WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                               AND prrd_code = v_prrd_code
                               AND prrd_tran_no = v_tran_no;
                    END IF;

                    --DBMS_OUTPUT.PUT_LINE(cur_all_risks_rec.ipu_prev_ipu_code||'='||cur_all_risks_rec.ipu_code||'='||cur_old_risk_rec.prrd_code);
                    FOR cur_prev_treaty_cession_rec
                        IN cur_prev_treaty_cession (
                               cur_all_risks_rec.ipu_prev_ipu_code,
                               cur_all_risks_rec.ipu_code,
                               cur_old_risk_rec.prrd_code)
                    LOOP
                        v_rei_code := NULL;
                        v_as_code := NULL;
                        v_rei_code :=
                            cur_prev_treaty_cession_rec.ptotr_rei_code;
                        v_as_code :=
                            cur_prev_treaty_cession_rec.ptotr_as_code;
                        v_ctl_code :=
                            cur_prev_treaty_cession_rec.ptotr_ctl_code;

                        /**** commented out to get backto theoriginal position
                        as required by agreement btn BGN and Gichane on friday 12/04/2002

                                    IF (cur_prev_treaty_cession_rec.ta_type  ='U') OR (cur_prev_treaty_cession_rec.ta_type  ='C'  AND TO_NUMBER(TO_CHAR(cur_prev_treaty_cession_rec.ptotr_date,'YYYY')) = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))) THEN
                                        v_rei_code := cur_prev_treaty_cession_rec.ptotr_rei_code;
                                        v_as_code  := cur_prev_treaty_cession_rec.PTOTR_AS_CODE;
                                    ELSE
                                        -- get this years treaty setup code
                                        BEGIN
                                            SELECT DISTINCT rei_code,as_code
                                            INTO v_rei_code,v_as_code
                                            FROM GIN_TREATY_SETUPS,GIN_ARRANGEMENT_SETUPS
                                            WHERE REI_TRS_CODE =cur_prev_treaty_cession_rec.PTOTR_TRS_CODE
                                            AND REI_AS_CODE =AS_CODE
                                            AND AS_UWYR = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'));
                                        EXCEPTION
                                            WHEN NO_DATA_FOUND THEN
                                                raise_error('This years treaty setup NOT done for the treaty '||cur_prev_treaty_cession_rec.PTOTR_TRS_SHT_DESC);
                                                RAISE FORM_TRIGGER_FAILURE;
                                            WHEN OTHERS THEN
                                                raise_error('Unable to retrieve this years treaty setup details for the treaty '||cur_prev_treaty_cession_rec.PTOTR_TRS_SHT_DESC||',  risk '||cur_all_risks_rec.ipu_property_id);
                                                RAISE FORM_TRIGGER_FAILURE;
                                        END;
                                    END IF;
                        */
                        /* the following code has been added on the 06/09/03 to carry forward the set ceding rate for old treaties so that it does not raise the reinsuance cession rate exception
                                  BY KIZITO
                                  */
                        --***************************************************
                        ----                  raise_error('GIS_RI_PROCEDURES::LN18494::v_ctl_code = '||v_ctl_code||'& v_rei_code = '||v_rei_code
                        ----                  ||'& ALLOW RATE = '||cur_prev_treaty_cession_rec.ptotr_allowed_rate);
                        BEGIN
                            SELECT ctl_cede_rate
                              INTO v_allowed_rate
                              FROM gin_class_treaty_limits
                             WHERE ctl_code = v_ctl_code;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                BEGIN
                                    SELECT rei_cede_rate
                                      INTO v_allowed_rate
                                      FROM gin_treaty_setups
                                     WHERE rei_code = v_rei_code;
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Error determining the allowed cede rate for a previous apportionment.1.');
                                END;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error determining the allowed cede rate for a previous apportionment.2.');
                        END;

                        IF    NVL (
                                  cur_prev_treaty_cession_rec.ptotr_allowed_rate,
                                  0) !=
                              0
                           OR NVL (
                                  cur_prev_treaty_cession_rec.ptotr_allowed_rate,
                                  0) =
                              v_allowed_rate
                        THEN
                            /*AMENDED BY mAYNARD: 31.10.2019: TO ACCOMODATE CHANGES TO CESSION RATE BETWEEN ENDORSEMENTS*/
                            --                  THEN
                            --                     BEGIN
                            --                        SELECT ctl_cede_rate
                            --                          INTO v_allowed_rate
                            --                          FROM gin_class_treaty_limits
                            --                         WHERE ctl_code = v_ctl_code;
                            --                     EXCEPTION
                            --                        WHEN NO_DATA_FOUND
                            --                        THEN
                            --                           BEGIN
                            --                              SELECT rei_cede_rate
                            --                                INTO v_allowed_rate
                            --                                FROM gin_treaty_setups
                            --                               WHERE rei_code = v_rei_code;
                            --                           EXCEPTION
                            --                              WHEN OTHERS
                            --                              THEN
                            --                                 raise_error (
                            --                                    'Error determining the allowed cede rate for a previous apportionment.1.');
                            --                           END;
                            --                        WHEN OTHERS
                            --                        THEN
                            --                           raise_error (
                            --                              'Error determining the allowed cede rate for a previous apportionment.2.');
                            --                     END;
                            --                  ELSE
                            v_allowed_rate :=
                                cur_prev_treaty_cession_rec.ptotr_allowed_rate;
                        END IF;

                        BEGIN
                            SELECT rei_cede_rate
                              INTO v_cede_rate
                              FROM tq_gis.gin_treaty_setups_vw
                             WHERE     clt_scl_code =
                                       cur_prev_treaty_cession_rec.ptotr_clt_scl_code
                                   AND as_ta_code =
                                       cur_prev_treaty_cession_rec.ptotr_ta_code
                                   AND as_uwyr = cur_all_risks_rec.ipu_uw_yr
                                   AND NVL (as_status, 'N') = 'A'
                                   AND rei_code != 563
                                   AND trt_code IN (1001, 1003, 1004);
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_cede_rate :=
                                    cur_prev_treaty_cession_rec.ptotr_rate;
                        END;

                        DBMS_OUTPUT.PUT_LINE (
                               'GIS_RI_PROCEDURES::LN18572::v_cede_rate = '
                            || v_cede_rate
                            || '& SCL = '
                            || cur_prev_treaty_cession_rec.ptotr_clt_scl_code
                            || '& TA = '
                            || cur_prev_treaty_cession_rec.ptotr_ta_code
                            || '& UW YR = '
                            || cur_all_risks_rec.ipu_uw_yr);

                        --*****************************************************
                        --RAISE_ERROR('PREV ='||cur_prev_treaty_cession_rec.ptotr_trt_si_pcur);
                        BEGIN
                            INSERT INTO gin_policy_rein_risk_details (
                                            ptotr_code,
                                            ptotr_risk_cur_code,
                                            ptotr_trt_cur_code,
                                            ptotr_rei_code,
                                            ptotr_trt_code,
                                            ptotr_trt_sht_desc,
                                            ptotr_clt_scl_code,
                                            ptotr_rate,
                                            ptotr_rate_type,
                                            ptotr_property_id,
                                            ptotr_uwyr,
                                            ptotr_ipu_code,
                                            ptotr_pol_batch_no,
                                            ptotr_pol_policy_no,
                                            ptotr_pol_ren_endos_no,
                                            ptotr_risk_cur_symbol,
                                            ptotr_trt_cur_symbol,
                                            ptotr_sect_code,
                                            ptotr_ta_code,
                                            ptotr_as_code,
                                            ptotr_trs_code,
                                            ptotr_trs_sht_desc,
                                            ptotr_prev_cession_rate,
                                            ptotr_ggt_tran_no,
                                            ptotr_tran_type,
                                            ptotr_prrd_code,
                                            ptotr_cession_pct,
                                            ptotr_earthqke_comm_rate,
                                            ptotr_allowed_rate,
                                            ptotr_prev_code,
                                            ptotr_trt_prev_si_pcur)
                                     VALUES (
                                         ptotr_code_seq.NEXTVAL,
                                         cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
                                         cur_prev_treaty_cession_rec.ptotr_trt_cur_code,
                                         v_rei_code,
                                         cur_prev_treaty_cession_rec.ptotr_trt_code,
                                         cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
                                         cur_prev_treaty_cession_rec.ptotr_clt_scl_code,
                                         /*AMENDED BY mAYNARD: 31.10.2019: TO ACCOMODATE CHANGES TO CESSION RATE BETWEEN ENDORSEMENTS*/
                                         v_cede_rate,
                                         --                               cur_prev_treaty_cession_rec.ptotr_rate,
                                         cur_prev_treaty_cession_rec.ptotr_rate_type,
                                         cur_all_risks_rec.ipu_property_id,
                                         cur_all_risks_rec.ipu_uw_yr,
                                         cur_all_risks_rec.ipu_code,
                                         cur_all_risks_rec.ipu_pol_batch_no,
                                         cur_all_risks_rec.ipu_pol_policy_no,
                                         cur_all_risks_rec.ipu_pol_ren_endos_no,
                                         cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
                                         cur_prev_treaty_cession_rec.ptotr_trt_cur_symbol,
                                         cur_prev_treaty_cession_rec.ptotr_sect_code,
                                         cur_prev_treaty_cession_rec.ptotr_ta_code,
                                         v_as_code,
                                         cur_prev_treaty_cession_rec.ptotr_trs_code,
                                         cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
                                         cur_prev_treaty_cession_rec.ptotr_cession_pct,
                                         v_tran_no,
                                         v_tran_type,
                                         v_prrd_code,
                                         cur_prev_treaty_cession_rec.ptotr_cession_pct,
                                         cur_prev_treaty_cession_rec.ptotr_earthqke_comm_rate,
                                         v_allowed_rate,
                                         cur_prev_treaty_cession_rec.ptotr_code,
                                         cur_prev_treaty_cession_rec.ptotr_trt_si_pcur);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error in populate_prev_cessins :- Unable to insert previous treaty details...');
                        END;

                        FOR cur_participant_rec
                            IN cur_participant (v_rei_code)
                        LOOP
                            BEGIN
                                INSERT INTO gin_participations (
                                                part_code,
                                                part_cede_rate,
                                                part_trt_code,
                                                part_trt_sht_desc,
                                                part_agnt_agent_code,
                                                part_agnt_sht_desc,
                                                part_ptotr_code,
                                                part_rei_code,
                                                part_pol_cur_code,
                                                part_pol_cur_symbol,
                                                part_uwyr,
                                                part_pol_batch_no,
                                                part_pol_policy_no,
                                                part_pol_ren_endos_no,
                                                part_ipu_code,
                                                part_ta_code,
                                                part_as_code,
                                                part_fiscal_year,
                                                part_acc_posted,
                                                part_trs_code,
                                                part_trs_sht_desc,
                                                part_scl_code,
                                                part_ggt_tran_no,
                                                part_tran_type,
                                                part_prrd_code,
                                                part_trpa_code)
                                         VALUES (
                                             gin_part_code_seq.NEXTVAL,
                                             cur_participant_rec.trpa_comp_rate,
                                             cur_prev_treaty_cession_rec.ptotr_trt_code,
                                             cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
                                             cur_participant_rec.trpa_agnt_agent_code,
                                             cur_participant_rec.trpa_agnt_sht_desc,
                                             ptotr_code_seq.CURRVAL,
                                             v_rei_code,
                                             cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
                                             cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
                                             cur_all_risks_rec.ipu_uw_yr,
                                             cur_all_risks_rec.ipu_pol_batch_no,
                                             cur_all_risks_rec.ipu_pol_policy_no,
                                             cur_all_risks_rec.ipu_pol_ren_endos_no,
                                             cur_all_risks_rec.ipu_code,
                                             cur_prev_treaty_cession_rec.ptotr_ta_code,
                                             v_as_code,
                                             TO_NUMBER (
                                                 TO_CHAR (SYSDATE, 'YYYY')),
                                             'R',
                                             cur_prev_treaty_cession_rec.ptotr_trs_code,
                                             cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
                                             cur_all_risks_rec.ipu_sec_scl_code,
                                             v_tran_no,
                                             v_tran_type,
                                             v_prrd_code,
                                             cur_participant_rec.trpa_code);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Error in populate prev cessions :- Unable to insert participants details...');
                            END;
                        END LOOP;                 --cur_prev_participation_rec
                    END LOOP;                        --cur_prev_treaty_cession

                    DBMS_OUTPUT.put_line (
                           'b4 Insert_Prev_facre ='
                        || cur_old_risk_rec.prrd_ipu_code
                        || ';'
                        || cur_old_risk_rec.prrd_code);

                    Insert_Prev_facre (
                        cur_old_risk_rec.prrd_ipu_code,
                        cur_old_risk_rec.prrd_code,
                        cur_all_risks_rec.ipu_pol_batch_no,
                        cur_all_risks_rec.ipu_code,
                        v_tran_no,
                        NVL (cur_all_risks_rec.ipu_reinsure_amt, 0),
                        cur_all_risks_rec.ipu_endos_diff_amt,
                        cur_all_risks_rec.ipu_GP,
                        v_user);
                END LOOP;                                          --old risks
            --DBMS_OUTPUT.PUT_LINE('HERE 4');
            END IF;
        END LOOP;                                                      --risks
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null.Continue if covered by XOL...');
    END;

    --   PROCEDURE populate_treaty_details (
    --      v_batch_no    IN   NUMBER,
    --      v_tran_no     IN   NUMBER,
    --      v_tran_type   IN   VARCHAR2,
    --      v_ipu_code    IN   NUMBER
    --   )
    --   IS
    --      v_cnt                    NUMBER         := 0;
    --      v_trt_uwyr               NUMBER         := NULL;
    --      cnt                      NUMBER         := 1;
    --      v_retention_amt          NUMBER         := 0;
    --      v_facre_rate             NUMBER         := 0;
    --      v_errmsg                 VARCHAR2 (200);
    --      v_zero_devide            EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      al_id                    NUMBER;
    --      v_group_si               NUMBER         := 0;
    --      v_grp_flag               BOOLEAN        := FALSE;
    --      v_grp_pct                NUMBER         := 0;
    --      v_grp_tot_ret            NUMBER         := 0;
    --      v_reinsure_amt           NUMBER         := 0;
    --      v_exhange_rate           NUMBER         := 1;
    --      v_prrd_code              NUMBER;
    --      v_facre_amt              NUMBER         := 0;
    --      v_facre_excess           NUMBER         := 0;
    --      v_arrngmt_defined        NUMBER         := 0;
    --      v_msg                    VARCHAR2 (200);
    --      v_arrangement            NUMBER;
    --      v_arrangement_type       VARCHAR2 (10);
    --      v_old_grs_ret_rate       NUMBER         := 0;
    --      v_net_ret_rate           NUMBER         := 0;
    --      v_retention_limit        NUMBER         := 0;
    --      v_no_ri_si               VARCHAR2 (2);
    --      v_dummy                  NUMBER         := 0;
    --      v_retention_type         VARCHAR2 (1)   := NULL;
    --      v_bind_max_exp           NUMBER         := 0;
    --      v_load_status            VARCHAR2 (2);
    --      v_reinsure_wot_ri_prog   VARCHAR2 (2);
    --      v_unadjusted_ri_tran     NUMBER         := 0;
    --      v_as_uwyr                NUMBER;
    --      v_dc_pol_loaded          VARCHAR2 (3);
    --      v_eq_prem                NUMBER         := 0;
    --      v_rnd                    NUMBER         := 0;
    --      v_bcur_rnd               NUMBER         := 0;
    --      v_bcur_code              NUMBER;
    --      v_bcur_symbol            VARCHAR2 (15);
    --      v_as_code                NUMBER;
    --      v_fac_oblig_limit        NUMBER;
    --      v_trt_cur_code           NUMBER;
    --      v_trt_cur_rate           NUMBER;
    --      v_ctl_code               NUMBER;
    --      v_ctl_cede_rate          NUMBER;
    --      v_ctl_rate_type          VARCHAR2 (1);
    --       --v_rein_cur_param VARCHAR2(1);
    --      -- v_rein_cur_code NUMBER;
    --      -- v_rein_prem NUMBER :=0;
    --      -- v_max_exposure NUMBER :=0;
    --      v_pol_fc_rate            NUMBER;
    --      v_pol_fc_amt             NUMBER;
    --      v_user                   VARCHAR2 (35);
    --      v_rsk_fc_amnt            NUMBER;
    --      v_rsk_fc_rate            NUMBER;
    --      v_cede_pool              VARCHAR2 (1);

    --      CURSOR cur_pol
    --      IS
    --         SELECT pol_policy_status, pol_binder_policy, pol_cur_code,
    --                pol_cur_symbol, pol_prev_batch_no, pol_loaded, pol_cur_rate
    --           FROM gin_policies
    --          WHERE pol_batch_no = v_batch_no;

    --      CURSOR cur_all_risks (vpolloaded IN VARCHAR2)
    --      IS
    --         SELECT   ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  ipu_comp_retention, ipu_pol_est_max_loss,
    --                  ipu_avail_fulc_bal, ipu_endos_diff_amt, ipu_sec_scl_code,
    --                  ipu_related_ipu_code, ipu_bp, ipu_gp, ipu_fp, ipu_fap,
    --                  ipu_nett_premium, ipu_eml_si, ipu_cummulative_reins,
    --                  ipu_sec_sect_code, ipu_reinsure_amt, ipu_facre_amount,
    --                  ipu_prev_ipu_code, ipu_relr_code, ipu_eff_wef, ipu_id,
    --                  ipu_uw_yr, ipu_inception_uwyr, ipu_rc_code, ipu_bind_code,
    --                  ipu_max_exposure, ipu_earthqke_prem_diff,
    --                  ipu_override_ri_retention
    --             FROM gin_insured_property_unds
    --            WHERE ipu_pol_batch_no = v_batch_no
    --              AND DECODE (NVL (vpolloaded, 'N'), 'N', ipu_reinsured, 1) = 1
    --              AND ipu_code = v_ipu_code
    --         ORDER BY 1;

    --      CURSOR cur_all_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT SUM (NVL (ipu_reinsure_amt, 0)) si
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);

    --      CURSOR cur_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT ipu_code, ipu_reinsure_amt, pol_cur_rate
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);

    ---- select treaties to reinsure each risk
    --      CURSOR cur_treaties (
    --         v_scl_code   IN   NUMBER,
    --         v_ta_code    IN   NUMBER,
    --         v_uwyr            NUMBER,
    --         v_ipu             NUMBER
    --      )
    --      IS
    --         SELECT   *
    --             FROM gin_treaty_setups_vw
    --            WHERE clt_scl_code = v_scl_code
    --              AND as_ta_code = v_ta_code
    --              AND as_uwyr = v_uwyr
    --              AND NVL (as_status, 'N') = 'A'
    --              AND rei_code != 563
    --              AND trt_code IN (1001, 1003, 1004)
    --              AND rei_code NOT IN (
    --                     SELECT ptotr_rei_code
    --                       FROM gin_policy_rein_risk_details
    --                      WHERE ptotr_ipu_code = v_ipu
    --                        AND ptotr_ggt_tran_no = v_tran_no)
    --         ORDER BY clt_as_code, trt_level, clt_scl_code;

    ----AND NVL(as_status,'N') ='A'
    --      CURSOR cur_cnt_trt (
    --         vv_ta_code   NUMBER,
    --         uwyr         NUMBER,
    --         v_scl_code   NUMBER,
    --         v_dt         DATE
    --      )
    --      IS
    --         SELECT COUNT ('x') cnt
    --           FROM gin_class_treaties, gin_arrangement_setups
    --          WHERE clt_as_code = as_code
    --            AND clt_ta_code = vv_ta_code
    --            AND as_uwyr = uwyr
    --            AND clt_scl_code = v_scl_code
    --            AND NVL (as_status, 'N') = 'A';

    ----    AND (v_dt BETWEEN CLT_WEF AND CLT_WET);

    --      --get Arrangement Type
    --      CURSOR cur_arrangments (
    --         v_scl_code   IN   NUMBER,
    --         v_uwyr            NUMBER,
    --         v_cur_code        NUMBER
    --      )
    --      IS
    --         SELECT DISTINCT ta_code, ta_type, NVL (as_status, 'N') as_status
    --                    FROM gin_treaty_arrangements,
    --                         gin_class_treaties,
    --                         gin_arrangement_setups
    --                   WHERE ta_code = clt_ta_code
    --                     AND ta_code = as_ta_code
    --                     AND clt_as_code = as_code
    --                     --AND TA_CUR_CODE = v_cur_code
    --                     AND as_uwyr = v_uwyr
    --                     AND clt_scl_code = v_scl_code
    --                                                  --AND NVL(as_status,'N') ='A'
    --      ;

    --      --AND (v_dt BETWEEN CLT_WEF AND CLT_WET);
    --      CURSOR cur_arrangments_yr (
    --         v_scl_code   IN   NUMBER,
    --         v_uwyr            NUMBER,
    --         v_dt              DATE,
    --         v_cur_code        NUMBER
    --      )
    --      IS
    --         SELECT DISTINCT ta_code, clt_retention_limit
    --                    FROM gin_treaty_arrangements,
    --                         gin_class_treaties,
    --                         gin_arrangement_setups
    --                   WHERE ta_code = clt_ta_code
    --                     AND ta_code = as_ta_code
    --                     AND clt_as_code = as_code
    --                     --AND TA_CUR_CODE = v_cur_code
    --                     AND as_uwyr = v_uwyr
    --                     AND clt_scl_code = v_scl_code
    --                     AND (v_dt BETWEEN clt_wef AND clt_wet);

    ----,CLT_RETENTION_LIMIT
    --      CURSOR cur_participant (v_rei_code IN NUMBER)
    --      IS
    --         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    --                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    --                trpa_trs_code, trpa_trs_sht_desc, trpa_code
    --           FROM gin_treaty_participants
    --          WHERE trpa_rei_code = v_rei_code;

    --      CURSOR cur_pol_facre
    --      IS
    --         SELECT *
    --           FROM gin_policy_facre_setup
    --          WHERE pfcs_pol_batch_no = v_batch_no;
    --   BEGIN
    --    --v_exhange_rate := get_exchange_rate(v_cur_code,v_base_cur_code);
    ----    BEGIN
    ----     SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('REINS_IN_BASE_CURRENCY') INTO v_rein_cur_param FROM DUAL;
    ----    EXCEPTION
    ----    WHEN OTHERS THEN
    ----         v_rein_cur_param := 'N';
    ----    END;
    --      v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

    -- --  raise_error('**************AN IDIOT IS WORKING ON THIS!!!!!!!!!!!!!*************');
    ---- open all risk cursor
    --      BEGIN
    --         UPDATE gin_policy_risk_ri_dtls
    --            SET prrd_facre_rate = 0,
    --                prrd_facre_amount = 0
    --          WHERE prrd_tran_no = v_tran_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Unable to update facre rates at 1, ...');
    --      END;

    --      -- raise_error(v_tran_no);
    --      FOR cur_pol_rec IN cur_pol
    --      LOOP
    ----raise_error('HERE='||v_batch_no||';'||v_tran_no||';'||v_tran_type);
    --         v_exhange_rate :=
    --              get_currexch_rate (cur_pol_rec.pol_cur_code, v_rnd, v_bcur_rnd);

    --         BEGIN
    --            SELECT NVL (pol_loaded, 'N')
    --              INTO v_load_status
    --              FROM gin_policies
    --             WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               v_load_status := NVL (cur_pol_rec.pol_loaded, 'N');
    --         END;

    --         BEGIN
    --            SELECT SUM (DECODE (NVL (pfcs_amt_or_rate, 'R'),
    --                                'R', NVL (pfcs_rate, 0),
    --                                0
    --                               )
    --                       ),
    --                   SUM (DECODE (NVL (pfcs_amt_or_rate, 'R'),
    --                                'R', 0,
    --                                NVL (pfcs_rate, 0)
    --                               )
    --                       )
    --              INTO v_pol_fc_rate,
    --                   v_pol_fc_amt
    --              FROM gin_policy_facre_setup
    --             WHERE pfcs_pol_batch_no = v_batch_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error computing preset facultative cessions.');
    --         END;

    --         FOR cur_all_risks_rec IN cur_all_risks (cur_pol_rec.pol_loaded)
    --         LOOP
    --            v_bind_max_exp := 0;

    --            IF     NVL (v_bind_max_exp, 0) = 0
    --               AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'Y'
    --            THEN
    --               v_dummy := 0;

    --               SELECT COUNT ('x')
    --                 INTO v_dummy
    --                 FROM gin_binder_details
    --                WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                  AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;

    --               IF NVL (v_dummy, 0) > 1
    --               THEN
    --                  raise_error
    --                     ('Setup Error, Maximum accumulation defined more than once for this binder'
    --                     );
    --               ELSIF NVL (v_dummy, 0) = 1
    --               THEN
    --                  BEGIN
    --                     SELECT db_max_limit
    --                       INTO v_bind_max_exp
    --                       FROM gin_binder_details
    --                      WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                        AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
    --                        raise_error
    --                           ('Unable to retrieve the maxmium exposure for the bordereaux scl'
    --                           );
    --                  END;
    --               ELSIF NVL (v_dummy, 0) = 0
    --               THEN
    --                  BEGIN
    --                     SELECT NVL (bind_max_exposure, 0)
    --                       INTO v_bind_max_exp
    --                       FROM gin_binders
    --                      WHERE bind_code = cur_all_risks_rec.ipu_bind_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
    --                        raise_error
    --                           ('Unable to retrieve the maxmium exposure for the bordereaux'
    --                           );
    --                  END;
    --               END IF;

    --               --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
    --               IF     NVL (v_bind_max_exp, 0) > 0
    --                  AND NVL (v_bind_max_exp, 0) <
    --                                   NVL (cur_all_risks_rec.ipu_max_exposure, 0)
    --               THEN
    --                  raise_error (   'The maximum exposure amount for the risk '
    --                               || cur_all_risks_rec.ipu_property_id
    --                               || ' is greater than the allowed limit of '
    --                               || v_bind_max_exp
    --                              );
    --               END IF;
    --            END IF;

    --------------------
    --/*
    --      --normaly do not populate new treaties when there is a refund premium
    --    this situations is required for loaded risks on their first endorsement that
    --    result into refund premium
    --*/

    --            /**** NOTE THIS STATEMENT SHOULD NOT INCLUDE THE -1 BUT ITS OPENED FOR ALLOWING OKWAKOS TRANSACTIONS
    --            TO PASS- HE REFUSED TO EDIT LOADED TRANSACTIONS PROPERLY SO ON PREMIUM REFUNDS ON NON EXISTING RISKS HE IS
    --            FORCED TO ENTER IT AFRESH THEN GIVE A BUT CHARGE PREMIUM

    --            IF SIGN(NVL(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)) IN (1,0) OR NVL(v_load_status,'N') ='Y'  THEN

    --            */
    --            IF    SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)) IN
    --                                                                    (1, 0, -1)
    --               OR NVL (v_load_status, 'N') = 'Y'
    --            THEN
    --               BEGIN
    --                  v_no_ri_si := NULL;

    --                  SELECT NVL (scl_no_ri_si, 'N'),
    --                         NVL (scl_reinsure_wot_ri_prog, 'N')
    --                    INTO v_no_ri_si,
    --                         v_reinsure_wot_ri_prog
    --                    FROM gin_sub_classes
    --                   WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'Unable to retrieve RI SI status for the sub class '
    --                         || cur_all_risks_rec.ipu_sec_scl_code
    --                        );
    --               END;

    --               IF     NVL (v_no_ri_si, 'N') = 'N'
    --                  AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --               THEN
    --                  raise_error
    --                     (   'No reinsure amount specified, cannot reinsure this risk '
    --                      || cur_all_risks_rec.ipu_item_desc
    --                     );
    --               END IF;

    --               -- open arrangements cursor
    --               --reserve facre sessions if its not a new business or renewal
    --               BEGIN
    --                  v_prrd_code := NULL;
    --                  v_facre_amt := 0;

    --                  SELECT prrd_code, prrd_facre_amount, prrd_avail_fulc_bal
    --                    INTO v_prrd_code, v_facre_amt, v_facre_excess
    --                    FROM gin_policy_risk_ri_dtls
    --                   WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                     AND prrd_tran_no = v_tran_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     v_prrd_code := NULL;
    --                     v_facre_amt := 0;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('Unable to retrieve RI details, ...');
    --               END;

    --               ---get related risks
    --               v_retention_amt := 0;
    --               v_grp_tot_ret := 0;
    --               v_group_si := 0;

    --               IF cur_all_risks_rec.ipu_relr_code IS NOT NULL
    --               THEN
    --                  --first check if there is any ri transaction not adjusted
    --                  BEGIN
    --                     --GGT_TRANS_NO
    --                     v_unadjusted_ri_tran := 0;

    --                     SELECT COUNT (ggt_trans_no)
    --                       INTO v_unadjusted_ri_tran
    --                       FROM gin_gis_transactions
    --                      WHERE ggt_uw_clm_tran = 'R'
    --                        AND (   ggt_trans_authorised IS NULL
    --                             OR ggt_trans_authorised IN ('N', 'R')
    --                            )
    --                        AND ggt_risk_grp_code =
    --                                               cur_all_risks_rec.ipu_relr_code;

    --                     IF NVL (v_unadjusted_ri_tran, 0) > 0
    --                     THEN
    --                        raise_error
    --                           (   'There are '
    --                            || v_unadjusted_ri_tran
    --                            || ' Grouped RI transactions not adjusted. please adjust them first.'
    --                           );
    --                     END IF;
    --                  END;

    --                  v_group_si := 0;
    --                  v_grp_flag := TRUE;
    --                  v_group_si :=
    --                     get_group_top_loc (cur_all_risks_rec.ipu_pol_batch_no,
    --                                        cur_all_risks_rec.ipu_pol_policy_no,
    --                                        cur_all_risks_rec.ipu_relr_code,
    --                                        cur_all_risks_rec.ipu_eff_wef
    --                                       );

    --                  --v_group_si := v_group_si * v_exhange_rate;
    --                  IF NVL (v_group_si, 0) = 0
    --                  THEN
    --                     v_group_si := 1;
    --                  END IF;

    --                  FOR cur_related_risks_rec IN
    --                     cur_related_risks (cur_all_risks_rec.ipu_relr_code,
    --                                        cur_all_risks_rec.ipu_eff_wef,
    --                                        cur_all_risks_rec.ipu_id
    --                                       )
    --                  LOOP
    --                     BEGIN
    --                        UPDATE gin_insured_property_unds
    --                           SET ipu_reinsured = 1,
    --                               ipu_grp_top_loc =
    --                                  ROUND (  NVL (v_group_si, 0)
    --                                         * cur_related_risks_rec.pol_cur_rate,
    --                                         v_rnd
    --                                        ),
    --                               ipu_grp_si_risk_pct =
    --                                  ROUND
    --                                     (  (  NVL
    --                                              (cur_related_risks_rec.ipu_reinsure_amt,
    --                                               0
    --                                              )
    --                                         * cur_related_risks_rec.pol_cur_rate
    --                                        )
    --                                      / DECODE (NVL (v_group_si, 0),
    --                                                0, 100,
    --                                                v_group_si
    --                                               )
    --                                      * 100,
    --                                      4
    --                                     )                                    --??
    --                         WHERE ipu_code = cur_related_risks_rec.ipu_code;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Unable to update related risks RI details, ...'
    --                              );
    --                     END;
    --                  END LOOP;

    --                  v_grp_pct := 0;
    --                  v_grp_pct :=
    --                     ROUND (  (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               * v_exhange_rate
    --                              )
    --                            / v_group_si
    --                            * 100,
    --                            4
    --                           );
    --                  v_group_si := ROUND (v_group_si / v_exhange_rate);
    --                  --v_retention_amt :=NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0) - (NVL(v_facre_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)/100) - NVL(cur_all_risks_rec.IPU_FACRE_AMOUNT,0);
    --                  --v_grp_tot_ret   :=v_retention_amt;
    --                  --v_retention_amt := v_retention_amt * v_grp_pct / 100;
    --                  v_reinsure_amt := v_group_si;
    --               ELSE
    --                  v_grp_pct := 100;
    --                  NULL;
    --                  ----Currency convertions to be considered here
    --                  v_reinsure_amt :=
    --                                  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0);
    --               --v_retention_amt :=NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0) - (NVL(v_facre_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)/100) - NVL(cur_all_risks_rec.IPU_FACRE_AMOUNT,0);
    --               --v_grp_tot_ret :=0;
    --               END IF;

    --               DBMS_OUTPUT.put_line ('1v_retention_amt=' || v_retention_amt);

    ----raise_error('here='||cur_all_risks_rec.ipu_reinsure_amt);
    --               IF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) != 0
    --               THEN                                                     --????
    --                  v_retention_amt :=
    --                     ROUND (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                            - (  NVL (v_facre_rate, 0)
    --                               * NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               / 100
    --                              )
    --                            - NVL (v_facre_amt, 0)
    --                            - get_risk_ri_pool (cur_all_risks_rec.ipu_code),
    --                            v_rnd
    --                           );
    --                  v_retention_amt :=
    --                                   v_retention_amt * NVL (v_grp_pct, 100)
    --                                   / 100;
    --               ELSE
    --                  v_retention_amt := 0;
    --               END IF;

    --               DBMS_OUTPUT.put_line ('2v_retention_amt=' || v_retention_amt);

    --               IF cur_pol_rec.pol_policy_status IN ('NB', 'RN', 'SP')
    --               THEN
    --                  v_eq_prem :=
    --                       cur_all_risks_rec.ipu_earthqke_prem_diff
    --                     * SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0));
    --               ELSE
    --                  v_eq_prem := 0;
    --               END IF;

    --               --  dbms_output.put_line('v_retention_amt='||v_retention_amt);
    --                              --   RAISE_ERROR('JOYCE WAS HERE ===='||v_prrd_code||'   ');

    --               --raise_error('v_retention_amt='||cur_all_risks_rec.IPU_ENDOS_DIFF_AMT||';'||v_eq_prem||';'||v_prrd_code);
    --               IF v_prrd_code IS NULL
    --               THEN
    --                  BEGIN
    --                     SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_prrd_code_seq.NEXTVAL
    --                                      )
    --                       INTO v_prrd_code
    --                       FROM DUAL;

    --                     v_cede_pool := 'Y';

    --                     INSERT INTO gin_policy_risk_ri_dtls
    --                                 (prrd_code, prrd_ipu_code, prrd_idx,
    --                                  prrd_tran_no, prrd_wef,
    --                                  prrd_wet, prrd_current,
    --                                  prrd_comp_retention, prrd_avail_fulc_bal,
    --                                  prrd_gross_comp_retention,
    --                                  prrd_allowed_grs_comp_ret,
    --                                  prrd_facre_amount,
    --                                  prrd_com_retention_rate,
    --                                  prrd_grp_si_risk_pct, prrd_grp_top_loc,
    --                                  prrd_grp_comp_gross_ret,
    --                                  prrd_grp_comp_net_ret,
    --                                  prrd_ri_prem,
    --                                  prrd_earthquake_prem,
    --                                  prrd_ri_net_less_eq_prem,
    --                                  prrd_prev_prrd_code, prrd_cede_pool
    --                                 )
    --                          VALUES (v_prrd_code, cur_all_risks_rec.ipu_code, 1,
    --                                  v_tran_no, cur_all_risks_rec.ipu_wef,
    --                                  cur_all_risks_rec.ipu_wet, 'Y',
    --                                  ROUND (v_retention_amt, v_rnd), 0,
    --                                  ROUND (v_retention_amt, v_rnd),
    --                                  ROUND (v_retention_amt, v_rnd),
    --                                  0,
    --                                  ROUND
    --                                     (  v_retention_amt
    --                                      / DECODE
    --                                           (NVL
    --                                               (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                0
    --                                               ),
    --                                            0, 1,
    --                                            cur_all_risks_rec.ipu_reinsure_amt
    --                                           )
    --                                      * 100,
    --                                      4
    --                                     ),
    --                                  v_grp_pct, NVL (v_group_si, 0),
    --                                  v_grp_tot_ret,
    --                                  0,
    --                                  ROUND (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                         v_rnd
    --                                        ),
    --                                  v_eq_prem,
    ----ROUND(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                                    ROUND
    --                                       (NVL
    --                                           (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - NVL (v_eq_prem, 0),
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))) ,
    --                                  v_prrd_code, v_cede_pool
    --                                 );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Unable to create risk RI details, ...');
    --                  END;

    --                  -- v_cnt :=   (NVL(v_pol_fc_rate,0)/100 * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) + nvl(v_pol_fc_amt,0);
    --                  BEGIN
    --                     UPDATE gin_insured_property_unds
    --                        SET ipu_current_prrd_code = v_prrd_code
    --                      WHERE ipu_code = cur_all_risks_rec.ipu_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Unable to update risks current RI details code, ...'
    --                           );
    --                  END;
    --               ELSE
    --                  BEGIN
    --                                      --PRRD_AVAIL_FULC_BAL =ROUND(DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,v_facre_rate * (DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) /100))),
    --                                      --PRRD_EXCESS_PCT        =ROUND(v_facre_rate,4),
    --                     -- raise_error('update v_retention_amt='||v_retention_amt);
    --                     --raise_error('v_retention_amt='||cur_all_risks_rec.IPU_ENDOS_DIFF_AMT||';v_retention_amt='||v_retention_amt||';'||v_retention_amt||';'||v_grp_tot_ret);
    --                     UPDATE    gin_policy_risk_ri_dtls
    --                           SET prrd_comp_retention = v_retention_amt,
    --                               prrd_gross_comp_retention =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_allowed_grs_comp_ret =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_com_retention_rate =
    --                                  ROUND
    --                                     (DECODE
    --                                         (NVL
    --                                             (cur_all_risks_rec.ipu_reinsure_amt,
    --                                              0
    --                                             ),
    --                                          0, 100,
    --                                            v_retention_amt
    --                                          * NVL
    --                                               (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                0
    --                                               )
    --                                          / 100
    --                                         ),
    --                                      4
    --                                     ),             /***miti changed here ***/
    --                               prrd_grp_top_loc =
    --                                            ROUND (NVL (v_group_si, 0), v_rnd),
    --                               prrd_grp_si_risk_pct = ROUND (v_grp_pct, 4),
    --                               prrd_grp_comp_gross_ret =
    --                                                  ROUND (v_grp_tot_ret, v_rnd),
    --                               prrd_ri_prem =
    --                                  ROUND (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                         v_rnd
    --                                        ),
    --                               prrd_comp_net_rate =
    --                                  ROUND
    --                                     (DECODE
    --                                         (NVL
    --                                             (cur_all_risks_rec.ipu_reinsure_amt,
    --                                              0
    --                                             ),
    --                                          0, 100,
    --                                            v_retention_amt
    --                                          * NVL
    --                                               (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                0
    --                                               )
    --                                          / 100
    --                                         ),
    --                                      4
    --                                     ),             /***miti changed here ***/
    --                               prrd_earthquake_prem = v_eq_prem,
    ----ROUND(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                               prrd_ri_net_less_eq_prem =
    --                                    ROUND
    --                                       (NVL
    --                                           (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - NVL (v_eq_prem, 0)
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)))
    --                     WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                           AND prrd_code = v_prrd_code
    --                           AND prrd_tran_no = v_tran_no
    --                     RETURNING prrd_cede_pool
    --                          INTO v_cede_pool;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                                 ('Unable to update the risk RI details, ...');
    --                  END;
    --               END IF;

    --               DBMS_OUTPUT.put_line ('3v_retention_amt=' || v_retention_amt);
    --               v_arrngmt_defined := 0;

    --               IF v_cede_pool = 'Y'
    --               THEN
    --                  BEGIN
    --                     pop_pool_risk (v_batch_no,
    --                                    cur_all_risks_rec.ipu_code,
    --                                    v_tran_no,
    --                                    v_prrd_code
    --                                   );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error populating pool amount...');
    --                  END;

    --                  v_arrngmt_defined := 2;
    --               END IF;

    --               --raise_error('===here==='||v_cede_pool);
    --               IF     NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --                  AND NVL (v_pol_fc_amt, 0) != 0
    --               THEN
    --                  raise_error
    --                     ('An amount facre setup has been provided when risks exist with no SI exist. Change all facre setups to percentage.'
    --                     );
    --               ELSIF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --               THEN
    --                  v_rsk_fc_rate := NVL (v_pol_fc_rate, 0);
    --               ELSE
    --                  v_rsk_fc_rate :=
    --                       (  (  NVL (v_pol_fc_amt, 0)
    --                           / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                          )
    --                        * 100
    --                       )
    --                     + NVL (v_pol_fc_rate, 0);
    --               END IF;

    --               --v_rsk_fc_rate := ((nvl(v_pol_fc_amt,0)/NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0))*100) + NVL(v_pol_fc_rate,0);
    --               DBMS_OUTPUT.put_line (   NVL (v_pol_fc_rate, 0)
    --                                     || '='
    --                                     || NVL (v_pol_fc_amt, 0)
    --                                     || '='
    --                                     || v_cnt
    --                                     || '='
    --                                     || NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           )
    --                                    );

    ----||'FCAMOUNT='||(NVL(v_pol_fc_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) + nvl(v_pol_fc_amt,0));
    --               IF NVL (v_rsk_fc_rate, 0) > 0
    --               THEN
    --                  v_rsk_fc_amnt :=
    --                     ROUND (  v_rsk_fc_rate
    --                            * NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                            / 100,
    --                            v_rnd
    --                           );

    --                  IF v_rsk_fc_rate > 100
    --                  THEN
    --                     raise_error
    --                        ('The preset facultative placement percentage/amount is more than the risk SI'
    --                        );
    --                  END IF;

    --                  v_facre_excess :=
    --                                  NVL (v_facre_amt, 0)
    --                                  + NVL (v_rsk_fc_amnt, 0);

    --                  UPDATE gin_policy_risk_ri_dtls
    --                     SET prrd_avail_fulc_bal = v_rsk_fc_amnt,
    --                         prrd_excess_pct = v_rsk_fc_rate
    --                   WHERE prrd_code = v_prrd_code;

    --                  FOR cur_pol_facre_rec IN cur_pol_facre
    --                  LOOP
    --                     insert_facre (v_batch_no,
    --                                   cur_all_risks_rec.ipu_code,
    --                                   cur_pol_facre_rec.pfcs_agn_code,
    --                                   cur_pol_facre_rec.pfcs_agn_sht_desc,
    --                                   cur_pol_facre_rec.pfcs_amt_or_rate,
    --                                   cur_pol_facre_rec.pfcs_rate,
    --                                   v_user,
    --                                   'A',
    --                                   NULL,
    --                                   'N',
    --                                   cur_pol_facre_rec.pfcs_accepted_date,
    --                                   cur_pol_facre_rec.pfcs_accepted,
    --                                   cur_pol_facre_rec.pfcs_comm_rate,
    --                                   NULL,
    --                                   NULL,
    --                                   NULL,
    --                                   NULL
    --                                  );
    --                  END LOOP;
    --               END IF;

    --               v_arrngmt_defined := 0;
    --               v_arrangement := NULL;
    --               v_arrangement_type := NULL;
    --               v_dummy := 0;

    --               SELECT COUNT (DISTINCT ('x'))
    --                 INTO v_dummy
    --                 FROM gin_treaty_arrangements, gin_class_treaties
    --                WHERE ta_code = clt_ta_code
    --                  AND clt_scl_code = cur_all_risks_rec.ipu_sec_scl_code
    --                  AND (cur_all_risks_rec.ipu_eff_wef BETWEEN clt_wef AND clt_wet
    --                      );

    --               IF v_dummy > 1
    --               THEN
    --                  --raise_error('The sub class '||cur_all_risks_rec.ipu_sec_scl_code||' has been defined in more than one treaty arrangements');
    --                  raise_error
    --                     (   'The sub class '
    --                      || cur_all_risks_rec.ipu_sec_scl_code
    --                      || ' has been defined in more than one treaty arrangements'
    --                     );
    --               END IF;

    --                --FOR cur_arrangments_rec IN cur_arrangments(cur_all_risks_rec.ipu_sec_scl_code,cur_all_risks_rec.IPU_UW_YR,cur_all_risks_rec.ipu_eff_wef) LOOP
    --               --raise_error(cur_all_risks_rec.ipu_sec_scl_code||'='||cur_all_risks_rec.IPU_UW_YR||';'||cur_pol_rec.pol_cur_code);
    --               FOR cur_arrangments_rec IN
    --                  cur_arrangments (cur_all_risks_rec.ipu_sec_scl_code,
    --                                   cur_all_risks_rec.ipu_uw_yr,
    --                                   cur_pol_rec.pol_cur_code
    --                                  )
    --               LOOP
    --                  IF NVL (cur_arrangments_rec.as_status, 'N') != 'A'
    --                  THEN
    --                     raise_error
    --                        (   'The RI arrangement defined for the sub class code '
    --                         || cur_all_risks_rec.ipu_sec_scl_code
    --                         || ' has not been authorised. '
    --                        );
    --                  END IF;

    --                  --DBMS_OUTPUT.PUT_LINE('3 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
    --                  v_arrangement := cur_arrangments_rec.ta_code;
    --                  -- get the underwriting year to refere to for the treaty
    --                  v_arrngmt_defined := 1;
    --                  v_trt_uwyr := NULL;
    --                  v_arrangement_type := cur_arrangments_rec.ta_type;

    --                  IF cur_arrangments_rec.ta_type IN ('U', 'X')
    --                  THEN
    --                     --v_trt_uwyr := NVL(cur_all_risks_rec.IPU_INCEPTION_UWYR,v_pol_incept_year);
    --                     v_trt_uwyr := cur_all_risks_rec.ipu_uw_yr;
    --                  /** commented on 20/03/2002by Njuki to take care of clean cut and uw yr treaties
    --                  --v_trt_uwyr := v_pol_incept_year;
    --                  the bug may be check if the risk is changing its uwyr if the arrangement is a clean cut it should not change if the arrangement is unwr year ***/
    --                  ELSE
    --                     --v_trt_uwyr :=TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'));
    --                     --remmed for same reason above
    --                     v_trt_uwyr := cur_all_risks_rec.ipu_uw_yr;
    --                  END IF;

    --                              --get retention limit
    --                  --DBMS_OUTPUT.PUT_LINE('1 cur_all_risks_rec.ipu_Rc_code='||cur_all_risks_rec.ipu_Rc_code||'v_load_status='||v_load_status);
    --                  v_dc_pol_loaded := NVL (v_load_status, 'N');

    --                  IF cur_pol_rec.pol_policy_status = 'DC'
    --                  THEN
    --                     BEGIN
    --                        SELECT NVL (pol_loaded, 'N')
    --                          INTO v_dc_pol_loaded
    --                          FROM gin_policies, gin_insured_property_unds
    --                         WHERE ipu_code = cur_all_risks_rec.ipu_prev_ipu_code
    --                           AND pol_batch_no = ipu_pol_batch_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Error determining previous endorsements status..'
    --                              );
    --                     END;
    --                  END IF;

    --                  IF    cur_pol_rec.pol_policy_status != 'DC'
    --                     OR (    cur_pol_rec.pol_policy_status = 'DC'
    --                         AND NVL (v_load_status, 'N') = 'Y'
    --                        )
    --                  THEN
    --                     v_retention_amt := 0;
    --                     v_retention_type := NULL;

    --                                        --IF NVL(cur_all_risks_rec.IPU_OVERRIDE_RI_RETENTION,0) != 0 THEN
    --                                        --    v_retention_amt := NVL(cur_all_risks_rec.IPU_OVERRIDE_RI_RETENTION,0);
    --                                        --ELSE
    --                     --          raise_error('here='||cur_all_risks_rec.ipu_Rc_code||';'||cur_all_risks_rec.ipu_sec_scl_code||';'||cur_arrangments_rec.ta_code||';'||v_trt_uwyr);
    --                     IF cur_all_risks_rec.ipu_rc_code IS NOT NULL
    --                     THEN
    --                        BEGIN
    --                           SELECT tcc_retention_limit, tcc_retention_type,
    --                                  as_code, tcc_fac_oblig_limit,
    --                                  ta_cur_code
    --                             INTO v_retention_amt, v_retention_type,
    --                                  v_as_code, v_fac_oblig_limit,
    --                                  v_trt_cur_code
    --                             FROM gin_trt_class_categories,
    --                                  gin_arrangement_setups,
    --                                  gin_treaty_arrangements
    --                            WHERE as_ta_code = ta_code
    --                              AND tcc_as_code = as_code
    --                              AND tcc_scl_code =
    --                                            cur_all_risks_rec.ipu_sec_scl_code
    --                              AND as_ta_code = cur_arrangments_rec.ta_code
    --                              AND as_uwyr = v_trt_uwyr
    --                              AND tcc_rc_code = cur_all_risks_rec.ipu_rc_code;

    --                           --DBMS_OUTPUT.PUT_LINE('2 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
    --                           IF v_retention_type = 'P'
    --                           THEN
    --                              SELECT DISTINCT   clt_retention_limit
    --                                              * v_retention_amt
    --                                              / 100,
    --                                              as_code, clt_fac_oblig_limit,
    --                                              ta_cur_code
    --                                         INTO v_retention_amt,
    --                                              v_as_code, v_fac_oblig_limit,
    --                                              v_trt_cur_code
    --                                         FROM gin_class_treaties,
    --                                              gin_arrangement_setups,
    --                                              gin_treaty_arrangements
    --                                        WHERE as_ta_code = ta_code
    --                                          AND clt_as_code = as_code
    --                                          AND clt_scl_code =
    --                                                 cur_all_risks_rec.ipu_sec_scl_code
    --                                          AND as_ta_code =
    --                                                   cur_arrangments_rec.ta_code
    --                                          AND as_uwyr = v_trt_uwyr
    --                                          AND (cur_all_risks_rec.ipu_eff_wef
    --                                                  BETWEEN clt_wef
    --                                                      AND clt_wet
    --                                              );
    --                           --    message('3 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
    --                           END IF;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              SELECT DISTINCT clt_retention_limit, as_code,
    --                                              clt_fac_oblig_limit,
    --                                              ta_cur_code
    --                                         INTO v_retention_amt, v_as_code,
    --                                              v_fac_oblig_limit,
    --                                              v_trt_cur_code
    --                                         FROM gin_class_treaties,
    --                                              gin_arrangement_setups,
    --                                              gin_treaty_arrangements
    --                                        WHERE as_ta_code = ta_code
    --                                          AND clt_as_code = as_code
    --                                          AND clt_scl_code =
    --                                                 cur_all_risks_rec.ipu_sec_scl_code
    --                                          AND as_ta_code =
    --                                                   cur_arrangments_rec.ta_code
    --                                          AND as_uwyr = v_trt_uwyr;
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Unable to retrieve risk class retention amount'
    --                                 );
    --                        END;
    --                     ELSE
    --                        v_retention_amt := 0;

    --                        --DBMS_OUTPUT.PUT_LINE('xcx1v_retention_amt='||v_retention_amt||'scl='||cur_all_risks_rec.ipu_sec_scl_code||'tacode='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'wef='||to_char(cur_all_risks_rec.ipu_eff_wef,'DD/MM/YYYY'));
    --                        BEGIN
    --                           SELECT DISTINCT clt_retention_limit, as_code,
    --                                           clt_fac_oblig_limit, ta_cur_code
    --                                      INTO v_retention_amt, v_as_code,
    --                                           v_fac_oblig_limit, v_trt_cur_code
    --                                      FROM gin_class_treaties,
    --                                           gin_arrangement_setups,
    --                                           gin_treaty_arrangements
    --                                     WHERE as_ta_code = ta_code
    --                                       AND clt_as_code = as_code
    --                                       AND clt_scl_code =
    --                                              cur_all_risks_rec.ipu_sec_scl_code
    --                                       AND as_ta_code =
    --                                                   cur_arrangments_rec.ta_code
    --                                       AND as_uwyr = v_trt_uwyr;
    --                        --AND (cur_all_risks_rec.ipu_eff_wef BETWEEN CLT_WEF AND NVL(CLT_WET,TO_dATE('31/12/'||AS_UWYR,'DD/MM/RR')));
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              v_retention_amt :=
    --                                   NVL (cur_all_risks_rec.ipu_reinsure_amt,
    --                                        0)
    --                                 - NVL (v_facre_amt, 0)
    --                                 - NVL (v_facre_excess, 0)
    --                                 + get_risk_ri_pool (v_prrd_code);
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Unable to retrieve the arrangement retention limit'
    --                                 );
    --                        END;

    --                        -- RAISE_ERROR(cur_arrangments_rec.ta_code||';'||v_trt_uwyr||';'||cur_all_risks_rec.ipu_eff_wef||';'||cur_all_risks_rec.ipu_sec_scl_code);
    --                        IF NVL (v_retention_amt, 0) = 0
    --                        THEN
    --                           raise_error
    --                              (   'No Gross Retention or Max XOL deductible defined for the sub class code '
    --                               || cur_all_risks_rec.ipu_sec_scl_code
    --                              );
    --                        END IF;
    --                     END IF;

    --                     DBMS_OUTPUT.put_line (   '4v_retention_amt='
    --                                           || v_retention_amt
    --                                           || ' v_fac_oblig_limit='
    --                                           || v_fac_oblig_limit
    --                                          );

    --                     --END IF;
    --                     IF v_trt_cur_code != cur_pol_rec.pol_cur_code
    --                     THEN
    --                        IF v_bcur_code = v_trt_cur_code
    --                        THEN
    --                           -- raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
    --                           v_retention_amt :=
    --                              ROUND (v_retention_amt
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                           v_retention_amt := ROUND (v_retention_amt, v_rnd);
    --                           v_fac_oblig_limit :=
    --                              ROUND (  v_fac_oblig_limit
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                        -- raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
    --                        ELSE
    --                           v_trt_cur_rate :=
    --                              get_exchange_rate (v_trt_cur_code, v_bcur_code);
    --                           v_retention_amt :=
    --                              ROUND (  v_retention_amt
    --                                     * v_trt_cur_rate
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                           v_fac_oblig_limit :=
    --                              ROUND (  v_fac_oblig_limit
    --                                     * v_trt_cur_rate
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                        END IF;
    --                     ELSE
    --                        v_retention_amt := ROUND (v_retention_amt, v_rnd);
    --                     END IF;

    --                     DBMS_OUTPUT.put_line
    --                                        (   '5v_retention_amt='
    --                                         || v_retention_amt
    --                                         || 'REINAMT='
    --                                         || cur_all_risks_rec.ipu_reinsure_amt
    --                                         || 'FACRE='
    --                                         || v_facre_amt
    --                                         || 'EXCESS='
    --                                         || v_facre_excess
    --                                         || 'v_grp_pct='
    --                                         || v_grp_pct
    --                                         || 'POOL='
    --                                         || get_risk_ri_pool (v_prrd_code)
    --                                        );

    --               -- END IF;
    --      -- RAISE_ERROR(v_retention_amt);
    ----****************
    --                     IF (v_retention_amt * NVL (v_grp_pct, 100) / 100) >
    --                             NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                           - NVL (v_facre_amt, 0)
    --                           - NVL (v_facre_excess, 0)
    --                           - NVL (get_risk_ri_pool (v_prrd_code), 0)
    --                     THEN
    --                        v_retention_amt :=
    --                             NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                           - NVL (v_facre_amt, 0)
    --                           - NVL (v_facre_excess, 0)
    --                           - NVL (get_risk_ri_pool (v_prrd_code), 0);
    --                     -- RAISE_ERROR('ooo='||v_retention_amt||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_facre_amt||';'||v_facre_excess||';'||get_risk_ri_pool(v_prrd_code));
    --                     ELSE
    --                        v_retention_amt :=
    --                               (v_retention_amt * NVL (v_grp_pct, 100) / 100
    --                               );
    --                     -- - NVL(get_risk_ri_pool(v_prrd_code),0); --+NVL(get_risk_ri_pool(v_prrd_code),0);
    --                     END IF;

    --                     DBMS_OUTPUT.put_line (   '6v_retention_amt='
    --                                           || v_retention_amt
    --                                          );                      -- FROM HERE

    ----raise_error('baada ya get_exchange_rate='||v_net_ret_rate||';'||v_old_grs_ret_rate||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_retention_amt||';'||v_prrd_code);
    --                     BEGIN
    --                        --DBMS_OUTPUT.PUT_LINE('7XX v_retention_amt='||v_retention_amt);
    --                        UPDATE gin_policy_risk_ri_dtls
    --                           SET prrd_comp_retention =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_gross_comp_retention =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_allowed_grs_comp_ret =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_com_retention_rate =
    --                                  DECODE
    --                                     (ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         ),
    --                                      0, 100,
    --                                      ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         )
    --                                     ),
    --                               prrd_comp_net_rate =
    --                                  DECODE
    --                                     (ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         ),
    --                                      0, 100,
    --                                      ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         )
    --                                     ),
    --                               prrd_net_prem =
    --                                  ROUND
    --                                     (  (DECODE
    --                                            (NVL
    --                                                (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                 0
    --                                                ),
    --                                             0, 100,
    --                                               v_retention_amt
    --                                             / NVL
    --                                                  (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                   0
    --                                                  )
    --                                             * 100
    --                                            )
    --                                        )
    --                                      * NVL (prrd_ri_prem, 0)
    --                                      / 100
    --                                     ),
    --                               prrd_as_uwyr = v_trt_uwyr,
    --                               prrd_as_code = v_as_code,
    --                               prrd_facoblig_limit = v_fac_oblig_limit
    --                         /* DECODE (NVL (prrd_facoblig_alloc_chk, 'N'),
    --                                  'Y', 0,
    --                                  v_fac_oblig_limit
    --                                 )*/
    --                        WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                           AND prrd_code = v_prrd_code
    --                           AND prrd_tran_no = v_tran_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                                 ('Unable to update the risk retention limit');
    --                     END;
    --                  ELSE
    --                     BEGIN
    --                        --v_pol_status
    --                        v_old_grs_ret_rate := 0;
    --                        v_net_ret_rate := 0;

    --                        SELECT prrd_com_retention_rate,
    --                               prrd_com_retention_rate, prrd_as_uwyr,
    --                               prrd_as_code, prrd_facoblig_excess
    --                          INTO v_old_grs_ret_rate,
    --                               v_net_ret_rate, v_as_uwyr,
    --                               v_as_code, v_fac_oblig_limit
    --                          FROM gin_policy_risk_ri_dtls
    --                         WHERE prrd_code =
    --                                  (SELECT prrd_code
    --                                     FROM gin_policy_risk_ri_dtls
    --                                    WHERE prrd_ipu_code =
    --                                             cur_all_risks_rec.ipu_prev_ipu_code
    --                                      AND prrd_current = 'Y');
    --                     EXCEPTION
    --                        WHEN NO_DATA_FOUND
    --                        THEN
    --                           v_old_grs_ret_rate := 0;
    --                           v_net_ret_rate := 0;
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Unable to retrieve the prevoius cession rates'
    --                              );
    --                     END;

    --                     BEGIN
    --                        UPDATE gin_policy_risk_ri_dtls
    --                           SET prrd_comp_retention =
    --                                  ROUND
    --                                     (  NVL (v_net_ret_rate, 0)
    --                                      / 100
    --                                      * NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           ),
    --                                      v_rnd
    --                                     ),
    --                               prrd_gross_comp_retention =
    --                                  ROUND
    --                                     (  NVL (v_old_grs_ret_rate, 0)
    --                                      / 100
    --                                      * NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           ),
    --                                      v_rnd
    --                                     ),
    --                               prrd_allowed_grs_comp_ret =
    --                                  ROUND
    --                                     (  NVL (v_old_grs_ret_rate, 0)
    --                                      / 100
    --                                      * NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           ),
    --                                      v_rnd
    --                                     ),
    --                               prrd_com_retention_rate =
    --                                                   NVL (v_old_grs_ret_rate, 0),
    --                               prrd_comp_net_rate = NVL (v_net_ret_rate, 0),
    --                               prrd_net_prem =
    --                                  ROUND (  NVL (v_net_ret_rate, 0)
    --                                         * NVL (prrd_ri_prem, 0)
    --                                         / 100
    --                                        ),
    --                               prrd_as_uwyr = v_as_uwyr,
    --                               prrd_as_code = v_as_code,
    --                               prrd_facoblig_limit = v_fac_oblig_limit
    --                         /*DECODE (NVL (prrd_facoblig_alloc_chk, 'N'),
    --                                 'Y', 0,
    --                                 v_fac_oblig_limit
    --                                )*/
    --                        WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                           AND prrd_code = v_prrd_code
    --                           AND prrd_tran_no = v_tran_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('3322Unable to update the risk retention limit'
    --                              );
    --                     END;
    --                  END IF;

    --                  DBMS_OUTPUT.put_line ('7 v_retention_amt='
    --                                        || v_retention_amt
    --                                       );

    --                  IF     cur_arrangments_rec.ta_type != 'X'
    --                     AND (   cur_pol_rec.pol_policy_status != 'DC'
    --                          OR (    cur_pol_rec.pol_policy_status = 'DC'
    --                              AND NVL (v_load_status, 'N') = 'Y'
    --                             )
    --                         )
    --                  THEN
    --                     FOR cur_treaties_rec IN
    --                        cur_treaties (cur_all_risks_rec.ipu_sec_scl_code,
    --                                      cur_arrangments_rec.ta_code,
    --                                      v_trt_uwyr,
    --                                      cur_all_risks_rec.ipu_code
    --                                     )
    --                     LOOP
    --                        check_treaty_participation (cur_treaties_rec.rei_code);
    --                        v_arrngmt_defined := 2;

    --                        IF NVL (v_retention_amt, 0) = 0
    --                        THEN
    --                           v_retention_amt :=
    --                                NVL (cur_treaties_rec.clt_retention_limit, 0);
    --                        ---    raise_error('Error,Unable to compute retention limit...');
    --                        END IF;

    --                        BEGIN
    --                           SELECT ctl_code, ctl_cede_rate,
    --                                  ctl_rate_type
    --                             INTO v_ctl_code, v_ctl_cede_rate,
    --                                  v_ctl_rate_type
    --                             FROM gin_class_treaty_limits
    --                            WHERE ctl_rei_code = cur_treaties_rec.rei_code
    --                              AND ctl_scl_code =
    --                                            cur_all_risks_rec.ipu_sec_scl_code
    --                              AND ctl_as_code = cur_treaties_rec.as_code;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              NULL;
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error while picking the classs treaty ri rates...'
    --                                 );
    --                        END;

    --                        -- insert treaty details for the risk
    --                        BEGIN
    --                           INSERT INTO gin_policy_rein_risk_details
    --                                       (ptotr_code,
    --                                        ptotr_risk_cur_code,
    --                                        ptotr_trt_cur_code,
    --                                        ptotr_risk_si_pcur,
    --                                        ptotr_risk_prem_pcur,
    --                                        ptotr_rei_code,
    --                                        ptotr_trt_code,
    --                                        ptotr_trt_sht_desc,
    --                                        ptotr_clt_scl_code,
    --                                        ptotr_rate,
    --                                        ptotr_rate_type,
    --                                        ptotr_property_id,
    --                                        ptotr_uwyr,
    --                                        ptotr_ipu_code,
    --                                        ptotr_pol_batch_no,
    --                                        ptotr_pol_policy_no,
    --                                        ptotr_pol_ren_endos_no,
    --                                        ptotr_risk_cur_symbol,
    --                                        ptotr_trt_cur_symbol,
    --                                        ptotr_sect_code,
    --                                        ptotr_ta_code,
    --                                        ptotr_as_code,
    --                                        ptotr_trs_code,
    --                                        ptotr_trs_sht_desc,
    --                                        ptotr_ggt_tran_no, ptotr_tran_type,
    --                                        ptotr_prev_cession_rate,
    --                                        ptotr_prrd_code,
    --                                        ptotr_earthqke_comm_rate,
    --                                        ptotr_allowed_rate,
    --                                        ptotr_ctl_code
    --                                       )
    --                                VALUES (ptotr_code_seq.NEXTVAL,
    --                                        cur_pol_rec.pol_cur_code,
    --                                        cur_treaties_rec.rei_cur_code,
    --                                        v_reinsure_amt,
    --                                        /*cur_all_risks_rec.IPU_REINSURE_AMT*/
    --                                        cur_all_risks_rec.ipu_endos_diff_amt,
    --                                        cur_treaties_rec.rei_code,
    --                                        cur_treaties_rec.rei_trt_code,
    --                                        cur_treaties_rec.rei_trt_sht_desc,
    --                                        cur_all_risks_rec.ipu_sec_scl_code,
    --                                        NVL (v_ctl_cede_rate,
    --                                             cur_treaties_rec.rei_cede_rate
    --                                            ),
    --                                        NVL (v_ctl_rate_type,
    --                                             cur_treaties_rec.rei_rate_type
    --                                            ),
    --                                        cur_all_risks_rec.ipu_property_id,
    --                                        v_trt_uwyr,
    --                                        cur_all_risks_rec.ipu_code,
    --                                        cur_all_risks_rec.ipu_pol_batch_no,
    --                                        cur_all_risks_rec.ipu_pol_policy_no,
    --                                        cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                        cur_pol_rec.pol_cur_symbol,
    --                                        cur_treaties_rec.rei_cur_symbol,
    --                                        cur_all_risks_rec.ipu_sec_sect_code,
    --                                        cur_treaties_rec.as_ta_code,
    --                                        cur_treaties_rec.as_code,
    --                                        cur_treaties_rec.rei_trs_code,
    --                                        cur_treaties_rec.rei_trs_sht_desc,
    --                                        v_tran_no, v_tran_type,
    --                                        0,
    --                                        v_prrd_code,
    --                                        cur_treaties_rec.rei_earthqke_comm_rate,
    --                                        cur_treaties_rec.rei_cede_rate,
    --                                        v_ctl_code
    --                                       );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error in populate_treaty_details:- Unable to insert new treaty details....'
    --                                 );
    --                        END;

    --                        --insert participants
    --                        FOR cur_participant_rec IN
    --                           cur_participant (cur_treaties_rec.rei_code)
    --                        LOOP
    --                           BEGIN
    --                              INSERT INTO gin_participations
    --                                          (part_code,
    --                                           part_cede_rate,
    --                                           part_trt_code,
    --                                           part_trt_sht_desc,
    --                                           part_agnt_agent_code,
    --                                           part_agnt_sht_desc,
    --                                           part_ptotr_code,
    --                                           part_rei_code,
    --                                           part_pol_cur_code,
    --                                           part_pol_cur_symbol,
    --                                           part_uwyr,
    --                                           part_pol_batch_no,
    --                                           part_pol_policy_no,
    --                                           part_pol_ren_endos_no,
    --                                           part_ipu_code,
    --                                           part_ta_code,
    --                                           part_as_code,
    --                                           part_fiscal_year,
    --                                           part_acc_posted,
    --                                           part_trs_code,
    --                                           part_trs_sht_desc,
    --                                           part_scl_code,
    --                                           part_ggt_tran_no, part_tran_type,
    --                                           part_prrd_code,
    --                                           part_trpa_code
    --                                          )
    --                                   VALUES (gin_part_code_seq.NEXTVAL,
    --                                           cur_participant_rec.trpa_comp_rate,
    --                                           cur_treaties_rec.rei_trt_code,
    --                                           cur_treaties_rec.rei_trt_sht_desc,
    --                                           cur_participant_rec.trpa_agnt_agent_code,
    --                                           cur_participant_rec.trpa_agnt_sht_desc,
    --                                           ptotr_code_seq.CURRVAL,
    --                                           cur_treaties_rec.rei_code,
    --                                           cur_pol_rec.pol_cur_code,
    --                                           cur_pol_rec.pol_cur_symbol,
    --                                           v_trt_uwyr,
    --                                           cur_all_risks_rec.ipu_pol_batch_no,
    --                                           cur_all_risks_rec.ipu_pol_policy_no,
    --                                           cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                           cur_all_risks_rec.ipu_code,
    --                                           cur_treaties_rec.as_ta_code,
    --                                           cur_treaties_rec.as_code,
    --                                           TO_NUMBER (TO_CHAR (SYSDATE,
    --                                                               'YYYY')
    --                                                     ),
    --                                           'R',
    --                                           cur_treaties_rec.rei_trs_code,
    --                                           cur_treaties_rec.rei_trs_sht_desc,
    --                                           cur_all_risks_rec.ipu_sec_scl_code,
    --                                           v_tran_no, v_tran_type,
    --                                           v_prrd_code,
    --                                           cur_participant_rec.trpa_code
    --                                          );
    --                           EXCEPTION
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_error
    --                                    ('Error in populate_treaty_details:- Unable to insert treaty participants details....'
    --                                    );
    --                           END;
    --                        END LOOP;                               --participants
    --                     END LOOP;                   --cur_treaties_rec main risks
    --                  END IF;
    --               END LOOP;                                 --cur_arrangments_rec

    --               v_grp_flag := FALSE;

    ----raise_error('3322Unable v_retention_amt='||v_retention_amt);
    --        --DBMS_OUTPUT.PUT_LINE('v_arrngmt_defined='||v_arrngmt_defined);
    --               IF     v_arrngmt_defined = 0
    --                  AND NVL (v_reinsure_wot_ri_prog, 'N') = 'N'
    --               THEN
    --                  v_msg :=
    --                        'No RI arrangement defined for the sub class code '
    --                     || cur_all_risks_rec.ipu_sec_scl_code
    --                     || ' Define the Arrangement first. ------ '
    --                     || v_arrngmt_defined;
    --                  raise_error (v_msg);
    --               ELSIF v_arrngmt_defined = 1 AND v_arrangement_type != 'X'
    --               THEN
    --                  --DBMS_OUTPUT.PUT_LINE('cur_all_risks_rec.ipu_eff_wef='||cur_all_risks_rec.ipu_eff_wef);
    --                  FOR cur_cnt_trt_rec IN
    --                     cur_cnt_trt (v_arrangement,
    --                                  v_trt_uwyr,
    --                                  cur_all_risks_rec.ipu_sec_scl_code,
    --                                  cur_all_risks_rec.ipu_eff_wef
    --                                 )
    --                  LOOP
    --                     IF     cur_cnt_trt_rec.cnt = 0
    --                        AND NVL (v_reinsure_wot_ri_prog, 'N') = 'N'
    --                     THEN
    --                        raise_error
    --                           (   'No RI treaties have been setup for the sub class code '
    --                            || cur_all_risks_rec.ipu_sec_scl_code
    --                            || ' UW year '
    --                            || v_trt_uwyr
    --                            || ' Define the treaties first. '
    --                           );
    --                     END IF;
    --                  END LOOP;
    --               END IF;
    --            END IF;
    --         --raise_error('v_prrd_code='||v_prrd_code);
    --         END LOOP;                                         --cur_all_risks_rec
    --      END LOOP;
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL...'
    --            );
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error :- unable to populate treaty details errr...');
    --   END;
    --   PROCEDURE populate_treaty_details (
    --      v_batch_no    IN   NUMBER,
    --      v_tran_no     IN   NUMBER,
    --      v_tran_type   IN   VARCHAR2,
    --      v_ipu_code    IN   NUMBER
    --   )
    --   IS
    --      v_cnt                    NUMBER         := 0;
    --      v_trt_uwyr               NUMBER         := NULL;
    --      cnt                      NUMBER         := 1;
    --      v_retention_amt          NUMBER         := 0;
    --      v_facre_rate             NUMBER         := 0;
    --      v_errmsg                 VARCHAR2 (200);
    --      v_zero_devide            EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      al_id                    NUMBER;
    --      v_group_si               NUMBER         := 0;
    --      v_grp_flag               BOOLEAN        := FALSE;
    --      v_grp_pct                NUMBER         := 0;
    --      v_grp_tot_ret            NUMBER         := 0;
    --      v_reinsure_amt           NUMBER         := 0;
    --      v_exhange_rate           NUMBER         := 1;
    --      v_prrd_code              NUMBER;
    --      v_facre_amt              NUMBER         := 0;
    --      v_facre_excess           NUMBER         := 0;
    --      v_arrngmt_defined        NUMBER         := 0;
    --      v_msg                    VARCHAR2 (200);
    --      v_arrangement            NUMBER;
    --      v_arrangement_type       VARCHAR2 (10);
    --      v_old_grs_ret_rate       NUMBER         := 0;
    --      v_net_ret_rate           NUMBER         := 0;
    --      v_retention_limit        NUMBER         := 0;
    --      v_no_ri_si               VARCHAR2 (2);
    --      v_dummy                  NUMBER         := 0;
    --      v_retention_type         VARCHAR2 (1)   := NULL;
    --      v_bind_max_exp           NUMBER         := 0;
    --      v_load_status            VARCHAR2 (2);
    --      v_reinsure_wot_ri_prog   VARCHAR2 (2);
    --      v_unadjusted_ri_tran     NUMBER         := 0;
    --      v_as_uwyr                NUMBER;
    --      v_dc_pol_loaded          VARCHAR2 (3);
    --      v_eq_prem                NUMBER         := 0;
    --      v_rnd                    NUMBER         := 0;
    --      v_bcur_rnd               NUMBER         := 0;
    --      v_bcur_code              NUMBER;
    --      v_bcur_symbol            VARCHAR2 (15);
    --      v_as_code                NUMBER;
    --      v_fac_oblig_limit        NUMBER;
    --      v_trt_cur_code           NUMBER;
    --      v_trt_cur_rate           NUMBER;
    --      v_ctl_code               NUMBER;
    --      v_ctl_cede_rate          NUMBER;
    --      v_ctl_rate_type          VARCHAR2 (1);
    --       --v_rein_cur_param VARCHAR2(1);
    --      -- v_rein_cur_code NUMBER;
    --      -- v_rein_prem NUMBER :=0;
    --      -- v_max_exposure NUMBER :=0;
    --      v_pol_fc_rate            NUMBER;
    --      v_pol_fc_amt             NUMBER;
    --      v_user                   VARCHAR2 (35);
    --      v_rsk_fc_amnt            NUMBER;
    --      v_rsk_fc_rate            NUMBER;
    --      v_cede_pool              VARCHAR2 (1);
    --      v_rein_cur_param          VARCHAR2 (1);

    --      CURSOR cur_pol
    --      IS
    --         SELECT pol_policy_status, pol_binder_policy, pol_cur_code,
    --                pol_policy_type, pol_cur_symbol, pol_prev_batch_no,
    --                pol_loaded, pol_cur_rate,pol_exch_rate_fixed
    --           FROM gin_policies
    --          WHERE pol_batch_no = v_batch_no;

    --      CURSOR cur_all_risks (vpolloaded IN VARCHAR2)
    --      IS
    --         SELECT   ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  ipu_comp_retention, ipu_pol_est_max_loss,
    --                  ipu_avail_fulc_bal, ipu_endos_diff_amt, ipu_sec_scl_code,
    --                  ipu_related_ipu_code, ipu_bp, ipu_gp, ipu_fp, ipu_fap,
    --                  ipu_nett_premium, ipu_eml_si, ipu_cummulative_reins,
    --                  ipu_sec_sect_code, ipu_reinsure_amt, ipu_facre_amount,
    --                  ipu_prev_ipu_code, ipu_relr_code, ipu_eff_wef, ipu_id,
    --                  ipu_uw_yr, ipu_inception_uwyr, ipu_rc_code, ipu_bind_code,
    --                  ipu_max_exposure, ipu_earthqke_prem_diff,
    --                  ipu_override_ri_retention
    --             FROM gin_insured_property_unds
    --            WHERE ipu_pol_batch_no = v_batch_no
    --              AND ipu_code = v_ipu_code
    --              AND DECODE (NVL (vpolloaded, 'N'), 'N', ipu_reinsured, 1) = 1
    --         ORDER BY 1;

    --      CURSOR cur_all_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT SUM (NVL (ipu_reinsure_amt, 0)) si
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);

    --      CURSOR cur_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT ipu_code, ipu_reinsure_amt, pol_cur_rate
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);

    ---- select treaties to reinsure each risk
    --      CURSOR cur_treaties (
    --         v_scl_code   IN   NUMBER,
    --         v_ta_code    IN   NUMBER,
    --         v_uwyr            NUMBER,
    --         v_ipu             NUMBER
    --      )
    --      IS
    --         SELECT   *
    --             FROM gin_treaty_setups_vw
    --            WHERE clt_scl_code = v_scl_code
    --              AND as_ta_code = v_ta_code
    --              AND as_uwyr = v_uwyr
    --              AND NVL (as_status, 'N') = 'A'
    --              AND rei_code != 563
    --              AND trt_code IN (1001, 1003, 1004)
    --              AND rei_code NOT IN (
    --                     SELECT ptotr_rei_code
    --                       FROM gin_policy_rein_risk_details
    --                      WHERE ptotr_ipu_code = v_ipu
    --                        AND ptotr_ggt_tran_no = v_tran_no)
    --              and trunc(sysdate)  between clt_wef and clt_wet
    --         ORDER BY clt_as_code, trt_level, clt_scl_code;

    ----AND NVL(as_status,'N') ='A'
    --      CURSOR cur_cnt_trt (
    --         vv_ta_code   NUMBER,
    --         uwyr         NUMBER,
    --         v_scl_code   NUMBER,
    --         v_dt         DATE
    --      )
    --      IS
    --         SELECT COUNT ('x') cnt
    --           FROM gin_class_treaties, gin_arrangement_setups
    --          WHERE clt_as_code = as_code
    --            AND clt_ta_code = vv_ta_code
    --            AND as_uwyr = uwyr
    --            AND clt_scl_code = v_scl_code
    --            AND NVL (as_status, 'N') = 'A';

    ----    AND (v_dt BETWEEN CLT_WEF AND CLT_WET);

    --      --get Arrangement Type
    --      CURSOR cur_arrangments (
    --         v_scl_code   IN   NUMBER,
    --         v_uwyr            NUMBER,
    --         v_cur_code        NUMBER
    --      )
    --      IS
    --         SELECT DISTINCT ta_code, ta_type, NVL (as_status, 'N') as_status
    --                    FROM gin_treaty_arrangements,
    --                         gin_class_treaties,
    --                         gin_arrangement_setups
    --                   WHERE ta_code = clt_ta_code
    --                     AND ta_code = as_ta_code
    --                     AND clt_as_code = as_code
    --                     --AND ta_cur_code = v_cur_code
    --                     --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
    --                     AND as_uwyr = v_uwyr
    --                     AND clt_scl_code = v_scl_code
    --                     AND NVL (as_status, 'N') = 'A'
    --                                                   --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
    --      ;

    --      --AND (v_dt BETWEEN CLT_WEF AND CLT_WET);
    --      CURSOR cur_arrangments_yr (
    --         v_scl_code   IN   NUMBER,
    --         v_uwyr            NUMBER,
    --         v_dt              DATE,
    --         v_cur_code        NUMBER
    --      )
    --      IS
    --         SELECT DISTINCT ta_code, clt_retention_limit
    --                    FROM gin_treaty_arrangements,
    --                         gin_class_treaties,
    --                         gin_arrangement_setups
    --                   WHERE ta_code = clt_ta_code
    --                     AND ta_code = as_ta_code
    --                     AND clt_as_code = as_code
    --                     --AND ta_cur_code = v_cur_code
    --                     --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
    --                     AND as_uwyr = v_uwyr
    --                     AND clt_scl_code = v_scl_code
    --                     AND (v_dt BETWEEN clt_wef AND clt_wet);

    ----,CLT_RETENTION_LIMIT
    --      CURSOR cur_participant (v_rei_code IN NUMBER)
    --      IS
    --         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    --                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    --                trpa_trs_code, trpa_trs_sht_desc, trpa_code
    --           FROM gin_treaty_participants
    --          WHERE trpa_rei_code = v_rei_code;

    --      CURSOR cur_pol_facre
    --      IS
    --         SELECT *
    --           FROM gin_policy_facre_setup
    --          WHERE pfcs_pol_batch_no = v_batch_no;
    --   BEGIN
    --    --v_exhange_rate := get_exchange_rate(v_cur_code,v_base_cur_code);
    ----    BEGIN
    ----     SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('REINS_IN_BASE_CURRENCY') INTO v_rein_cur_param FROM DUAL;
    ----    EXCEPTION
    ----    WHEN OTHERS THEN
    ----         v_rein_cur_param := 'N';
    ----    END;
    --      v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

    ---- open all risk cursor
    --      BEGIN
    --         UPDATE gin_policy_risk_ri_dtls
    --            SET prrd_facre_rate = 0,
    --                prrd_facre_amount = 0
    --          WHERE prrd_tran_no = v_tran_no AND prrd_ipu_code = v_ipu_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Unable to update facre rates at 1, ...');
    --      END;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('REINS_IN_BASE_CURRENCY')
    --           INTO v_rein_cur_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_rein_cur_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Treaty  parameter...');
    --      END;
    --
    --

    --      FOR cur_pol_rec IN cur_pol
    --      LOOP
    --
    --
    ----      IF     NVL (cur_pol_rec.pol_exch_rate_fixed, 'N') = 'N'
    ----            AND cur_pol_rec.pol_policy_status != 'CO'
    ----         THEN
    ----            v_exhange_rate := 1;
    ----            v_exhange_rate :=
    ----               get_currexch_rate (cur_pol_rec.pol_cur_code, v_rnd,
    ----                                  v_bcur_rnd);
    ----      ELSE                                    -- TO TAKE CARE OF FIXED RATE
    ----            -- v_exhange_rate :=  get_currexch_rate (cur_pol_rec.pol_cur_code, v_rnd, v_bcur_rnd);
    ----            v_exhange_rate := cur_pol_rec.pol_cur_rate;
    ----            v_rnd := get_curr_rounding (cur_pol_rec.pol_cur_code, v_bcur_rnd);
    ----      END IF;
    --
    --

    ----raise_error('HERE='||cur_pol_rec.pol_cur_code||';'||v_exhange_rate||';'||v_tran_type);
    --         BEGIN
    --            SELECT NVL (pol_loaded, 'N')
    --              INTO v_load_status
    --              FROM gin_policies
    --             WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               v_load_status := NVL (cur_pol_rec.pol_loaded, 'N');
    --         END;

    --         BEGIN
    --            SELECT SUM (DECODE (NVL (pfcs_amt_or_rate, 'R'),
    --                                'R', NVL (pfcs_rate, 0),
    --                                0
    --                               )
    --                       ),
    --                   SUM (DECODE (NVL (pfcs_amt_or_rate, 'R'),
    --                                'R', 0,
    --                                NVL (pfcs_rate, 0)
    --                               )
    --                       )
    --              INTO v_pol_fc_rate,
    --                   v_pol_fc_amt
    --              FROM gin_policy_facre_setup
    --             WHERE pfcs_pol_batch_no = v_batch_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error computing preset facultative cessions.');
    --         END;

    --         FOR cur_all_risks_rec IN cur_all_risks (cur_pol_rec.pol_loaded)
    --         LOOP
    --            v_bind_max_exp := 0;

    --            IF     NVL (v_bind_max_exp, 0) = 0
    --               AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'Y'
    --            THEN
    --               v_dummy := 0;

    --               SELECT COUNT ('x')
    --                 INTO v_dummy
    --                 FROM gin_binder_details
    --                WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                  AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;

    --               IF NVL (v_dummy, 0) > 1
    --               THEN
    --                  raise_error
    --                     ('Setup Error, Maximum accumulation defined more than once for this binder'
    --                     );
    --               ELSIF NVL (v_dummy, 0) = 1
    --               THEN
    --                  BEGIN
    --                     SELECT db_max_limit
    --                       INTO v_bind_max_exp
    --                       FROM gin_binder_details
    --                      WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                        AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
    --                        raise_error
    --                           ('Unable to retrieve the maxmium exposure for the bordereaux scl'
    --                           );
    --                  END;
    --               ELSIF NVL (v_dummy, 0) = 0
    --               THEN
    --                  BEGIN
    --                     SELECT NVL (bind_max_exposure, 0)
    --                       INTO v_bind_max_exp
    --                       FROM gin_binders
    --                      WHERE bind_code = cur_all_risks_rec.ipu_bind_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
    --                        raise_error
    --                           ('Unable to retrieve the maxmium exposure for the bordereaux'
    --                           );
    --                  END;
    --               END IF;

    --               --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
    --               IF     NVL (v_bind_max_exp, 0) > 0
    --                  AND NVL (v_bind_max_exp, 0) <
    --                                   NVL (cur_all_risks_rec.ipu_max_exposure, 0)
    --               THEN
    --                  raise_error (   'The maximum exposure amount for the risk '
    --                               || cur_all_risks_rec.ipu_property_id
    --                               || ' is greater than the allowed limit of '
    --                               || v_bind_max_exp
    --                              );
    --               END IF;
    --            END IF;

    --------------------
    --/*
    --      --normaly do not populate new treaties when there is a refund premium
    --    this situations is required for loaded risks on their first endorsement that
    --    result into refund premium
    --*/

    --            /**** NOTE THIS STATEMENT SHOULD NOT INCLUDE THE -1 BUT ITS OPENED FOR ALLOWING OKWAKOS TRANSACTIONS
    --            TO PASS- HE REFUSED TO EDIT LOADED TRANSACTIONS PROPERLY SO ON PREMIUM REFUNDS ON NON EXISTING RISKS HE IS
    --            FORCED TO ENTER IT AFRESH THEN GIVE A BUT CHARGE PREMIUM

    --            IF SIGN(NVL(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)) IN (1,0) OR NVL(v_load_status,'N') ='Y'  THEN

    --            */
    --            IF    SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)) IN
    --                                                                    (1, 0, -1)
    --               OR NVL (v_load_status, 'N') = 'Y'
    --            THEN
    --               BEGIN
    --                  v_no_ri_si := NULL;

    --                  SELECT NVL (scl_no_ri_si, 'N'),
    --                         NVL (scl_reinsure_wot_ri_prog, 'N')
    --                    INTO v_no_ri_si,
    --                         v_reinsure_wot_ri_prog
    --                    FROM gin_sub_classes
    --                   WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'Unable to retrieve RI SI status for the sub class '
    --                         || cur_all_risks_rec.ipu_sec_scl_code
    --                        );
    --               END;

    --               IF     NVL (v_no_ri_si, 'N') = 'N'
    --                  AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --               THEN
    --                  raise_error
    --                     (   'No reinsure amount specified, cannot reinsure this risk '
    --                      || cur_all_risks_rec.ipu_item_desc
    --                     );
    --               END IF;

    --               -- open arrangements cursor
    --               --reserve facre sessions if its not a new business or renewal
    --               BEGIN
    --                  v_prrd_code := NULL;
    --                  v_facre_amt := 0;

    --                  SELECT prrd_code, prrd_facre_amount, prrd_avail_fulc_bal
    --                    INTO v_prrd_code, v_facre_amt, v_facre_excess
    --                    FROM gin_policy_risk_ri_dtls
    --                   WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                     AND prrd_tran_no = v_tran_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     v_prrd_code := NULL;
    --                     v_facre_amt := 0;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('Unable to retrieve RI details, ...');
    --               END;

    --               ---get related risks
    --               v_retention_amt := 0;
    --               v_grp_tot_ret := 0;
    --               v_group_si := 0;

    --               IF cur_all_risks_rec.ipu_relr_code IS NOT NULL
    --               THEN
    --                  --first check if there is any ri transaction not adjusted
    --                  BEGIN
    --                     --GGT_TRANS_NO
    --                     v_unadjusted_ri_tran := 0;

    --                     SELECT COUNT (ggt_trans_no)
    --                       INTO v_unadjusted_ri_tran
    --                       FROM gin_gis_transactions
    --                      WHERE ggt_uw_clm_tran = 'R'
    --                        AND (   ggt_trans_authorised IS NULL
    --                             OR ggt_trans_authorised IN ('N', 'R')
    --                            )
    --                        AND ggt_risk_grp_code =
    --                                               cur_all_risks_rec.ipu_relr_code;

    --                     IF NVL (v_unadjusted_ri_tran, 0) > 0
    --                     THEN
    --                        raise_error
    --                           (   'There are '
    --                            || v_unadjusted_ri_tran
    --                            || ' Grouped RI transactions not adjusted. please adjust them first.'
    --                           );
    --                     END IF;
    --                  END;

    --                  v_group_si := 0;
    --                  v_grp_flag := TRUE;
    --                  v_group_si :=
    --                     get_group_top_loc (cur_all_risks_rec.ipu_pol_batch_no,
    --                                        cur_all_risks_rec.ipu_pol_policy_no,
    --                                        cur_all_risks_rec.ipu_relr_code,
    --                                        cur_all_risks_rec.ipu_rc_code,
    --                                        cur_all_risks_rec.ipu_eff_wef
    --                                       );

    --                  --v_group_si := v_group_si * v_exhange_rate;
    --                  IF NVL (v_group_si, 0) = 0
    --                  THEN
    --                     v_group_si := 1;
    --                  END IF;

    --                  FOR cur_related_risks_rec IN
    --                     cur_related_risks (cur_all_risks_rec.ipu_relr_code,
    --                                        cur_all_risks_rec.ipu_eff_wef,
    --                                        cur_all_risks_rec.ipu_id
    --                                       )
    --                  LOOP
    --                     BEGIN
    --                        UPDATE gin_insured_property_unds
    --                           SET ipu_reinsured = 1,
    --                               ipu_grp_top_loc =
    --                                  ROUND (  NVL (v_group_si, 0)
    --                                         * cur_related_risks_rec.pol_cur_rate,
    --                                         v_rnd
    --                                        ),
    --                               ipu_grp_si_risk_pct =
    --                                  ROUND
    --                                     (  (  NVL
    --                                              (cur_related_risks_rec.ipu_reinsure_amt,
    --                                               0
    --                                              )
    --                                         * cur_related_risks_rec.pol_cur_rate
    --                                        )
    --                                      / DECODE (NVL (v_group_si, 0),
    --                                                0, 100,
    --                                                v_group_si
    --                                               )
    --                                      * 100,
    --                                      4
    --                                     )                                    --??
    --                         WHERE ipu_code = cur_related_risks_rec.ipu_code;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Unable to update related risks RI details, ...'
    --                              );
    --                     END;
    --                  END LOOP;

    --                  v_grp_pct := 0;
    --                  v_grp_pct :=
    --                     ROUND (  (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               * v_exhange_rate
    --                              )
    --                            / v_group_si
    --                            * 100,
    --                            4
    --                           );
    --                  v_group_si := ROUND (v_group_si / v_exhange_rate);
    --
    --
    --
    --                  --v_retention_amt :=NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0) - (NVL(v_facre_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)/100) - NVL(cur_all_risks_rec.IPU_FACRE_AMOUNT,0);
    --                  --v_grp_tot_ret   :=v_retention_amt;
    --                  --v_retention_amt := v_retention_amt * v_grp_pct / 100;
    --                  v_reinsure_amt := v_group_si;
    --               ELSE
    --                  v_grp_pct := 100;
    --                  NULL;
    --                  ----Currency convertions to be considered here
    ----                  if nvl(v_rein_cur_param,'N')='Y' then
    ----                  v_reinsure_amt :=
    ----                                  ROUND(NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)/v_exhange_rate,v_rnd);
    ----                  else
    --                  v_reinsure_amt :=
    --                                  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0);
    ----                  end if;
    --               --v_retention_amt :=NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0) - (NVL(v_facre_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)/100) - NVL(cur_all_risks_rec.IPU_FACRE_AMOUNT,0);
    --               --v_grp_tot_ret :=0;
    --               END IF;

    --               DBMS_OUTPUT.put_line ('1v_retention_amt=' || v_retention_amt);

    --               IF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) != 0
    --               THEN                                                     --????
    --                  v_retention_amt :=
    --                     ROUND (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                            - (  NVL (v_facre_rate, 0)
    --                               * NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               / 100
    --                              )
    --                            - NVL (v_facre_amt, 0)
    --                            - get_risk_ri_pool (cur_all_risks_rec.ipu_code),
    --                            v_rnd
    --                           );
    ----                  RAISE_ERROR(v_retention_amt) ;
    ----                  if nvl(v_rein_cur_param,'N')='Y' then
    ----                  v_retention_amt :=
    ----                                  ROUND(v_retention_amt/v_exhange_rate,v_rnd);
    ----
    ----                  end if;
    --
    --                  v_retention_amt :=
    --                                   v_retention_amt * NVL (v_grp_pct, 100)
    --                                   / 100;
    --               ELSE
    --                  v_retention_amt := 0;
    --               END IF;

    --               DBMS_OUTPUT.put_line ('2v_retention_amt=' || v_retention_amt);

    --               IF cur_pol_rec.pol_policy_status IN ('NB', 'RN', 'SP')
    --               THEN
    --                  v_eq_prem :=
    --                       cur_all_risks_rec.ipu_earthqke_prem_diff
    --                     * SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0));
    --               ELSE
    --                  v_eq_prem := 0;
    --               END IF;
    --
    --
    --
    --
    --
    --

    --
    --                              --   RAISE_ERROR('JOYCE WAS HERE ===='||v_prrd_code||'   ');
    --               IF v_prrd_code IS NULL
    --               THEN
    --                  BEGIN
    --                     SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_prrd_code_seq.NEXTVAL
    --                                      )
    --                       INTO v_prrd_code
    --                       FROM DUAL;

    --                     v_cede_pool := 'Y';

    --                     INSERT INTO gin_policy_risk_ri_dtls
    --                                 (prrd_code, prrd_ipu_code, prrd_idx,
    --                                  prrd_tran_no, prrd_wef,
    --                                  prrd_wet, prrd_current,
    --                                  prrd_comp_retention, prrd_avail_fulc_bal,
    --                                  prrd_gross_comp_retention,
    --                                  prrd_allowed_grs_comp_ret,
    --                                  prrd_facre_amount,
    --                                  prrd_com_retention_rate,
    --                                  prrd_grp_si_risk_pct, prrd_grp_top_loc,
    --                                  prrd_grp_comp_gross_ret,
    --                                  prrd_grp_comp_net_ret,
    --                                  prrd_ri_prem,
    --                                  prrd_earthquake_prem,
    --                                  prrd_ri_net_less_eq_prem,
    --                                  prrd_prev_prrd_code, prrd_cede_pool
    --                                 )
    --                          VALUES (v_prrd_code, cur_all_risks_rec.ipu_code, 1,
    --                                  v_tran_no, cur_all_risks_rec.ipu_wef,
    --                                  cur_all_risks_rec.ipu_wet, 'Y',
    --                                  ROUND (v_retention_amt, v_rnd), 0,
    --                                  ROUND (v_retention_amt, v_rnd),
    --                                  ROUND (v_retention_amt, v_rnd),
    --                                  0,
    --                                  ROUND
    --                                     (  v_retention_amt
    --                                      / DECODE
    --                                           (NVL
    --                                               (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                0
    --                                               ),
    --                                            0, 1,
    --                                            cur_all_risks_rec.ipu_reinsure_amt
    --                                           )
    --                                      * 100,
    --                                      4
    --                                     ),
    --                                  v_grp_pct, NVL (v_group_si, 0),
    --                                  v_grp_tot_ret,
    --                                  0,
    --                                  ROUND (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                         v_rnd
    --                                        ),
    --                                  v_eq_prem,
    ----ROUND(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                                    ROUND
    --                                       (NVL
    --                                           (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - NVL (v_eq_prem, 0),
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))) ,
    --                                  v_prrd_code, v_cede_pool
    --                                 );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Unable to create risk RI details, ...');
    --                  END;

    --                  -- v_cnt :=   (NVL(v_pol_fc_rate,0)/100 * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) + nvl(v_pol_fc_amt,0);
    --                  BEGIN
    --                     UPDATE gin_insured_property_unds
    --                        SET ipu_current_prrd_code = v_prrd_code
    --                      WHERE ipu_code = cur_all_risks_rec.ipu_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Unable to update risks current RI details code, ...'
    --                           );
    --                  END;
    --               ELSE
    --                  BEGIN
    --
    --
    --
    --                                              --PRRD_AVAIL_FULC_BAL =ROUND(DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,v_facre_rate * (DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) /100))),
    --                                              --PRRD_EXCESS_PCT        =ROUND(v_facre_rate,4),
    --                             -- raise_error('update v_retention_amt='||v_retention_amt);
    --                     --raise_error('cur_all_risks_rec.ipu_reinsure_amt='||cur_all_risks_rec.ipu_reinsure_amt||'v_retention_amt='||v_retention_amt);
    --                     UPDATE    gin_policy_risk_ri_dtls
    --                           SET prrd_comp_retention = v_retention_amt,
    --                               prrd_gross_comp_retention =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_allowed_grs_comp_ret =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_com_retention_rate =
    --                                  ROUND
    --                                     (DECODE
    --                                         (NVL
    --                                             (cur_all_risks_rec.ipu_reinsure_amt,
    --                                              0
    --                                             ),
    --                                          0, 100,
    --                                            v_retention_amt
    --                                          * NVL
    --                                               (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                0
    --                                               )
    --                                          / 100
    --                                         ),
    --                                      4
    --                                     ),             /***miti changed here ***/
    --                               prrd_grp_top_loc =
    --                                            ROUND (NVL (v_group_si, 0), v_rnd),
    --                               prrd_grp_si_risk_pct = ROUND (v_grp_pct, 4),
    --                               prrd_grp_comp_gross_ret =
    --                                                  ROUND (v_grp_tot_ret, v_rnd),
    --                               prrd_ri_prem =
    --                                  ROUND (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                         v_rnd
    --                                        ),
    --                               prrd_comp_net_rate =
    --                                  ROUND
    --                                     (DECODE
    --                                         (NVL
    --                                             (cur_all_risks_rec.ipu_reinsure_amt,
    --                                              0
    --                                             ),
    --                                          0, 100,
    --                                            v_retention_amt
    --                                          * NVL
    --                                               (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                0
    --                                               )
    --                                          / 100
    --                                         ),
    --                                      4
    --                                     ) ,             /***miti changed here ***/
    --                               prrd_earthquake_prem = v_eq_prem,
    ----ROUND(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                               prrd_ri_net_less_eq_prem =
    --                                    (ROUND
    --                                       (NVL
    --                                           (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - NVL (v_eq_prem, 0))
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)))
    --                     WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                           AND prrd_code = v_prrd_code
    --                           AND prrd_tran_no = v_tran_no
    --                     RETURNING prrd_cede_pool
    --                          INTO v_cede_pool;
    ----                  EXCEPTION
    ----                     WHEN OTHERS
    ----                     THEN
    ----                        raise_error
    ----                                 ('Unable to update the risk RI details, ...');
    --                  END;
    --               END IF;

    --               DBMS_OUTPUT.put_line ('3v_retention_amt=' || v_retention_amt);
    --               v_arrngmt_defined := 0;

    --               IF v_cede_pool = 'Y'
    --               THEN
    --                  BEGIN
    --                     pop_pool_risk (v_batch_no,
    --                                    cur_all_risks_rec.ipu_code,
    --                                    v_tran_no,
    --                                    v_prrd_code
    --                                   );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error populating pool amount...');
    --                  END;

    --                  v_arrngmt_defined := 2;
    --               END IF;

    --               --raise_error('===here==='||v_cede_pool);
    --               IF     NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --                  AND NVL (v_pol_fc_amt, 0) != 0
    --               THEN
    --                  raise_error
    --                     ('An amount facre setup has been provided when risks exist with no SI exist. Change all facre setups to percentage.'
    --                     );
    --               ELSIF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --               THEN
    --                  v_rsk_fc_rate := NVL (v_pol_fc_rate, 0);
    --               ELSE
    --                  v_rsk_fc_rate :=
    --                       (  (  NVL (v_pol_fc_amt, 0)
    --                           / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                          )
    --                        * 100
    --                       )
    --                     + NVL (v_pol_fc_rate, 0);
    --               END IF;

    --               --v_rsk_fc_rate := ((nvl(v_pol_fc_amt,0)/NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0))*100) + NVL(v_pol_fc_rate,0);
    --               DBMS_OUTPUT.put_line (   NVL (v_pol_fc_rate, 0)
    --                                     || '='
    --                                     || NVL (v_pol_fc_amt, 0)
    --                                     || '='
    --                                     || v_cnt
    --                                     || '='
    --                                     || NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           )
    --                                    );

    ----||'FCAMOUNT='||(NVL(v_pol_fc_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) + nvl(v_pol_fc_amt,0));
    --               IF NVL (v_rsk_fc_rate, 0) > 0
    --               THEN
    --                  v_rsk_fc_amnt :=
    --                     ROUND (  v_rsk_fc_rate
    --                            * NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                            / 100,
    --                            v_rnd
    --                           );

    --                  IF v_rsk_fc_rate > 100
    --                  THEN
    --                     raise_error
    --                        ('The preset facultative placement percentage/amount is more than the risk SI'
    --                        );
    --                  END IF;

    --                  v_facre_excess :=
    --                                  NVL (v_facre_amt, 0)
    --                                  + NVL (v_rsk_fc_amnt, 0);

    --                  UPDATE gin_policy_risk_ri_dtls
    --                     SET prrd_avail_fulc_bal = v_rsk_fc_amnt,
    --                         prrd_excess_pct = v_rsk_fc_rate
    --                   WHERE prrd_code = v_prrd_code;

    --                  FOR cur_pol_facre_rec IN cur_pol_facre
    --                  LOOP
    --                     insert_facre (v_batch_no,
    --                                   cur_all_risks_rec.ipu_code,
    --                                   cur_pol_facre_rec.pfcs_agn_code,
    --                                   cur_pol_facre_rec.pfcs_agn_sht_desc,
    --                                   cur_pol_facre_rec.pfcs_amt_or_rate,
    --                                   cur_pol_facre_rec.pfcs_rate,
    --                                   v_user,
    --                                   'A',
    --                                   NULL,
    --                                   'N',
    --                                   cur_pol_facre_rec.pfcs_accepted_date,
    --                                   cur_pol_facre_rec.pfcs_accepted,
    --                                   cur_pol_facre_rec.pfcs_comm_rate,
    --                                   NULL,
    --                                   NULL,
    --                                   NULL,
    --                                   NULL
    --                                  );
    --                  END LOOP;
    --               END IF;

    --               v_arrngmt_defined := 0;
    --               v_arrangement := NULL;
    --               v_arrangement_type := NULL;
    --               v_dummy := 0;

    --               SELECT COUNT (DISTINCT ('x'))
    --                 INTO v_dummy
    --                 FROM gin_treaty_arrangements, gin_class_treaties
    --                WHERE ta_code = clt_ta_code
    --                  AND clt_scl_code = cur_all_risks_rec.ipu_sec_scl_code
    --                  AND (cur_all_risks_rec.ipu_eff_wef BETWEEN clt_wef AND clt_wet
    --                      );

    --               --raise_error('dummy-'||v_dummy);
    --               IF v_dummy > 1
    --               THEN
    --                  --raise_error('The sub class '||cur_all_risks_rec.ipu_sec_scl_code||' has been defined in more than one treaty arrangements');
    --                  raise_error
    --                     (   'The sub class '
    --                      || cur_all_risks_rec.ipu_sec_scl_code
    --                      || ' has been defined in more than one treaty arrangements'
    --                     );
    --               END IF;

    --                --FOR cur_arrangments_rec IN cur_arrangments(cur_all_risks_rec.ipu_sec_scl_code,cur_all_risks_rec.IPU_UW_YR,cur_all_risks_rec.ipu_eff_wef) LOOP
    --               --raise_error(cur_all_risks_rec.ipu_sec_scl_code||'='||cur_all_risks_rec.IPU_UW_YR||';'||cur_pol_rec.pol_cur_code);
    --               FOR cur_arrangments_rec IN
    --                  cur_arrangments (cur_all_risks_rec.ipu_sec_scl_code,
    --                                   cur_all_risks_rec.ipu_uw_yr,
    --                                   cur_pol_rec.pol_cur_code
    --                                  )
    --               LOOP
    --                  IF NVL (cur_arrangments_rec.as_status, 'N') != 'A'
    --                  THEN
    --                     raise_error
    --                        (   'The RI arrangement defined for the sub class code '
    --                         || cur_all_risks_rec.ipu_sec_scl_code
    --                         || ' has not been authorised. '
    --                         || cur_arrangments_rec.as_status
    --                         || ';'
    --                         || cur_pol_rec.pol_cur_code
    --                         || ';'
    --                         || cur_all_risks_rec.ipu_uw_yr
    --                         || ';'
    --                         || cur_all_risks_rec.ipu_sec_scl_code
    --                        );
    --                  END IF;

    --                  --DBMS_OUTPUT.PUT_LINE('3 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
    --                  v_arrangement := cur_arrangments_rec.ta_code;
    --                  -- get the underwriting year to refere to for the treaty
    --                  v_arrngmt_defined := 1;
    --                  v_trt_uwyr := NULL;
    --                  v_arrangement_type := cur_arrangments_rec.ta_type;

    --                  IF cur_arrangments_rec.ta_type IN ('U', 'X')
    --                  THEN
    --                     --v_trt_uwyr := NVL(cur_all_risks_rec.IPU_INCEPTION_UWYR,v_pol_incept_year);
    --                     v_trt_uwyr := cur_all_risks_rec.ipu_uw_yr;
    --                  /** commented on 20/03/2002by Njuki to take care of clean cut and uw yr treaties
    --                  --v_trt_uwyr := v_pol_incept_year;
    --                  the bug may be check if the risk is changing its uwyr if the arrangement is a clean cut it should not change if the arrangement is unwr year ***/
    --                  ELSE
    --                     --v_trt_uwyr :=TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'));
    --                     --remmed for same reason above
    --                     v_trt_uwyr := cur_all_risks_rec.ipu_uw_yr;
    --                  END IF;

    --                              --get retention limit
    --                  --DBMS_OUTPUT.PUT_LINE('1 cur_all_risks_rec.ipu_Rc_code='||cur_all_risks_rec.ipu_Rc_code||'v_load_status='||v_load_status);
    --                  v_dc_pol_loaded := NVL (v_load_status, 'N');

    --                  IF cur_pol_rec.pol_policy_status = 'DC'
    --                  THEN
    --                     BEGIN
    --                        SELECT NVL (pol_loaded, 'N')
    --                          INTO v_dc_pol_loaded
    --                          FROM gin_policies, gin_insured_property_unds
    --                         WHERE ipu_code = cur_all_risks_rec.ipu_prev_ipu_code
    --                           AND pol_batch_no = ipu_pol_batch_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Error determining previous endorsements status..'
    --                              );
    --                     END;
    --                  END IF;

    --                  IF    cur_pol_rec.pol_policy_status != 'DC'
    --                     OR (    cur_pol_rec.pol_policy_status = 'DC'
    --                         AND NVL (v_load_status, 'N') = 'Y'
    --                        )
    --                  THEN
    --                     v_retention_amt := 0;
    --                     v_retention_type := NULL;

    --                                        --IF NVL(cur_all_risks_rec.IPU_OVERRIDE_RI_RETENTION,0) != 0 THEN
    --                                        --    v_retention_amt := NVL(cur_all_risks_rec.IPU_OVERRIDE_RI_RETENTION,0);
    --                                        --ELSE
    --                     --          raise_error('here='||cur_all_risks_rec.ipu_Rc_code||';'||cur_all_risks_rec.ipu_sec_scl_code||';'||cur_arrangments_rec.ta_code||';'||v_trt_uwyr);
    --                     IF cur_all_risks_rec.ipu_rc_code IS NOT NULL
    --                     THEN
    --                        BEGIN
    --                           --raise_Error(cur_all_risks_rec.ipu_sec_scl_code||'='||cur_arrangments_rec.ta_code
    --                           --||'='||v_trt_uwyr||'='||cur_all_risks_rec.ipu_rc_code);
    --                           SELECT tcc_retention_limit, tcc_retention_type,
    --                                  as_code, tcc_fac_oblig_limit,
    --                                  ta_cur_code
    --                             INTO v_retention_amt, v_retention_type,
    --                                  v_as_code, v_fac_oblig_limit,
    --                                  v_trt_cur_code
    --                             FROM gin_trt_class_categories,
    --                                  gin_arrangement_setups,
    --                                  gin_treaty_arrangements
    --                            WHERE as_ta_code = ta_code
    --                              AND tcc_as_code = as_code
    --                              AND tcc_scl_code =
    --                                            cur_all_risks_rec.ipu_sec_scl_code
    --                              AND as_ta_code = cur_arrangments_rec.ta_code
    --                              AND as_uwyr = v_trt_uwyr
    --                              AND tcc_rc_code = cur_all_risks_rec.ipu_rc_code;

    --                           --DBMS_OUTPUT.PUT_LINE('2 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
    --                           IF v_retention_type = 'P'
    --                           THEN
    --                              SELECT DISTINCT   clt_retention_limit
    --                                              * v_retention_amt
    --                                              / 100,
    --                                              as_code, clt_fac_oblig_limit,
    --                                              ta_cur_code
    --                                         INTO v_retention_amt,
    --                                              v_as_code, v_fac_oblig_limit,
    --                                              v_trt_cur_code
    --                                         FROM gin_class_treaties,
    --                                              gin_arrangement_setups,
    --                                              gin_treaty_arrangements
    --                                        WHERE as_ta_code = ta_code
    --                                          AND clt_as_code = as_code
    --                                          AND clt_scl_code =
    --                                                 cur_all_risks_rec.ipu_sec_scl_code
    --                                          AND as_ta_code =
    --                                                   cur_arrangments_rec.ta_code
    --                                          AND as_uwyr = v_trt_uwyr
    --                                          AND (cur_all_risks_rec.ipu_eff_wef
    --                                                  BETWEEN clt_wef
    --                                                      AND clt_wet
    --                                              );
    --                           --    message('3 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
    --                           END IF;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              SELECT DISTINCT clt_retention_limit, as_code,
    --                                              clt_fac_oblig_limit,
    --                                              ta_cur_code
    --                                         INTO v_retention_amt, v_as_code,
    --                                              v_fac_oblig_limit,
    --                                              v_trt_cur_code
    --                                         FROM gin_class_treaties,
    --                                              gin_arrangement_setups,
    --                                              gin_treaty_arrangements
    --                                        WHERE as_ta_code = ta_code
    --                                          AND clt_as_code = as_code
    --                                          AND clt_scl_code =
    --                                                 cur_all_risks_rec.ipu_sec_scl_code
    --                                          AND as_ta_code =
    --                                                   cur_arrangments_rec.ta_code
    --                                          AND as_uwyr = v_trt_uwyr;
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Unable to retrieve risk class retention amount'
    --                                 );
    --                        END;
    --                     ELSE
    --                        v_retention_amt := 0;

    --                        --raise_Error ('xcx1v_retention_amt='||v_retention_amt||'scl='||cur_all_risks_rec.ipu_sec_scl_code||'tacode='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'wef='||to_char(cur_all_risks_rec.ipu_eff_wef,'DD/MM/YYYY'));
    --                        BEGIN
    --                           SELECT DISTINCT clt_retention_limit, as_code,
    --                                           clt_fac_oblig_limit, ta_cur_code
    --                                      INTO v_retention_amt, v_as_code,
    --                                           v_fac_oblig_limit, v_trt_cur_code
    --                                      FROM gin_class_treaties,
    --                                           gin_arrangement_setups,
    --                                           gin_treaty_arrangements
    --                                     WHERE as_ta_code = ta_code
    --                                       AND clt_as_code = as_code
    --                                       AND clt_scl_code =
    --                                              cur_all_risks_rec.ipu_sec_scl_code
    --                                       AND as_ta_code =
    --                                                   cur_arrangments_rec.ta_code
    --                                       AND as_uwyr = v_trt_uwyr;
    --                        --AND (cur_all_risks_rec.ipu_eff_wef BETWEEN CLT_WEF AND NVL(CLT_WET,TO_dATE('31/12/'||AS_UWYR,'DD/MM/RR')));
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              v_retention_amt :=
    --                                   NVL (cur_all_risks_rec.ipu_reinsure_amt,
    --                                        0)
    --                                 - NVL (v_facre_amt, 0)
    --                                 - NVL (v_facre_excess, 0)
    --                                 + get_risk_ri_pool (v_prrd_code);
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Unable to retrieve the arrangement retention limit'
    --                                 );
    --                        END;

    --                        -- RAISE_ERROR(cur_arrangments_rec.ta_code||';'||v_trt_uwyr||';'||cur_all_risks_rec.ipu_eff_wef||';'||cur_all_risks_rec.ipu_sec_scl_code);
    --                        IF NVL (v_retention_amt, 0) = 0
    --                        THEN
    --                           raise_error
    --                              (   'No Gross Retention or Max XOL deductible defined for the sub class code '
    --                               || cur_all_risks_rec.ipu_sec_scl_code
    --                               || ';'
    --                               || v_trt_uwyr
    --                              );
    --                        END IF;
    --                     END IF;

    --                     DBMS_OUTPUT.put_line (   '4v_retention_amt='
    --                                           || v_retention_amt
    --                                           || ' v_fac_oblig_limit='
    --                                           || v_fac_oblig_limit
    --                                          );

    --                     --END IF;
    --                   --  RAISE_ERROR(v_bcur_code ||' ; '|| v_trt_cur_code||' ; '||cur_pol_rec.pol_cur_code);
    --
    --                     IF v_trt_cur_code != cur_pol_rec.pol_cur_code
    --                     THEN
    --                        IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_pol_rec.pol_exch_rate_fixed,'N') = 'Y')
    --                        THEN
    --                           --raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
    --                           v_retention_amt :=
    --                              ROUND (v_retention_amt
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                           v_retention_amt := ROUND (v_retention_amt, v_rnd);
    --                           v_fac_oblig_limit :=
    --                              ROUND (  v_fac_oblig_limit
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                           --raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
    --                        -- raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
    --                        ELSE
    --                           v_trt_cur_rate :=
    --                              get_exchange_rate (v_trt_cur_code, v_bcur_code);
    --                           v_retention_amt :=
    --                              ROUND (  v_retention_amt
    --                                     * v_trt_cur_rate
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                           v_fac_oblig_limit :=
    --                              ROUND (  v_fac_oblig_limit
    --                                     * v_trt_cur_rate
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                        END IF;
    --                     ELSE
    --                        v_retention_amt := ROUND (v_retention_amt, v_rnd);
    --                     END IF;

    --                     DBMS_OUTPUT.put_line
    --                                        (   '5v_retention_amt='
    --                                         || v_retention_amt
    --                                         || 'REINAMT='
    --                                         || cur_all_risks_rec.ipu_reinsure_amt
    --                                         || 'FACRE='
    --                                         || v_facre_amt
    --                                         || 'EXCESS='
    --                                         || v_facre_excess
    --                                         || 'v_grp_pct='
    --                                         || v_grp_pct
    --                                         || 'POOL='
    --                                         || get_risk_ri_pool (v_prrd_code)
    --                                        );

    --               -- END IF;
    ----       RAISE_ERROR(v_retention_amt);
    --
    ----****************
    --                     IF (v_retention_amt * NVL (v_grp_pct, 100) / 100) >
    --                             NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                           - NVL (v_facre_amt, 0)
    --                           - NVL (v_facre_excess, 0)
    --                           - NVL (get_risk_ri_pool (v_prrd_code), 0)
    --                     THEN
    --                        v_retention_amt :=
    --                             NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                           - NVL (v_facre_amt, 0)
    --                           - NVL (v_facre_excess, 0)
    --                           - NVL (get_risk_ri_pool (v_prrd_code), 0);
    --                     -- RAISE_ERROR('ooo='||v_retention_amt||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_facre_amt||';'||v_facre_excess||';'||get_risk_ri_pool(v_prrd_code));
    --                     ELSE
    --                        v_retention_amt :=
    --                               (v_retention_amt * NVL (v_grp_pct, 100) / 100
    --                               );
    --                     -- - NVL(get_risk_ri_pool(v_prrd_code),0); --+NVL(get_risk_ri_pool(v_prrd_code),0);
    --                     END IF;

    --                     DBMS_OUTPUT.put_line (   '6v_retention_amt='
    --                                           || v_retention_amt
    --                                          );
    --                                         -- FROM HERE
    --                            if nvl(v_rein_cur_param,'N')='Y' then
    --                                  v_reinsure_amt :=
    --                                               ROUND(NVL (v_reinsure_amt, 0)/ cur_pol_rec.pol_cur_rate,v_rnd);
    --                            else
    --                                 v_retention_amt :=v_retention_amt;
    --
    --                           END IF;
    ----RAISE_ERROR('v_reinsure_amt'||v_reinsure_amt);
    --                     BEGIN
    --                        --DBMS_OUTPUT.PUT_LINE('7XX v_retention_amt='||v_retention_amt);
    --                        UPDATE gin_policy_risk_ri_dtls
    --                           SET prrd_comp_retention =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_gross_comp_retention =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_allowed_grs_comp_ret =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_com_retention_rate =
    --                                  DECODE
    --                                     (ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         ),
    --                                      0, 100,
    --                                      ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         )
    --                                     ),
    --                               prrd_comp_net_rate =
    --                                  DECODE
    --                                     (ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         ),
    --                                      0, 100,
    --                                      ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         )
    --                                     ),
    --                               prrd_net_prem =
    --                                  ROUND
    --                                     (  (DECODE
    --                                            (NVL
    --                                                (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                 0
    --                                                ),
    --                                             0, 100,
    --                                               v_retention_amt
    --                                             / NVL
    --                                                  (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                   0
    --                                                  )
    --                                             * 100
    --                                            )
    --                                        )
    --                                      * NVL (prrd_ri_prem, 0)
    --                                      / 100
    --                                     ),
    --                               prrd_as_uwyr = v_trt_uwyr,
    --                               prrd_as_code = v_as_code,
    --                               prrd_facoblig_limit = v_fac_oblig_limit,
    --                               prrd_facoblig_alloc_chk =
    --                                  DECODE (NVL (v_fac_oblig_limit, 0),
    --                                          0, 'N',
    --                                          'Y'
    --                                         )
    --                         /* DECODE (NVL (prrd_facoblig_alloc_chk, 'N'),
    --                                  'Y', 0,
    --                                  v_fac_oblig_limit
    --                                 )*/
    --                        WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                           AND prrd_code = v_prrd_code
    --                           AND prrd_tran_no = v_tran_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                                 ('Unable to update the risk retention limit');
    --                     END;
    --                  --raise_error('v_retention_amt='||v_retention_amt||';'||cur_all_risks_rec.ipu_reinsure_amt||'v_prrd_code='||v_prrd_code);
    --                  ELSE
    --                     BEGIN
    --                        --v_pol_status
    --                        v_old_grs_ret_rate := 0;
    --                        v_net_ret_rate := 0;

    --                        SELECT prrd_com_retention_rate,
    --                               prrd_com_retention_rate, prrd_as_uwyr,
    --                               prrd_as_code, prrd_facoblig_excess
    --                          INTO v_old_grs_ret_rate,
    --                               v_net_ret_rate, v_as_uwyr,
    --                               v_as_code, v_fac_oblig_limit
    --                          FROM gin_policy_risk_ri_dtls
    --                         WHERE prrd_code =
    --                                  (SELECT prrd_code
    --                                     FROM gin_policy_risk_ri_dtls
    --                                    WHERE prrd_ipu_code =
    --                                             cur_all_risks_rec.ipu_prev_ipu_code
    --                                      AND prrd_current = 'Y');
    --                     EXCEPTION
    --                        WHEN NO_DATA_FOUND
    --                        THEN
    --                           v_old_grs_ret_rate := 0;
    --                           v_net_ret_rate := 0;
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Unable to retrieve the prevoius cession rates'
    --                              );
    --                     END;

    --                     BEGIN
    --                        UPDATE gin_policy_risk_ri_dtls
    --                           SET prrd_comp_retention =
    --                                  ROUND
    --                                     (  NVL (v_net_ret_rate, 0)
    --                                      / 100
    --                                      * NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           ),
    --                                      v_rnd
    --                                     ),
    --                               prrd_gross_comp_retention =
    --                                  ROUND
    --                                     (  NVL (v_old_grs_ret_rate, 0)
    --                                      / 100
    --                                      * NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           ),
    --                                      v_rnd
    --                                     ),
    --                               prrd_allowed_grs_comp_ret =
    --                                  ROUND
    --                                     (  NVL (v_old_grs_ret_rate, 0)
    --                                      / 100
    --                                      * NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           ),
    --                                      v_rnd
    --                                     ),
    --                               prrd_com_retention_rate =
    --                                                   NVL (v_old_grs_ret_rate, 0),
    --                               prrd_comp_net_rate = NVL (v_net_ret_rate, 0),
    --                               prrd_net_prem =
    --                                  ROUND (  NVL (v_net_ret_rate, 0)
    --                                         * NVL (prrd_ri_prem, 0)
    --                                         / 100
    --                                        ),
    --                               prrd_as_uwyr = v_as_uwyr,
    --                               prrd_as_code = v_as_code,
    --                               prrd_facoblig_limit = v_fac_oblig_limit,
    --                               prrd_facoblig_alloc_chk =
    --                                  DECODE (NVL (v_fac_oblig_limit, 0),
    --                                          0, 'N',
    --                                          'Y'
    --                                         )
    --                         /*DECODE (NVL (prrd_facoblig_alloc_chk, 'N'),
    --                                 'Y', 0,
    --                                 v_fac_oblig_limit
    --                                )*/
    --                        WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                           AND prrd_code = v_prrd_code
    --                           AND prrd_tran_no = v_tran_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('3322Unable to update the risk retention limit'
    --                              );
    --                     END;
    --                  END IF;

    --                  DBMS_OUTPUT.put_line ('7 v_retention_amt='
    --                                        || v_retention_amt
    --                                       );

    --                  IF     cur_arrangments_rec.ta_type != 'X'
    --                     AND (   cur_pol_rec.pol_policy_status != 'DC'
    --                          OR (    cur_pol_rec.pol_policy_status = 'DC'
    --                              AND NVL (v_load_status, 'N') = 'Y'
    --                             )
    --                         )
    --                  THEN
    --                     FOR cur_treaties_rec IN
    --                        cur_treaties (cur_all_risks_rec.ipu_sec_scl_code,
    --                                      cur_arrangments_rec.ta_code,
    --                                      v_trt_uwyr,
    --                                      cur_all_risks_rec.ipu_code
    --                                     )
    --                     LOOP
    --                        check_treaty_participation (cur_treaties_rec.rei_code);
    --                        v_arrngmt_defined := 2;

    --                        IF NVL (v_retention_amt, 0) = 0
    --                        THEN
    --                           v_retention_amt :=
    --                                NVL (cur_treaties_rec.clt_retention_limit, 0);
    --                        ---    raise_error('Error,Unable to compute retention limit...');
    --                        END IF;

    --                        BEGIN
    --                           SELECT ctl_code,
    --                                  DECODE (cur_pol_rec.pol_policy_type,
    --                                          'N', ctl_cede_rate,
    --                                          ctl_fi_cede_rate
    --                                         ),
    --                                  ctl_rate_type
    --                             INTO v_ctl_code,
    --                                  v_ctl_cede_rate,
    --                                  v_ctl_rate_type
    --                             FROM gin_class_treaty_limits
    --                            WHERE ctl_rei_code = cur_treaties_rec.rei_code
    --                              AND ctl_scl_code =
    --                                            cur_all_risks_rec.ipu_sec_scl_code
    --                              AND ctl_as_code = cur_treaties_rec.as_code;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              NULL;
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error while picking the classs treaty ri rates...'
    --                                 );
    --                        END;

    --                        -- insert treaty details for the risk
    --                        BEGIN
    --                           INSERT INTO gin_policy_rein_risk_details
    --                                       (ptotr_code,
    --                                        ptotr_risk_cur_code,
    --                                        ptotr_trt_cur_code,
    --                                        ptotr_risk_si_pcur,
    --                                        ptotr_risk_prem_pcur,
    --                                        ptotr_rei_code,
    --                                        ptotr_trt_code,
    --                                        ptotr_trt_sht_desc,
    --                                        ptotr_clt_scl_code,
    --                                        ptotr_rate,
    --                                        ptotr_rate_type,
    --                                        ptotr_property_id,
    --                                        ptotr_uwyr,
    --                                        ptotr_ipu_code,
    --                                        ptotr_pol_batch_no,
    --                                        ptotr_pol_policy_no,
    --                                        ptotr_pol_ren_endos_no,
    --                                        ptotr_risk_cur_symbol,
    --                                        ptotr_trt_cur_symbol,
    --                                        ptotr_sect_code,
    --                                        ptotr_ta_code,
    --                                        ptotr_as_code,
    --                                        ptotr_trs_code,
    --                                        ptotr_trs_sht_desc,
    --                                        ptotr_ggt_tran_no, ptotr_tran_type,
    --                                        ptotr_prev_cession_rate,
    --                                        ptotr_prrd_code,
    --                                        ptotr_earthqke_comm_rate,
    --                                        ptotr_allowed_rate,
    --                                        ptotr_ctl_code
    --                                       )
    --                                VALUES (ptotr_code_seq.NEXTVAL,
    --                                        cur_pol_rec.pol_cur_code,
    --                                        cur_treaties_rec.rei_cur_code,
    --                                        v_reinsure_amt,
    --                                        /*cur_all_risks_rec.IPU_REINSURE_AMT*/
    --                                        cur_all_risks_rec.ipu_endos_diff_amt,
    --                                        cur_treaties_rec.rei_code,
    --                                        cur_treaties_rec.rei_trt_code,
    --                                        cur_treaties_rec.rei_trt_sht_desc,
    --                                        cur_all_risks_rec.ipu_sec_scl_code,
    --                                        --NVL (v_ctl_cede_rate, cur_treaties_rec.rei_cede_rate ),
    --                                        NVL
    --                                           (v_ctl_cede_rate,
    --                                            DECODE
    --                                               (cur_pol_rec.pol_policy_type,
    --                                                'N', cur_treaties_rec.rei_cede_rate,
    --                                                cur_treaties_rec.rei_fi_cede_rate
    --                                               )
    --                                           ),
    --                                        NVL (v_ctl_rate_type,
    --                                             cur_treaties_rec.rei_rate_type
    --                                            ),
    --                                        cur_all_risks_rec.ipu_property_id,
    --                                        v_trt_uwyr,
    --                                        cur_all_risks_rec.ipu_code,
    --                                        cur_all_risks_rec.ipu_pol_batch_no,
    --                                        cur_all_risks_rec.ipu_pol_policy_no,
    --                                        cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                        cur_pol_rec.pol_cur_symbol,
    --                                        cur_treaties_rec.rei_cur_symbol,
    --                                        cur_all_risks_rec.ipu_sec_sect_code,
    --                                        cur_treaties_rec.as_ta_code,
    --                                        cur_treaties_rec.as_code,
    --                                        cur_treaties_rec.rei_trs_code,
    --                                        cur_treaties_rec.rei_trs_sht_desc,
    --                                        v_tran_no, v_tran_type,
    --                                        0,
    --                                        v_prrd_code,
    --                                        cur_treaties_rec.rei_earthqke_comm_rate,
    --                                        --cur_treaties_rec.rei_cede_rate,
    --                                        DECODE
    --                                            (cur_pol_rec.pol_policy_type,
    --                                             'N', cur_treaties_rec.rei_cede_rate,
    --                                             cur_treaties_rec.rei_fi_cede_rate
    --                                            ),
    --                                        v_ctl_code
    --                                       );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error in populate_treaty_details:- Unable to insert new treaty details....'
    --                                 );
    --                        END;

    --                        --insert participants
    --                        FOR cur_participant_rec IN
    --                           cur_participant (cur_treaties_rec.rei_code)
    --                        LOOP
    --                           BEGIN
    --                              INSERT INTO gin_participations
    --                                          (part_code,
    --                                           part_cede_rate,
    --                                           part_trt_code,
    --                                           part_trt_sht_desc,
    --                                           part_agnt_agent_code,
    --                                           part_agnt_sht_desc,
    --                                           part_ptotr_code,
    --                                           part_rei_code,
    --                                           part_pol_cur_code,
    --                                           part_pol_cur_symbol,
    --                                           part_uwyr,
    --                                           part_pol_batch_no,
    --                                           part_pol_policy_no,
    --                                           part_pol_ren_endos_no,
    --                                           part_ipu_code,
    --                                           part_ta_code,
    --                                           part_as_code,
    --                                           part_fiscal_year,
    --                                           part_acc_posted,
    --                                           part_trs_code,
    --                                           part_trs_sht_desc,
    --                                           part_scl_code,
    --                                           part_ggt_tran_no, part_tran_type,
    --                                           part_prrd_code,
    --                                           part_trpa_code
    --                                          )
    --                                   VALUES (gin_part_code_seq.NEXTVAL,
    --                                           cur_participant_rec.trpa_comp_rate,
    --                                           cur_treaties_rec.rei_trt_code,
    --                                           cur_treaties_rec.rei_trt_sht_desc,
    --                                           cur_participant_rec.trpa_agnt_agent_code,
    --                                           cur_participant_rec.trpa_agnt_sht_desc,
    --                                           ptotr_code_seq.CURRVAL,
    --                                           cur_treaties_rec.rei_code,
    --                                           cur_pol_rec.pol_cur_code,
    --                                           cur_pol_rec.pol_cur_symbol,
    --                                           v_trt_uwyr,
    --                                           cur_all_risks_rec.ipu_pol_batch_no,
    --                                           cur_all_risks_rec.ipu_pol_policy_no,
    --                                           cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                           cur_all_risks_rec.ipu_code,
    --                                           cur_treaties_rec.as_ta_code,
    --                                           cur_treaties_rec.as_code,
    --                                           TO_NUMBER (TO_CHAR (SYSDATE,
    --                                                               'YYYY')
    --                                                     ),
    --                                           'R',
    --                                           cur_treaties_rec.rei_trs_code,
    --                                           cur_treaties_rec.rei_trs_sht_desc,
    --                                           cur_all_risks_rec.ipu_sec_scl_code,
    --                                           v_tran_no, v_tran_type,
    --                                           v_prrd_code,
    --                                           cur_participant_rec.trpa_code
    --                                          );
    --                           EXCEPTION
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_error
    --                                    ('Error in populate_treaty_details:- Unable to insert treaty participants details....'
    --                                    );
    --                           END;
    --                        END LOOP;                               --participants
    --                     END LOOP;                   --cur_treaties_rec main risks
    --                  END IF;
    --               END LOOP;                                 --cur_arrangments_rec

    --               v_grp_flag := FALSE;

    ----raise_error('3322Unable v_retention_amt='||v_retention_amt);
    --        --DBMS_OUTPUT.PUT_LINE('v_arrngmt_defined='||v_arrngmt_defined);
    --               IF     v_arrngmt_defined = 0
    --                  AND NVL (v_reinsure_wot_ri_prog, 'N') = 'N'
    --               THEN
    --                  v_msg :=
    --                        'No RI arrangement defined for the sub class code '
    --                     || cur_all_risks_rec.ipu_sec_scl_code
    --                     || ' Define the Arrangement first. ------ '
    --                     || v_arrngmt_defined;
    --                  raise_error (v_msg);
    --               ELSIF v_arrngmt_defined = 1 AND v_arrangement_type != 'X'
    --               THEN
    --                  --DBMS_OUTPUT.PUT_LINE('cur_all_risks_rec.ipu_eff_wef='||cur_all_risks_rec.ipu_eff_wef);
    --                  FOR cur_cnt_trt_rec IN
    --                     cur_cnt_trt (v_arrangement,
    --                                  v_trt_uwyr,
    --                                  cur_all_risks_rec.ipu_sec_scl_code,
    --                                  cur_all_risks_rec.ipu_eff_wef
    --                                 )
    --                  LOOP
    --                     IF     cur_cnt_trt_rec.cnt = 0
    --                        AND NVL (v_reinsure_wot_ri_prog, 'N') = 'N'
    --                     THEN
    --                        raise_error
    --                           (   'No RI treaties have been setup for the sub class code '
    --                            || cur_all_risks_rec.ipu_sec_scl_code
    --                            || ' UW year '
    --                            || v_trt_uwyr
    --                            || ' Define the treaties first. '
    --                           );
    --                     END IF;
    --                  END LOOP;
    --               END IF;
    --            END IF;
    --         --raise_error('v_prrd_code='||v_prrd_code);
    --         END LOOP;                                         --cur_all_risks_rec
    --      END LOOP;
    --      -- raise_error('v_prrd_code='||v_prrd_code);
    ----   EXCEPTION
    ----      WHEN v_zero_devide
    ----      THEN
    ----         raise_error
    ----            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL...'
    ----            );
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_error ('Error :- unable to populate treaty details errr...');
    --   END;
    -- PROCEDURE populate_treaty_details (
    --      v_batch_no    IN   NUMBER,
    --      v_tran_no     IN   NUMBER,
    --      v_tran_type   IN   VARCHAR2,
    --      v_ipu_code    IN   NUMBER
    --   )
    --   IS
    --      v_cnt                    NUMBER         := 0;
    --      v_trt_uwyr               NUMBER         := NULL;
    --      cnt                      NUMBER         := 1;
    --      v_retention_amt          NUMBER         := 0;
    --      v_facre_rate             NUMBER         := 0;
    --      v_errmsg                 VARCHAR2 (200);
    --      v_zero_devide            EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      al_id                    NUMBER;
    --      v_group_si               NUMBER         := 0;
    --      v_grp_flag               BOOLEAN        := FALSE;
    --      v_grp_pct                NUMBER         := 0;
    --      v_grp_tot_ret            NUMBER         := 0;
    --      v_reinsure_amt           NUMBER         := 0;
    --      v_exhange_rate           NUMBER         := 1;
    --      v_prrd_code              NUMBER;
    --      v_facre_amt              NUMBER         := 0;
    --      v_facre_excess           NUMBER         := 0;
    --      v_arrngmt_defined        NUMBER         := 0;
    --      v_msg                    VARCHAR2 (200);
    --      v_arrangement            NUMBER;
    --      v_arrangement_type       VARCHAR2 (10);
    --      v_old_grs_ret_rate       NUMBER         := 0;
    --      v_net_ret_rate           NUMBER         := 0;
    --      v_retention_limit        NUMBER         := 0;
    --      v_no_ri_si               VARCHAR2 (2);
    --      v_dummy                  NUMBER         := 0;
    --      v_retention_type         VARCHAR2 (1)   := NULL;
    --      v_bind_max_exp           NUMBER         := 0;
    --      v_load_status            VARCHAR2 (2);
    --      v_reinsure_wot_ri_prog   VARCHAR2 (2);
    --      v_unadjusted_ri_tran     NUMBER         := 0;
    --      v_as_uwyr                NUMBER;
    --      v_dc_pol_loaded          VARCHAR2 (3);
    --      v_eq_prem                NUMBER         := 0;
    --      v_rnd                    NUMBER         := 0;
    --      v_bcur_rnd               NUMBER         := 0;
    --      v_bcur_code              NUMBER;
    --      v_bcur_symbol            VARCHAR2 (15);
    --      v_as_code                NUMBER;
    --      v_fac_oblig_limit        NUMBER;
    --      v_trt_cur_code           NUMBER;
    --      v_trt_cur_rate           NUMBER;
    --      v_ctl_code               NUMBER;
    --      v_ctl_cede_rate          NUMBER;
    --      v_ctl_rate_type          VARCHAR2 (1);
    --       --v_rein_cur_param VARCHAR2(1);
    --      -- v_rein_cur_code NUMBER;
    --      -- v_rein_prem NUMBER :=0;
    --      -- v_max_exposure NUMBER :=0;
    --      v_pol_fc_rate            NUMBER;
    --      v_pol_fc_amt             NUMBER;
    --      v_user                   VARCHAR2 (35);
    --      v_rsk_fc_amnt            NUMBER;
    --      v_rsk_fc_rate            NUMBER;
    --      v_cede_pool              VARCHAR2 (1);
    --      v_rein_cur_param          VARCHAR2 (1);
    --      v_xol_uw_param          VARCHAR2 (1);

    --      CURSOR cur_pol
    --      IS
    --         SELECT pol_policy_status, pol_binder_policy, pol_cur_code,
    --                pol_policy_type, pol_cur_symbol, pol_prev_batch_no,
    --                pol_loaded, pol_cur_rate,pol_exch_rate_fixed
    --           FROM gin_policies
    --          WHERE pol_batch_no = v_batch_no;

    --      CURSOR cur_all_risks (vpolloaded IN VARCHAR2)
    --      IS
    --         SELECT   ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  ipu_comp_retention, ipu_pol_est_max_loss,
    --                  ipu_avail_fulc_bal, ipu_endos_diff_amt, ipu_sec_scl_code,
    --                  ipu_related_ipu_code, ipu_bp, ipu_gp, ipu_fp, ipu_fap,
    --                  ipu_nett_premium, ipu_eml_si, ipu_cummulative_reins,
    --                  ipu_sec_sect_code, ipu_reinsure_amt, ipu_facre_amount,
    --                  ipu_prev_ipu_code, ipu_relr_code, ipu_eff_wef, ipu_id,
    --                  ipu_uw_yr, ipu_inception_uwyr, ipu_rc_code, ipu_bind_code,
    --                  ipu_max_exposure, ipu_earthqke_prem_diff,
    --                  ipu_override_ri_retention
    --             FROM gin_insured_property_unds
    --            WHERE ipu_pol_batch_no = v_batch_no
    --              AND ipu_code = v_ipu_code
    --              AND DECODE (NVL (vpolloaded, 'N'), 'N', ipu_reinsured, 1) = 1
    --         ORDER BY 1;

    --      CURSOR cur_all_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT SUM (NVL (ipu_reinsure_amt, 0)) si
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);

    --      CURSOR cur_related_risks (
    --         v_rel_code        IN   NUMBER,
    --         v_cover_from_dt        DATE,
    --         v_ipu_id               NUMBER
    --      )
    --      IS
    --         SELECT ipu_code, ipu_reinsure_amt, pol_cur_rate
    --           FROM gin_policies,
    --                gin_policy_active_risks,
    --                gin_insured_property_unds
    --          WHERE pol_batch_no = polar_pol_batch_no
    --            AND polar_ipu_code = ipu_code
    --            AND ipu_id != v_ipu_id
    --            AND ipu_relr_code = v_rel_code
    --            AND ipu_eff_wet >= v_cover_from_dt
    --            AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);

    ---- select treaties to reinsure each risk
    --      CURSOR cur_treaties (
    --         v_scl_code   IN   NUMBER,
    --         v_ta_code    IN   NUMBER,
    --         v_uwyr            NUMBER,
    --         v_ipu             NUMBER
    --      )
    --      IS
    --         SELECT   *
    --             FROM gin_treaty_setups_vw
    --            WHERE clt_scl_code = v_scl_code
    --              AND as_ta_code = v_ta_code
    --              AND as_uwyr = v_uwyr
    --              AND NVL (as_status, 'N') = 'A'
    --              AND rei_code != 563
    --              AND trt_code IN (1001, 1003, 1004)
    --              AND rei_code NOT IN (
    --                     SELECT ptotr_rei_code
    --                       FROM gin_policy_rein_risk_details
    --                      WHERE ptotr_ipu_code = v_ipu
    --                        AND ptotr_ggt_tran_no = v_tran_no)
    --              --and trunc(sysdate)  between clt_wef and clt_wet
    --         ORDER BY clt_as_code, trt_level, clt_scl_code;

    ----AND NVL(as_status,'N') ='A'
    --      CURSOR cur_cnt_trt (
    --         vv_ta_code   NUMBER,
    --         uwyr         NUMBER,
    --         v_scl_code   NUMBER,
    --         v_dt         DATE
    --      )
    --      IS
    --         SELECT COUNT ('x') cnt
    --           FROM gin_class_treaties, gin_arrangement_setups
    --          WHERE clt_as_code = as_code
    --            AND clt_ta_code = vv_ta_code
    --            AND as_uwyr = uwyr
    --            AND clt_scl_code = v_scl_code
    --            AND NVL (as_status, 'N') = 'A';

    ----    AND (v_dt BETWEEN CLT_WEF AND CLT_WET);

    --      --get Arrangement Type
    --      CURSOR cur_arrangments (
    --         v_scl_code   IN   NUMBER,
    --         v_uwyr            NUMBER,
    --         v_cur_code        NUMBER
    --      )
    --      IS
    --         SELECT DISTINCT ta_code, ta_type, NVL (as_status, 'N') as_status
    --                    FROM gin_treaty_arrangements,
    --                         gin_class_treaties,
    --                         gin_arrangement_setups
    --                   WHERE ta_code = clt_ta_code
    --                     AND ta_code = as_ta_code
    --                     AND clt_as_code = as_code
    --                     --AND ta_cur_code = v_cur_code
    --                     --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
    --                     AND as_uwyr = v_uwyr
    --                     AND clt_scl_code = v_scl_code
    --                     AND NVL (as_status, 'N') = 'A'
    --                                                   --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
    --      ;

    --      --AND (v_dt BETWEEN CLT_WEF AND CLT_WET);
    --      CURSOR cur_arrangments_yr (
    --         v_scl_code   IN   NUMBER,
    --         v_uwyr            NUMBER,
    --         v_dt              DATE,
    --         v_cur_code        NUMBER
    --      )
    --      IS
    --         SELECT DISTINCT ta_code, clt_retention_limit
    --                    FROM gin_treaty_arrangements,
    --                         gin_class_treaties,
    --                         gin_arrangement_setups
    --                   WHERE ta_code = clt_ta_code
    --                     AND ta_code = as_ta_code
    --                     AND clt_as_code = as_code
    --                     --AND ta_cur_code = v_cur_code
    --                     --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
    --                     AND as_uwyr = v_uwyr
    --                     AND clt_scl_code = v_scl_code
    --                     AND (v_dt BETWEEN clt_wef AND clt_wet);

    ----,CLT_RETENTION_LIMIT
    --      CURSOR cur_participant (v_rei_code IN NUMBER)
    --      IS
    --         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    --                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    --                trpa_trs_code, trpa_trs_sht_desc, trpa_code
    --           FROM gin_treaty_participants
    --          WHERE trpa_rei_code = v_rei_code;

    --      CURSOR cur_pol_facre
    --      IS
    --         SELECT *
    --           FROM gin_policy_facre_setup
    --          WHERE pfcs_pol_batch_no = v_batch_no;
    --   BEGIN
    --    --v_exhange_rate := get_exchange_rate(v_cur_code,v_base_cur_code);
    ----    BEGIN
    ----     SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('REINS_IN_BASE_CURRENCY') INTO v_rein_cur_param FROM DUAL;
    ----    EXCEPTION
    ----    WHEN OTHERS THEN
    ----         v_rein_cur_param := 'N';
    ----    END;
    --      v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

    ---- open all risk cursor
    --      BEGIN
    --         UPDATE gin_policy_risk_ri_dtls
    --            SET prrd_facre_rate = 0,
    --                prrd_facre_amount = 0
    --          WHERE prrd_tran_no = v_tran_no AND prrd_ipu_code = v_ipu_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Unable to update facre rates at 1, ...');
    --      END;
    --
    --       BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                                   ('ENABLE_UW_XOL_PROCESSING')
    --           INTO v_xol_uw_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_xol_uw_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            NULL;
    --      END;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('REINS_IN_BASE_CURRENCY')
    --           INTO v_rein_cur_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_rein_cur_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Treaty  parameter...');
    --      END;



    --      FOR cur_pol_rec IN cur_pol
    --      LOOP


    ----      IF     NVL (cur_pol_rec.pol_exch_rate_fixed, 'N') = 'N'
    ----            AND cur_pol_rec.pol_policy_status != 'CO'
    ----         THEN
    ----            v_exhange_rate := 1;
    ----            v_exhange_rate :=
    ----               get_currexch_rate (cur_pol_rec.pol_cur_code, v_rnd,
    ----                                  v_bcur_rnd);
    ----      ELSE                                    -- TO TAKE CARE OF FIXED RATE
    ----            -- v_exhange_rate :=  get_currexch_rate (cur_pol_rec.pol_cur_code, v_rnd, v_bcur_rnd);
    ----            v_exhange_rate := cur_pol_rec.pol_cur_rate;
    ----            v_rnd := get_curr_rounding (cur_pol_rec.pol_cur_code, v_bcur_rnd);
    ----      END IF;



    ----raise_error('HERE='||cur_pol_rec.pol_cur_code||';'||v_exhange_rate||';'||v_tran_type);
    --         BEGIN
    --            SELECT NVL (pol_loaded, 'N')
    --              INTO v_load_status
    --              FROM gin_policies
    --             WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               v_load_status := NVL (cur_pol_rec.pol_loaded, 'N');
    --         END;

    --         BEGIN
    --            SELECT SUM (DECODE (NVL (pfcs_amt_or_rate, 'R'),
    --                                'R', NVL (pfcs_rate, 0),
    --                                0
    --                               )
    --                       ),
    --                   SUM (DECODE (NVL (pfcs_amt_or_rate, 'R'),
    --                                'R', 0,
    --                                NVL (pfcs_rate, 0)
    --                               )
    --                       )
    --              INTO v_pol_fc_rate,
    --                   v_pol_fc_amt
    --              FROM gin_policy_facre_setup
    --             WHERE pfcs_pol_batch_no = v_batch_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error computing preset facultative cessions.');
    --         END;

    --         FOR cur_all_risks_rec IN cur_all_risks (cur_pol_rec.pol_loaded)
    --         LOOP
    --            v_bind_max_exp := 0;

    --            IF     NVL (v_bind_max_exp, 0) = 0
    --               AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'Y'
    --            THEN
    --               v_dummy := 0;

    --               SELECT COUNT ('x')
    --                 INTO v_dummy
    --                 FROM gin_binder_details
    --                WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                  AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;

    --               IF NVL (v_dummy, 0) > 1
    --               THEN
    --                  raise_error
    --                     ('Setup Error, Maximum accumulation defined more than once for this binder'
    --                     );
    --               ELSIF NVL (v_dummy, 0) = 1
    --               THEN
    --                  BEGIN
    --                     SELECT db_max_limit
    --                       INTO v_bind_max_exp
    --                       FROM gin_binder_details
    --                      WHERE db_bind_code = cur_all_risks_rec.ipu_bind_code
    --                        AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
    --                        raise_error
    --                           ('Unable to retrieve the maxmium exposure for the bordereaux scl'
    --                           );
    --                  END;
    --               ELSIF NVL (v_dummy, 0) = 0
    --               THEN
    --                  BEGIN
    --                     SELECT NVL (bind_max_exposure, 0)
    --                       INTO v_bind_max_exp
    --                       FROM gin_binders
    --                      WHERE bind_code = cur_all_risks_rec.ipu_bind_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
    --                        raise_error
    --                           ('Unable to retrieve the maxmium exposure for the bordereaux'
    --                           );
    --                  END;
    --               END IF;

    --               --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
    --               IF     NVL (v_bind_max_exp, 0) > 0
    --                  AND NVL (v_bind_max_exp, 0) <
    --                                   NVL (cur_all_risks_rec.ipu_max_exposure, 0)
    --               THEN
    --                  raise_error (   'The maximum exposure amount for the risk '
    --                               || cur_all_risks_rec.ipu_property_id
    --                               || ' is greater than the allowed limit of '
    --                               || v_bind_max_exp
    --                              );
    --               END IF;
    --            END IF;

    --------------------
    --/*
    --      --normaly do not populate new treaties when there is a refund premium
    --    this situations is required for loaded risks on their first endorsement that
    --    result into refund premium
    --*/

    --            /**** NOTE THIS STATEMENT SHOULD NOT INCLUDE THE -1 BUT ITS OPENED FOR ALLOWING OKWAKOS TRANSACTIONS
    --            TO PASS- HE REFUSED TO EDIT LOADED TRANSACTIONS PROPERLY SO ON PREMIUM REFUNDS ON NON EXISTING RISKS HE IS
    --            FORCED TO ENTER IT AFRESH THEN GIVE A BUT CHARGE PREMIUM

    --            IF SIGN(NVL(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)) IN (1,0) OR NVL(v_load_status,'N') ='Y'  THEN

    --            */
    --            IF    SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)) IN
    --                                                                    (1, 0, -1)
    --               OR NVL (v_load_status, 'N') = 'Y'
    --            THEN
    --               BEGIN
    --                  v_no_ri_si := NULL;

    --                  SELECT NVL (scl_no_ri_si, 'N'),
    --                         NVL (scl_reinsure_wot_ri_prog, 'N')
    --                    INTO v_no_ri_si,
    --                         v_reinsure_wot_ri_prog
    --                    FROM gin_sub_classes
    --                   WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'Unable to retrieve RI SI status for the sub class '
    --                         || cur_all_risks_rec.ipu_sec_scl_code
    --                        );
    --               END;

    --               IF     NVL (v_no_ri_si, 'N') = 'N'
    --                  AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --               THEN
    --                  raise_error
    --                     (   'No reinsure amount specified, cannot reinsure this risk '
    --                      || cur_all_risks_rec.ipu_item_desc
    --                     );
    --               END IF;

    --               -- open arrangements cursor
    --               --reserve facre sessions if its not a new business or renewal
    --               BEGIN
    --                  v_prrd_code := NULL;
    --                  v_facre_amt := 0;

    --                  SELECT prrd_code, prrd_facre_amount, prrd_avail_fulc_bal
    --                    INTO v_prrd_code, v_facre_amt, v_facre_excess
    --                    FROM gin_policy_risk_ri_dtls
    --                   WHERE prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                     AND prrd_tran_no = v_tran_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     v_prrd_code := NULL;
    --                     v_facre_amt := 0;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('Unable to retrieve RI details, ...');
    --               END;

    --               ---get related risks
    --               v_retention_amt := 0;
    --               v_grp_tot_ret := 0;
    --               v_group_si := 0;

    --               IF cur_all_risks_rec.ipu_relr_code IS NOT NULL
    --               THEN
    --                  --first check if there is any ri transaction not adjusted
    --                  BEGIN
    --                     --GGT_TRANS_NO
    --                     v_unadjusted_ri_tran := 0;

    --                     SELECT COUNT (ggt_trans_no)
    --                       INTO v_unadjusted_ri_tran
    --                       FROM gin_gis_transactions
    --                      WHERE ggt_uw_clm_tran = 'R'
    --                        AND (   ggt_trans_authorised IS NULL
    --                             OR ggt_trans_authorised IN ('N', 'R')
    --                            )
    --                        AND ggt_risk_grp_code =
    --                                               cur_all_risks_rec.ipu_relr_code;

    --                     IF NVL (v_unadjusted_ri_tran, 0) > 0
    --                     THEN
    --                        raise_error
    --                           (   'There are '
    --                            || v_unadjusted_ri_tran
    --                            || ' Grouped RI transactions not adjusted. please adjust them first.'
    --                           );
    --                     END IF;
    --                  END;

    --                  v_group_si := 0;
    --                  v_grp_flag := TRUE;
    --                  v_group_si :=
    --                     get_group_top_loc (cur_all_risks_rec.ipu_pol_batch_no,
    --                                        cur_all_risks_rec.ipu_pol_policy_no,
    --                                        cur_all_risks_rec.ipu_relr_code,
    --                                        cur_all_risks_rec.ipu_rc_code,
    --                                        cur_all_risks_rec.ipu_eff_wef
    --                                       );

    --                  --v_group_si := v_group_si * v_exhange_rate;
    --                  IF NVL (v_group_si, 0) = 0
    --                  THEN
    --                     v_group_si := 1;
    --                  END IF;

    --                  FOR cur_related_risks_rec IN
    --                     cur_related_risks (cur_all_risks_rec.ipu_relr_code,
    --                                        cur_all_risks_rec.ipu_eff_wef,
    --                                        cur_all_risks_rec.ipu_id
    --                                       )
    --                  LOOP
    --                     BEGIN
    --                        UPDATE gin_insured_property_unds
    --                           SET ipu_reinsured = 1,
    --                               ipu_grp_top_loc =
    --                                  ROUND (  NVL (v_group_si, 0)
    --                                         * cur_related_risks_rec.pol_cur_rate,
    --                                         v_rnd
    --                                        ),
    --                               ipu_grp_si_risk_pct =
    --                                  ROUND
    --                                     (  (  NVL
    --                                              (cur_related_risks_rec.ipu_reinsure_amt,
    --                                               0
    --                                              )
    --                                         * cur_related_risks_rec.pol_cur_rate
    --                                        )
    --                                      / DECODE (NVL (v_group_si, 0),
    --                                                0, 100,
    --                                                v_group_si
    --                                               )
    --                                      * 100,
    --                                      4
    --                                     )                                    --??
    --                         WHERE ipu_code = cur_related_risks_rec.ipu_code;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Unable to update related risks RI details, ...'
    --                              );
    --                     END;
    --                  END LOOP;

    --                  v_grp_pct := 0;
    --                  v_grp_pct :=
    --                     ROUND (  (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               * v_exhange_rate
    --                              )
    --                            / v_group_si
    --                            * 100,
    --                            4
    --                           );
    --                  v_group_si := ROUND (v_group_si / v_exhange_rate);



    --                  --v_retention_amt :=NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0) - (NVL(v_facre_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)/100) - NVL(cur_all_risks_rec.IPU_FACRE_AMOUNT,0);
    --                  --v_grp_tot_ret   :=v_retention_amt;
    --                  --v_retention_amt := v_retention_amt * v_grp_pct / 100;
    --                  v_reinsure_amt := v_group_si;
    --               ELSE
    --                  v_grp_pct := 100;
    --                  NULL;
    --                  ----Currency convertions to be considered here
    ----                  if nvl(v_rein_cur_param,'N')='Y' then
    ----                  v_reinsure_amt :=
    ----                                  ROUND(NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)/v_exhange_rate,v_rnd);
    ----                  else
    --                  v_reinsure_amt :=
    --                                  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0);
    ----                  end if;
    --               --v_retention_amt :=NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0) - (NVL(v_facre_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)/100) - NVL(cur_all_risks_rec.IPU_FACRE_AMOUNT,0);
    --               --v_grp_tot_ret :=0;
    --               END IF;

    --               DBMS_OUTPUT.put_line ('1v_retention_amt=' || v_retention_amt);

    --               IF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) != 0
    --               THEN                                                     --????
    --                  v_retention_amt :=
    --                     ROUND (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                            - (  NVL (v_facre_rate, 0)
    --                               * NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                               / 100
    --                              )
    --                            - NVL (v_facre_amt, 0)
    --                            - get_risk_ri_pool (cur_all_risks_rec.ipu_code),
    --                            v_rnd
    --                           );
    ----                  RAISE_ERROR(v_retention_amt) ;
    ----                  if nvl(v_rein_cur_param,'N')='Y' then
    ----                  v_retention_amt :=
    ----                                  ROUND(v_retention_amt/v_exhange_rate,v_rnd);
    ----
    ----                  end if;

    --                  v_retention_amt :=
    --                                   v_retention_amt * NVL (v_grp_pct, 100)
    --                                   / 100;
    --               ELSE
    --                  v_retention_amt := 0;
    --               END IF;

    --               DBMS_OUTPUT.put_line ('2v_retention_amt=' || v_retention_amt);

    --               IF cur_pol_rec.pol_policy_status IN ('NB', 'RN', 'SP')
    --               THEN
    --                  v_eq_prem :=
    --                       cur_all_risks_rec.ipu_earthqke_prem_diff
    --                     * SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0));
    --               ELSE
    --                  v_eq_prem := 0;
    --               END IF;



    --                              --   RAISE_ERROR('JOYCE WAS HERE ===='||v_prrd_code||'   ');
    --               IF v_prrd_code IS NULL
    --               THEN
    --                  BEGIN
    --                     SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_prrd_code_seq.NEXTVAL
    --                                      )
    --                       INTO v_prrd_code
    --                       FROM DUAL;

    --                     v_cede_pool := 'Y';

    --                     INSERT INTO gin_policy_risk_ri_dtls
    --                                 (prrd_code, prrd_ipu_code, prrd_idx,
    --                                  prrd_tran_no, prrd_wef,
    --                                  prrd_wet, prrd_current,
    --                                  prrd_comp_retention, prrd_avail_fulc_bal,
    --                                  prrd_gross_comp_retention,
    --                                  prrd_allowed_grs_comp_ret,
    --                                  prrd_facre_amount,
    --                                  prrd_com_retention_rate,
    --                                  prrd_grp_si_risk_pct, prrd_grp_top_loc,
    --                                  prrd_grp_comp_gross_ret,
    --                                  prrd_grp_comp_net_ret,
    --                                  prrd_ri_prem,
    --                                  prrd_earthquake_prem,
    --                                  prrd_ri_net_less_eq_prem,
    --                                  prrd_prev_prrd_code, prrd_cede_pool
    --                                 )
    --                          VALUES (v_prrd_code, cur_all_risks_rec.ipu_code, 1,
    --                                  v_tran_no, cur_all_risks_rec.ipu_wef,
    --                                  cur_all_risks_rec.ipu_wet, 'Y',
    --                                  ROUND (v_retention_amt, v_rnd), 0,
    --                                  ROUND (v_retention_amt, v_rnd),
    --                                  ROUND (v_retention_amt, v_rnd),
    --                                  0,
    --                                  ROUND
    --                                     (  v_retention_amt
    --                                      / DECODE
    --                                           (NVL
    --                                               (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                0
    --                                               ),
    --                                            0, 1,
    --                                            cur_all_risks_rec.ipu_reinsure_amt
    --                                           )
    --                                      * 100,
    --                                      4
    --                                     ),
    --                                  v_grp_pct, NVL (v_group_si, 0),
    --                                  v_grp_tot_ret,
    --                                  0,
    --                                  ROUND (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                         v_rnd
    --                                        ),
    --                                  v_eq_prem,
    ----ROUND(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                                    ROUND
    --                                       (NVL
    --                                           (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - NVL (v_eq_prem, 0),
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))) ,
    --                                  v_prrd_code, v_cede_pool
    --                                 );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Unable to create risk RI details, ...');
    --                  END;

    --                  -- v_cnt :=   (NVL(v_pol_fc_rate,0)/100 * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) + nvl(v_pol_fc_amt,0);
    --                  BEGIN
    --                     UPDATE gin_insured_property_unds
    --                        SET ipu_current_prrd_code = v_prrd_code
    --                      WHERE ipu_code = cur_all_risks_rec.ipu_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Unable to update risks current RI details code, ...'
    --                           );
    --                  END;
    --               ELSE
    --                  BEGIN



    --                                              --PRRD_AVAIL_FULC_BAL =ROUND(DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,v_facre_rate * (DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) /100))),
    --                                              --PRRD_EXCESS_PCT        =ROUND(v_facre_rate,4),
    --                             -- raise_error('update v_retention_amt='||v_retention_amt);
    --                     --raise_error('cur_all_risks_rec.ipu_reinsure_amt='||cur_all_risks_rec.ipu_reinsure_amt||'v_retention_amt='||v_retention_amt);
    --                     UPDATE    gin_policy_risk_ri_dtls
    --                           SET prrd_comp_retention = v_retention_amt,
    --                               prrd_gross_comp_retention =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_allowed_grs_comp_ret =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_com_retention_rate =
    --                                  ROUND
    --                                     (DECODE
    --                                         (NVL
    --                                             (cur_all_risks_rec.ipu_reinsure_amt,
    --                                              0
    --                                             ),
    --                                          0, 100,
    --                                            v_retention_amt
    --                                          * NVL
    --                                               (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                0
    --                                               )
    --                                          / 100
    --                                         ),
    --                                      4
    --                                     ),             /***miti changed here ***/
    --                               prrd_grp_top_loc =
    --                                            ROUND (NVL (v_group_si, 0), v_rnd),
    --                               prrd_grp_si_risk_pct = ROUND (v_grp_pct, 4),
    --                               prrd_grp_comp_gross_ret =
    --                                                  ROUND (v_grp_tot_ret, v_rnd),
    --                               prrd_ri_prem =
    --                                  ROUND (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                         v_rnd
    --                                        ),
    --                               prrd_comp_net_rate =
    --                                  ROUND
    --                                     (DECODE
    --                                         (NVL
    --                                             (cur_all_risks_rec.ipu_reinsure_amt,
    --                                              0
    --                                             ),
    --                                          0, 100,
    --                                            v_retention_amt
    --                                          * NVL
    --                                               (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                0
    --                                               )
    --                                          / 100
    --                                         ),
    --                                      4
    --                                     ) ,             /***miti changed here ***/
    --                               prrd_earthquake_prem = v_eq_prem,
    ----ROUND(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
    --                               prrd_ri_net_less_eq_prem =
    --                                    (ROUND
    --                                       (NVL
    --                                           (cur_all_risks_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - NVL (v_eq_prem, 0))
    ----(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)))
    --                     WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                           AND prrd_code = v_prrd_code
    --                           AND prrd_tran_no = v_tran_no
    --                     RETURNING prrd_cede_pool
    --                          INTO v_cede_pool;
    ----                  EXCEPTION
    ----                     WHEN OTHERS
    ----                     THEN
    ----                        raise_error
    ----                                 ('Unable to update the risk RI details, ...');
    --                  END;
    --               END IF;

    --               DBMS_OUTPUT.put_line ('3v_retention_amt=' || v_retention_amt);
    --               v_arrngmt_defined := 0;

    --               IF v_cede_pool = 'Y'
    --               THEN
    --                  BEGIN
    --                     pop_pool_risk (v_batch_no,
    --                                    cur_all_risks_rec.ipu_code,
    --                                    v_tran_no,
    --                                    v_prrd_code
    --                                   );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error populating pool amount...');
    --                  END;

    --                  v_arrngmt_defined := 2;
    --               END IF;
    --               /*populate xol*/
    --              if nvl(v_xol_uw_param,'N')='Y' THEN
    --                 BEGIN
    --                     pop_xol_risk (v_batch_no,
    --                                    cur_all_risks_rec.ipu_code,
    --                                    v_tran_no,
    --                                    v_prrd_code
    --                                   );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error populating xol amount...');
    --                  END;
    --               END IF;
    --               --raise_error('===here==='||v_cede_pool);
    --               IF     NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --                  AND NVL (v_pol_fc_amt, 0) != 0
    --               THEN
    --                  raise_error
    --                     ('An amount facre setup has been provided when risks exist with no SI exist. Change all facre setups to percentage.'
    --                     );
    --               ELSIF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
    --               THEN
    --                  v_rsk_fc_rate := NVL (v_pol_fc_rate, 0);
    --               ELSE
    --                  v_rsk_fc_rate :=
    --                       (  (  NVL (v_pol_fc_amt, 0)
    --                           / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                          )
    --                        * 100
    --                       )
    --                     + NVL (v_pol_fc_rate, 0);
    --               END IF;

    --               --v_rsk_fc_rate := ((nvl(v_pol_fc_amt,0)/NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0))*100) + NVL(v_pol_fc_rate,0);
    --               DBMS_OUTPUT.put_line (   NVL (v_pol_fc_rate, 0)
    --                                     || '='
    --                                     || NVL (v_pol_fc_amt, 0)
    --                                     || '='
    --                                     || v_cnt
    --                                     || '='
    --                                     || NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           )
    --                                    );

    ----||'FCAMOUNT='||(NVL(v_pol_fc_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) + nvl(v_pol_fc_amt,0));
    --               IF NVL (v_rsk_fc_rate, 0) > 0
    --               THEN
    --                  v_rsk_fc_amnt :=
    --                     ROUND (  v_rsk_fc_rate
    --                            * NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                            / 100,
    --                            v_rnd
    --                           );

    --                  IF v_rsk_fc_rate > 100
    --                  THEN
    --                     raise_error
    --                        ('The preset facultative placement percentage/amount is more than the risk SI'
    --                        );
    --                  END IF;

    --                  v_facre_excess :=
    --                                  NVL (v_facre_amt, 0)
    --                                  + NVL (v_rsk_fc_amnt, 0);

    --                  UPDATE gin_policy_risk_ri_dtls
    --                     SET prrd_avail_fulc_bal = v_rsk_fc_amnt,
    --                         prrd_excess_pct = v_rsk_fc_rate
    --                   WHERE prrd_code = v_prrd_code;

    --                  FOR cur_pol_facre_rec IN cur_pol_facre
    --                  LOOP
    --                     insert_facre (v_batch_no,
    --                                   cur_all_risks_rec.ipu_code,
    --                                   cur_pol_facre_rec.pfcs_agn_code,
    --                                   cur_pol_facre_rec.pfcs_agn_sht_desc,
    --                                   cur_pol_facre_rec.pfcs_amt_or_rate,
    --                                   cur_pol_facre_rec.pfcs_rate,
    --                                   v_user,
    --                                   'A',
    --                                   NULL,
    --                                   'N',
    --                                   cur_pol_facre_rec.pfcs_accepted_date,
    --                                   cur_pol_facre_rec.pfcs_accepted,
    --                                   cur_pol_facre_rec.pfcs_comm_rate,
    --                                   NULL,
    --                                   NULL,
    --                                   NULL,
    --                                   NULL
    --                                  );
    --                  END LOOP;
    --               END IF;

    --               v_arrngmt_defined := 0;
    --               v_arrangement := NULL;
    --               v_arrangement_type := NULL;
    --               v_dummy := 0;

    --               SELECT COUNT (DISTINCT ('x'))
    --                 INTO v_dummy
    --                 FROM gin_treaty_arrangements, gin_class_treaties
    --                WHERE ta_code = clt_ta_code
    --                  AND clt_scl_code = cur_all_risks_rec.ipu_sec_scl_code
    --                  AND (cur_all_risks_rec.ipu_eff_wef BETWEEN clt_wef AND clt_wet
    --                      );

    --               --raise_error('dummy-'||v_dummy);
    --               IF v_dummy > 1
    --               THEN
    --                  --raise_error('The sub class '||cur_all_risks_rec.ipu_sec_scl_code||' has been defined in more than one treaty arrangements');
    --                  raise_error
    --                     (   'The sub class '
    --                      || cur_all_risks_rec.ipu_sec_scl_code
    --                      || ' has been defined in more than one treaty arrangements'
    --                     );
    --               END IF;

    --                --FOR cur_arrangments_rec IN cur_arrangments(cur_all_risks_rec.ipu_sec_scl_code,cur_all_risks_rec.IPU_UW_YR,cur_all_risks_rec.ipu_eff_wef) LOOP
    --               --raise_error(cur_all_risks_rec.ipu_sec_scl_code||'='||cur_all_risks_rec.IPU_UW_YR||';'||cur_pol_rec.pol_cur_code);
    --               FOR cur_arrangments_rec IN
    --                  cur_arrangments (cur_all_risks_rec.ipu_sec_scl_code,
    --                                   cur_all_risks_rec.ipu_uw_yr,
    --                                   cur_pol_rec.pol_cur_code
    --                                  )
    --               LOOP
    --                  IF NVL (cur_arrangments_rec.as_status, 'N') != 'A'
    --                  THEN
    --                     raise_error
    --                        (   'The RI arrangement defined for the sub class code '
    --                         || cur_all_risks_rec.ipu_sec_scl_code
    --                         || ' has not been authorised. '
    --                         || cur_arrangments_rec.as_status
    --                         || ';'
    --                         || cur_pol_rec.pol_cur_code
    --                         || ';'
    --                         || cur_all_risks_rec.ipu_uw_yr
    --                         || ';'
    --                         || cur_all_risks_rec.ipu_sec_scl_code
    --                        );
    --                  END IF;

    --                  --DBMS_OUTPUT.PUT_LINE('3 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
    --                  v_arrangement := cur_arrangments_rec.ta_code;
    --                  -- get the underwriting year to refere to for the treaty
    --                  v_arrngmt_defined := 1;
    --                  v_trt_uwyr := NULL;
    --                  v_arrangement_type := cur_arrangments_rec.ta_type;

    --                  IF cur_arrangments_rec.ta_type IN ('U', 'X')
    --                  THEN
    --                     --v_trt_uwyr := NVL(cur_all_risks_rec.IPU_INCEPTION_UWYR,v_pol_incept_year);
    --                     v_trt_uwyr := cur_all_risks_rec.ipu_uw_yr;
    --                  /** commented on 20/03/2002by Njuki to take care of clean cut and uw yr treaties
    --                  --v_trt_uwyr := v_pol_incept_year;
    --                  the bug may be check if the risk is changing its uwyr if the arrangement is a clean cut it should not change if the arrangement is unwr year ***/
    --                  ELSE
    --                     --v_trt_uwyr :=TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'));
    --                     --remmed for same reason above
    --                     v_trt_uwyr := cur_all_risks_rec.ipu_uw_yr;
    --                  END IF;

    --                              --get retention limit
    --                  --DBMS_OUTPUT.PUT_LINE('1 cur_all_risks_rec.ipu_Rc_code='||cur_all_risks_rec.ipu_Rc_code||'v_load_status='||v_load_status);
    --                  v_dc_pol_loaded := NVL (v_load_status, 'N');

    --                  IF cur_pol_rec.pol_policy_status = 'DC'
    --                  THEN
    --                     BEGIN
    --                        SELECT NVL (pol_loaded, 'N')
    --                          INTO v_dc_pol_loaded
    --                          FROM gin_policies, gin_insured_property_unds
    --                         WHERE ipu_code = cur_all_risks_rec.ipu_prev_ipu_code
    --                           AND pol_batch_no = ipu_pol_batch_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Error determining previous endorsements status..'
    --                              );
    --                     END;
    --                  END IF;

    --                  IF    cur_pol_rec.pol_policy_status != 'DC'
    --                     OR (    cur_pol_rec.pol_policy_status = 'DC'
    --                         AND NVL (v_load_status, 'N') = 'Y'
    --                        )
    --                  THEN
    --                     v_retention_amt := 0;
    --                     v_retention_type := NULL;

    --                                        --IF NVL(cur_all_risks_rec.IPU_OVERRIDE_RI_RETENTION,0) != 0 THEN
    --                                        --    v_retention_amt := NVL(cur_all_risks_rec.IPU_OVERRIDE_RI_RETENTION,0);
    --                                        --ELSE
    --                     --          raise_error('here='||cur_all_risks_rec.ipu_Rc_code||';'||cur_all_risks_rec.ipu_sec_scl_code||';'||cur_arrangments_rec.ta_code||';'||v_trt_uwyr);
    --                     IF cur_all_risks_rec.ipu_rc_code IS NOT NULL
    --                     THEN
    --                        BEGIN
    --                           --raise_Error(cur_all_risks_rec.ipu_sec_scl_code||'='||cur_arrangments_rec.ta_code
    --                           --||'='||v_trt_uwyr||'='||cur_all_risks_rec.ipu_rc_code);
    --                           SELECT tcc_retention_limit, tcc_retention_type,
    --                                  as_code, tcc_fac_oblig_limit,
    --                                  ta_cur_code
    --                             INTO v_retention_amt, v_retention_type,
    --                                  v_as_code, v_fac_oblig_limit,
    --                                  v_trt_cur_code
    --                             FROM gin_trt_class_categories,
    --                                  gin_arrangement_setups,
    --                                  gin_treaty_arrangements
    --                            WHERE as_ta_code = ta_code
    --                              AND tcc_as_code = as_code
    --                              AND tcc_scl_code =
    --                                            cur_all_risks_rec.ipu_sec_scl_code
    --                              AND as_ta_code = cur_arrangments_rec.ta_code
    --                              AND as_uwyr = v_trt_uwyr
    --                              AND tcc_rc_code = cur_all_risks_rec.ipu_rc_code;

    --                           --DBMS_OUTPUT.PUT_LINE('2 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
    --                           IF v_retention_type = 'P'
    --                           THEN
    --                              SELECT DISTINCT   clt_retention_limit
    --                                              * v_retention_amt
    --                                              / 100,
    --                                              as_code, clt_fac_oblig_limit,
    --                                              ta_cur_code
    --                                         INTO v_retention_amt,
    --                                              v_as_code, v_fac_oblig_limit,
    --                                              v_trt_cur_code
    --                                         FROM gin_class_treaties,
    --                                              gin_arrangement_setups,
    --                                              gin_treaty_arrangements
    --                                        WHERE as_ta_code = ta_code
    --                                          AND clt_as_code = as_code
    --                                          AND clt_scl_code =
    --                                                 cur_all_risks_rec.ipu_sec_scl_code
    --                                          AND as_ta_code =
    --                                                   cur_arrangments_rec.ta_code
    --                                          AND as_uwyr = v_trt_uwyr
    --                                          AND (cur_all_risks_rec.ipu_eff_wef
    --                                                  BETWEEN clt_wef
    --                                                      AND clt_wet
    --                                              );
    --                           --    message('3 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
    --                           END IF;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              SELECT DISTINCT clt_retention_limit, as_code,
    --                                              clt_fac_oblig_limit,
    --                                              ta_cur_code
    --                                         INTO v_retention_amt, v_as_code,
    --                                              v_fac_oblig_limit,
    --                                              v_trt_cur_code
    --                                         FROM gin_class_treaties,
    --                                              gin_arrangement_setups,
    --                                              gin_treaty_arrangements
    --                                        WHERE as_ta_code = ta_code
    --                                          AND clt_as_code = as_code
    --                                          AND clt_scl_code =
    --                                                 cur_all_risks_rec.ipu_sec_scl_code
    --                                          AND as_ta_code =
    --                                                   cur_arrangments_rec.ta_code
    --                                          AND as_uwyr = v_trt_uwyr;
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Unable to retrieve risk class retention amount'
    --                                 );
    --                        END;
    --                     ELSE
    --                        v_retention_amt := 0;

    --                        --raise_Error ('xcx1v_retention_amt='||v_retention_amt||'scl='||cur_all_risks_rec.ipu_sec_scl_code||'tacode='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'wef='||to_char(cur_all_risks_rec.ipu_eff_wef,'DD/MM/YYYY'));
    --                        BEGIN
    --                           SELECT DISTINCT clt_retention_limit, as_code,
    --                                           clt_fac_oblig_limit, ta_cur_code
    --                                      INTO v_retention_amt, v_as_code,
    --                                           v_fac_oblig_limit, v_trt_cur_code
    --                                      FROM gin_class_treaties,
    --                                           gin_arrangement_setups,
    --                                           gin_treaty_arrangements
    --                                     WHERE as_ta_code = ta_code
    --                                       AND clt_as_code = as_code
    --                                       AND clt_scl_code =
    --                                              cur_all_risks_rec.ipu_sec_scl_code
    --                                       AND as_ta_code =
    --                                                   cur_arrangments_rec.ta_code
    --                                       AND as_uwyr = v_trt_uwyr;
    --                        --AND (cur_all_risks_rec.ipu_eff_wef BETWEEN CLT_WEF AND NVL(CLT_WET,TO_dATE('31/12/'||AS_UWYR,'DD/MM/RR')));
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              v_retention_amt :=
    --                                   NVL (cur_all_risks_rec.ipu_reinsure_amt,
    --                                        0)
    --                                 - NVL (v_facre_amt, 0)
    --                                 - NVL (v_facre_excess, 0)
    --                                 + get_risk_ri_pool (v_prrd_code);
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Unable to retrieve the arrangement retention limit'
    --                                 );
    --                        END;

    --                        -- RAISE_ERROR(cur_arrangments_rec.ta_code||';'||v_trt_uwyr||';'||cur_all_risks_rec.ipu_eff_wef||';'||cur_all_risks_rec.ipu_sec_scl_code);
    --                        IF NVL (v_retention_amt, 0) = 0
    --                        THEN
    --                           raise_error
    --                              (   'No Gross Retention or Max XOL deductible defined for the sub class code '
    --                               || cur_all_risks_rec.ipu_sec_scl_code
    --                               || ';'
    --                               || v_trt_uwyr
    --                              );
    --                        END IF;
    --                     END IF;

    --                     DBMS_OUTPUT.put_line (   '4v_retention_amt='
    --                                           || v_retention_amt
    --                                           || ' v_fac_oblig_limit='
    --                                           || v_fac_oblig_limit
    --                                          );

    --                     --END IF;
    --                   --  RAISE_ERROR(v_bcur_code ||' ; '|| v_trt_cur_code||' ; '||cur_pol_rec.pol_cur_code);

    --                     IF v_trt_cur_code != cur_pol_rec.pol_cur_code
    --                     THEN
    --                        IF (v_bcur_code = v_trt_cur_code) OR (NVL(cur_pol_rec.pol_exch_rate_fixed,'N') = 'Y')
    --                        THEN
    --                           --raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
    --                           v_retention_amt :=
    --                              ROUND (v_retention_amt
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                           v_retention_amt := ROUND (v_retention_amt, v_rnd);
    --                           v_fac_oblig_limit :=
    --                              ROUND (  v_fac_oblig_limit
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                           --raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
    --                        -- raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
    --                        ELSE
    --                           v_trt_cur_rate :=
    --                              get_exchange_rate (v_trt_cur_code, v_bcur_code);
    --                           v_retention_amt :=
    --                              ROUND (  v_retention_amt
    --                                     * v_trt_cur_rate
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                           v_fac_oblig_limit :=
    --                              ROUND (  v_fac_oblig_limit
    --                                     * v_trt_cur_rate
    --                                     / cur_pol_rec.pol_cur_rate,
    --                                     v_rnd
    --                                    );
    --                        END IF;
    --                     ELSE
    --                        v_retention_amt := ROUND (v_retention_amt, v_rnd);
    --                     END IF;

    --                     DBMS_OUTPUT.put_line
    --                                        (   '5v_retention_amt='
    --                                         || v_retention_amt
    --                                         || 'REINAMT='
    --                                         || cur_all_risks_rec.ipu_reinsure_amt
    --                                         || 'FACRE='
    --                                         || v_facre_amt
    --                                         || 'EXCESS='
    --                                         || v_facre_excess
    --                                         || 'v_grp_pct='
    --                                         || v_grp_pct
    --                                         || 'POOL='
    --                                         || get_risk_ri_pool (v_prrd_code)
    --                                        );

    --               -- END IF;
    ----       RAISE_ERROR(v_retention_amt);

    ----****************
    --                     IF (v_retention_amt * NVL (v_grp_pct, 100) / 100) >
    --                             NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                           - NVL (v_facre_amt, 0)
    --                           - NVL (v_facre_excess, 0)
    --                           - NVL (get_risk_ri_pool (v_prrd_code), 0)
    --                     THEN
    --                        v_retention_amt :=
    --                             NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
    --                           - NVL (v_facre_amt, 0)
    --                           - NVL (v_facre_excess, 0)
    --                           - NVL (get_risk_ri_pool (v_prrd_code), 0);
    --                     -- RAISE_ERROR('ooo='||v_retention_amt||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_facre_amt||';'||v_facre_excess||';'||get_risk_ri_pool(v_prrd_code));
    --                     ELSE
    --                        v_retention_amt :=
    --                               (v_retention_amt * NVL (v_grp_pct, 100) / 100
    --                               );
    --                     -- - NVL(get_risk_ri_pool(v_prrd_code),0); --+NVL(get_risk_ri_pool(v_prrd_code),0);
    --                     END IF;

    --                     DBMS_OUTPUT.put_line (   '6v_retention_amt='
    --                                           || v_retention_amt
    --                                          );
    --                                         -- FROM HERE
    --                            if nvl(v_rein_cur_param,'N')='Y' then
    --                                  v_reinsure_amt :=
    --                                               ROUND(NVL (v_reinsure_amt, 0)/ cur_pol_rec.pol_cur_rate,v_rnd);
    --                            else
    --                                 v_retention_amt :=v_retention_amt;

    --                           END IF;
    ----RAISE_ERROR('v_reinsure_amt'||v_reinsure_amt);
    --                     BEGIN
    --                        --DBMS_OUTPUT.PUT_LINE('7XX v_retention_amt='||v_retention_amt);
    --                        UPDATE gin_policy_risk_ri_dtls
    --                           SET prrd_comp_retention =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_gross_comp_retention =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_allowed_grs_comp_ret =
    --                                                ROUND (v_retention_amt, v_rnd),
    --                               prrd_com_retention_rate =
    --                                  DECODE
    --                                     (ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         ),
    --                                      0, 100,
    --                                      ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         )
    --                                     ),
    --                               prrd_comp_net_rate =
    --                                  DECODE
    --                                     (ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         ),
    --                                      0, 100,
    --                                      ROUND
    --                                         (  v_retention_amt
    --                                          / DECODE
    --                                               (NVL
    --                                                   (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                    0
    --                                                   ),
    --                                                0, 100,
    --                                                cur_all_risks_rec.ipu_reinsure_amt
    --                                               )
    --                                          * 100,
    --                                          4
    --                                         )
    --                                     ),
    --                               prrd_net_prem =
    --                                  ROUND
    --                                     (  (DECODE
    --                                            (NVL
    --                                                (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                 0
    --                                                ),
    --                                             0, 100,
    --                                               v_retention_amt
    --                                             / NVL
    --                                                  (cur_all_risks_rec.ipu_reinsure_amt,
    --                                                   0
    --                                                  )
    --                                             * 100
    --                                            )
    --                                        )
    --                                      * NVL (prrd_ri_prem, 0)
    --                                      / 100
    --                                     ),
    --                               prrd_as_uwyr = v_trt_uwyr,
    --                               prrd_as_code = v_as_code,
    --                               prrd_facoblig_limit = v_fac_oblig_limit,
    --                               prrd_facoblig_alloc_chk =
    --                                  DECODE (NVL (v_fac_oblig_limit, 0),
    --                                          0, 'N',
    --                                          'Y'
    --                                         )
    --                         /* DECODE (NVL (prrd_facoblig_alloc_chk, 'N'),
    --                                  'Y', 0,
    --                                  v_fac_oblig_limit
    --                                 )*/
    --                        WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                           AND prrd_code = v_prrd_code
    --                           AND prrd_tran_no = v_tran_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                                 ('Unable to update the risk retention limit');
    --                     END;
    --                  --raise_error('v_retention_amt='||v_retention_amt||';'||cur_all_risks_rec.ipu_reinsure_amt||'v_prrd_code='||v_prrd_code);
    --                  ELSE
    --                     BEGIN
    --                        --v_pol_status
    --                        v_old_grs_ret_rate := 0;
    --                        v_net_ret_rate := 0;

    --                        SELECT prrd_com_retention_rate,
    --                               prrd_com_retention_rate, prrd_as_uwyr,
    --                               prrd_as_code, prrd_facoblig_excess
    --                          INTO v_old_grs_ret_rate,
    --                               v_net_ret_rate, v_as_uwyr,
    --                               v_as_code, v_fac_oblig_limit
    --                          FROM gin_policy_risk_ri_dtls
    --                         WHERE prrd_code =
    --                                  (SELECT prrd_code
    --                                     FROM gin_policy_risk_ri_dtls
    --                                    WHERE prrd_ipu_code =
    --                                             cur_all_risks_rec.ipu_prev_ipu_code
    --                                      AND prrd_current = 'Y');
    --                     EXCEPTION
    --                        WHEN NO_DATA_FOUND
    --                        THEN
    --                           v_old_grs_ret_rate := 0;
    --                           v_net_ret_rate := 0;
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Unable to retrieve the prevoius cession rates'
    --                              );
    --                     END;

    --                     BEGIN
    --                        UPDATE gin_policy_risk_ri_dtls
    --                           SET prrd_comp_retention =
    --                                  ROUND
    --                                     (  NVL (v_net_ret_rate, 0)
    --                                      / 100
    --                                      * NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           ),
    --                                      v_rnd
    --                                     ),
    --                               prrd_gross_comp_retention =
    --                                  ROUND
    --                                     (  NVL (v_old_grs_ret_rate, 0)
    --                                      / 100
    --                                      * NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           ),
    --                                      v_rnd
    --                                     ),
    --                               prrd_allowed_grs_comp_ret =
    --                                  ROUND
    --                                     (  NVL (v_old_grs_ret_rate, 0)
    --                                      / 100
    --                                      * NVL
    --                                           (cur_all_risks_rec.ipu_reinsure_amt,
    --                                            0
    --                                           ),
    --                                      v_rnd
    --                                     ),
    --                               prrd_com_retention_rate =
    --                                                   NVL (v_old_grs_ret_rate, 0),
    --                               prrd_comp_net_rate = NVL (v_net_ret_rate, 0),
    --                               prrd_net_prem =
    --                                  ROUND (  NVL (v_net_ret_rate, 0)
    --                                         * NVL (prrd_ri_prem, 0)
    --                                         / 100
    --                                        ),
    --                               prrd_as_uwyr = v_as_uwyr,
    --                               prrd_as_code = v_as_code,
    --                               prrd_facoblig_limit = v_fac_oblig_limit,
    --                               prrd_facoblig_alloc_chk =
    --                                  DECODE (NVL (v_fac_oblig_limit, 0),
    --                                          0, 'N',
    --                                          'Y'
    --                                         )
    --                         /*DECODE (NVL (prrd_facoblig_alloc_chk, 'N'),
    --                                 'Y', 0,
    --                                 v_fac_oblig_limit
    --                                )*/
    --                        WHERE  prrd_ipu_code = cur_all_risks_rec.ipu_code
    --                           AND prrd_code = v_prrd_code
    --                           AND prrd_tran_no = v_tran_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('3322Unable to update the risk retention limit'
    --                              );
    --                     END;
    --                  END IF;

    --                  DBMS_OUTPUT.put_line ('7 v_retention_amt='
    --                                        || v_retention_amt
    --                                       );

    --                  IF     cur_arrangments_rec.ta_type != 'X'
    --                     AND (   cur_pol_rec.pol_policy_status != 'DC'
    --                          OR (    cur_pol_rec.pol_policy_status = 'DC'
    --                              AND NVL (v_load_status, 'N') = 'Y'
    --                             )
    --                         )
    --                  THEN
    --                     FOR cur_treaties_rec IN
    --                        cur_treaties (cur_all_risks_rec.ipu_sec_scl_code,
    --                                      cur_arrangments_rec.ta_code,
    --                                      v_trt_uwyr,
    --                                      cur_all_risks_rec.ipu_code
    --                                     )
    --                     LOOP
    --                        check_treaty_participation (cur_treaties_rec.rei_code);
    --                        v_arrngmt_defined := 2;

    --                        IF NVL (v_retention_amt, 0) = 0
    --                        THEN
    --                           v_retention_amt :=
    --                                NVL (cur_treaties_rec.clt_retention_limit, 0);
    --                        ---    raise_error('Error,Unable to compute retention limit...');
    --                        END IF;

    --                        BEGIN
    --                           SELECT ctl_code,
    --                                  DECODE (cur_pol_rec.pol_policy_type,
    --                                          'N', ctl_cede_rate,
    --                                          ctl_fi_cede_rate
    --                                         ),
    --                                  ctl_rate_type
    --                             INTO v_ctl_code,
    --                                  v_ctl_cede_rate,
    --                                  v_ctl_rate_type
    --                             FROM gin_class_treaty_limits
    --                            WHERE ctl_rei_code = cur_treaties_rec.rei_code
    --                              AND ctl_scl_code =
    --                                            cur_all_risks_rec.ipu_sec_scl_code
    --                              AND ctl_as_code = cur_treaties_rec.as_code;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              NULL;
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error while picking the classs treaty ri rates...'
    --                                 );
    --                        END;

    --                        -- insert treaty details for the risk
    --                        BEGIN
    --                           INSERT INTO gin_policy_rein_risk_details
    --                                       (ptotr_code,
    --                                        ptotr_risk_cur_code,
    --                                        ptotr_trt_cur_code,
    --                                        ptotr_risk_si_pcur,
    --                                        ptotr_risk_prem_pcur,
    --                                        ptotr_rei_code,
    --                                        ptotr_trt_code,
    --                                        ptotr_trt_sht_desc,
    --                                        ptotr_clt_scl_code,
    --                                        ptotr_rate,
    --                                        ptotr_rate_type,
    --                                        ptotr_property_id,
    --                                        ptotr_uwyr,
    --                                        ptotr_ipu_code,
    --                                        ptotr_pol_batch_no,
    --                                        ptotr_pol_policy_no,
    --                                        ptotr_pol_ren_endos_no,
    --                                        ptotr_risk_cur_symbol,
    --                                        ptotr_trt_cur_symbol,
    --                                        ptotr_sect_code,
    --                                        ptotr_ta_code,
    --                                        ptotr_as_code,
    --                                        ptotr_trs_code,
    --                                        ptotr_trs_sht_desc,
    --                                        ptotr_ggt_tran_no, ptotr_tran_type,
    --                                        ptotr_prev_cession_rate,
    --                                        ptotr_prrd_code,
    --                                        ptotr_earthqke_comm_rate,
    --                                        ptotr_allowed_rate,
    --                                        ptotr_ctl_code
    --                                       )
    --                                VALUES (ptotr_code_seq.NEXTVAL,
    --                                        cur_pol_rec.pol_cur_code,
    --                                        cur_treaties_rec.rei_cur_code,
    --                                        v_reinsure_amt,
    --                                        /*cur_all_risks_rec.IPU_REINSURE_AMT*/
    --                                        cur_all_risks_rec.ipu_endos_diff_amt,
    --                                        cur_treaties_rec.rei_code,
    --                                        cur_treaties_rec.rei_trt_code,
    --                                        cur_treaties_rec.rei_trt_sht_desc,
    --                                        cur_all_risks_rec.ipu_sec_scl_code,
    --                                        --NVL (v_ctl_cede_rate, cur_treaties_rec.rei_cede_rate ),
    --                                        NVL
    --                                           (v_ctl_cede_rate,
    --                                            DECODE
    --                                               (cur_pol_rec.pol_policy_type,
    --                                                'N', cur_treaties_rec.rei_cede_rate,
    --                                                cur_treaties_rec.rei_fi_cede_rate
    --                                               )
    --                                           ),
    --                                        NVL (v_ctl_rate_type,
    --                                             cur_treaties_rec.rei_rate_type
    --                                            ),
    --                                        cur_all_risks_rec.ipu_property_id,
    --                                        v_trt_uwyr,
    --                                        cur_all_risks_rec.ipu_code,
    --                                        cur_all_risks_rec.ipu_pol_batch_no,
    --                                        cur_all_risks_rec.ipu_pol_policy_no,
    --                                        cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                        cur_pol_rec.pol_cur_symbol,
    --                                        cur_treaties_rec.rei_cur_symbol,
    --                                        cur_all_risks_rec.ipu_sec_sect_code,
    --                                        cur_treaties_rec.as_ta_code,
    --                                        cur_treaties_rec.as_code,
    --                                        cur_treaties_rec.rei_trs_code,
    --                                        cur_treaties_rec.rei_trs_sht_desc,
    --                                        v_tran_no, v_tran_type,
    --                                        0,
    --                                        v_prrd_code,
    --                                        cur_treaties_rec.rei_earthqke_comm_rate,
    --                                        --cur_treaties_rec.rei_cede_rate,
    --                                        DECODE
    --                                            (cur_pol_rec.pol_policy_type,
    --                                             'N', cur_treaties_rec.rei_cede_rate,
    --                                             cur_treaties_rec.rei_fi_cede_rate
    --                                            ),
    --                                        v_ctl_code
    --                                       );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error in populate_treaty_details:- Unable to insert new treaty details....'
    --                                 );
    --                        END;

    --                        --insert participants
    --                        FOR cur_participant_rec IN
    --                           cur_participant (cur_treaties_rec.rei_code)
    --                        LOOP
    --                           BEGIN
    --                              INSERT INTO gin_participations
    --                                          (part_code,
    --                                           part_cede_rate,
    --                                           part_trt_code,
    --                                           part_trt_sht_desc,
    --                                           part_agnt_agent_code,
    --                                           part_agnt_sht_desc,
    --                                           part_ptotr_code,
    --                                           part_rei_code,
    --                                           part_pol_cur_code,
    --                                           part_pol_cur_symbol,
    --                                           part_uwyr,
    --                                           part_pol_batch_no,
    --                                           part_pol_policy_no,
    --                                           part_pol_ren_endos_no,
    --                                           part_ipu_code,
    --                                           part_ta_code,
    --                                           part_as_code,
    --                                           part_fiscal_year,
    --                                           part_acc_posted,
    --                                           part_trs_code,
    --                                           part_trs_sht_desc,
    --                                           part_scl_code,
    --                                           part_ggt_tran_no, part_tran_type,
    --                                           part_prrd_code,
    --                                           part_trpa_code
    --                                          )
    --                                   VALUES (gin_part_code_seq.NEXTVAL,
    --                                           cur_participant_rec.trpa_comp_rate,
    --                                           cur_treaties_rec.rei_trt_code,
    --                                           cur_treaties_rec.rei_trt_sht_desc,
    --                                           cur_participant_rec.trpa_agnt_agent_code,
    --                                           cur_participant_rec.trpa_agnt_sht_desc,
    --                                           ptotr_code_seq.CURRVAL,
    --                                           cur_treaties_rec.rei_code,
    --                                           cur_pol_rec.pol_cur_code,
    --                                           cur_pol_rec.pol_cur_symbol,
    --                                           v_trt_uwyr,
    --                                           cur_all_risks_rec.ipu_pol_batch_no,
    --                                           cur_all_risks_rec.ipu_pol_policy_no,
    --                                           cur_all_risks_rec.ipu_pol_ren_endos_no,
    --                                           cur_all_risks_rec.ipu_code,
    --                                           cur_treaties_rec.as_ta_code,
    --                                           cur_treaties_rec.as_code,
    --                                           TO_NUMBER (TO_CHAR (SYSDATE,
    --                                                               'YYYY')
    --                                                     ),
    --                                           'R',
    --                                           cur_treaties_rec.rei_trs_code,
    --                                           cur_treaties_rec.rei_trs_sht_desc,
    --                                           cur_all_risks_rec.ipu_sec_scl_code,
    --                                           v_tran_no, v_tran_type,
    --                                           v_prrd_code,
    --                                           cur_participant_rec.trpa_code
    --                                          );
    --                           EXCEPTION
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_error
    --                                    ('Error in populate_treaty_details:- Unable to insert treaty participants details....'
    --                                    );
    --                           END;
    --                        END LOOP;                               --participants
    --                     END LOOP;                   --cur_treaties_rec main risks
    --                  END IF;
    --               END LOOP;                                 --cur_arrangments_rec

    --               v_grp_flag := FALSE;

    ----raise_error('3322Unable v_retention_amt='||v_retention_amt);
    --        --DBMS_OUTPUT.PUT_LINE('v_arrngmt_defined='||v_arrngmt_defined);
    --               IF     v_arrngmt_defined = 0
    --                  AND NVL (v_reinsure_wot_ri_prog, 'N') = 'N'
    --               THEN
    --                  v_msg :=
    --                        'No RI arrangement defined for the sub class code '
    --                     || cur_all_risks_rec.ipu_sec_scl_code
    --                     || ' Define the Arrangement first. ------ '
    --                     || v_arrngmt_defined;
    --                  raise_error (v_msg);
    --               ELSIF v_arrngmt_defined = 1 AND v_arrangement_type != 'X'
    --               THEN
    --                  --DBMS_OUTPUT.PUT_LINE('cur_all_risks_rec.ipu_eff_wef='||cur_all_risks_rec.ipu_eff_wef);
    --                  FOR cur_cnt_trt_rec IN
    --                     cur_cnt_trt (v_arrangement,
    --                                  v_trt_uwyr,
    --                                  cur_all_risks_rec.ipu_sec_scl_code,
    --                                  cur_all_risks_rec.ipu_eff_wef
    --                                 )
    --                  LOOP
    --                     IF     cur_cnt_trt_rec.cnt = 0
    --                        AND NVL (v_reinsure_wot_ri_prog, 'N') = 'N'
    --                     THEN
    --                        raise_error
    --                           (   'No RI treaties have been setup for the sub class code '
    --                            || cur_all_risks_rec.ipu_sec_scl_code
    --                            || ' UW year '
    --                            || v_trt_uwyr
    --                            || ' Define the treaties first. '
    --                           );
    --                     END IF;
    --                  END LOOP;
    --               END IF;
    --            END IF;
    --         --raise_error('v_prrd_code='||v_prrd_code);
    --         END LOOP;                                         --cur_all_risks_rec
    --      END LOOP;
    --      -- raise_error('v_prrd_code='||v_prrd_code);
    ----   EXCEPTION
    ----      WHEN v_zero_devide
    ----      THEN
    ----         raise_error
    ----            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL...'
    ----            );
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_error ('Error :- unable to populate treaty details errr...');
    --   END;
    PROCEDURE reinsure_risks (v_batch_no           IN NUMBER,
                              v_cur_code           IN NUMBER,
                              v_base_cur_code      IN NUMBER,
                              v_pol_cur_sht_desc   IN VARCHAR2,
                              v_tran_no            IN NUMBER,
                              v_tran_type          IN VARCHAR2,
                              v_ipucode            IN NUMBER)
    IS
        v_d                           NUMBER;
        v_exhange_rate                NUMBER := 1;
        --v_tot_si                      NUMBER          := 0;
        v_amt_to_reinsure             NUMBER := 0;
        --v_trt_rate                    NUMBER;
        v_trt_si_tcur                 NUMBER := 0;
        v_accprd                      NUMBER;
        v_acpr_sht_desc               VARCHAR2 (200);
        v_cession_rate                NUMBER := 0;
        v_trt_prem_tcur               NUMBER := 0;
        v_trt_com_tcur                NUMBER := 0;
        v_trt_si_pcur                 NUMBER := 0;
        v_trt_prem_pcur               NUMBER := 0;
        v_trt_com_pcur                NUMBER := 0;
        v_ptax_amount                 NUMBER := 0;
        v_ptax_tcur                   NUMBER := 0;
        v_ctax_amount                 NUMBER := 0;
        v_ctax_tcur                   NUMBER := 0;
        v_ret_limit                   NUMBER := 0;
        v_gross_ret                   NUMBER := 0;
        v_net_ret                     NUMBER := 0;
        v_prec_tax                    NUMBER := 0;
        v_crec_tax                    NUMBER := 0;
        v_prev_ipu_gp                 NUMBER := 0;
        --      v_trt_rpremtax_pcur           NUMBER          := 0;
        --      v_part_rpremtax_pcur          NUMBER          := 0;
        --      v_trt_premtax_pcur            NUMBER          := 0;
        --      v_part_premtax_pcur           NUMBER          := 0;
        v_prem_tax                    NUMBER;
        v_pol_com                     NUMBER := 0;
        v_prrd_code                   NUMBER;
        v_trt_rprem_tax               NUMBER := 0;
        v_trt_prem_tax                NUMBER := 0;
        v_no_ri_si                    VARCHAR2 (15);
        v_bind_max_exp                NUMBER := 0;
        v_dummy                       NUMBER (2) := 0;
        v_pool_amt                    NUMBER := 0;
        v_trt_eq_prem_pcur            NUMBER := 0;
        v_trt_net_less_eq_prem_pcur   NUMBER := 0;
        v_trt_net_less_eq_comm_pcur   NUMBER := 0;
        v_trt_eq_com_pcur             NUMBER := 0;
        v_rnd                         NUMBER := 0;
        v_bcur_rnd                    NUMBER := 0;
        v_cnt                         NUMBER := 0;
        --      v_part_si_pcur                NUMBER          := 0;
        --      v_part_si_tcur                NUMBER          := 0;
        --      v_part_comm_pcur              NUMBER          := 0;
        --      v_part_comm_tcur              NUMBER          := 0;
        --      v_part_prem_pcur              NUMBER          := 0;
        --      v_part_prem_tcur              NUMBER          := 0;
        --      v_part_code                   NUMBER;
        v_facoblig_excess             NUMBER := 0;
        v_facnorml_excess             NUMBER := 0;
        v_total_facoblig_ceded        NUMBER := 0;
        v_special_ret_limit           NUMBER := 0;
        v_special_ret_diff            NUMBER := 0;
        v_q                           NUMBER;
        v_zero_devide                 EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        v_ctl_si_start_from           NUMBER;
        v_ctl_limit_amt               NUMBER;
        v_pool_si                     NUMBER;
        v_pool_prem                   NUMBER;
        v_pool_rate                   NUMBER;
        v_facoblig_limit              NUMBER;
        v_avail_fulc_bal              NUMBER;
        --      v_part_manafee_pcur           NUMBER          := 0;
        --      v_part_manafee_tcur           NUMBER          := 0;
        v_rein_cur_param              VARCHAR2 (1);
        v_ipu_reinsure_amt            NUMBER := 0;
        v_fac_amt                     NUMBER := 0;
        v_risk_count                  NUMBER := 0;
        v_rsk_excl                    VARCHAR2 (1);
        v_rsk_excl_param              VARCHAR2 (1);
        --      v_trpa_prem_tax_rate   NUMBER;
        --      v_trpa_part_type     VARCHAR2(1);

        v_trt_cur_code                NUMBER;
        v_as_code                     NUMBER;
        v_bcur_code                   NUMBER;
        v_bcur_symbol                 VARCHAR2 (10);
        v_trt_cur_rate                NUMBER;

        v_rc_code                     NUMBER;
        v_retention_amt               NUMBER;
        v_treat_limit_amt             NUMBER;
        v_excess_pct                  NUMBER;
        --   v_prev_fc_amnt NUMBER;
        v_prev_si                     NUMBER;
        v_ret_rate                    NUMBER;
        v_tot_risk_si                 NUMBER;
        v_endors_si                   NUMBER;

        v_gross_ret_is                NUMBER;
        v_comp_net_rate               NUMBER;
        v_comp_net_prem               NUMBER;

        v_ta_type                     VARCHAR2 (2);
        v_prev_net_retention          NUMBER;
        v_trans_sign                  NUMBER;

        v_user                        VARCHAR (30);
        v_ri_cur_rate                 NUMBER;
        v_ri_prem_formular            VARCHAR2 (20);
        v_fc_prem                     NUMBER;
        v_prev_wef                    DATE;
        v_prev_wet                    DATE;

        --select all single the policy risks that have not been reinsured and are ready for reinsurance
        CURSOR cur_all_risks IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     prrd_gross_comp_retention     gross_comp_ret,
                     ipu_pol_est_max_loss,
                     prrd_avail_fulc_bal,
                     prrd_ri_prem,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_sect_sht_desc,
                     ipu_cur_code,
                     prrd_facre_amount,
                     ipu_reinsure_amt,
                     prrd_gross_comp_retention,
                     ipu_prem_tax,
                     ipu_bind_code,
                     ipu_max_exposure,
                     prrd_earthquake_prem,
                     prrd_ri_net_less_eq_prem,
                     pol_prem_tax,
                     pol_binder_policy,
                     pol_cur_symbol,
                     pol_cur_code,
                     prrd_facoblig_excess,
                     prrd_facoblig_limit,
                     prrd_code,
                     ipu_override_ri_retention,
                     prrd_facoblig_user_excess,
                     prrd_facoblig_alloc_chk,
                     prrd_prev_facre_si,
                     prrd_prev_ri_si,
                     pol_exch_rate_fixed,
                     pol_cur_rate,
                     ipu_overrideride_ret_type,
                     ipu_uw_yr,
                     ipu_prev_ipu_code,
                     --get_risk_comp_retention(ipu_id,ipu_uw_yr,ipu_code)
                     prrd_prev_net_retention,
                     ipu_id,
                     prrd_comp_net_rate,
                     ipu_rc_code,
                     ipu_eml_based_on,
                     prrd_comp_ret_edited,
                     pol_policy_status,
                     prrd_tran_no,
                     pol_uw_year,
                     prrd_cumm_ri_prem,
                     prrd_ri_prev_prem,
                     prrd_net_prev_prem,
                     prrd_prev_facre_prem,
                     scl_no_ri_si,
                     prrd_prev_ret_rate
                FROM gin_policies,
                     gin_insured_property_unds,
                     gin_policy_risk_ri_dtls,
                     gin_sub_classes
               WHERE     pol_batch_no = ipu_pol_batch_no
                     AND ipu_code = prrd_ipu_code
                     AND ipu_sec_scl_code = scl_code
                     AND ipu_code = v_ipucode
                     AND prrd_tran_no = v_tran_no
                     --              AND ipu_reinsured = 1
                     AND ipu_pol_batch_no = v_batch_no
            ORDER BY ipu_code;

        --AND IPU_CUMMULATIVE_REINS ='N'
        --AND IPU_RELR_CODE IS NULL
        -- select risk treaty setup
        -- get teaty setups
        CURSOR cur_treaties (v_ipu_code   IN NUMBER,
                             v_type       IN NUMBER,
                             v_prrd          NUMBER)
        IS
              SELECT clt_ta_sht_desc,
                     clt_scl_code,
                     clt_retention_limit,
                     trt_code,
                     trt_sht_desc,
                     trt_level,
                     rei_code,
                     rei_trt_code,
                     rei_trt_sht_desc,
                     rei_comm_rate,
                     rei_limit,
                     ptotr_rate,
                     rei_rate_type,
                     rei_quake_limit,
                     rei_retained_prem,
                     rei_cur_code,
                     rei_cur_symbol,
                     rei_as_code,
                     rei_ta_code,
                     rei_trs_code,
                     rei_trs_sht_desc,
                     NVL (rei_si_start_from, 0)     rei_si_start_from,
                     rei_ri_prem_tax_rate,
                     rei_ri_prem_tax_div_fact,
                     ptotr_property_id,
                     ptotr_uwyr,
                     ptotr_ipu_code,
                     ptotr_pol_batch_no,
                     ptotr_pol_policy_no,
                     ptotr_pol_ren_endos_no,
                     ptotr_sect_code,
                     ptotr_risk_cur_code,
                     rei_earthqke_comm_rate,
                     ptotr_code,
                     ptotr_ctl_code,
                     rei_mgt_fee,
                     ptotr_allowed_rate,
                     ptotr_prev_cession_rate
                FROM gin_policy_rein_risk_details, gin_treaty_setups_vw
               WHERE     ptotr_clt_scl_code = clt_scl_code
                     AND ptotr_rei_code = rei_code
                     AND ptotr_ipu_code = v_ipu_code
                     AND trt_code = v_type
                     AND ptotr_prrd_code = v_prrd
            ORDER BY trt_level, rei_si_start_from;

        --get retention limit
        CURSOR cur_arrangement_det (v_ipu_code NUMBER, v_scl_code NUMBER)
        IS
            SELECT DISTINCT clt_retention_limit
              FROM gin_class_treaties, gin_policy_rein_risk_details
             WHERE     clt_as_code = ptotr_as_code
                   AND ptotr_ipu_code = v_ipu_code
                   AND clt_scl_code = v_scl_code;

        --      CURSOR cur_participant_rate (v_rei_code IN NUMBER)
        --      IS
        --         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
        --                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
        --                trpa_trs_code, trpa_trs_sht_desc,trpa_prem_tax_rate,trpa_part_type,trpa_code
        --           FROM gin_treaty_participants
        --          WHERE trpa_rei_code = v_rei_code;

        ---get tax rates
        CURSOR cur_tax_rates IS
            SELECT taxr_rate,
                   taxr_wef,
                   taxr_wet,
                   trnt_application_lvl,
                   trnt_type,
                   taxr_min_amt,
                   taxr_round_nxt,
                   taxr_trnt_code,
                   taxr_division_factor
              FROM gin_tax_rates, gin_transaction_types
             WHERE     trnt_code = taxr_trnt_code
                   AND (trnt_type LIKE 'WTHTX%' OR trnt_type IN ('PRP'))
                   AND (   (TRUNC (SYSDATE) BETWEEN taxr_wef AND taxr_wet)
                        OR (TRUNC (SYSDATE) >= taxr_wef AND taxr_wet IS NULL));

        CURSOR cur_prev_facre (v_ipu_code IN NUMBER)
        IS
            SELECT *
              FROM gin_facre_cessions
             WHERE fc_ipu_code = v_ipu_code;
    --R0 = Reinsurance tax
    --R1 = Reinsurance premium tax
    --R2 = Reinsurance interest tax
    --R3 = Reinsurance commission tax
    --v_prev_ipu_reinsure_amt NUMBER;
    BEGIN
        BEGIN
            SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR (
                       'CHECK_RISK_EXCL_ZONES')
              INTO v_rsk_excl_param
              FROM DUAL;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_rsk_excl_param := 'N';
        END;


        IF v_rsk_excl_param = 'Y'
        THEN
            BEGIN
                SELECT COUNT (*)
                  INTO v_risk_count
                  FROM gin_insured_property_unds
                 WHERE     ipu_pol_batch_no = v_batch_no
                       AND ipu_quza_code IN
                               (SELECT tuqz_quza_code
                                  FROM gin_treaty_uncvd_quake_zones,
                                       gin_treaty_setups,
                                       gin_class_treaties
                                 WHERE     tuqz_ta_code = rei_ta_code
                                       AND tuqz_as_code = rei_as_code
                                       AND clt_scl_code = ipu_sec_scl_code
                                       AND clt_as_code = rei_as_code
                                       AND rei_uw_year =
                                           TO_NUMBER (
                                               TO_CHAR (ipu_wef, 'RRRR')))
                       AND ipu_quza_code IS NULL;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_risk_count := 0;
            END;
        END IF;

        IF v_risk_count > 0
        THEN
            v_rsk_excl := 'Y';
        ELSE
            v_rsk_excl := 'N';
        END IF;

        v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'REINS_IN_BASE_CURRENCY')
              INTO v_rein_cur_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_rein_cur_param := 'N';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching Treaty  parameter...');
        END;


        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('RI_PREM_FORMULAR')
              INTO v_ri_prem_formular
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_ri_prem_formular := NULL;
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching Reinsurance Premium Calculation Option...');
        END;

        FOR cur_all_risks_rec IN cur_all_risks
        LOOP
            BEGIN
                SELECT ipu_wef, ipu_wet, ipu_gp
                  INTO v_prev_wef, v_prev_wet, v_prev_ipu_gp
                  FROM gin_insured_property_unds
                 WHERE ipu_code = cur_all_risks_rec.ipu_prev_ipu_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            v_prem_tax := NVL (cur_all_risks_rec.ipu_prem_tax, 0);
            v_bind_max_exp := 0;
            v_dummy := 0;

            IF     NVL (v_bind_max_exp, 0) = 0
               AND cur_all_risks_rec.pol_binder_policy = 'Y'
            THEN
                SELECT COUNT ('x')
                  INTO v_dummy
                  FROM gin_binder_details
                 WHERE     db_bind_code = cur_all_risks_rec.ipu_bind_code
                       AND db_scl_code = cur_all_risks_rec.ipu_sec_scl_code;

                IF NVL (v_dummy, 0) > 1
                THEN
                    raise_error (
                        'Setup Error, Maximum accumulation defined more than once for this binder');
                ELSIF NVL (v_dummy, 0) = 1
                THEN
                    BEGIN
                        SELECT db_max_limit
                          INTO v_bind_max_exp
                          FROM gin_binder_details
                         WHERE     db_bind_code =
                                   cur_all_risks_rec.ipu_bind_code
                               AND db_scl_code =
                                   cur_all_risks_rec.ipu_sec_scl_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to retrieve the maximum exposure for the bordereaux scl');
                    END;
                ELSIF NVL (v_dummy, 0) = 0
                THEN
                    BEGIN
                        SELECT NVL (bind_max_exposure, 0)
                          INTO v_bind_max_exp
                          FROM gin_binders
                         WHERE bind_code = cur_all_risks_rec.ipu_bind_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to retrieve the maxmium exposure for the bordereaux');
                    END;
                END IF;

                IF     NVL (v_bind_max_exp, 0) > 0
                   AND NVL (v_bind_max_exp, 0) <
                       NVL (cur_all_risks_rec.ipu_max_exposure, 0)
                THEN
                    raise_error (
                           'The maximum exposure amount for the risk '
                        || cur_all_risks_rec.ipu_property_id
                        || ' is greater than the allowed limit of '
                        || v_bind_max_exp);
                END IF;
            END IF;

            ------------------


            IF     NVL (cur_all_risks_rec.scl_no_ri_si, 'N') = 'N'
               AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
            THEN
                raise_error (
                    'No reinsure amount specified, cannot reinsure this risk');
            END IF;

            BEGIN
                v_prrd_code := NULL;

                SELECT prrd_code, PRRD_AS_CODE
                  INTO v_prrd_code, v_as_code
                  FROM gin_policy_risk_ri_dtls
                 WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                       AND prrd_tran_no = v_tran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'Error :- Unable Please populate treaties again....');
            END;

            BEGIN
                SELECT DISTINCT ta_cur_code, TA_TYPE, REI_CUR_RATE
                  INTO v_trt_cur_code, v_ta_type, v_ri_cur_rate
                  FROM gin_class_treaties,
                       gin_arrangement_setups,
                       gin_treaty_arrangements,
                       gin_treaty_setups -- for now... this needs to be looked into afresh
                 WHERE     as_ta_code = ta_code
                       AND clt_as_code = as_code
                       AND clt_scl_code = cur_all_risks_rec.ipu_sec_scl_code
                       AND AS_CODE = v_as_code
                       AND REI_AS_CODE = as_code
                       AND REI_TA_CODE = ta_code
                       AND as_uwyr = cur_all_risks_rec.ipu_uw_yr;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    raise_error (
                        'Unable to retrieve the arrangement retention limit');
            END;

            IF     NVL (v_rein_cur_param, 'N') = 'Y'
               AND v_trt_cur_code != cur_all_risks_rec.pol_cur_code
            THEN
                IF v_bcur_code = v_trt_cur_code
                THEN
                    v_ipu_reinsure_amt :=
                        (NVL (cur_all_risks_rec.ipu_reinsure_amt, 0));
                ELSE
                    v_ipu_reinsure_amt :=
                          (NVL (cur_all_risks_rec.ipu_reinsure_amt, 0))
                        / cur_all_risks_rec.pol_cur_rate;
                END IF;
            ELSE
                v_ipu_reinsure_amt :=
                    NVL (cur_all_risks_rec.ipu_reinsure_amt, 0);
            END IF;

            SELECT SIGN (NVL (cur_all_risks_rec.prrd_ri_prem, 0))
              INTO v_trans_sign
              FROM DUAL;

            IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code
            THEN
                IF    (v_bcur_code = v_trt_cur_code)
                   OR (NVL (cur_all_risks_rec.pol_exch_rate_fixed, 'N') = 'Y')
                THEN
                    -- v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt / cur_all_risks_rec.pol_cur_rate,  v_rnd  );
                    v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
                ELSE
                    v_trt_cur_rate :=
                        get_exchange_rate (v_bcur_code, v_trt_cur_code);
                    v_exhange_rate := v_trt_cur_rate;
                --v_ipu_reinsure_amt := ROUND (  v_ipu_reinsure_amt / nvl(v_ri_cur_rate,v_trt_cur_rate),  v_rnd );
                END IF;
            ELSE
                v_ipu_reinsure_amt := ROUND (v_ipu_reinsure_amt, v_rnd);
            END IF;

            v_pool_si := get_risk_ri_pool (cur_all_risks_rec.prrd_code);
            v_pool_prem := get_ri_pool_prem (cur_all_risks_rec.prrd_code);
            v_pool_rate := get_ri_pool_rate (cur_all_risks_rec.prrd_code);
            v_prev_net_retention :=
                NVL (cur_all_risks_rec.prrd_prev_net_retention, 0);

            --          SELECT decode(NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+ NVL(v_prev_net_retention,0)),0,v_ipu_reinsure_amt,NVL(v_ipu_reinsure_amt,0)-(nvl(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(v_prev_net_retention,0)))
            --          INTO v_tot_si FROM DUAL;

            v_tot_risk_si := v_ipu_reinsure_amt;
            v_avail_fulc_bal := 0; --NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0);
            DBMS_OUTPUT.put_line (
                'v_ipu_reinsure_amt=' || v_ipu_reinsure_amt);
            v_amt_to_reinsure :=
                (  NVL (                /*cur_all_risks_rec.ipu_reinsure_amt*/
                        v_ipu_reinsure_amt, 0)
                 - NVL (v_avail_fulc_bal, 0)
                 - (NVL (cur_all_risks_rec.prrd_facre_amount, 0))
                 - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
                 - NVL (v_pool_si, 0));
            DBMS_OUTPUT.put_line (
                'prrd_facre_amount=' || cur_all_risks_rec.prrd_facre_amount);
            DBMS_OUTPUT.put_line (
                   'v_amt_to_reinsure='
                || v_amt_to_reinsure
                || 'v_avail_fulc_bal='
                || v_avail_fulc_bal
                || 'v_pool_si='
                || v_pool_si
                || 'v_amt_to_reinsure='
                || v_amt_to_reinsure);
            DBMS_OUTPUT.put_line (
                  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0));
            DBMS_OUTPUT.put_line (
                  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                - NVL (cur_all_risks_rec.prrd_facre_amount, 0));

            IF NVL (v_amt_to_reinsure, 0) < 0
            THEN
                IF NVL (v_pool_si, 0) >
                   (  NVL (v_ipu_reinsure_amt /*cur_all_risks_rec.ipu_reinsure_amt*/
                                             , 0)
                    - NVL (cur_all_risks_rec.prrd_facre_amount, 0))
                THEN
                    raise_error (
                           'The pool rate specified is greater than the available excess on risk. Please remove some of the facre cessions..'
                        || v_pool_si
                        || ';'
                        || v_ipu_reinsure_amt
                        || ';'
                        || cur_all_risks_rec.prrd_facre_amount);
                ELSIF NVL (v_pool_si, 0) <
                      (  NVL (          /*cur_all_risks_rec.ipu_reinsure_amt*/
                              v_ipu_reinsure_amt, 0)
                       - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                       - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0))
                THEN
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_avail_fulc_bal = 0
                     WHERE prrd_code = v_prrd_code;

                    v_avail_fulc_bal := 0;
                    v_amt_to_reinsure :=
                        (  NVL (        /*cur_all_risks_rec.ipu_reinsure_amt*/
                                v_ipu_reinsure_amt, 0)
                         - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                         - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
                         - NVL (v_pool_si, 0));
                ELSIF NVL (v_pool_si, 0) <
                      (  NVL (          /*cur_all_risks_rec.ipu_reinsure_amt*/
                              v_ipu_reinsure_amt, 0)
                       - NVL (cur_all_risks_rec.prrd_facre_amount, 0))
                THEN
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_avail_fulc_bal = 0, prrd_facoblig_excess = 0
                     WHERE prrd_code = v_prrd_code;

                    v_avail_fulc_bal := 0;
                    v_amt_to_reinsure :=
                        (  NVL (        /*cur_all_risks_rec.ipu_reinsure_amt*/
                                v_ipu_reinsure_amt, 0)
                         - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                         - NVL (v_pool_si, 0));
                END IF;
            END IF;

            DBMS_OUTPUT.put_line (
                   'v_amt_to_reinsure='
                || v_amt_to_reinsure
                || 'v_pool_si='
                || v_pool_si
                || 'v_amt_to_reinsure='
                || v_amt_to_reinsure);
            DBMS_OUTPUT.put_line (
                  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0));
            DBMS_OUTPUT.put_line (
                  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                - NVL (cur_all_risks_rec.prrd_facre_amount, 0));

            --RAISE_ERROR(34);
            --raise_error(v_amt_to_reinsure);
            IF NVL (v_amt_to_reinsure, 0) = 0
            THEN
                UPDATE gin_policy_risk_ri_dtls
                   SET prrd_com_retention_rate =
                           (  100
                            - (  NVL (v_pool_rate, 0)
                               + NVL (prrd_facre_rate, 0))),
                       prrd_comp_net_rate =
                           (  100
                            - (  NVL (v_pool_rate, 0)
                               + NVL (prrd_facre_rate, 0))),
                       /* REMMED OUT BY MAYNARD.02092019. THE BASED_ON_CHANGE SHOULD WORK BASED ON ANNUAL PREMIUM */
                       --                   prrd_net_prem =ROUND (  ((100 - (NVL (v_pool_rate, 0)+ NVL(prrd_facre_rate,0))) / 100)  * NVL (prrd_ri_prem, 0), 2 )
                       prrd_net_prem =
                           ROUND (
                                 (  (  100
                                     - (  NVL (v_pool_rate, 0)
                                        + NVL (prrd_facre_rate, 0)))
                                  / 100)
                               * NVL (cur_all_risks_rec.ipu_gp, 0),
                               2)
                 WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                       AND prrd_code = v_prrd_code
                       AND prrd_tran_no = v_tran_no;
            END IF;

            --MANDATORY
            FOR cur_treaties_rec
                IN cur_treaties (cur_all_risks_rec.ipu_code,
                                 1001,
                                 v_prrd_code)
            LOOP                                -- Its A Mandatory Type treaty
                check_treaty_participation (cur_treaties_rec.rei_code);
                -- calculate treaty sum insured in policy currency
                --                v_tot_si := v_ipu_reinsure_amt;
                v_prev_net_retention := 0;
                v_trt_si_pcur :=
                    v_tot_risk_si * (cur_treaties_rec.ptotr_rate / 100);
                v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
                -- Culculate treaty premium
                --               RAISE_ERROR('v_trt_si_pcur11111='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
                v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;

                --DBMS_OUTPUT.PUT_LINE('v_cession_rate='||v_cession_rate);
                IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                      'BASED_ON_CESSION'
                   OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB',
                                                               'RN',
                                                               'EX',
                                                               'SP',
                                                               'CN'))
                   OR NVL (cur_all_risks_rec.IPU_FP, 0) != 0
                   OR NVL (cur_all_risks_rec.PRRD_RI_PREM, 0) = 0
                   OR (    cur_all_risks_rec.POL_POLICY_STATUS = 'EN'
                       AND cur_all_risks_rec.ipu_wef = v_prev_wef
                       AND cur_all_risks_rec.ipu_wet = v_prev_wet
                       AND cur_all_risks_rec.ipu_gp = v_prev_ipu_gp)
                THEN
                    v_trt_net_less_eq_prem_pcur :=
                        ROUND (
                              v_cession_rate
                            * NVL (
                                  cur_all_risks_rec.prrd_ri_net_less_eq_prem,
                                  0)
                            / 100,
                            v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 24325::v_trt_net_less_eq_prem_pcur='
                        || v_trt_net_less_eq_prem_pcur);
                    v_trt_eq_prem_pcur :=
                        ROUND (
                              v_cession_rate
                            * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0)
                            / 100,
                            v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 24332::v_trt_eq_prem_pcur='
                        || v_trt_eq_prem_pcur);
                    v_trt_prem_pcur :=
                          NVL (v_trt_eq_prem_pcur, 0)
                        + NVL (v_trt_net_less_eq_prem_pcur, 0);
                    v_trt_prem_tcur :=
                        ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
                ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                      'BASED_ON_CHANGE'
                THEN
                    v_trt_net_less_eq_prem_pcur :=
                          (  (v_cession_rate / 100 * cur_all_risks_rec.ipu_GP)
                           - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                              / 100
                              * cur_all_risks_rec.ipu_GP)
                           + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                              / 100
                              * cur_all_risks_rec.PRRD_RI_PREM))
                        * cur_all_risks_rec.prrd_ri_net_less_eq_prem
                        / cur_all_risks_rec.PRRD_RI_PREM;
                    v_trt_net_less_eq_prem_pcur :=
                        ROUND (v_trt_net_less_eq_prem_pcur, v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 24694::v_trt_net_less_eq_prem_pcur='
                        || v_trt_net_less_eq_prem_pcur);
                    v_trt_eq_prem_pcur :=
                          (  (v_cession_rate / 100 * cur_all_risks_rec.ipu_GP)
                           - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                              / 100
                              * cur_all_risks_rec.ipu_GP)
                           + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                              / 100
                              * cur_all_risks_rec.PRRD_RI_PREM))
                        * cur_all_risks_rec.prrd_earthquake_prem
                        / cur_all_risks_rec.PRRD_RI_PREM;
                    v_trt_eq_prem_pcur := ROUND (v_trt_eq_prem_pcur, v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 24708::v_trt_eq_prem_pcur='
                        || v_trt_eq_prem_pcur);
                    v_trt_prem_pcur :=
                          NVL (v_trt_eq_prem_pcur, 0)
                        + NVL (v_trt_net_less_eq_prem_pcur, 0);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 24712::v_trt_prem_pcur='
                        || v_trt_prem_pcur);
                    v_trt_prem_tcur :=
                        ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 24715::v_trt_prem_tcur='
                        || v_trt_prem_tcur);
                END IF;

                v_amt_to_reinsure := (v_amt_to_reinsure - v_trt_si_tcur);
                /*********tax part**************************/
                --------calculate reinsurance tax, reinsurance commission tax part
                v_ptax_amount := 0;
                v_ctax_amount := 0;
                v_ptax_tcur := 0;
                v_ctax_tcur := 0;
                v_ptax_amount := ROUND (NVL (v_prem_tax, 0), v_rnd);
                v_ctax_amount :=
                    ROUND (NVL (v_pol_com, 0) * v_cession_rate, v_rnd);
                v_ptax_tcur := v_ptax_amount * v_exhange_rate;
                v_ctax_tcur := v_ctax_amount * v_exhange_rate;

/***************Amended::28.02.2020::Maynard:: Commission should be net of WHTX   ****/
                -- calculate mandatory commission
                v_trt_net_less_eq_comm_pcur :=
                    ROUND (
                        (  (  (v_trt_net_less_eq_prem_pcur - v_ptax_amount)
                            * cur_treaties_rec.rei_comm_rate)
                         / 100),
                        v_rnd);
                v_trt_eq_com_pcur :=
                    ROUND (
                        (  (  (v_trt_eq_prem_pcur - v_ptax_amount)
                            * cur_treaties_rec.rei_earthqke_comm_rate)
                         / 100),
                        v_rnd);
                --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
                v_trt_com_pcur :=
                      NVL (v_trt_net_less_eq_comm_pcur, 0)
                    + NVL (v_trt_eq_com_pcur, 0);
                v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;

                /***********************************************************************/
                UPDATE gin_policy_rein_risk_details
                   SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
                       ptotr_risk_si_tcur =
                           ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
                       ptotr_risk_prem_tcur =
                           ROUND (
                                 cur_all_risks_rec.prrd_ri_prem
                               * v_exhange_rate,
                               v_bcur_rnd),
                       ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
                       ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
                       ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
                       ptotr_trt_prem_tcur =
                           ROUND (v_trt_prem_tcur, v_bcur_rnd),
                       ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
                       ptotr_earthqke_comm_rate =
                           cur_treaties_rec.rei_earthqke_comm_rate,
                       ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
                       ptotr_trt_comm_tcur =
                           ROUND (v_trt_com_tcur, v_bcur_rnd),
                       ptotr_cession_pct = ROUND (v_cession_rate, 4),
                       ptotr_acpr_sht_desc = v_acpr_sht_desc,
                       ptotr_acpr_code = v_accprd,
                       ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
                       ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
                       ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
                       ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
                       ptotr_ggt_tran_no = v_tran_no,
                       ptotr_tran_type = v_tran_type,
                       ptotr_earthqke_prem =
                           ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
                       ptotr_earthqke_comm =
                           ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
                       ptotr_net_less_eq_prem =
                           ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
                       ptotr_net_less_eq_comm =
                           ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
                 WHERE     ptotr_ipu_code = cur_all_risks_rec.ipu_code
                       AND ptotr_as_code = cur_treaties_rec.rei_as_code
                       AND ptotr_rei_code = cur_treaties_rec.rei_code
                       AND ptotr_prrd_code = v_prrd_code;

                /************************start participartion *****/
                --               v_trt_rpremtax_pcur := 0;
                --               v_trt_premtax_pcur := 0;



                Update_treaty_partipants (
                    cur_treaties_rec.rei_code,
                    v_prrd_code,
                    cur_treaties_rec.ptotr_code,
                    v_trt_si_pcur,
                    v_trt_si_tcur,
                    v_trt_prem_pcur,
                    v_trt_prem_tcur,
                    v_trt_com_pcur,
                    v_trt_com_tcur,
                    cur_all_risks_rec.pol_cur_code,
                    cur_all_risks_rec.pol_cur_symbol,
                    cur_all_risks_rec.ipu_pol_batch_no,
                    cur_all_risks_rec.ipu_pol_policy_no,
                    cur_all_risks_rec.ipu_pol_ren_endos_no,
                    v_tran_no,
                    v_tran_type,
                    cur_all_risks_rec.ipu_code,
                    cur_all_risks_rec.ipu_sec_scl_code,
                    v_exhange_rate,
                    v_rnd,
                    v_bcur_rnd);
            END LOOP;                                            --- mandatory



            /* v_ret_limit := NVL(cur_all_risks_rec.prrd_gross_comp_retention,0)-NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
            IF v_amt_to_reinsure > NVL (v_ret_limit, 0) THEN
               IF SIGN(NVL(v_ret_limit,0)) =-1 THEN
                 v_ret_limit :=0;
               END IF;
                v_gross_ret := NVL (v_ret_limit, 0);
            ELSE
               v_gross_ret := v_amt_to_reinsure;
            END IF;*/
            /*get subclass gross retention from the setups. Function get_scl_uwyr_g_ret*/
            IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code
            THEN
                IF    (v_bcur_code = v_trt_cur_code)
                   OR     (NVL (cur_all_risks_rec.pol_exch_rate_fixed, 'N') =
                           'Y')
                      AND NVL (v_rein_cur_param, 'N') = 'Y'
                THEN
                    IF (v_bcur_code = v_trt_cur_code)
                    THEN
                        v_retention_amt :=
                            ROUND (
                                  get_scl_uwyr_g_ret (
                                      cur_all_risks_rec.ipu_uw_yr,
                                      cur_all_risks_rec.ipu_sec_scl_code,
                                      v_bcur_code,
                                      cur_all_risks_rec.ipu_rc_code)
                                / cur_all_risks_rec.pol_cur_rate,
                                v_rnd);
                    ELSE
                        v_retention_amt :=
                            ROUND (
                                get_scl_uwyr_g_ret (
                                    cur_all_risks_rec.ipu_uw_yr,
                                    cur_all_risks_rec.ipu_sec_scl_code,
                                    v_bcur_code,
                                    cur_all_risks_rec.ipu_rc_code),
                                v_rnd);
                    END IF;
                ELSE
                    v_retention_amt :=
                        ROUND (
                              get_scl_uwyr_g_ret (
                                  cur_all_risks_rec.ipu_uw_yr,
                                  cur_all_risks_rec.ipu_sec_scl_code,
                                  v_trt_cur_code,
                                  cur_all_risks_rec.ipu_rc_code)
                            * NVL (v_ri_cur_rate, v_trt_cur_rate),
                            v_rnd);
                END IF;
            ELSE
                v_retention_amt :=
                    get_scl_uwyr_g_ret (cur_all_risks_rec.ipu_uw_yr,
                                        cur_all_risks_rec.ipu_sec_scl_code,
                                        v_cur_code,
                                        cur_all_risks_rec.ipu_rc_code);
            END IF;

            DBMS_OUTPUT.put_line (
                   '1 be qst v_amt_to_reinsure='
                || v_amt_to_reinsure
                || 'v_gross_ret='
                || v_gross_ret
                || 'v_prrd_code='
                || v_prrd_code
                || 'v_special_ret_diff='
                || v_special_ret_diff
                || 'prrd_gross_comp_retention='
                || cur_all_risks_rec.prrd_gross_comp_retention
                || 'v_retention_amt='
                || v_retention_amt
                || 'prrd_comp_ret_edited='
                || cur_all_risks_rec.prrd_comp_ret_edited
                || 'v_ret_limit='
                || v_ret_limit);

            IF NVL (cur_all_risks_rec.prrd_gross_comp_retention, 0) <>
               NVL (v_retention_amt, 0) /*AND NVL(cur_all_risks_rec.prrd_comp_ret_edited,'N') ='Y' cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */
            THEN
                v_retention_amt :=
                    cur_all_risks_rec.prrd_gross_comp_retention;
            END IF;

            --v_retention_amt :=cur_all_risks_rec.prrd_gross_comp_retention;
            IF v_amt_to_reinsure < v_retention_amt
            THEN
                v_ret_limit := NVL (v_amt_to_reinsure, 0); ---NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
            ELSE
                v_ret_limit := v_retention_amt; -- -NVL(cur_all_risks_rec.prrd_prev_net_retention,0);
            END IF;

            DBMS_OUTPUT.put_line (
                   '1 be qst v_amt_to_reinsure='
                || v_amt_to_reinsure
                || 'v_gross_ret='
                || v_gross_ret
                || 'v_ipu_reinsure_amt='
                || v_ipu_reinsure_amt
                || 'v_special_ret_diff='
                || v_special_ret_diff
                || 'prrd_gross_comp_retention='
                || cur_all_risks_rec.prrd_gross_comp_retention
                || 'v_retention_amt='
                || v_retention_amt
                || 'prrd_comp_ret_edited='
                || cur_all_risks_rec.prrd_comp_ret_edited
                || 'v_ret_limit='
                || v_ret_limit);

            IF v_amt_to_reinsure > NVL (v_ret_limit, 0)
            THEN
                IF SIGN (NVL (v_ret_limit, 0)) = -1
                THEN
                    v_ret_limit := 0;
                END IF;

                v_gross_ret := NVL (v_ret_limit, 0);
            ELSE
                v_gross_ret := v_amt_to_reinsure;
            END IF;

            IF NVL (v_amt_to_reinsure, 0) > NVL (v_retention_amt, 0)
            THEN
                v_amt_to_reinsure :=
                    NVL (v_amt_to_reinsure, 0) - NVL (v_retention_amt, 0);
            --     v_amt_to_reinsure := NVL(v_tot_risk_si,0)-NVL(v_retention_amt,0);
            ELSE
                v_amt_to_reinsure := 0;
            END IF;

            v_special_ret_limit := v_gross_ret;
            v_special_ret_diff := 0;

            IF NVL (cur_all_risks_rec.ipu_override_ri_retention, 0) != 0
            THEN
                v_special_ret_limit :=
                    NVL (cur_all_risks_rec.ipu_override_ri_retention, 0);

                IF v_special_ret_limit > v_amt_to_reinsure
                THEN
                    v_special_ret_limit := v_amt_to_reinsure;
                END IF;

                v_special_ret_diff := v_special_ret_limit - v_gross_ret;
            END IF;

            --          v_special_ret_limit :=
            --                      NVL (v_amt_to_reinsure, 0);
            --            v_amt_to_reinsure :=
            --                      NVL (v_amt_to_reinsure, 0)
            --                      - NVL (v_special_ret_limit, 0);
            --       RAISE_ERROR(v_special_ret_limit||';'||v_amt_to_reinsure);
            --           IF v_rsk_excl = 'Y'
            --           THEN
            --               v_facnorml_excess    :=v_amt_to_reinsure;
            --               v_facoblig_limit       :=v_amt_to_reinsure;
            --               v_fac_amt :=  v_amt_to_reinsure;
            --               v_amt_to_reinsure :=0;
            --           END IF;

            v_net_ret := 0;
            v_gross_ret := NVL (v_gross_ret, 0);
            DBMS_OUTPUT.put_line (
                   '2 be qst v_amt_to_reinsure='
                || v_amt_to_reinsure
                || 'v_gross_ret='
                || v_gross_ret
                || 'v_prrd_code='
                || v_prrd_code
                || 'v_special_ret_diff='
                || v_special_ret_diff);
            -- process quota share
            v_pool_amt := 0;

            --raise_error(v_gross_ret);
            --RAISE_ERROR('IPU_CODE='||cur_all_risks_rec.ipu_code||'v_prrd_code='||v_prrd_code);
            FOR cur_treaties_rec
                IN cur_treaties (cur_all_risks_rec.ipu_code,
                                 1003,
                                 v_prrd_code)
            LOOP
                check_treaty_participation (cur_treaties_rec.rei_code);
                --QUOTA SHARE
                --RAISE_eRROR('ERERE');
                -- Its A Quota share Type treaty
                -- calculate treaty sum insured in policy currency
                v_tot_risk_si := v_ipu_reinsure_amt;

                v_retention_amt :=
                    cur_all_risks_rec.prrd_gross_comp_retention;
                v_prev_net_retention := 0;
                DBMS_OUTPUT.put_line (
                       'startfrrom='
                    || (  NVL (cur_treaties_rec.rei_si_start_from, 0)
                        * v_exhange_rate)
                    || 'vgrossret='
                    || NVL (v_gross_ret, 0));

                --            raise_error(v_ipu_reinsure_amt||';'||v_retention_amt);
                IF NVL (v_tot_risk_si, 0) = 0
                THEN
                    v_tot_risk_si := 100;
                    v_retention_amt := 100;
                    v_gross_ret := 100;
                END IF;

                BEGIN
                    SELECT ctl_si_start_from, ctl_limit_amt
                      INTO v_ctl_si_start_from, v_ctl_limit_amt
                      FROM gin_class_treaty_limits
                     WHERE ctl_code = cur_treaties_rec.ptotr_ctl_code;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        NULL;
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error fetching class treaty quota share limits....');
                END;


                IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code
                THEN
                    IF    (v_bcur_code = v_trt_cur_code)
                       OR     (NVL (cur_all_risks_rec.pol_exch_rate_fixed,
                                    'N') =
                               'Y')
                          AND NVL (v_rein_cur_param, 'N') = 'Y'
                    THEN
                        IF (v_bcur_code = v_trt_cur_code)
                        THEN
                            v_ctl_si_start_from :=
                                  NVL (
                                      NVL (
                                          v_ctl_si_start_from,
                                          cur_treaties_rec.rei_si_start_from),
                                      0)
                                / cur_all_risks_rec.pol_cur_rate;
                            v_ctl_limit_amt :=
                                  NVL (v_ctl_limit_amt,
                                       cur_treaties_rec.rei_limit)
                                / cur_all_risks_rec.pol_cur_rate;
                        --                        RAISE_ERROR('v_ctl_limit_amt='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
                        ELSE
                            v_ctl_si_start_from :=
                                NVL (
                                    NVL (v_ctl_si_start_from,
                                         cur_treaties_rec.rei_si_start_from),
                                    0);
                            v_ctl_limit_amt :=
                                NVL (v_ctl_limit_amt,
                                     cur_treaties_rec.rei_limit);
                        --                       RAISE_ERROR('v_ctl_limit_amt111='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si);
                        END IF;
                    ELSE
                        v_ctl_si_start_from :=
                              NVL (
                                  NVL (v_ctl_si_start_from,
                                       cur_treaties_rec.rei_si_start_from),
                                  0)
                            * NVL (v_ri_cur_rate, v_trt_cur_rate);
                        v_ctl_limit_amt :=
                              NVL (v_ctl_limit_amt,
                                   cur_treaties_rec.rei_limit)
                            * NVL (v_ri_cur_rate, v_trt_cur_rate);
                    --                   RAISE_ERROR('v_ctl_limit_amt22='||v_ctl_limit_amt||'v_tot_risk_si='||v_tot_risk_si||'REI LIMIT='||cur_treaties_rec.rei_limit||'v_ri_cur_rate='||v_ri_cur_rate||'v_trt_cur_rate='||v_trt_cur_rate);
                    END IF;
                ELSE
                    v_ctl_si_start_from :=
                        NVL (
                            NVL (v_ctl_si_start_from,
                                 cur_treaties_rec.rei_si_start_from),
                            0);
                    v_ctl_limit_amt :=
                        NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);
                END IF;

                --IF (NVL(cur_treaties_rec.REI_SI_START_FROM,0) * v_exhange_rate) < NVL(v_gross_ret,0) THEN
                --         RAISE_ERROR(v_exhange_rate||';'||v_ctl_si_start_from||';'||v_gross_ret);
                --            RAISE_ERROR(
                --                     'GIS_RI_PROCEDURES::LN 25024::v_ctl_si_start_from='
                --                  || v_ctl_si_start_from||' AND v_gross_ret='
                --                  || v_gross_ret||' AND v_exhange_rate='
                --                  || v_exhange_rate);
                IF (NVL (v_ctl_si_start_from, 0) * v_exhange_rate) <
                   NVL (v_gross_ret, 0)
                THEN
                    v_gross_ret := NVL (v_gross_ret, 0) - NVL (v_pool_amt, 0);

                    IF NVL (v_gross_ret, 0) >
                       (NVL (v_ctl_limit_amt, 0) * v_exhange_rate)
                    THEN
                        v_trt_si_pcur :=
                            ROUND (
                                  NVL (v_ctl_limit_amt, 0)
                                * v_exhange_rate
                                * (cur_treaties_rec.ptotr_rate / 100));
                        v_net_ret :=
                              NVL (v_net_ret, 0)
                            + (  (  NVL (v_ctl_limit_amt, 0)
                                  * NVL (v_exhange_rate, 0))
                               - NVL (v_trt_si_pcur, 0));
                    --                      RAISE_ERROR('v_trt_si_pcur222='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
                    ELSE
                        v_trt_si_pcur :=
                            ROUND (
                                  NVL (v_gross_ret, 0)
                                * (NVL (cur_treaties_rec.ptotr_rate, 0) / 100));
                        v_net_ret :=
                              NVL (v_net_ret, 0)
                            + (NVL (v_gross_ret, 0) - NVL (v_trt_si_pcur, 0));
                    --                       RAISE_ERROR('v_trt_si_pcur333='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
                    --raise_error (   'v_gross_ret=' || v_gross_ret  || 'v_trt_si_pcur='  || v_trt_si_pcur || 'v_net_ret=' || v_net_ret  );
                    END IF;

                    v_gross_ret := v_net_ret;
                    --RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_trt_si_pcur||';'||v_tot_si||';'||v_exhange_rate);
                    DBMS_OUTPUT.put_line (
                           ' v_ipu_code='
                        || cur_all_risks_rec.ipu_code
                        || ' v_type='
                        || 1003
                        || ' v_prrd='
                        || v_prrd_code);
                    DBMS_OUTPUT.put_line (
                        '    v_trt_si_pcur=' || v_trt_si_pcur);
                    DBMS_OUTPUT.put_line ('    v_net_ret=' || v_net_ret);
                    v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
                    -- Culculate treaty premium
                    --                  RAISE_ERROR('v_trt_si_pcur='||v_trt_si_pcur||'v_tot_risk_si='||v_tot_risk_si);
                    v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;

                    --         RAISE_ERROR('v_cession_rate='||v_cession_rate);
                    IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CESSION'
                       OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB',
                                                                   'RN',
                                                                   'EX',
                                                                   'SP',
                                                                   'CN'))
                       OR NVL (cur_all_risks_rec.IPU_FP, 0) != 0
                       OR NVL (cur_all_risks_rec.PRRD_RI_PREM, 0) = 0
                       OR (    cur_all_risks_rec.POL_POLICY_STATUS = 'EN'
                           AND cur_all_risks_rec.ipu_wef = v_prev_wef
                           AND cur_all_risks_rec.ipu_wet = v_prev_wet
                           AND cur_all_risks_rec.ipu_gp = v_prev_ipu_gp)
                    THEN
                        v_trt_net_less_eq_prem_pcur :=
                            ROUND (
                                  v_cession_rate
                                * NVL (
                                      cur_all_risks_rec.prrd_ri_net_less_eq_prem,
                                      0)
                                / 100,
                                v_rnd);
                        --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
                        v_trt_eq_prem_pcur :=
                            ROUND (
                                  v_cession_rate
                                * NVL (
                                      cur_all_risks_rec.prrd_earthquake_prem,
                                      0)
                                / 100,
                                v_rnd);
                        --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
                        v_trt_prem_pcur :=
                              NVL (v_trt_eq_prem_pcur, 0)
                            + NVL (v_trt_net_less_eq_prem_pcur, 0);
                        v_trt_prem_tcur :=
                            ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                    --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
                    ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CHANGE'
                    THEN
                        v_trt_net_less_eq_prem_pcur :=
                              (  (  v_cession_rate
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.PRRD_RI_PREM))
                            * cur_all_risks_rec.prrd_ri_net_less_eq_prem
                            / cur_all_risks_rec.PRRD_RI_PREM;
                        v_trt_net_less_eq_prem_pcur :=
                            ROUND (v_trt_net_less_eq_prem_pcur, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                               'v_trt_net_less_eq_prem_pcur='
                            || v_trt_net_less_eq_prem_pcur);
                        v_trt_eq_prem_pcur :=
                              (  (  v_cession_rate
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.PRRD_RI_PREM))
                            * cur_all_risks_rec.prrd_earthquake_prem
                            / cur_all_risks_rec.PRRD_RI_PREM;
                        v_trt_eq_prem_pcur :=
                            ROUND (v_trt_eq_prem_pcur, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_eq_prem_pcur=' || v_trt_eq_prem_pcur);
                        v_trt_prem_pcur :=
                              NVL (v_trt_eq_prem_pcur, 0)
                            + NVL (v_trt_net_less_eq_prem_pcur, 0);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_prem_pcur=' || v_trt_prem_pcur);
                        v_trt_prem_tcur :=
                            ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_prem_tcur=' || v_trt_prem_tcur);
                    END IF;

                    -- calculate QUOTA commission
--                    v_trt_net_less_eq_comm_pcur :=
--                        ROUND (
--                            (  (  v_trt_net_less_eq_prem_pcur
--                                * cur_treaties_rec.rei_comm_rate)
--                             / 100),
--                            v_rnd);
--                    v_trt_eq_com_pcur :=
--                        ROUND (
--                            (  (  v_trt_eq_prem_pcur
--                                * cur_treaties_rec.rei_earthqke_comm_rate)
--                             / 100),
--                            v_rnd);
--                    v_trt_com_pcur :=
--                          NVL (v_trt_net_less_eq_comm_pcur, 0)
--                        + NVL (v_trt_eq_com_pcur, 0);
--                    v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
                    v_pool_amt :=
                          NVL (v_pool_amt, 0)
                        + (  NVL (v_gross_ret, 0)
                           - (NVL (v_net_ret, 0) + NVL (v_trt_si_pcur, 0)));
                    /*********tax part**************************/
                    --------calculate reinsurance tax, reinsurance commission tax part
                    v_ptax_tcur := 0;
                    v_ctax_tcur := 0;
                    v_ptax_amount :=
                        ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,
                               v_rnd);
                    v_ctax_amount :=
                        ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,
                               v_rnd);
                    v_ptax_tcur :=
                        ROUND (v_ptax_amount * v_exhange_rate, v_bcur_rnd);
                    v_ctax_tcur :=
                        ROUND (v_ctax_amount * v_exhange_rate, v_bcur_rnd);

/***************Amended::28.02.2020::Maynard:: Commission should be net of WHTX   ****/
                    -- calculate QS commission
                    v_trt_net_less_eq_comm_pcur :=
                        ROUND (
                            (  (  (v_trt_net_less_eq_prem_pcur - v_ptax_amount)
                                * cur_treaties_rec.rei_comm_rate)
                             / 100),
                            v_rnd);
                    v_trt_eq_com_pcur :=
                        ROUND (
                            (  (  (v_trt_eq_prem_pcur - v_ptax_amount)
                                * cur_treaties_rec.rei_earthqke_comm_rate)
                             / 100),
                            v_rnd);
                    v_trt_com_pcur :=
                          NVL (v_trt_net_less_eq_comm_pcur, 0)
                        + NVL (v_trt_eq_com_pcur, 0);
                    v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;

                    /***********************************************************************/
                    --                RAISE_ERROR('v_cession_rate='||v_cession_rate);
                    UPDATE gin_policy_rein_risk_details
                       SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
                           ptotr_risk_si_tcur =
                               ROUND (ptotr_trt_si_tcur, v_bcur_rnd),
                           ptotr_risk_prem_tcur =
                               ROUND (ptotr_trt_prem_tcur, v_bcur_rnd),
                           ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
                           ptotr_trt_si_tcur =
                               ROUND (v_trt_si_tcur, v_bcur_rnd),
                           ptotr_trt_prem_pcur =
                               ROUND (v_trt_prem_pcur, v_rnd),
                           ptotr_trt_prem_tcur =
                               ROUND (v_trt_prem_tcur, v_bcur_rnd),
                           ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
                           ptotr_earthqke_comm_rate =
                               cur_treaties_rec.rei_earthqke_comm_rate,
                           ptotr_trt_comm_pcur =
                               ROUND (v_trt_com_pcur, v_rnd),
                           ptotr_trt_comm_tcur =
                               ROUND (v_trt_com_tcur, v_bcur_rnd),
                           ptotr_cession_pct = ROUND (v_cession_rate, 4),
                           ptotr_acpr_sht_desc = v_acpr_sht_desc,
                           ptotr_acpr_code = v_accprd,
                           ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
                           ptotr_prem_tax_tcur =
                               ROUND (v_ptax_tcur, v_bcur_rnd),
                           ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
                           ptotr_comm_tax_tcur =
                               ROUND (v_ctax_tcur, v_bcur_rnd),
                           ptotr_ggt_tran_no = v_tran_no,
                           ptotr_tran_type = v_tran_type,
                           ptotr_earthqke_prem =
                               ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
                           ptotr_earthqke_comm =
                               ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
                           ptotr_net_less_eq_prem =
                               ROUND (v_trt_net_less_eq_prem_pcur,
                                      v_bcur_rnd),
                           ptotr_net_less_eq_comm =
                               ROUND (v_trt_net_less_eq_comm_pcur,
                                      v_bcur_rnd)
                     WHERE     ptotr_ipu_code = cur_all_risks_rec.ipu_code
                           AND ptotr_as_code = cur_treaties_rec.rei_as_code
                           AND ptotr_rei_code = cur_treaties_rec.rei_code
                           AND ptotr_prrd_code = v_prrd_code;

                    /************************start participartion *****/
                    --------------------insert participarticipation for each risk
                    --                  v_trt_rpremtax_pcur := 0;
                    --                  v_trt_premtax_pcur := 0;



                    Update_treaty_partipants (
                        cur_treaties_rec.rei_code,
                        v_prrd_code,
                        cur_treaties_rec.ptotr_code,
                        v_trt_si_pcur,
                        v_trt_si_tcur,
                        v_trt_prem_pcur,
                        v_trt_prem_tcur,
                        v_trt_com_pcur,
                        v_trt_com_tcur,
                        cur_all_risks_rec.pol_cur_code,
                        cur_all_risks_rec.pol_cur_symbol,
                        cur_all_risks_rec.ipu_pol_batch_no,
                        cur_all_risks_rec.ipu_pol_policy_no,
                        cur_all_risks_rec.ipu_pol_ren_endos_no,
                        v_tran_no,
                        v_tran_type,
                        cur_all_risks_rec.ipu_code,
                        cur_all_risks_rec.ipu_sec_scl_code,
                        v_exhange_rate,
                        v_rnd,
                        v_bcur_rnd);
                END IF;
            END LOOP;                                            --qouta share

            --end quota******************************************************************************************
            DBMS_OUTPUT.put_line (
                   'GIS_RI_PROCEDURES::LN 24975::be sup v_amt_to_reinsure='
                || v_amt_to_reinsure
                || '& v_prrd_code = '
                || v_prrd_code);

            FOR cur_treaties_rec
                IN cur_treaties (cur_all_risks_rec.ipu_code,
                                 1004,
                                 v_prrd_code)
            LOOP
                check_treaty_participation (cur_treaties_rec.rei_code);
                v_trt_rprem_tax := 0;
                v_trt_prem_tax := 0;
                v_trt_com_pcur := 0;

                -- Its A Surplus Type treaty
                -- calculate treaty sum insured in policy currency
                DBMS_OUTPUT.put_line (
                       'GIS_RI_PROCEDURES::LN 24989::be sup v_amt_to_reinsure='
                    || v_amt_to_reinsure
                    || '& v_prrd_code = '
                    || v_prrd_code
                    || '& rate = '
                    || cur_treaties_rec.ptotr_rate
                    || '& v_ret_limit = '
                    || v_ret_limit);

                IF cur_treaties_rec.ptotr_rate * v_ret_limit >
                   v_amt_to_reinsure
                THEN
                    v_trt_si_pcur := v_amt_to_reinsure;
                ELSE
                    v_trt_si_pcur :=
                        cur_treaties_rec.ptotr_rate * v_ret_limit;
                END IF;

                -- Its A Surplus Type treaty
                -- calculate treaty sum insured in policy currency
                --               raise_error(v_gross_ret||';'||v_prev_net_retention);
                --                  IF SIGN( v_gross_ret-NVL(v_prev_net_retention,0)) = 1 THEN
                --                    v_gross_ret := v_gross_ret-NVL(v_prev_net_retention,0);
                --                  END IF;
                DBMS_OUTPUT.put_line (
                       'GIS_RI_PROCEDURES::LN 25002::v_gross_ret='
                    || v_gross_ret
                    || ' v_prev_net_retention='
                    || v_prev_net_retention);

                /*Get treaty limit from the function gettreatylimit*/

                IF NVL (v_trt_cur_code, '-2000') !=
                   cur_all_risks_rec.pol_cur_code
                THEN
                    --                   RAISE_ERROR('v_trt_cur_code111='||v_trt_cur_code||'v_bcur_code='||v_bcur_code||'v_treat_limit_amt='||v_treat_limit_amt);
                    IF    (v_bcur_code = v_trt_cur_code)
                       OR     (NVL (cur_all_risks_rec.pol_exch_rate_fixed,
                                    'N') =
                               'Y')
                          AND NVL (v_rein_cur_param, 'N') = 'Y'
                    THEN
                        v_treat_limit_amt :=
                                gettreatylimit (
                                    cur_all_risks_rec.ipu_uw_yr,
                                    cur_all_risks_rec.ipu_sec_scl_code,
                                    v_bcur_code,
                                    cur_all_risks_rec.ipu_rc_code)
                              / cur_all_risks_rec.pol_cur_rate
                            - NVL (v_retention_amt, 0);
                    ELSE
                        v_treat_limit_amt :=
                                gettreatylimit (
                                    cur_all_risks_rec.ipu_uw_yr,
                                    cur_all_risks_rec.ipu_sec_scl_code,
                                    v_trt_cur_code,
                                    cur_all_risks_rec.ipu_rc_code)
                              * v_trt_cur_rate
                            - NVL (v_retention_amt, 0);
                    END IF;
                ELSE
                    --                 RAISE_ERROR('v_trt_cur_code222='||v_trt_cur_code||'v_bcur_code='||v_bcur_code||'v_treat_limit_amt='||v_treat_limit_amt);
                    v_treat_limit_amt :=
                          gettreatylimit (cur_all_risks_rec.ipu_uw_yr,
                                          cur_all_risks_rec.ipu_sec_scl_code,
                                          v_cur_code,
                                          cur_all_risks_rec.ipu_rc_code)
                        - NVL (v_retention_amt, 0);
                END IF;


                IF    (    NVL (v_treat_limit_amt, 0) <>
                           NVL (v_retention_amt, 0)
                       AND NVL (cur_all_risks_rec.prrd_comp_ret_edited, 'N') =
                           'Y')
                   OR (NVL (cur_treaties_rec.ptotr_rate, 0) <>
                       NVL (cur_treaties_rec.ptotr_allowed_rate, 0)) /* cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */
                THEN
                    v_treat_limit_amt :=
                          cur_treaties_rec.ptotr_rate
                        * NVL (cur_all_risks_rec.prrd_gross_comp_retention,
                               0);                  ---NVL(v_retention_amt,0);
                END IF;

                --                RAISE_ERROR('v_trt_cur_code='||v_trt_cur_code||'v_bcur_code='||v_bcur_code||'v_treat_limit_amt='||v_treat_limit_amt);
                DBMS_OUTPUT.put_line (
                       ' v_amt_to_reinsure='
                    || v_amt_to_reinsure
                    || ' v_treat_limit_amt='
                    || v_treat_limit_amt
                    || ' v_trt_si_pcur='
                    || v_trt_si_pcur);

                IF v_trt_si_pcur > v_treat_limit_amt
                THEN
                    v_trt_si_pcur := v_treat_limit_amt;
                ELSIF     v_amt_to_reinsure <= v_trt_si_pcur
                      AND v_amt_to_reinsure <> 0
                THEN
                    v_trt_si_pcur := v_amt_to_reinsure;
                --              ELSE
                --                v_trt_si_pcur :=0;
                END IF;

                DBMS_OUTPUT.put_line (
                       ' v_amt_to_reinsure='
                    || v_amt_to_reinsure
                    || ' v_treat_limit_amt='
                    || v_treat_limit_amt
                    || ' v_trt_si_pcur='
                    || v_trt_si_pcur);

                v_trt_si_pcur := ABS (v_trt_si_pcur);
                v_tot_risk_si := ABS (v_tot_risk_si);
                v_trt_si_tcur := 0;
                v_amt_to_reinsure := v_amt_to_reinsure - v_trt_si_pcur;
                v_trt_si_tcur := v_trt_si_pcur * v_exhange_rate;
                -- Culculate treaty premium
                v_cession_rate := v_trt_si_pcur / v_tot_risk_si * 100;
                DBMS_OUTPUT.put_line (
                       'GIS_RI_PROCEDURES::LN 25448::v_trt_si_pcur='
                    || v_trt_si_pcur
                    || ' v_tot_risk_si='
                    || v_tot_risk_si);
                DBMS_OUTPUT.PUT_LINE (
                       'GIS_RI_PROCEDURES::LN 25453::v_ri_prem_formular='
                    || v_ri_prem_formular);

                IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                      'BASED_ON_CESSION'
                   OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB',
                                                               'RN',
                                                               'EX',
                                                               'SP',
                                                               'CN'))
                   OR NVL (cur_all_risks_rec.IPU_FP, 0) != 0
                   OR NVL (cur_all_risks_rec.PRRD_RI_PREM, 0) = 0
                   ---HANDLES EN downward effected on the same date as the previous active transaction.
                   OR (    cur_all_risks_rec.POL_POLICY_STATUS = 'EN'
                       AND cur_all_risks_rec.ipu_wef = v_prev_wef
                       AND cur_all_risks_rec.ipu_wet = v_prev_wet
                       AND cur_all_risks_rec.ipu_gp = v_prev_ipu_gp)
                THEN
                    v_trt_net_less_eq_prem_pcur :=
                        ROUND (
                              v_cession_rate
                            * NVL (
                                  cur_all_risks_rec.prrd_ri_net_less_eq_prem,
                                  0)
                            / 100,
                            v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 25473::v_trt_net_less_eq_prem_pcur='
                        || v_trt_net_less_eq_prem_pcur);
                    v_trt_eq_prem_pcur :=
                        ROUND (
                              v_cession_rate
                            * NVL (cur_all_risks_rec.prrd_earthquake_prem, 0)
                            / 100,
                            v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 25482::v_trt_eq_prem_pcur='
                        || v_trt_eq_prem_pcur);
                    v_trt_prem_pcur :=
                          NVL (v_trt_eq_prem_pcur, 0)
                        + NVL (v_trt_net_less_eq_prem_pcur, 0);
                    v_trt_prem_tcur :=
                        ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 25488::v_trt_prem_tcur='
                        || v_trt_prem_tcur);
                ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                      'BASED_ON_CHANGE'
                THEN
                    DBMS_OUTPUT.put_line (
                           'GIS_RI_PROCEDURES::LN 25493::v_cession_rate='
                        || v_cession_rate
                        || ' ipu_GP='
                        || cur_all_risks_rec.ipu_GP
                        || 'PTOTR_PREV_CESSION_RAT='
                        || cur_treaties_rec.PTOTR_PREV_CESSION_RATe
                        || 'PRRD_RI_PREM='
                        || cur_all_risks_rec.PRRD_RI_PREM
                        || 'prrd_ri_net_less_eq_prem='
                        || cur_all_risks_rec.prrd_ri_net_less_eq_prem);
                    v_trt_net_less_eq_prem_pcur :=
                          (  (v_cession_rate / 100 * cur_all_risks_rec.ipu_GP)
                           - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                              / 100
                              * cur_all_risks_rec.ipu_GP)
                           + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                              / 100
                              * cur_all_risks_rec.PRRD_RI_PREM))
                        * cur_all_risks_rec.prrd_ri_net_less_eq_prem
                        / cur_all_risks_rec.PRRD_RI_PREM;
                    v_trt_net_less_eq_prem_pcur :=
                        ROUND (v_trt_net_less_eq_prem_pcur, v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 25516::v_trt_net_less_eq_prem_pcur='
                        || v_trt_net_less_eq_prem_pcur);
                    v_trt_eq_prem_pcur :=
                          (  (v_cession_rate / 100 * cur_all_risks_rec.ipu_GP)
                           - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                              / 100
                              * cur_all_risks_rec.ipu_GP)
                           + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                              / 100
                              * cur_all_risks_rec.PRRD_RI_PREM))
                        * cur_all_risks_rec.prrd_earthquake_prem
                        / cur_all_risks_rec.PRRD_RI_PREM;
                    v_trt_eq_prem_pcur := ROUND (v_trt_eq_prem_pcur, v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 25530::v_trt_eq_prem_pcur='
                        || v_trt_eq_prem_pcur);
                    v_trt_prem_pcur :=
                          NVL (v_trt_eq_prem_pcur, 0)
                        + NVL (v_trt_net_less_eq_prem_pcur, 0);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 25534::v_trt_prem_pcur='
                        || v_trt_prem_pcur);
                    v_trt_prem_tcur :=
                        ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                    DBMS_OUTPUT.PUT_LINE (
                           'GIS_RI_PROCEDURES::LN 25537::v_trt_prem_tcur='
                        || v_trt_prem_tcur);
                ELSE
                    RAISE_ERROR (
                        'Reinsurance computation method not setup in parameters. RI_PREM_FORMULAR');
                END IF;

                --               ptotr_trt_prem_pcur

--                -- calculate SURPLUS commission
--                v_trt_net_less_eq_comm_pcur :=
--                    ROUND (
--                        (  (  v_trt_net_less_eq_prem_pcur
--                            * cur_treaties_rec.rei_comm_rate)
--                         / 100),
--                        v_rnd);
--                v_trt_eq_com_pcur :=
--                    ROUND (
--                        (  (  v_trt_eq_prem_pcur
--                            * cur_treaties_rec.rei_earthqke_comm_rate)
--                         / 100),
--                        v_rnd);
--                --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
--                v_trt_com_pcur :=
--                      NVL (v_trt_net_less_eq_comm_pcur, 0)
--                    + NVL (v_trt_eq_com_pcur, 0);
--                v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
                --------calculate reinsurance tax, reinsurance commission tax part
                v_ptax_tcur := 0;
                v_ctax_tcur := 0;
                v_ptax_amount :=
                    ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100, v_rnd);
                v_ctax_amount :=
                    ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100, v_rnd);
                v_ptax_tcur := v_ptax_amount * v_exhange_rate;
                v_ctax_tcur := v_ctax_amount * v_exhange_rate;
                v_cession_rate :=
                    ROUND (v_trt_si_pcur / v_tot_risk_si * 100, 4);

/***************Amended::28.02.2020::Maynard:: Commission should be net of WHTX   ****/
                    -- calculate SURPLUS commission
                    v_trt_net_less_eq_comm_pcur :=
                        ROUND (
                            (  (  (v_trt_net_less_eq_prem_pcur - v_ptax_amount)
                                * cur_treaties_rec.rei_comm_rate)
                             / 100),
                            v_rnd);
                    v_trt_eq_com_pcur :=
                        ROUND (
                            (  (  (v_trt_eq_prem_pcur - v_ptax_amount)
                                * cur_treaties_rec.rei_earthqke_comm_rate)
                             / 100),
                            v_rnd);
                    v_trt_com_pcur :=
                          NVL (v_trt_net_less_eq_comm_pcur, 0)
                        + NVL (v_trt_eq_com_pcur, 0);
                    v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;


                UPDATE gin_policy_rein_risk_details
                   SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
                       ptotr_risk_si_tcur =
                           ROUND (v_tot_risk_si * v_exhange_rate, v_bcur_rnd),
                       ptotr_risk_prem_tcur =
                           ROUND (cur_all_risks_rec.prrd_ri_prem, v_bcur_rnd),
                       ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
                       ptotr_trt_si_tcur = ROUND (v_trt_si_tcur, v_bcur_rnd),
                       ptotr_trt_prem_pcur = ROUND (v_trt_prem_pcur, v_rnd),
                       ptotr_trt_prem_tcur =
                           ROUND (v_trt_prem_tcur, v_bcur_rnd),
                       ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
                       ptotr_earthqke_comm_rate =
                           cur_treaties_rec.rei_earthqke_comm_rate,
                       ptotr_trt_comm_pcur = ROUND (v_trt_com_pcur, v_rnd),
                       ptotr_trt_comm_tcur =
                           ROUND (v_trt_com_tcur, v_bcur_rnd),
                       ptotr_cession_pct = ROUND (v_cession_rate, 4),
                       ptotr_acpr_sht_desc = v_acpr_sht_desc,
                       ptotr_acpr_code = v_accprd,
                       ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
                       ptotr_prem_tax_tcur = ROUND (v_ptax_tcur, v_bcur_rnd),
                       ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
                       ptotr_comm_tax_tcur = ROUND (v_ctax_tcur, v_bcur_rnd),
                       ptotr_ggt_tran_no = v_tran_no,
                       ptotr_tran_type = v_tran_type,
                       ptotr_earthqke_prem =
                           ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
                       ptotr_earthqke_comm =
                           ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
                       ptotr_net_less_eq_prem =
                           ROUND (v_trt_net_less_eq_prem_pcur, v_bcur_rnd),
                       ptotr_net_less_eq_comm =
                           ROUND (v_trt_net_less_eq_comm_pcur, v_bcur_rnd)
                 WHERE     ptotr_ipu_code = cur_all_risks_rec.ipu_code
                       AND ptotr_as_code = cur_treaties_rec.rei_as_code
                       AND ptotr_rei_code = cur_treaties_rec.rei_code
                       AND ptotr_prrd_code = v_prrd_code;

                /************************start participartion *****/
                --------------------insert participarticipation for each risk
                --               v_trt_rpremtax_pcur := 0;
                --               v_trt_premtax_pcur := 0;

                Update_treaty_partipants (
                    cur_treaties_rec.rei_code,
                    v_prrd_code,
                    cur_treaties_rec.ptotr_code,
                    v_trt_si_pcur,
                    v_trt_si_tcur,
                    v_trt_prem_pcur,
                    v_trt_prem_tcur,
                    v_trt_com_pcur,
                    v_trt_com_tcur,
                    cur_all_risks_rec.pol_cur_code,
                    cur_all_risks_rec.pol_cur_symbol,
                    cur_all_risks_rec.ipu_pol_batch_no,
                    cur_all_risks_rec.ipu_pol_policy_no,
                    cur_all_risks_rec.ipu_pol_ren_endos_no,
                    v_tran_no,
                    v_tran_type,
                    cur_all_risks_rec.ipu_code,
                    cur_all_risks_rec.ipu_sec_scl_code,
                    v_exhange_rate,
                    v_rnd,
                    v_bcur_rnd);
            END LOOP;                                                --surplus

            --raise_error('here=='||v_net_ret||';'||v_special_ret_limit||';'||v_special_ret_diff);
            IF NVL (v_net_ret, 0) = 0
            THEN
                v_net_ret := v_special_ret_limit;
            ELSE
                v_net_ret := NVL (v_net_ret, 0) + v_special_ret_diff;
            END IF;

            DBMS_OUTPUT.put_line (
                   'LN 25652::11v_net_ret='
                || v_net_ret
                || 'v_amt_to_reinsure='
                || v_amt_to_reinsure
                || 'v_special_ret_diff='
                || v_special_ret_diff
                || 'prrd_ri_prem='
                || NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                || 'cur_all_risks_rec.ipu_reinsure_amt='
                || cur_all_risks_rec.ipu_reinsure_amt);
            --raise_error(v_ipu_reinsure_amt||';'||get_risk_prev_si(cur_all_risks_rec.prrd_code));
            v_ipu_reinsure_amt :=
                ABS (
                      NVL (v_ipu_reinsure_amt, 0)
                    - NVL (cur_all_risks_rec.prrd_prev_ri_si, 0));

            --CHECK THIS !!!!!!!!!!!!!!!!!!!

            --raise_error('v_gross_ret='||v_gross_ret||'gross_ret='||cur_all_risks_rec.prrd_gross_comp_retention||'v_tot_risk_si='||v_tot_risk_si);
            -- RAISE_ERROR('v_ret_rate111='||v_ret_rate||'v_comp_net_rate='||v_comp_net_rate||'v_gross_ret='||v_gross_ret);
            IF NVL (v_gross_ret, 0) = 0
            THEN
                --               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_risk_si,0) * 100,   4   );
                v_ret_rate :=
                    ROUND (
                          NVL (cur_all_risks_rec.prrd_gross_comp_retention,
                               0)
                        / NVL (v_tot_risk_si, 0)
                        * 100,
                        4);
            --               v_ret_rate := ROUND (  v_retention_amt  / NVL(v_tot_si,0) * 100,   4   );
            --                IF v_ret_rate > 100 THEN
            --                    v_ret_rate :=100;
            --                    v_net_ret := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
            --                END IF;
            --                v_gross_ret_is := NVL (cur_all_risks_rec.prrd_gross_comp_retention,0);
            ELSE
                v_ret_rate :=
                    ROUND (v_gross_ret / NVL (v_tot_risk_si, 0) * 100, 4);
            --                 v_ret_rate := ROUND ( (v_gross_ret+NVL(v_prev_net_retention,0)) / NVL(v_tot_risk_si,0)  * 100,   4   );
            --               v_ret_rate := ROUND ( v_gross_ret / NVL(v_tot_si,0)  * 100,   4   );
            END IF;

            --RAISE_ERROR(v_net_ret||';'||v_gross_ret||';'||v_ipu_reinsure_amt||';'||v_ret_rate||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_tot_si||';'||v_tot_risk_si||';'||cur_all_risks_rec.prrd_prev_net_retention);
            v_gross_ret_is :=
                NVL (v_gross_ret,
                     cur_all_risks_rec.prrd_gross_comp_retention);

            SELECT ROUND (
                         v_net_ret
                       / NVL (
                             DECODE (v_ipu_reinsure_amt,
                                     0, 1,
                                     v_ipu_reinsure_amt),
                             0)
                       * 100,
                       4)
              INTO v_comp_net_rate
              FROM DUAL;

            --     SELECT ROUND (  v_net_ret  / NVL (DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ) * NVL (cur_all_risks_rec.prrd_ri_prem, 0) / 100 INTO v_comp_net_prem FROM DUAL;

            IF NVL (v_gross_ret_is, 0) = 0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0  */
                                           AND NVL (v_ret_rate, 0) <> 0
            THEN
                --         v_comp_net_prem :=(v_ret_rate*NVL(cur_all_risks_rec.prrd_cumm_ri_prem,cur_all_risks_rec.prrd_ri_prem)/100)-NVL(cur_all_risks_rec.prrd_net_prev_prem,0);
                --                v_net_ret :=0;
                v_gross_ret_is := v_net_ret;
            END IF;


            -- raise_error('v_ipu_reinsure_amt='||v_ipu_reinsure_amt||'ri prem='||cur_all_risks_rec.prrd_ri_prem||'cur_all_risks_rec.ipu_wef='||cur_all_risks_rec.ipu_wef||'cur_all_risks_rec.ipu_wet='||cur_all_risks_rec.ipu_wet||'prev prem='||cur_all_risks_rec.prrd_ri_prev_prem
            -- ||'v_prev_wef='||v_prev_wef||'v_prev_wet='||v_prev_wet||'v_ret_rate='||v_ret_rate||'v_comp_net_rate='||v_comp_net_rate);

            IF NVL (cur_all_risks_rec.prrd_ri_prem, 0) <> 0
            THEN
                IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                      'BASED_ON_CESSION'
                   OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB',
                                                               'RN',
                                                               'EX',
                                                               'SP',
                                                               'CN'))
                   OR NVL (cur_all_risks_rec.IPU_FP, 0) != 0
                THEN
                    v_comp_net_prem :=
                        ROUND (
                              v_ret_rate
                            * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                            / 100,
                            v_rnd);
                    DBMS_OUTPUT.put_line (
                           'GIS_RI_PROCEDURES::LN 25736::v_comp_net_prem = '
                        || v_comp_net_prem
                        || ' & GP = '
                        || cur_all_risks_rec.ipu_GP);
                ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                      'BASED_ON_CHANGE'
                THEN
                    IF     cur_all_risks_rec.pol_policy_status = 'EN'
                       AND cur_all_risks_rec.ipu_wef = v_prev_wef
                       AND cur_all_risks_rec.ipu_wet = v_prev_wet
                       AND cur_all_risks_rec.ipu_gp = v_prev_ipu_gp
                    THEN
                        IF NVL (v_ipu_reinsure_amt, 0) = 0
                        THEN
                            v_ipu_reinsure_amt := 1;
                        END IF;

                        v_comp_net_prem :=
                            ROUND (
                                  v_ret_rate
                                * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                                / 100,
                                v_rnd);
                        -- v_comp_net_prem:=ROUND (  (  v_net_ret   / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/v_ipu_reinsure_amt, 0) * 100   ))  * NVL (cur_all_risks_rec.prrd_ri_prem, 0) / 100;
                        DBMS_OUTPUT.put_line (
                               'GIS_RI_PROCEDURES::LN 25756::v_comp_net_prem = '
                            || v_comp_net_prem
                            || ' & GP = '
                            || cur_all_risks_rec.ipu_GP);
                    ELSE
                        --RAISE_ERROR('v_comp_net_prem111='||v_comp_net_prem||'RI PREM='||cur_all_risks_rec.prrd_ri_prem);
                        --  v_comp_net_prem:=ROUND((v_ret_rate/100*cur_all_risks_rec.ipu_GP)-(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.ipu_GP)+(cur_all_risks_rec.PRRD_PREV_RET_RATE/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
                        v_comp_net_prem :=
                            ROUND (
                                  (  v_ret_rate
                                   / 100
                                   * cur_all_risks_rec.ipu_GP)
                                - (  NVL (
                                         cur_all_risks_rec.PRRD_PREV_RET_RATE,
                                         0)
                                   / 100
                                   * cur_all_risks_rec.ipu_GP)
                                + (  NVL (
                                         cur_all_risks_rec.PRRD_PREV_RET_RATE,
                                         0)
                                   / 100
                                   * cur_all_risks_rec.PRRD_RI_PREM),
                                v_rnd);
                        DBMS_OUTPUT.put_line (
                               'GIS_RI_PROCEDURES::LN 25770::v_comp_net_prem = '
                            || v_comp_net_prem
                            || ' & GP = '
                            || cur_all_risks_rec.ipu_GP
                            || ' & prev ret = '
                            || cur_all_risks_rec.PRRD_PREV_RET_RATE
                            || ' & v_ret_rate = '
                            || v_ret_rate);
                    END IF;
                END IF;
            ELSE
                v_comp_net_prem := 0;
            END IF;

            --RAISE_ERROR('v_ret_rate='||v_ret_rate||'v_comp_net_rate='||v_comp_net_rate);
            UPDATE gin_policy_risk_ri_dtls
               SET prrd_comp_retention = v_net_ret,
                   prrd_gross_comp_retention = v_gross_ret_is, --NVL (v_gross_ret, prrd_gross_comp_retention),
                   prrd_com_retention_rate = v_ret_rate,
                   --ROUND (  NVL (v_gross_ret, prrd_gross_comp_retention)  / NVL (v_ipu_reinsure_amt/*cur_all_risks_rec.ipu_reinsure_amt*/, 0)  * 100,   4   ),
                   prrd_comp_net_rate = NVL (v_ret_rate, v_comp_net_rate), --ROUND (  v_net_ret  / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100,  4   ),
                   prrd_net_prem = v_comp_net_prem --ROUND (  (  v_net_ret   / NVL (/*cur_all_risks_rec.ipu_reinsure_amt*/DECODE(v_ipu_reinsure_amt,0,1,v_ipu_reinsure_amt), 0) * 100   ))  * NVL (prrd_ri_prem, 0) / 100
             WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                   AND prrd_code = v_prrd_code
                   AND prrd_tran_no = v_tran_no;

            DBMS_OUTPUT.put_line (
                   'v_amt_to_reinsure = '
                || v_amt_to_reinsure
                || 'avail_fulc_bal = '
                || v_avail_fulc_bal
                || '  facoblig_user_excess = '
                || cur_all_risks_rec.prrd_facoblig_user_excess);

            BEGIN
                SELECT SUM (NVL (fc_amount, 0))
                  INTO v_total_facoblig_ceded
                  FROM gin_facre_cessions
                 WHERE     fc_prrd_code = cur_all_risks_rec.prrd_code
                       AND fc_facre_type = 'O';
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error getting fac obliq cession..');
            END;

            IF NVL (cur_all_risks_rec.prrd_facoblig_alloc_chk, 'N') = 'Y'
            THEN
                IF NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0) > 0
                THEN
                    v_facoblig_limit :=
                        NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0);
                ELSE
                    v_facoblig_limit :=
                        NVL (cur_all_risks_rec.prrd_facoblig_limit, 0);
                END IF;
            ELSE
                v_facoblig_limit := 0;
            --               BEGIN
            --                   IF v_rsk_excl = 'Y' THEN
            --                       v_facoblig_limit :=v_fac_amt;
            --                       v_avail_fulc_bal :=v_fac_amt;
            --                   END IF;
            --               END;
            END IF;

            DBMS_OUTPUT.put_line (
                   'v_amt_to_reinsure='
                || v_amt_to_reinsure
                || ';'
                || v_avail_fulc_bal
                || ';'
                || v_facoblig_limit
                || ';'
                || v_total_facoblig_ceded);

            IF    v_amt_to_reinsure > 0
               OR (    NVL (v_avail_fulc_bal, 0) > 0
                   AND NVL (v_facoblig_limit, 0) > 0)
            THEN
                IF     NVL (v_amt_to_reinsure, 0) > 0
                   AND NVL (v_facoblig_limit, 0) > 0
                   AND NVL (v_total_facoblig_ceded, 0) = 0
                THEN
                    DBMS_OUTPUT.put_line ('XXXXXXXXXXXXXXXXXXX');

                    IF v_amt_to_reinsure > v_facoblig_limit
                    THEN
                        -- raise_error('here');
                        v_facoblig_excess := v_facoblig_limit;
                        v_facnorml_excess :=
                            v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
                    ELSE
                        v_facoblig_excess := v_amt_to_reinsure;
                        v_facnorml_excess := 0;
                    END IF;
                ELSIF     NVL (v_amt_to_reinsure, 0) > 0
                      AND NVL (v_facoblig_limit, 0) > 0
                THEN
                    DBMS_OUTPUT.put_line ('YYYYYYYYYYYYYYYYYYY');
                    v_facoblig_excess :=
                          NVL (v_facoblig_limit, 0)
                        - NVL (v_total_facoblig_ceded, 0);

                    IF v_amt_to_reinsure > v_facoblig_excess
                    THEN
                        -- raise_error('here');
                        v_facoblig_excess := v_facoblig_excess;
                        v_facnorml_excess :=
                            v_amt_to_reinsure - NVL (v_facoblig_excess, 0);
                    ELSE
                        v_facoblig_excess := v_amt_to_reinsure;
                        v_facnorml_excess := 0;
                    END IF;
                ELSE
                    DBMS_OUTPUT.put_line ('ZZZZZZZZZZZZZZZZZZZ');
                    v_facoblig_excess :=
                        v_facoblig_limit - NVL (v_total_facoblig_ceded, 0);
                    v_facnorml_excess :=
                          NVL (v_amt_to_reinsure, 0)
                        - NVL (v_facoblig_excess, 0);
                END IF;

                --                    v_avail_fulc_bal :=NVL(v_facnorml_excess,0)-NVL(cur_all_risks_rec.prrd_prev_facre_si,0);

                --                   IF v_rsk_excl = 'Y' THEN
                --                        v_avail_fulc_bal :=0;
                --                   END IF;
                ----
                --                 BEGIN
                --                    SELECT SUM(DECODE(SIGN(FC_PREM_AMT),1,ABS(NVL(fc_amount,0)),-ABS(NVL(fc_amount,0))))
                --                      INTO v_prev_fc_amnt
                --                      FROM gin_facre_cessions,
                --                      gin_insured_property_unds
                --                     WHERE FC_IPU_CODE=IPU_CODE
                --                     and IPU_ID = cur_all_risks_rec.ipu_id
                --                     AND IPU_UW_YR=cur_all_risks_rec.IPU_UW_YR ;
                --                 EXCEPTION
                --                    WHEN OTHERS
                --                    THEN
                --                       v_prev_fc_amnt := 0;
                --                 END;

                --            IF NVL(v_tot_risk_si,0) > NVL(v_trans_sign*v_trt_si_pcur,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0) THEN
                --                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trt_si_pcur,0)+NVL(v_net_ret,0),0));
                --            ELSE
                --             v_avail_fulc_bal :=NVL(v_prev_fc_amnt,0);
                --            END IF;
                DBMS_OUTPUT.put_line (
                       'v_facnorml_excess='
                    || v_facnorml_excess
                    || 'v_ipu_reinsure_amt='
                    || v_ipu_reinsure_amt
                    || 'v_avail_fulc_bal='
                    || v_avail_fulc_bal);
                v_excess_pct :=
                    ROUND (
                          (  NVL (v_facnorml_excess, 0)
                           + NVL (v_avail_fulc_bal, 0))
                        / NVL (v_tot_risk_si, 0)
                        * 100,
                        4);

                IF v_gross_ret = 0
                THEN
                    v_ret_rate :=
                        ROUND (
                            v_retention_amt / NVL (v_tot_risk_si, 0) * 100,
                            4);
                ELSE
                    v_ret_rate :=
                        ROUND (v_gross_ret / NVL (v_tot_risk_si, 0) * 100, 4);
                END IF;

                v_gross_ret_is :=
                    NVL (v_gross_ret,
                         cur_all_risks_rec.prrd_gross_comp_retention);

                SELECT ROUND (
                             v_net_ret
                           / NVL (
                                 DECODE (v_ipu_reinsure_amt,
                                         0, 1,
                                         v_ipu_reinsure_amt),
                                 0)
                           * 100,
                           4)
                  INTO v_comp_net_rate
                  FROM DUAL;

                IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                      'BASED_ON_CESSION'
                   OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB',
                                                               'RN',
                                                               'EX',
                                                               'SP',
                                                               'CN'))
                   OR NVL (cur_all_risks_rec.IPU_FP, 0) != 0
                   OR NVL (cur_all_risks_rec.PRRD_RI_PREM, 0) = 0
                   OR (    cur_all_risks_rec.POL_POLICY_STATUS = 'EN'
                       AND cur_all_risks_rec.ipu_wef = v_prev_wef
                       AND cur_all_risks_rec.ipu_wet = v_prev_wet
                       AND cur_all_risks_rec.ipu_gp = v_prev_ipu_gp)
                THEN
                    v_comp_net_prem :=
                        ROUND (
                              v_ret_rate
                            * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                            / 100,
                            v_rnd);
                ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                      'BASED_ON_CHANGE'
                THEN
                    v_comp_net_prem :=
                        ROUND (
                              (v_ret_rate / 100 * cur_all_risks_rec.ipu_GP)
                            - (  cur_all_risks_rec.PRRD_PREV_RET_RATE
                               / 100
                               * cur_all_risks_rec.ipu_GP)
                            + (  cur_all_risks_rec.PRRD_PREV_RET_RATE
                               / 100
                               * cur_all_risks_rec.PRRD_RI_PREM),
                            v_rnd);
                    DBMS_OUTPUT.put_line (
                           'GIS_RI_PROCEDURES::LN 25608::v_comp_net_prem = '
                        || v_comp_net_prem);

                    /* REMMED OUT BY MAYNARD.02092019. THE BASED_ON_CHANGE SHOULD WORK BASED ON ANNUAL PREMIUM */
                    IF NVL (v_comp_net_prem, 0) <
                       ROUND (
                             v_ret_rate --                        * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                           * NVL (cur_all_risks_rec.ipu_GP, 0)
                           / 100,
                           v_rnd)
                    THEN
                        --                  v_comp_net_prem :=
                        --                     ROUND (
                        --                          v_ret_rate
                        --                        * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                        --                        / 100,
                        --                        v_rnd);
                        v_comp_net_prem :=
                            ROUND (
                                  (  v_ret_rate
                                   / 100
                                   * cur_all_risks_rec.ipu_GP)
                                - (  NVL (
                                         cur_all_risks_rec.PRRD_PREV_RET_RATE,
                                         0)
                                   / 100
                                   * cur_all_risks_rec.ipu_GP)
                                + (  NVL (
                                         cur_all_risks_rec.PRRD_PREV_RET_RATE,
                                         0)
                                   / 100
                                   * cur_all_risks_rec.PRRD_RI_PREM),
                                v_rnd);
                    END IF;
                END IF;

                DBMS_OUTPUT.put_line (
                       'GIS_RI_PROCEDURES::LN 25626::v_comp_net_prem='
                    || v_comp_net_prem
                    || 'v_gross_ret_is='
                    || v_gross_ret_is
                    || 'v_ret_rate='
                    || v_ret_rate
                    --                                  || 'v_prev_fc_amnt='
                    --                                  || v_prev_fc_amnt
                    || 'v_excess_pct='
                    || v_excess_pct
                    || 'v_avail_fulc_bal='
                    || v_avail_fulc_bal);
                DBMS_OUTPUT.put_line (
                       'v_tot_risk_si='
                    || v_tot_risk_si
                    || 'v_trt_si_pcur='
                    || v_trt_si_pcur
                    || 'prrd_prev_ri_si='
                    || cur_all_risks_rec.prrd_prev_ri_si
                    || 'v_net_ret='
                    || v_net_ret --                                  || 'v_prev_fc_amnt='
                                --                                  || v_prev_fc_amnt
                                );
                --             IF NVL(v_gross_ret_is,0) =0 /*AND  NVL(v_ipu_reinsure_amt,0) = 0 */ AND NVL(v_ret_rate,0) <> 0 THEN
                --                 v_excess_pct := ROUND(NVL(v_prev_fc_amnt,0)/NVL(v_tot_risk_si,0)*100,4);
                --                v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(v_trans_sign*v_trt_si_pcur,0)+abs(NVL(cur_all_risks_rec.prrd_prev_ri_si,0))+NVL(v_net_ret,0),0)- NVL(v_prev_fc_amnt,0));
                --                 v_avail_fulc_bal := abs(NVL(v_tot_risk_si,0)-NVL(NVL(cur_all_risks_rec.prrd_prev_ri_si,0)+NVL(cur_all_risks_rec.prrd_prev_net_retention,0)+NVL(v_trt_si_pcur,0),0));
                --                v_net_ret := 0;
                --                  v_excess_pct :=ROUND (  ( NVL (v_avail_fulc_bal, 0)  )   / NVL (v_tot_risk_si, 0)* 100,4 );
                --           END IF;
                DBMS_OUTPUT.put_line (
                       'v_avail_fulc_bal='
                    || v_avail_fulc_bal
                    || 'v_facnorml_excess='
                    || v_facnorml_excess);

                --             RAISE_ERROR('v_comp_net_prem333='||v_comp_net_prem||'RI PREM='||cur_all_risks_rec.prrd_ri_prem);
                UPDATE gin_policy_risk_ri_dtls
                   SET prrd_avail_fulc_bal =
                           v_facnorml_excess + NVL (v_avail_fulc_bal, 0),
                       prrd_facoblig_excess = v_facoblig_excess,
                       --PRRD_FACOBLIG_USER_EXCESS =v_facoblig_excess,
                       prrd_excess_pct = v_excess_pct,
                       prrd_comp_retention = v_net_ret,
                       prrd_gross_comp_retention = v_gross_ret_is, --v_gross_ret,
                       prrd_com_retention_rate = v_ret_rate, --ROUND (  NVL (prrd_gross_comp_retention, 0) / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))  * 100,  4  ),
                       prrd_comp_net_rate = v_ret_rate, -- ROUND (  v_net_ret  / (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))   * 100,    4  ),
                       prrd_net_prem = v_comp_net_prem --  ( (v_net_ret /DECODE( (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0)) ,0,1, (NVL (v_ipu_reinsure_amt, 0)-NVL(get_risk_prev_si(cur_all_risks_rec.PRRD_CODE),0))) * 100  )   * NVL (prrd_ri_prem, 0) / 100  )                                                 --,
                 --PRRD_FACRE_AMOUNT =v_facoblig_excess
                 WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                       AND prrd_code = v_prrd_code
                       AND prrd_tran_no = v_tran_no;

                DELETE gin_facre_cessions
                 WHERE     fc_ipu_code = cur_all_risks_rec.ipu_code
                       AND fc_facre_type = 'O';
            END IF;

            fix_rounding_errors (cur_all_risks_rec.prrd_codE);
        --            -- IF SI TO FACRE IS ZERO AND PREMIUM IS NOT ZERO, THEN POPULATE THE PREVIOUS FACRE ACCOUNTS
        ----            raise_error(v_avail_fulc_bal||'v_excess_pct='||v_excess_pct);
        --/*populate facre automatically where fac SI is zero and rate <> zero*/
        --            IF NVL (v_avail_fulc_bal, 0) =0  THEN
        --                FOR cur_prev_facre_rec IN cur_prev_facre(cur_all_risks_rec.ipu_prev_ipu_code) LOOP
        --                    IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB','RN','EX','CN')) THEN
        --                       v_fc_prem := round(cur_prev_facre_rec.fc_rate*NVL (cur_all_risks_rec.prrd_ri_prem, 0)/100, v_rnd );
        --                    ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
        --                       v_fc_prem:=ROUND((cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)-(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.ipu_GP)+(cur_prev_facre_rec.fc_rate/100*cur_all_risks_rec.PRRD_RI_PREM), v_rnd );
        --                    END if ;
        --
        ----                RAISE_ERROR(cur_prev_facre_rec.FC_RATE||';'||cur_all_risks_rec.ipu_prev_ipu_code);
        --                     INSERT INTO gin_facre_cessions
        --                        (fc_code, fc_agnt_agent_code, fc_amount,
        --                         fc_wef, fc_ipu_code, fc_agent_sht_desc,
        --                         fc_rate, fc_comm_rate, fc_comm_amt, fc_don_by,
        --                         fc_dc_no, fc_prem_amt, fc_pol_batch_no, fc_uwyr,
        --                         fc_ggt_tran_no, fc_tran_type, fc_scl_code, fc_amt_or_rate, fc_prrd_code,
        --                         fc_auth_dt, fc_prev_si, fc_prev_rate,  fc_refund_prem, fc_refund_comm, fc_prev_amount,
        --                         fc_wet, fc_prev_comm_rate, fc_prev_fc_code,  fc_earthqke_prem, fc_earthqke_comm_rate,
        --                         fc_earthqke_comm, fc_net_less_eq_comm,
        --                         fc_net_less_eq_prem, fc_facre_type, fc_accepted_date, fc_accepted, fc_prem_diff_amt,
        --                         fc_vat_amt, fc_vat_rate, fc_mngmnt_type, fc_mngmnt_value, fc_rein_tax_type,
        --                         fc_rein_tax_value, fc_mngmnt_amt,fc_rein_tax_amt, fc_override_prem,
        --                         fc_override_type, fc_override_value, fc_remark, fc_whtx_rate, fc_whtx_amt
        --                        )
        --                 VALUES (gin_fc_code_seq.NEXTVAL, cur_prev_facre_rec.fc_agnt_agent_code, 0,
        --                         cur_all_risks_rec.ipu_wef, cur_all_risks_rec.ipu_code, cur_prev_facre_rec.fc_agent_sht_desc,
        --                         cur_prev_facre_rec.fc_rate, cur_prev_facre_rec.fc_comm_rate, round(cur_prev_facre_rec.fc_comm_rate*v_fc_prem/100,v_rnd), v_user,
        --                         NULL, v_fc_prem, v_batch_no, cur_all_risks_rec.pol_uw_year,
        --                         cur_all_risks_rec.prrd_tran_no, cur_all_risks_rec.pol_policy_status,
        --                         cur_all_risks_rec.ipu_sec_scl_code, cur_prev_facre_rec.fc_amt_or_rate, cur_all_risks_rec.prrd_code,
        --                         NULL, NULL, cur_prev_facre_rec.fc_rate,
        --                         0, 0, cur_prev_facre_rec.fc_prem_amt,
        --                         cur_all_risks_rec.ipu_wet, cur_prev_facre_rec.fc_comm_amt, cur_prev_facre_rec.fc_code,
        --                         0, 0,
        --                         0, 0,
        --                         0, cur_prev_facre_rec.fc_facre_type,
        --                         cur_all_risks_rec.ipu_wef, 'Y', 0,
        --                         0, 0, null,
        --                         0, null,
        --                         0, 0,
        --                         0, 0,
        --                         null, 0,
        --                         'Auto facre cedding as si is zero', 0, 0
        --                        );
        --                  END LOOP;
        --             END IF;
        --   END IF; FOR ZERO
        END LOOP;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            --DBMS_OUTPUT.PUT_LINE('Hata miti ni dawa...You are a genius...you just did a Zero devide..',no_acknowledge);
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0.Continue if covered by XOL...');
    END;

    PROCEDURE populate_treaty_details (v_batch_no    IN NUMBER,
                                       v_tran_no     IN NUMBER,
                                       v_tran_type   IN VARCHAR2,
                                       v_ipu_code    IN NUMBER)
    IS
        v_cnt                    NUMBER := 0;
        v_trt_uwyr               NUMBER := NULL;
        cnt                      NUMBER := 1;
        v_retention_amt          NUMBER := 0;
        v_facre_rate             NUMBER := 0;
        v_errmsg                 VARCHAR2 (200);
        v_tst_prrd_net_prem      NUMBER (22, 5) := 0;
        v_zero_devide            EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        al_id                    NUMBER;
        v_group_si               NUMBER := 0;
        v_grp_flag               BOOLEAN := FALSE;
        v_grp_pct                NUMBER := 0;
        v_grp_tot_ret            NUMBER := 0;
        v_reinsure_amt           NUMBER := 0;
        v_exhange_rate           NUMBER := 1;
        v_prrd_code              NUMBER;
        v_facre_amt              NUMBER := 0;
        v_facre_excess           NUMBER := 0;
        v_arrngmt_defined        NUMBER := 0;
        v_msg                    VARCHAR2 (200);
        v_arrangement            NUMBER;
        v_arrangement_type       VARCHAR2 (10);
        v_old_grs_ret_rate       NUMBER := 0;
        v_net_ret_rate           NUMBER := 0;
        v_retention_limit        NUMBER := 0;
        v_no_ri_si               VARCHAR2 (2);
        v_dummy                  NUMBER := 0;
        v_retention_type         VARCHAR2 (1) := NULL;
        v_bind_max_exp           NUMBER := 0;
        v_load_status            VARCHAR2 (2);
        v_reinsure_wot_ri_prog   VARCHAR2 (2);
        v_unadjusted_ri_tran     NUMBER := 0;
        v_as_uwyr                NUMBER;
        v_dc_pol_loaded          VARCHAR2 (3);
        v_eq_prem                NUMBER := 0;
        v_rnd                    NUMBER := 0;
        v_bcur_rnd               NUMBER := 0;
        v_bcur_code              NUMBER;
        v_bcur_symbol            VARCHAR2 (15);
        v_as_code                NUMBER;
        v_fac_oblig_limit        NUMBER;
        v_trt_cur_code           NUMBER;
        v_trt_cur_rate           NUMBER;
        v_ctl_code               NUMBER;
        v_ctl_cede_rate          NUMBER;
        v_ctl_rate_type          VARCHAR2 (1);
        v_top_loc_si             NUMBER := 0;
        v_cntTopLocation         NUMBER := 0;
        v_cnt_group              NUMBER := 0;
        v_pol_si                 NUMBER := 0;
        -- v_rein_cur_code NUMBER;
        -- v_rein_prem NUMBER :=0;
        -- v_max_exposure NUMBER :=0;
        v_pol_fc_rate            NUMBER;
        v_pol_fc_amt             NUMBER;
        v_user                   VARCHAR2 (35);
        v_rsk_fc_amnt            NUMBER;
        v_rsk_fc_rate            NUMBER;
        v_cede_pool              VARCHAR2 (1);
        v_rein_cur_param         VARCHAR2 (1);
        v_excl_param             VARCHAR2 (1);
        v_excl_risks             NUMBER;
        v_excl_risks_param       VARCHAR2 (1);

        v_trt_si                 NUMBER;

        CURSOR cur_pol IS
            SELECT pol_policy_status,
                   pol_binder_policy,
                   pol_cur_code,
                   pol_policy_type,
                   pol_cur_symbol,
                   pol_prev_batch_no,
                   pol_loaded,
                   pol_cur_rate,
                   pol_exch_rate_fixed
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_all_risks (vpolloaded IN VARCHAR2)
        IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     ipu_comp_retention,
                     ipu_pol_est_max_loss,
                     ipu_avail_fulc_bal,
                     ipu_endos_diff_amt,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_reinsure_amt,
                     ipu_facre_amount,
                     ipu_prev_ipu_code,
                     ipu_relr_code,
                     ipu_eff_wef,
                     ipu_id,
                     ipu_uw_yr,
                     ipu_inception_uwyr,
                     ipu_rc_code,
                     ipu_bind_code,
                     ipu_max_exposure,
                     ipu_earthqke_prem_diff,
                     ipu_earth_quake_prem,
                     ipu_override_ri_retention
                FROM gin_insured_property_unds
               WHERE     ipu_pol_batch_no = v_batch_no
                     AND ipu_code = v_ipu_code
                     AND DECODE (NVL (vpolloaded, 'N'), 'N', ipu_reinsured, 1) =
                         1
            ORDER BY 1;

        CURSOR cur_all_related_risks (v_rel_code        IN NUMBER,
                                      v_cover_from_dt      DATE,
                                      v_ipu_id             NUMBER)
        IS
            SELECT SUM (NVL (ipu_reinsure_amt, 0))     si
              FROM gin_policies,
                   gin_policy_active_risks,
                   gin_insured_property_unds
             WHERE     pol_batch_no = polar_pol_batch_no
                   AND polar_ipu_code = ipu_code
                   AND ipu_id != v_ipu_id
                   AND ipu_relr_code = v_rel_code
                   AND ipu_eff_wet >= v_cover_from_dt
                   AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);

        CURSOR cur_related_risks (v_rel_code        IN NUMBER,
                                  v_cover_from_dt      DATE,
                                  v_ipu_id             NUMBER)
        IS
            SELECT ipu_code, ipu_reinsure_amt, pol_cur_rate
              FROM gin_policies,
                   gin_policy_active_risks,
                   gin_insured_property_unds
             WHERE     pol_batch_no = polar_pol_batch_no
                   AND polar_ipu_code = ipu_code
                   AND ipu_id != v_ipu_id
                   AND ipu_relr_code = v_rel_code
                   AND ipu_eff_wet >= v_cover_from_dt
                   AND (pol_current_status = 'A' OR pol_batch_no = v_batch_no);

        -- select treaties to reinsure each risk
        CURSOR cur_treaties (v_scl_code   IN NUMBER,
                             v_ta_code    IN NUMBER,
                             v_uwyr          NUMBER,
                             v_ipu           NUMBER)
        IS
              SELECT *
                FROM gin_treaty_setups_vw
               WHERE     clt_scl_code = v_scl_code
                     AND as_ta_code = v_ta_code
                     AND as_uwyr = v_uwyr
                     AND NVL (as_status, 'N') = 'A'
                     AND rei_code != 563
                     AND trt_code IN (1001, 1003, 1004)
                     AND rei_code NOT IN
                             (SELECT ptotr_rei_code
                                FROM gin_policy_rein_risk_details
                               WHERE     ptotr_ipu_code = v_ipu
                                     AND ptotr_ggt_tran_no = v_tran_no)
            --and trunc(sysdate)  between clt_wef and clt_wet
            ORDER BY clt_as_code, trt_level, clt_scl_code;

        --AND NVL(as_status,'N') ='A'
        CURSOR cur_cnt_trt (vv_ta_code   NUMBER,
                            uwyr         NUMBER,
                            v_scl_code   NUMBER,
                            v_dt         DATE)
        IS
            SELECT COUNT ('x')     cnt
              FROM gin_class_treaties, gin_arrangement_setups
             WHERE     clt_as_code = as_code
                   AND clt_ta_code = vv_ta_code
                   AND as_uwyr = uwyr
                   AND clt_scl_code = v_scl_code
                   AND NVL (as_status, 'N') = 'A';

        --    AND (v_dt BETWEEN CLT_WEF AND CLT_WET);

        --get Arrangement Type
        CURSOR cur_arrangments (v_scl_code   IN NUMBER,
                                v_uwyr          NUMBER,
                                v_cur_code      NUMBER)
        IS
            SELECT DISTINCT ta_code, ta_type, NVL (as_status, 'N') as_status
              FROM gin_treaty_arrangements,
                   gin_class_treaties,
                   gin_arrangement_setups
             WHERE     ta_code = clt_ta_code
                   AND ta_code = as_ta_code
                   AND clt_as_code = as_code
                   --AND ta_cur_code = v_cur_code
                   --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
                   AND as_uwyr = v_uwyr
                   AND clt_scl_code = v_scl_code
                   AND NVL (as_status, 'N') = 'A' --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
                                                 ;

        --AND (v_dt BETWEEN CLT_WEF AND CLT_WET);
        CURSOR cur_arrangments_yr (v_scl_code   IN NUMBER,
                                   v_uwyr          NUMBER,
                                   v_dt            DATE,
                                   v_cur_code      NUMBER)
        IS
            SELECT DISTINCT ta_code, clt_retention_limit
              FROM gin_treaty_arrangements,
                   gin_class_treaties,
                   gin_arrangement_setups
             WHERE     ta_code = clt_ta_code
                   AND ta_code = as_ta_code
                   AND clt_as_code = as_code
                   --AND ta_cur_code = v_cur_code
                   --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
                   AND as_uwyr = v_uwyr
                   AND clt_scl_code = v_scl_code
                   AND (v_dt BETWEEN clt_wef AND clt_wet);

        --,CLT_RETENTION_LIMIT
        CURSOR cur_participant (v_rei_code IN NUMBER)
        IS
            SELECT trpa_agnt_agent_code,
                   trpa_agnt_sht_desc,
                   trpa_rei_code,
                   trpa_uw_year,
                   trpa_comp_rate,
                   trpa_rei_prem_taxable,
                   trpa_trs_code,
                   trpa_trs_sht_desc,
                   trpa_code
              FROM gin_treaty_participants
             WHERE trpa_rei_code = v_rei_code;

        CURSOR cur_pol_facre IS
            SELECT *
              FROM gin_policy_facre_setup
             WHERE pfcs_pol_batch_no = v_batch_no;
    BEGIN
        --- RAISE_ERROR('AHA AHA AHA ....');
        --v_exhange_rate := get_exchange_rate(v_cur_code,v_base_cur_code);
        --    BEGIN
        --     SELECT GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('REINS_IN_BASE_CURRENCY') INTO v_rein_cur_param FROM DUAL;
        --    EXCEPTION
        --    WHEN OTHERS THEN
        --         v_rein_cur_param := 'N';
        --    END;
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

        -- open all risk cursor
        --      BEGIN
        --         UPDATE gin_policy_risk_ri_dtls
        --            SET prrd_facre_rate = 0,
        --                prrd_facre_amount = 0
        --          WHERE prrd_tran_no = v_tran_no AND prrd_ipu_code = v_ipu_code;
        --      EXCEPTION
        --         WHEN OTHERS
        --         THEN
        --            raise_error ('Unable to update facre rates at 1, ...');
        --      END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'REINS_IN_BASE_CURRENCY')
              INTO v_rein_cur_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_rein_cur_param := 'N';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching Treaty  parameter...');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'CHECK_RISK_EXCL_ZONES')
              INTO v_excl_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_excl_param := 'N';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching Treaty  parameter...');
        END;

      begin
      SELECT SUM (CASE WHEN NVL (IPU_TOP_LOCATION_SI, 'N') = 'Y' THEN 1 ELSE 0 END) ,
       SUM (CASE WHEN ipu_relr_code IS NOT NULL THEN 1 ELSE 0 END) 
       INTO v_cntTopLocation, v_cnt_group
      
        FROM GIN_POLICY_aCTIVE_RISKS, GIN_POLICIES, GIN_INSURED_PROPERTY_UNDS
        WHERE     POL_BATCH_NO = IPU_POL_BATCH_NO
           AND POLAR_IPU_CODE = IPU_CODE
           AND POLAR_POL_BATCH_NO = v_batch_no;
       EXCEPTION WHEN OTHERS THEN
       v_cntTopLocation:=0;
       v_cnt_group:=0;
       end;
       
      IF  NVL(v_cntTopLocation,0) >1 THEN
      RAISE_ERROR('Error ...You cannot have more than one risk as top location in the same policy...');
      ELSIF NVL(v_cnt_group,0) >0 AND NVL(v_cntTopLocation,0)>0 THEN 
      RAISE_ERROR('Error ...You cannot have a risk as top location and belonging to grouped policy...');
      END IF;
     
      BEGIN
              SELECT 
               SUM (
                  CASE
                     WHEN NVL (IPU_TOP_LOCATION_SI, 'N') = 'Y'
                     THEN
                        NVL (ipu_reinsure_amt, 0) * pol_cur_rate
                     ELSE
                        0
                  END),
               SUM (NVL (ipu_reinsure_amt, 0) * pol_cur_rate)
          INTO v_top_loc_si,
               v_pol_si
          FROM GIN_POLICY_aCTIVE_RISKS, GIN_POLICIES, GIN_INSURED_PROPERTY_UNDS
         WHERE     POL_BATCH_NO = IPU_POL_BATCH_NO
               AND POLAR_IPU_CODE = IPU_CODE
               AND POLAR_POL_BATCH_NO = v_batch_no;
         EXCEPTION WHEN OTHERS THEN
         v_top_loc_si:=0;
         v_pol_si:=0;
          END;

        BEGIN
            SELECT COUNT (*)
              INTO v_excl_risks
              FROM GIN_INSURED_PROPERTY_UNDS
             WHERE     ipu_pol_batch_no = v_batch_no
                   AND ipu_quza_code IS NOT NULL
                   AND ipu_code = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_excl_risks := 0;
        END;

        IF v_excl_risks = 0
        THEN
            v_excl_risks_param := 'N';
        ELSE
            v_excl_risks_param := 'Y';
        END IF;

        FOR cur_pol_rec IN cur_pol
        LOOP
            IF     NVL (cur_pol_rec.pol_exch_rate_fixed, 'N') = 'N'
               AND cur_pol_rec.pol_policy_status != 'CO'
            THEN
                v_exhange_rate := 1;
                v_exhange_rate :=
                    get_currexch_rate (cur_pol_rec.pol_cur_code,
                                       v_rnd,
                                       v_bcur_rnd);
            ELSE                                 -- TO TAKE CARE OF FIXED RATE
                -- v_exhange_rate :=  get_currexch_rate (cur_pol_rec.pol_cur_code, v_rnd, v_bcur_rnd);
                v_exhange_rate := cur_pol_rec.pol_cur_rate;
                v_rnd :=
                    get_curr_rounding (cur_pol_rec.pol_cur_code, v_bcur_rnd);
            END IF;



            --raise_error('HERE='||cur_pol_rec.pol_cur_code||';'||v_exhange_rate||';'||v_tran_type);
            BEGIN
                SELECT NVL (pol_loaded, 'N')
                  INTO v_load_status
                  FROM gin_policies
                 WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_load_status := NVL (cur_pol_rec.pol_loaded, 'N');
            END;

            BEGIN
                SELECT SUM (
                           DECODE (NVL (pfcs_amt_or_rate, 'R'),
                                   'R', NVL (pfcs_rate, 0),
                                   0)),
                       SUM (
                           DECODE (NVL (pfcs_amt_or_rate, 'R'),
                                   'R', 0,
                                   NVL (pfcs_rate, 0)))
                  INTO v_pol_fc_rate, v_pol_fc_amt
                  FROM gin_policy_facre_setup
                 WHERE pfcs_pol_batch_no = v_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error computing preset facultative cessions.');
            END;

            FOR cur_all_risks_rec IN cur_all_risks (cur_pol_rec.pol_loaded)
            LOOP
                v_bind_max_exp := 0;

                IF     NVL (v_bind_max_exp, 0) = 0
                   AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'Y'
                THEN
                    v_dummy := 0;

                    SELECT COUNT ('x')
                      INTO v_dummy
                      FROM gin_binder_details
                     WHERE     db_bind_code = cur_all_risks_rec.ipu_bind_code
                           AND db_scl_code =
                               cur_all_risks_rec.ipu_sec_scl_code;

                    IF NVL (v_dummy, 0) > 1
                    THEN
                        raise_error (
                            'Setup Error, Maximum accumulation defined more than once for this binder');
                    ELSIF NVL (v_dummy, 0) = 1
                    THEN
                        BEGIN
                            SELECT db_max_limit
                              INTO v_bind_max_exp
                              FROM gin_binder_details
                             WHERE     db_bind_code =
                                       cur_all_risks_rec.ipu_bind_code
                                   AND db_scl_code =
                                       cur_all_risks_rec.ipu_sec_scl_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                                raise_error (
                                    'Unable to retrieve the maxmium exposure for the bordereaux scl');
                        END;
                    ELSIF NVL (v_dummy, 0) = 0
                    THEN
                        BEGIN
                            SELECT NVL (bind_max_exposure, 0)
                              INTO v_bind_max_exp
                              FROM gin_binders
                             WHERE bind_code =
                                   cur_all_risks_rec.ipu_bind_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                                raise_error (
                                    'Unable to retrieve the maxmium exposure for the bordereaux');
                        END;
                    END IF;

                    --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                    IF     NVL (v_bind_max_exp, 0) > 0
                       AND NVL (v_bind_max_exp, 0) <
                           NVL (cur_all_risks_rec.ipu_max_exposure, 0)
                    THEN
                        raise_error (
                               'The maximum exposure amount for the risk '
                            || cur_all_risks_rec.ipu_property_id
                            || ' is greater than the allowed limit of '
                            || v_bind_max_exp);
                    END IF;
                END IF;

                ------------------
                /*
                      --normaly do not populate new treaties when there is a refund premium
                    this situations is required for loaded risks on their first endorsement that
                    result into refund premium
                */

                /**** NOTE THIS STATEMENT SHOULD NOT INCLUDE THE -1 BUT ITS OPENED FOR ALLOWING OKWAKOS TRANSACTIONS
                TO PASS- HE REFUSED TO EDIT LOADED TRANSACTIONS PROPERLY SO ON PREMIUM REFUNDS ON NON EXISTING RISKS HE IS
                FORCED TO ENTER IT AFRESH THEN GIVE A BUT CHARGE PREMIUM

                IF SIGN(NVL(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)) IN (1,0) OR NVL(v_load_status,'N') ='Y'  THEN

                */
                IF    SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)) IN
                          (1, 0, -1)
                   OR NVL (v_load_status, 'N') = 'Y'
                THEN
                    BEGIN
                        v_no_ri_si := NULL;

                        SELECT NVL (scl_no_ri_si, 'N'),
                               NVL (scl_reinsure_wot_ri_prog, 'N')
                          INTO v_no_ri_si, v_reinsure_wot_ri_prog
                          FROM gin_sub_classes
                         WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Unable to retrieve RI SI status for the sub class '
                                || cur_all_risks_rec.ipu_sec_scl_code);
                    END;

                    IF     NVL (v_no_ri_si, 'N') = 'N'
                       AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
                    THEN
                        raise_error (
                               'No reinsure amount specified, cannot reinsure this risk '
                            || cur_all_risks_rec.ipu_item_desc
                            || ';ipu_sec_scl_code='
                            || cur_all_risks_rec.ipu_sec_scl_code);
                    END IF;

                    -- open arrangements cursor
                    --reserve facre sessions if its not a new business or renewal
                    BEGIN
                        v_prrd_code := NULL;
                        v_facre_amt := 0;

                        SELECT prrd_code,
                               prrd_facre_amount,
                               prrd_avail_fulc_bal
                          INTO v_prrd_code, v_facre_amt, v_facre_excess
                          FROM gin_policy_risk_ri_dtls
                         WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                               AND prrd_tran_no = v_tran_no;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            v_prrd_code := NULL;
                            v_facre_amt := 0;
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to retrieve RI details, ...');
                    END;

                    ---get related risks
                    v_retention_amt := 0;
                    v_grp_tot_ret := 0;
                    v_group_si := 0;

                    IF cur_all_risks_rec.ipu_relr_code IS NOT NULL
                    THEN
                        --first check if there is any ri transaction not adjusted
                        BEGIN
                            --GGT_TRANS_NO
                            v_unadjusted_ri_tran := 0;

                            SELECT COUNT (ggt_trans_no)
                              INTO v_unadjusted_ri_tran
                              FROM gin_gis_transactions
                             WHERE     ggt_uw_clm_tran = 'R'
                                   AND (   ggt_trans_authorised IS NULL
                                        OR ggt_trans_authorised IN ('N', 'R'))
                                   AND ggt_risk_grp_code =
                                       cur_all_risks_rec.ipu_relr_code;

                            IF NVL (v_unadjusted_ri_tran, 0) > 0
                            THEN
                                raise_error (
                                       'There are '
                                    || v_unadjusted_ri_tran
                                    || ' Grouped RI transactions not adjusted. please adjust them first.');
                            END IF;
                        END;

                        v_group_si := 0;
                        v_grp_flag := TRUE;
                        v_group_si :=
                            get_group_top_loc (
                                cur_all_risks_rec.ipu_pol_batch_no,
                                cur_all_risks_rec.ipu_pol_policy_no,
                                cur_all_risks_rec.ipu_relr_code,
                                cur_all_risks_rec.ipu_rc_code,
                                cur_all_risks_rec.ipu_eff_wef);

                        --v_group_si := v_group_si * v_exhange_rate;
                        IF NVL (v_group_si, 0) = 0
                        THEN
                            v_group_si := 1;
                        END IF;

                        FOR cur_related_risks_rec
                            IN cur_related_risks (
                                   cur_all_risks_rec.ipu_relr_code,
                                   cur_all_risks_rec.ipu_eff_wef,
                                   cur_all_risks_rec.ipu_id)
                        LOOP
                            BEGIN
                                UPDATE gin_insured_property_unds
                                   SET ipu_reinsured = 1,
                                       ipu_grp_top_loc =
                                           ROUND (
                                                 NVL (v_group_si, 0)
                                               * cur_related_risks_rec.pol_cur_rate,
                                               v_rnd),
                                       ipu_grp_si_risk_pct =
                                           ROUND (
                                                 (  NVL (
                                                        cur_related_risks_rec.ipu_reinsure_amt,
                                                        0)
                                                  * cur_related_risks_rec.pol_cur_rate)
                                               / DECODE (NVL (v_group_si, 0),
                                                         0, 100,
                                                         v_group_si)
                                               * 100,
                                               4)                         --??
                                 WHERE ipu_code =
                                       cur_related_risks_rec.ipu_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to update related risks RI details, ...');
                            END;
                        END LOOP;

                        v_grp_pct := 0;
                        v_grp_pct :=
                            ROUND (
                                  (  NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                          0)
                                   * v_exhange_rate)
                                / v_group_si
                                * 100,
                                4);
                        v_group_si := ROUND (v_group_si / v_exhange_rate);



                        --v_retention_amt :=NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0) - (NVL(v_facre_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)/100) - NVL(cur_all_risks_rec.IPU_FACRE_AMOUNT,0);
                        --v_grp_tot_ret   :=v_retention_amt;
                        --v_retention_amt := v_retention_amt * v_grp_pct / 100;
                        v_reinsure_amt := v_group_si;
                    ELSE
                        v_grp_pct := 100;
                        IF NVL(v_cntTopLocation,0)=1 THEN 
                                           /***TOP LOCATION**********/
                           BEGIN
                           v_group_si:=v_top_loc_si;
                          
                            UPDATE gin_insured_property_unds
                               SET ipu_reinsured = 1,
                                   ipu_grp_top_loc =
                                      ROUND (  NVL (v_group_si, 0)
                                             * cur_pol_rec.pol_cur_rate,
                                             v_rnd
                                            ),
                                   ipu_grp_si_risk_pct =
                                      ROUND
                                         (  (  NVL
                                                  (cur_all_risks_rec.ipu_reinsure_amt,
                                                   0
                                                  )
                                             * cur_pol_rec.pol_cur_rate
                                            )
                                          / DECODE (NVL (v_group_si, 0),
                                                    0, 100,
                                                    v_group_si
                                                   )
                                          * 100,
                                          4
                                         )                                    --??
                             WHERE ipu_code = cur_all_risks_rec.ipu_code;
                             EXCEPTION
                                WHEN OTHERS
                                THEN
                                   raise_error
                                      ('Unable to update related risks RI details, ...'
                                      );
                             END;
                             
                          v_grp_pct := 0;
                          v_grp_pct :=
                             ROUND (  (  NVL (v_top_loc_si, 0)  * v_exhange_rate  )  / v_pol_si  * 100,  4  );
                              
                          v_group_si := ROUND (v_pol_si / v_exhange_rate);
                          v_reinsure_amt := v_group_si;                          
                           
                         ELSE                          
                          v_reinsure_amt :=  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0);

                         END IF;
                    END IF;

                    DBMS_OUTPUT.put_line (
                        '1v_retention_amt=' || v_retention_amt);
                    DBMS_OUTPUT.put_line (
                           'ipu_reinsure_amt='
                        || NVL (cur_all_risks_rec.ipu_reinsure_amt, 0));

                    IF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) != 0
                    THEN                                                --????
                        v_retention_amt :=
                            ROUND (
                                  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                                - (  NVL (v_facre_rate, 0)
                                   * NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                          0)
                                   / 100)
                                - NVL (v_facre_amt, 0)
                                - NVL (
                                      get_risk_ri_pool (
                                          cur_all_risks_rec.ipu_code),
                                      0),
                                v_rnd);
                        v_retention_amt :=
                            v_retention_amt * NVL (v_grp_pct, 100) / 100;
                    ELSE
                        v_retention_amt := 0;
                    END IF;

                    DBMS_OUTPUT.put_line (
                        '2v_retention_amt=' || v_retention_amt);
                    DBMS_OUTPUT.put_line ('v_facre_rate=' || v_facre_rate);
                    DBMS_OUTPUT.put_line (
                           'get_risk_ri_pool (cur_all_risks_rec.ipu_code)='
                        || get_risk_ri_pool (cur_all_risks_rec.ipu_code));

                    /* REMMED OUT BY MAYNARD.06022020. THE EQ DIFF IS POPULATED ON EN TRANS
                                   IF cur_pol_rec.pol_policy_status IN
                                         ('NB', 'RN', 'SP', 'EN', 'CN', 'CO')
                                   THEN
                                      v_eq_prem :=
                                           cur_all_risks_rec.ipu_earthqke_prem_diff
                                         * SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0));
                                   ELSE
                                      v_eq_prem := 0;
                                   END IF;
                     */
                    IF cur_pol_rec.pol_policy_status IN ('NB',
                                                         'RN',
                                                         'SP',
                                                         'CO',
                                                         'EX')
                    THEN
                        v_eq_prem :=
                              cur_all_risks_rec.ipu_earth_quake_prem
                            * SIGN (
                                  NVL (cur_all_risks_rec.ipu_endos_diff_amt,
                                       0));
                    ELSIF cur_pol_rec.pol_policy_status IN ('EN', 'CN')
                    THEN
                        v_eq_prem :=
                              cur_all_risks_rec.ipu_earthqke_prem_diff
                            * SIGN (
                                  NVL (cur_all_risks_rec.ipu_endos_diff_amt,
                                       0));
                    ELSE
                        v_eq_prem := 0;
                    END IF;

                    --               IF  cur_all_risks_rec.IPU_CODE=20184215224  THEN
                    --                RAISE_ERROR('v_eq_prem:'||v_eq_prem);
                    --               END IF;
                    IF v_prrd_code IS NULL
                    THEN
                        BEGIN
                            SELECT TO_NUMBER (
                                          TO_CHAR (SYSDATE, 'YYYY')
                                       || gin_prrd_code_seq.NEXTVAL)
                              INTO v_prrd_code
                              FROM DUAL;

                            v_cede_pool := 'Y';
                            DBMS_OUTPUT.put_line (
                                ' v_retention_amt=' || v_retention_amt);
                            DBMS_OUTPUT.put_line (
                                   ' ipu_reinsure_amt='
                                || cur_all_risks_rec.ipu_reinsure_amt);

                            INSERT INTO gin_policy_risk_ri_dtls (
                                            prrd_code,
                                            prrd_ipu_code,
                                            prrd_idx,
                                            prrd_tran_no,
                                            prrd_wef,
                                            prrd_wet,
                                            prrd_current,
                                            prrd_comp_retention,
                                            prrd_avail_fulc_bal,
                                            prrd_gross_comp_retention,
                                            prrd_allowed_grs_comp_ret,
                                            prrd_facre_amount,
                                            prrd_com_retention_rate,
                                            prrd_grp_si_risk_pct,
                                            prrd_grp_top_loc,
                                            prrd_grp_comp_gross_ret,
                                            prrd_grp_comp_net_ret,
                                            prrd_ri_prem,
                                            prrd_earthquake_prem,
                                            prrd_ri_net_less_eq_prem,
                                            prrd_prev_prrd_code,
                                            prrd_cede_pool,
                                            prrd_ri_si)
                                     VALUES (
                                         v_prrd_code,
                                         cur_all_risks_rec.ipu_code,
                                         1,
                                         v_tran_no,
                                         cur_all_risks_rec.ipu_wef,
                                         cur_all_risks_rec.ipu_wet,
                                         'Y',
                                         ROUND (v_retention_amt, v_rnd),
                                         0,
                                         ROUND (v_retention_amt, v_rnd),
                                         ROUND (v_retention_amt, v_rnd),
                                         0,
                                         ROUND (
                                               v_retention_amt
                                             / DECODE (
                                                   NVL (
                                                       cur_all_risks_rec.ipu_reinsure_amt,
                                                       0),
                                                   0, 1,
                                                   cur_all_risks_rec.ipu_reinsure_amt)
                                             * 100,
                                             4),
                                         v_grp_pct,
                                         NVL (v_group_si, 0),
                                         v_grp_tot_ret,
                                         0,
                                         ROUND (
                                             cur_all_risks_rec.ipu_endos_diff_amt,
                                             v_rnd),
                                         v_eq_prem,
                                           --ROUND(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
                                           ROUND (
                                               NVL (
                                                   cur_all_risks_rec.ipu_endos_diff_amt,
                                                   0))
                                         - NVL (v_eq_prem, 0),
                                         --(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0))) ,
                                         v_prrd_code,
                                         v_cede_pool,
                                         cur_all_risks_rec.ipu_reinsure_amt);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to create risk RI details, ...');
                        END;

                        -- v_cnt :=   (NVL(v_pol_fc_rate,0)/100 * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) + nvl(v_pol_fc_amt,0);
                        BEGIN
                            UPDATE gin_insured_property_unds
                               SET ipu_current_prrd_code = v_prrd_code
                             WHERE ipu_code = cur_all_risks_rec.ipu_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to update risks current RI details code, ...');
                        END;
                    ELSE
                        BEGIN
                            --PRRD_AVAIL_FULC_BAL =ROUND(DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,v_facre_rate * (DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) /100))),
                            --PRRD_EXCESS_PCT        =ROUND(v_facre_rate,4),
                            -- raise_error('update v_retention_amt='||v_retention_amt);
                            --raise_error('cur_all_risks_rec.ipu_reinsure_amt='||cur_all_risks_rec.ipu_reinsure_amt||'v_retention_amt='||v_retention_amt);

                            DBMS_OUTPUT.put_line (
                                ' 2v_retention_amt=' || v_retention_amt);
                            DBMS_OUTPUT.put_line (
                                   ' 2ipu_reinsure_amt='
                                || cur_all_risks_rec.ipu_reinsure_amt);

                               UPDATE gin_policy_risk_ri_dtls
                                  SET prrd_comp_retention = v_retention_amt,
                                      prrd_gross_comp_retention =
                                          ROUND (v_retention_amt, v_rnd),
                                      prrd_allowed_grs_comp_ret =
                                          ROUND (v_retention_amt, v_rnd),
                                      prrd_com_retention_rate =
                                          ROUND (
                                              DECODE (
                                                  NVL (
                                                      cur_all_risks_rec.ipu_reinsure_amt,
                                                      0),
                                                  0, 100,
                                                    v_retention_amt
                                                  / NVL (
                                                        cur_all_risks_rec.ipu_reinsure_amt,
                                                        0)
                                                  * 100),
                                              4),   /***miti changed here ***/
                                      prrd_grp_top_loc =
                                          ROUND (NVL (v_group_si, 0), v_rnd),
                                      prrd_grp_si_risk_pct =
                                          ROUND (v_grp_pct, 4),
                                      prrd_grp_comp_gross_ret =
                                          ROUND (v_grp_tot_ret, v_rnd),
                                      prrd_ri_prem =
                                          ROUND (
                                              cur_all_risks_rec.ipu_endos_diff_amt,
                                              v_rnd),
                                      prrd_comp_net_rate =
                                          ROUND (
                                              DECODE (
                                                  NVL (
                                                      cur_all_risks_rec.ipu_reinsure_amt,
                                                      0),
                                                  0, 100,
                                                    v_retention_amt
                                                  * NVL (
                                                        cur_all_risks_rec.ipu_reinsure_amt,
                                                        0)
                                                  / 100),
                                              4),   /***miti changed here ***/
                                      prrd_earthquake_prem = v_eq_prem,
                                      --ROUND(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)),
                                      prrd_ri_net_less_eq_prem =
                                          (  ROUND (
                                                 NVL (
                                                     cur_all_risks_rec.ipu_endos_diff_amt,
                                                     0))
                                           - NVL (v_eq_prem, 0)),
                                      prrd_ri_si =
                                          cur_all_risks_rec.ipu_reinsure_amt
                                --(ROUND(NVL(cur_all_risks_rec.IPU_EARTHQKE_PREM_DIFF,0),v_rnd) * sign(nvl(cur_all_risks_rec.IPU_ENDOS_DIFF_AMT,0)))
                                WHERE     prrd_ipu_code =
                                          cur_all_risks_rec.ipu_code
                                      AND prrd_code = v_prrd_code
                                      AND prrd_tran_no = v_tran_no
                            RETURNING prrd_cede_pool
                                 INTO v_cede_pool;
                        --                  EXCEPTION
                        --                     WHEN OTHERS
                        --                     THEN
                        --                        raise_error
                        --                                 ('Unable to update the risk RI details, ...');
                        END;
                    END IF;

                    DBMS_OUTPUT.put_line (
                        '3v_retention_amt=' || v_retention_amt);
                    v_arrngmt_defined := 0;

                    IF v_cede_pool = 'Y'
                    THEN
                        BEGIN
                            pop_pool_risk (v_batch_no,
                                           cur_all_risks_rec.ipu_code,
                                           v_tran_no,
                                           v_prrd_code);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error populating pool amount...');
                        END;

                        v_arrngmt_defined := 2;
                    END IF;

                    /*populate xol*/
                    BEGIN
                        pop_xol_risk (v_batch_no,
                                      cur_all_risks_rec.ipu_code,
                                      v_tran_no,
                                      v_prrd_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('Error populating xol amount...');
                    END;

                    --raise_error('===here==='||v_cede_pool);
                    IF     NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
                       AND NVL (v_pol_fc_amt, 0) != 0
                    THEN
                        raise_error (
                            'An amount facre setup has been provided when risks exist with no SI exist. Change all facre setups to percentage.');
                    ELSIF NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
                    THEN
                        v_rsk_fc_rate := NVL (v_pol_fc_rate, 0);
                    ELSE
                        v_rsk_fc_rate :=
                              (  (  NVL (v_pol_fc_amt, 0)
                                  / NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                         0))
                               * 100)
                            + NVL (v_pol_fc_rate, 0);
                    END IF;

                    --v_rsk_fc_rate := ((nvl(v_pol_fc_amt,0)/NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0))*100) + NVL(v_pol_fc_rate,0);

                    --||'FCAMOUNT='||(NVL(v_pol_fc_rate,0) * NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) + nvl(v_pol_fc_amt,0));
                    IF NVL (v_rsk_fc_rate, 0) > 0
                    THEN
                        v_rsk_fc_amnt :=
                            ROUND (
                                  v_rsk_fc_rate
                                * NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                                / 100,
                                v_rnd);

                        IF v_rsk_fc_rate > 100
                        THEN
                            raise_error (
                                'The preset facultative placement percentage/amount is more than the risk SI');
                        END IF;

                        v_facre_excess :=
                            NVL (v_facre_amt, 0) + NVL (v_rsk_fc_amnt, 0);

                        UPDATE gin_policy_risk_ri_dtls
                           SET prrd_avail_fulc_bal = v_rsk_fc_amnt,
                               prrd_excess_pct = v_rsk_fc_rate
                         WHERE prrd_code = v_prrd_code;

                        FOR cur_pol_facre_rec IN cur_pol_facre
                        LOOP
                            insert_facre (
                                v_batch_no,
                                cur_all_risks_rec.ipu_code,
                                cur_pol_facre_rec.pfcs_agn_code,
                                cur_pol_facre_rec.pfcs_agn_sht_desc,
                                cur_pol_facre_rec.pfcs_amt_or_rate,
                                cur_pol_facre_rec.pfcs_rate,
                                v_user,
                                'A',
                                NULL,
                                'N',
                                cur_pol_facre_rec.pfcs_accepted_date,
                                cur_pol_facre_rec.pfcs_accepted,
                                cur_pol_facre_rec.pfcs_comm_rate,
                                NULL,
                                NULL,
                                NULL,
                                NULL);
                        END LOOP;
                    END IF;

                    v_arrngmt_defined := 0;
                    v_arrangement := NULL;
                    v_arrangement_type := NULL;
                    v_dummy := 0;

                    SELECT COUNT (DISTINCT ('x'))
                      INTO v_dummy
                      FROM gin_treaty_arrangements, gin_class_treaties
                     WHERE     ta_code = clt_ta_code
                           AND clt_scl_code =
                               cur_all_risks_rec.ipu_sec_scl_code
                           AND (cur_all_risks_rec.ipu_eff_wef BETWEEN clt_wef
                                                                  AND clt_wet);

                    --raise_error('dummy-'||v_dummy);
                    IF v_dummy > 1
                    THEN
                        --raise_error('The sub class '||cur_all_risks_rec.ipu_sec_scl_code||' has been defined in more than one treaty arrangements');
                        raise_error (
                               'The sub class '
                            || cur_all_risks_rec.ipu_sec_scl_code
                            || ' has been defined in more than one treaty arrangements');
                    END IF;

                    --FOR cur_arrangments_rec IN cur_arrangments(cur_all_risks_rec.ipu_sec_scl_code,cur_all_risks_rec.IPU_UW_YR,cur_all_risks_rec.ipu_eff_wef) LOOP
                    --raise_error(cur_all_risks_rec.ipu_sec_scl_code||'='||cur_all_risks_rec.IPU_UW_YR||';'||cur_pol_rec.pol_cur_code);
                    FOR cur_arrangments_rec
                        IN cur_arrangments (
                               cur_all_risks_rec.ipu_sec_scl_code,
                               cur_all_risks_rec.ipu_uw_yr,
                               cur_pol_rec.pol_cur_code)
                    LOOP
                        IF NVL (cur_arrangments_rec.as_status, 'N') != 'A'
                        THEN
                            raise_error (
                                   'The RI arrangement defined for the sub class code '
                                || cur_all_risks_rec.ipu_sec_scl_code
                                || ' has not been authorised. '
                                || cur_arrangments_rec.as_status
                                || ';'
                                || cur_pol_rec.pol_cur_code
                                || ';'
                                || cur_all_risks_rec.ipu_uw_yr
                                || ';'
                                || cur_all_risks_rec.ipu_sec_scl_code);
                        END IF;

                        --DBMS_OUTPUT.PUT_LINE('3 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
                        v_arrangement := cur_arrangments_rec.ta_code;
                        -- get the underwriting year to refere to for the treaty
                        v_arrngmt_defined := 1;
                        v_trt_uwyr := NULL;
                        v_arrangement_type := cur_arrangments_rec.ta_type;

                        IF cur_arrangments_rec.ta_type IN ('U', 'X')
                        THEN
                            --v_trt_uwyr := NVL(cur_all_risks_rec.IPU_INCEPTION_UWYR,v_pol_incept_year);
                            v_trt_uwyr := cur_all_risks_rec.ipu_uw_yr;
                        /** commented on 20/03/2002by Njuki to take care of clean cut and uw yr treaties
                        --v_trt_uwyr := v_pol_incept_year;
                        the bug may be check if the risk is changing its uwyr if the arrangement is a clean cut it should not change if the arrangement is unwr year ***/
                        ELSE
                            --v_trt_uwyr :=TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'));
                            --remmed for same reason above
                            v_trt_uwyr := cur_all_risks_rec.ipu_uw_yr;
                        END IF;

                        --get retention limit
                        --DBMS_OUTPUT.PUT_LINE('1 cur_all_risks_rec.ipu_Rc_code='||cur_all_risks_rec.ipu_Rc_code||'v_load_status='||v_load_status);
                        v_dc_pol_loaded := NVL (v_load_status, 'N');

                        IF cur_pol_rec.pol_policy_status = 'DC'
                        THEN
                            BEGIN
                                SELECT NVL (pol_loaded, 'N')
                                  INTO v_dc_pol_loaded
                                  FROM gin_policies,
                                       gin_insured_property_unds
                                 WHERE     ipu_code =
                                           cur_all_risks_rec.ipu_prev_ipu_code
                                       AND pol_batch_no = ipu_pol_batch_no;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Error determining previous endorsements status..');
                            END;
                        END IF;

                        IF    (cur_pol_rec.pol_policy_status != 'DC'
                           OR (    cur_pol_rec.pol_policy_status = 'DC'
                               AND NVL (v_load_status, 'N') = 'Y'))
                            AND   NVL(v_cntTopLocation,0)=0 
                        THEN
                            v_retention_amt := 0;
                            v_retention_type := NULL;

                            --IF NVL(cur_all_risks_rec.IPU_OVERRIDE_RI_RETENTION,0) != 0 THEN
                            --    v_retention_amt := NVL(cur_all_risks_rec.IPU_OVERRIDE_RI_RETENTION,0);
                            --ELSE
                            --          raise_error('here='||cur_all_risks_rec.ipu_Rc_code||';'||cur_all_risks_rec.ipu_sec_scl_code||';'||cur_arrangments_rec.ta_code||';'||v_trt_uwyr);
                            IF cur_all_risks_rec.ipu_rc_code IS NOT NULL
                            THEN
                                BEGIN
                                    --raise_Error(cur_all_risks_rec.ipu_sec_scl_code||'='||cur_arrangments_rec.ta_code
                                    --||'='||v_trt_uwyr||'='||cur_all_risks_rec.ipu_rc_code);
                                    SELECT tcc_retention_limit,
                                           tcc_retention_type,
                                           as_code,
                                           tcc_fac_oblig_limit,
                                           ta_cur_code
                                      INTO v_retention_amt,
                                           v_retention_type,
                                           v_as_code,
                                           v_fac_oblig_limit,
                                           v_trt_cur_code
                                      FROM gin_trt_class_categories,
                                           gin_arrangement_setups,
                                           gin_treaty_arrangements
                                     WHERE     as_ta_code = ta_code
                                           AND tcc_as_code = as_code
                                           AND tcc_scl_code =
                                               cur_all_risks_rec.ipu_sec_scl_code
                                           AND as_ta_code =
                                               cur_arrangments_rec.ta_code
                                           AND as_uwyr = v_trt_uwyr
                                           AND tcc_rc_code =
                                               cur_all_risks_rec.ipu_rc_code;

                                    --DBMS_OUTPUT.PUT_LINE('2 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
                                    IF v_retention_type = 'P'
                                    THEN
                                        SELECT DISTINCT
                                                 clt_retention_limit
                                               * v_retention_amt
                                               / 100,
                                               as_code,
                                               clt_fac_oblig_limit,
                                               ta_cur_code
                                          INTO v_retention_amt,
                                               v_as_code,
                                               v_fac_oblig_limit,
                                               v_trt_cur_code
                                          FROM gin_class_treaties,
                                               gin_arrangement_setups,
                                               gin_treaty_arrangements
                                         WHERE     as_ta_code = ta_code
                                               AND clt_as_code = as_code
                                               AND clt_scl_code =
                                                   cur_all_risks_rec.ipu_sec_scl_code
                                               AND as_ta_code =
                                                   cur_arrangments_rec.ta_code
                                               AND as_uwyr = v_trt_uwyr
                                               AND (cur_all_risks_rec.ipu_eff_wef BETWEEN clt_wef
                                                                                      AND clt_wet);
                                    --    message('3 ret='||v_retention_amt||' scl='||cur_all_risks_rec.ipu_sec_scl_code||'ta='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'rc_code='||cur_all_risks_rec.ipu_Rc_code);
                                    END IF;
                                EXCEPTION
                                    WHEN NO_DATA_FOUND
                                    THEN
                                        SELECT DISTINCT clt_retention_limit,
                                                        as_code,
                                                        clt_fac_oblig_limit,
                                                        ta_cur_code
                                          INTO v_retention_amt,
                                               v_as_code,
                                               v_fac_oblig_limit,
                                               v_trt_cur_code
                                          FROM gin_class_treaties,
                                               gin_arrangement_setups,
                                               gin_treaty_arrangements
                                         WHERE     as_ta_code = ta_code
                                               AND clt_as_code = as_code
                                               AND clt_scl_code =
                                                   cur_all_risks_rec.ipu_sec_scl_code
                                               AND as_ta_code =
                                                   cur_arrangments_rec.ta_code
                                               AND as_uwyr = v_trt_uwyr;
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to retrieve risk class retention amount');
                                END;
                            ELSE
                                v_retention_amt := 0;

                                --raise_Error ('xcx1v_retention_amt='||v_retention_amt||'scl='||cur_all_risks_rec.ipu_sec_scl_code||'tacode='||cur_arrangments_rec.ta_code||'v_trt_uwyr='||v_trt_uwyr||'wef='||to_char(cur_all_risks_rec.ipu_eff_wef,'DD/MM/YYYY'));
                                BEGIN
                                    SELECT DISTINCT clt_retention_limit,
                                                    as_code,
                                                    clt_fac_oblig_limit,
                                                    ta_cur_code
                                      INTO v_retention_amt,
                                           v_as_code,
                                           v_fac_oblig_limit,
                                           v_trt_cur_code
                                      FROM gin_class_treaties,
                                           gin_arrangement_setups,
                                           gin_treaty_arrangements
                                     WHERE     as_ta_code = ta_code
                                           AND clt_as_code = as_code
                                           AND clt_scl_code =
                                               cur_all_risks_rec.ipu_sec_scl_code
                                           AND as_ta_code =
                                               cur_arrangments_rec.ta_code
                                           AND as_uwyr = v_trt_uwyr;
                                --AND (cur_all_risks_rec.ipu_eff_wef BETWEEN CLT_WEF AND NVL(CLT_WET,TO_dATE('31/12/'||AS_UWYR,'DD/MM/RR')));
                                EXCEPTION
                                    WHEN NO_DATA_FOUND
                                    THEN
                                        v_retention_amt :=
                                              NVL (
                                                  cur_all_risks_rec.ipu_reinsure_amt,
                                                  0)
                                            - NVL (v_facre_amt, 0)
                                            - NVL (v_facre_excess, 0)
                                            + get_risk_ri_pool (v_prrd_code);
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to retrieve the arrangement retention limit');
                                END;

                                -- RAISE_ERROR(cur_arrangments_rec.ta_code||';'||v_trt_uwyr||';'||cur_all_risks_rec.ipu_eff_wef||';'||cur_all_risks_rec.ipu_sec_scl_code);
                                IF NVL (v_retention_amt, 0) = 0
                                THEN
                                    raise_error (
                                           'No Gross Retention or Max XOL deductible defined for the sub class code '
                                        || cur_all_risks_rec.ipu_sec_scl_code
                                        || ';'
                                        || v_trt_uwyr);
                                END IF;
                            END IF;

                            DBMS_OUTPUT.put_line (
                                   '4v_retention_amt='
                                || v_retention_amt
                                || ' v_fac_oblig_limit='
                                || v_fac_oblig_limit);

                            --END IF;
                            -- RAISE_ERROR(v_bcur_code ||' ; '|| v_trt_cur_code||' ; '||v_retention_amt||';'||v_reinsure_amt||';'||cur_pol_rec.pol_cur_code);

                            IF v_trt_cur_code != cur_pol_rec.pol_cur_code
                            THEN
                                IF    (v_bcur_code = v_trt_cur_code)
                                   OR     (NVL (
                                               cur_pol_rec.pol_exch_rate_fixed,
                                               'N') =
                                           'Y')
                                      AND NVL (v_rein_cur_param, 'N') = 'Y'
                                THEN
                                    --raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate||';'||cur_pol_rec.pol_cur_rate);
                                    v_retention_amt :=
                                        ROUND (
                                              v_retention_amt
                                            / cur_pol_rec.pol_cur_rate,
                                            v_rnd);
                                    v_retention_amt :=
                                        ROUND (v_retention_amt, v_rnd);
                                    v_fac_oblig_limit :=
                                        ROUND (
                                              v_fac_oblig_limit
                                            / cur_pol_rec.pol_cur_rate,
                                            v_rnd);
                                --v_reinsure_amt := ROUND (v_reinsure_amt * cur_pol_rec.pol_cur_rate,  v_rnd  );
                                --raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
                                --                        raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate||';'||v_reinsure_amt);
                                ELSE
                                    v_trt_cur_rate :=
                                        get_exchange_rate (v_bcur_code,
                                                           v_trt_cur_code);
                                    v_retention_amt :=
                                        ROUND (
                                              v_retention_amt
                                            * v_trt_cur_rate
                                            / cur_pol_rec.pol_cur_rate,
                                            v_rnd);
                                    v_fac_oblig_limit :=
                                        ROUND (
                                              v_fac_oblig_limit
                                            * v_trt_cur_rate
                                            / cur_pol_rec.pol_cur_rate,
                                            v_rnd);
                                    v_reinsure_amt :=
                                        ROUND (
                                              v_reinsure_amt
                                            * v_trt_cur_rate
                                            / cur_pol_rec.pol_cur_rate,
                                            v_rnd);
                                --                         raise_error('v_retention_amt 1='||v_retention_amt||';'||v_exhange_rate);
                                END IF;
                            ELSE
                                v_retention_amt :=
                                    ROUND (v_retention_amt, v_rnd);
                            END IF;

                            --                  raise_error(v_retention_amt||';'||v_reinsure_amt);
                            IF v_reinsure_amt > NVL (v_retention_amt, 0)
                            THEN
                                v_retention_amt := NVL (v_retention_amt, 0);
                            ELSE
                                v_retention_amt := v_reinsure_amt;
                            END IF;

                            -- raise_error(v_reinsure_amt||';'||v_retention_amt);

                            -- END IF;
                            --       RAISE_ERROR(v_retention_amt);

                            --****************
                            IF (v_retention_amt * NVL (v_grp_pct, 100) / 100) >
                                 NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                               - NVL (v_facre_amt, 0)
                               - NVL (v_facre_excess, 0)
                               - NVL (get_risk_ri_pool (v_prrd_code), 0)
                            THEN
                                v_retention_amt :=
                                      NVL (
                                          cur_all_risks_rec.ipu_reinsure_amt,
                                          0)
                                    - NVL (v_facre_amt, 0)
                                    - NVL (v_facre_excess, 0)
                                    - NVL (get_risk_ri_pool (v_prrd_code), 0);
                            -- RAISE_ERROR('ooo='||v_retention_amt||';'||cur_all_risks_rec.ipu_reinsure_amt||';'||v_facre_amt||';'||v_facre_excess||';'||get_risk_ri_pool(v_prrd_code));
                            ELSE
                                v_retention_amt :=
                                    (  v_retention_amt
                                     * NVL (v_grp_pct, 100)
                                     / 100);
                            -- - NVL(get_risk_ri_pool(v_prrd_code),0); --+NVL(get_risk_ri_pool(v_prrd_code),0);
                            END IF;

                            DBMS_OUTPUT.put_line (
                                '6v_retention_amt=' || v_retention_amt);
                            DBMS_OUTPUT.put_line (
                                   'GIS_RI_PROCEDURES::LN 26991::v_retention_amt='
                                || v_retention_amt
                                || 'REINAMT='
                                || cur_all_risks_rec.ipu_reinsure_amt
                                || 'FACRE='
                                || v_facre_amt
                                || 'EXCESS='
                                || v_facre_excess
                                || 'v_grp_pct='
                                || v_grp_pct
                                || 'POOL='
                                || get_risk_ri_pool (v_prrd_code));

                            --RAISE_ERROR('v_reinsure_amt'||v_reinsure_amt||';'||v_retention_amt);
                            -- raise_error('GIS_RI_PROCEDURES::LN 25624::v_retention_amt is '||v_retention_amt
                            --                        ||'& v_reinsure_amt is '||v_reinsure_amt
                            --                        ||'prrd_ri_prem '||prrd_ri_prem);
                            BEGIN
                                   --DBMS_OUTPUT.PUT_LINE('7XX v_retention_amt='||v_retention_amt);
                                   UPDATE gin_policy_risk_ri_dtls
                                      SET prrd_comp_retention =
                                              ROUND (v_retention_amt, v_rnd),
                                          prrd_gross_comp_retention =
                                              ROUND (v_retention_amt, v_rnd),
                                          prrd_allowed_grs_comp_ret =
                                              ROUND (v_retention_amt, v_rnd),
                                          prrd_com_retention_rate =
                                              DECODE (
                                                  ROUND (
                                                        v_retention_amt
                                                      / DECODE (
                                                            NVL (v_reinsure_amt,
                                                                 0),
                                                            0, 100,
                                                            v_reinsure_amt)
                                                      * 100,
                                                      4),
                                                  0, 100,
                                                  ROUND (
                                                        v_retention_amt
                                                      / DECODE (
                                                            NVL (v_reinsure_amt,
                                                                 0),
                                                            0, 100,
                                                            v_reinsure_amt)
                                                      * 100,
                                                      4)),
                                          prrd_comp_net_rate =
                                              DECODE (
                                                  ROUND (
                                                        v_retention_amt
                                                      / DECODE (
                                                            NVL (v_reinsure_amt,
                                                                 0),
                                                            0, 100,
                                                            v_reinsure_amt)
                                                      * 100,
                                                      4),
                                                  0, 100,
                                                  ROUND (
                                                        v_retention_amt
                                                      / DECODE (
                                                            NVL (v_reinsure_amt,
                                                                 0),
                                                            0, 100,
                                                            v_reinsure_amt)
                                                      * 100,
                                                      4)),
                                          /* REMMED OUT BY MAYNARD.02092019. THE BASED_ON_CHANGE SHOULD WORK BASED ON ANNUAL PREMIUM */
                                          --                               prrd_net_prem =  ROUND  (  (DECODE    (NVL    (v_reinsure_amt,   0    ),     0, 100,    v_retention_amt / NVL    (v_reinsure_amt,    0      )   * 100   )   )   * NVL (prrd_ri_prem, 0)  / 100  ),
                                          prrd_net_prem =
                                              ROUND (
                                                    (DECODE (
                                                         NVL (v_reinsure_amt, 0),
                                                         0, 100,
                                                           v_retention_amt
                                                         / NVL (v_reinsure_amt,
                                                                0)
                                                         * 100))
                                                  * DECODE (
                                                        NVL (v_reinsure_amt, 0),
                                                        0, NVL (prrd_ri_prem, 0),
                                                        NVL (
                                                            cur_all_risks_rec.ipu_gp,
                                                            0))
                                                  / 100),
                                          prrd_as_uwyr = v_trt_uwyr,
                                          prrd_as_code = v_as_code,
                                          prrd_facoblig_limit =
                                              v_fac_oblig_limit,
                                          prrd_facoblig_alloc_chk =
                                              DECODE (
                                                  NVL (v_fac_oblig_limit, 0),
                                                  0, 'N',
                                                  'Y'),
                                          /* DECODE (NVL (prrd_facoblig_alloc_chk, 'N'),
                                                   'Y', 0,
                                                   v_fac_oblig_limit
                                                  )*/
                                          prrd_ri_si =
                                              cur_all_risks_rec.ipu_reinsure_amt
                                    WHERE     prrd_ipu_code =
                                              cur_all_risks_rec.ipu_code
                                          AND prrd_code = v_prrd_code
                                          AND prrd_tran_no = v_tran_no
                                RETURNING prrd_net_prem
                                     INTO v_tst_prrd_net_prem;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to update the risk retention limit');
                            END;
                        --  raise_error('v_retention_amt='||v_retention_amt||';'||cur_all_risks_rec.ipu_reinsure_amt||'v_prrd_code='||v_prrd_code);
                        ELSE
                            BEGIN
                                --v_pol_status
                                v_old_grs_ret_rate := 0;
                                v_net_ret_rate := 0;

                                SELECT prrd_com_retention_rate,
                                       prrd_com_retention_rate,
                                       prrd_as_uwyr,
                                       prrd_as_code,
                                       prrd_facoblig_excess
                                  INTO v_old_grs_ret_rate,
                                       v_net_ret_rate,
                                       v_as_uwyr,
                                       v_as_code,
                                       v_fac_oblig_limit
                                  FROM gin_policy_risk_ri_dtls
                                 WHERE prrd_code =
                                       (SELECT prrd_code
                                          FROM gin_policy_risk_ri_dtls
                                         WHERE     prrd_ipu_code =
                                                   cur_all_risks_rec.ipu_prev_ipu_code
                                               AND prrd_current = 'Y');
                            EXCEPTION
                                WHEN NO_DATA_FOUND
                                THEN
                                    v_old_grs_ret_rate := 0;
                                    v_net_ret_rate := 0;
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to retrieve the prevoius cession rates');
                            END;

                            --RAISE_ERROR(v_net_ret_rate);
                            DBMS_OUTPUT.put_line (
                                'v_net_ret_rate=' || v_net_ret_rate);
                            DBMS_OUTPUT.put_line (
                                   'cur_all_risks_rec.ipu_reinsure_amt='
                                || cur_all_risks_rec.ipu_reinsure_amt);
                            DBMS_OUTPUT.put_line (
                                   'prrd_comp_retention='
                                || ROUND (
                                         NVL (v_net_ret_rate, 0)
                                       / 100
                                       * NVL (
                                             cur_all_risks_rec.ipu_reinsure_amt,
                                             0),
                                       v_rnd));

                            DBMS_OUTPUT.put_line (
                                   'prrd_gross_comp_retention'
                                || ROUND (
                                         NVL (v_old_grs_ret_rate, 0)
                                       / 100
                                       * NVL (
                                             cur_all_risks_rec.ipu_reinsure_amt,
                                             0),
                                       v_rnd));

                            DBMS_OUTPUT.put_line (
                                   'prrd_allowed_grs_comp_ret ='
                                || ROUND (
                                         NVL (v_old_grs_ret_rate, 0)
                                       / 100
                                       * NVL (
                                             cur_all_risks_rec.ipu_reinsure_amt,
                                             0),
                                       v_rnd));
                            DBMS_OUTPUT.put_line (
                                   'prrd_com_retention_rate ='
                                || NVL (v_old_grs_ret_rate, 0));
                            DBMS_OUTPUT.put_line (
                                   'prrd_comp_net_rate = '
                                || NVL (v_net_ret_rate, 0));
                            --                               DBMS_OUTPUT.put_line ('prrd_net_prem ='||
                            --                                  ROUND (  NVL (v_net_ret_rate, 0)
                            --                                         * NVL (prrd_ri_prem, 0)
                            --                                         / 100
                            --                                        ));
                            DBMS_OUTPUT.put_line (
                                'prrd_as_uwyr = ' || v_as_uwyr);
                            DBMS_OUTPUT.put_line (
                                'prrd_as_code = ' || v_as_code);
                            DBMS_OUTPUT.put_line (
                                'prrd_facoblig_limit = ' || v_fac_oblig_limit);
                            --                               DBMS_OUTPUT.put_line ('prrd_facoblig_alloc_chk ='||
                            --                                  DECODE (NVL (v_fac_oblig_limit, 0),
                            --                                          0, 'N',
                            --                                          'Y'
                            --                                         ));
                            /*DECODE (NVL (prrd_facoblig_alloc_chk, 'N'),
                                    'Y', 0,
                                    v_fac_oblig_limit
                                   )*/
                            DBMS_OUTPUT.put_line (
                                   'prrd_ri_si= '
                                || cur_all_risks_rec.ipu_reinsure_amt);


                            BEGIN
                                   UPDATE gin_policy_risk_ri_dtls
                                      SET prrd_comp_retention =
                                              ROUND (
                                                    NVL (v_net_ret_rate, 0)
                                                  / 100
                                                  * NVL (
                                                        cur_all_risks_rec.ipu_reinsure_amt,
                                                        0),
                                                  v_rnd),
                                          prrd_gross_comp_retention =
                                              ROUND (
                                                    NVL (v_old_grs_ret_rate, 0)
                                                  / 100
                                                  * NVL (
                                                        cur_all_risks_rec.ipu_reinsure_amt,
                                                        0),
                                                  v_rnd),
                                          prrd_allowed_grs_comp_ret =
                                              ROUND (
                                                    NVL (v_old_grs_ret_rate, 0)
                                                  / 100
                                                  * NVL (
                                                        cur_all_risks_rec.ipu_reinsure_amt,
                                                        0),
                                                  v_rnd),
                                          prrd_com_retention_rate =
                                              NVL (v_old_grs_ret_rate, 0),
                                          prrd_comp_net_rate =
                                              NVL (v_net_ret_rate, 0),
                                          /* REMMED OUT BY MAYNARD.02092019. THE BASED_ON_CHANGE SHOULD WORK BASED ON ANNUAL PREMIUM */
                                          --                               prrd_net_prem =
                                          --                                  ROUND (  NVL (v_net_ret_rate, 0)
                                          --                                         * NVL (prrd_ri_prem, 0)
                                          --                                         / 100
                                          --                                        ),
                                          prrd_net_prem =
                                              ROUND (
                                                    NVL (v_net_ret_rate, 0)
                                                  * NVL (
                                                        cur_all_risks_rec.ipu_gp,
                                                        0)
                                                  / 100),
                                          prrd_as_uwyr = v_as_uwyr,
                                          prrd_as_code = v_as_code,
                                          prrd_facoblig_limit =
                                              v_fac_oblig_limit,
                                          prrd_facoblig_alloc_chk =
                                              DECODE (
                                                  NVL (v_fac_oblig_limit, 0),
                                                  0, 'N',
                                                  'Y'),
                                          /*DECODE (NVL (prrd_facoblig_alloc_chk, 'N'),
                                                  'Y', 0,
                                                  v_fac_oblig_limit
                                                 )*/
                                          prrd_ri_si =
                                              cur_all_risks_rec.ipu_reinsure_amt
                                    WHERE     prrd_ipu_code =
                                              cur_all_risks_rec.ipu_code
                                          AND prrd_code = v_prrd_code
                                          AND prrd_tran_no = v_tran_no
                                RETURNING prrd_net_prem
                                     INTO v_tst_prrd_net_prem;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        '3322Unable to update the risk retention limit');
                            END;
                        END IF;

                        --               raise_error('GIS_RI_PROCEDURES::LN 27569::cur_arrangments_rec.ta_type ='||cur_arrangments_rec.ta_type
                        --                ||'STATUS = '||cur_pol_rec.pol_policy_status
                        --                ||'v_load_status = '||cur_pol_rec.pol_policy_status);
                        IF     cur_arrangments_rec.ta_type != 'X'
                           AND (   cur_pol_rec.pol_policy_status != 'DC'
                                OR (    cur_pol_rec.pol_policy_status = 'DC'
                                    AND NVL (v_load_status, 'N') = 'Y'))
                        THEN
                            --               raise_error('GIS_RI_PROCEDURES::LN 27576::cur_arrangments_rec.ta_code '|| cur_arrangments_rec.ta_code
                            --                ||' v_trt_uwyr '||v_trt_uwyr
                            --                ||' cur_all_risks_rec.ipu_code '||cur_all_risks_rec.ipu_code
                            --                ||'v_tran_no'||v_tran_no
                            --                ||'scl'||cur_all_risks_rec.ipu_sec_scl_code);
                            FOR cur_treaties_rec
                                IN cur_treaties (
                                       cur_all_risks_rec.ipu_sec_scl_code,
                                       cur_arrangments_rec.ta_code,
                                       v_trt_uwyr,
                                       cur_all_risks_rec.ipu_code)
                            LOOP
                                --                        raise_error('GIS_RI_PROCEDURES::LN 27276::cur_arrangments_rec.ta_code '|| cur_arrangments_rec.ta_code
                                --                        ||' v_trt_uwyr '||v_trt_uwyr
                                --                        ||' cur_all_risks_rec.ipu_code '||cur_all_risks_rec.ipu_code
                                --                        ||'v_tran_no'||v_tran_no
                                --                        ||'scl'||cur_all_risks_rec.ipu_sec_scl_code);

                                check_treaty_participation (
                                    cur_treaties_rec.rei_code);
                                v_arrngmt_defined := 2;

                                IF NVL (v_retention_amt, 0) = 0
                                THEN
                                    v_retention_amt :=
                                        NVL (
                                            cur_treaties_rec.clt_retention_limit,
                                            0);
                                ---    raise_error('Error,Unable to compute retention limit...');
                                END IF;

                                --                        raise_error('GIS_RI_PROCEDURES::LN 27286::rei_code = '||cur_treaties_rec.rei_code
                                --                                  || '& scl = '||cur_all_risks_rec.ipu_sec_scl_code
                                --                                  || '& as code = '||cur_treaties_rec.as_code);

                                BEGIN
                                    SELECT ctl_code,
                                           DECODE (
                                               cur_pol_rec.pol_policy_type,
                                               'N', ctl_cede_rate,
                                               ctl_fi_cede_rate),
                                           ctl_rate_type
                                      INTO v_ctl_code,
                                           v_ctl_cede_rate,
                                           v_ctl_rate_type
                                      FROM gin_class_treaty_limits
                                     WHERE     ctl_rei_code =
                                               cur_treaties_rec.rei_code
                                           AND ctl_scl_code =
                                               cur_all_risks_rec.ipu_sec_scl_code
                                           AND ctl_as_code =
                                               cur_treaties_rec.as_code;
                                EXCEPTION
                                    WHEN NO_DATA_FOUND
                                    THEN
                                        NULL;
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Error while picking the classs treaty ri rates...');
                                END;

                                --                       raise_error(cur_all_risks_rec.ipu_prev_ipu_code);
                                BEGIN
                                    SELECT SUM (NVL (ptotr_trt_si_pcur, 0)) --SUM(DECODE(SIGN(PRRD_RI_PREM),1,ABS(NVL(ptotr_trt_si_pcur,0)),-ABS(NVL(ptotr_trt_si_pcur,0))))
                                      INTO v_trt_si
                                      FROM gin_policy_risk_ri_dtls,
                                           gin_insured_property_unds,
                                           gin_policy_rein_risk_details
                                     WHERE     IPU_CODE = PRRD_IPU_CODE
                                           AND IPU_id =
                                               cur_all_risks_rec.ipu_id
                                           AND PRRD_CODE = PTOTR_PRRD_CODE
                                           AND IPU_CODE = PTOTR_IPU_CODE;
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        v_trt_si := 0;
                                END;

                                IF     (   NVL (v_excl_param, 'X') = 'N'
                                        OR NVL (v_excl_risks_param, 'X') =
                                           'N')
                                   AND NVL (v_excl_risks, 0) = 0
                                THEN
                                    -- insert treaty details for the risk
                                    BEGIN
                                        INSERT INTO gin_policy_rein_risk_details (
                                                        ptotr_code,
                                                        ptotr_risk_cur_code,
                                                        ptotr_trt_cur_code,
                                                        ptotr_risk_si_pcur,
                                                        ptotr_risk_prem_pcur,
                                                        ptotr_rei_code,
                                                        ptotr_trt_code,
                                                        ptotr_trt_sht_desc,
                                                        ptotr_clt_scl_code,
                                                        ptotr_rate,
                                                        ptotr_rate_type,
                                                        ptotr_property_id,
                                                        ptotr_uwyr,
                                                        ptotr_ipu_code,
                                                        ptotr_pol_batch_no,
                                                        ptotr_pol_policy_no,
                                                        ptotr_pol_ren_endos_no,
                                                        ptotr_risk_cur_symbol,
                                                        ptotr_trt_cur_symbol,
                                                        ptotr_sect_code,
                                                        ptotr_ta_code,
                                                        ptotr_as_code,
                                                        ptotr_trs_code,
                                                        ptotr_trs_sht_desc,
                                                        ptotr_ggt_tran_no,
                                                        ptotr_tran_type,
                                                        ptotr_prev_cession_rate,
                                                        ptotr_prrd_code,
                                                        ptotr_earthqke_comm_rate,
                                                        ptotr_allowed_rate,
                                                        ptotr_ctl_code,
                                                        ptotr_trt_prev_si_pcur)
                                                 VALUES (
                                                     ptotr_code_seq.NEXTVAL,
                                                     cur_pol_rec.pol_cur_code,
                                                     cur_treaties_rec.rei_cur_code,
                                                     v_reinsure_amt,
                                                     /*cur_all_risks_rec.IPU_REINSURE_AMT*/
                                                     cur_all_risks_rec.ipu_endos_diff_amt,
                                                     cur_treaties_rec.rei_code,
                                                     cur_treaties_rec.rei_trt_code,
                                                     cur_treaties_rec.rei_trt_sht_desc,
                                                     cur_all_risks_rec.ipu_sec_scl_code,
                                                     --NVL (v_ctl_cede_rate, cur_treaties_rec.rei_cede_rate ),
                                                     NVL (
                                                         v_ctl_cede_rate,
                                                         DECODE (
                                                             cur_pol_rec.pol_policy_type,
                                                             'N', cur_treaties_rec.rei_cede_rate,
                                                             NVL (
                                                                 cur_treaties_rec.rei_fi_cede_rate,
                                                                 cur_treaties_rec.rei_cede_rate))),
                                                     NVL (
                                                         v_ctl_rate_type,
                                                         cur_treaties_rec.rei_rate_type),
                                                     cur_all_risks_rec.ipu_property_id,
                                                     v_trt_uwyr,
                                                     cur_all_risks_rec.ipu_code,
                                                     cur_all_risks_rec.ipu_pol_batch_no,
                                                     cur_all_risks_rec.ipu_pol_policy_no,
                                                     cur_all_risks_rec.ipu_pol_ren_endos_no,
                                                     cur_pol_rec.pol_cur_symbol,
                                                     cur_treaties_rec.rei_cur_symbol,
                                                     cur_all_risks_rec.ipu_sec_sect_code,
                                                     cur_treaties_rec.as_ta_code,
                                                     cur_treaties_rec.as_code,
                                                     cur_treaties_rec.rei_trs_code,
                                                     cur_treaties_rec.rei_trs_sht_desc,
                                                     v_tran_no,
                                                     v_tran_type,
                                                     0,
                                                     v_prrd_code,
                                                     cur_treaties_rec.rei_earthqke_comm_rate,
                                                     --cur_treaties_rec.rei_cede_rate,
                                                     DECODE (
                                                         cur_pol_rec.pol_policy_type,
                                                         'N', cur_treaties_rec.rei_cede_rate,
                                                         cur_treaties_rec.rei_fi_cede_rate),
                                                     v_ctl_code,
                                                     v_trt_si --get_risk_ri_si (cur_all_risks_rec.ipu_id)
                                                             );
                                    EXCEPTION
                                        WHEN OTHERS
                                        THEN
                                            raise_error (
                                                'Error in populate_treaty_details:- Unable to insert new treaty details....');
                                    END;
                                END IF;

                                --insert participants
                                FOR cur_participant_rec
                                    IN cur_participant (
                                           cur_treaties_rec.rei_code)
                                LOOP
                                    BEGIN
                                        IF     (   NVL (v_excl_param, 'Y') =
                                                   'N'
                                                OR NVL (v_excl_risks_param,
                                                        'X') =
                                                   'N')
                                           AND NVL (v_excl_risks, 0) = 0
                                        THEN
                                            INSERT INTO gin_participations (
                                                            part_code,
                                                            part_cede_rate,
                                                            part_trt_code,
                                                            part_trt_sht_desc,
                                                            part_agnt_agent_code,
                                                            part_agnt_sht_desc,
                                                            part_ptotr_code,
                                                            part_rei_code,
                                                            part_pol_cur_code,
                                                            part_pol_cur_symbol,
                                                            part_uwyr,
                                                            part_pol_batch_no,
                                                            part_pol_policy_no,
                                                            part_pol_ren_endos_no,
                                                            part_ipu_code,
                                                            part_ta_code,
                                                            part_as_code,
                                                            part_fiscal_year,
                                                            part_acc_posted,
                                                            part_trs_code,
                                                            part_trs_sht_desc,
                                                            part_scl_code,
                                                            part_ggt_tran_no,
                                                            part_tran_type,
                                                            part_prrd_code,
                                                            part_trpa_code)
                                                     VALUES (
                                                         gin_part_code_seq.NEXTVAL,
                                                         cur_participant_rec.trpa_comp_rate,
                                                         cur_treaties_rec.rei_trt_code,
                                                         cur_treaties_rec.rei_trt_sht_desc,
                                                         cur_participant_rec.trpa_agnt_agent_code,
                                                         cur_participant_rec.trpa_agnt_sht_desc,
                                                         ptotr_code_seq.CURRVAL,
                                                         cur_treaties_rec.rei_code,
                                                         cur_pol_rec.pol_cur_code,
                                                         cur_pol_rec.pol_cur_symbol,
                                                         v_trt_uwyr,
                                                         cur_all_risks_rec.ipu_pol_batch_no,
                                                         cur_all_risks_rec.ipu_pol_policy_no,
                                                         cur_all_risks_rec.ipu_pol_ren_endos_no,
                                                         cur_all_risks_rec.ipu_code,
                                                         cur_treaties_rec.as_ta_code,
                                                         cur_treaties_rec.as_code,
                                                         TO_NUMBER (
                                                             TO_CHAR (
                                                                 SYSDATE,
                                                                 'YYYY')),
                                                         'R',
                                                         cur_treaties_rec.rei_trs_code,
                                                         cur_treaties_rec.rei_trs_sht_desc,
                                                         cur_all_risks_rec.ipu_sec_scl_code,
                                                         v_tran_no,
                                                         v_tran_type,
                                                         v_prrd_code,
                                                         cur_participant_rec.trpa_code);
                                        END IF;
                                    EXCEPTION
                                        WHEN OTHERS
                                        THEN
                                            raise_error (
                                                'Error in populate_treaty_details:- Unable to insert treaty participants details....');
                                    END;
                                END LOOP;                       --participants
                            END LOOP;            --cur_treaties_rec main risks
                        END IF;
                    END LOOP;                            --cur_arrangments_rec

                    v_grp_flag := FALSE;
                    DBMS_OUTPUT.put_line (
                           'GIS_RI_PROCEDURES::LN 27486::v_retention_amt='
                        || v_retention_amt
                        || 'REINAMT='
                        || cur_all_risks_rec.ipu_reinsure_amt
                        || 'FACRE='
                        || v_facre_amt
                        || 'FACRE AMT='
                        || v_rsk_fc_amnt
                        || 'EXCESS='
                        || v_facre_excess
                        || 'v_grp_pct='
                        || v_grp_pct
                        || 'POOL='
                        || get_risk_ri_pool (v_prrd_code));

                    --raise_error('3322Unable v_retention_amt='||v_retention_amt);
                    --DBMS_OUTPUT.PUT_LINE('v_arrngmt_defined='||v_arrngmt_defined);
                    IF     v_arrngmt_defined = 0
                       AND NVL (v_reinsure_wot_ri_prog, 'N') = 'N'
                    THEN
                        v_msg :=
                               'No RI arrangement defined for the sub class code '
                            || cur_all_risks_rec.ipu_sec_scl_code
                            || ' Define the Arrangement first. ------ '
                            || v_arrngmt_defined;
                        raise_error (v_msg);
                    ELSIF v_arrngmt_defined = 1 AND v_arrangement_type != 'X'
                    THEN
                        --DBMS_OUTPUT.PUT_LINE('cur_all_risks_rec.ipu_eff_wef='||cur_all_risks_rec.ipu_eff_wef);
                        FOR cur_cnt_trt_rec
                            IN cur_cnt_trt (
                                   v_arrangement,
                                   v_trt_uwyr,
                                   cur_all_risks_rec.ipu_sec_scl_code,
                                   cur_all_risks_rec.ipu_eff_wef)
                        LOOP
                            IF     cur_cnt_trt_rec.cnt = 0
                               AND NVL (v_reinsure_wot_ri_prog, 'N') = 'N'
                            THEN
                                raise_error (
                                       'No RI treaties have been setup for the sub class code '
                                    || cur_all_risks_rec.ipu_sec_scl_code
                                    || ' UW year '
                                    || v_trt_uwyr
                                    || ' Define the treaties first. ');
                            END IF;
                        END LOOP;
                    END IF;
                END IF;
            --raise_error('v_prrd_code='||v_prrd_code);
            END LOOP;                                      --cur_all_risks_rec
        END LOOP;
    -- raise_error('v_prrd_code='||v_prrd_code);
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL...'
    --            );
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error :- unable to populate treaty details errr...');
    END;

    PROCEDURE pop_pool_risk (v_batch_no    IN NUMBER,
                             v_ipu_code    IN NUMBER,
                             v_tran_no     IN NUMBER,
                             v_prrd_code   IN NUMBER)
    IS
        v_cnt                    NUMBER := 0;
        v_trt_uwyr               NUMBER := NULL;
        cnt                      NUMBER := 1;
        v_retention_amt          NUMBER := 0;
        v_facre_rate             NUMBER := 0;
        v_errmsg                 VARCHAR2 (200);
        v_zero_devide            EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        al_id                    NUMBER;
        v_group_si               NUMBER := 0;
        v_grp_flag               BOOLEAN := FALSE;
        v_grp_pct                NUMBER := 0;
        v_grp_tot_ret            NUMBER := 0;
        v_reinsure_amt           NUMBER := 0;
        v_exhange_rate           NUMBER := 1;
        v_prprd_code             NUMBER;
        v_facre_amt              NUMBER := 0;
        v_facre_excess           NUMBER := 0;
        v_arrngmt_defined        NUMBER := 0;
        v_msg                    VARCHAR2 (200);
        v_arrangement            NUMBER;
        v_arrangement_type       VARCHAR2 (10);
        v_old_grs_ret_rate       NUMBER := 0;
        v_net_ret_rate           NUMBER := 0;
        v_retention_limit        NUMBER := 0;
        v_no_ri_si               VARCHAR2 (2);
        v_dummy                  NUMBER := 0;
        v_retention_type         VARCHAR2 (1) := NULL;
        v_bind_max_exp           NUMBER := 0;
        v_load_status            VARCHAR2 (2);
        v_reinsure_wot_ri_prog   VARCHAR2 (2);
        v_unadjusted_ri_tran     NUMBER := 0;
        v_as_uwyr                NUMBER;
        v_dc_pol_loaded          VARCHAR2 (3);
        v_eq_prem                NUMBER := 0;
        v_rnd                    NUMBER := 0;
        v_bcur_rnd               NUMBER := 0;
        v_bcur_code              NUMBER;
        v_bcur_symbol            VARCHAR2 (15);
        v_trt_amt                NUMBER;
        v_pool_ret_amt           NUMBER;
        v_pool_amt               NUMBER;
        v_pool_com_amt           NUMBER;
        v_pool_vat_amt           NUMBER;
        --v_prrd_code              NUMBER;
        --v_cede_pool              VARCHAR2 (1);
        v_pool_si                NUMBER;
        v_gross_pool_si          NUMBER;
        v_pool_si_rate           NUMBER;
        v_pol_fc_rate            NUMBER;
        v_pol_fc_amt             NUMBER;

        --v_prrd_code   number;
        CURSOR cur_pol IS
            SELECT pol_policy_status,
                   pol_binder_policy,
                   pol_cur_code,
                   pol_cur_symbol,
                   pol_prev_batch_no,
                   pol_loaded,
                   pol_cur_rate
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_all_risks (vpolloaded IN VARCHAR2)
        IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     ipu_comp_retention,
                     ipu_pol_est_max_loss,
                     ipu_avail_fulc_bal,
                     ipu_endos_diff_amt,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_reinsure_amt,
                     ipu_facre_amount,
                     ipu_prev_ipu_code,
                     ipu_relr_code,
                     ipu_eff_wef,
                     ipu_id,
                     ipu_uw_yr,
                     ipu_inception_uwyr,
                     ipu_rc_code,
                     ipu_bind_code,
                     ipu_max_exposure,
                     ipu_earthqke_prem_diff,
                     ipu_covt_code
                FROM gin_insured_property_unds
               WHERE     ipu_pol_batch_no = v_batch_no
                     AND ipu_code = v_ipu_code
                     AND DECODE (NVL (vpolloaded, 'N'), 'N', ipu_reinsured, 1) =
                         1
            ORDER BY 1;

        -- select treaties to reinsure each risk
        CURSOR cur_treaties (v_scl_code     IN NUMBER,
                             v_pta_code     IN NUMBER,
                             v_cover_code   IN NUMBER,
                             v_date         IN DATE,
                             v_ipu          IN NUMBER)
        IS
            SELECT *
              FROM gin_subcl_cover_ri_pool_rates
             WHERE     scrpr_scl_code = v_scl_code
                   AND scrpr_covt_code = v_cover_code
                   AND scrpr_pta_code = v_pta_code
                   -- AND (v_date BETWEEN scrpr_wef AND NVL (scrpr_wet, SYSDATE))
                   AND scrpr_code NOT IN
                           (SELECT prprd_scrpr_code
                              FROM gin_pol_rein_pool_risk_details
                             WHERE     prprd_ipu_code = v_ipu
                                   AND prprd_ggt_tran_no = v_tran_no);

        --get Arrangement Type
        CURSOR cur_arrangments (v_scl_code IN NUMBER)
        IS
            SELECT DISTINCT pta_code
              FROM gin_pool_treaty_arrangements, gin_ri_pool_subclasses
             WHERE pta_code = rps_pta_code AND rps_scl_code = v_scl_code;
    BEGIN
        --v_exhange_rate := get_exchange_rate(v_cur_code,v_base_cur_code);
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);
        DBMS_OUTPUT.put_line ('POOL');

        FOR cur_pol_rec IN cur_pol
        LOOP
            v_exhange_rate :=
                get_currexch_rate (cur_pol_rec.pol_cur_code,
                                   v_rnd,
                                   v_bcur_rnd);

            BEGIN
                SELECT NVL (pol_loaded, 'N')
                  INTO v_load_status
                  FROM gin_policies
                 WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_load_status := NVL (cur_pol_rec.pol_loaded, 'N');
            END;

            DBMS_OUTPUT.put_line ('IN POL');

            BEGIN
                SELECT SUM (
                           DECODE (NVL (pfcs_amt_or_rate, 'R'),
                                   'R', NVL (pfcs_rate, 0),
                                   0)),
                       SUM (
                           DECODE (NVL (pfcs_amt_or_rate, 'R'),
                                   'R', 0,
                                   NVL (pfcs_rate, 0)))
                  INTO v_pol_fc_rate, v_pol_fc_amt
                  FROM gin_policy_facre_setup
                 WHERE pfcs_pol_batch_no = v_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error computing preset facultative cessions.');
            END;

            FOR cur_all_risks_rec IN cur_all_risks (cur_pol_rec.pol_loaded)
            LOOP
                DBMS_OUTPUT.put_line ('IN RISKS');
                v_bind_max_exp := 0;

                IF     NVL (v_bind_max_exp, 0) = 0
                   AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'Y'
                THEN
                    v_dummy := 0;

                    SELECT COUNT ('x')
                      INTO v_dummy
                      FROM gin_binder_details
                     WHERE     db_bind_code = cur_all_risks_rec.ipu_bind_code
                           AND db_scl_code =
                               cur_all_risks_rec.ipu_sec_scl_code;

                    IF NVL (v_dummy, 0) > 1
                    THEN
                        raise_error (
                            'Setup Error, Maximum accumulation defined more than once for this binder');
                    ELSIF NVL (v_dummy, 0) = 1
                    THEN
                        BEGIN
                            SELECT db_max_limit
                              INTO v_bind_max_exp
                              FROM gin_binder_details
                             WHERE     db_bind_code =
                                       cur_all_risks_rec.ipu_bind_code
                                   AND db_scl_code =
                                       cur_all_risks_rec.ipu_sec_scl_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                                raise_error (
                                    'Unable to retrieve the maxmium exposure for the bordereaux scl');
                        END;
                    ELSIF NVL (v_dummy, 0) = 0
                    THEN
                        BEGIN
                            SELECT NVL (bind_max_exposure, 0)
                              INTO v_bind_max_exp
                              FROM gin_binders
                             WHERE bind_code =
                                   cur_all_risks_rec.ipu_bind_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                                raise_error (
                                    'Unable to retrieve the maxmium exposure for the bordereaux');
                        END;
                    END IF;

                    --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                    IF     NVL (v_bind_max_exp, 0) > 0
                       AND NVL (v_bind_max_exp, 0) <
                           NVL (cur_all_risks_rec.ipu_max_exposure, 0)
                    THEN
                        raise_error (
                               'The maximum exposure amount for the risk '
                            || cur_all_risks_rec.ipu_property_id
                            || ' is greater than the allowed limit of '
                            || v_bind_max_exp);
                    END IF;
                END IF;

                IF (   SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)) IN
                           (1, 0, -1)
                    OR NVL (v_load_status, 'N') = 'Y')
                THEN
                    BEGIN
                        v_no_ri_si := NULL;

                        SELECT NVL (scl_no_ri_si, 'N'),
                               NVL (scl_reinsure_wot_ri_prog, 'N')
                          INTO v_no_ri_si, v_reinsure_wot_ri_prog
                          FROM gin_sub_classes
                         WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Unable to retrieve RI SI status for the sub class '
                                || cur_all_risks_rec.ipu_sec_scl_code);
                    END;

                    IF     NVL (v_no_ri_si, 'N') = 'N'
                       AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
                    THEN
                        raise_error (
                               'No reinsure amount specified, cannot reinsure this risk '
                            || cur_all_risks_rec.ipu_item_desc);
                    END IF;

                    -- open arrangements cursor
                    --reserve facre sessions if its not a new business or renewal
                    FOR r
                        IN cur_arrangments (
                               cur_all_risks_rec.ipu_sec_scl_code)
                    LOOP
                        DBMS_OUTPUT.put_line (
                               'IN ARRAGE'
                            || cur_all_risks_rec.ipu_sec_scl_code
                            || ';'
                            || r.pta_code
                            || ';'
                            || cur_all_risks_rec.ipu_covt_code
                            || ';'
                            || cur_all_risks_rec.ipu_wef
                            || ';'
                            || cur_all_risks_rec.ipu_code);

                        FOR i
                            IN cur_treaties (
                                   cur_all_risks_rec.ipu_sec_scl_code,
                                   r.pta_code,
                                   cur_all_risks_rec.ipu_covt_code,
                                   cur_all_risks_rec.ipu_wef,
                                   cur_all_risks_rec.ipu_code)
                        LOOP
                            --raise_error('Unable to update facre rates at 1, ...'||cur_all_risks_rec.IPU_SEC_SCL_CODE||';'||cur_all_risks_rec.IPU_COVT_CODE||';'||cur_all_risks_rec.ipu_wef||';'||cur_all_risks_rec.ipu_code);
                            --                     BEGIN
                            --                        v_prprd_code := NULL;

                            --                        SELECT prprd_code
                            --                          INTO v_prprd_code
                            --                          FROM gin_pol_rein_pool_risk_details
                            --                         WHERE prprd_ipu_code = cur_all_risks_rec.ipu_code
                            --                           AND prprd_covt_code =cur_all_risks_rec.ipu_covt_code
                            --                           AND prprd_ggt_tran_no = v_tran_no;
                            --                     EXCEPTION
                            --                        WHEN NO_DATA_FOUND
                            --                        THEN
                            --                           v_prprd_code := NULL;
                            --                        WHEN OTHERS
                            --                        THEN
                            --                           raise_error ('Unable to retrieve RI details, ...');
                            --                     END;
                            BEGIN
                                v_prprd_code := NULL;

                                SELECT prprd_code
                                  INTO v_prprd_code
                                  FROM gin_pol_rein_pool_risk_details
                                 WHERE     prprd_ipu_code =
                                           cur_all_risks_rec.ipu_code
                                       AND prprd_covt_code =
                                           cur_all_risks_rec.ipu_covt_code
                                       AND prprd_ggt_tran_no = v_tran_no;
                            EXCEPTION
                                WHEN NO_DATA_FOUND
                                THEN
                                    v_prprd_code := NULL;
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to retrieve RI details, ...');
                            END;

                            v_trt_amt := NULL;
                            --ROUND (  NVL (cur_all_risks_rec.prrd_comp_net_rate, 0)* NVL (cur_all_risks_rec.prrd_ri_prem, 0)/ 100,v_rnd);
                            --RAISE_ERROR('cur_all_risks_rec.IPU_ENDOS_DIFF_AMT '||cur_all_risks_rec.IPU_ENDOS_DIFF_AMT||' I.SCRPR_REIN_RATE '||I.SCRPR_REIN_RATE);
                            v_gross_pool_si :=
                                ROUND (
                                      NVL (
                                          cur_all_risks_rec.ipu_reinsure_amt,
                                          cur_all_risks_rec.ipu_max_exposure)
                                    * NVL (i.scrpr_rein_rate, 0)
                                    / 100,
                                    v_rnd);
                            v_reinsure_amt :=
                                ROUND (
                                    NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                         cur_all_risks_rec.ipu_max_exposure),
                                    v_rnd);

                            IF v_gross_pool_si >= i.scrpr_max_limit
                            THEN
                                v_pool_si := i.scrpr_max_limit;
                            ELSE
                                v_pool_si := v_gross_pool_si;
                            END IF;

                            --RAISE_ERROR('v_pool_si='||v_pool_si||';'||v_gross_pool_si||';'||i.scrpr_max_limit||';'||v_reinsure_amt||';'||ROUND (  NVL (cur_all_risks_rec.ipu_reinsure_amt, cur_all_risks_rec.ipu_max_exposure)* NVL(i.scrpr_rein_rate,0)/100, v_rnd));
                            -- v_pool_si := ROUND (  NVL (cur_all_risks_rec.ipu_reinsure_amt, cur_all_risks_rec.ipu_max_exposure) * NVL (i.scrpr_rein_rate, 0) / 100, v_rnd);
                            IF NVL (v_reinsure_amt, 0) = 0
                            THEN
                                v_pool_si_rate := 1;
                            ELSE
                                v_pool_si_rate :=
                                    (v_pool_si / v_reinsure_amt);
                            END IF;

                            v_pool_amt :=
                                  v_pool_si_rate
                                * ROUND (
                                        NVL (
                                            cur_all_risks_rec.ipu_endos_diff_amt,
                                            0)
                                      * NVL (i.scrpr_rein_rate, 0)
                                      / 100,
                                      v_rnd);
                            v_pool_ret_amt :=
                                  NVL (cur_all_risks_rec.ipu_endos_diff_amt,
                                       0)
                                - NVL (v_pool_amt, 0);
                            v_pool_com_amt :=
                                ROUND (
                                      NVL (v_pool_amt, 0)
                                    * NVL (i.scrpr_comm_rate, 0)
                                    / 100,
                                    v_rnd);
                            v_pool_vat_amt :=
                                ROUND (
                                      NVL (v_pool_com_amt, 0)
                                    * NVL (i.scrpr_comm_vat_rate, 0)
                                    / 100,
                                    v_rnd);

                            --raise_error('FGFGHGHGHJHJHJ='||cur_all_risks_rec.ipu_reinsure_amt||';v_pool_si/v_reinsure_amt='||(v_pool_si/v_reinsure_amt)||';'||v_pool_ret_amt||';'||v_pool_com_amt||';'||v_pool_vat_amt||';'||v_pool_si||';'||cur_all_risks_rec.ipu_value||';'||cur_all_risks_rec.ipu_max_exposure);
                            IF v_prprd_code IS NULL
                            THEN
                                BEGIN
                                    SELECT TO_NUMBER (
                                                  TO_CHAR (SYSDATE, 'YYYY')
                                               || gin_prprd_code_seq.NEXTVAL)
                                      INTO v_prprd_code
                                      FROM DUAL;

                                    INSERT INTO gin_pol_rein_pool_risk_details (
                                                    prprd_code,
                                                    prprd_risk_prem_amt,
                                                    prprd_risk_own_ret_amt,
                                                    prprd_risk_cur_code,
                                                    prprd_risk_exch_rate,
                                                    prprd_scrpr_code,
                                                    prprd_rein_pool_rate,
                                                    prprd_ipu_code,
                                                    prprd_scl_code,
                                                    prprd_covt_code,
                                                    prprd_pol_batch_no,
                                                    prprd_rein_pool_amt,
                                                    prprd_rein_pool_comm_rate,
                                                    prprd_rein_pool_vat_rate,
                                                    prprd_rein_pool_comm_amt,
                                                    prprd_rein_pool_vat_amt,
                                                    prprd_prev_prprd_code,
                                                    prprd_ggt_tran_no,
                                                    prprd_property_id,
                                                    prprd_uwyr,
                                                    prprd_pol_ren_endos_no,
                                                    prprd_date,
                                                    prprd_risk_trt_own_ret_amt,
                                                    prprd_pta_code,
                                                    prprd_prrd_code,
                                                    prprd_pool_si)
                                             VALUES (
                                                 v_prprd_code,
                                                 cur_all_risks_rec.ipu_endos_diff_amt,
                                                 NVL (v_pool_ret_amt, 0),
                                                 cur_pol_rec.pol_cur_code,
                                                 v_exhange_rate,
                                                 i.scrpr_code,
                                                 NVL (i.scrpr_rein_rate, 0),
                                                 cur_all_risks_rec.ipu_code,
                                                 cur_all_risks_rec.ipu_sec_scl_code,
                                                 cur_all_risks_rec.ipu_covt_code,
                                                 cur_all_risks_rec.ipu_pol_batch_no,
                                                 NVL (v_pool_amt, 0),
                                                 i.scrpr_comm_rate,
                                                 i.scrpr_comm_vat_rate,
                                                 NVL (v_pool_com_amt, 0),
                                                 NVL (v_pool_vat_amt, 0),
                                                 v_prprd_code,
                                                 v_tran_no,
                                                 cur_all_risks_rec.ipu_property_id,
                                                 cur_all_risks_rec.ipu_uw_yr,
                                                 cur_all_risks_rec.ipu_pol_ren_endos_no,
                                                 SYSDATE,
                                                 NVL (v_trt_amt, 0),
                                                 r.pta_code,
                                                 v_prrd_code,
                                                 v_pool_si);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to create risk RI details, ...');
                                END;
                            ELSE
                                BEGIN
                                    --PRRD_AVAIL_FULC_BAL =ROUND(DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,v_facre_rate * (DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) /100))),
                                    --PRRD_EXCESS_PCT        =ROUND(v_facre_rate,4),
                                    DBMS_OUTPUT.put_line (
                                           'update v_retention_amt='
                                        || v_retention_amt);

                                    UPDATE gin_pol_rein_pool_risk_details
                                       SET prprd_risk_prem_amt =
                                               cur_all_risks_rec.ipu_endos_diff_amt,
                                           prprd_risk_own_ret_amt =
                                               NVL (v_pool_ret_amt, 0),
                                           prprd_rein_pool_amt =
                                               NVL (v_pool_amt, 0),
                                           prprd_rein_pool_comm_rate =
                                               NVL (i.scrpr_comm_rate, 0),
                                           prprd_rein_pool_rate =
                                               NVL (i.scrpr_rein_rate, 0),
                                           prprd_rein_pool_vat_rate =
                                               NVL (i.scrpr_comm_vat_rate, 0),
                                           prprd_rein_pool_comm_amt =
                                               NVL (v_pool_com_amt, 0),
                                           prprd_rein_pool_vat_amt =
                                               NVL (v_pool_vat_amt, 0),
                                           prprd_risk_trt_own_ret_amt =
                                               NVL (v_trt_amt, 0),
                                           prprd_prrd_code = v_prrd_code,
                                           prprd_pool_si = NVL (v_pool_si, 0)
                                     WHERE     prprd_ipu_code =
                                               cur_all_risks_rec.ipu_code
                                           AND prprd_code = v_prprd_code
                                           AND prprd_ggt_tran_no = v_tran_no;
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to update the risk RI details, ...');
                                END;
                            END IF;
                        END LOOP;
                    END LOOP;
                END IF;
            END LOOP;
        END LOOP;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL..1..');
    END;

    PROCEDURE call_pop_treaties (v_batch_no   IN NUMBER,
                                 v_ipu_data   IN web_risk_tab)
    IS
        al_id              NUMBER := 0;
        msg                VARCHAR2 (400);
        v_ta_type          VARCHAR2 (2);
        v_base_cur         NUMBER := 0;
        v_cur_sht_desc     VARCHAR2 (60);
        v_no_ri_si         VARCHAR2 (2);
        v_tran_type        VARCHAR2 (5) := 'NB';
        v_tran_no          NUMBER := 0;
        v_param_ext        VARCHAR2 (1);
        v_curr_uw_yr       NUMBER;
        v_prev_uw_yr       NUMBER;
        -- v_ignore_auth VARCHAR2(1):='N';
        --vautofix         VARCHAR2 (2)  := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_autofix');
        v_user             VARCHAR2 (75)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_param            VARCHAR2 (1) := 'N';
        v_exc_zone         NUMBER := 0;
        v_exc_zone_param   VARCHAR2 (1);

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_rsk (v_param_chq_exc_zones   VARCHAR2,
                        v_param_chq_exc_areas   VARCHAR2)
        IS
            SELECT *
              FROM (SELECT *
                      FROM gin_insured_property_unds
                     WHERE     ipu_pol_batch_no = v_batch_no
                           AND (   NVL (v_param_chq_exc_zones, 'X') = 'N'
                                OR NVL (v_param_chq_exc_areas, 'X') = 'N')
                           AND ipu_quz_code NOT IN
                                   (SELECT tuqz_quz_code
                                      FROM gin_treaty_uncvd_quake_zones,
                                           gin_treaty_setups,
                                           gin_class_treaties
                                     WHERE     tuqz_ta_code = rei_ta_code
                                           AND tuqz_as_code = rei_as_code
                                           AND clt_scl_code =
                                               ipu_sec_scl_code
                                           AND clt_as_code = rei_as_code
                                           AND rei_uw_year =
                                               TO_NUMBER (
                                                   TO_CHAR (ipu_wef, 'RRRR')))
                    UNION
                    SELECT *
                      FROM gin_insured_property_unds
                     WHERE     ipu_pol_batch_no = v_batch_no
                           AND NVL (v_param_chq_exc_zones, 'N') = 'Y'
                           AND ipu_quza_code IN
                                   (SELECT tuqz_quza_code
                                      FROM gin_treaty_uncvd_quake_zones,
                                           gin_treaty_setups,
                                           gin_class_treaties
                                     WHERE     tuqz_ta_code = rei_ta_code
                                           AND tuqz_as_code = rei_as_code
                                           AND clt_scl_code =
                                               ipu_sec_scl_code
                                           AND clt_as_code = rei_as_code
                                           AND rei_uw_year =
                                               TO_NUMBER (
                                                   TO_CHAR (ipu_wef, 'RRRR')))
                    UNION
                    SELECT *
                      FROM gin_insured_property_unds
                     WHERE     ipu_pol_batch_no = v_batch_no
                           AND NVL (v_param_chq_exc_areas, 'X') = 'Y'
                           AND ipu_quza_code IS NULL
                           AND ipu_quz_code IS NULL);
    BEGIN
        IF gin_uw_author_proc.check_prem_compute (v_batch_no) = 'N'
        THEN
            raise_error (
                'Please compute premium on policy. Changes have been made on the policy..');
        END IF;

        BEGIN
            SELECT ggt_trans_no, ggt_btr_trans_code
              INTO v_tran_no, v_tran_type
              FROM gin_gis_transactions
             WHERE ggt_uw_clm_tran = 'U' AND ggt_pol_batch_no = v_batch_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error retrieving transaction number..');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'EX_TO_PICK_CURRENT_UWYR')
              INTO v_param_ext
              FROM DUAL;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_param_ext := 'N';
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'CHECK_RISK_EXCL_ZONES')
              INTO v_param
              FROM DUAL;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_param := 'N';
        END;

        BEGIN
            SELECT COUNT (*)
              INTO v_exc_zone
              FROM GIN_INSURED_PROPERTY_UNDS
             WHERE     ipu_pol_batch_no = v_batch_no
                   AND IPU_QUZA_CODE IS NOT NULL
                   AND IPU_QUZ_CODE IS NOT NULL;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_exc_zone := 0;
        END;

        IF v_exc_zone = 0
        THEN
            v_exc_zone_param := 'N';
        ELSE
            v_exc_zone_param := 'Y';
        END IF;

        BEGIN
            SELECT org_cur_code, cur_symbol
              INTO v_base_cur, v_cur_sht_desc
              FROM tqc_organizations, tqc_currencies
             WHERE cur_code = org_cur_code AND org_code = 2;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_error ('The base currency has not been defined...');
            WHEN TOO_MANY_ROWS
            THEN
                raise_error (
                    'More than one company records have been defined in the company parameters...ensure that only one company record is defined...');
            WHEN OTHERS
            THEN
                raise_error ('Unable to retrieve base currency');
        END;

        BEGIN
            SELECT ggt_btr_trans_code
              INTO v_tran_type
              FROM gin_gis_transactions
             WHERE ggt_trans_no = v_tran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error getting transaction type');
        END;

        IF NVL (v_ipu_data.COUNT, 0) = 0
        THEN
            FOR cur_pol_rec IN cur_pol
            LOOP
                IF cur_pol_rec.pol_policy_status != 'CO'
                THEN
                    IF    cur_pol_rec.pol_authosrised != 'A'
                       OR NVL (cur_pol_rec.pol_loaded, 'N') = 'Y'
                       OR (    cur_pol_rec.pol_authosrised = 'A'
                           AND NVL (cur_pol_rec.pol_reinsured, 'N') = 'N')
                       OR v_ignore_auth
                    THEN
                        FOR i IN cur_rsk (v_param, v_exc_zone_param)
                        LOOP
                            BEGIN
                                UPDATE gin_insured_property_unds
                                   SET ipu_reinsured = 1
                                 WHERE     ipu_pol_batch_no = v_batch_no
                                       AND ipu_code = i.ipu_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Error updating risk as reinsurance ready.');
                            END;

                            --raise_error(i.ipu_code);
                            BEGIN
                                SELECT a.ipu_uw_yr, b.ipu_uw_yr
                                  INTO v_curr_uw_yr, v_prev_uw_yr
                                  FROM gin_insured_property_unds  a,
                                       gin_insured_property_unds  b,
                                       gin_policies
                                 WHERE     a.ipu_prev_ipu_code = b.ipu_code
                                       AND a.ipu_code = i.ipu_code
                                       --                     and pol_policy_status='EN'
                                       AND pol_batch_no = a.ipu_pol_batch_no;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    v_curr_uw_yr := i.ipu_uw_yr;
                                    v_prev_uw_yr := i.ipu_uw_yr;
                            END;

                            del_all_cessions (v_tran_no, i.ipu_code);

                            IF cur_pol_rec.pol_policy_status NOT IN ('DC')
                            THEN
                                IF NVL (v_param_ext, 'N') != 'Y'
                                THEN
                                    IF cur_pol_rec.pol_policy_status NOT IN
                                           ('NB',
                                            'SP',
                                            'RN',
                                            'DC')                     --, 'EX'
                                    THEN
                                        BEGIN
                                            populate_prev_cessions (
                                                cur_pol_rec.pol_batch_no,
                                                cur_pol_rec.pol_uw_year,
                                                cur_pol_rec.pol_cur_code,
                                                v_tran_no,
                                                v_tran_type,
                                                i.ipu_code);
                                        --                           EXCEPTION
                                        --                              WHEN OTHERS
                                        --                              THEN
                                        --                                 raise_error
                                        --                                    ('Unable to populate previuos cessions err 1'
                                        --                                    );
                                        END;
                                    END IF;
                                ELSIF     NVL (v_param_ext, 'N') = 'Y'
                                      AND v_curr_uw_yr = v_prev_uw_yr
                                THEN
                                    IF cur_pol_rec.pol_policy_status NOT IN
                                           ('NB',
                                            'SP',
                                            'RN',
                                            'DC')                     --, 'EX'
                                    THEN
                                        BEGIN
                                            populate_prev_cessions (
                                                cur_pol_rec.pol_batch_no,
                                                cur_pol_rec.pol_uw_year,
                                                cur_pol_rec.pol_cur_code,
                                                v_tran_no,
                                                v_tran_type,
                                                i.ipu_code);
                                        --                           EXCEPTION
                                        --                              WHEN OTHERS
                                        --                              THEN
                                        --                                 raise_error
                                        --                                    ('Unable to populate previuos cessions err 1'
                                        --                                    );
                                        END;
                                    END IF;
                                END IF;


                                BEGIN
                                    populate_treaty_details (
                                        cur_pol_rec.pol_batch_no,
                                        v_tran_no,
                                        v_tran_type,
                                        i.ipu_code);
                                --                  EXCEPTION
                                --                     WHEN OTHERS
                                --                     THEN
                                --                        raise_error
                                --                                   ('Unable to populate treaty details err 2');
                                END;

                                BEGIN
                                    process_facoblig (
                                        cur_pol_rec.pol_batch_no,
                                        v_tran_no,
                                        v_tran_type,
                                        v_user,
                                        i.ipu_code);
                                --                        EXCEPTION
                                --                           WHEN OTHERS
                                --                           THEN
                                --                              raise_error
                                --                                      ('Unable to process_facultative treaty');
                                END;
                            ELSIF cur_pol_rec.pol_policy_status IN ('DC')
                            THEN
                                BEGIN
                                    populate_treaty_details (
                                        cur_pol_rec.pol_batch_no,
                                        v_tran_no,
                                        v_tran_type,
                                        i.ipu_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to populate treaty details err 2');
                                END;

                                BEGIN
                                    populate_prev_cessions (
                                        cur_pol_rec.pol_batch_no,
                                        cur_pol_rec.pol_uw_year,
                                        cur_pol_rec.pol_cur_code,
                                        v_tran_no,
                                        v_tran_type,
                                        i.ipu_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to populate previous cessions err 3');
                                END;
                            END IF;
                        END LOOP;
                    ELSE
                        raise_error (
                            'This Policy Has Already Been Processed And Authorized ...You Cannot Process It Again...');
                    END IF;
                END IF;
            END LOOP;
        ELSE
            FOR cur_pol_rec IN cur_pol
            LOOP
                IF cur_pol_rec.pol_policy_status != 'CO'
                THEN
                    IF    cur_pol_rec.pol_authosrised != 'A'
                       OR NVL (cur_pol_rec.pol_loaded, 'N') = 'Y'
                       OR (    cur_pol_rec.pol_authosrised = 'A'
                           AND NVL (cur_pol_rec.pol_reinsured, 'N') = 'N')
                       OR v_ignore_auth
                    THEN
                        FOR i IN 1 .. v_ipu_data.COUNT
                        LOOP
                            BEGIN
                                UPDATE gin_insured_property_unds
                                   SET ipu_reinsured = 1
                                 WHERE     ipu_pol_batch_no = v_batch_no
                                       AND ipu_code =
                                           v_ipu_data (i).gis_ipu_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Error updating risk as reinsurance ready.');
                            END;

                            del_all_cessions (v_tran_no,
                                              v_ipu_data (i).gis_ipu_code);

                            IF cur_pol_rec.pol_policy_status NOT IN ('DC')
                            THEN
                                IF cur_pol_rec.pol_policy_status NOT IN
                                       ('NB',
                                        'SP',
                                        'RN',
                                        'DC')                         --, 'EX'
                                THEN
                                    BEGIN
                                        populate_prev_cessions (
                                            cur_pol_rec.pol_batch_no,
                                            cur_pol_rec.pol_uw_year,
                                            cur_pol_rec.pol_cur_code,
                                            v_tran_no,
                                            v_tran_type,
                                            v_ipu_data (i).gis_ipu_code);
                                    EXCEPTION
                                        WHEN OTHERS
                                        THEN
                                            raise_error (
                                                'Unable to populate previuos cessions err 1');
                                    END;
                                END IF;

                                --COMMIT;
                                BEGIN
                                    populate_treaty_details (
                                        cur_pol_rec.pol_batch_no,
                                        v_tran_no,
                                        v_tran_type,
                                        v_ipu_data (i).gis_ipu_code);
                                --                  EXCEPTION
                                --                     WHEN OTHERS
                                --                     THEN
                                --                        raise_error
                                --                                   ('Unable to populate treaty details err 2');
                                END;

                                --raise_error('v_tran_no='||v_tran_no);
                                BEGIN
                                    process_facoblig (
                                        cur_pol_rec.pol_batch_no,
                                        v_tran_no,
                                        v_tran_type,
                                        v_user,
                                        v_ipu_data (i).gis_ipu_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to process_facultative treaty');
                                END;
                            ELSIF cur_pol_rec.pol_policy_status IN ('DC')
                            THEN
                                BEGIN
                                    populate_treaty_details (
                                        cur_pol_rec.pol_batch_no,
                                        v_tran_no,
                                        v_tran_type,
                                        v_ipu_data (i).gis_ipu_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to populate treaty details err 2');
                                END;

                                BEGIN
                                    populate_prev_cessions (
                                        cur_pol_rec.pol_batch_no,
                                        cur_pol_rec.pol_uw_year,
                                        cur_pol_rec.pol_cur_code,
                                        v_tran_no,
                                        v_tran_type,
                                        v_ipu_data (i).gis_ipu_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to populate previous cessions err 3');
                                END;
                            END IF;
                        END LOOP;
                    ELSE
                        raise_error (
                            'This Policy Has Already Been Processed And Authorized ...You Cannot Process It Again...');
                    END IF;
                END IF;
            END LOOP;
        END IF;
    --     EXCEPTION WHEN OTHERS
    --     THEN
    --RAISE_ERROR('v_tran_no='||v_tran_no);
    END;

    PROCEDURE call_pop_treaties (v_batch_no IN NUMBER)
    IS
        al_id            NUMBER;
        msg              VARCHAR2 (400);
        v_ta_type        VARCHAR2 (2);
        v_base_cur       NUMBER;
        v_cur_sht_desc   VARCHAR2 (60);
        v_no_ri_si       VARCHAR2 (2);
        v_tran_type      VARCHAR2 (5);
        v_tran_no        NUMBER;
        v_user           VARCHAR2 (75)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_rsk IS
            SELECT *
              FROM gin_insured_property_unds
             WHERE ipu_pol_batch_no = v_batch_no;
    BEGIN
        -- RAISE_ERROR(v_batch_no);
        BEGIN
            SELECT ggt_trans_no, ggt_btr_trans_code
              INTO v_tran_no, v_tran_type
              FROM gin_gis_transactions
             WHERE ggt_uw_clm_tran = 'U' AND ggt_pol_batch_no = v_batch_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error retrieving transaction number..');
        END;

        BEGIN
            SELECT org_cur_code, cur_symbol
              INTO v_base_cur, v_cur_sht_desc
              FROM tqc_organizations, tqc_currencies
             WHERE cur_code = org_cur_code AND org_code = 2;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_error ('The base currency has not been defined...');
            WHEN TOO_MANY_ROWS
            THEN
                raise_error (
                    'More than one company records have been defined in the company parameters...ensure that only one company record is defined...');
            WHEN OTHERS
            THEN
                raise_error ('Unable to retrieve base currency');
        END;

        FOR cur_pol_rec IN cur_pol
        LOOP
            IF cur_pol_rec.pol_policy_status != 'CO'
            THEN
                IF    cur_pol_rec.pol_authosrised != 'A'
                   OR NVL (cur_pol_rec.pol_loaded, 'N') = 'Y'
                   OR (    cur_pol_rec.pol_authosrised = 'A'
                       AND NVL (cur_pol_rec.pol_reinsured, 'N') = 'N')
                   OR v_ignore_auth
                THEN
                    FOR i IN cur_rsk
                    LOOP
                        BEGIN
                            UPDATE gin_insured_property_unds
                               SET ipu_reinsured = 1
                             WHERE     ipu_pol_batch_no = v_batch_no
                                   AND ipu_code = i.ipu_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error updating risk as reinsurance ready.');
                        END;

                        --                  del_all_cessions (v_tran_no, i.ipu_code);

                        IF cur_pol_rec.pol_policy_status NOT IN ('DC')
                        THEN
                            IF cur_pol_rec.pol_policy_status NOT IN ('NB',
                                                                     'SP',
                                                                     'RN',
                                                                     'DC') --, 'EX'
                            THEN
                                BEGIN
                                    populate_prev_cessions (
                                        cur_pol_rec.pol_batch_no,
                                        cur_pol_rec.pol_uw_year,
                                        cur_pol_rec.pol_cur_code,
                                        v_tran_no,
                                        v_tran_type,
                                        i.ipu_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to populate previuos cessions err 1');
                                END;
                            END IF;

                            --COMMIT;
                            BEGIN
                                populate_treaty_details (
                                    cur_pol_rec.pol_batch_no,
                                    v_tran_no,
                                    v_tran_type,
                                    i.ipu_code);
                            --                  EXCEPTION
                            --                     WHEN OTHERS
                            --                     THEN
                            --                        raise_error
                            --                                   ('Unable to populate treaty details err 2');
                            END;

                            --raise_error('v_tran_no='||v_tran_no);
                            BEGIN
                                process_facoblig (cur_pol_rec.pol_batch_no,
                                                  v_tran_no,
                                                  v_tran_type,
                                                  v_user,
                                                  i.ipu_code);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to process_facultative treaty');
                            END;
                        ELSIF cur_pol_rec.pol_policy_status IN ('DC')
                        THEN
                            BEGIN
                                populate_treaty_details (
                                    cur_pol_rec.pol_batch_no,
                                    v_tran_no,
                                    v_tran_type,
                                    i.ipu_code);
                            --                     EXCEPTION
                            --                        WHEN OTHERS
                            --                        THEN
                            --                           raise_error
                            --                                   ('Unable to populate treaty details err 2');
                            END;

                            BEGIN
                                populate_prev_cessions (
                                    cur_pol_rec.pol_batch_no,
                                    cur_pol_rec.pol_uw_year,
                                    cur_pol_rec.pol_cur_code,
                                    v_tran_no,
                                    v_tran_type,
                                    i.ipu_code);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to populate previous cessions err 3');
                            END;
                        END IF;
                    END LOOP;
                ELSE
                    raise_error (
                        'This Policy Has Already Been Processed And Authorized ...You Cannot Process It Again...');
                END IF;
            END IF;
        END LOOP;
    END;

    --   PROCEDURE call_reinsure_risks (
    --      v_batch_no   IN   NUMBER,
    --      v_user       IN   VARCHAR2,
    --      v_ipu_data   IN   web_risk_tab
    --   )
    --   IS
    --      msg              VARCHAR2 (2000);
    --      v_ta_type        VARCHAR2 (100);
    --      v_base_cur       NUMBER;
    --      v_cur_sht_desc   VARCHAR2 (200);
    --      v_tran_code      VARCHAR2 (60);
    --      v_cnt            NUMBER;
    --      v_zero_devide    EXCEPTION;
    --      v_no_ri_si       VARCHAR2 (2);
    --      v_loaded         VARCHAR2 (1)    := 'N';
    --      v_tran_no        NUMBER;
    --      v_ipu_code       NUMBER;
    --      v_xol_uw_param    VARCHAR2 (1);
    --
    --      CURSOR cur_pol
    --      IS
    --         SELECT *
    --           FROM gin_policies
    --          WHERE pol_batch_no = v_batch_no;
    --
    --      CURSOR cur_risk
    --      IS
    --         SELECT *
    --           FROM gin_insured_property_unds
    --          WHERE ipu_pol_batch_no = v_batch_no;
    --
    --      CURSOR cur_pol_rsk
    --      IS
    --         SELECT prrd_code, prrd_excess_pct, facres_pct, trts_pct,
    --                prrd_comp_net_rate,
    --                  NVL (prrd_excess_pct, 0)
    --                + NVL (facres_pct, 0)
    --                + NVL (trts_pct, 0)
    --                + NVL (prrd_comp_net_rate, 0)
    --                + NVL (get_ri_pool_rate (prrd_code), 0) tot_pct
    --           FROM gin_insured_property_unds,
    --                gin_policy_risk_ri_dtls,
    --                (SELECT   ptotr_prrd_code,
    --                          SUM (NVL (ptotr_cession_pct, 0)) trts_pct
    --                     FROM gin_policy_rein_risk_details
    --                    WHERE ptotr_ggt_tran_no = v_tran_no
    --                 GROUP BY ptotr_prrd_code),
    --                (SELECT   fc_prrd_code, SUM (NVL (fc_rate, 0)) facres_pct
    --                     FROM gin_facre_cessions
    --                    WHERE fc_ggt_tran_no = v_tran_no
    --                 GROUP BY fc_prrd_code)
    --          WHERE prrd_code = ptotr_prrd_code(+)
    --            AND prrd_code = fc_prrd_code(+)
    --            AND prrd_ipu_code = ipu_code
    --            AND ipu_pol_batch_no = v_batch_no
    --            AND prrd_tran_no = v_tran_no;
    --
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --   BEGIN
    --      IF gin_uw_author_proc.check_prem_compute (v_batch_no) = 'N'
    --      THEN
    --         raise_error
    --            ('Please compute premium on policy. Changes have been made on the policy..'
    --            );
    --      END IF;
    --
    --      BEGIN
    --         SELECT ggt_trans_no
    --           INTO v_tran_no
    --           FROM gin_gis_transactions
    --          WHERE ggt_uw_clm_tran = 'U' AND ggt_pol_batch_no = v_batch_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error retrieving transaction number..');
    --      END;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('ENABLE_UW_XOL_PROCESSING')
    --           INTO v_xol_uw_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_xol_uw_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            NULL;
    --      END;
    --
    --      FOR cur_pol_rec IN cur_pol
    --      LOOP
    --         BEGIN
    --            SELECT ggt_btr_trans_code
    --              INTO v_tran_code
    --              FROM gin_gis_transactions
    --             WHERE ggt_trans_no = v_tran_no;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               NULL;
    --         END;
    --
    --         IF v_tran_code != 'CO'
    --         THEN
    --            IF    cur_pol_rec.pol_authosrised != 'A'
    --               OR (    cur_pol_rec.pol_authosrised = 'A'
    --                   AND NVL (cur_pol_rec.pol_reinsured, 'N') = 'N'
    --                  )
    --               OR (    cur_pol_rec.pol_authosrised = 'A'
    --                   AND NVL (cur_pol_rec.pol_loaded, 'N') = 'Y'
    --                  )
    --               OR v_ignore_auth
    --            THEN
    --               BEGIN
    --                  SELECT org_cur_code, cur_symbol
    --                    INTO v_base_cur, v_cur_sht_desc
    --                    FROM tqc_organizations, tqc_currencies
    --                   WHERE cur_code = org_cur_code AND org_code = 2;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error ('The base currency has not been defined...');
    --                  WHEN TOO_MANY_ROWS
    --                  THEN
    --                     raise_error
    --                        ('More than one company records have been defined in the company parameters...ensure that only one company record is defined...'
    --                        );
    --               END;
    --
    --               IF cur_pol_rec.pol_policy_status NOT IN ('CN', 'DC')
    --               THEN
    --                  IF NVL (v_ipu_data.COUNT, 0) = 0
    --                  THEN
    --                     FOR r IN cur_risk
    --                     LOOP
    --                        BEGIN
    --                           pool_reinsure_prc (cur_pol_rec.pol_batch_no, 'Y');
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                        ('Error populating pool details.....');
    --                        END;
    --
    ----raise_error('v_tran_code='||v_tran_code);
    --                        BEGIN
    --                           reinsure_risks (cur_pol_rec.pol_batch_no,
    --                                           cur_pol_rec.pol_cur_code,
    --                                           v_base_cur,
    --                                           v_cur_sht_desc,
    --                                           v_tran_no,
    --                                           v_tran_code,
    --                                           r.ipu_code
    --                                          );
    ----                          EXCEPTION
    ----                             WHEN OTHERS
    ----                             THEN
    ----                                raise_error
    ----                                   ('Failed to reinsure risks that are not CN or DN..'
    ----                                   );
    --                        END;
    --      --RAISE_ERROR('VVVV='||v_xol_uw_param);
    --                         if nvl(v_xol_uw_param,'N')='Y' THEN
    --                            BEGIN
    --                                reinsure_xol_risks (cur_pol_rec.pol_batch_no,
    --                                                     v_tran_no
    --                                                    );
    --                            EXCEPTION
    --                                WHEN OTHERS
    --                                THEN
    --                                   raise_error ('Error populating xol details.....');
    --                            END;
    --                         END IF;
    --
    --                        BEGIN
    --                           del_zero_cessions (v_tran_no, r.ipu_code);
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Failed the synchronisation of risk reinsurance and participations for non CN or DN transactions..'
    --                                 );
    --                        END;
    --                     END LOOP;
    --                  ELSE
    --                     FOR i IN 1 .. v_ipu_data.COUNT
    --                     LOOP
    --                        BEGIN
    --                           pool_reinsure_prc (cur_pol_rec.pol_batch_no, 'Y');
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                        ('Error populating pool details.....');
    --                        END;
    --
    --                        BEGIN
    --                           reinsure_risks (cur_pol_rec.pol_batch_no,
    --                                           cur_pol_rec.pol_cur_code,
    --                                           v_base_cur,
    --                                           v_cur_sht_desc,
    --                                           v_tran_no,
    --                                           v_tran_code,
    --                                           v_ipu_data (i).gis_ipu_code
    --                                          );
    ----                        EXCEPTION
    ----                           WHEN OTHERS
    ----                           THEN
    ----                              raise_error
    ----                                 ('Failed to reinsure risks that are not CN or DN..'
    ----                                 );
    --                        END;
    --             --RAISE_ERROR(v_xol_uw_param);
    --                          if nvl(v_xol_uw_param,'N')='Y' THEN
    --                             BEGIN
    --                                reinsure_xol_risks (cur_pol_rec.pol_batch_no,
    --                                                     v_tran_no
    --                                                    );
    --                             EXCEPTION
    --                                WHEN OTHERS
    --                                THEN
    --                                   raise_error ('Error populating xol details.....');
    --                             END;
    --                           END IF;
    --                        BEGIN
    --                           del_zero_cessions (v_tran_no,
    --                                              v_ipu_data (i).gis_ipu_code
    --                                             );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Failed the synchronisation of risk reinsurance and participations for non CN or DN transactions..'
    --                                 );
    --                        END;
    --                     END LOOP;
    --                  END IF;
    --               ELSE
    --                  BEGIN
    --                     SELECT NVL (pol_loaded, 'N')
    --                       INTO v_loaded
    --                       FROM gin_policies
    --                      WHERE pol_batch_no = cur_pol_rec.pol_batch_no;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Error determining if the previous transaction is a loaded transactions..'
    --                           );
    --                  END;
    --
    --                  IF NVL (v_loaded, 'N') = 'Y'
    --                  THEN
    --                     /* ADDED to take care of declarations and cancellations of loaded risks*/
    --                     IF NVL (v_ipu_data.COUNT, 0) = 0
    --                     THEN
    --                        FOR r IN cur_risk
    --                        LOOP
    --                           BEGIN
    --                              pool_reinsure_prc (cur_pol_rec.pol_batch_no,
    --                                                 'Y'
    --                                                );
    --                           EXCEPTION
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_error
    --                                        ('Error populating pool details.....');
    --                           END;
    --
    --                           BEGIN
    --                              reinsure_risks (cur_pol_rec.pol_batch_no,
    --                                              cur_pol_rec.pol_cur_code,
    --                                              v_base_cur,
    --                                              v_cur_sht_desc,
    --                                              v_tran_no,
    --                                              v_tran_code,
    --                                              r.ipu_code
    --                                             );
    --                           EXCEPTION
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_error
    --                                    ('Failed to reinsure risks at loaded policies level..'
    --                                    );
    --                           END;
    --
    --                           if nvl(v_xol_uw_param,'N')='Y' THEN
    --                             BEGIN
    --                                reinsure_xol_risks (cur_pol_rec.pol_batch_no,
    --                                                     v_tran_no
    --                                                    );
    --                             EXCEPTION
    --                                WHEN OTHERS
    --                                THEN
    --                                   raise_error ('Error populating xol details.....');
    --                             END;
    --                            END IF;
    --
    --                        END LOOP;
    --                     END IF;
    --                  ELSE
    --                     BEGIN
    --                        reinsure_risk_dc_cn (cur_pol_rec.pol_batch_no,
    --                                             cur_pol_rec.pol_cur_code,
    --                                             v_base_cur,
    --                                             v_cur_sht_desc,
    --                                             v_tran_no,
    --                                             v_tran_code
    --                                            );
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                              ('Failed to reinsure CN/DN risks at loaded policies level..'
    --                              );
    --                     END;
    --                  END IF;
    --
    --                  BEGIN
    --                     del_zero_cessions (v_tran_no, NULL);
    --                  --- this was included because of loaded declarations
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Failed to synchronise sessions risks at loaded policies level..'
    --                           );
    --                  END;
    --               /* remmed to take care of declarations and cancellations of loaded risks*/
    --               --reinsure_risk_dc_cn (cur_pol_rec.pol_batch_no,v_base_cur,v_cur_sht_desc,v_tran_no);
    --               END IF;
    --
    --               BEGIN
    --                  process_facoblig (cur_pol_rec.pol_batch_no,
    --                                    v_tran_no,
    --                                    v_tran_code,
    --                                    v_user,
    --                                    NULL                   --take care of this
    --                                   );
    ----               EXCEPTION
    ----                  WHEN OTHERS
    ----                  THEN
    ----                     raise_error ('Error processing facultative obligatory..');
    --               END;
    --
    --               BEGIN
    --                  gin_manage_exceptions.proc_ri_ret_excepts
    --                                                   (cur_pol_rec.pol_batch_no,
    --                                                    v_tran_no,
    --                                                    TRUNC (SYSDATE),
    --                                                    v_tran_code
    --                                                   );
    --                  gin_manage_exceptions.proc_trt_cess_excepts
    --                                                    (cur_pol_rec.pol_batch_no,
    --                                                     v_tran_no,
    --                                                     TRUNC (SYSDATE),
    --                                                     v_tran_code
    --                                                    );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('Error processing Exceptions..');
    --               END;
    --
    --               DBMS_OUTPUT.put_line ('hapa');
    --
    --               FOR cur_pol_rsk_rec IN cur_pol_rsk
    --               LOOP
    --                  DBMS_OUTPUT.put_line (   'cur_pol_rsk_rec.tot_pct='
    --                                        || cur_pol_rsk_rec.tot_pct
    --                                       );
    --
    --                  IF ABS (cur_pol_rsk_rec.tot_pct - 100) < 0.01
    --                  THEN
    --                     UPDATE gin_policy_risk_ri_dtls
    --                        SET prrd_comp_net_rate =
    --                                 prrd_comp_net_rate
    --                               - (cur_pol_rsk_rec.tot_pct - 100)
    --                      WHERE prrd_code = cur_pol_rsk_rec.prrd_code;
    --                  /*ELSIF 100 - cur_pol_rsk_rec.tot_pct < .01
    --                  THEN
    --                     UPDATE gin_policy_risk_ri_dtls
    --                        SET prrd_comp_net_rate =
    --                                 prrd_comp_net_rate
    --                               + (100 - cur_pol_rsk_rec.tot_pct)
    --                      WHERE prrd_code = cur_pol_rsk_rec.prrd_code;*/
    --                  END IF;
    --               END LOOP;
    --
    --               BEGIN
    --                  gis_ri_procedures.round_uw_ri_to_own (v_tran_no);
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                             ('Error rounding off the reinsurance cessions..');
    --               END;
    --            --COMMIT;
    --            ELSE
    --               raise_error
    --                  ('This Policy Has Already Been Processed And Authorized ...You Cannot Process It Again...'
    --                  );
    --            END IF;
    --         END IF;
    --      END LOOP;
    --   -- RAISE_ERROR('Masinde1');
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0....'
    --            );
    --   END;
    PROCEDURE call_reinsure_risks (v_batch_no   IN NUMBER,
                                   v_user       IN VARCHAR2,
                                   v_ipu_data   IN web_risk_tab)
    IS
        msg              VARCHAR2 (2000);
        v_ta_type        VARCHAR2 (100);
        v_base_cur       NUMBER;
        v_cur_sht_desc   VARCHAR2 (200);
        v_tran_code      VARCHAR2 (60);
        v_cnt            NUMBER;
        v_zero_devide    EXCEPTION;
        v_no_ri_si       VARCHAR2 (2);
        v_loaded         VARCHAR2 (1) := 'N';
        v_tran_no        NUMBER;
        v_ipu_code       NUMBER;
        v_xol_uw_param   VARCHAR2 (1);

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_risk IS
            SELECT *
              FROM gin_insured_property_unds
             WHERE ipu_pol_batch_no = v_batch_no;

        CURSOR cur_pol_rsk IS
            SELECT prrd_code,
                   prrd_excess_pct,
                   facres_pct,
                   trts_pct,
                   prrd_comp_net_rate,
                     NVL (prrd_excess_pct, 0)
                   + NVL (facres_pct, 0)
                   + NVL (trts_pct, 0)
                   + NVL (prrd_comp_net_rate, 0)
                   + NVL (get_ri_pool_rate (prrd_code), 0)    tot_pct
              FROM gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   (  SELECT ptotr_prrd_code,
                             SUM (NVL (ptotr_cession_pct, 0))     trts_pct
                        FROM gin_policy_rein_risk_details
                       WHERE ptotr_ggt_tran_no = v_tran_no
                    GROUP BY ptotr_prrd_code),
                   (  SELECT fc_prrd_code, SUM (NVL (fc_rate, 0)) facres_pct
                        FROM gin_facre_cessions
                       WHERE fc_ggt_tran_no = v_tran_no
                    GROUP BY fc_prrd_code)
             WHERE     prrd_code = ptotr_prrd_code(+)
                   AND prrd_code = fc_prrd_code(+)
                   AND prrd_ipu_code = ipu_code
                   AND ipu_pol_batch_no = v_batch_no
                   AND prrd_tran_no = v_tran_no;

        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    BEGIN
        IF gin_uw_author_proc.check_prem_compute (v_batch_no) = 'N'
        THEN
            raise_error (
                'Please compute premium on policy. Changes have been made on the policy..');
        END IF;

        BEGIN
            SELECT ggt_trans_no
              INTO v_tran_no
              FROM gin_gis_transactions
             WHERE ggt_uw_clm_tran = 'U' AND ggt_pol_batch_no = v_batch_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error retrieving transaction number..');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'ENABLE_UW_XOL_PROCESSING')
              INTO v_xol_uw_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_xol_uw_param := 'N';
            WHEN OTHERS
            THEN
                NULL;
        END;

        FOR cur_pol_rec IN cur_pol
        LOOP
            BEGIN
                SELECT ggt_btr_trans_code
                  INTO v_tran_code
                  FROM gin_gis_transactions
                 WHERE ggt_trans_no = v_tran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
            END;

            IF v_tran_code != 'CO'
            THEN
                IF    cur_pol_rec.pol_authosrised != 'A'
                   OR (    cur_pol_rec.pol_authosrised = 'A'
                       AND NVL (cur_pol_rec.pol_reinsured, 'N') = 'N')
                   OR (    cur_pol_rec.pol_authosrised = 'A'
                       AND NVL (cur_pol_rec.pol_loaded, 'N') = 'Y')
                   OR v_ignore_auth
                THEN
                    BEGIN
                        SELECT org_cur_code, cur_symbol
                          INTO v_base_cur, v_cur_sht_desc
                          FROM tqc_organizations, tqc_currencies
                         WHERE cur_code = org_cur_code AND org_code = 2;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                'The base currency has not been defined...');
                        WHEN TOO_MANY_ROWS
                        THEN
                            raise_error (
                                'More than one company records have been defined in the company parameters...ensure that only one company record is defined...');
                    END;

                    IF cur_pol_rec.pol_policy_status NOT IN ('CN', 'DC')
                    THEN
                        IF NVL (v_ipu_data.COUNT, 0) = 0
                        THEN
                            FOR r IN cur_risk
                            LOOP
                                BEGIN
                                    pool_reinsure_prc (
                                        cur_pol_rec.pol_batch_no,
                                        'Y');
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Error populating pool details.....');
                                END;

                                --raise_error('v_tran_code='||v_tran_code);
                                BEGIN
                                    reinsure_risks (cur_pol_rec.pol_batch_no,
                                                    cur_pol_rec.pol_cur_code,
                                                    v_base_cur,
                                                    v_cur_sht_desc,
                                                    v_tran_no,
                                                    v_tran_code,
                                                    r.ipu_code);
                                --                          EXCEPTION
                                --                             WHEN OTHERS
                                --                             THEN
                                --                                raise_error
                                --                                   ('Failed to reinsure risks that are not CN or DN..'
                                --                                   );
                                END;

                                --RAISE_ERROR('VVVV='||v_xol_uw_param);
                                IF NVL (v_xol_uw_param, 'N') = 'Y'
                                THEN
                                    BEGIN
                                        reinsure_xol_risks (
                                            cur_pol_rec.pol_batch_no,
                                            v_tran_no);
                                    EXCEPTION
                                        WHEN OTHERS
                                        THEN
                                            raise_error (
                                                'Error populating xol details.....');
                                    END;
                                END IF;

                                BEGIN
                                    del_zero_cessions (v_tran_no, r.ipu_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Failed the synchronisation of risk reinsurance and participations for non CN or DN transactions..');
                                END;
                            END LOOP;
                        ELSE
                            FOR i IN 1 .. v_ipu_data.COUNT
                            LOOP
                                BEGIN
                                    pool_reinsure_prc (
                                        cur_pol_rec.pol_batch_no,
                                        'Y');
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Error populating pool details.....');
                                END;

                                BEGIN
                                    reinsure_risks (
                                        cur_pol_rec.pol_batch_no,
                                        cur_pol_rec.pol_cur_code,
                                        v_base_cur,
                                        v_cur_sht_desc,
                                        v_tran_no,
                                        v_tran_code,
                                        v_ipu_data (i).gis_ipu_code);
                                --                        EXCEPTION
                                --                           WHEN OTHERS
                                --                           THEN
                                --                              raise_error
                                --                                 ('Failed to reinsure risks that are not CN or DN..'
                                --                                 );
                                END;

                                --RAISE_ERROR(v_xol_uw_param);
                                IF NVL (v_xol_uw_param, 'N') = 'Y'
                                THEN
                                    BEGIN
                                        reinsure_xol_risks (
                                            cur_pol_rec.pol_batch_no,
                                            v_tran_no);
                                    EXCEPTION
                                        WHEN OTHERS
                                        THEN
                                            raise_error (
                                                'Error populating xol details.....');
                                    END;
                                END IF;

                                BEGIN
                                    del_zero_cessions (
                                        v_tran_no,
                                        v_ipu_data (i).gis_ipu_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Failed the synchronisation of risk reinsurance and participations for non CN or DN transactions..');
                                END;
                            END LOOP;
                        END IF;
                    ELSE
                        BEGIN
                            SELECT NVL (pol_loaded, 'N')
                              INTO v_loaded
                              FROM gin_policies
                             WHERE pol_batch_no = cur_pol_rec.pol_batch_no;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error determining if the previous transaction is a loaded transactions..');
                        END;


                        --IF NVL (v_loaded, 'N') = 'Y'
                        --- THEN
                        /* ADDED to take care of declarations and cancellations of loaded risks*/
                        IF NVL (v_ipu_data.COUNT, 0) = 0
                        THEN
                            FOR r IN cur_risk
                            LOOP
                                BEGIN
                                    pool_reinsure_prc (
                                        cur_pol_rec.pol_batch_no,
                                        'Y');
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Error populating pool details.....');
                                END;

                                BEGIN
                                    reinsure_risks (cur_pol_rec.pol_batch_no,
                                                    cur_pol_rec.pol_cur_code,
                                                    v_base_cur,
                                                    v_cur_sht_desc,
                                                    v_tran_no,
                                                    v_tran_code,
                                                    r.ipu_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Failed to reinsure risks at loaded policies level..');
                                END;

                                IF NVL (v_xol_uw_param, 'N') = 'Y'
                                THEN
                                    BEGIN
                                        reinsure_xol_risks (
                                            cur_pol_rec.pol_batch_no,
                                            v_tran_no);
                                    EXCEPTION
                                        WHEN OTHERS
                                        THEN
                                            raise_error (
                                                'Error populating xol details.....');
                                    END;
                                END IF;
                            END LOOP;
                        END IF;

                        --                  ELSE
                        --                     BEGIN
                        --                        reinsure_risk_dc_cn (cur_pol_rec.pol_batch_no,
                        --                                             cur_pol_rec.pol_cur_code,
                        --                                             v_base_cur,
                        --                                             v_cur_sht_desc,
                        --                                             v_tran_no,
                        --                                             v_tran_code
                        --                                            );
                        ----                        WHEN OTHERS
                        ----                        THEN
                        ----                           raise_error
                        ----                              ('Failed to reinsure CN/DN risks at loaded policies level..'
                        ----                              );
                        --                     END;
                        ---- END IF;

                        BEGIN
                            del_zero_cessions (v_tran_no, NULL);
                        --- this was included because of loaded declarations
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Failed to synchronise sessions risks at loaded policies level..');
                        END;
                    /* remmed to take care of declarations and cancellations of loaded risks*/
                    --reinsure_risk_dc_cn (cur_pol_rec.pol_batch_no,v_base_cur,v_cur_sht_desc,v_tran_no);
                    END IF;

                    BEGIN
                        process_facoblig (cur_pol_rec.pol_batch_no,
                                          v_tran_no,
                                          v_tran_code,
                                          v_user,
                                          NULL             --take care of this
                                              );
                    --               EXCEPTION
                    --                  WHEN OTHERS
                    --                  THEN
                    --                     raise_error ('Error processing facultative obligatory..');
                    END;

                    BEGIN
                        gin_manage_exceptions.proc_ri_ret_excepts (
                            cur_pol_rec.pol_batch_no,
                            v_tran_no,
                            TRUNC (SYSDATE),
                            v_tran_code);
                        gin_manage_exceptions.proc_trt_cess_excepts (
                            cur_pol_rec.pol_batch_no,
                            v_tran_no,
                            TRUNC (SYSDATE),
                            v_tran_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('Error processing Exceptions..');
                    END;

                    DBMS_OUTPUT.put_line ('hapa');

                    FOR cur_pol_rsk_rec IN cur_pol_rsk
                    LOOP
                        DBMS_OUTPUT.put_line (
                               'cur_pol_rsk_rec.tot_pct='
                            || cur_pol_rsk_rec.tot_pct);

                        IF ABS (cur_pol_rsk_rec.tot_pct - 100) < 0.01
                        THEN
                            UPDATE gin_policy_risk_ri_dtls
                               SET prrd_comp_net_rate =
                                         prrd_comp_net_rate
                                       - (cur_pol_rsk_rec.tot_pct - 100)
                             WHERE prrd_code = cur_pol_rsk_rec.prrd_code;
                        /*ELSIF 100 - cur_pol_rsk_rec.tot_pct < .01
                        THEN
                           UPDATE gin_policy_risk_ri_dtls
                              SET prrd_comp_net_rate =
                                       prrd_comp_net_rate
                                     + (100 - cur_pol_rsk_rec.tot_pct)
                            WHERE prrd_code = cur_pol_rsk_rec.prrd_code;*/
                        END IF;
                    END LOOP;

                    BEGIN
                        gis_ri_procedures.round_uw_ri_to_own (v_tran_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error rounding off the reinsurance cessions..');
                    END;
                --COMMIT;
                ELSE
                    raise_error (
                        'This Policy Has Already Been Processed And Authorized ...You Cannot Process It Again...');
                END IF;
            END IF;
        END LOOP;
    -- RAISE_ERROR('Masinde1');
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0....');
    END;

    PROCEDURE create_facre_cession (v_agnt_code       IN NUMBER,
                                    v_agnt_sht_desc   IN VARCHAR2,
                                    v_amount          IN NUMBER,
                                    v_ipu_code        IN NUMBER,
                                    v_amt_or_pct      IN VARCHAR2,
                                    v_tran_no         IN NUMBER,
                                    v_comm_rate       IN NUMBER DEFAULT NULL)
    IS
        CURSOR cur_rsk IS
            SELECT *
              FROM gin_policies,
                   gin_insured_property_unds,
                   gin_policy_risk_ri_dtls
             WHERE     ipu_pol_batch_no = pol_batch_no
                   AND prrd_ipu_code = ipu_code
                   AND ipu_code = v_ipu_code
                   AND prrd_tran_no = v_tran_no;

        CURSOR ri_com_cur (vsclcode IN NUMBER)
        IS
            SELECT comm_comm_rate
              FROM gin_commissions
             WHERE     comm_scl_code = vsclcode
                   AND comm_division_factor = 100
                   AND comm_act_code = 5
                   AND comm_rate_type = 'FXD'
                   AND (comm_wet IS NULL OR TRUNC (SYSDATE) <= comm_wet)
                   AND comm_trnt_code IN (SELECT trnt_code
                                            FROM gin_transaction_types
                                           WHERE trnt_type = 'RC');

        v_user          VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_ri_com_rate   NUMBER;
        v_fc_rate       NUMBER;
        v_prem_amt      NUMBER;
        v_fc_comm_amt   NUMBER;
        v_fc_code       NUMBER;
    BEGIN
        FOR cur_rsk_rec IN cur_rsk
        LOOP
            IF NVL (v_comm_rate, 0) = 0
            THEN
                OPEN ri_com_cur (cur_rsk_rec.ipu_sec_scl_code);

                FETCH ri_com_cur INTO v_ri_com_rate;

                IF ri_com_cur%NOTFOUND
                THEN
                    v_ri_com_rate := 0;
                END IF;

                CLOSE ri_com_cur;
            ELSE
                v_ri_com_rate := v_comm_rate;
            END IF;

            IF     NVL (cur_rsk_rec.ipu_reinsure_amt, 0) = 0
               AND NVL (v_amount, 0) != 0
            THEN
                raise_error (
                    'Cannot enter amount when there is no sum insured');
            END IF;

            IF cur_rsk_rec.prrd_avail_fulc_bal < 1
            THEN
                raise_error (
                    'There is no excess amount to cede facultitively...');
            END IF;

            --raise_error('e');
            v_fc_rate :=
                  NVL (v_amount, 0)
                / (NVL (cur_rsk_rec.ipu_reinsure_amt, 0))
                * 100;
            v_prem_amt :=
                ROUND (v_fc_rate * NVL (cur_rsk_rec.prrd_ri_prem, 0) / 100);
            v_fc_comm_amt :=
                ROUND (NVL (v_ri_com_rate, 0) * NVL (v_prem_amt, 0) / 100);

            --v_fc_net_less_eq_comm := ROUND(v_ri_com_rate * NVL(:GIN_FACRE_CESSIONS.FC_NET_LESS_EQ_PREM,0) / 100);
            --v_fc_earthqke_comm := ROUND(NVL(v_eq_ri_com_rate,v_ri_com_rate) * NVL(:GIN_FACRE_CESSIONS.FC_EARTHQKE_PREM,0) / 100);
            --v_fc_earthqke_comm_rate := NVL(v_eq_ri_com_rate,v_ri_com_rate);
            --v_fc_comm_amt := NVL(:GIN_FACRE_CESSIONS.FC_NET_LESS_EQ_COMM,0) + NVL(:GIN_FACRE_CESSIONS.FC_EARTHQKE_COMM,0); --ROUND(:GIN_FACRE_CESSIONS.FC_COMM_RATE * :GIN_FACRE_CESSIONS.FC_PREM_AMT / 100)
            SELECT gin_fc_code_seq.NEXTVAL INTO v_fc_code FROM DUAL;

            INSERT INTO gin_facre_cessions (fc_code,
                                            fc_agnt_agent_code,
                                            fc_amount,
                                            fc_wef,
                                            fc_ipu_code,
                                            fc_agent_sht_desc,
                                            fc_rate,
                                            fc_comm_rate,
                                            fc_comm_amt,
                                            fc_don_by,
                                            fc_prem_amt,
                                            fc_pol_batch_no,
                                            fc_uwyr,
                                            fc_ggt_tran_no,
                                            fc_tran_type,
                                            fc_scl_code,
                                            fc_amt_or_rate,
                                            fc_prrd_code)
                 VALUES (v_fc_code,
                         v_agnt_code,
                         v_amount,
                         cur_rsk_rec.ipu_wef,
                         cur_rsk_rec.ipu_code,
                         v_agnt_sht_desc,
                         v_fc_rate,
                         v_ri_com_rate,
                         v_fc_comm_amt,
                         v_user,
                         v_prem_amt,
                         cur_rsk_rec.ipu_pol_batch_no,
                         cur_rsk_rec.pol_uw_year,
                         cur_rsk_rec.prrd_tran_no,
                         cur_rsk_rec.pol_policy_status,
                         cur_rsk_rec.ipu_sec_scl_code,
                         v_amt_or_pct,
                         cur_rsk_rec.prrd_code);
        END LOOP;
    END;

    --   PROCEDURE Insert_Prev_facre(v_old_ipu_code number,-----commented out on 30th April 2018----missing previous treaty cedings
    --                                v_old_prrd_code number,
    --                                v_new_batch_no number,
    --                                v_new_ipu_code number,
    --                                v_new_trans_no  number,
    --                                v_new_reinsure_amt number,
    --                                v_new_prrd_ri_prem number,
    --                                v_new_gp_prem number,
    --                                v_user VARCHAR2) IS
    --
    --         CURSOR cur_prev_facre IS
    --         SELECT POL_POLICY_STATUS,gin_facre_cessions.*
    --         FROM gin_policies, gin_insured_property_unds,gin_policy_risk_ri_dtls,gin_facre_cessions
    --         WHERE pol_batch_no = ipu_pol_batch_no
    --         and ipu_code = prrd_ipu_code
    --         and prrd_code = fc_prrd_code
    --         and fc_ipu_code=v_old_ipu_code
    --         AND FC_PRRD_CODE = v_old_prrd_code;
    --
    --         v_ri_prem_formular varchar2(20);
    --         v_tot_fac_amnt NUMBER;
    --         v_tot_fac_rate NUMBER;
    --         v_facre_amt NUMBER;
    --         v_facre_rate NUMBER;
    --         v_fc_prem NUMBER;
    --    BEGIN
    --
    --        raise_error(v_new_trans_no);
    --
    --        BEGIN
    --            SELECT gin_parameters_pkg.get_param_varchar  ('RI_PREM_FORMULAR')
    --            INTO v_ri_prem_formular
    --            FROM DUAL;
    --        EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --                v_ri_prem_formular := 'N';
    --            WHEN OTHERS
    --            THEN
    --                raise_error ('Error fetching Reinsurance Premium Calculation Option...');
    --        END;
    --
    --        SELECT
    --        SUM(CASE WHEN fc_amt_or_rate = 'A' THEN fc_amount ELSE ROUND(fc_rate/100*NVL (v_new_reinsure_amt, 0),2) END) FC_AMNT,
    --        SUM(CASE WHEN fc_amt_or_rate = 'A' THEN round(fc_amount/NVL (v_new_reinsure_amt, 0)*100,4) ELSE fc_rate END) FC_RATE
    --        INTO v_tot_fac_amnt,v_tot_fac_rate
    --        FROM gin_facre_cessions
    --        WHERE fc_ipu_code=v_old_ipu_code
    --        AND FC_PRRD_CODE = v_old_prrd_code;
    --        DBMS_OUTPUT.PUT_LINE(';v_tot_fac_amnt='||v_tot_fac_amnt||'v_tot_fac_rate='||v_tot_fac_rate);--||';v_prev_fc_rate='||v_prev_fc_rate||';r.ipu_GP ='||r.ipu_GP);
    --
    --        FOR cur_prev_facre_rec IN cur_prev_facre LOOP
    --            IF cur_prev_facre_rec.fc_amt_or_rate = 'A' THEN
    --                v_facre_amt := cur_prev_facre_rec.fc_amount;
    --                v_facre_rate:= round(v_facre_amt/NVL (v_new_reinsure_amt, 0)*100,4);
    --            ELSE
    --                v_facre_rate:= cur_prev_facre_rec.fc_rate;
    --                v_facre_amt := ROUND(v_facre_rate/100*NVL (v_new_reinsure_amt, 0),2);
    --            END IF;
    --            v_tot_fac_amnt := NVL(v_tot_fac_amnt,0) + v_facre_amt;
    --            v_tot_fac_rate := NVL(v_tot_fac_rate,0) + v_facre_rate;
    --        END LOOP;
    --
    --        IF NVL (v_new_reinsure_amt, 0) >= NVL(v_tot_fac_amnt,0) AND NVL(v_tot_fac_amnt,0) > 0
    --        THEN
    --
    --            FOR cur_prev_facre_rec IN cur_prev_facre LOOP
    --                IF cur_prev_facre_rec.fc_amt_or_rate = 'A' THEN
    --                    v_facre_amt := cur_prev_facre_rec.fc_amount;
    --                    v_facre_rate:= round(v_facre_amt/NVL (v_new_reinsure_amt, 0)*100,4);
    --                ELSE
    --                    v_facre_rate:= cur_prev_facre_rec.fc_rate;
    --                    v_facre_amt := ROUND(v_facre_rate/100*NVL (v_new_reinsure_amt, 0),2);
    --                END IF;
    --
    --                IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_prev_facre_rec.POL_POLICY_STATUS IN ('NB','RN','EX','CN')) THEN
    --                    v_fc_prem := round(v_facre_rate*NVL (v_new_prrd_ri_prem, 0)/100, 2 );
    --                ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                    v_fc_prem:=ROUND((v_facre_rate/100*cur_all_risks_rec.v_new_gp_prem)-(cur_prev_facre_rec.fc_rate/100*v_new_gp_prem)+(cur_prev_facre_rec.fc_rate/100*v_new_prrd_ri_prem), v_rnd );
    --                END if ;
    --
    --                insert_facre (v_new_batch_no,
    --                        v_new_ipu_code,
    --                        v_new_trans_no,
    --                        cur_prev_facre_rec.fc_agnt_agent_code,
    --                        cur_prev_facre_rec.fc_agent_sht_desc,
    --                        cur_prev_facre_rec.fc_amt_or_rate,
    --                        v_facre_amt,
    --                        v_user,
    --                        'A',
    --                        NULL,
    --                        cur_prev_facre_rec.fc_facre_type,
    --                        NULL,
    --                        'N',
    --                        cur_prev_facre_rec.fc_comm_rate,
    --                        FALSE,
    --                        cur_prev_facre_rec.fc_mngmnt_type,
    --                        cur_prev_facre_rec.fc_mngmnt_value,
    --                        cur_prev_facre_rec.fc_rein_tax_type,
    --                        cur_prev_facre_rec.fc_rein_tax_value,
    --                        cur_prev_facre_rec.fc_override_prem,
    --                        cur_prev_facre_rec.fc_override_type,
    --                        cur_prev_facre_rec.fc_override_value,
    --                        cur_prev_facre_rec.fc_remark
    --                       );
    --            END LOOP;
    --        END IF;
    --    END;
    PROCEDURE Insert_Prev_facre (v_old_ipu_code       NUMBER,
                                 v_old_prrd_code      NUMBER,
                                 v_new_batch_no       NUMBER,
                                 v_new_ipu_code       NUMBER,
                                 v_new_trans_no       NUMBER,
                                 v_new_reinsure_amt   NUMBER,
                                 v_new_prrd_ri_prem   NUMBER,
                                 v_new_gp_prem        NUMBER,
                                 v_user               VARCHAR2)
    IS
        CURSOR cur_prev_facre IS
            SELECT POL_POLICY_STATUS, gin_facre_cessions.*
              FROM gin_policies,
                   gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_facre_cessions
             WHERE     pol_batch_no = ipu_pol_batch_no
                   AND ipu_code = prrd_ipu_code
                   AND prrd_code = fc_prrd_code
                   AND fc_ipu_code = v_old_ipu_code
                   AND FC_PRRD_CODE = v_old_prrd_code;

        v_ri_prem_formular   VARCHAR2 (20);
        v_tot_fac_amnt       NUMBER;
        v_tot_fac_rate       NUMBER;
        v_facre_amt          NUMBER;
        v_facre_rate         NUMBER;
    --         v_fc_prem NUMBER;
    BEGIN
        -- raise_error(v_new_trans_no);

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('RI_PREM_FORMULAR')
              INTO v_ri_prem_formular
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_ri_prem_formular := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching Reinsurance Premium Calculation Option...');
        END;

        SELECT SUM (
                   CASE
                       WHEN fc_amt_or_rate = 'A'
                       THEN
                           fc_amount
                       ELSE
                           ROUND (
                               fc_rate / 100 * NVL (v_new_reinsure_amt, 0),
                               2)
                   END)    FC_AMNT,
               SUM (
                   CASE
                       WHEN fc_amt_or_rate = 'A'
                       THEN
                           ROUND (
                               fc_amount / NVL (v_new_reinsure_amt, 0) * 100,
                               4)
                       ELSE
                           fc_rate
                   END)    FC_RATE
          INTO v_tot_fac_amnt, v_tot_fac_rate
          FROM gin_facre_cessions
         WHERE     fc_ipu_code = v_old_ipu_code
               AND FC_PRRD_CODE = v_old_prrd_code;

        DBMS_OUTPUT.PUT_LINE (
               ';v_tot_fac_amnt='
            || v_tot_fac_amnt
            || 'v_tot_fac_rate='
            || v_tot_fac_rate); --||';v_prev_fc_rate='||v_prev_fc_rate||';r.ipu_GP ='||r.ipu_GP);

        --        FOR cur_prev_facre_rec IN cur_prev_facre LOOP
        --            IF cur_prev_facre_rec.fc_amt_or_rate = 'A' THEN
        --                v_facre_amt := cur_prev_facre_rec.fc_amount;
        --                v_facre_rate:= round(v_facre_amt/NVL (v_new_reinsure_amt, 0)*100,4);
        --            ELSE
        --                v_facre_rate:= cur_prev_facre_rec.fc_rate;
        --                v_facre_amt := ROUND(v_facre_rate/100*NVL (v_new_reinsure_amt, 0),2);
        --            END IF;
        --            v_tot_fac_amnt := NVL(v_tot_fac_amnt,0) + v_facre_amt;
        --            v_tot_fac_rate := NVL(v_tot_fac_rate,0) + v_facre_rate;
        --        END LOOP;

        IF     NVL (v_new_reinsure_amt, 0) >= NVL (v_tot_fac_amnt, 0)
           AND NVL (v_tot_fac_amnt, 0) > 0
        THEN
            FOR cur_prev_facre_rec IN cur_prev_facre
            LOOP
                IF cur_prev_facre_rec.fc_amt_or_rate = 'A'
                THEN
                    v_facre_amt := cur_prev_facre_rec.fc_amount;
                    v_facre_rate :=
                        ROUND (
                            v_facre_amt / NVL (v_new_reinsure_amt, 0) * 100,
                            4);
                ELSE
                    v_facre_amt := cur_prev_facre_rec.fc_rate;
                --                    v_facre_rate:= cur_prev_facre_rec.fc_rate;
                --                    v_facre_amt := ROUND(v_facre_rate/100*NVL (v_new_reinsure_amt, 0),2);
                END IF;

                --                IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (cur_prev_facre_rec.POL_POLICY_STATUS IN ('NB','RN','EX','CN')) THEN
                --                    v_fc_prem := round(v_facre_rate*NVL (v_new_prrd_ri_prem, 0)/100, 2 );
                --                ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
                --                    v_fc_prem:=ROUND((v_facre_rate/100*cur_all_risks_rec.v_new_gp_prem)-(cur_prev_facre_rec.fc_rate/100*v_new_gp_prem)+(cur_prev_facre_rec.fc_rate/100*v_new_prrd_ri_prem), v_rnd );
                --                END if ;

                insert_facre (v_new_batch_no,
                              v_new_ipu_code,
                              v_new_trans_no,
                              cur_prev_facre_rec.fc_agnt_agent_code,
                              cur_prev_facre_rec.fc_agent_sht_desc,
                              cur_prev_facre_rec.fc_amt_or_rate,
                              v_facre_amt,
                              v_user,
                              'A',
                              NULL,
                              cur_prev_facre_rec.fc_facre_type,
                              NULL,
                              'N',
                              cur_prev_facre_rec.fc_comm_rate,
                              FALSE,
                              cur_prev_facre_rec.fc_mngmnt_type,
                              cur_prev_facre_rec.fc_mngmnt_value,
                              cur_prev_facre_rec.fc_rein_tax_type,
                              cur_prev_facre_rec.fc_rein_tax_value,
                              cur_prev_facre_rec.fc_override_prem,
                              cur_prev_facre_rec.fc_override_type,
                              cur_prev_facre_rec.fc_override_value,
                              cur_prev_facre_rec.fc_remark);
            END LOOP;
        END IF;
    END;

    ---------------------------update in GIS_RI_PROCEDURES.insert_facre  body
    PROCEDURE insert_facre (v_batch_no            IN NUMBER,
                            v_ipu_code            IN NUMBER,
                            v_agn_code            IN NUMBER,
                            v_agn_sht_desc        IN VARCHAR2,
                            v_amt_or_rate         IN VARCHAR2,
                            v_amount              IN NUMBER,
                            v_user                IN VARCHAR2,
                            v_add_edit            IN VARCHAR2,
                            v_fc_code             IN NUMBER DEFAULT NULL,
                            v_facre_type          IN VARCHAR2 DEFAULT 'N',
                            v_accepted_date       IN DATE,
                            v_accepted            IN VARCHAR2,
                            v_comm_rt             IN NUMBER DEFAULT NULL,
                            v_fc_mngmnt_type      IN VARCHAR2,
                            v_fc_mngmnt_value     IN NUMBER,
                            v_fc_rein_tax_type    IN VARCHAR2 DEFAULT NULL,
                            v_fc_rein_tax_value   IN NUMBER DEFAULT NULL,
                            v_fc_override_prem    IN VARCHAR2 DEFAULT NULL,
                            v_fc_override_type    IN VARCHAR2 DEFAULT NULL,
                            v_fc_override_value      NUMBER DEFAULT NULL,
                            v_fc_remarks          IN VARCHAR2 DEFAULT NULL)
    IS
        v_trans_no   NUMBER;
    BEGIN
        BEGIN
            SELECT prrd_tran_no
              INTO v_trans_no
              FROM gin_policy_risk_ri_dtls
             WHERE     prrd_ipu_code = v_ipu_code
                   AND NVL (prrd_current, 'Y') = 'D';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                SELECT prrd_tran_no
                  INTO v_trans_no
                  FROM gin_policy_risk_ri_dtls
                 WHERE     prrd_ipu_code = v_ipu_code
                       AND NVL (prrd_current, 'Y') = 'Y';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error getting current reinsurance processing..');
        END;

        insert_facre (v_batch_no,
                      v_ipu_code,
                      v_trans_no,
                      v_agn_code,
                      v_agn_sht_desc,
                      v_amt_or_rate,
                      v_amount,
                      v_user,
                      v_add_edit,
                      v_fc_code,
                      v_facre_type,
                      v_accepted_date,
                      v_accepted,
                      v_comm_rt,
                      FALSE,
                      v_fc_mngmnt_type,
                      v_fc_mngmnt_value,
                      v_fc_rein_tax_type,
                      v_fc_rein_tax_value,
                      v_fc_override_prem,
                      v_fc_override_type,
                      v_fc_override_value,
                      v_fc_remarks);
    END;

    --   PROCEDURE insert_facre (
    --      v_batch_no            IN   NUMBER,
    --      v_ipu_code            IN   NUMBER,
    --      v_trans_no            IN   NUMBER,
    --      v_agn_code            IN   NUMBER,
    --      v_agn_sht_desc        IN   VARCHAR2,
    --      v_amt_or_rate         IN   VARCHAR2,
    --      v_amount              IN   NUMBER,
    --      v_user                IN   VARCHAR2,
    --      v_add_edit            IN   VARCHAR2,
    --      v_fc_code             IN   NUMBER DEFAULT NULL,
    --      v_facre_type          IN   VARCHAR2 DEFAULT 'N',
    --      v_accepted_date       IN   DATE,
    --      v_accepted            IN   VARCHAR2,
    --      v_comm_rt             IN   NUMBER DEFAULT NULL,
    --      v_ri_edit_trans       IN   BOOLEAN,
    --      v_fc_mngmnt_type      IN   VARCHAR2 DEFAULT NULL,
    --      v_fc_mngmnt_value     IN   NUMBER DEFAULT NULL,
    --      v_fc_rein_tax_type    IN   VARCHAR2 DEFAULT NULL,
    --      v_fc_rein_tax_value   IN   NUMBER DEFAULT NULL,
    --      v_fc_override_prem    IN   VARCHAR2 DEFAULT NULL,
    --      v_fc_override_type    IN   VARCHAR2 DEFAULT NULL,
    --      v_fc_override_value        NUMBER DEFAULT NULL,
    --      v_fc_remarks          IN   VARCHAR2 DEFAULT NULL
    --   )
    --   IS
    --      v_rate                   NUMBER;
    --      v_comm_rate              NUMBER;
    --      v_si                     NUMBER;
    --      v_prem                   NUMBER;
    --      v_eq_prem                NUMBER;
    --      v_less_eq_prem           NUMBER;
    --      v_less_eq_comm           NUMBER;
    --      v_eq_comm                NUMBER;
    --      v_eq_comm_rate           NUMBER;
    --      v_comm_amt               NUMBER;
    --      vfacretype               VARCHAR2 (1);
    --      v_fc_wef_date            DATE;
    --      v_prorata_rate           NUMBER;
    --      v_fc_prem_diff_amt       NUMBER;
    --      v_prem_diff              NUMBER;
    --      v_fc_refund_prem         NUMBER;
    --      v_fc_refund_comm         NUMBER;
    --      v_exhange_rate           NUMBER;
    --      v_calc_prem              NUMBER;
    --      v_cnt                    NUMBER;
    --      v_rnd                    NUMBER;
    --      v_rnd_bcur               NUMBER;
    --      v_vat_rate               NUMBER;
    --      v_vat_amt                NUMBER;
    --      v_management_fee         NUMBER;
    --      v_facre_rein_tax         NUMBER;
    --      v_override_prem          NUMBER;
    --      v_wthtx_rate             NUMBER;
    --      v_whtx_amt               NUMBER;
    --      v_agn_whtax_applicable   VARCHAR2 (1) := 'N';
    --      v_facre_charges_param VARCHAR2(3) DEFAULT 'GRS';
    --      v_special_ret_prem NUMBER;
    --      v_special_ret_prem_diff NUMBER;
    --     -- v_ri_prem NUMBER;
    --      v_rein_cur_param VARCHAR2 (1) := 'N';
    --      v_reinsure_amt   NUMBER;
    --      v_tot_si NUMBER;
    --
    --      v_facre_rate NUMBER;
    --      v_prev_tot_fc_amnt NUMBER;
    --      v_prev_tot_fc_rate NUMBER;
    --      v_prev_reinsure_amt  NUMBER;
    --      v_prev_ri_prem              NUMBER;
    --      v_ceded_fc_amnt           NUMBER;
    --      v_ceded_fc_rate           NUMBER;
    --      v_prev_fc_code           NUMBER;
    --      v_prev_fc_amt            NUMBER;
    --      v_prev_fc_comm_amt       NUMBER;
    --      v_prev_fc_prem_amt       NUMBER;
    --      v_prev_fc_rate      NUMBER;
    --      v_prev_fc_comm_rate NUMBER;
    ----      v_fc_prev_cession           NUMBER;
    --      v_bcur_code NUMBER;
    --      v_trt_cur_code NUMBER;
    --      v_trt_cur_rate NUMBER;
    --      v_ri_prem_formular  VARCHAR2(20);

    --      CURSOR rsks
    --      IS
    --         SELECT pol_cur_code, pol_uw_year, pol_policy_status, ipu_code,pol_cur_rate,
    --                ipu_prev_ipu_code, ipu_sec_scl_code, ipu_reinsure_amt,
    --                ipu_wef, ipu_wet, prrd_code, prrd_avail_fulc_bal,
    --                prrd_ri_prem, prrd_earthquake_prem, prrd_ri_net_less_eq_prem,
    --                prrd_tran_no, ipu_bind_code, prrd_prev_prrd_code,ipu_overrideride_ret_type,pol_cur_symbol,
    --                ipu_override_ri_retention,prrd_comp_retention,prrd_net_prem,prrd_prev_facre_si,ipu_id,ipu_uw_yr,prrd_excess_pct,
    ----                get_risk_comp_retention(ipu_id,ipu_uw_yr,ipu_code)
    --                prrd_prev_net_retention,prrd_prev_ri_si,
    --                prrd_gross_comp_retention,prrd_comp_net_rate,
    --                prrd_as_code,ipu_endos_diff_amt,prrd_cumm_ri_prem,prrd_prev_facre_prem,ipu_GP, ipu_fp
    --           FROM gin_policies,
    --                gin_insured_property_unds,
    --                gin_policy_risk_ri_dtls
    --          WHERE ipu_pol_batch_no = pol_batch_no
    --            AND ipu_code = prrd_ipu_code
    --            AND pol_batch_no = v_batch_no
    --            AND prrd_tran_no = v_trans_no
    --            AND ipu_code = v_ipu_code;
    --   BEGIN
    --      BEGIN
    --         SELECT COUNT (1)
    --           INTO v_cnt
    --           FROM tqc_agencies, gin_coinsurers
    --          WHERE agn_code = v_agn_code
    --            AND agn_main_agn_code = coin_agnt_agent_code
    --            AND coin_pol_batch_no = v_batch_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                    ('Error determining if facre also defined as coinsurer..');
    --      END;
    ----raise_error( v_amt_or_rate ||';'||
    ----      v_amount);
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('REINS_IN_BASE_CURRENCY')
    --           INTO v_rein_cur_param
    --           FROM DUAL;
    --        EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_rein_cur_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Treaty  parameter...');
    --        END;

    --      BEGIN
    --          SELECT gin_parameters_pkg.get_param_varchar ('FACRECHARGES_OR_MNGTFEE_COMPUTATION')
    --          INTO v_facre_charges_param
    --          FROM DUAL;
    --      EXCEPTION
    --       WHEN NO_DATA_FOUND THEN
    --          v_facre_charges_param:='GRS';
    --       WHEN OTHERS THEN
    --         raise_error
    --                    ('Error GETTING FACRECHARGES_OR_MNGTFEE_COMPUTATION PARAM');
    --      END;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar  ('RI_PREM_FORMULAR')
    --           INTO v_ri_prem_formular
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_rein_cur_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching Reinsurance Premium Calculation Option...');
    --      END;

    --      IF NVL (v_cnt, 0) != 0
    --      THEN
    --         raise_error ('Facultative accounts already specified as coinsurer..');
    --      END IF;

    --      FOR r IN rsks
    --      LOOP
    --         v_exhange_rate := get_currexch_rate (r.pol_cur_code, v_rnd, v_rnd_bcur);
    --         v_comm_rate := NVL (v_comm_rt, 0);
    --         v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, r.pol_cur_symbol);
    --
    --        v_prev_reinsure_amt :=0;
    --        v_prev_tot_fc_amnt :=0;
    --        v_prev_tot_fc_rate :=0;
    --        v_prev_ri_prem := 0;
    --        IF r.pol_policy_status in ('NB','RN','EX','SP') then
    --            BEGIN
    --                SELECT ipu_reinsure_amt,prrd_ri_prem,prev_fc_amnt,facre_prev_rate
    --                INTO v_prev_reinsure_amt,v_prev_ri_prem,v_prev_tot_fc_amnt,v_prev_tot_fc_rate
    --                FROM GIN_INSURED_PROPERTY_UNDS,
    --                    (SELECT FC_IPU_CODE,prrd_ri_prem,SUM(DECODE(SIGN(fc_prem_amt),1,ABS(NVL(fc_amount,0)),ABS(NVL(fc_amount,0)))) prev_fc_amnt,
    --                            SUM(DECODE(SIGN(fc_prem_amt),1,ABS(NVL(FC_RATE,0)),-ABS(NVL(FC_RATE,0)))) facre_prev_rate
    --                     FROM GIN_POLICY_RISK_RI_DTLS,GIN_FACRE_CESSIONS
    --                     WHERE PRRD_CODE = FC_PRRD_CODE(+)
    --                     AND PRRD_CURRENT = 'Y'
    --                     GROUP BY FC_IPU_CODE )
    --                WHERE IPU_CODE = FC_IPU_CODE(+)
    --                AND IPU_CODE=r.ipu_prev_ipu_code;
    --            EXCEPTION
    --                WHEN OTHERS THEN
    --                v_prev_reinsure_amt :=0;
    --                v_prev_tot_fc_amnt :=0;
    --                v_prev_tot_fc_rate :=0;
    --            END;
    --        END IF;
    --        BEGIN
    --            SELECT fc_code, fc_amount, fc_rate,
    --              fc_comm_rate, fc_comm_amt,
    --              fc_prem_amt
    --            INTO v_prev_fc_code, v_prev_fc_amt, v_prev_fc_rate,
    --              v_prev_fc_comm_rate, v_prev_fc_comm_amt,
    --              v_prev_fc_prem_amt
    --            FROM gin_facre_cessions
    --            WHERE fc_prrd_code = r.prrd_prev_prrd_code
    --            AND fc_agnt_agent_code = v_agn_code;
    --        EXCEPTION
    --            WHEN NO_DATA_FOUND THEN
    --              v_prev_fc_code := NULL;
    --              v_prev_fc_amt := 0;
    --              v_prev_fc_rate := 0;
    --              v_prev_fc_comm_rate := 0;
    --              v_prev_fc_comm_amt := 0;
    --              v_prev_fc_prem_amt := 0;
    --            WHEN OTHERS THEN
    --                RAISE_ERROR('Error getting previous facultative rate..');
    --        END;
    --      --  raise_error(r.ipu_code||'='||r.prrd_prev_prrd_code||'='||v_agn_code||'='||v_prev_fc_rate);
    --        BEGIN
    --            SELECT SUM(DECODE(SIGN(fc_prem_amt),1,ABS(NVL(fc_amount,0)),ABS(NVL(fc_amount,0)))),
    --            SUM(DECODE(SIGN(fc_prem_amt),1,ABS(NVL(FC_RATE,0)),-ABS(NVL(FC_RATE,0))))
    --              INTO v_ceded_fc_amnt,v_ceded_fc_rate
    --              FROM gin_facre_cessions,  gin_insured_property_unds
    --             WHERE fc_ipu_code = ipu_code
    --             AND ipu_id =r.ipu_id
    --             and ipu_code =r.ipu_code;
    --        EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               v_ceded_fc_amnt := 0;
    --               v_ceded_fc_rate:=0;
    --        END;
    --
    --
    --        BEGIN
    --           SELECT DISTINCT  ta_cur_code
    --                      INTO  v_trt_cur_code
    --                      FROM gin_class_treaties,
    --                           gin_arrangement_setups,
    --                           gin_treaty_arrangements
    --                     WHERE as_ta_code = ta_code
    --                       AND clt_as_code = as_code
    --                       AND clt_scl_code =  r.ipu_sec_scl_code
    --                       AND AS_CODE =r.prrd_as_code
    --                       AND as_uwyr = r.IPU_UW_YR;
    --        EXCEPTION
    --           WHEN NO_DATA_FOUND
    --           THEN
    --             NULL;
    --           WHEN OTHERS
    --           THEN
    --              raise_error
    --                 ('Unable to retrieve the arrangement retention limit'
    --                 );
    --        END;
    --         v_trt_cur_rate := get_exchange_rate (v_bcur_code,v_trt_cur_code);
    --          if nvl(v_rein_cur_param,'N')='Y'  AND v_trt_cur_code != r.pol_cur_code then
    --            IF v_bcur_code =v_trt_cur_code  THEN
    --              v_reinsure_amt :=( NVL(r.ipu_reinsure_amt,0))/*/ r.pol_cur_rate*/;
    --             ELSE
    --               v_reinsure_amt :=( NVL(r.ipu_reinsure_amt,0)) / r.pol_cur_rate;
    ----              v_reinsure_amt :=( NVL(r.ipu_reinsure_amt,0)) ;--*v_trt_cur_rate;
    --             END IF;
    --          else
    --            v_reinsure_amt :=  ROUND(NVL ( r.ipu_reinsure_amt, 0),v_rnd);
    ----            v_reinsure_amt :=  ROUND(NVL ( r.ipu_reinsure_amt, 0)+NVL(gis_ri_procedures.get_risk_ri_si(r.ipu_id,r.prrd_code),0)+NVL(gis_ri_procedures.get_risk_comp_retention(r.ipu_id,r.ipu_uw_yr,r.ipu_code) ,0),v_rnd);
    --          END IF;
    ----raise_error(v_reinsure_amt||';'||r.ipu_reinsure_amt);
    --    v_reinsure_amt := ABS(v_reinsure_amt);
    --          IF v_agn_code IS NOT NULL  THEN
    --             BEGIN
    --                SELECT act_vat_rate, NVL (agn_agent_wht_tax, act_wthtx_rate),
    --                       agn_whtax_applicable
    --                  INTO v_vat_rate, v_wthtx_rate,
    --                       v_agn_whtax_applicable
    --                  FROM tqc_account_types, tqc_agencies
    --                 WHERE act_code = agn_act_code
    --                   AND act_code = 7
    --                   AND agn_code = v_agn_code;
    --             EXCEPTION
    --                WHEN no_data_found then
    --                SELECT act_vat_rate
    --                    INTO v_vat_rate
    --                    FROM tqc_account_types
    --                    WHERE act_code = 7;
    --               when others
    --                THEN
    --                   raise_error ('Error fetching Facre Vat/wthtx Rate...'||v_agn_code);
    --             END;
    --           END IF;
    --         --RAISE_ERROR('v_vat_rate='||v_vat_rate);
    --         IF v_comm_rate IS NULL
    --         THEN
    --            v_comm_rate :=  gis_web_uw_ri.get_facre_comm_rate (r.ipu_sec_scl_code,   r.ipu_bind_code  );
    --         END IF;
    --
    --         IF v_facre_type = 'N'
    --         THEN
    --            IF NVL (v_amt_or_rate, 'A') = 'A'
    --            THEN
    ----               IF NVL (v_amount, 0) <= NVL (r.prrd_avail_fulc_bal, 0)  - NVL (v_prev_fc_amnt, 0) THEN
    ----                  v_si := NVL (v_amount, 0);
    ----               ELSE
    ----                  v_si :=  NVL (r.prrd_avail_fulc_bal, 0) - NVL (v_prev_fc_amnt, 0);
    ----               END IF;
    --               IF NVL (v_amount, 0) <= NVL (r.prrd_avail_fulc_bal, 0)  THEN
    --                  v_si := NVL (v_amount, 0);
    --               ELSE
    --                  v_si :=  NVL (r.prrd_avail_fulc_bal, 0) ;--- NVL (v_ceded_fc_amnt, 0);
    --               END IF;
    --
    --
    --               v_rate := (NVL (v_si, 0) )--+NVL (v_prev_fc_amnt, 0) )
    --               / NVL (v_reinsure_amt/*r.ipu_reinsure_amt*/, 0) * 100;
    --         --       v_rate := (NVL (v_si, 0) )/ NVL (v_tot_si/*r.ipu_reinsure_amt*/, 0) * 100;

    --             --v_tot_si :=NVL(v_reinsure_amt,0)-(nvl(r.prrd_prev_ri_si,0)+NVL(r.prrd_prev_net_retention,0)+NVL(v_prev_fc_amnt,0));
    --
    --             IF nvl(v_rein_cur_param,'N')='Y' then
    --            --v_reinsure_amt := ROUND((NVL ( r.ipu_reinsure_amt, 0))/ r.pol_cur_rate,v_rnd);
    --            -- v_facre_rate :=(NVL (v_si, 0) )/ (NVL (ROUND((NVL ( v_tot_si, 0))/ r.pol_cur_rate,v_rnd), 0)) * 100;
    --              v_facre_rate :=(NVL (v_si, 0) )/ (NVL (ROUND((NVL ( r.prrd_avail_fulc_bal, 0)+NVL(v_ceded_fc_amnt,0))/ r.pol_cur_rate,v_rnd), 0)) * 100;
    --             ELSE
    --            -- v_facre_rate :=(NVL (v_si, 0) )/ (NVL ( v_tot_si, 0)) * 100;
    --              v_facre_rate :=(NVL (v_si, 0) )/ (NVL(r.prrd_avail_fulc_bal, 0)+NVL(v_ceded_fc_amnt,0)) * 100;
    --             END IF;
    --      --  raise_error('here='||v_amount||v_si||';'||r.prrd_avail_fulc_bal||';'||v_facre_rate||';'||v_rate||';'||v_reinsure_amt||';'||r.prrd_prev_net_retention||';'||';'||r.ipu_id);
    --            ELSe
    --               v_rate := NVL (v_amount, 0);
    --               IF v_rate NOT BETWEEN 0 AND 100
    --               THEN
    --                  raise_error ('Cession % must be between 0 and 100');
    --               END IF;
    --               v_si := ROUND ((v_rate * NVL (/*r.ipu_reinsure_amt*/v_reinsure_amt, 0) / 100), v_rnd);
    --               IF NVL (v_si, 0) <=  NVL (r.prrd_avail_fulc_bal, 0) - NVL (v_ceded_fc_amnt, 0) THEN
    --                  v_si := NVL (v_si, 0);
    --               ELSE
    --                  v_si :=   NVL (r.prrd_avail_fulc_bal, 0)  - NVL (v_ceded_fc_amnt, 0);
    --                  v_rate := NVL (v_si, 0) / NVL (/*r.ipu_reinsure_amt*/v_reinsure_amt, 0) * 100;
    --              END IF;
    --            END IF;
    --         ELSE
    --            v_si := NVL (v_amount, 0);
    --            v_rate := NVL (v_si, 0) / NVL (/*r.ipu_reinsure_amt*/v_reinsure_amt, 0) * 100;
    --            v_fc_wef_date := NVL (v_accepted_date, r.ipu_wef);
    --         END IF;

    --  -- raise_error (' v_rate=' || v_rate||' v_si=' || v_si||';'||v_reinsure_amt);
    --         DBMS_OUTPUT.put_line (' v_si=' || v_si);


    --         IF v_accepted = 'Y'
    --         THEN
    --            v_fc_wef_date := NVL (v_accepted_date, r.ipu_wef);

    --            IF v_fc_wef_date NOT BETWEEN r.ipu_wef AND r.ipu_wet
    --            THEN
    --               raise_error
    --                  ('Facultative accepted date should be within risk cover dates..'
    --                  );
    --            END IF;

    ----RAISE_ERROR('EEEEE='||v_fc_wef_date||';'||r.ipu_wef||';'||r.ipu_wet);
    --            IF v_fc_wef_date = r.ipu_wef
    --            THEN
    --               v_prorata_rate := 1;
    --            ELSE
    --               v_prorata_rate :=
    --                    ((r.ipu_wet - v_fc_wef_date) + 1)
    --                  / ((r.ipu_wet - r.ipu_wef) + 1);
    --            END IF;
    --         END IF;

    ----         v_ri_prem :=r.prrd_ri_prem;
    ----
    ----            IF NVL(r.prrd_excess_pct,0) != 0  AND NVL (r.prrd_avail_fulc_bal, 0) = 0 THEN
    ----              v_ri_prem := ROUND( ((NVL(r.prrd_excess_pct,0)/*+NVL(v_facre_prev_rate,0)*/)*NVL(r.prrd_cumm_ri_prem,0)/ 100));---NVL(gis_ri_procedures.get_risk_cumulative_prem(r.IPU_ID,r.ipu_uw_yr,'F',r.ipu_code),0));
    ----            ELSE
    ----             v_ri_prem :=NVL(r.prrd_cumm_ri_prem,0);-- -(NVL(gis_ri_procedures.get_risk_cumulative_prem(r.IPU_ID,r.ipu_uw_yr,'F',r.ipu_code),0)
    ----           END IF;
    ----         IF NVL(r.prrd_excess_pct,0) = 100 THEN
    ----           v_ri_prem :=r.prrd_ri_prem;
    ----         END IF;
    --DBMS_OUTPUT.PUT_LINE(v_rate||';v_rate='||v_rate||';r.prrd_ri_prem='||r.prrd_ri_prem||';v_prev_fc_rate='||v_prev_fc_rate||';r.ipu_GP ='||r.ipu_GP);
    --         IF v_accepted = 'Y' THEN
    --            if nvl(v_facre_type,'N')='O' AND NVL(r.ipu_overrideride_ret_type,'X') = 'P' then
    --                  v_special_ret_prem :=NVL (r.ipu_override_ri_retention, 0);
    --                  v_special_ret_prem_diff := v_special_ret_prem - (r.prrd_ri_prem -ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,v_rnd));--prrd_comp_retention;
    --                   IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (r.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(r.IPU_FP,0) !=0  OR NVL(R.PRRD_RI_PREM,0)  =0 THEN
    --                       v_calc_prem := ROUND(  v_rate  * NVL (r.prrd_ri_prem, 0)    / 100, v_rnd   );
    --                   ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                       v_calc_prem:=ROUND((v_rate/100*r.ipu_GP)-(v_prev_fc_rate/100*r.ipu_GP)+(v_prev_fc_rate/100*r.PRRD_RI_PREM), v_rnd );
    --                   END if ;
    --                  v_calc_prem := v_calc_prem - nvl(v_special_ret_prem_diff,0);
    --            else
    --
    --                   IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (r.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(r.IPU_FP,0) !=0  OR NVL(R.PRRD_RI_PREM,0)  =0 THEN
    --                       v_calc_prem := ROUND(  v_rate  * NVL (r.prrd_ri_prem, 0)    / 100, v_rnd   );
    --                   ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                       v_calc_prem:=ROUND((v_rate/100*r.ipu_GP)-(v_prev_fc_rate/100*r.ipu_GP)+(v_prev_fc_rate/100*r.PRRD_RI_PREM), v_rnd );
    --                   END if ;
    --            end if;
    --            v_prem := ROUND (v_prorata_rate * v_calc_prem, v_rnd);
    --            IF NVL (v_fc_override_prem, 'N') = 'Y'
    --            THEN
    --               IF v_fc_override_type = 'A'
    --               THEN
    --                  v_prem := v_fc_override_value;
    --               ELSIF v_fc_override_type = 'R'
    --               THEN
    --                  v_prem := v_fc_override_value / 100 * v_prem;
    --               END IF;
    --            END IF;

    --            -- RAISE_ERROR('NDANI='||v_prorata_rate||';'||v_rate||';'||r.prrd_ri_prem);
    --            v_fc_prem_diff_amt := v_calc_prem - v_prem;
    --            v_eq_prem :=
    --               ROUND (  v_prorata_rate
    --                      * v_rate
    --                      * (NVL (r.prrd_earthquake_prem, 0))
    --                      / 100,
    --                      v_rnd
    --                     );
    --            v_less_eq_prem :=
    --               ROUND (  v_prorata_rate
    --                      * v_rate
    --                      * (NVL (r.prrd_ri_net_less_eq_prem, 0))
    --                      / 100,
    --                      v_rnd
    --                     );
    --         ELSE
    ----RAISE_ERROR('v_rate='||v_rate||'ipu_GP='||r.ipu_GP||'v_prev_fc_rate='||v_prev_fc_rate||'PRRD_RI_PREM='||r.PRRD_RI_PREM);
    --          if nvl(v_facre_type,'N')='O' AND NVL(r.ipu_overrideride_ret_type,'X') = 'P' then
    --                  v_special_ret_prem :=NVL (r.ipu_override_ri_retention, 0);
    --                  v_special_ret_prem_diff := v_special_ret_prem - (r.prrd_ri_prem -ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,v_rnd));--prrd_comp_retention;
    ----                  v_calc_prem := ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,v_rnd);
    --
    --                   IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (r.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN'))  OR NVL(r.IPU_FP,0) !=0 OR NVL(R.PRRD_RI_PREM,0)  =0  THEN
    --                       v_calc_prem := ROUND(  v_rate  * NVL (r.prrd_ri_prem, 0)    / 100, v_rnd   );
    --                   ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                       v_calc_prem:=ROUND((v_rate/100*r.ipu_GP)-(v_prev_fc_rate/100*r.ipu_GP)+(v_prev_fc_rate/100*r.PRRD_RI_PREM), v_rnd );
    --                   END if ;
    --                  v_calc_prem := v_calc_prem - nvl(v_special_ret_prem_diff,0);
    --          else
    --
    --                   IF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CESSION' OR (r.POL_POLICY_STATUS IN ('NB','RN','EX','SP','CN')) OR NVL(r.IPU_FP,0) !=0  OR NVL(R.PRRD_RI_PREM,0)  =0  THEN
    --                       v_calc_prem := ROUND(  v_rate  * NVL (r.prrd_ri_prem, 0)    / 100, v_rnd   );
    --                   ELSIF NVL(v_ri_prem_formular,'BASED_ON_CESSION') = 'BASED_ON_CHANGE' THEN
    --                       v_calc_prem:=ROUND((v_rate/100*r.ipu_GP)-(v_prev_fc_rate/100*r.ipu_GP)+(v_prev_fc_rate/100*r.PRRD_RI_PREM), v_rnd );
    --                   END if ;
    --          end if;
    --            IF NVL (v_fc_override_prem, 'N') = 'Y'
    --            THEN
    --               IF v_fc_override_type = 'A'
    --               THEN
    --                  v_prem := v_fc_override_value;
    --               ELSIF v_fc_override_type = 'R'
    --               THEN
    --                  v_prem := v_fc_override_value / 100 * v_calc_prem;
    --               END IF;
    --            ELSE
    --               v_prem := v_calc_prem;
    --            END IF;

    --            v_fc_prem_diff_amt := v_calc_prem - v_prem;
    --            v_eq_prem :=
    --                ROUND (v_rate * (NVL (r.prrd_earthquake_prem, 0)) / 100,
    --                       v_rnd);
    --            v_less_eq_prem :=
    --               ROUND (v_rate * (NVL (r.prrd_ri_net_less_eq_prem, 0)) / 100,
    --                      v_rnd
    --                     );
    --         END IF;

    ----RAISE_ERROR(' v_prem='|| v_prem||' v_fc_prem_diff_amt='|| v_fc_prem_diff_amt);
    --         v_less_eq_comm :=   ROUND (v_comm_rate * NVL (v_less_eq_prem, 0) / 100,  v_rnd);
    --         v_eq_comm := ROUND (NVL (v_eq_comm_rate, v_comm_rate) * NVL (v_eq_prem, 0)  / 100,  v_rnd );
    --         v_eq_comm_rate := NVL (v_eq_comm_rate, v_comm_rate);
    --         v_comm_amt := NVL (v_less_eq_comm, 0) + NVL (v_eq_comm, 0);
    --         v_comm_amt := ROUND (v_comm_rate * (NVL (v_prem, 0)+nvl(v_special_ret_prem_diff,0)) / 100, v_rnd);
    --         v_vat_amt := ROUND (v_comm_amt * v_vat_rate / 100, v_rnd);

    --         --RAISE_ERROR(v_agn_whtax_applicable||' = '||v_wthtx_rate);
    --         IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
    --         THEN
    --            v_whtx_amt :=  ROUND (  (NVL (v_prem, 0) - NVL (v_comm_amt, 0))   * v_wthtx_rate   / 100,   v_rnd  );
    --         END IF;

    --         IF NVL (v_fc_mngmnt_type, 'A') = 'A'--MANAGEMENT FEE
    --         THEN
    --            v_management_fee := v_fc_mngmnt_value;
    --         ELSE
    --            IF NVL(v_facre_charges_param,'GRS')='GRS'  THEN
    --                IF v_fc_mngmnt_value NOT BETWEEN 0 AND 100
    --                THEN
    --                   raise_error ('Management fee % must be between 0 and 100');
    --                END IF;
    --               v_management_fee :=ROUND (v_fc_mngmnt_value * NVL (v_prem, 0) / 100);
    --            ELSIF NVL(v_facre_charges_param,'GRS')='NET'  THEN
    --                v_management_fee :=ROUND ((v_fc_mngmnt_value * (NVL (v_prem, 0)-NVL (v_comm_amt, 0)) / 100),v_rnd);
    --            END IF;
    --         END IF;

    --         IF NVL (v_fc_rein_tax_type, 'A') = 'A'--FACRE CHARGES
    --         THEN
    --            v_facre_rein_tax := v_fc_rein_tax_value;
    --         ELSE
    --           IF NVL(v_facre_charges_param,'GRS')='GRS'  THEN
    --               IF v_fc_rein_tax_value NOT BETWEEN 0 AND 100
    --                THEN
    --                   raise_error ('Other fee % must be between 0 and 100');
    --                END IF;

    --               v_facre_rein_tax :=
    --                     ROUND (v_fc_rein_tax_value * NVL (v_prem, 0) / 100,
    --                            v_rnd);
    --            ELSIF NVL(v_facre_charges_param,'GRS')='NET'  THEN
    --                v_facre_rein_tax :=ROUND ((v_fc_rein_tax_value * (NVL (v_prem, 0)-NVL (v_comm_amt, 0)) / 100),v_rnd);

    --           END IF;


    --         END IF;

    --      --raise_error('here='||v_facre_rein_tax||';'||v_facre_rein_tax);
    ----         IF v_ri_edit_trans
    ----         THEN
    ----            BEGIN
    ----               SELECT fc_code, fc_amount, fc_rate,
    ----                      fc_comm_rate, fc_comm_amt,
    ----                      fc_prem_amt
    ----                 INTO v_prev_fc_code, v_fc_prev_amt, v_fc_prev_rate,
    ----                      v_fc_prev_comm_rate, v_fc_prev_comm_amt,
    ----                      v_fc_prev_prem_amt
    ----                 FROM gin_facre_cessions
    ----                WHERE fc_ipu_code = r.ipu_code
    ----                  AND fc_prrd_code = r.prrd_prev_prrd_code
    ----                  AND fc_agnt_agent_code = v_agn_code;
    ----            EXCEPTION
    ----               WHEN NO_DATA_FOUND
    ----               THEN
    ----                  NULL;
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error ('Error getting previous facre cessions..'||v_agn_code||';'||r.prrd_prev_prrd_code||';'||r.ipu_code);
    ----            END;
    ------RAISE_ERROR(v_fc_prev_rate||';'||r.prrd_ri_prem||';'||v_rate);
    ----            v_fc_refund_prem := ROUND (v_fc_prev_rate / 100 * NVL (r.prrd_ri_prem, 0),v_rnd);
    ----            v_fc_refund_comm := ROUND (v_fc_refund_prem * v_fc_prev_comm_rate / 100,v_rnd);
    ----         END IF;
    ----IF r.prrd_tran_no = 2014969862 THEN
    ---- RAISE_ERROR('HERE='||v_prem_diff||';'||v_fc_refund_prem||';'||v_fc_prev_amt||';'||v_prem||';'||v_add_edit);
    ---- -- HERE=;;;51002.04;
    ---- END IF;
    ----                   --RAISE_ERROR(v_rate||'='||v_prem||'='||R.PRRD_RI_PREM);
    --         IF v_add_edit = 'A'
    --         THEN
    ----         IF v_rate = 0 THEN
    ----           RAISE_ERROR('v_rate='||v_rate||';'||r.ipu_code||';'||v_si);
    ----         END IF;

    --            --
    ----   IF NVL(v_fc_override_prem,'N') = 'Y'
    ----   THEN
    ----       IF v_fc_override_type = 'A'
    ----       THEN
    ----          v_override_prem :=v_fc_override_value;
    ----       ELSIF v_fc_override_type = 'R'
    ----       THEN
    ----          v_override_prem :=v_fc_override_value/100 * v_prem;
    ----       END IF;
    ----
    ----
    ----   END IF;
    ----raise_error(r.prrd_tran_no);
    --      IF NVL (v_amt_or_rate, 'A') = 'P' THEN
    --        v_rate :=v_prem/NVL (r.ipu_endos_diff_amt, 0)*100;
    ----        raise_error(v_prem||';'||gis_ri_procedures.get_risk_cumulative_prem(r.IPU_ID,r.ipu_uw_yr,'G',r.ipu_code)||';'||);
    --      END IF;
    --       IF NVL(r.prrd_excess_pct,0) = 0 THEN
    --        v_rate :=0;
    --       END IF;
    ----  raise_error(v_prem);
    --            INSERT INTO gin_facre_cessions
    --                        (fc_code, fc_agnt_agent_code, fc_amount,
    --                         fc_wef, fc_ipu_code, fc_agent_sht_desc,
    --                         fc_rate, fc_comm_rate, fc_comm_amt, fc_don_by,
    --                         fc_dc_no, fc_prem_amt, fc_pol_batch_no, fc_uwyr,
    --                         fc_ggt_tran_no, fc_tran_type,
    --                         fc_scl_code, fc_amt_or_rate, fc_prrd_code,
    --                         fc_auth_dt, fc_prev_si, fc_prev_rate,
    --                         fc_refund_prem, fc_refund_comm, fc_prev_amount,
    --                         fc_wet, fc_prev_comm_rate, fc_prev_fc_code,
    --                         fc_earthqke_prem, fc_earthqke_comm_rate,
    --                         fc_earthqke_comm, fc_net_less_eq_comm,
    --                         fc_net_less_eq_prem, fc_facre_type,
    --                         fc_accepted_date, fc_accepted, fc_prem_diff_amt,
    --                         fc_vat_amt, fc_vat_rate, fc_mngmnt_type,
    --                         fc_mngmnt_value, fc_rein_tax_type,
    --                         fc_rein_tax_value, fc_mngmnt_amt,
    --                         fc_rein_tax_amt, fc_override_prem,
    --                         fc_override_type, fc_override_value,
    --                         fc_remark, fc_whtx_rate, fc_whtx_amt
    --                        )
    --                 VALUES (gin_fc_code_seq.NEXTVAL, v_agn_code, v_si,
    --                         r.ipu_wef, r.ipu_code, v_agn_sht_desc,
    --                         ROUND (v_rate, 4), v_comm_rate, round(v_comm_amt,v_rnd), v_user,
    --                         NULL, round(v_prem,v_rnd), v_batch_no, r.pol_uw_year,
    --                         r.prrd_tran_no, r.pol_policy_status,
    --                         r.ipu_sec_scl_code, v_amt_or_rate, r.prrd_code,
    --                         NULL, NULL, v_prev_fc_rate,
    --                         round(v_fc_refund_prem,v_rnd), round(v_fc_refund_comm,v_rnd), round(v_prev_fc_amt,v_rnd),
    --                         r.ipu_wet, v_prev_fc_comm_rate, v_prev_fc_code,
    --                         round(v_eq_prem,v_rnd), v_eq_comm_rate,
    --                         round(v_eq_comm,v_rnd), round(v_less_eq_comm,v_rnd),
    --                         round(v_less_eq_prem,v_rnd), v_facre_type,
    --                         v_fc_wef_date, v_accepted, round(v_fc_prem_diff_amt,v_rnd),
    --                         round(v_vat_amt,v_rnd), v_vat_rate, v_fc_mngmnt_type,
    --                         round(v_fc_mngmnt_value,v_rnd), v_fc_rein_tax_type,
    --                         v_fc_rein_tax_value, round(v_management_fee,v_rnd),
    --                         round(v_facre_rein_tax,v_rnd), round(v_fc_override_prem,v_rnd),
    --                         v_fc_override_type, round(v_fc_override_value,v_rnd),
    --                         v_fc_remarks, v_wthtx_rate, round(v_whtx_amt,v_rnd)
    --                        );
    --         ELSIF v_add_edit = 'E'
    --         THEN
    --            UPDATE gin_facre_cessions
    --               SET fc_agnt_agent_code = v_agn_code,
    --                   fc_amount = v_si,
    --                   fc_wef = r.ipu_wef,
    --                   fc_ipu_code = r.ipu_code,
    --                   fc_agent_sht_desc = v_agn_sht_desc,
    --                   fc_rate = v_rate,
    --                   fc_comm_rate = NVL (v_comm_rt, v_comm_rate),
    --                   fc_comm_amt = round(v_comm_amt,v_rnd),
    --                   fc_don_by = v_user,
    --                   fc_prem_amt = round(v_prem,v_rnd),
    --                   fc_pol_batch_no = v_batch_no,
    --                   fc_uwyr = r.pol_uw_year,
    --                   fc_ggt_tran_no = r.prrd_tran_no,
    --                   fc_tran_type = r.pol_policy_status,
    --                   fc_scl_code = r.ipu_sec_scl_code,
    --                   fc_amt_or_rate = v_amt_or_rate,
    --                   fc_prrd_code = r.prrd_code,
    --                   fc_wet = r.ipu_wet,
    --                   fc_earthqke_prem = round(v_eq_prem,v_rnd),
    --                   fc_earthqke_comm_rate = v_eq_comm_rate,
    --                   fc_earthqke_comm = round(v_eq_comm,v_rnd),
    --                   fc_net_less_eq_comm = round(v_less_eq_comm,v_rnd),
    --                   fc_net_less_eq_prem = round(v_less_eq_prem,v_rnd),
    --                   fc_accepted_date = v_fc_wef_date,
    --                   fc_accepted = v_accepted,
    --                   fc_prem_diff_amt = round(v_prem_diff,v_rnd),
    --                   fc_remark = '',
    --                   fc_prev_rate = v_prev_fc_rate,
    --                   fc_refund_prem = round(v_fc_refund_prem,v_rnd),
    --                   fc_refund_comm = round(v_fc_refund_comm,v_rnd),
    --                   fc_prev_amount = round(v_prev_fc_amt,v_rnd),
    --                   fc_prev_comm_rate = v_prev_fc_comm_rate,
    --                   fc_prev_fc_code = v_prev_fc_code,
    --                   fc_vat_amt = round(v_vat_amt,v_rnd),
    --                   fc_vat_rate = v_vat_rate,
    --                   fc_mngmnt_type = v_fc_mngmnt_type,
    --                   fc_mngmnt_value = round(v_fc_mngmnt_value,v_rnd),
    --                   fc_rein_tax_type = v_fc_rein_tax_type,
    --                   fc_rein_tax_value = round(v_fc_rein_tax_value,v_rnd),
    --                   fc_mngmnt_amt = v_management_fee,
    --                   fc_rein_tax_amt = round(v_facre_rein_tax,v_rnd),
    --                   fc_override_prem = round(v_fc_override_prem,v_rnd),
    --                   fc_override_type = v_fc_override_type,
    --                   fc_override_value = round(v_fc_override_value,v_rnd),
    --                   fc_override_prem_amt = round(v_override_prem,v_rnd),
    --                   fc_whtx_rate = v_wthtx_rate,
    --                   fc_whtx_amt = round(v_whtx_amt,v_rnd)
    --             WHERE fc_code = v_fc_code;
    --         ELSIF v_add_edit = 'D'
    --         THEN
    --            BEGIN
    --               SELECT fc_facre_type
    --                 INTO vfacretype
    --                 FROM gin_facre_cessions
    --                WHERE fc_code = v_fc_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error determining facultative type.');
    --            END;

    ----            IF vfacretype = 'O'
    ----            THEN
    ----               raise_error ('Cannot delete a facultative obligatory treaty..');
    ----            END IF;
    ---- THIS IS A WAY AROUND DUE TO UNABLE TO EDIT FACRE OBJ FROM THE SCREEN. ENABLE WHEN THE SCREEN IS READY. SOLOMON
    --            DELETE      gin_facre_cessions
    --                  WHERE fc_code = v_fc_code;      -- AND fc_facre_type != 'O';
    --         END IF;
    --      --commit;
    --      END LOOP;
    --   END;

    /*************ABOVE COMMETED BY OLSON************/
    PROCEDURE insert_facre (v_batch_no            IN NUMBER,
                            v_ipu_code            IN NUMBER,
                            v_trans_no            IN NUMBER,
                            v_agn_code            IN NUMBER,
                            v_agn_sht_desc        IN VARCHAR2,
                            v_amt_or_rate         IN VARCHAR2,
                            v_amount              IN NUMBER,
                            v_user                IN VARCHAR2,
                            v_add_edit            IN VARCHAR2,
                            v_fc_code             IN NUMBER DEFAULT NULL,
                            v_facre_type          IN VARCHAR2 DEFAULT 'N',
                            v_accepted_date       IN DATE,
                            v_accepted            IN VARCHAR2,
                            v_comm_rt             IN NUMBER DEFAULT NULL,
                            v_ri_edit_trans       IN BOOLEAN,
                            v_fc_mngmnt_type      IN VARCHAR2 DEFAULT NULL,
                            v_fc_mngmnt_value     IN NUMBER DEFAULT NULL,
                            v_fc_rein_tax_type    IN VARCHAR2 DEFAULT NULL,
                            v_fc_rein_tax_value   IN NUMBER DEFAULT NULL,
                            v_fc_override_prem    IN VARCHAR2 DEFAULT NULL,
                            v_fc_override_type    IN VARCHAR2 DEFAULT NULL,
                            v_fc_override_value      NUMBER DEFAULT NULL,
                            v_fc_remarks          IN VARCHAR2 DEFAULT NULL)
    IS
        v_rate                    NUMBER;
        v_comm_rate               NUMBER;
        v_si                      NUMBER;
        v_prem                    NUMBER;
        v_eq_prem                 NUMBER;
        v_less_eq_prem            NUMBER;
        v_less_eq_comm            NUMBER;
        v_eq_comm                 NUMBER;
        v_eq_comm_rate            NUMBER;
        v_comm_amt                NUMBER;
        vfacretype                VARCHAR2 (1);
        v_fc_wef_date             DATE;
        v_prorata_rate            NUMBER;
        v_fc_prem_diff_amt        NUMBER;
        v_prem_diff               NUMBER;
        v_fc_refund_prem          NUMBER;
        v_fc_refund_comm          NUMBER;
        v_exhange_rate            NUMBER;
        v_calc_prem               NUMBER;
        v_cnt                     NUMBER;
        v_rnd                     NUMBER;
        v_rnd_bcur                NUMBER;
        v_vat_rate                NUMBER;
        v_vat_amt                 NUMBER;
        v_prev_wef                DATE;
        v_prev_wet                DATE;
        v_prev_ipu_gp             NUMBER := 0;
        v_management_fee          NUMBER;
        v_facre_rein_tax          NUMBER;
        v_override_prem           NUMBER;
        v_wthtx_rate              NUMBER;
        v_whtx_amt                NUMBER;
        v_agn_whtax_applicable    VARCHAR2 (1) := 'N';
        v_facre_charges_param     VARCHAR2 (3) DEFAULT 'GRS';
        v_special_ret_prem        NUMBER;
        v_special_ret_prem_diff   NUMBER;
        -- v_ri_prem NUMBER;
        v_rein_cur_param          VARCHAR2 (1) := 'N';
        v_reinsure_amt            NUMBER;
        v_tot_si                  NUMBER;

        v_facre_rate              NUMBER;
        v_prev_tot_fc_amnt        NUMBER;
        v_prev_tot_fc_rate        NUMBER;
        v_prev_reinsure_amt       NUMBER;
        v_prev_ri_prem            NUMBER;
        v_ceded_fc_amnt           NUMBER;
        v_ceded_fc_rate           NUMBER;
        v_prev_fc_code            NUMBER;
        v_prev_fc_amt             NUMBER;
        v_prev_fc_comm_amt        NUMBER;
        v_prev_fc_prem_amt        NUMBER;
        v_prev_fc_rate            NUMBER;
        v_prev_fc_comm_rate       NUMBER;
        --      v_fc_prev_cession           NUMBER;
        v_bcur_code               NUMBER;
        v_trt_cur_code            NUMBER;
        v_trt_cur_rate            NUMBER;
        v_ri_prem_formular        VARCHAR2 (20);

        CURSOR rsks IS
            SELECT pol_cur_code,
                   pol_uw_year,
                   pol_policy_status,
                   ipu_code,
                   pol_cur_rate,
                   ipu_prev_ipu_code,
                   ipu_sec_scl_code,
                   ipu_reinsure_amt,
                   ipu_wef,
                   ipu_wet,
                   prrd_code,
                   prrd_avail_fulc_bal,
                   prrd_ri_prem,
                   prrd_earthquake_prem,
                   prrd_ri_net_less_eq_prem,
                   prrd_tran_no,
                   ipu_bind_code,
                   prrd_prev_prrd_code,
                   ipu_overrideride_ret_type,
                   pol_cur_symbol,
                   ipu_override_ri_retention,
                   prrd_comp_retention,
                   prrd_net_prem,
                   prrd_prev_facre_si,
                   ipu_id,
                   ipu_uw_yr,
                   prrd_excess_pct,
                   --                get_risk_comp_retention(ipu_id,ipu_uw_yr,ipu_code)
                   prrd_prev_net_retention,
                   prrd_prev_ri_si,
                   prrd_gross_comp_retention,
                   prrd_comp_net_rate,
                   prrd_as_code,
                   ipu_endos_diff_amt,
                   prrd_cumm_ri_prem,
                   prrd_prev_facre_prem,
                   ipu_GP,
                   ipu_fp
              FROM gin_policies,
                   gin_insured_property_unds,
                   gin_policy_risk_ri_dtls
             WHERE     ipu_pol_batch_no = pol_batch_no
                   AND ipu_code = prrd_ipu_code
                   AND pol_batch_no = v_batch_no
                   AND prrd_tran_no = v_trans_no
                   AND ipu_code = v_ipu_code;
    BEGIN
        BEGIN
            SELECT COUNT (1)
              INTO v_cnt
              FROM tqc_agencies, gin_coinsurers
             WHERE     agn_code = v_agn_code
                   AND agn_main_agn_code = coin_agnt_agent_code
                   AND coin_pol_batch_no = v_batch_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error determining if facre also defined as coinsurer..');
        END;

        --raise_error( 'GIS_RI_PROCEDURES::LN 29296::v_amt_rt = '||v_amt_or_rate ||';'||v_amount);
        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'REINS_IN_BASE_CURRENCY')
              INTO v_rein_cur_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_rein_cur_param := 'N';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching Treaty  parameter...');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'FACRECHARGES_OR_MNGTFEE_COMPUTATION')
              INTO v_facre_charges_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_facre_charges_param := 'GRS';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error GETTING FACRECHARGES_OR_MNGTFEE_COMPUTATION PARAM');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('RI_PREM_FORMULAR')
              INTO v_ri_prem_formular
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_rein_cur_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching Reinsurance Premium Calculation Option...');
        END;

        IF NVL (v_cnt, 0) != 0
        THEN
            raise_error (
                'Facultative accounts already specified as coinsurer..');
        END IF;

        FOR r IN rsks
        LOOP
            v_exhange_rate :=
                get_currexch_rate (r.pol_cur_code, v_rnd, v_rnd_bcur);
            v_comm_rate := NVL (v_comm_rt, 0);
            v_bcur_code :=
                tqc_interfaces_pkg.orgcurrency (37, r.pol_cur_symbol);

            v_prev_reinsure_amt := 0;
            v_prev_tot_fc_amnt := 0;
            v_prev_tot_fc_rate := 0;
            v_prev_ri_prem := 0;

            BEGIN
                SELECT ipu_wef, ipu_wet, ipu_gp
                  INTO v_prev_wef, v_prev_wet, v_prev_ipu_gp
                  FROM gin_insured_property_unds
                 WHERE ipu_code = r.ipu_prev_ipu_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            IF r.pol_policy_status IN ('NB',
                                       'RN',
                                       'EX',
                                       'SP')
            THEN
                BEGIN
                    SELECT ipu_reinsure_amt,
                           prrd_ri_prem,
                           prev_fc_amnt,
                           facre_prev_rate
                      INTO v_prev_reinsure_amt,
                           v_prev_ri_prem,
                           v_prev_tot_fc_amnt,
                           v_prev_tot_fc_rate
                      FROM GIN_INSURED_PROPERTY_UNDS,
                           (  SELECT FC_IPU_CODE,
                                     prrd_ri_prem,
                                     SUM (
                                         DECODE (SIGN (fc_prem_amt),
                                                 1, ABS (NVL (fc_amount, 0)),
                                                 ABS (NVL (fc_amount, 0))))
                                         prev_fc_amnt,
                                     SUM (
                                         DECODE (SIGN (fc_prem_amt),
                                                 1, ABS (NVL (FC_RATE, 0)),
                                                 -ABS (NVL (FC_RATE, 0))))
                                         facre_prev_rate
                                FROM GIN_POLICY_RISK_RI_DTLS,
                                     GIN_FACRE_CESSIONS
                               WHERE     PRRD_CODE = FC_PRRD_CODE(+)
                                     AND PRRD_CURRENT = 'Y'
                            GROUP BY FC_IPU_CODE)
                     WHERE     IPU_CODE = FC_IPU_CODE(+)
                           AND IPU_CODE = r.ipu_prev_ipu_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        v_prev_reinsure_amt := 0;
                        v_prev_tot_fc_amnt := 0;
                        v_prev_tot_fc_rate := 0;
                END;
            END IF;

            BEGIN
                SELECT fc_code,
                       fc_amount,
                       fc_rate,
                       fc_comm_rate,
                       fc_comm_amt,
                       fc_prem_amt
                  INTO v_prev_fc_code,
                       v_prev_fc_amt,
                       v_prev_fc_rate,
                       v_prev_fc_comm_rate,
                       v_prev_fc_comm_amt,
                       v_prev_fc_prem_amt
                  FROM gin_facre_cessions
                 WHERE     fc_prrd_code = r.prrd_prev_prrd_code
                       AND fc_agnt_agent_code = v_agn_code;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_prev_fc_code := NULL;
                    v_prev_fc_amt := 0;
                    v_prev_fc_rate := 0;
                    v_prev_fc_comm_rate := 0;
                    v_prev_fc_comm_amt := 0;
                    v_prev_fc_prem_amt := 0;
                WHEN OTHERS
                THEN
                    RAISE_ERROR (
                           'Error getting previous facultative rate..ON '
                        || r.prrd_prev_prrd_code
                        || ';'
                        || v_agn_code);
            END;

            --  raise_error(r.ipu_code||'='||r.prrd_prev_prrd_code||'='||v_agn_code||'='||v_prev_fc_rate);
            BEGIN
                SELECT SUM (
                           DECODE (SIGN (fc_prem_amt),
                                   1, ABS (NVL (fc_amount, 0)),
                                   ABS (NVL (fc_amount, 0)))),
                       SUM (
                           DECODE (SIGN (fc_prem_amt),
                                   1, ABS (NVL (FC_RATE, 0)),
                                   -ABS (NVL (FC_RATE, 0))))
                  INTO v_ceded_fc_amnt, v_ceded_fc_rate
                  FROM gin_facre_cessions, gin_insured_property_unds
                 WHERE     fc_ipu_code = ipu_code
                       AND ipu_id = r.ipu_id
                       AND ipu_code = r.ipu_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_ceded_fc_amnt := 0;
                    v_ceded_fc_rate := 0;
            END;


            BEGIN
                SELECT DISTINCT ta_cur_code
                  INTO v_trt_cur_code
                  FROM gin_class_treaties,
                       gin_arrangement_setups,
                       gin_treaty_arrangements
                 WHERE     as_ta_code = ta_code
                       AND clt_as_code = as_code
                       AND clt_scl_code = r.ipu_sec_scl_code
                       AND AS_CODE = r.prrd_as_code
                       AND as_uwyr = r.IPU_UW_YR;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    raise_error (
                        'Unable to retrieve the arrangement retention limit');
            END;

            v_trt_cur_rate := get_exchange_rate (v_bcur_code, v_trt_cur_code);

            IF     NVL (v_rein_cur_param, 'N') = 'Y'
               AND v_trt_cur_code != r.pol_cur_code
            THEN
                IF v_bcur_code = v_trt_cur_code
                THEN
                    v_reinsure_amt := (NVL (r.ipu_reinsure_amt, 0)) /*/ r.pol_cur_rate*/
                                                                   ;
                ELSE
                    v_reinsure_amt :=
                        (NVL (r.ipu_reinsure_amt, 0)) / r.pol_cur_rate;
                --              v_reinsure_amt :=( NVL(r.ipu_reinsure_amt,0)) ;--*v_trt_cur_rate;
                END IF;
            ELSE
                v_reinsure_amt := ROUND (NVL (r.ipu_reinsure_amt, 0), v_rnd);
            --            v_reinsure_amt :=  ROUND(NVL ( r.ipu_reinsure_amt, 0)+NVL(gis_ri_procedures.get_risk_ri_si(r.ipu_id,r.prrd_code),0)+NVL(gis_ri_procedures.get_risk_comp_retention(r.ipu_id,r.ipu_uw_yr,r.ipu_code) ,0),v_rnd);
            END IF;

            --raise_error(v_reinsure_amt||';'||r.ipu_reinsure_amt);
            v_reinsure_amt := ABS (v_reinsure_amt);

            IF v_agn_code IS NOT NULL
            THEN
                BEGIN
                    SELECT act_vat_rate,
                           NVL (agn_agent_wht_tax, act_wthtx_rate),
                           agn_whtax_applicable
                      INTO v_vat_rate, v_wthtx_rate, v_agn_whtax_applicable
                      FROM tqc_account_types, tqc_agencies
                     WHERE     act_code = agn_act_code
                           AND act_code = 7
                           AND agn_code = v_agn_code;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        SELECT act_vat_rate
                          INTO v_vat_rate
                          FROM tqc_account_types
                         WHERE act_code = 7;
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error fetching Facre Vat/wthtx Rate...'
                            || v_agn_code);
                END;
            END IF;

            --RAISE_ERROR('v_vat_rate='||v_vat_rate);
            IF v_comm_rate IS NULL
            THEN
                v_comm_rate :=
                    gis_web_uw_ri.get_facre_comm_rate (r.ipu_sec_scl_code,
                                                       r.ipu_bind_code);
            END IF;

            IF v_facre_type = 'N'
            THEN
                IF NVL (v_amt_or_rate, 'A') = 'A'
                THEN
                    --               IF NVL (v_amount, 0) <= NVL (r.prrd_avail_fulc_bal, 0)  - NVL (v_prev_fc_amnt, 0) THEN
                    --                  v_si := NVL (v_amount, 0);
                    --               ELSE
                    --                  v_si :=  NVL (r.prrd_avail_fulc_bal, 0) - NVL (v_prev_fc_amnt, 0);
                    --               END IF;
                    IF NVL (v_amount, 0) <= NVL (r.prrd_avail_fulc_bal, 0)
                    THEN
                        v_si := NVL (v_amount, 0);
                    ELSE
                        v_si := NVL (r.prrd_avail_fulc_bal, 0); --- NVL (v_ceded_fc_amnt, 0);
                    END IF;


                    v_rate := (NVL (v_si, 0)) --+NVL (v_prev_fc_amnt, 0) )
                                              / NVL (v_reinsure_amt /*r.ipu_reinsure_amt*/
                                                                   , 0) * 100;

                    --       v_rate := (NVL (v_si, 0) )/ NVL (v_tot_si/*r.ipu_reinsure_amt*/, 0) * 100;

                    --v_tot_si :=NVL(v_reinsure_amt,0)-(nvl(r.prrd_prev_ri_si,0)+NVL(r.prrd_prev_net_retention,0)+NVL(v_prev_fc_amnt,0));

                    IF NVL (v_rein_cur_param, 'N') = 'Y'
                    THEN
                        --v_reinsure_amt := ROUND((NVL ( r.ipu_reinsure_amt, 0))/ r.pol_cur_rate,v_rnd);
                        -- v_facre_rate :=(NVL (v_si, 0) )/ (NVL (ROUND((NVL ( v_tot_si, 0))/ r.pol_cur_rate,v_rnd), 0)) * 100;
                        v_facre_rate :=
                              (NVL (v_si, 0))
                            / (NVL (
                                   ROUND (
                                         (  NVL (r.prrd_avail_fulc_bal, 0)
                                          + NVL (v_ceded_fc_amnt, 0))
                                       / r.pol_cur_rate,
                                       v_rnd),
                                   0))
                            * 100;
                    ELSE
                        -- v_facre_rate :=(NVL (v_si, 0) )/ (NVL ( v_tot_si, 0)) * 100;
                        v_facre_rate :=
                              (NVL (v_si, 0))
                            / (  NVL (r.prrd_avail_fulc_bal, 0)
                               + NVL (v_ceded_fc_amnt, 0))
                            * 100;
                    END IF;
                --  raise_error('here='||v_amount||v_si||';'||r.prrd_avail_fulc_bal||';'||v_facre_rate||';'||v_rate||';'||v_reinsure_amt||';'||r.prrd_prev_net_retention||';'||';'||r.ipu_id);
                ELSE
                    v_rate := NVL (v_amount, 0);

                    IF v_rate NOT BETWEEN 0 AND 100
                    THEN
                        raise_error ('Cession % must be between 0 and 100');
                    END IF;

                    v_si :=
                        ROUND ((v_rate * NVL (          /*r.ipu_reinsure_amt*/
                                              v_reinsure_amt, 0) / 100),
                               v_rnd);

                    IF NVL (v_si, 0) <=
                         NVL (r.prrd_avail_fulc_bal, 0)
                       - NVL (v_ceded_fc_amnt, 0)
                    THEN
                        v_si := NVL (v_si, 0);
                    ELSE
                        v_si :=
                              NVL (r.prrd_avail_fulc_bal, 0)
                            - NVL (v_ceded_fc_amnt, 0);
                        v_rate :=
                            NVL (v_si, 0) / NVL (       /*r.ipu_reinsure_amt*/
                                                 v_reinsure_amt, 0) * 100;
                    END IF;
                END IF;
            ELSE
                v_si := NVL (v_amount, 0);
                v_rate := NVL (v_si, 0) / NVL (         /*r.ipu_reinsure_amt*/
                                               v_reinsure_amt, 0) * 100;
                v_fc_wef_date := NVL (v_accepted_date, r.ipu_wef);
            END IF;

            --   raise_error ('GIS_RI_PROCEDURES::LN 29522::v_rate = '|| v_rate||' v_si=' || v_si||';'||v_reinsure_amt);
            DBMS_OUTPUT.put_line (' v_si=' || v_si);


            IF v_accepted = 'Y'
            THEN
                v_fc_wef_date := NVL (v_accepted_date, r.ipu_wef);

                IF v_fc_wef_date NOT BETWEEN r.ipu_wef AND r.ipu_wet
                THEN
                    raise_error (
                        'Facultative accepted date should be within risk cover dates..');
                END IF;

                --RAISE_ERROR('EEEEE='||v_fc_wef_date||';'||r.ipu_wef||';'||r.ipu_wet);
                IF v_fc_wef_date = r.ipu_wef
                THEN
                    v_prorata_rate := 1;
                ELSE
                    v_prorata_rate :=
                          ((r.ipu_wet - v_fc_wef_date) + 1)
                        / ((r.ipu_wet - r.ipu_wef) + 1);
                END IF;
            END IF;

            --         v_ri_prem :=r.prrd_ri_prem;
            --
            --            IF NVL(r.prrd_excess_pct,0) != 0  AND NVL (r.prrd_avail_fulc_bal, 0) = 0 THEN
            --              v_ri_prem := ROUND( ((NVL(r.prrd_excess_pct,0)/*+NVL(v_facre_prev_rate,0)*/)*NVL(r.prrd_cumm_ri_prem,0)/ 100));---NVL(gis_ri_procedures.get_risk_cumulative_prem(r.IPU_ID,r.ipu_uw_yr,'F',r.ipu_code),0));
            --            ELSE
            --             v_ri_prem :=NVL(r.prrd_cumm_ri_prem,0);-- -(NVL(gis_ri_procedures.get_risk_cumulative_prem(r.IPU_ID,r.ipu_uw_yr,'F',r.ipu_code),0)
            --           END IF;
            --         IF NVL(r.prrd_excess_pct,0) = 100 THEN
            --           v_ri_prem :=r.prrd_ri_prem;
            --         END IF;
            --DBMS_OUTPUT.PUT_LINE(v_rate||';v_rate='||v_rate||';r.prrd_ri_prem='||r.prrd_ri_prem||';v_prev_fc_rate='||v_prev_fc_rate||';r.ipu_GP ='||r.ipu_GP);
            --         RAISE_ERROR('GIS_RI_PROCEDURES::LN 31542::v_accepted='||v_accepted||'RI Prem='||NVL (r.prrd_ri_prem, 0)
            --                    ||'RI Prem='||NVL (r.ipu_gp, 0)
            --                    ||'RI Prem='||NVL (v_prev_ipu_gp, 0));
            IF v_accepted = 'Y'
            THEN
                IF     NVL (v_facre_type, 'N') = 'O'
                   AND NVL (r.ipu_overrideride_ret_type, 'X') = 'P'
                THEN
                    v_special_ret_prem :=
                        NVL (r.ipu_override_ri_retention, 0);
                    v_special_ret_prem_diff :=
                          v_special_ret_prem
                        - (  r.prrd_ri_prem
                           - ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,
                                    v_rnd));            --prrd_comp_retention;

                    IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CESSION'
                       OR (r.POL_POLICY_STATUS IN ('NB',
                                                   'RN',
                                                   'EX',
                                                   'SP',
                                                   'CN'))
                       OR NVL (r.IPU_FP, 0) != 0
                       OR NVL (R.PRRD_RI_PREM, 0) = 0
                       OR (    r.POL_POLICY_STATUS = 'EN'
                           AND r.ipu_wef = v_prev_wef
                           AND r.ipu_wet = v_prev_wet
                           AND r.ipu_gp = v_prev_ipu_gp)
                    THEN
                        v_calc_prem :=
                            ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,
                                   v_rnd);
                    ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CHANGE'
                    THEN
                        v_calc_prem :=
                            ROUND (
                                  (v_rate / 100 * r.ipu_GP)
                                - (v_prev_fc_rate / 100 * r.ipu_GP)
                                + (v_prev_fc_rate / 100 * r.PRRD_RI_PREM),
                                v_rnd);
                    END IF;

                    v_calc_prem :=
                        v_calc_prem - NVL (v_special_ret_prem_diff, 0);
                ELSE
                    IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CESSION'
                       OR (r.POL_POLICY_STATUS IN ('NB',
                                                   'RN',
                                                   'EX',
                                                   'SP',
                                                   'CN'))
                       OR NVL (r.IPU_FP, 0) != 0
                       OR NVL (R.PRRD_RI_PREM, 0) = 0
                       OR (    r.POL_POLICY_STATUS = 'EN'
                           AND r.ipu_wef = v_prev_wef
                           AND r.ipu_wet = v_prev_wet
                           AND r.ipu_gp = v_prev_ipu_gp)
                    THEN
                        v_calc_prem :=
                            ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,
                                   v_rnd);
                    --                     RAISE_ERROR('GIS_RI_PROCEDURES::LN 31590::v_calc_prem='||v_calc_prem||'RI Prem='||NVL (r.prrd_ri_prem, 0));
                    ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CHANGE'
                    THEN
                        -- RAISE_ERROR('v_rate='||v_rate||'v_accepted='||v_accepted||'v_facre_type='||v_facre_type||'override='||r.ipu_overrideride_ret_type||'v_calc_prem='||v_calc_prem||'v_ri_prem_formular='||v_ri_prem_formular||'GROSSP='||r.ipu_GP||'v_prev_fc_rate='||v_prev_fc_rate||'RI PREM='||R.PRRD_RI_PREM);
                        v_calc_prem :=
                            ROUND (
                                  (v_rate / 100 * r.ipu_GP)
                                - (v_prev_fc_rate / 100 * r.ipu_GP)
                                + (v_prev_fc_rate / 100 * r.PRRD_RI_PREM),
                                v_rnd);
                    --               RAISE_ERROR('GIS_RI_PROCEDURES::LN 31601::v_calc_prem='||v_calc_prem||'RI Prem='||NVL (r.prrd_ri_prem, 0));
                    /* REMMED OUT BY MAYNARD.02092019. THE BASED_ON_CHANGE SHOULD WORK BASED ON ANNUAL PREMIUM */
                    /*
                    if nvl(v_calc_prem,0)>ROUND(  v_rate  * NVL (r.prrd_ri_prem, 0)    / 100, v_rnd   ) then
                        v_calc_prem := ROUND(  v_rate  * NVL (r.prrd_ri_prem, 0)    / 100, v_rnd   );
                    end if;
                    */
                    END IF;
                END IF;

                -- RAISE_ERROR('v_calc_prem='||v_calc_prem||'v_ri_prem_formular='||v_ri_prem_formular||'GROSSP='||r.ipu_GP||'v_prev_fc_rate='||v_prev_fc_rate||'RI PREM='||R.PRRD_RI_PREM);
                v_prem := ROUND (v_prorata_rate * v_calc_prem, v_rnd);

                --            RAISE_ERROR('GIS_RI_PROCEDURES::LN 29604::v_prem='|| v_prem||'& v_prorata_rate='|| v_prorata_rate
                --                                ||'& v_prorata_rate='|| v_prorata_rate
                --                                ||'& v_calc_prem='|| v_calc_prem
                --                                ||'& r.prrd_ri_prem='|| r.prrd_ri_prem
                --                                ||'& v_rate='|| v_rate);
                IF NVL (v_fc_override_prem, 'N') = 'Y'
                THEN
                    IF v_fc_override_type = 'A'
                    THEN
                        v_prem := v_fc_override_value;
                    ELSIF v_fc_override_type = 'R'
                    THEN
                        v_prem := v_fc_override_value / 100 * v_prem;
                    END IF;
                END IF;

                -- RAISE_ERROR('NDANI='||v_prorata_rate||';'||v_rate||';'||r.prrd_ri_prem);
                v_fc_prem_diff_amt := v_calc_prem - v_prem;
                /** Amended Maynard:: 10.02.2020  - Amended Facre EQ Proportions **/
                v_eq_prem :=
                    ROUND (
                          v_prem
                        * NVL (r.prrd_earthquake_prem, 0)
                        / NVL (r.prrd_ri_prem, 0),
                        v_rnd);
                --               ROUND (
                --                    v_prorata_rate
                --                  * v_rate
                --                  * (NVL (r.prrd_earthquake_prem, 0))
                --                  / 100,
                --                  v_rnd);
                v_less_eq_prem :=
                    ROUND (
                          v_prem
                        * NVL (r.prrd_ri_net_less_eq_prem, 0)
                        / NVL (r.prrd_ri_prem, 0),
                        v_rnd);
            --               ROUND (
            --                    v_prorata_rate
            --                  * v_rate
            --                  * (NVL (r.prrd_ri_net_less_eq_prem, 0))
            --                  / 100,
            --                  v_rnd);
            ELSE
                --RAISE_ERROR('v_rate='||v_rate||'ipu_GP='||r.ipu_GP||'v_prev_fc_rate='||v_prev_fc_rate||'PRRD_RI_PREM='||r.PRRD_RI_PREM);
                IF     NVL (v_facre_type, 'N') = 'O'
                   AND NVL (r.ipu_overrideride_ret_type, 'X') = 'P'
                THEN
                    v_special_ret_prem :=
                        NVL (r.ipu_override_ri_retention, 0);
                    v_special_ret_prem_diff :=
                          v_special_ret_prem
                        - (  r.prrd_ri_prem
                           - ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,
                                    v_rnd));            --prrd_comp_retention;

                    --                  v_calc_prem := ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,v_rnd);

                    IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CESSION'
                       OR (r.POL_POLICY_STATUS IN ('NB',
                                                   'RN',
                                                   'EX',
                                                   'SP',
                                                   'CN'))
                       OR NVL (r.IPU_FP, 0) != 0
                       OR NVL (R.PRRD_RI_PREM, 0) = 0
                       OR (    r.POL_POLICY_STATUS = 'EN'
                           AND r.ipu_wef = v_prev_wef
                           AND r.ipu_wet = v_prev_wet
                           AND r.ipu_gp = v_prev_ipu_gp)
                    THEN
                        v_calc_prem :=
                            ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,
                                   v_rnd);
                    ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CHANGE'
                    THEN
                        v_calc_prem :=
                            ROUND (
                                  (v_rate / 100 * r.ipu_GP)
                                - (v_prev_fc_rate / 100 * r.ipu_GP)
                                + (v_prev_fc_rate / 100 * r.PRRD_RI_PREM),
                                v_rnd);
                    END IF;

                    v_calc_prem :=
                        v_calc_prem - NVL (v_special_ret_prem_diff, 0);
                ELSE
                    IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CESSION'
                       OR (r.POL_POLICY_STATUS IN ('NB',
                                                   'RN',
                                                   'EX',
                                                   'SP',
                                                   'CN'))
                       OR NVL (r.IPU_FP, 0) != 0
                       OR NVL (R.PRRD_RI_PREM, 0) = 0
                       OR (    r.POL_POLICY_STATUS = 'EN'
                           AND r.ipu_wef = v_prev_wef
                           AND r.ipu_wet = v_prev_wet
                           AND r.ipu_gp = v_prev_ipu_gp)
                    THEN
                        v_calc_prem :=
                            ROUND (v_rate * NVL (r.prrd_ri_prem, 0) / 100,
                                   v_rnd);
                    ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CHANGE'
                    THEN
                        v_calc_prem :=
                            ROUND (
                                  (v_rate / 100 * r.ipu_GP)
                                - (v_prev_fc_rate / 100 * r.ipu_GP)
                                + (v_prev_fc_rate / 100 * r.PRRD_RI_PREM),
                                v_rnd);
                    --                  RAISE_ERROR('GIS_RI_PROCEDURES::LN 31714::v_calc_prem='||v_calc_prem
                    --                  ||'RI Prem='||NVL (r.prrd_ri_prem, 0)
                    --                  ||'v_prev_fc_rate='||v_prev_fc_rate
                    --                  ||'GP Prem='||NVL (r.ipu_GP, 0)
                    --                  ||'v_rate='||NVL (v_rate, 0));
                    END IF;
                END IF;

                IF NVL (v_fc_override_prem, 'N') = 'Y'
                THEN
                    IF v_fc_override_type = 'A'
                    THEN
                        v_prem := v_fc_override_value;
                    ELSIF v_fc_override_type = 'R'
                    THEN
                        v_prem := v_fc_override_value / 100 * v_calc_prem;
                    END IF;
                ELSE
                    v_prem := v_calc_prem;
                END IF;

                v_fc_prem_diff_amt := v_calc_prem - v_prem;
                /** Amended Maynard:: 10.02.2020  - Amended Facre EQ Proportions **/
                v_eq_prem :=
                    ROUND (
                          v_prem
                        * NVL (r.prrd_earthquake_prem, 0)
                        / NVL (r.prrd_ri_prem, 0),
                        v_rnd);
                --               ROUND (
                --                    v_prorata_rate
                --                  * v_rate
                --                  * (NVL (r.prrd_earthquake_prem, 0))
                --                  / 100,
                --                  v_rnd);
                v_less_eq_prem :=
                    ROUND (
                          v_prem
                        * NVL (r.prrd_ri_net_less_eq_prem, 0)
                        / NVL (r.prrd_ri_prem, 0),
                        v_rnd);
            --               ROUND (
            --                    v_prorata_rate
            --                  * v_rate
            --                  * (NVL (r.prrd_ri_net_less_eq_prem, 0))
            --                  / 100,
            --                  v_rnd);
            END IF;

            DBMS_OUTPUT.PUT_LINE (
                   'GIS_RI_PROCEDURES::LN 31730::v_less_eq_prem = '
                || v_less_eq_prem);

            v_less_eq_comm :=
                ROUND (v_comm_rate * NVL (v_less_eq_prem, 0) / 100, v_rnd);
            v_eq_comm :=
                ROUND (
                      NVL (v_eq_comm_rate, v_comm_rate)
                    * NVL (v_eq_prem, 0)
                    / 100,
                    v_rnd);
            v_eq_comm_rate := NVL (v_eq_comm_rate, v_comm_rate);
            v_comm_amt := NVL (v_less_eq_comm, 0) + NVL (v_eq_comm, 0);
            v_comm_amt :=
                ROUND (
                      v_comm_rate
                    * (NVL (v_prem, 0) + NVL (v_special_ret_prem_diff, 0))
                    / 100,
                    v_rnd);
            v_vat_amt := ROUND (v_comm_amt * v_vat_rate / 100, v_rnd);

            --RAISE_ERROR(v_agn_whtax_applicable||' = '||v_wthtx_rate);
            IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
            THEN
                v_whtx_amt :=
                    ROUND (
                          (NVL (v_prem, 0) - NVL (v_comm_amt, 0))
                        * v_wthtx_rate
                        / 100,
                        v_rnd);
            END IF;

            IF NVL (v_fc_mngmnt_type, 'A') = 'A'              --MANAGEMENT FEE
            THEN
                v_management_fee := v_fc_mngmnt_value;
            ELSE
                IF NVL (v_facre_charges_param, 'GRS') = 'GRS'
                THEN
                    IF v_fc_mngmnt_value NOT BETWEEN 0 AND 100
                    THEN
                        raise_error (
                            'Management fee % must be between 0 and 100');
                    END IF;

                    v_management_fee :=
                        ROUND (v_fc_mngmnt_value * NVL (v_prem, 0) / 100);
                ELSIF NVL (v_facre_charges_param, 'GRS') = 'NET'
                THEN
                    v_management_fee :=
                        ROUND (
                            (  v_fc_mngmnt_value
                             * (NVL (v_prem, 0) - NVL (v_comm_amt, 0))
                             / 100),
                            v_rnd);
                END IF;
            END IF;

            IF NVL (v_fc_rein_tax_type, 'A') = 'A'             --FACRE CHARGES
            THEN
                v_facre_rein_tax := v_fc_rein_tax_value;
            ELSE
                IF NVL (v_facre_charges_param, 'GRS') = 'GRS'
                THEN
                    IF v_fc_rein_tax_value NOT BETWEEN 0 AND 100
                    THEN
                        raise_error ('Other fee % must be between 0 and 100');
                    END IF;

                    v_facre_rein_tax :=
                        ROUND (v_fc_rein_tax_value * NVL (v_prem, 0) / 100,
                               v_rnd);
                ELSIF NVL (v_facre_charges_param, 'GRS') = 'NET'
                THEN
                    v_facre_rein_tax :=
                        ROUND (
                            (  v_fc_rein_tax_value
                             * (NVL (v_prem, 0) - NVL (v_comm_amt, 0))
                             / 100),
                            v_rnd);
                END IF;
            END IF;

            --raise_error('here='||v_facre_rein_tax||';'||v_facre_rein_tax);
            --         IF v_ri_edit_trans
            --         THEN
            --            BEGIN
            --               SELECT fc_code, fc_amount, fc_rate,
            --                      fc_comm_rate, fc_comm_amt,
            --                      fc_prem_amt
            --                 INTO v_prev_fc_code, v_fc_prev_amt, v_fc_prev_rate,
            --                      v_fc_prev_comm_rate, v_fc_prev_comm_amt,
            --                      v_fc_prev_prem_amt
            --                 FROM gin_facre_cessions
            --                WHERE fc_ipu_code = r.ipu_code
            --                  AND fc_prrd_code = r.prrd_prev_prrd_code
            --                  AND fc_agnt_agent_code = v_agn_code;
            --            EXCEPTION
            --               WHEN NO_DATA_FOUND
            --               THEN
            --                  NULL;
            --               WHEN OTHERS
            --               THEN
            --                  raise_error ('Error getting previous facre cessions..'||v_agn_code||';'||r.prrd_prev_prrd_code||';'||r.ipu_code);
            --            END;
            ----RAISE_ERROR(v_fc_prev_rate||';'||r.prrd_ri_prem||';'||v_rate);
            --            v_fc_refund_prem := ROUND (v_fc_prev_rate / 100 * NVL (r.prrd_ri_prem, 0),v_rnd);
            --            v_fc_refund_comm := ROUND (v_fc_refund_prem * v_fc_prev_comm_rate / 100,v_rnd);
            --         END IF;
            --IF r.prrd_tran_no = 2014969862 THEN
            -- RAISE_ERROR('HERE='||v_prem_diff||';'||v_fc_refund_prem||';'||v_fc_prev_amt||';'||v_prem||';'||v_add_edit);
            -- -- HERE=;;;51002.04;
            -- END IF;
            --                   --RAISE_ERROR(v_rate||'='||v_prem||'='||R.PRRD_RI_PREM);
            DBMS_OUTPUT.PUT_LINE (
                   'GIS_RI_PROCEDURES::LN 31838::v_less_eq_prem = '
                || v_less_eq_prem);

            IF v_add_edit = 'A'
            THEN
                --         IF v_rate = 0 THEN
                --           RAISE_ERROR('v_rate='||v_rate||';'||r.ipu_code||';'||v_si);
                --         END IF;

                --
                --   IF NVL(v_fc_override_prem,'N') = 'Y'
                --   THEN
                --       IF v_fc_override_type = 'A'
                --       THEN
                --          v_override_prem :=v_fc_override_value;
                --       ELSIF v_fc_override_type = 'R'
                --       THEN
                --          v_override_prem :=v_fc_override_value/100 * v_prem;
                --       END IF;
                --
                --
                --   END IF;
                --raise_error(r.prrd_tran_no);
                --raise_error('v_prem='||v_prem||'v_amt_or_rate='||v_amt_or_rate);
                IF NVL (v_amt_or_rate, 'A') = 'P'
                THEN
                    v_rate := v_prem / NVL (r.ipu_endos_diff_amt, 0) * 100;
                --        raise_error(v_prem||';'||gis_ri_procedures.get_risk_cumulative_prem(r.IPU_ID,r.ipu_uw_yr,'G',r.ipu_code)||';'||);
                END IF;

                IF NVL (r.prrd_excess_pct, 0) = 0
                THEN
                    v_rate := 0;
                END IF;

                --                        raise_error('GIS_RI_PROCEDURES::LN 31821::v_calc_prem is '||v_calc_prem
                --                                    ||'& v_prem is '||v_prem
                --                                    ||'= '||r.prrd_ri_prem
                --                                    ||'or '||r.ipu_GP
                --                                    ||'based on '||v_ri_prem_formular
                --                                    ||'*'||v_rate
                --                                    ||'*'||v_prorata_rate
                --                                    ||'&'||v_prev_fc_rate);

                INSERT INTO gin_facre_cessions (fc_code,
                                                fc_agnt_agent_code,
                                                fc_amount,
                                                fc_wef,
                                                fc_ipu_code,
                                                fc_agent_sht_desc,
                                                fc_rate,
                                                fc_comm_rate,
                                                fc_comm_amt,
                                                fc_don_by,
                                                fc_dc_no,
                                                fc_prem_amt,
                                                fc_pol_batch_no,
                                                fc_uwyr,
                                                fc_ggt_tran_no,
                                                fc_tran_type,
                                                fc_scl_code,
                                                fc_amt_or_rate,
                                                fc_prrd_code,
                                                fc_auth_dt,
                                                fc_prev_si,
                                                fc_prev_rate,
                                                fc_refund_prem,
                                                fc_refund_comm,
                                                fc_prev_amount,
                                                fc_wet,
                                                fc_prev_comm_rate,
                                                fc_prev_fc_code,
                                                fc_earthqke_prem,
                                                fc_earthqke_comm_rate,
                                                fc_earthqke_comm,
                                                fc_net_less_eq_comm,
                                                fc_net_less_eq_prem,
                                                fc_facre_type,
                                                fc_accepted_date,
                                                fc_accepted,
                                                fc_prem_diff_amt,
                                                fc_vat_amt,
                                                fc_vat_rate,
                                                fc_mngmnt_type,
                                                fc_mngmnt_value,
                                                fc_rein_tax_type,
                                                fc_rein_tax_value,
                                                fc_mngmnt_amt,
                                                fc_rein_tax_amt,
                                                fc_override_prem,
                                                fc_override_type,
                                                fc_override_value,
                                                fc_remark,
                                                fc_whtx_rate,
                                                fc_whtx_amt)
                     VALUES (gin_fc_code_seq.NEXTVAL,
                             v_agn_code,
                             v_si,
                             r.ipu_wef,
                             r.ipu_code,
                             v_agn_sht_desc,
                             ROUND (v_rate, 4),
                             v_comm_rate,
                             ROUND (v_comm_amt, v_rnd),
                             v_user,
                             NULL,
                             ROUND (v_prem, v_rnd),
                             v_batch_no,
                             r.pol_uw_year,
                             r.prrd_tran_no,
                             r.pol_policy_status,
                             r.ipu_sec_scl_code,
                             v_amt_or_rate,
                             r.prrd_code,
                             NULL,
                             NULL,
                             v_prev_fc_rate,
                             ROUND (v_fc_refund_prem, v_rnd),
                             ROUND (v_fc_refund_comm, v_rnd),
                             ROUND (v_prev_fc_amt, v_rnd),
                             r.ipu_wet,
                             v_prev_fc_comm_rate,
                             v_prev_fc_code,
                             ROUND (v_eq_prem, v_rnd),
                             v_eq_comm_rate,
                             ROUND (v_eq_comm, v_rnd),
                             ROUND (v_less_eq_comm, v_rnd),
                             ROUND (v_less_eq_prem, v_rnd),
                             v_facre_type,
                             v_fc_wef_date,
                             v_accepted,
                             ROUND (v_fc_prem_diff_amt, v_rnd),
                             ROUND (v_vat_amt, v_rnd),
                             v_vat_rate,
                             v_fc_mngmnt_type,
                             ROUND (v_fc_mngmnt_value, v_rnd),
                             v_fc_rein_tax_type,
                             v_fc_rein_tax_value,
                             ROUND (v_management_fee, v_rnd),
                             ROUND (v_facre_rein_tax, v_rnd),
                             ROUND (v_fc_override_prem, v_rnd),
                             v_fc_override_type,
                             ROUND (v_fc_override_value, v_rnd),
                             v_fc_remarks,
                             v_wthtx_rate,
                             ROUND (v_whtx_amt, v_rnd));
            ELSIF v_add_edit = 'E'
            THEN
                UPDATE gin_facre_cessions
                   SET fc_agnt_agent_code = v_agn_code,
                       fc_amount = v_si,
                       fc_wef = r.ipu_wef,
                       fc_ipu_code = r.ipu_code,
                       fc_agent_sht_desc = v_agn_sht_desc,
                       fc_rate = v_rate,
                       fc_comm_rate = NVL (v_comm_rt, v_comm_rate),
                       fc_comm_amt = ROUND (v_comm_amt, v_rnd),
                       fc_don_by = v_user,
                       fc_prem_amt = ROUND (v_prem, v_rnd),
                       fc_pol_batch_no = v_batch_no,
                       fc_uwyr = r.pol_uw_year,
                       fc_ggt_tran_no = r.prrd_tran_no,
                       fc_tran_type = r.pol_policy_status,
                       fc_scl_code = r.ipu_sec_scl_code,
                       fc_amt_or_rate = v_amt_or_rate,
                       fc_prrd_code = r.prrd_code,
                       fc_wet = r.ipu_wet,
                       fc_earthqke_prem = ROUND (v_eq_prem, v_rnd),
                       fc_earthqke_comm_rate = v_eq_comm_rate,
                       fc_earthqke_comm = ROUND (v_eq_comm, v_rnd),
                       fc_net_less_eq_comm = ROUND (v_less_eq_comm, v_rnd),
                       fc_net_less_eq_prem = ROUND (v_less_eq_prem, v_rnd),
                       fc_accepted_date = v_fc_wef_date,
                       fc_accepted = v_accepted,
                       fc_prem_diff_amt = ROUND (v_prem_diff, v_rnd),
                       fc_remark = '',
                       fc_prev_rate = v_prev_fc_rate,
                       fc_refund_prem = ROUND (v_fc_refund_prem, v_rnd),
                       fc_refund_comm = ROUND (v_fc_refund_comm, v_rnd),
                       fc_prev_amount = ROUND (v_prev_fc_amt, v_rnd),
                       fc_prev_comm_rate = v_prev_fc_comm_rate,
                       fc_prev_fc_code = v_prev_fc_code,
                       fc_vat_amt = ROUND (v_vat_amt, v_rnd),
                       fc_vat_rate = v_vat_rate,
                       fc_mngmnt_type = v_fc_mngmnt_type,
                       fc_mngmnt_value = ROUND (v_fc_mngmnt_value, v_rnd),
                       fc_rein_tax_type = v_fc_rein_tax_type,
                       fc_rein_tax_value = ROUND (v_fc_rein_tax_value, v_rnd),
                       fc_mngmnt_amt = v_management_fee,
                       fc_rein_tax_amt = ROUND (v_facre_rein_tax, v_rnd),
                       fc_override_prem = ROUND (v_fc_override_prem, v_rnd),
                       fc_override_type = v_fc_override_type,
                       fc_override_value = ROUND (v_fc_override_value, v_rnd),
                       fc_override_prem_amt = ROUND (v_override_prem, v_rnd),
                       fc_whtx_rate = v_wthtx_rate,
                       fc_whtx_amt = ROUND (v_whtx_amt, v_rnd)
                 WHERE fc_code = v_fc_code;
            ELSIF v_add_edit = 'D'
            THEN
                BEGIN
                    SELECT fc_facre_type
                      INTO vfacretype
                      FROM gin_facre_cessions
                     WHERE fc_code = v_fc_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error determining facultative type.');
                END;

                --            IF vfacretype = 'O'
                --            THEN
                --               raise_error ('Cannot delete a facultative obligatory treaty..');
                --            END IF;
                -- THIS IS A WAY AROUND DUE TO UNABLE TO EDIT FACRE OBJ FROM THE SCREEN. ENABLE WHEN THE SCREEN IS READY. SOLOMON
                DELETE gin_facre_cessions
                 WHERE fc_code = v_fc_code;       -- AND fc_facre_type != 'O';
            END IF;
        --commit;
        END LOOP;
    END;



    --   PROCEDURE save_pol_risk_ri_dtls (
    --      v_prrd_code            IN   NUMBER,
    --      v_gross_cmp_ret        IN   NUMBER,
    --      v_excess_amt           IN   NUMBER,
    --      v_excess_pct           IN   NUMBER,
    --      v_max_exposure         IN   NUMBER,
    --      v_eml_pct              IN   NUMBER,
    --      v_special_retn         IN   NUMBER,
    --      v_facoblig_excess      IN   NUMBER,
    --      v_chk_oblig            IN   VARCHAR2,
    --      v_cede_pool            IN   VARCHAR2,
    --      v_gross_cmp_ret_type   IN   VARCHAR2,
    --      v_special_retn_type    IN   VARCHAR2
    --   )
    --   IS
    --      v_ipu_reinsure_amt      NUMBER;
    --      v_ipu_code              NUMBER;
    --      v_ipu_max_exposure      NUMBER;
    --      v_ipu_value             NUMBER;
    --      v_ipu_escalation_rate   NUMBER;
    --      v_reinsure_amt          NUMBER;
    --      v_excess                NUMBER;
    --      v_tran_no               NUMBER;
    --      v_batch_no              NUMBER;
    --      vexcesspct              NUMBER;
    --      v_avail_fulc_bal        NUMBER;
    --      v_ret_amt               NUMBER;
    --      v_chk_oblig_param       VARCHAR2 (2);
    --     v_eml_calc_method VARCHAR2(2) :='RT';
    --     v_comp_ret_edited  VARCHAR2(1);
    --
    --    v_ipu_uw_yr            NUMBER;
    --    v_ipu_sec_scl_code            NUMBER;
    --    v_cur_code            NUMBER;
    --    v_ipu_rc_code            NUMBER;
    --
    --   BEGIN
    --      --RAISE_ERROR('v_excess_pct='||v_excess_pct||';'||v_excess_amt);
    --      SELECT prrd_ipu_code, prrd_tran_no, prrd_avail_fulc_bal
    --        INTO v_ipu_code, v_tran_no, v_avail_fulc_bal
    --        FROM gin_policy_risk_ri_dtls
    --       WHERE prrd_code = v_prrd_code;

    --      -- del_all_cessions(v_tran_no);
    --      SELECT NVL (ipu_max_exposure, ipu_value), ipu_reinsure_amt, ipu_value,
    --             ipu_escalation_rate, ipu_pol_batch_no,
    --             ipu_uw_yr, ipu_sec_scl_code, pol_cur_code,ipu_rc_code
    --        INTO v_ipu_max_exposure, v_ipu_reinsure_amt, v_ipu_value,
    --             v_ipu_escalation_rate, v_batch_no,
    --             v_ipu_uw_yr, v_ipu_sec_scl_code, v_cur_code, v_ipu_rc_code
    --        FROM gin_insured_property_unds,gin_policies
    --       WHERE ipu_code = v_ipu_code
    --       and pol_batch_no =ipu_pol_batch_no;

    --      -- call_pop_treaties(v_batch_no);
    --      IF NVL (v_max_exposure, 0) != 0
    --      THEN
    --         v_ipu_max_exposure := v_max_exposure;
    --      END IF;

    --      IF NVL (v_ipu_max_exposure, 0) < 0
    --      THEN
    --         raise_error ('Max exposure can not be less than zero.');
    --      ELSIF NVL (v_ipu_max_exposure, 0) > v_ipu_value
    --      THEN
    --         NULL;
    --      --raise_error ('Max exposure can not be more than the risk value...');
    --      END IF;

    --      v_reinsure_amt := v_ipu_reinsure_amt;

    --      IF NVL (v_eml_pct, 0) > 0
    --      THEN
    --       IF v_eml_calc_method = 'SA' THEN
    --             v_reinsure_amt :=  NVL (v_ipu_max_exposure, 0) * NVL (v_eml_pct, 0)  / 100;
    --       ELSIF  v_eml_calc_method = 'RT' THEN
    --            v_ret_amt := v_gross_cmp_ret/NVL (v_eml_pct, 0)*100;
    --       END IF;
    --      -- * ((100 + NVL (v_ipu_escalation_rate, 0)) / 100);
    --      END IF;
    ----RAISE_ERROR(v_ret_amt||';'||v_eml_pct||';'||v_gross_cmp_ret);
    --      IF NVL (v_excess_amt, 0) = 0 AND NVL (v_excess_pct, 0) = 0
    --      THEN
    --         v_excess := 0;
    --      ELSIF NVL (v_excess_amt, 0) != 0
    --      THEN
    --         v_excess := v_excess_amt;
    --      ELSIF NVL (v_excess_pct, 0) != 0
    --      THEN
    --         v_excess := ROUND (NVL (v_excess_pct, 0) / 100 * v_reinsure_amt);
    --      END IF;

    --      --RAISE_ERROR('v_facoblig_excess ='||v_facoblig_excess);
    --      IF NVL (v_reinsure_amt, 0) = 0 THEN
    --         vexcesspct := 0;
    --      ELSE
    --         vexcesspct :=  ROUND (  NVL (v_excess, v_avail_fulc_bal)   / NVL (v_reinsure_amt, 0) * 100,   4 );
    --      END IF;

    ----raise_error(vexcesspct);
    --     IF  v_eml_calc_method <> 'RT' OR  (v_eml_calc_method = 'RT' AND NVL (v_eml_pct, 0)  =100 ) THEN
    --          IF v_gross_cmp_ret_type NOT IN ('P', 'A') THEN
    --             raise_error ('Specify retention type..');
    --          ELSIF v_gross_cmp_ret_type = 'P'
    --          THEN
    --             IF v_gross_cmp_ret NOT BETWEEN 0 AND 100
    --             THEN
    --                raise_error ('Retention percentage must be between 0 and 100 %');
    --             END IF;
    --             v_ret_amt := ROUND (v_gross_cmp_ret * NVL (v_reinsure_amt, 0) / 100);
    --          --v_ret_amt := v_gross_cmp_ret;
    --          ELSE
    --             v_ret_amt := v_gross_cmp_ret;
    --          END IF;
    --       END IF;
    ----RAISE_ERROR(v_ret_amt||';'||v_eml_pct||';'||v_gross_cmp_ret);
    --       -- need to manage the following field seriously
    --      -- prrd_cede_pool
    --      -- prrd_facoblig_alloc_chk
    --      IF NVL (v_facoblig_excess, 0) > 0
    --      THEN
    --         v_chk_oblig_param := 'Y';
    --      ELSE
    --         v_chk_oblig_param := v_chk_oblig;
    --      END IF;
    --
    --    IF NVL(v_ret_amt ,0) <> NVL(get_scl_uwyr_g_ret (v_ipu_uw_yr, v_ipu_sec_scl_code, v_cur_code, v_ipu_rc_code),0) THEN
    --     v_comp_ret_edited := 'Y';
    --    ELSE
    --     v_comp_ret_edited := 'N';
    --    END IF;
    ----raise_error(vexcesspct||';'||v_excess||';'||v_prrd_code||';'||v_ret_amt||';'||v_gross_cmp_ret);
    --      UPDATE gin_policy_risk_ri_dtls
    --         SET prrd_gross_comp_retention = v_ret_amt,
    --             --NVL (v_ret_amt, prrd_gross_comp_retention),
    --             prrd_comp_retention = v_ret_amt,
    --             prrd_avail_fulc_bal = NVL (v_excess, v_avail_fulc_bal),
    --             prrd_excess_pct = vexcesspct,
    --             prrd_com_retention_rate = v_gross_cmp_ret,
    --             prrd_comp_net_rate = v_gross_cmp_ret,
    --             --PRRD_FACOBLIG_EXCESS=v_facoblig_excess,
    --             prrd_facoblig_user_excess = v_facoblig_excess,
    --             prrd_facoblig_alloc_chk = v_chk_oblig_param,      -- v_chk_oblig,
    --             prrd_cede_pool = v_cede_pool,
    --             prrd_gross_cmp_ret_type = v_gross_cmp_ret_type,
    --             prrd_comp_ret_edited=v_comp_ret_edited
    --       WHERE prrd_code = v_prrd_code;

    --      UPDATE gin_insured_property_unds
    --         SET ipu_reinsure_amt = v_reinsure_amt,
    --             ipu_max_exposure = v_max_exposure,
    --             ipu_pol_est_max_loss = v_eml_pct,
    --             ipu_overrideride_ret_type = v_special_retn_type,
    --             -- introduce a parameter column in this table to determine if ipu_override_ri_retention is SI or PREM, premium has to be evaluated against the gross premium on the risk
    --             ipu_override_ri_retention = v_special_retn,
    --             ipu_eml_based_on = 'R'
    --       WHERE ipu_code = v_ipu_code;
    ----   EXCEPTION
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_error ('Error Updating Policy Risk RI Details...');
    --   END;

    PROCEDURE save_pol_risk_ri_dtls (
    v_prrd_code            IN NUMBER,
    v_gross_cmp_ret        IN NUMBER,
    v_excess_amt           IN NUMBER,
    v_excess_pct           IN NUMBER,
    v_max_exposure         IN NUMBER,
    v_eml_pct              IN NUMBER,
    v_special_retn         IN NUMBER,
    v_facoblig_excess      IN NUMBER,
    v_chk_oblig            IN VARCHAR2 DEFAULT NULL,
    v_cede_pool            IN VARCHAR2 DEFAULT NULL,
    v_gross_cmp_ret_type   IN VARCHAR2 DEFAULT NULL,
    v_special_retn_type    IN VARCHAR2 DEFAULT NULL)
IS
    v_ipu_reinsure_amt      NUMBER;
    v_ipu_code              NUMBER;
    v_ipu_max_exposure      NUMBER;
    v_ipu_value             NUMBER;
    v_ipu_escalation_rate   NUMBER;
    v_reinsure_amt          NUMBER;
    v_excess                NUMBER;
    v_tran_no               NUMBER;
    v_batch_no              NUMBER;
    vexcesspct              NUMBER;
    v_avail_fulc_bal        NUMBER;
    v_ret_amt               NUMBER;
    v_chk_oblig_param       VARCHAR2 (2);
    v_eml_calc_method       VARCHAR2 (2) := 'RT';
    v_comp_ret_edited       VARCHAR2 (1);

    v_ipu_uw_yr             NUMBER;
    v_ipu_sec_scl_code      NUMBER;
    v_cur_code              NUMBER;
    v_ipu_rc_code           NUMBER;
    v_gross_rate            NUMBER;
    v_bcur_symbol           VARCHAR2 (10);
    v_bcur_code             NUMBER;
    v_rein_cur_param        VARCHAR2 (1);
    v_retention_limit       NUMBER;
    v_cnt_top_loc           NUMBER;
    v_cnt_group             NUMBER;
    v_top_loc_si            NUMBER;
    v_pol_si                NUMBER;
BEGIN
    --      RAISE_ERROR('v_excess_pct='||v_excess_pct||';'||'v_eml_pct'||v_eml_pct);
    SELECT prrd_ipu_code, prrd_tran_no, prrd_avail_fulc_bal
      INTO v_ipu_code, v_tran_no, v_avail_fulc_bal
      FROM gin_policy_risk_ri_dtls
     WHERE prrd_code = v_prrd_code;

    -- del_all_cessions(v_tran_no);
    SELECT NVL (ipu_max_exposure, ipu_value),
           ipu_reinsure_amt,
           ipu_value,
           ipu_escalation_rate,
           ipu_pol_batch_no,
           ipu_uw_yr,
           ipu_sec_scl_code,
           pol_cur_code,
           ipu_rc_code
      INTO v_ipu_max_exposure,
           v_ipu_reinsure_amt,
           v_ipu_value,
           v_ipu_escalation_rate,
           v_batch_no,
           v_ipu_uw_yr,
           v_ipu_sec_scl_code,
           v_cur_code,
           v_ipu_rc_code
      FROM gin_insured_property_unds, gin_policies
     WHERE ipu_code = v_ipu_code AND pol_batch_no = ipu_pol_batch_no;

    -- call_pop_treaties(v_batch_no);
    BEGIN
        SELECT gin_parameters_pkg.get_param_varchar (
                   'REINS_IN_BASE_CURRENCY')
          INTO v_rein_cur_param
          FROM DUAL;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            v_rein_cur_param := 'N';
        WHEN OTHERS
        THEN
            raise_error ('Error fetching Treaty  parameter...');
    END;

    IF NVL (v_max_exposure, 0) != 0
    THEN
        v_ipu_max_exposure := v_max_exposure;
    END IF;

    IF NVL (v_ipu_max_exposure, 0) < 0
    THEN
        raise_error ('Max exposure can not be less than zero.');
    ELSIF NVL (v_ipu_max_exposure, 0) > v_ipu_value
    THEN
        NULL;
    --raise_error ('Max exposure can not be more than the risk value...');
    END IF;

    v_reinsure_amt := v_ipu_reinsure_amt;

    IF NVL (v_eml_pct, 0) > 0
    THEN
        IF v_eml_calc_method = 'SA'
        THEN
            v_reinsure_amt :=
                NVL (v_ipu_max_exposure, 0) * NVL (v_eml_pct, 0) / 100;
        ELSIF v_eml_calc_method = 'RT'
        THEN
            v_ret_amt := v_gross_cmp_ret / NVL (v_eml_pct, 0) * 100;
        END IF;
    -- * ((100 + NVL (v_ipu_escalation_rate, 0)) / 100);
    END IF;

    --RAISE_ERROR(v_ret_amt||';'||v_eml_pct||';'||v_gross_cmp_ret);
    IF NVL (v_excess_amt, 0) = 0 AND NVL (v_excess_pct, 0) = 0
    THEN
        v_excess := 0;
    ELSIF NVL (v_excess_amt, 0) != 0
    THEN
        v_excess := v_excess_amt;
    ELSIF NVL (v_excess_pct, 0) != 0
    THEN
        v_excess := ROUND (NVL (v_excess_pct, 0) / 100 * v_reinsure_amt);
    END IF;

    --RAISE_ERROR('v_facoblig_excess ='||v_facoblig_excess);
    IF NVL (v_reinsure_amt, 0) = 0
    THEN
        vexcesspct := 0;
    ELSE
        vexcesspct :=
            ROUND (
                  NVL (v_excess, v_avail_fulc_bal)
                / NVL (v_reinsure_amt, 0)
                * 100,
                4);
    END IF;

    --raise_error(v_eml_pct||';'||v_gross_cmp_ret_type||';'||v_gross_cmp_ret);
    IF    v_eml_calc_method <> 'RT'
       OR (v_eml_calc_method = 'RT' AND NVL (v_eml_pct, 100) = 100)
    THEN
        IF v_gross_cmp_ret_type NOT IN ('P', 'A')
        THEN
            raise_error ('Specify retention type..');
        ELSIF v_gross_cmp_ret_type = 'P'
        THEN
            IF v_gross_cmp_ret NOT BETWEEN 0 AND 100
            THEN
                raise_error (
                    'Retention percentage must be between 0 and 100 %');
            END IF;

            v_ret_amt :=
                ROUND (v_gross_cmp_ret * NVL (v_reinsure_amt, 0) / 100, 4);
            v_gross_rate := v_gross_cmp_ret;
        --v_ret_amt := v_gross_cmp_ret;
        ELSE
            v_ret_amt := v_gross_cmp_ret;
            v_gross_rate :=
                ROUND (v_gross_cmp_ret / NVL (v_reinsure_amt, 0) * 100, 4);
        END IF;
    END IF;

    --RAISE_ERROR(v_ret_amt||';'||v_eml_pct||';'||v_gross_cmp_ret||';'||v_gross_rate);
    -- need to manage the following field seriously
    -- prrd_cede_pool
    -- prrd_facoblig_alloc_chk
    IF NVL (v_facoblig_excess, 0) > 0
    THEN
        v_chk_oblig_param := 'Y';
    ELSE
        v_chk_oblig_param := v_chk_oblig;
    END IF;

    v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

    --   raise_error(v_ret_amt||';'||get_scl_uwyr_g_ret (v_ipu_uw_yr, v_ipu_sec_scl_code, v_bcur_code, v_ipu_rc_code));
    IF v_bcur_code <> v_cur_code AND v_rein_cur_param = 'Y'
    THEN
        v_retention_limit :=
            get_scl_uwyr_g_ret (v_ipu_uw_yr,
                                v_ipu_sec_scl_code,
                                v_bcur_code,
                                v_ipu_rc_code);
    ELSE
        v_retention_limit :=
            get_scl_uwyr_g_ret (v_ipu_uw_yr,
                                v_ipu_sec_scl_code,
                                v_cur_code,
                                v_ipu_rc_code);
    END IF;

    IF NVL (v_ret_amt, 0) <> NVL (v_retention_limit, 0)
    THEN
        v_comp_ret_edited := 'Y';
    ELSE
        v_comp_ret_edited := 'N';
    END IF;

    --raise_error(vexcesspct||';'||v_excess||';'||v_prrd_code||';'||v_ret_amt||';'||v_gross_cmp_ret||';'||v_gross_rate||';'||v_ret_amt);
    /****EML TOP LOCATION  FUNCTIONALITY***/
    ---TOP LOCATION AND GROUPED RISKS
    SELECT SUM (
               CASE
                   WHEN NVL (IPU_TOP_LOCATION_SI, 'N') = 'Y' THEN 1
                   ELSE 0
               END),
           SUM (CASE WHEN ipu_relr_code IS NOT NULL THEN 1 ELSE 0 END),
           SUM (
               CASE
                   WHEN NVL (IPU_TOP_LOCATION_SI, 'N') = 'Y'
                   THEN
                       NVL (ipu_reinsure_amt, 0) * pol_cur_rate
                   ELSE
                       0
               END),
           SUM (NVL (ipu_reinsure_amt, 0) * pol_cur_rate)
      INTO v_cnt_top_loc,
           v_cnt_group,
           v_top_loc_si,
           v_pol_si
      FROM GIN_POLICY_aCTIVE_RISKS, GIN_POLICIES, GIN_INSURED_PROPERTY_UNDS
     WHERE     POL_BATCH_NO = IPU_POL_BATCH_NO
           AND POLAR_IPU_CODE = IPU_CODE
           AND POLAR_POL_BATCH_NO = v_batch_no;

    IF NOT (   (NVL (v_cnt_top_loc, 0) != 0 AND NVL (v_cnt_group, 0) != 0)
            OR NVL (v_cnt_top_loc, 0) > 1)
    THEN
        IF NVL (v_cnt_top_loc, 0) > 1
        THEN
            IF     (NVL (v_top_loc_si, 0) > NVL (v_ret_amt, 0))
               AND NVL (v_eml_pct, 0) < 100
            THEN
                RAISE_ERROR (
                    'The Top Location cannot be greater than the retention....');
            END IF;
        END IF;
    END IF;

    UPDATE gin_policy_risk_ri_dtls
       SET prrd_gross_comp_retention = v_ret_amt,
           --NVL (v_ret_amt, prrd_gross_comp_retention),
           prrd_comp_retention = v_ret_amt,
           prrd_avail_fulc_bal = NVL (v_excess, v_avail_fulc_bal),
           prrd_excess_pct = vexcesspct,
           prrd_com_retention_rate = v_gross_rate,         -- v_gross_cmp_ret,
           prrd_comp_net_rate = v_gross_rate,               --v_gross_cmp_ret,
           --PRRD_FACOBLIG_EXCESS=v_facoblig_excess,
           prrd_facoblig_user_excess = v_facoblig_excess,
           prrd_facoblig_alloc_chk = v_chk_oblig_param,        -- v_chk_oblig,
           prrd_cede_pool = v_cede_pool,
           prrd_gross_cmp_ret_type = v_gross_cmp_ret_type,
           prrd_comp_ret_edited = v_comp_ret_edited,
           prrd_net_prem = 0
     WHERE prrd_code = v_prrd_code;

    UPDATE gin_insured_property_unds
       SET ipu_reinsure_amt = v_reinsure_amt,
           ipu_max_exposure = v_max_exposure,
           ipu_pol_est_max_loss = v_eml_pct,
           ipu_overrideride_ret_type = v_special_retn_type,
           -- introduce a parameter column in this table to determine if ipu_override_ri_retention is SI or PREM, premium has to be evaluated against the gross premium on the risk
           ipu_override_ri_retention = v_special_retn,
           ipu_eml_based_on = 'R'
     WHERE ipu_code = v_ipu_code;
--   EXCEPTION
--      WHEN OTHERS
--      THEN
--         raise_error ('Error Updating Policy Risk RI Details...');
END;

    PROCEDURE edit_treaty_rate (v_ptotr_code   IN NUMBER,
                                v_protr_rate   IN NUMBER,
                                v_remarks      IN VARCHAR2)
    IS
    BEGIN
        IF v_remarks IS NULL
        THEN
            raise_error ('Must provide a reason for the rate change.');
        END IF;

        UPDATE gin_policy_rein_risk_details
           SET ptotr_rate = v_protr_rate, ptotr_remarks = v_remarks
         WHERE ptotr_code = v_ptotr_code;
    END;

    PROCEDURE reinsure_pool_risks (
        v_batch_no        IN NUMBER,
        v_tran_no         IN NUMBER,
        v_tran_type       IN VARCHAR2,
        v_ri_edit_trans   IN BOOLEAN DEFAULT FALSE)
    IS
        v_cnt                    NUMBER := 0;
        v_trt_uwyr               NUMBER := NULL;
        cnt                      NUMBER := 1;
        v_retention_amt          NUMBER := 0;
        v_facre_rate             NUMBER := 0;
        v_errmsg                 VARCHAR2 (200);
        v_zero_devide            EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        al_id                    NUMBER;
        v_group_si               NUMBER := 0;
        v_grp_flag               BOOLEAN := FALSE;
        v_grp_pct                NUMBER := 0;
        v_grp_tot_ret            NUMBER := 0;
        v_reinsure_amt           NUMBER := 0;
        v_exhange_rate           NUMBER := 1;
        --v_prprd_code             number;
        v_facre_amt              NUMBER := 0;
        v_facre_excess           NUMBER := 0;
        v_arrngmt_defined        NUMBER := 0;
        v_msg                    VARCHAR2 (200);
        v_arrangement            NUMBER;
        v_arrangement_type       VARCHAR2 (10);
        v_old_grs_ret_rate       NUMBER := 0;
        v_net_ret_rate           NUMBER := 0;
        v_retention_limit        NUMBER := 0;
        v_no_ri_si               VARCHAR2 (2);
        v_dummy                  NUMBER := 0;
        v_retention_type         VARCHAR2 (1) := NULL;
        v_bind_max_exp           NUMBER := 0;
        v_load_status            VARCHAR2 (2);
        v_reinsure_wot_ri_prog   VARCHAR2 (2);
        v_unadjusted_ri_tran     NUMBER := 0;
        v_as_uwyr                NUMBER;
        v_dc_pol_loaded          VARCHAR2 (3);
        v_eq_prem                NUMBER := 0;
        v_rnd                    NUMBER := 0;
        v_bcur_rnd               NUMBER := 0;
        v_bcur_code              NUMBER;
        v_bcur_symbol            VARCHAR2 (15);
        v_trt_amt                NUMBER;
        v_pool_ret_amt           NUMBER;
        v_pool_amt               NUMBER;
        v_pool_com_amt           NUMBER;
        v_pool_vat_amt           NUMBER;
        --v_prrd_code              number;
        --v_cede_pool              varchar2 (1);
        v_pool_si                NUMBER;
        v_pool_rate              NUMBER;
        v_prprd_refund_prem      NUMBER;
        v_prprd_refund_comm      NUMBER;
        v_prprd_prev_prem_amt    NUMBER;
        v_prprd_prev_comm_rate   NUMBER;
        v_prprd_prev_rate        NUMBER;
        v_gross_pool_si          NUMBER;
        v_max_si                 NUMBER;
        v_pool_si_rate           NUMBER;

        CURSOR cur_pol IS
            SELECT pol_policy_status,
                   pol_binder_policy,
                   pol_cur_code,
                   pol_cur_symbol,
                   pol_prev_batch_no,
                   pol_loaded
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_all_risks (vpolloaded IN VARCHAR2)
        IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     ipu_comp_retention,
                     ipu_pol_est_max_loss,
                     ipu_avail_fulc_bal,
                     ipu_endos_diff_amt,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_reinsure_amt,
                     ipu_facre_amount,
                     ipu_prev_ipu_code,
                     ipu_relr_code,
                     ipu_eff_wef,
                     ipu_id,
                     ipu_uw_yr,
                     ipu_inception_uwyr,
                     ipu_rc_code,
                     ipu_bind_code,
                     ipu_max_exposure,
                     ipu_earthqke_prem_diff,
                     ipu_covt_code,
                     prrd_comp_net_rate,
                     prrd_ri_prem,
                     prrd_grp_comp_net_ret,
                     prrd_prev_prrd_code,
                     prrd_cede_pool,
                     prrd_code
                FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
               WHERE     ipu_pol_batch_no = v_batch_no
                     AND prrd_ipu_code = ipu_code
                     AND prrd_tran_no = v_tran_no
            -- AND DECODE (NVL (vpolloaded, 'N'), 'N', ipu_reinsured, 1) = 1
            ORDER BY 1;

        CURSOR cur_treaties (vprrdcode IN NUMBER)
        IS
            SELECT *
              FROM gin_pol_rein_pool_risk_details
             WHERE prprd_prrd_code = vprrdcode;
    BEGIN
        --v_exhange_rate := get_exchange_rate(v_cur_code,v_base_cur_code);
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);
        DBMS_OUTPUT.put_line (1);

        FOR cur_pol_rec IN cur_pol
        LOOP
            DBMS_OUTPUT.put_line (2);
            v_exhange_rate :=
                get_currexch_rate (cur_pol_rec.pol_cur_code,
                                   v_rnd,
                                   v_bcur_rnd);

            BEGIN
                SELECT NVL (pol_loaded, 'N')
                  INTO v_load_status
                  FROM gin_policies
                 WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_load_status := NVL (cur_pol_rec.pol_loaded, 'N');
            END;

            DBMS_OUTPUT.put_line (
                   cur_pol_rec.pol_loaded
                || '-'
                || v_tran_type
                || ';'
                || v_tran_no
                || ';'
                || v_batch_no);

            FOR cur_all_risks_rec IN cur_all_risks (cur_pol_rec.pol_loaded)
            LOOP
                -- RAISE_ERROR('IPUCODE='||cur_all_risks_rec.IPU_CODE);
                v_bind_max_exp := 0;

                IF     NVL (v_bind_max_exp, 0) = 0
                   AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'Y'
                THEN
                    DBMS_OUTPUT.put_line (4);
                    v_dummy := 0;

                    SELECT COUNT ('x')
                      INTO v_dummy
                      FROM gin_binder_details
                     WHERE     db_bind_code = cur_all_risks_rec.ipu_bind_code
                           AND db_scl_code =
                               cur_all_risks_rec.ipu_sec_scl_code;

                    IF NVL (v_dummy, 0) > 1
                    THEN
                        raise_error (
                            'Setup Error, Maximum accumulation defined more than once for this binder');
                    ELSIF NVL (v_dummy, 0) = 1
                    THEN
                        BEGIN
                            SELECT db_max_limit
                              INTO v_bind_max_exp
                              FROM gin_binder_details
                             WHERE     db_bind_code =
                                       cur_all_risks_rec.ipu_bind_code
                                   AND db_scl_code =
                                       cur_all_risks_rec.ipu_sec_scl_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                                raise_error (
                                    'Unable to retrieve the maxmium exposure for the bordereaux scl');
                        END;
                    ELSIF NVL (v_dummy, 0) = 0
                    THEN
                        BEGIN
                            SELECT NVL (bind_max_exposure, 0)
                              INTO v_bind_max_exp
                              FROM gin_binders
                             WHERE bind_code =
                                   cur_all_risks_rec.ipu_bind_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                                raise_error (
                                    'Unable to retrieve the maxmium exposure for the bordereaux');
                        END;
                    END IF;

                    --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                    IF     NVL (v_bind_max_exp, 0) > 0
                       AND NVL (v_bind_max_exp, 0) <
                           NVL (cur_all_risks_rec.ipu_max_exposure, 0)
                    THEN
                        raise_error (
                               'The maximum exposure amount for the risk '
                            || cur_all_risks_rec.ipu_property_id
                            || ' is greater than the allowed limit of '
                            || v_bind_max_exp);
                    END IF;
                END IF;

                DBMS_OUTPUT.put_line (5);

                IF (   SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)) IN
                           (1, 0, -1)
                    OR NVL (v_load_status, 'N') = 'Y')
                THEN
                    BEGIN
                        v_no_ri_si := NULL;

                        SELECT NVL (scl_no_ri_si, 'N'),
                               NVL (scl_reinsure_wot_ri_prog, 'N')
                          INTO v_no_ri_si, v_reinsure_wot_ri_prog
                          FROM gin_sub_classes
                         WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Unable to retrieve RI SI status for the sub class '
                                || cur_all_risks_rec.ipu_sec_scl_code);
                    END;

                    IF     NVL (v_no_ri_si, 'N') = 'N'
                       AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
                    THEN
                        raise_error (
                               'No reinsure amount  '
                            || cur_all_risks_rec.ipu_item_desc
                            || ';ipu_sec_scl_code='
                            || cur_all_risks_rec.ipu_sec_scl_code);
                    END IF;

                    -- open arrangements cursor
                    --reserve facre sessions if its not a new business or renewal
                    FOR r IN cur_treaties (cur_all_risks_rec.prrd_code)
                    LOOP
                        BEGIN
                            SELECT scrpr_max_limit
                              INTO v_max_si
                              FROM gin_subcl_cover_ri_pool_rates
                             WHERE scrpr_code = r.prprd_scrpr_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to fetch pool maximum SI limit...');
                        END;

                        --    raise_error('v_trt_amt='||v_trt_amt||' prrd_comp_net_rate='||cur_all_risks_rec.prrd_comp_net_rate||' prrd_ri_prem='||cur_all_risks_rec.prrd_ri_prem);
                        v_trt_amt :=
                            ROUND (
                                  NVL (cur_all_risks_rec.prrd_comp_net_rate,
                                       0)
                                * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                                / 100,
                                v_rnd);

                        IF NVL (cur_all_risks_rec.prrd_cede_pool, 'Y') = 'Y'
                        THEN
                            v_pool_rate := NVL (r.prprd_rein_pool_rate, 0);

                            IF NVL (v_pool_rate, 0) = 0
                            THEN
                                SELECT scrpr_rein_rate
                                  INTO v_pool_rate
                                  FROM gin_subcl_cover_ri_pool_rates
                                 WHERE scrpr_code = r.prprd_scrpr_code;
                            END IF;

                            v_gross_pool_si :=
                                ROUND (
                                      NVL (
                                          cur_all_risks_rec.ipu_reinsure_amt,
                                          cur_all_risks_rec.ipu_max_exposure)
                                    * v_pool_rate
                                    / 100,
                                    v_rnd);
                            v_reinsure_amt :=
                                ROUND (
                                    NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                         cur_all_risks_rec.ipu_max_exposure),
                                    v_rnd);

                            IF v_gross_pool_si >= v_max_si
                            THEN
                                v_pool_si := v_max_si;

                                -- v_pool_amt :=(v_pool_si/v_reinsure_amt)*ROUND(NVL(cur_all_risks_rec.ipu_endos_diff_amt,0)* NVL(v_pool_rate,0)/100,v_rnd);
                                IF NVL (v_reinsure_amt, 0) = 0
                                THEN
                                    v_pool_si_rate := v_pool_rate / 100;
                                ELSE
                                    v_pool_si_rate :=
                                        (v_pool_si / v_reinsure_amt);
                                END IF;

                                v_pool_amt :=
                                      v_pool_si_rate
                                    * ROUND (
                                          NVL (
                                              cur_all_risks_rec.ipu_endos_diff_amt,
                                              0),
                                          v_rnd);
                                v_pool_rate := v_pool_si_rate * 100;
                            ELSE
                                v_pool_si := v_gross_pool_si;

                                --v_pool_amt :=(v_pool_si/v_reinsure_amt)*ROUND(NVL(cur_all_risks_rec.ipu_endos_diff_amt,0)* NVL(v_pool_rate,0)/100,v_rnd);
                                IF NVL (v_reinsure_amt, 0) = 0
                                THEN
                                    v_pool_si_rate := v_pool_rate / 100;
                                ELSE
                                    v_pool_si_rate :=
                                        (v_pool_si / v_reinsure_amt);
                                END IF;

                                v_pool_amt :=
                                      v_pool_si_rate
                                    * ROUND (
                                          NVL (
                                              cur_all_risks_rec.ipu_endos_diff_amt,
                                              0),
                                          v_rnd);
                            --v_pool_amt :=ROUND(NVL(cur_all_risks_rec.ipu_endos_diff_amt,0)* NVL(v_pool_rate,0)/100,v_rnd);
                            END IF;
                        ELSE
                            v_pool_amt := 0;
                            v_pool_si := 0;
                            v_pool_rate := 0;
                        END IF;

                        -- RAISE_ERROR('HERE=');
                        v_pool_ret_amt :=
                              NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)
                            - NVL (v_pool_amt, 0);
                        v_pool_com_amt :=
                            ROUND (
                                  NVL (v_pool_amt, 0)
                                * NVL (r.prprd_rein_pool_comm_rate, 0)
                                / 100,
                                v_rnd);
                        v_pool_vat_amt :=
                            ROUND (
                                  NVL (v_pool_com_amt, 0)
                                * NVL (r.prprd_rein_pool_vat_rate, 0)
                                / 100,
                                v_rnd);
                        DBMS_OUTPUT.put_line ('v_pool_si=' || v_pool_si);

                        IF v_ri_edit_trans
                        THEN
                            BEGIN
                                SELECT prprd_rein_pool_rate,
                                       prprd_rein_pool_comm_rate,
                                       prprd_rein_pool_amt
                                  INTO v_prprd_prev_rate,
                                       v_prprd_prev_comm_rate,
                                       v_prprd_prev_prem_amt
                                  FROM gin_pol_rein_pool_risk_details
                                 WHERE     prprd_ipu_code =
                                           cur_all_risks_rec.ipu_code
                                       AND prprd_prrd_code =
                                           cur_all_risks_rec.prrd_prev_prrd_code
                                       AND prprd_pta_code = r.prprd_pta_code;
                            EXCEPTION
                                WHEN NO_DATA_FOUND
                                THEN
                                    NULL;
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Error getting previous pool cessions..');
                            END;

                            v_prprd_refund_prem :=
                                ROUND (
                                      v_prprd_prev_rate
                                    / 100
                                    * NVL (
                                          cur_all_risks_rec.ipu_endos_diff_amt,
                                          0));
                            v_prprd_refund_comm :=
                                ROUND (
                                      v_prprd_refund_prem
                                    * v_prprd_prev_comm_rate
                                    / 100);
                        END IF;

                        BEGIN
                            --PRRD_AVAIL_FULC_BAL =ROUND(DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,v_facre_rate * (DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) /100))),
                            --PRRD_EXCESS_PCT        =ROUND(v_facre_rate,4),
                            DBMS_OUTPUT.put_line (
                                'update v_retention_amt=' || v_retention_amt);

                            UPDATE gin_pol_rein_pool_risk_details
                               SET prprd_risk_prem_amt =
                                       cur_all_risks_rec.ipu_endos_diff_amt,
                                   prprd_risk_own_ret_amt =
                                       NVL (v_pool_ret_amt, 0),
                                   prprd_rein_pool_amt = NVL (v_pool_amt, 0),
                                   --                                  prprd_rein_pool_comm_rate =
                                   --                                                    NVL (i.scrpr_comm_rate, 0),
                                   prprd_rein_pool_rate = v_pool_rate,
                                   --                                  prprd_rein_pool_vat_rate =
                                   --                                                NVL (i.scrpr_comm_vat_rate, 0),
                                   prprd_rein_pool_comm_amt =
                                       NVL (v_pool_com_amt, 0),
                                   prprd_rein_pool_vat_amt =
                                       NVL (v_pool_vat_amt, 0),
                                   prprd_risk_trt_own_ret_amt =
                                       NVL (v_trt_amt, 0),
                                   prprd_refund_prem = v_prprd_refund_prem,
                                   prprd_refund_comm = v_prprd_refund_comm,
                                   prprd_prev_pool_amt =
                                       v_prprd_prev_prem_amt,
                                   prprd_prev_pool_comm_rate =
                                       v_prprd_prev_comm_rate,
                                   prprd_prev_pool_rate = v_prprd_prev_rate,
                                   prprd_pool_si = v_pool_si
                             WHERE     prprd_ipu_code =
                                       cur_all_risks_rec.ipu_code
                                   AND prprd_code = r.prprd_code
                                   AND prprd_ggt_tran_no = v_tran_no;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to update the risk RI details, ...');
                        END;
                    END LOOP;
                END IF;
            END LOOP;
        END LOOP;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL...');
    END;

    PROCEDURE pool_reinsure_prc (v_pol_batch_no       IN NUMBER,
                                 v_rein_trans_param   IN VARCHAR2)
    IS
        v_trans_no       NUMBER;
        v_tran_code      VARCHAR2 (60);
        v_loaded         VARCHAR2 (1) := 'N';
        v_base_cur       NUMBER;
        v_cur_sht_desc   VARCHAR2 (200);

        CURSOR policies_cursor IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;
    BEGIN
        BEGIN
            SELECT ggt_trans_no
              INTO v_trans_no
              FROM gin_gis_transactions
             WHERE     ggt_pol_batch_no = v_pol_batch_no
                   AND ggt_uw_clm_tran = 'U';
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error retrieving transaction number..');
        END;

        BEGIN
            SELECT ggt_btr_trans_code
              INTO v_tran_code
              FROM gin_gis_transactions
             WHERE ggt_trans_no = v_trans_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
        END;

        IF v_tran_code != 'CO'
        THEN
            BEGIN
                SELECT NVL (pol_loaded, 'N')
                  INTO v_loaded
                  FROM gin_policies
                 WHERE pol_batch_no = v_pol_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_when_others (
                        'Error determining if the previous transaction is a loaded transactions..');
            END;

            FOR policies_rec IN policies_cursor
            LOOP
                IF    policies_rec.pol_authosrised != 'A'
                   OR NVL (v_loaded, 'N') = 'Y'
                   OR     NVL (policies_rec.pol_reinsured, 'N') = 'N'
                      AND v_rein_trans_param = 'Y'
                THEN
                    BEGIN
                        SELECT org_cur_code, cur_symbol
                          INTO v_base_cur, v_cur_sht_desc
                          FROM tqc_organizations, tqc_currencies
                         WHERE cur_code = org_cur_code AND org_code = 2;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                'The base currency has not been defined...');
                        WHEN TOO_MANY_ROWS
                        THEN
                            raise_error (
                                'More than one company records have been defined in the company parameters...ensure that only one company record is defined...');
                    END;

                    IF tqc_parameters_pkg.get_org_type (37) IN ('INS')
                    THEN
                        BEGIN
                            gis_ri_procedures.reinsure_pool_risks (
                                policies_rec.pol_batch_no,
                                v_trans_no,
                                v_tran_code,
                                FALSE);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Failed to reinsure risks that Participate in Reinsurance Pool..');
                        END;
                    END IF;
                ELSE
                    NULL;
                --               raise_error
                --                  ('This Policy Has Already Been Processed And Authorized ...You Cannot Process It Again...'
                --                  );
                END IF;
            END LOOP;
        END IF;
    END;

    FUNCTION get_scl_uwyr_g_ret (v_uw_yr      IN NUMBER,
                                 v_scl_code   IN NUMBER,
                                 v_cur_code   IN NUMBER,
                                 v_rc_code    IN NUMBER DEFAULT NULL)
        RETURN NUMBER
    IS
        v_retention_amt        NUMBER := 0;
        v_tcc_retention_type   VARCHAR2 (5);
        v_exhange_rate         NUMBER := 1;
        v_rnd                  NUMBER := 0;
        v_bcur_rnd             NUMBER := 0;
        v_bcur_code            NUMBER;
        v_bcur_symbol          VARCHAR2 (15);
        v_trt_cur_code         NUMBER;
        v_trt_cur_rate         NUMBER;
        v_as_code              NUMBER;
        v_fac_oblig_limit      NUMBER;
    BEGIN
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);
        v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
        v_retention_amt := 0;

        IF v_rc_code IS NOT NULL
        THEN
            BEGIN
                SELECT tcc_retention_limit, tcc_retention_type, ta_cur_code
                  INTO v_retention_amt, v_tcc_retention_type, v_trt_cur_code
                  FROM gin_trt_class_categories,
                       gin_arrangement_setups,
                       gin_treaty_arrangements
                 WHERE     tcc_as_code = as_code
                       AND as_ta_code = ta_code
                       AND tcc_scl_code = v_scl_code
                       AND as_uwyr = v_uw_yr
                       AND tcc_rc_code = v_rc_code
                       AND ta_cur_code = v_cur_code;

                IF v_tcc_retention_type = 'P'
                THEN
                    SELECT DISTINCT
                           clt_retention_limit * v_retention_amt / 100,
                           ta_cur_code
                      INTO v_retention_amt, v_trt_cur_code
                      FROM gin_class_treaties,
                           gin_arrangement_setups,
                           gin_treaty_arrangements
                     WHERE     as_ta_code = ta_code
                           AND clt_as_code = as_code
                           AND clt_scl_code = v_scl_code
                           AND as_uwyr = v_uw_yr
                           AND ta_cur_code = v_cur_code;
                END IF;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    SELECT DISTINCT clt_retention_limit, ta_cur_code
                      INTO v_retention_amt, v_trt_cur_code
                      FROM gin_class_treaties,
                           gin_arrangement_setups,
                           gin_treaty_arrangements
                     WHERE     as_ta_code = ta_code
                           AND clt_as_code = as_code
                           AND clt_scl_code = v_scl_code
                           AND as_uwyr = v_uw_yr
                           AND ta_cur_code = v_cur_code;
                WHEN OTHERS
                THEN
                    raise_error (
                           'Unable to retrieve risk class retention amount'
                        || ';'
                        || v_cur_code
                        || ';'
                        || v_uw_yr
                        || ';'
                        || v_scl_code);
            END;
        ELSE
            v_retention_amt := 0;

            BEGIN
                SELECT DISTINCT clt_retention_limit, ta_cur_code
                  INTO v_retention_amt, v_trt_cur_code
                  FROM gin_class_treaties,
                       gin_arrangement_setups,
                       gin_treaty_arrangements
                 WHERE     as_ta_code = ta_code
                       AND clt_as_code = as_code
                       AND clt_scl_code = v_scl_code
                       AND as_uwyr = v_uw_yr
                       AND ta_cur_code = v_cur_code;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_retention_amt := NULL;
                WHEN OTHERS
                THEN
                    raise_error (
                        'Unable to retrieve the arrangement retention limit');
            END;
        END IF;

        IF v_trt_cur_code != v_cur_code
        THEN
            IF v_bcur_code = v_trt_cur_code
            THEN
                v_retention_amt :=
                    ROUND (v_retention_amt / v_exhange_rate, v_rnd);
            ELSE
                v_trt_cur_rate :=
                    get_exchange_rate (v_trt_cur_code, v_bcur_code);
                v_retention_amt :=
                    ROUND (v_retention_amt * v_trt_cur_rate / v_exhange_rate,
                           v_rnd);
            END IF;
        ELSE
            v_retention_amt := ROUND (v_retention_amt, v_rnd);
        END IF;

        RETURN (v_retention_amt);
    END;

    FUNCTION pol_risks_within_capacity (v_batch_no IN NUMBER)
        RETURN VARCHAR2
    IS
        CURSOR rsks IS
              SELECT ipu_rc_code,
                     pol_cur_code,
                     ipu_uw_yr,
                     ipu_sec_scl_code,
                     MAX (NVL (ipu_max_exposure, ipu_value))    v_max_exposure,
                     pro_autopost_rein
                FROM gin_policies, gin_insured_property_unds, gin_products
               WHERE     ipu_pol_batch_no = pol_batch_no
                     AND pol_batch_no = v_batch_no
                     AND pol_pro_code = pro_code
            GROUP BY ipu_rc_code,
                     pol_cur_code,
                     ipu_uw_yr,
                     ipu_sec_scl_code,
                     pro_autopost_rein;

        CURSOR excess IS
            SELECT *
              FROM gin_insured_property_unds
             WHERE ipu_pol_batch_no = v_batch_no;

        v_mand_pct         NUMBER;
        v_above            NUMBER := 0;
        v_trty_capacity    NUMBER;
        v_auto_post_rein   VARCHAR2 (1);
        v_cnt              NUMBER := 0;
    BEGIN
        --   raise_error(' v_auto_post_rein='||v_auto_post_rein);
        FOR r IN rsks
        LOOP
            v_auto_post_rein := r.pro_autopost_rein;
            v_trty_capacity :=
                gettreatylimit (r.ipu_uw_yr,
                                r.ipu_sec_scl_code,
                                r.pol_cur_code,
                                r.ipu_rc_code,
                                v_mand_pct);

            IF NVL (r.v_max_exposure, 0) <= NVL (v_trty_capacity, 0)
            THEN
                NULL;                                          --RETURN(TRUE);
            ELSIF     NVL (v_mand_pct, 0) > 0
                  AND (  NVL (r.v_max_exposure, 0)
                       * (100 - NVL (v_mand_pct, 0))
                       / 100 <=
                       NVL (v_trty_capacity, 0))
            THEN
                NULL;                                          --RETURN(TRUE);
            ELSE
                v_above := NVL (v_above, 0) + 1;
            END IF;
        END LOOP;

        FOR i IN excess
        LOOP
            SELECT COUNT (0)
              INTO v_cnt
              FROM gin_policy_risk_ri_dtls
             WHERE prrd_ipu_code = i.ipu_code AND prrd_avail_fulc_bal <> 0;
        END LOOP;

        IF NVL (v_cnt, 0) > 0
        THEN
            RETURN ('N');
        END IF;

        IF NVL (v_auto_post_rein, 'N') = 'N'
        THEN
            RETURN ('N');
        ELSE
            IF v_above > 0
            THEN
                RETURN ('N');
            ELSE
                RETURN ('Y');
            END IF;
        END IF;
    END;

    FUNCTION gettreatylimit (v_uw_yr      IN NUMBER,
                             v_scl_code   IN NUMBER,
                             v_cur_code   IN NUMBER,
                             v_rc_code    IN NUMBER)
        RETURN NUMBER
    IS
        v_mand_pct   NUMBER;
        vret_val     NUMBER;
    BEGIN
        vret_val :=
            gettreatylimit (v_uw_yr,
                            v_scl_code,
                            v_cur_code,
                            v_rc_code,
                            v_mand_pct);
        RETURN (vret_val);
    END;

    FUNCTION gettreatylimit (v_uw_yr      IN     NUMBER,
                             v_scl_code   IN     NUMBER,
                             v_cur_code   IN     NUMBER,
                             v_rc_code    IN     NUMBER,
                             v_mand_pct      OUT NUMBER)
        RETURN NUMBER
    IS
        v_limit           NUMBER := 0;
        v_scl_rate_type   VARCHAR2 (10);
        v_rnd             NUMBER := 0;
        v_bcur_rnd        NUMBER := 0;
        v_bcur_code       NUMBER;
        v_bcur_symbol     VARCHAR2 (15);
        v_exhange_rate    NUMBER := 1;
        v_trt_cur_code    NUMBER;
        v_trt_cur_rate    NUMBER;
        v_retention_amt   NUMBER := 0;
        v_ta_type         VARCHAR2 (10);
        v_as_status       VARCHAR2 (10);
        v_as_code         NUMBER;
        --v_mand_rate NUMBER;
        v_ctl_cede_rate   NUMBER;
        v_ctl_rate_type   VARCHAR2 (5);
        v_trt_max_amt     NUMBER;

        CURSOR cur_treaties (vsclcode   IN NUMBER,
                             vascode    IN NUMBER,
                             v_uwyr        NUMBER)
        IS
              SELECT *
                FROM gin_treaty_setups_vw
               WHERE     clt_scl_code = vsclcode
                     AND as_code = vascode
                     AND as_uwyr = v_uwyr
                     AND NVL (as_status, 'N') = 'A'
            ORDER BY clt_as_code, trt_level, clt_scl_code;

        FUNCTION get_scl_rates (v_rei_code     IN     NUMBER,
                                vsclcode       IN     NUMBER,
                                v_as_code      IN     NUMBER,
                                vsclratetype      OUT VARCHAR2)
            RETURN NUMBER
        IS
            v_ctl_cede_rate   gin_class_treaty_limits.ctl_cede_rate%TYPE;
            vctlratetype      gin_class_treaty_limits.ctl_rate_type%TYPE;
        BEGIN
            SELECT ctl_cede_rate, ctl_rate_type
              INTO v_ctl_cede_rate, vctlratetype
              FROM gin_class_treaty_limits
             WHERE     ctl_rei_code = v_rei_code
                   AND ctl_scl_code = vsclcode
                   AND ctl_as_code = v_as_code;

            RETURN (v_ctl_cede_rate);
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_ctl_cede_rate := NULL;
                RETURN (v_ctl_cede_rate);
            WHEN OTHERS
            THEN
                raise_error (
                    'Error while picking the classs treaty ri rates...');
        END;
    BEGIN
        DBMS_OUTPUT.put_line ('v_scl_code=' || v_scl_code);
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);
        v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
        v_retention_amt := 0;

        BEGIN
            SELECT DISTINCT as_code,
                            ta_type,
                            NVL (as_status, 'N')     as_status,
                            ta_cur_code
              INTO v_as_code,
                   v_ta_type,
                   v_as_status,
                   v_trt_cur_code
              FROM gin_treaty_arrangements,
                   gin_class_treaties,
                   gin_arrangement_setups
             WHERE     ta_code = clt_ta_code
                   AND ta_code = as_ta_code
                   AND clt_as_code = as_code
                   AND as_uwyr = v_uw_yr
                   AND clt_scl_code = v_scl_code
                   AND ta_cur_code = v_cur_code;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                RETURN (0);
            WHEN OTHERS
            THEN
                raise_error (
                       'Error getting arrangement for class code '
                    || v_scl_code
                    || ' uwyr '
                    || v_uw_yr);
        END;

        IF NVL (v_as_status, 'N') != 'A'
        THEN
            raise_error (
                   'The RI arrangement defined for the sub class code '
                || v_scl_code
                || ' has not been authorised. ');
        END IF;

        v_mand_pct := 0;
        v_retention_amt := 0;
        v_retention_amt :=
            get_scl_uwyr_g_ret (v_uw_yr,
                                v_scl_code,
                                v_cur_code,
                                v_rc_code);

        IF v_ta_type != 'X'
        THEN
            FOR cur_treaties_rec
                IN cur_treaties (v_scl_code, v_as_code, v_uw_yr)
            LOOP
                IF cur_treaties_rec.trt_code = 1001
                THEN                                              -- MANDATORY
                    v_mand_pct :=
                          NVL (v_mand_pct, 0)
                        + NVL (cur_treaties_rec.rei_cede_rate, 0);
                ELSIF cur_treaties_rec.trt_code = 1003
                THEN                                             --QUOTA SHARE
                    NULL;
                --Quota share is considered to take part of Gross retention determined above..
                ELSIF cur_treaties_rec.trt_code = 1004
                THEN                                                -- SURPLUS
                    DBMS_OUTPUT.put_line ('v_scl_code=' || v_scl_code);
                    v_ctl_cede_rate := NULL;
                    v_ctl_cede_rate :=
                        get_scl_rates (cur_treaties_rec.rei_code,
                                       v_scl_code,
                                       cur_treaties_rec.as_code,
                                       v_scl_rate_type);

                    IF NVL (v_ctl_cede_rate, 0) > 0
                    THEN
                        IF v_ctl_rate_type = 'P'
                        THEN
                            v_trt_max_amt :=
                                  NVL (v_retention_amt, 0)
                                * v_ctl_cede_rate
                                / 100;
                        ELSE
                            v_trt_max_amt :=
                                v_ctl_cede_rate * NVL (v_retention_amt, 0);
                        END IF;
                    ELSE
                        v_trt_max_amt :=
                              NVL (v_retention_amt, 0)
                            * cur_treaties_rec.rei_cede_rate;
                    END IF;
                END IF;
            END LOOP;                            --cur_treaties_rec main risks
        END IF;

        IF v_trt_cur_code != v_cur_code
        THEN
            IF v_bcur_code = v_trt_cur_code
            THEN
                v_trt_max_amt :=
                    ROUND (v_trt_max_amt / v_exhange_rate, v_rnd);
            ELSE
                v_trt_cur_rate :=
                    get_exchange_rate (v_trt_cur_code, v_bcur_code);
                v_trt_max_amt :=
                    ROUND (v_trt_max_amt * v_trt_cur_rate / v_exhange_rate,
                           v_rnd);
            END IF;
        ELSE
            v_retention_amt := ROUND (v_retention_amt, v_rnd);
        END IF;

        RETURN (NVL (v_retention_amt, 0) + NVL (v_trt_max_amt, 0));
    END;

    /*FUNCTION getTreatyLimit(v_uw_yr IN NUMBER,v_scl_code IN NUMBER) RETURN NUMBER
        IS
        v_limit NUMBER:=0;
    BEGIN
         SELECT DECODE(REI_RATE_TYPE,'L',NVL(REI_CEDE_RATE,1)*NVL(CLT_RETENTION_LIMIT,0)+NVL(CLT_RETENTION_LIMIT,0),NVL(CLT_RETENTION_LIMIT,0))
                INTO v_limit
                FROM GIN_ARRANGEMENT_SETUPS,GIN_CLASS_TREATIES,GIN_TREATY_SETUPS
                WHERE AS_CODE=CLT_AS_CODE
                AND CLT_TA_CODE = REI_TA_CODE
                AND AS_UWYR=v_uw_yr
                AND CLT_SCL_CODE=v_scl_code
                AND REI_AS_CODE=AS_CODE;
        RETURN v_limit;
    EXCEPTION
    WHEN OTHERS THEN
     RAISE_ERROR('ERROR') ;
    END;*/
    PROCEDURE create_grp_trans (v_relr_code   IN     NUMBER,
                                v_eff_date    IN     DATE,
                                v_trans_no    IN OUT NUMBER,
                                v_user               VARCHAR2)
    IS
    BEGIN
        --      raise_error ('ni hapaa..');

        SELECT TO_NUMBER (
                   TO_CHAR (SYSDATE, 'YYYY') || ggt_trans_no_seq.NEXTVAL)
          INTO v_trans_no
          FROM DUAL;

        BEGIN
            INSERT INTO gin_gis_transactions (ggt_trans_no,
                                              ggt_uw_clm_tran,
                                              ggt_trans_date,
                                              ggt_trans_authorised,
                                              ggt_effective_date,
                                              ggt_risk_grp_code,
                                              ggt_done_by)
                 VALUES (v_trans_no,
                         'R',
                         TRUNC (SYSDATE),
                         'N',
                         v_eff_date,
                         v_relr_code,
                         v_user);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_when_others ('Error inserting transactions....');
        END;
    END;

    PROCEDURE reprocess_group_ri (
        v_risk_tab      IN     web_risk_tab,
        v_relr_code     IN     NUMBER,
        v_trans_no      IN OUT NUMBER,
        v_eff_date      IN     DATE,
        v_user          IN     VARCHAR2,
        v_reason_edit   IN     VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        --       RAISE_ERROR('v_eff_date'||v_eff_date);
        FOR i IN 1 .. v_risk_tab.COUNT
        LOOP
            reprocess_grp_ri (v_risk_tab (i).gis_ipu_code,
                              v_relr_code,
                              v_trans_no,
                              v_eff_date,
                              v_user,
                              v_reason_edit);
        END LOOP;
    END;

    PROCEDURE reprocess_grp_ri (
        v_pol_batch_no   IN     NUMBER,
        v_trans_no       IN OUT NUMBER,
        v_eff_date       IN     DATE,
        v_user           IN     VARCHAR2,
        v_reason_edit    IN     VARCHAR2 DEFAULT NULL)
    IS
        CURSOR pols IS
            SELECT ipu_code, ipu_relr_code
              FROM gin_insured_property_unds
             WHERE ipu_pol_batch_no = v_pol_batch_no;
    BEGIN
        FOR p IN pols
        LOOP
            reprocess_grp_ri (p.ipu_code,
                              p.ipu_relr_code,
                              v_trans_no,
                              v_eff_date,
                              v_user,
                              v_reason_edit);
        END LOOP;
    END;

    PROCEDURE reprocess_grp_ri (v_ipu_code      IN     NUMBER,
                                v_relr_code     IN     NUMBER,
                                v_trans_no      IN OUT NUMBER,
                                v_eff_date      IN     DATE,
                                v_user          IN     VARCHAR2,
                                v_reason_edit   IN     VARCHAR2 DEFAULT NULL)
    IS
        v_comp_ret_rate    NUMBER := 0;
        vtransno           NUMBER := 0;
        v_cnt              NUMBER := 0;
        v_max_idx          NUMBER := 0;
        v_prorata_prem     NUMBER := 0;
        v_prorata_rate     NUMBER := 0;
        v_prorata_days     NUMBER := 0;
        v_errmsg           VARCHAR2 (200);
        v_prrd_code        NUMBER (20);
        v_authorised       VARCHAR2 (2);
        v_prev_prrd_code   NUMBER;
        v_old_trans_no     NUMBER;

        -- v_pol_status      varchar2 (2);
        --v_pol_authorised      varchar2 (2);
        --v_pol_reinsured      varchar2 (2);
        CURSOR cur_risk IS
            SELECT *
              FROM gin_policies, gin_insured_property_unds
             WHERE ipu_pol_batch_no = pol_batch_no AND ipu_code = v_ipu_code;
    BEGIN
        /*BEGIN
          SELECT pol_current_status,pol_authosrised, pol_reinsured
          INTO v_pol_status, v_pol_authorised, v_pol_reinsured
          FROM gin_policies, gin_insured_property_unds
          WHERE ipu_pol_batch_no = pol_batch_no
          AND ipu_code = v_ipu_code;
        EXCEPTION
          WHEN OTHERS THEN
              raise_error('Error getting policy details..');
        END;*/
        --RAISE_ERROR(v_pol_status||'='||v_pol_authorised||'='||v_pol_reinsured);
        --      raise_error(5555555);
        FOR cur_risk_rec IN cur_risk
        LOOP
            IF NVL (cur_risk_rec.pol_authosrised, 'D') != 'A'
            THEN
                raise_error (
                    'Cannot edit reinsurance details on a transactions that has has not been authorized');
            ELSIF NVL (cur_risk_rec.pol_reinsured, 'N') != 'Y'
            THEN
                raise_error (
                    'Reinsurance has not been done or authorized on the selected risk');
            ELSIF NVL (cur_risk_rec.pol_current_status, 'D') != 'A'
            THEN
                NULL;
            --raise_error('Cannot edit reinsurance details on a transactions that has already been endorsed.');
            END IF;

            BEGIN
                SELECT COUNT (1)
                  INTO v_cnt
                  FROM gin_claim_master_bookings
                 WHERE     cmb_ipu_code = v_ipu_code
                       AND cmb_claim_status NOT IN ('N', 'R', 'U');
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error checking claims on the risk..');
            END;

            IF v_eff_date NOT BETWEEN cur_risk_rec.ipu_eff_wef
                                  AND cur_risk_rec.ipu_eff_wet
            THEN
                raise_error (
                    'Reinsurance edit effective date must be within the policy risk cover dates..');
            END IF;

            IF NVL (v_cnt, 0) != 0
            THEN
                NULL;
            --raise_error('There is a claim on this risk. Cannot edit the reinsurance details.');
            END IF;

            BEGIN
                SELECT NVL (ggt_trans_authorised, 'N'),
                       prrd_code,
                       ggt_trans_no
                  INTO v_authorised, v_prev_prrd_code, v_old_trans_no
                  FROM gin_policy_risk_ri_dtls, gin_gis_transactions
                 WHERE     prrd_ipu_code = v_ipu_code
                       AND prrd_tran_no = ggt_trans_no
                       AND NVL (prrd_current, 'D') = 'Y';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_authorised := 'N';
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error checking un authorized transactions.');
            END;

            IF NVL (v_authorised, 'N') != 'Y'
            THEN
                raise_error (
                    'Previous reinsurance transaction must be authorized before it can be edited.');
            END IF;

            BEGIN
                SELECT COUNT (1), MAX (prrd_tran_no)
                  INTO v_cnt, vtransno
                  FROM gin_policy_risk_ri_dtls, gin_gis_transactions
                 WHERE     prrd_ipu_code = v_ipu_code
                       AND prrd_tran_no = ggt_trans_no
                       AND (   NVL (prrd_current, 'D') = 'D'
                            OR NVL (ggt_trans_authorised, 'N') != 'Y');
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error checking un authorized transactions.');
            END;

            IF NVL (v_cnt, 0) = 1
            THEN
                v_trans_no := vtransno;
            ELSIF NVL (v_cnt, 0) > 1
            THEN
                gis_ri_procedures.delete_grp_cessions (vtransno);
                v_trans_no := NULL;
            END IF;

            IF v_trans_no IS NULL
            THEN
                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || ggt_trans_no_seq.NEXTVAL)
                  INTO v_trans_no
                  FROM DUAL;

                BEGIN
                    INSERT INTO gin_gis_transactions (ggt_trans_no,
                                                      ggt_uw_clm_tran,
                                                      ggt_trans_date,
                                                      ggt_trans_authorised,
                                                      ggt_effective_date,
                                                      ggt_risk_grp_code,
                                                      ggt_done_by,
                                                      ggt_pol_policy_no,
                                                      ggt_pol_batch_no,
                                                      ggt_rein_edt_reason)
                         VALUES (v_trans_no,
                                 'R',
                                 TRUNC (SYSDATE),
                                 'N',
                                 v_eff_date,
                                 v_relr_code,
                                 v_user,
                                 cur_risk_rec.ipu_pol_policy_no,
                                 cur_risk_rec.ipu_pol_batch_no,
                                 v_reason_edit);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others (
                            'Error inserting transactions....');
                END;
            END IF;

            SELECT COUNT ('x')
              INTO v_cnt
              FROM gin_policy_risk_ri_dtls
             WHERE prrd_ipu_code = v_ipu_code AND prrd_tran_no = v_trans_no;

            v_comp_ret_rate :=
                  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                / NVL (cur_risk_rec.ipu_grp_top_loc, 100)
                * 100;
            v_prorata_days := CEIL (cur_risk_rec.ipu_wet - v_eff_date);
            v_prorata_rate :=
                (  CEIL (cur_risk_rec.ipu_wet - v_eff_date)
                 / CEIL (cur_risk_rec.ipu_wet - cur_risk_rec.ipu_wef)
                 * 100);
            v_prorata_prem :=
                NVL (cur_risk_rec.ipu_gp, 0) * v_prorata_rate / 100;

            IF v_cnt = 0
            THEN
                --insert the new record
                BEGIN
                    --select max idx for the risk
                    SELECT MAX (NVL (prrd_idx, 0))
                      INTO v_max_idx
                      FROM gin_policy_risk_ri_dtls
                     WHERE prrd_ipu_code = cur_risk_rec.ipu_code;

                    v_max_idx := v_max_idx + 1;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_max_idx := 1;
                END;

                --raise_error('v_max_idx='||v_max_idx||'cur_risk_rec.ipu_code='||cur_risk_rec.ipu_code);
                BEGIN
                    v_prrd_code := NULL;

                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_prrd_code_seq.NEXTVAL)
                      INTO v_prrd_code
                      FROM DUAL;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        v_errmsg := SQLERRM (SQLCODE);
                        raise_error (
                               'Error :- Unable to generate the sequence GIN_PRRD_CODE_SEQ...'
                            || v_errmsg);
                END;

                --       raise_error('AHA AHA IN PROCESS GRP RI...............EARTH EQ DIFF='||cur_risk_rec.IPU_EARTHQKE_PREM_DIFF||'EQ PREM='||cur_risk_rec.IPU_EARTH_QUAKE_PREM);
                BEGIN
                    INSERT INTO gin_policy_risk_ri_dtls (
                                    prrd_code,
                                    prrd_ipu_code,
                                    prrd_idx,
                                    prrd_tran_no,
                                    prrd_wef,
                                    prrd_wet,
                                    prrd_current,
                                    prrd_comp_retention,
                                    prrd_avail_fulc_bal,
                                    prrd_gross_comp_retention,
                                    prrd_facre_amount,
                                    prrd_com_retention_rate,
                                    prrd_grp_si_risk_pct,
                                    prrd_grp_top_loc,
                                    prrd_grp_comp_gross_ret,
                                    prrd_grp_comp_net_ret,
                                    prrd_ri_prem,
                                    prrd_prorata_days,
                                    prrd_prev_prrd_code,
                                    prrd_effective_date,
                                    prrd_earthquake_prem)
                        SELECT v_prrd_code,
                               v_ipu_code,
                               v_max_idx,
                               v_trans_no,
                               cur_risk_rec.ipu_wef,
                               cur_risk_rec.ipu_wet,
                               'D',
                               0,
                               ROUND (cur_risk_rec.ipu_facre_amount),
                               0,
                               0,
                               NULL,
                               v_comp_ret_rate,
                               ROUND (cur_risk_rec.ipu_grp_top_loc),
                               0,
                               0,
                               ROUND (v_prorata_prem),
                               v_prorata_days,
                               v_prev_prrd_code,
                               v_eff_date,
                               NVL (cur_risk_rec.ipu_earthqke_prem_diff, 0)
                          FROM gin_insured_property_unds
                         WHERE ipu_code = v_ipu_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        v_errmsg := SQLERRM (SQLCODE);
                        raise_error (
                            'Error :- Unable to insert risk RI details...');
                END;
            ELSE
                UPDATE gin_policy_risk_ri_dtls
                   SET prrd_ri_prem = ROUND (v_prorata_prem),
                       prrd_prorata_days = v_prorata_days,
                       prrd_effective_date = v_eff_date
                 WHERE     prrd_ipu_code = v_ipu_code
                       AND prrd_tran_no = v_trans_no;
            END IF;
        END LOOP;
    END;



    PROCEDURE clear_grp_cessions (v_ipu_code IN NUMBER, v_trans_no IN NUMBER)
    IS
        v_prrd_code   NUMBER;
    BEGIN
        --  RAISE_ERROR('IPU CODE '||v_ipu_code||'; Trans No '||v_trans_no);
        BEGIN
            SELECT prrd_code
              INTO v_prrd_code
              FROM gin_policy_risk_ri_dtls
             WHERE prrd_ipu_code = v_ipu_code AND prrd_tran_no = v_trans_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_prrd_code := NULL;
            WHEN OTHERS
            THEN
                raise_error ('Error deleting previous cessions.');
        END;

        DELETE gin_participations
         WHERE part_prrd_code = v_prrd_code;

        DELETE gin_policy_rein_risk_details
         WHERE ptotr_prrd_code = v_prrd_code;

        DELETE gin_facre_cessions
         WHERE fc_prrd_code = v_prrd_code;

        DELETE gin_pol_rein_pool_risk_details
         WHERE prprd_prrd_code = v_prrd_code;

        UPDATE gin_policy_risk_ri_dtls
           SET prrd_gross_comp_retention = 0,
               prrd_comp_net_rate = 0,
               prrd_comp_retention = 0,
               prrd_avail_fulc_bal = 0,
               prrd_facre_amount = 0,
               prrd_facre_rate = 0,
               prrd_excess_pct = 0,
               prrd_facoblig_excess = 0,
               prrd_facoblig_user_excess = 0
         WHERE prrd_code = v_prrd_code;

        UPDATE gin_insured_property_unds
           SET ipu_override_ri_retention = NULL,
               ipu_overrideride_ret_type = NULL
         WHERE ipu_code = v_ipu_code;
    END;

    PROCEDURE del_grp_zero_cessions (v_tran_no    IN NUMBER,
                                     v_ipu_code   IN NUMBER)
    IS
        npartcount   NUMBER;
    BEGIN
        --raise_error(333);
        DELETE gin_participations
         WHERE     part_ggt_tran_no = v_tran_no
               AND part_ipu_code = v_ipu_code
               AND NVL (part_si_amt_tcur, 0) = 0
               AND NVL (part_refund_prem, 0) = 0;

        --commit;
        ------------------------POINT OF TIMESTAMP ERROR------------------
        BEGIN
            DELETE gin_policy_rein_risk_details
             WHERE     ptotr_ggt_tran_no = v_tran_no
                   AND ptotr_ipu_code = v_ipu_code
                   AND NVL (ptotr_trt_si_pcur, 0) = 0
                   AND NVL (ptotr_refund_prem, 0) = 0;
        --commit;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error at deleting risk reinsurance level..');
        END;
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_error ('Error clearing old reinsurance details..');
    END;

    --   PROCEDURE pop_grp_prev_cessions (
    --      v_ipu_code          IN       NUMBER,
    --      v_trans_no          IN       NUMBER,
    --      v_trans_type        IN       VARCHAR2,
    --      v_cur_code          IN       NUMBER,
    --      v_prrd_code         IN OUT   NUMBER,
    --      v_recompute_facre   IN       VARCHAR2 DEFAULT 'N',
    --      v_user              IN       VARCHAR2
    --   )
    --   IS
    --      v_trt_uwyr                  NUMBER         := NULL;
    --      cnt                         NUMBER         := 1;
    --      v_retention_amt             NUMBER         := 0;
    --      v_facre_rate                NUMBER         := 0;
    --      al_id                       NUMBER;
    --      v_cnt                       NUMBER         := 0;
    --      --v_prrd_code    NUMBER ;
    --      v_errmsg                    VARCHAR2 (200);
    --      v_facre_amt                 NUMBER         := 0;
    --      v_zero_devide               EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      v_scl_code                  NUMBER;
    --      v_grp_tot_ret               NUMBER         := 0;
    --      v_grp_pct                   NUMBER         := 0;
    --      v_group_si                  NUMBER         := 0;
    --      v_grp_flag                  BOOLEAN        := FALSE;
    --      v_reinsure_amt              NUMBER         := 0;
    --      v_no_ri_si                  VARCHAR2 (2);
    --      v_rei_code                  NUMBER;
    --      v_as_code                   NUMBER;
    --      v_exch_rate                 NUMBER         := 0;
    --      v_rnd                       NUMBER         := 0;
    --      v_bcur_rnd                  NUMBER         := 0;
    --      v_prev_prrd_code            NUMBER;
    --      v_prev_com_retention_rate   NUMBER         := 0;
    --      v_prev_comp_net_rate        NUMBER         := 0;
    --      v_ctl_code                  NUMBER;
    --      v_allowed_rate              NUMBER;
    --      --v_facre_amount              NUMBER;
    --      v_facob_rate                NUMBER;
    --      v_fc_amount                 NUMBER;
    --      v_facob_amt                 NUMBER;
    --      v_facob_amt_rate            NUMBER;
    --      v_facre_amt_rate            NUMBER;
    --      v_fc_rate                   NUMBER;
    --      v_prorata_rate              NUMBER;
    --      v_fc_wef_date               DATE;
    --      v_prem                      NUMBER;
    --      v_fc_prem_diff_amt          NUMBER;
    --      v_comm_amt                  NUMBER;
    --      v_prev_prem                 NUMBER;
    --      v_prev_comm                 NUMBER;
    --      v_prprd_code                NUMBER;
    --      v_amnt                      NUMBER;
    --      v_obligamnt                 NUMBER;
    --      v_eq_prem                   NUMBER;
    --       v_prev_ri_si      NUMBER;
    --      v_prev_facre_amt  NUMBER;
    --
    --        v_prev_net_retention NUMBER;
    --        v_net_prev_prem NUMBER;
    --        v_ri_prev_prem NUMBER;
    --        v_cumm_ri_prem NUMBER;
    --        v_prev_facre_prem NUMBER;
    --
    --      CURSOR cur_risk
    --      IS
    --         SELECT ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  ipu_comp_retention, ipu_pol_est_max_loss,
    --                  ipu_avail_fulc_bal, ipu_endos_diff_amt, ipu_sec_scl_code,
    --                  ipu_related_ipu_code, ipu_bp, ipu_gp, ipu_fp, ipu_fap,
    --                  ipu_nett_premium, ipu_eml_si, ipu_cummulative_reins,
    --                  ipu_sec_sect_code, ipu_reinsure_amt, ipu_facre_amount,
    --                  ipu_prev_ipu_code, ipu_grp_si_risk_pct, ipu_grp_top_loc,
    --                  ipu_grp_comp_gross_ret, ipu_relr_code, ipu_eff_wef,
    --                  ipu_eff_wet, ipu_id, ipu_uw_yr, ipu_status,
    --                  ipu_earthqke_prem_diff, pol_policy_status, ipu_rc_code
    --           FROM gin_policies,gin_insured_property_unds
    --          WHERE pol_batch_no = ipu_pol_batch_no
    --          and ipu_code = v_ipu_code;
    --
    --      CURSOR cur_old_risk (v_prev_ipu NUMBER)
    --      IS
    --         SELECT prrd_ipu_code, prrd_com_retention_rate, prrd_code,
    --                prrd_comp_net_rate, prrd_comp_retention,
    --                prrd_facoblig_user_excess, prrd_as_uwyr, prrd_as_code,
    --                prrd_facoblig_excess, prrd_facoblig_limit, prrd_cede_pool
    --           FROM gin_policy_risk_ri_dtls
    --          WHERE prrd_ipu_code = v_prev_ipu
    --            AND prrd_current = 'Y'
    --            AND prrd_idx =
    --                    (SELECT MAX (prrd_idx)
    --                       FROM gin_policy_risk_ri_dtls
    --                      WHERE prrd_ipu_code = v_prev_ipu AND prrd_current = 'Y');
    --
    --      CURSOR cur_prev_treaty_cession (
    --         v_old_ipu_code    NUMBER,
    --         v_ipu             NUMBER,
    --         v_old_prrd_code   NUMBER
    --      )
    --      IS
    --         SELECT ptotr_code, ptotr_risk_cur_code, ptotr_trt_cur_code,
    --                ptotr_risk_si_pcur, ptotr_risk_prem_pcur, ptotr_rei_code,
    --                ptotr_trt_code, ptotr_trt_sht_desc, ptotr_clt_scl_code,
    --                ptotr_rate, ptotr_rate_type, ptotr_property_id, ptotr_uwyr,
    --                ptotr_ipu_code, ptotr_risk_cur_symbol, ptotr_trt_cur_symbol,
    --                ptotr_sect_code, ptotr_ta_code, ptotr_as_code, ptotr_trs_code,
    --                ptotr_trs_sht_desc, ptotr_prev_cession_rate,
    --                ptotr_cession_pct, ta_type, ptotr_date, ptotr_ctl_code,
    --                ptotr_allowed_rate
    --           FROM gin_policy_rein_risk_details, gin_treaty_arrangements
    --          WHERE ptotr_ta_code = ta_code
    --            AND ptotr_ipu_code = v_old_ipu_code
    --            AND ptotr_prrd_code = v_old_prrd_code
    --            AND ptotr_rei_code NOT IN (
    --                   SELECT ptotr_rei_code
    --                     FROM gin_policy_rein_risk_details
    --                    WHERE ptotr_ipu_code = v_ipu
    --                      AND ptotr_ggt_tran_no = v_trans_no);
    --
    --      CURSOR cur_participant (v_rei_code IN NUMBER)
    --      IS
    --         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    --                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    --                trpa_trs_code, trpa_trs_sht_desc, trpa_code
    --           FROM gin_treaty_participants
    --          WHERE trpa_rei_code = v_rei_code;
    --
    --      CURSOR cur_facre (v_old_prrd_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_facre_cessions
    --          WHERE fc_prrd_code = v_old_prrd_code;
    --
    --      CURSOR cur_pool (v_old_prrd_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_pol_rein_pool_risk_details
    --          WHERE prprd_prrd_code = v_old_prrd_code;
    --   BEGIN
    --      v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --
    ----raise_error('v_ipu_code='||v_ipu_code);
    --      FOR cur_risk_rec IN cur_risk
    --      LOOP
    --         v_scl_code := NULL;
    --
    --         BEGIN
    --            SELECT NVL (scl_no_ri_si, 'N')
    --              INTO v_no_ri_si
    --              FROM gin_sub_classes
    --             WHERE scl_code = cur_risk_rec.ipu_sec_scl_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                     (   'Unable to retrieve RI SI status for the sub class '
    --                      || cur_risk_rec.ipu_sec_scl_code
    --                     );
    --         END;
    --
    --         IF     NVL (v_no_ri_si, 'N') = 'N'
    --            AND NVL (cur_risk_rec.ipu_reinsure_amt, 0) = 0
    --         THEN
    --            raise_error
    --                   ('No reinsure amount specified, cannot reinsure this risk');
    --         END IF;
    --
    --          -- IF NVL (cur_risk_rec.ipu_status, 'O') != 'RN'
    --         --  THEN
    --         v_scl_code := cur_risk_rec.ipu_sec_scl_code;
    --
    --         -- open arrangements cursor
    --         --reserve facre sessions if its not a new business or renewal
    --         BEGIN
    --            v_prrd_code := NULL;
    --
    --            SELECT prrd_code, prrd_prev_prrd_code, prrd_com_retention_rate,
    --                   prrd_comp_net_rate
    --              INTO v_prrd_code, v_prev_prrd_code, v_prev_com_retention_rate,
    --                   v_prev_comp_net_rate
    --              FROM gin_policy_risk_ri_dtls
    --             WHERE prrd_ipu_code = cur_risk_rec.ipu_code
    --               AND prrd_tran_no = v_trans_no;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               v_prrd_code := NULL;
    --               v_prev_prrd_code := NULL;
    --         END;
    --
    --         v_retention_amt := 0;
    --         v_grp_tot_ret := 0;
    --
    --         FOR cur_old_risk_rec IN cur_old_risk (cur_risk_rec.ipu_code)
    --         LOOP
    --            -- raise_error(23232322);
    --            v_prev_prrd_code := cur_old_risk_rec.prrd_code;
    --
    --            BEGIN
    --               v_facre_rate := 0;
    --               v_facre_amt := 0;
    --
    --               SELECT SUM (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', 0,
    --                                   NVL (fc_rate, 0)
    --                                  )
    --                          ),
    --                      SUM (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', NVL (fc_rate, 0),
    --                                   0
    --                                  )
    --                          )
    --                 INTO v_facre_rate,
    --                      v_facob_rate
    --                 FROM gin_facre_cessions
    --                WHERE fc_ipu_code = cur_risk_rec.ipu_code
    --                  AND fc_prrd_code = v_prev_prrd_code
    --                  AND fc_amt_or_rate = 'R';
    --
    --               DBMS_OUTPUT.put_line (   'v_facre_rate='
    --                                     || v_facre_rate
    --                                     || 'v_facob_rate='
    --                                     || v_facob_rate
    --                                    );
    --
    --               SELECT SUM (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', 0,
    --                                   NVL (fc_amount, 0)
    --                                  )
    --                          ),
    --                      SUM (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', NVL (fc_amount, 0),
    --                                   0
    --                                  )
    --                          )
    --                 INTO v_facre_amt,
    --                      v_facob_amt
    --                 FROM gin_facre_cessions
    --                WHERE fc_ipu_code = cur_risk_rec.ipu_code
    --                  AND fc_prrd_code = v_prev_prrd_code
    --                  AND fc_amt_or_rate = 'A';
    --
    --               DBMS_OUTPUT.put_line (   'v_facre_amt='
    --                                     || v_facre_amt
    --                                     || 'v_facob_amt='
    --                                     || v_facob_amt
    --                                    );
    --
    --               IF NVL (cur_risk_rec.ipu_reinsure_amt, 0) != 0
    --               THEN
    --                  v_facre_amt_rate :=
    --                       NVL (v_facre_amt, 0)
    --                     / NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                     * 100;
    --                  v_facob_amt_rate :=
    --                       NVL (v_facob_amt, 0)
    --                     / NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                     * 100;
    --               ELSE
    --                  v_facre_amt := 0;
    --               END IF;
    --
    --               v_facre_rate :=
    --                              NVL (v_facre_rate, 0)
    --                              + NVL (v_facre_amt_rate, 0);
    --               v_facob_rate :=
    --                              NVL (v_facob_rate, 0)
    --                              + NVL (v_facob_amt_rate, 0);
    --
    --               IF     NVL (v_facre_rate, 0) + NVL (v_facob_rate, 0) > 100
    --                  AND NVL (v_recompute_facre, 'N') = 'N'
    --               THEN
    --                  raise_error
    --                             ('New facre percentage is greater than the 100%');
    --               END IF;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_facre_rate := 0;
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (' ');
    --            END;
    --
    --           IF cur_risk_rec.pol_policy_status IN ('NB', 'RN', 'SP')
    --           THEN
    --              v_eq_prem :=
    --                   cur_risk_rec.ipu_earthqke_prem_diff
    --                 * SIGN (NVL (cur_risk_rec.ipu_endos_diff_amt, 0));
    --           ELSE
    --              v_eq_prem := 0;
    --           END IF;
    --
    --            v_prev_net_retention :=NVL(get_risk_comp_retention(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,cur_risk_rec.ipu_code),0);
    --            v_net_prev_prem :=NVL(get_risk_cumulative_prem(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,'O',cur_risk_rec.ipu_code),0);
    --            v_ri_prev_prem :=NVL(get_risk_cumulative_prem(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,'T',cur_risk_rec.ipu_code),0);
    --            v_prev_ri_si :=get_risk_ri_si(cur_risk_rec.ipu_id,cur_risk_rec.ipu_code,cur_risk_rec.ipu_uw_yr);
    --            v_cumm_ri_prem :=NVL(get_risk_cumulative_prem(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,'G',cur_risk_rec.ipu_code),0);
    --            v_prev_facre_prem := NVL(get_risk_cumulative_prem(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,'F',cur_risk_rec.ipu_code),0);
    --
    --            IF v_prrd_code IS NULL
    --            THEN
    --               BEGIN
    --                  SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                    || gin_prrd_code_seq.NEXTVAL
    --                                   )
    --                    INTO v_prrd_code
    --                    FROM DUAL;
    --
    --                  INSERT INTO gin_policy_risk_ri_dtls
    --                              (prrd_code, prrd_ipu_code, prrd_idx,
    --                               prrd_tran_no, prrd_wef,
    --                               prrd_wet, prrd_current,
    --                               prrd_comp_retention,
    --                               prrd_excess_pct,
    --                               prrd_avail_fulc_bal,
    --                               prrd_gross_comp_retention,
    --                               prrd_com_retention_rate,
    --                               prrd_grp_si_risk_pct,
    --                               prrd_grp_top_loc,
    --                               prrd_grp_comp_gross_ret,
    --                               prrd_grp_comp_net_ret, prrd_ri_prem,
    --                               prrd_prev_ret_rate,
    --                               prrd_prev_facre_rate, prrd_earthquake_prem,
    --                                  prrd_ri_net_less_eq_prem,
    --                               prrd_as_uwyr,
    --                               prrd_prev_prrd_code,
    --                               prrd_as_code,
    --                               prrd_facoblig_excess,
    --                               prrd_facoblig_limit,
    --                               prrd_facoblig_user_excess,
    --                               prrd_cede_pool,
    --                               prrd_effective_date,
    --                                prrd_prev_net_rate,
    --                                prrd_prev_net_retention,
    --                                prrd_net_prev_prem,
    --                                prrd_ri_prev_prem,
    --                                prrd_prev_ri_si,
    --                                prrd_prev_facre_si ,
    --                                prrd_cumm_ri_prem,
    --                                prrd_prev_facre_prem
    --                              )
    --                       VALUES (v_prrd_code, cur_risk_rec.ipu_code, 1,
    --                               v_trans_no, cur_risk_rec.ipu_wef,
    --                               cur_risk_rec.ipu_wet, 'Y',
    --                               ROUND
    --                                  (  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                                   * (  DECODE
    --                                             (NVL (v_prev_com_retention_rate,
    --                                                   0
    --                                                  ),
    --                                              0, 100,
    --                                              v_prev_com_retention_rate
    --                                             )
    --                                      / 100
    --                                     )
    --                                   * NVL (v_grp_pct, 100)
    --                                  ),
    --                               ROUND (v_facre_rate, 4),
    --                               ROUND   (  v_facre_rate * DECODE (NVL (cur_risk_rec.ipu_reinsure_amt,   0   ),    0, 100,    NVL  (cur_risk_rec.ipu_reinsure_amt,   0   )   / 100   )  ),
    --                               ROUND    (  NVL (cur_risk_rec.ipu_reinsure_amt, 0)  * (  DECODE (NVL (v_prev_com_retention_rate, 0   ),  0, 100,
    --                                  v_prev_com_retention_rate   )   / 100   )   * NVL (v_grp_pct, 100)  ),
    --                               v_prev_com_retention_rate,
    --                               cur_risk_rec.ipu_grp_si_risk_pct,
    --                               cur_risk_rec.ipu_grp_top_loc,
    --                               cur_risk_rec.ipu_grp_comp_gross_ret,
    --                               0, cur_risk_rec.ipu_endos_diff_amt,
    --                               v_prev_comp_net_rate,
    --                               ROUND (v_facre_rate, 4), v_eq_prem,
    --                                    ROUND
    --                                       (NVL
    --                                           (cur_risk_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - v_eq_prem,
    --                               NVL (cur_old_risk_rec.prrd_as_uwyr,
    --                                    cur_risk_rec.ipu_uw_yr
    --                                   ),
    --                               cur_old_risk_rec.prrd_code,
    --                               cur_old_risk_rec.prrd_as_code,
    --                               ROUND
    --                                  (  v_facob_rate
    --                                   * DECODE
    --                                         (NVL (cur_risk_rec.ipu_reinsure_amt,
    --                                               0
    --                                              ),
    --                                          0, 100,
    --                                          cur_risk_rec.ipu_reinsure_amt / 100
    --                                         ),
    --                                   v_rnd
    --                                  ),
    --                               cur_old_risk_rec.prrd_facoblig_limit,
    --                               cur_old_risk_rec.prrd_facoblig_user_excess,
    --                               cur_old_risk_rec.prrd_cede_pool,
    --                               cur_risk_rec.ipu_wef,
    --                                    cur_old_risk_rec.prrd_comp_net_rate,
    --                                    -- cur_old_risk_rec.prrd_comp_retention,
    --                                    v_prev_net_retention,
    --                                    --                                  cur_old_risk_rec.prrd_net_prem,
    --                                    v_net_prev_prem,
    --                                    --cur_old_risk_rec.prrd_ri_prem,
    --                                    v_ri_prev_prem,
    --                                    -- v_prev_ri_si,
    --                                    v_prev_ri_si,
    --                                    v_prev_facre_amt,
    --                                    v_cumm_ri_prem,
    --                                    v_prev_facre_prem
    --                              );
    --               END;
    --
    --               BEGIN
    --                  UPDATE gin_insured_property_unds
    --                     SET ipu_current_prrd_code = v_prrd_code
    --                   WHERE ipu_code = cur_risk_rec.ipu_code;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Unable to update risks current RI details code, ...'
    --                        );
    --               END;
    --            ELSE
    --               -- raise_error( 'here='||v_facre_rate);
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_comp_retention =
    --                         ROUND (((  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                                  * DECODE (NVL (v_prev_comp_net_rate, 0),
    --                                            0, 100,
    --                                            v_prev_comp_net_rate
    --                                           )
    --                                  / 100
    --                                 )
    --                                ),
    --                                v_rnd
    --                               ),
    --                      prrd_avail_fulc_bal =
    --                         ROUND (  v_facre_rate
    --                                * DECODE (NVL (cur_risk_rec.ipu_reinsure_amt,
    --                                               0
    --                                              ),
    --                                          0, 100,
    --                                          cur_risk_rec.ipu_reinsure_amt / 100
    --                                         ),
    --                                v_rnd
    --                               ),
    --                      prrd_excess_pct = ROUND (v_facre_rate, 4),
    --                      prrd_gross_comp_retention =
    --                         ROUND (((  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                                  * DECODE (NVL (v_prev_com_retention_rate, 0),
    --                                            0, 100,
    --                                            v_prev_com_retention_rate
    --                                           )
    --                                  / 100
    --                                 )
    --                                ),
    --                                v_rnd
    --                               ),
    --                      prrd_com_retention_rate = v_prev_com_retention_rate,
    --                      prrd_grp_top_loc = cur_risk_rec.ipu_grp_top_loc,
    --                      prrd_grp_si_risk_pct = cur_risk_rec.ipu_grp_si_risk_pct,
    --                      prrd_grp_comp_gross_ret =
    --                                           cur_risk_rec.ipu_grp_comp_gross_ret,
    --                      prrd_ri_prem = cur_risk_rec.ipu_endos_diff_amt,
    --                         prrd_earthquake_prem = v_eq_prem,
    --                         prrd_ri_net_less_eq_prem =
    --                              ROUND
    --                                   (NVL (cur_risk_rec.ipu_endos_diff_amt,
    --                                         0
    --                                        )
    --                                   )
    --                            - v_eq_prem,
    --                      prrd_comp_net_rate = NVL (v_prev_comp_net_rate, 0),
    --                      prrd_prev_ret_rate = v_prev_comp_net_rate,
    --                      prrd_prev_facre_rate = ROUND (v_facre_rate, 4),
    --                      prrd_as_uwyr =
    --                         NVL (cur_old_risk_rec.prrd_as_uwyr,
    --                              cur_risk_rec.ipu_uw_yr
    --                             ),
    --                      prrd_as_code = cur_old_risk_rec.prrd_as_code,
    --                      prrd_facoblig_excess =
    --                         ROUND (  v_facob_rate
    --                                * DECODE (NVL (cur_risk_rec.ipu_reinsure_amt,
    --                                               0
    --                                              ),
    --                                          0, 100,
    --                                          cur_risk_rec.ipu_reinsure_amt / 100
    --                                         ),
    --                                v_rnd
    --                               ),
    --                      prrd_facoblig_limit =
    --                                          cur_old_risk_rec.prrd_facoblig_limit,
    --                      prrd_facoblig_user_excess =
    --                                    cur_old_risk_rec.prrd_facoblig_user_excess,
    --                      prrd_cede_pool = cur_old_risk_rec.prrd_cede_pool,
    --                      prrd_prev_net_rate=cur_old_risk_rec.prrd_comp_net_rate,
    --                        prrd_prev_net_retention=v_prev_net_retention,
    --                        prrd_net_prev_prem=v_net_prev_prem,
    --                        prrd_ri_prev_prem=v_ri_prev_prem,
    --                        prrd_prev_ri_si=v_prev_ri_si,
    --                        prrd_prev_facre_si=v_prev_facre_amt,
    --                        prrd_cumm_ri_prem=v_cumm_ri_prem,
    --                        prrd_prev_facre_prem= v_prev_facre_prem
    --                WHERE prrd_ipu_code = cur_risk_rec.ipu_code
    --                  AND prrd_code = v_prrd_code
    --                  AND prrd_tran_no = v_trans_no;
    --            END IF;
    --
    --            DBMS_OUTPUT.put_line (   'previous cessions'
    --                                  || cur_risk_rec.ipu_code
    --                                  || '='
    --                                  || cur_risk_rec.ipu_code
    --                                  || '='
    --                                  || v_prev_prrd_code
    --                                 );
    --
    --            /** check if the risk arrangement is clean cut or uw year
    --            if its underwriting year use the previus details to populate foward
    --            else if it clean cut then use the prevoius cesstion info to populate for the current
    --            year treaty. first check if the previous recorsds are for this year or not***/
    --            FOR cur_prev_treaty_cession_rec IN
    --               cur_prev_treaty_cession (cur_risk_rec.ipu_code,
    --                                        cur_risk_rec.ipu_code,
    --                                        v_prev_prrd_code
    --                                       )
    --            LOOP
    --               DBMS_OUTPUT.put_line ('222previous cessions');
    --               v_rei_code := NULL;
    --               v_as_code := NULL;
    --               v_rei_code := cur_prev_treaty_cession_rec.ptotr_rei_code;
    --               v_as_code := cur_prev_treaty_cession_rec.ptotr_as_code;
    --               v_ctl_code := cur_prev_treaty_cession_rec.ptotr_ctl_code;
    --
    --               IF NVL (cur_prev_treaty_cession_rec.ptotr_allowed_rate, 0) = 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('3333previous cessions');
    --
    --                  BEGIN
    --                     SELECT ctl_cede_rate
    --                       INTO v_allowed_rate
    --                       FROM gin_class_treaty_limits
    --                      WHERE ctl_code = v_ctl_code;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        BEGIN
    --                           SELECT rei_cede_rate
    --                             INTO v_allowed_rate
    --                             FROM gin_treaty_setups
    --                            WHERE rei_code = v_rei_code;
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error determining the allowed cede rate for a previous apportionment.1.'
    --                                 );
    --                        END;
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Error determining the allowed cede rate for a previous apportionment.2.'
    --                           );
    --                  END;
    --               ELSE
    --                  v_allowed_rate :=
    --                               cur_prev_treaty_cession_rec.ptotr_allowed_rate;
    --               END IF;
    --
    --               DBMS_OUTPUT.put_line
    --                                (   'previous cessions'
    --                                 || cur_prev_treaty_cession_rec.ptotr_cession_pct
    --                                );
    --
    --               BEGIN
    --                  INSERT INTO gin_policy_rein_risk_details
    --                              (ptotr_code,
    --                               ptotr_risk_cur_code,
    --                               ptotr_trt_cur_code,
    --                               ptotr_rei_code,
    --                               ptotr_trt_code,
    --                               ptotr_trt_sht_desc,
    --                               ptotr_clt_scl_code,
    --                               ptotr_rate,
    --                               ptotr_rate_type,
    --                               ptotr_property_id,
    --                               ptotr_uwyr,
    --                               ptotr_ipu_code,
    --                               ptotr_pol_batch_no,
    --                               ptotr_pol_policy_no,
    --                               ptotr_pol_ren_endos_no,
    --                               ptotr_risk_cur_symbol,
    --                               ptotr_trt_cur_symbol,
    --                               ptotr_sect_code,
    --                               ptotr_ta_code,
    --                               ptotr_as_code,
    --                               ptotr_trs_code,
    --                               ptotr_trs_sht_desc,
    --                               ptotr_prev_cession_rate,
    --                               ptotr_ggt_tran_no, ptotr_tran_type,
    --                               ptotr_prrd_code,
    --                               ptotr_cession_pct,
    --                               ptotr_allowed_rate,
    --                               ptotr_risk_si_pcur,
    --                               ptotr_risk_prem_pcur
    --                              )
    --                       VALUES (ptotr_code_seq.NEXTVAL,
    --                               cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trt_cur_code,
    --                               v_rei_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trt_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
    --                               cur_prev_treaty_cession_rec.ptotr_clt_scl_code,
    --                               cur_prev_treaty_cession_rec.ptotr_rate,
    --                               cur_prev_treaty_cession_rec.ptotr_rate_type,
    --                               cur_risk_rec.ipu_property_id,
    --                               cur_risk_rec.ipu_uw_yr,
    --                               cur_risk_rec.ipu_code,
    --                               cur_risk_rec.ipu_pol_batch_no,
    --                               cur_risk_rec.ipu_pol_policy_no,
    --                               cur_risk_rec.ipu_pol_ren_endos_no,
    --                               cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
    --                               cur_prev_treaty_cession_rec.ptotr_trt_cur_symbol,
    --                               cur_prev_treaty_cession_rec.ptotr_sect_code,
    --                               cur_prev_treaty_cession_rec.ptotr_ta_code,
    --                               v_as_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trs_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
    --                               cur_prev_treaty_cession_rec.ptotr_cession_pct,
    --                               v_trans_no, v_trans_type,
    --                               v_prrd_code,
    --                               cur_prev_treaty_cession_rec.ptotr_cession_pct,
    --                               v_allowed_rate,
    --                               cur_risk_rec.ipu_reinsure_amt,
    --                               cur_risk_rec.ipu_endos_diff_amt
    --                              );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error in populate_prev_cessins :- Unable to insert previous treaty details...'
    --                        );
    --               END;
    --
    --               FOR cur_participant_rec IN cur_participant (v_rei_code)
    --               LOOP
    --                  BEGIN
    --                     INSERT INTO gin_participations
    --                                 (part_code,
    --                                  part_cede_rate,
    --                                  part_trt_code,
    --                                  part_trt_sht_desc,
    --                                  part_agnt_agent_code,
    --                                  part_agnt_sht_desc,
    --                                  part_ptotr_code, part_rei_code,
    --                                  part_pol_cur_code,
    --                                  part_pol_cur_symbol,
    --                                  part_uwyr,
    --                                  part_pol_batch_no,
    --                                  part_pol_policy_no,
    --                                  part_pol_ren_endos_no,
    --                                  part_ipu_code,
    --                                  part_ta_code,
    --                                  part_as_code,
    --                                  part_fiscal_year,
    --                                  part_acc_posted,
    --                                  part_trs_code,
    --                                  part_trs_sht_desc,
    --                                  part_scl_code, part_ggt_tran_no,
    --                                  part_tran_type, part_prrd_code,
    --                                  part_trpa_code
    --                                 )
    --                          VALUES (gin_part_code_seq.NEXTVAL,
    --                                  cur_participant_rec.trpa_comp_rate,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
    --                                  cur_participant_rec.trpa_agnt_agent_code,
    --                                  cur_participant_rec.trpa_agnt_sht_desc,
    --                                  ptotr_code_seq.CURRVAL, v_rei_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
    --                                  cur_risk_rec.ipu_uw_yr,
    --                                  cur_risk_rec.ipu_pol_batch_no,
    --                                  cur_risk_rec.ipu_pol_policy_no,
    --                                  cur_risk_rec.ipu_pol_ren_endos_no,
    --                                  cur_risk_rec.ipu_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_ta_code,
    --                                  v_as_code,
    --                                  TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')),
    --                                  'R',
    --                                  cur_prev_treaty_cession_rec.ptotr_trs_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
    --                                  cur_risk_rec.ipu_sec_scl_code, v_trans_no,
    --                                  v_trans_type, v_prrd_code,
    --                                  cur_participant_rec.trpa_code
    --                                 );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Error in populate prev cessions :- Unable to insert participants details...'
    --                           );
    --                  END;
    --               END LOOP;                          --cur_prev_participation_rec
    --            END LOOP;
    --
    --            SELECT prrd_facre_amount, prrd_facoblig_excess
    --              INTO v_amnt, v_obligamnt
    --              FROM gin_policy_risk_ri_dtls
    --             WHERE prrd_code = v_prrd_code;
    --
    --
    --
    --
    --            DBMS_OUTPUT.put_line (   '7777777777v_amnt   ='
    --                                  || v_amnt
    --                                  || 'v_obligamnt   ='
    --                                  || v_obligamnt
    --                                 );
    --
    --            FOR cur_pool_rec IN cur_pool (v_prev_prrd_code)
    --            LOOP
    --               BEGIN
    --                  SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                    || gin_prprd_code_seq.NEXTVAL
    --                                   )
    --                    INTO v_prprd_code
    --                    FROM DUAL;
    --
    --                  INSERT INTO gin_pol_rein_pool_risk_details
    --                              (prprd_code, prprd_risk_prem_amt,
    --                               prprd_risk_own_ret_amt, prprd_risk_cur_code,
    --                               prprd_risk_exch_rate, prprd_scrpr_code,
    --                               prprd_rein_pool_rate,
    --                               prprd_ipu_code,
    --                               prprd_scl_code,
    --                               prprd_covt_code,
    --                               prprd_pol_batch_no, prprd_rein_pool_amt,
    --                               prprd_rein_pool_comm_rate,
    --                               prprd_rein_pool_vat_rate,
    --                               prprd_rein_pool_comm_amt,
    --                               prprd_rein_pool_vat_amt,
    --                               prprd_prev_prprd_code, prprd_ggt_tran_no,
    --                               prprd_property_id,
    --                               prprd_uwyr,
    --                               prprd_pol_ren_endos_no,
    --                               prprd_date, prprd_risk_trt_own_ret_amt,
    --                               prprd_pta_code, prprd_os_claim_amt,
    --                               prprd_paid_claim_amt, prprd_pool_net_amt,
    --                               prprd_prrd_code, prprd_refund_prem,
    --                               prprd_refund_comm, prprd_prev_pool_amt,
    --                               prprd_prev_pool_comm_rate,
    --                               prprd_prev_pool_rate
    --                              )
    --                       VALUES (v_prprd_code, cur_risk_rec.ipu_endos_diff_amt,
    --                               NULL, cur_pool_rec.prprd_risk_cur_code,
    --                               v_exch_rate, cur_pool_rec.prprd_scrpr_code,
    --                               cur_pool_rec.prprd_rein_pool_rate,
    --                               cur_pool_rec.prprd_ipu_code,
    --                               cur_pool_rec.prprd_scl_code,
    --                               cur_pool_rec.prprd_covt_code,
    --                               cur_pool_rec.prprd_pol_batch_no, NULL,
    --                               cur_pool_rec.prprd_rein_pool_comm_rate,
    --                               cur_pool_rec.prprd_rein_pool_vat_rate,
    --                               NULL,
    --                               NULL,
    --                               cur_pool_rec.prprd_code, v_trans_no,
    --                               cur_pool_rec.prprd_property_id,
    --                               cur_pool_rec.prprd_uwyr,
    --                               cur_pool_rec.prprd_pol_ren_endos_no,
    --                               TRUNC (SYSDATE), NULL,
    --                               cur_pool_rec.prprd_pta_code, NULL,
    --                               NULL, NULL,
    --                               v_prrd_code, NULL,
    --                               NULL, cur_pool_rec.prprd_rein_pool_amt,
    --                               cur_pool_rec.prprd_rein_pool_comm_rate,
    --                               cur_pool_rec.prprd_rein_pool_rate
    --                              );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('Unable to create risk RI details, ...');
    --               END;
    --            END LOOP;
    --         --cur_prev_treaty_cession
    --         END LOOP;                                                 --old risks
    --      --MESSAGE('HERE 4');PAUSE;
    --      --END IF;
    --      END LOOP;
    --   --  COMMIT;
    --     --RAISE_ERROR('STOP');
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null.Continue if covered by XOL...'
    --            );
    --   END;
    --  PROCEDURE pop_grp_prev_cessions (---commented out on 11th November 2018 Premium Brdx issue---
    --      v_ipu_code          IN       NUMBER,
    --      v_trans_no          IN       NUMBER,
    --      v_trans_type        IN       VARCHAR2,
    --      v_cur_code          IN       NUMBER,
    --      v_prrd_code         IN OUT   NUMBER,
    --      v_recompute_facre   IN       VARCHAR2 DEFAULT 'N',
    --      v_user              IN       VARCHAR2
    --   )
    --   IS
    --      v_trt_uwyr                  NUMBER         := NULL;
    --      cnt                         NUMBER         := 1;
    --      v_retention_amt             NUMBER         := 0;
    --      v_facre_rate                NUMBER         := 0;
    --      al_id                       NUMBER;
    --      v_cnt                       NUMBER         := 0;
    --      --v_prrd_code    NUMBER ;
    --      v_errmsg                    VARCHAR2 (200);
    --      v_facre_amt                 NUMBER         := 0;
    --      v_zero_devide               EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
    --      v_scl_code                  NUMBER;
    --      v_grp_tot_ret               NUMBER         := 0;
    --      v_grp_pct                   NUMBER         := 0;
    --      v_group_si                  NUMBER         := 0;
    --      v_grp_flag                  BOOLEAN        := FALSE;
    --      v_reinsure_amt              NUMBER         := 0;
    --      v_no_ri_si                  VARCHAR2 (2);
    --      v_rei_code                  NUMBER;
    --      v_as_code                   NUMBER;
    --      v_exch_rate                 NUMBER         := 0;
    --      v_rnd                       NUMBER         := 0;
    --      v_bcur_rnd                  NUMBER         := 0;
    --      v_prev_prrd_code            NUMBER;
    --      v_prev_com_retention_rate   NUMBER         := 0;
    --      v_prev_comp_net_rate        NUMBER         := 0;
    --      v_ctl_code                  NUMBER;
    --      v_allowed_rate              NUMBER;
    --      --v_facre_amount              NUMBER;
    --      v_facob_rate                NUMBER;
    --      v_fc_amount                 NUMBER;
    --      v_facob_amt                 NUMBER;
    --      v_facob_amt_rate            NUMBER;
    --      v_facre_amt_rate            NUMBER;
    --      v_fc_rate                   NUMBER;
    --      v_prorata_rate              NUMBER;
    --      v_fc_wef_date               DATE;
    --      v_prem                      NUMBER;
    --      v_fc_prem_diff_amt          NUMBER;
    --      v_comm_amt                  NUMBER;
    --      v_prev_prem                 NUMBER;
    --      v_prev_comm                 NUMBER;
    --      v_prprd_code                NUMBER;
    --      v_amnt                      NUMBER;
    --      v_obligamnt                 NUMBER;
    --      v_eq_prem                   NUMBER;
    --       v_prev_ri_si      NUMBER;
    --      v_prev_facre_amt  NUMBER;
    --
    --        v_prev_net_retention NUMBER;
    --        v_net_prev_prem NUMBER;
    --        v_ri_prev_prem NUMBER;
    --        v_cumm_ri_prem NUMBER;
    --        v_prev_facre_prem NUMBER;
    --
    --      CURSOR cur_risk
    --      IS
    --         SELECT ipu_code, ipu_property_id, ipu_item_desc, ipu_qty,
    --                  ipu_value, ipu_wef, ipu_wet, ipu_pol_batch_no,
    --                  ipu_pol_policy_no, ipu_pol_ren_endos_no,
    --                  ipu_comp_retention, ipu_pol_est_max_loss,
    --                  ipu_avail_fulc_bal, ipu_endos_diff_amt, ipu_sec_scl_code,
    --                  ipu_related_ipu_code, ipu_bp, ipu_gp, ipu_fp, ipu_fap,
    --                  ipu_nett_premium, ipu_eml_si, ipu_cummulative_reins,
    --                  ipu_sec_sect_code, ipu_reinsure_amt, ipu_facre_amount,
    --                  ipu_prev_ipu_code, ipu_grp_si_risk_pct, ipu_grp_top_loc,
    --                  ipu_grp_comp_gross_ret, ipu_relr_code, ipu_eff_wef,
    --                  ipu_eff_wet, ipu_id, ipu_uw_yr, ipu_status,
    --                  ipu_earthqke_prem_diff, pol_policy_status, ipu_rc_code
    --           FROM gin_policies,gin_insured_property_unds
    --          WHERE pol_batch_no = ipu_pol_batch_no
    --          and ipu_code = v_ipu_code;
    --
    --      CURSOR cur_old_risk (v_prev_ipu NUMBER)
    --      IS
    --         SELECT prrd_ipu_code, prrd_com_retention_rate, prrd_code,
    --                prrd_comp_net_rate, prrd_comp_retention,
    --                prrd_facoblig_user_excess, prrd_as_uwyr, prrd_as_code,
    --                prrd_facoblig_excess, prrd_facoblig_limit, prrd_cede_pool
    --           FROM gin_policy_risk_ri_dtls
    --          WHERE prrd_ipu_code = v_prev_ipu
    --            AND prrd_current = 'Y'
    --            AND prrd_idx =
    --                    (SELECT MAX (prrd_idx)
    --                       FROM gin_policy_risk_ri_dtls
    --                      WHERE prrd_ipu_code = v_prev_ipu AND prrd_current = 'Y');
    --
    --      CURSOR cur_prev_treaty_cession (
    --         v_old_ipu_code    NUMBER,
    --         v_ipu             NUMBER,
    --         v_old_prrd_code   NUMBER
    --      )
    --      IS
    --         SELECT ptotr_code, ptotr_risk_cur_code, ptotr_trt_cur_code,
    --                ptotr_risk_si_pcur, ptotr_risk_prem_pcur, ptotr_rei_code,
    --                ptotr_trt_code, ptotr_trt_sht_desc, ptotr_clt_scl_code,
    --                ptotr_rate, ptotr_rate_type, ptotr_property_id, ptotr_uwyr,
    --                ptotr_ipu_code, ptotr_risk_cur_symbol, ptotr_trt_cur_symbol,
    --                ptotr_sect_code, ptotr_ta_code, ptotr_as_code, ptotr_trs_code,
    --                ptotr_trs_sht_desc, ptotr_prev_cession_rate,
    --                ptotr_cession_pct, ta_type, ptotr_date, ptotr_ctl_code,
    --                ptotr_allowed_rate
    --           FROM gin_policy_rein_risk_details, gin_treaty_arrangements
    --          WHERE ptotr_ta_code = ta_code
    --            AND ptotr_ipu_code = v_old_ipu_code
    --            AND ptotr_prrd_code = v_old_prrd_code
    --            AND ptotr_rei_code NOT IN (
    --                   SELECT ptotr_rei_code
    --                     FROM gin_policy_rein_risk_details
    --                    WHERE ptotr_ipu_code = v_ipu
    --                      AND ptotr_ggt_tran_no = v_trans_no);
    --
    --      CURSOR cur_participant (v_rei_code IN NUMBER)
    --      IS
    --         SELECT trpa_agnt_agent_code, trpa_agnt_sht_desc, trpa_rei_code,
    --                trpa_uw_year, trpa_comp_rate, trpa_rei_prem_taxable,
    --                trpa_trs_code, trpa_trs_sht_desc, trpa_code
    --           FROM gin_treaty_participants
    --          WHERE trpa_rei_code = v_rei_code;
    --
    --      CURSOR cur_facre (v_old_prrd_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_facre_cessions
    --          WHERE fc_prrd_code = v_old_prrd_code;
    --
    --      CURSOR cur_pool (v_old_prrd_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_pol_rein_pool_risk_details
    --          WHERE prprd_prrd_code = v_old_prrd_code;
    --   BEGIN
    --      v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --
    ----raise_error('v_ipu_code='||v_ipu_code);
    --      FOR cur_risk_rec IN cur_risk
    --      LOOP
    --         v_scl_code := NULL;
    --
    --         BEGIN
    --            SELECT NVL (scl_no_ri_si, 'N')
    --              INTO v_no_ri_si
    --              FROM gin_sub_classes
    --             WHERE scl_code = cur_risk_rec.ipu_sec_scl_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                     (   'Unable to retrieve RI SI status for the sub class '
    --                      || cur_risk_rec.ipu_sec_scl_code
    --                     );
    --         END;
    --
    --         IF     NVL (v_no_ri_si, 'N') = 'N'
    --            AND NVL (cur_risk_rec.ipu_reinsure_amt, 0) = 0
    --         THEN
    --            raise_error
    --                   ('No reinsure amount specified, cannot reinsure this risk');
    --         END IF;
    --
    --          -- IF NVL (cur_risk_rec.ipu_status, 'O') != 'RN'
    --         --  THEN
    --         v_scl_code := cur_risk_rec.ipu_sec_scl_code;
    --
    --         -- open arrangements cursor
    --         --reserve facre sessions if its not a new business or renewal
    --         BEGIN
    --            v_prrd_code := NULL;
    --
    --            SELECT prrd_code, prrd_prev_prrd_code, prrd_com_retention_rate,
    --                   prrd_comp_net_rate
    --              INTO v_prrd_code, v_prev_prrd_code, v_prev_com_retention_rate,
    --                   v_prev_comp_net_rate
    --              FROM gin_policy_risk_ri_dtls
    --             WHERE prrd_ipu_code = cur_risk_rec.ipu_code
    --               AND prrd_tran_no = v_trans_no;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               v_prrd_code := NULL;
    --               v_prev_prrd_code := NULL;
    --         END;
    --
    --         v_retention_amt := 0;
    --         v_grp_tot_ret := 0;
    --
    --         FOR cur_old_risk_rec IN cur_old_risk (cur_risk_rec.ipu_code)
    --         LOOP
    --            -- raise_error(23232322);
    --            v_prev_prrd_code := cur_old_risk_rec.prrd_code;
    --
    --            BEGIN
    --               v_facre_rate := 0;
    --               v_facre_amt := 0;
    --
    --               SELECT SUM (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', 0,
    --                                   NVL (fc_rate, 0)
    --                                  )
    --                          ),
    --                      SUM (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', NVL (fc_rate, 0),
    --                                   0
    --                                  )
    --                          )
    --                 INTO v_facre_rate,
    --                      v_facob_rate
    --                 FROM gin_facre_cessions
    --                WHERE fc_ipu_code = cur_risk_rec.ipu_code
    --                  AND fc_prrd_code = v_prev_prrd_code
    --                  AND fc_amt_or_rate = 'R';
    --
    --               DBMS_OUTPUT.put_line (   'v_facre_rate='
    --                                     || v_facre_rate
    --                                     || 'v_facob_rate='
    --                                     || v_facob_rate
    --                                    );
    --
    --               SELECT SUM (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', 0,
    --                                   NVL (fc_amount, 0)
    --                                  )
    --                          ),
    --                      SUM (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', NVL (fc_amount, 0),
    --                                   0
    --                                  )
    --                          )
    --                 INTO v_facre_amt,
    --                      v_facob_amt
    --                 FROM gin_facre_cessions
    --                WHERE fc_ipu_code = cur_risk_rec.ipu_code
    --                  AND fc_prrd_code = v_prev_prrd_code
    --                  AND fc_amt_or_rate = 'A';
    --
    --               DBMS_OUTPUT.put_line (   'v_facre_amt='
    --                                     || v_facre_amt
    --                                     || 'v_facob_amt='
    --                                     || v_facob_amt
    --                                    );
    --
    --               IF NVL (cur_risk_rec.ipu_reinsure_amt, 0) != 0
    --               THEN
    --                  v_facre_amt_rate :=
    --                       NVL (v_facre_amt, 0)
    --                     / NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                     * 100;
    --                  v_facob_amt_rate :=
    --                       NVL (v_facob_amt, 0)
    --                     / NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                     * 100;
    --               ELSE
    --                  v_facre_amt := 0;
    --               END IF;
    --
    --               v_facre_rate :=
    --                              NVL (v_facre_rate, 0)
    --                              + NVL (v_facre_amt_rate, 0);
    --               v_facob_rate :=
    --                              NVL (v_facob_rate, 0)
    --                              + NVL (v_facob_amt_rate, 0);
    --
    --               IF     NVL (v_facre_rate, 0) + NVL (v_facob_rate, 0) > 100
    --                  AND NVL (v_recompute_facre, 'N') = 'N'
    --               THEN
    --                  raise_error
    --                             ('New facre percentage is greater than the 100%');
    --               END IF;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_facre_rate := 0;
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (' ');
    --            END;
    --
    --           IF cur_risk_rec.pol_policy_status IN ('NB', 'RN', 'SP','CO','CN','EN')
    --           THEN
    --              v_eq_prem :=
    --                   cur_risk_rec.ipu_earthqke_prem_diff
    --                 * SIGN (NVL (cur_risk_rec.ipu_endos_diff_amt, 0));
    --           ELSE
    --              v_eq_prem := 0;
    --           END IF;
    --
    --            v_prev_net_retention :=NVL(get_risk_comp_retention(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,cur_risk_rec.ipu_code),0);
    --            v_net_prev_prem :=NVL(get_risk_cumulative_prem(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,'O',cur_risk_rec.ipu_code),0);
    --            v_ri_prev_prem :=NVL(get_risk_cumulative_prem(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,'T',cur_risk_rec.ipu_code),0);
    --            v_prev_ri_si :=get_risk_ri_si(cur_risk_rec.ipu_id,cur_risk_rec.ipu_code,cur_risk_rec.ipu_uw_yr);
    --            v_cumm_ri_prem :=NVL(get_risk_cumulative_prem(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,'G',cur_risk_rec.ipu_code),0);
    --            v_prev_facre_prem := NVL(get_risk_cumulative_prem(cur_risk_rec.ipu_id,cur_risk_rec.ipu_uw_yr,'F',cur_risk_rec.ipu_code),0);
    --
    --            IF v_prrd_code IS NULL
    --            THEN
    --               BEGIN
    --                  SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                    || gin_prrd_code_seq.NEXTVAL
    --                                   )
    --                    INTO v_prrd_code
    --                    FROM DUAL;
    --
    --                  INSERT INTO gin_policy_risk_ri_dtls
    --                              (prrd_code, prrd_ipu_code, prrd_idx,
    --                               prrd_tran_no, prrd_wef,
    --                               prrd_wet, prrd_current,
    --                               prrd_comp_retention,
    --                               prrd_excess_pct,
    --                               prrd_avail_fulc_bal,
    --                               prrd_gross_comp_retention,
    --                               prrd_com_retention_rate,
    --                               prrd_grp_si_risk_pct,
    --                               prrd_grp_top_loc,
    --                               prrd_grp_comp_gross_ret,
    --                               prrd_grp_comp_net_ret, prrd_ri_prem,
    --                               prrd_prev_ret_rate,
    --                               prrd_prev_facre_rate, prrd_earthquake_prem,
    --                                  prrd_ri_net_less_eq_prem,
    --                               prrd_as_uwyr,
    --                               prrd_prev_prrd_code,
    --                               prrd_as_code,
    --                               prrd_facoblig_excess,
    --                               prrd_facoblig_limit,
    --                               prrd_facoblig_user_excess,
    --                               prrd_cede_pool,
    --                               prrd_effective_date,
    --                                prrd_prev_net_rate,
    --                                prrd_prev_net_retention,
    --                                prrd_net_prev_prem,
    --                                prrd_ri_prev_prem,
    --                                prrd_prev_ri_si,
    --                                prrd_prev_facre_si ,
    --                                prrd_cumm_ri_prem,
    --                                prrd_prev_facre_prem
    --                              )
    --                       VALUES (v_prrd_code, cur_risk_rec.ipu_code, 1,
    --                               v_trans_no, cur_risk_rec.ipu_wef,
    --                               cur_risk_rec.ipu_wet, 'Y',
    --                               ROUND
    --                                  (  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                                   * (  DECODE
    --                                             (NVL (v_prev_com_retention_rate,
    --                                                   0
    --                                                  ),
    --                                              0, 100,
    --                                              v_prev_com_retention_rate
    --                                             )
    --                                      / 100
    --                                     )
    --                                   * NVL (v_grp_pct, 100)
    --                                  ),
    --                               ROUND (v_facre_rate, 4),
    --                               ROUND   (  v_facre_rate * DECODE (NVL (cur_risk_rec.ipu_reinsure_amt,   0   ),    0, 100,    NVL  (cur_risk_rec.ipu_reinsure_amt,   0   )   / 100   )  ),
    --                               ROUND    (  NVL (cur_risk_rec.ipu_reinsure_amt, 0)  * (  DECODE (NVL (v_prev_com_retention_rate, 0   ),  0, 100,
    --                                  v_prev_com_retention_rate   )   / 100   )   * NVL (v_grp_pct, 100)  ),
    --                               v_prev_com_retention_rate,
    --                               cur_risk_rec.ipu_grp_si_risk_pct,
    --                               cur_risk_rec.ipu_grp_top_loc,
    --                               cur_risk_rec.ipu_grp_comp_gross_ret,
    --                               0, cur_risk_rec.ipu_endos_diff_amt,
    --                               v_prev_comp_net_rate,
    --                               ROUND (v_facre_rate, 4), v_eq_prem,
    --                                    ROUND
    --                                       (NVL
    --                                           (cur_risk_rec.ipu_endos_diff_amt,
    --                                            0
    --                                           )
    --                                       )
    --                                  - v_eq_prem,
    --                               NVL (cur_old_risk_rec.prrd_as_uwyr,
    --                                    cur_risk_rec.ipu_uw_yr
    --                                   ),
    --                               cur_old_risk_rec.prrd_code,
    --                               cur_old_risk_rec.prrd_as_code,
    --                               ROUND
    --                                  (  v_facob_rate
    --                                   * DECODE
    --                                         (NVL (cur_risk_rec.ipu_reinsure_amt,
    --                                               0
    --                                              ),
    --                                          0, 100,
    --                                          cur_risk_rec.ipu_reinsure_amt / 100
    --                                         ),
    --                                   v_rnd
    --                                  ),
    --                               cur_old_risk_rec.prrd_facoblig_limit,
    --                               cur_old_risk_rec.prrd_facoblig_user_excess,
    --                               cur_old_risk_rec.prrd_cede_pool,
    --                               cur_risk_rec.ipu_wef,
    --                                    cur_old_risk_rec.prrd_comp_net_rate,
    --                                    -- cur_old_risk_rec.prrd_comp_retention,
    --                                    v_prev_net_retention,
    --                                    --                                  cur_old_risk_rec.prrd_net_prem,
    --                                    v_net_prev_prem,
    --                                    --cur_old_risk_rec.prrd_ri_prem,
    --                                    v_ri_prev_prem,
    --                                    -- v_prev_ri_si,
    --                                    v_prev_ri_si,
    --                                    v_prev_facre_amt,
    --                                    v_cumm_ri_prem,
    --                                    v_prev_facre_prem
    --                              );
    --               END;
    --
    --               BEGIN
    --                  UPDATE gin_insured_property_unds
    --                     SET ipu_current_prrd_code = v_prrd_code
    --                   WHERE ipu_code = cur_risk_rec.ipu_code;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Unable to update risks current RI details code, ...'
    --                        );
    --               END;
    --            ELSE
    --               -- raise_error( 'here='||v_facre_rate);
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_comp_retention =
    --                         ROUND (((  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                                  * DECODE (NVL (v_prev_comp_net_rate, 0),
    --                                            0, 100,
    --                                            v_prev_comp_net_rate
    --                                           )
    --                                  / 100
    --                                 )
    --                                ),
    --                                v_rnd
    --                               ),
    --                      prrd_avail_fulc_bal =
    --                         ROUND (  v_facre_rate
    --                                * DECODE (NVL (cur_risk_rec.ipu_reinsure_amt,
    --                                               0
    --                                              ),
    --                                          0, 100,
    --                                          cur_risk_rec.ipu_reinsure_amt / 100
    --                                         ),
    --                                v_rnd
    --                               ),
    --                      prrd_excess_pct = ROUND (v_facre_rate, 4),
    --                      prrd_gross_comp_retention =
    --                         ROUND (((  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
    --                                  * DECODE (NVL (v_prev_com_retention_rate, 0),
    --                                            0, 100,
    --                                            v_prev_com_retention_rate
    --                                           )
    --                                  / 100
    --                                 )
    --                                ),
    --                                v_rnd
    --                               ),
    --                      prrd_com_retention_rate = v_prev_com_retention_rate,
    --                      prrd_grp_top_loc = cur_risk_rec.ipu_grp_top_loc,
    --                      prrd_grp_si_risk_pct = cur_risk_rec.ipu_grp_si_risk_pct,
    --                      prrd_grp_comp_gross_ret =
    --                                           cur_risk_rec.ipu_grp_comp_gross_ret,
    --                      prrd_ri_prem = cur_risk_rec.ipu_endos_diff_amt,
    --                         prrd_earthquake_prem = v_eq_prem,
    --                         prrd_ri_net_less_eq_prem =
    --                              ROUND
    --                                   (NVL (cur_risk_rec.ipu_endos_diff_amt,
    --                                         0
    --                                        )
    --                                   )
    --                            - v_eq_prem,
    --                      prrd_comp_net_rate = NVL (v_prev_comp_net_rate, 0),
    --                      prrd_prev_ret_rate = v_prev_comp_net_rate,
    --                      prrd_prev_facre_rate = ROUND (v_facre_rate, 4),
    --                      prrd_as_uwyr =
    --                         NVL (cur_old_risk_rec.prrd_as_uwyr,
    --                              cur_risk_rec.ipu_uw_yr
    --                             ),
    --                      prrd_as_code = cur_old_risk_rec.prrd_as_code,
    --                      prrd_facoblig_excess =
    --                         ROUND (  v_facob_rate
    --                                * DECODE (NVL (cur_risk_rec.ipu_reinsure_amt,
    --                                               0
    --                                              ),
    --                                          0, 100,
    --                                          cur_risk_rec.ipu_reinsure_amt / 100
    --                                         ),
    --                                v_rnd
    --                               ),
    --                      prrd_facoblig_limit =
    --                                          cur_old_risk_rec.prrd_facoblig_limit,
    --                      prrd_facoblig_user_excess =
    --                                    cur_old_risk_rec.prrd_facoblig_user_excess,
    --                      prrd_cede_pool = cur_old_risk_rec.prrd_cede_pool,
    --                      prrd_prev_net_rate=cur_old_risk_rec.prrd_comp_net_rate,
    --                        prrd_prev_net_retention=v_prev_net_retention,
    --                        prrd_net_prev_prem=v_net_prev_prem,
    --                        prrd_ri_prev_prem=v_ri_prev_prem,
    --                        prrd_prev_ri_si=v_prev_ri_si,
    --                        prrd_prev_facre_si=v_prev_facre_amt,
    --                        prrd_cumm_ri_prem=v_cumm_ri_prem,
    --                        prrd_prev_facre_prem= v_prev_facre_prem
    --                WHERE prrd_ipu_code = cur_risk_rec.ipu_code
    --                  AND prrd_code = v_prrd_code
    --                  AND prrd_tran_no = v_trans_no;
    --            END IF;
    --
    --            DBMS_OUTPUT.put_line (   'previous cessions'
    --                                  || cur_risk_rec.ipu_code
    --                                  || '='
    --                                  || cur_risk_rec.ipu_code
    --                                  || '='
    --                                  || v_prev_prrd_code
    --                                 );
    --
    --            /** check if the risk arrangement is clean cut or uw year
    --            if its underwriting year use the previus details to populate foward
    --            else if it clean cut then use the prevoius cesstion info to populate for the current
    --            year treaty. first check if the previous recorsds are for this year or not***/
    --            FOR cur_prev_treaty_cession_rec IN
    --               cur_prev_treaty_cession (cur_risk_rec.ipu_code,
    --                                        cur_risk_rec.ipu_code,
    --                                        v_prev_prrd_code
    --                                       )
    --            LOOP
    --               DBMS_OUTPUT.put_line ('222previous cessions');
    --               v_rei_code := NULL;
    --               v_as_code := NULL;
    --               v_rei_code := cur_prev_treaty_cession_rec.ptotr_rei_code;
    --               v_as_code := cur_prev_treaty_cession_rec.ptotr_as_code;
    --               v_ctl_code := cur_prev_treaty_cession_rec.ptotr_ctl_code;
    --
    --               IF NVL (cur_prev_treaty_cession_rec.ptotr_allowed_rate, 0) = 0
    --               THEN
    --                  DBMS_OUTPUT.put_line ('3333previous cessions');
    --
    --                  BEGIN
    --                     SELECT ctl_cede_rate
    --                       INTO v_allowed_rate
    --                       FROM gin_class_treaty_limits
    --                      WHERE ctl_code = v_ctl_code;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        BEGIN
    --                           SELECT rei_cede_rate
    --                             INTO v_allowed_rate
    --                             FROM gin_treaty_setups
    --                            WHERE rei_code = v_rei_code;
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error determining the allowed cede rate for a previous apportionment.1.'
    --                                 );
    --                        END;
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Error determining the allowed cede rate for a previous apportionment.2.'
    --                           );
    --                  END;
    --               ELSE
    --                  v_allowed_rate :=
    --                               cur_prev_treaty_cession_rec.ptotr_allowed_rate;
    --               END IF;
    --
    --               DBMS_OUTPUT.put_line
    --                                (   'previous cessions'
    --                                 || cur_prev_treaty_cession_rec.ptotr_cession_pct
    --                                );
    --
    --               BEGIN
    --                  INSERT INTO gin_policy_rein_risk_details
    --                              (ptotr_code,
    --                               ptotr_risk_cur_code,
    --                               ptotr_trt_cur_code,
    --                               ptotr_rei_code,
    --                               ptotr_trt_code,
    --                               ptotr_trt_sht_desc,
    --                               ptotr_clt_scl_code,
    --                               ptotr_rate,
    --                               ptotr_rate_type,
    --                               ptotr_property_id,
    --                               ptotr_uwyr,
    --                               ptotr_ipu_code,
    --                               ptotr_pol_batch_no,
    --                               ptotr_pol_policy_no,
    --                               ptotr_pol_ren_endos_no,
    --                               ptotr_risk_cur_symbol,
    --                               ptotr_trt_cur_symbol,
    --                               ptotr_sect_code,
    --                               ptotr_ta_code,
    --                               ptotr_as_code,
    --                               ptotr_trs_code,
    --                               ptotr_trs_sht_desc,
    --                               ptotr_prev_cession_rate,
    --                               ptotr_ggt_tran_no, ptotr_tran_type,
    --                               ptotr_prrd_code,
    --                               ptotr_cession_pct,
    --                               ptotr_allowed_rate,
    --                               ptotr_risk_si_pcur,
    --                               ptotr_risk_prem_pcur
    --                              )
    --                       VALUES (ptotr_code_seq.NEXTVAL,
    --                               cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trt_cur_code,
    --                               v_rei_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trt_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
    --                               cur_prev_treaty_cession_rec.ptotr_clt_scl_code,
    --                               cur_prev_treaty_cession_rec.ptotr_rate,
    --                               cur_prev_treaty_cession_rec.ptotr_rate_type,
    --                               cur_risk_rec.ipu_property_id,
    --                               cur_risk_rec.ipu_uw_yr,
    --                               cur_risk_rec.ipu_code,
    --                               cur_risk_rec.ipu_pol_batch_no,
    --                               cur_risk_rec.ipu_pol_policy_no,
    --                               cur_risk_rec.ipu_pol_ren_endos_no,
    --                               cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
    --                               cur_prev_treaty_cession_rec.ptotr_trt_cur_symbol,
    --                               cur_prev_treaty_cession_rec.ptotr_sect_code,
    --                               cur_prev_treaty_cession_rec.ptotr_ta_code,
    --                               v_as_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trs_code,
    --                               cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
    --                               cur_prev_treaty_cession_rec.ptotr_cession_pct,
    --                               v_trans_no, v_trans_type,
    --                               v_prrd_code,
    --                               cur_prev_treaty_cession_rec.ptotr_cession_pct,
    --                               v_allowed_rate,
    --                               cur_risk_rec.ipu_reinsure_amt,
    --                               cur_risk_rec.ipu_endos_diff_amt
    --                              );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error in populate_prev_cessins :- Unable to insert previous treaty details...'
    --                        );
    --               END;
    --
    --               FOR cur_participant_rec IN cur_participant (v_rei_code)
    --               LOOP
    --                  BEGIN
    --                     INSERT INTO gin_participations
    --                                 (part_code,
    --                                  part_cede_rate,
    --                                  part_trt_code,
    --                                  part_trt_sht_desc,
    --                                  part_agnt_agent_code,
    --                                  part_agnt_sht_desc,
    --                                  part_ptotr_code, part_rei_code,
    --                                  part_pol_cur_code,
    --                                  part_pol_cur_symbol,
    --                                  part_uwyr,
    --                                  part_pol_batch_no,
    --                                  part_pol_policy_no,
    --                                  part_pol_ren_endos_no,
    --                                  part_ipu_code,
    --                                  part_ta_code,
    --                                  part_as_code,
    --                                  part_fiscal_year,
    --                                  part_acc_posted,
    --                                  part_trs_code,
    --                                  part_trs_sht_desc,
    --                                  part_scl_code, part_ggt_tran_no,
    --                                  part_tran_type, part_prrd_code,
    --                                  part_trpa_code
    --                                 )
    --                          VALUES (gin_part_code_seq.NEXTVAL,
    --                                  cur_participant_rec.trpa_comp_rate,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
    --                                  cur_participant_rec.trpa_agnt_agent_code,
    --                                  cur_participant_rec.trpa_agnt_sht_desc,
    --                                  ptotr_code_seq.CURRVAL, v_rei_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
    --                                  cur_risk_rec.ipu_uw_yr,
    --                                  cur_risk_rec.ipu_pol_batch_no,
    --                                  cur_risk_rec.ipu_pol_policy_no,
    --                                  cur_risk_rec.ipu_pol_ren_endos_no,
    --                                  cur_risk_rec.ipu_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_ta_code,
    --                                  v_as_code,
    --                                  TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')),
    --                                  'R',
    --                                  cur_prev_treaty_cession_rec.ptotr_trs_code,
    --                                  cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
    --                                  cur_risk_rec.ipu_sec_scl_code, v_trans_no,
    --                                  v_trans_type, v_prrd_code,
    --                                  cur_participant_rec.trpa_code
    --                                 );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           ('Error in populate prev cessions :- Unable to insert participants details...'
    --                           );
    --                  END;
    --               END LOOP;                          --cur_prev_participation_rec
    --            END LOOP;
    --
    --            SELECT prrd_facre_amount, prrd_facoblig_excess
    --              INTO v_amnt, v_obligamnt
    --              FROM gin_policy_risk_ri_dtls
    --             WHERE prrd_code = v_prrd_code;
    --
    --
    --
    --
    --            DBMS_OUTPUT.put_line (   '7777777777v_amnt   ='
    --                                  || v_amnt
    --                                  || 'v_obligamnt   ='
    --                                  || v_obligamnt
    --                                 );
    --
    --            FOR cur_pool_rec IN cur_pool (v_prev_prrd_code)
    --            LOOP
    --               BEGIN
    --                  SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                    || gin_prprd_code_seq.NEXTVAL
    --                                   )
    --                    INTO v_prprd_code
    --                    FROM DUAL;
    --
    --                  INSERT INTO gin_pol_rein_pool_risk_details
    --                              (prprd_code, prprd_risk_prem_amt,
    --                               prprd_risk_own_ret_amt, prprd_risk_cur_code,
    --                               prprd_risk_exch_rate, prprd_scrpr_code,
    --                               prprd_rein_pool_rate,
    --                               prprd_ipu_code,
    --                               prprd_scl_code,
    --                               prprd_covt_code,
    --                               prprd_pol_batch_no, prprd_rein_pool_amt,
    --                               prprd_rein_pool_comm_rate,
    --                               prprd_rein_pool_vat_rate,
    --                               prprd_rein_pool_comm_amt,
    --                               prprd_rein_pool_vat_amt,
    --                               prprd_prev_prprd_code, prprd_ggt_tran_no,
    --                               prprd_property_id,
    --                               prprd_uwyr,
    --                               prprd_pol_ren_endos_no,
    --                               prprd_date, prprd_risk_trt_own_ret_amt,
    --                               prprd_pta_code, prprd_os_claim_amt,
    --                               prprd_paid_claim_amt, prprd_pool_net_amt,
    --                               prprd_prrd_code, prprd_refund_prem,
    --                               prprd_refund_comm, prprd_prev_pool_amt,
    --                               prprd_prev_pool_comm_rate,
    --                               prprd_prev_pool_rate
    --                              )
    --                       VALUES (v_prprd_code, cur_risk_rec.ipu_endos_diff_amt,
    --                               NULL, cur_pool_rec.prprd_risk_cur_code,
    --                               v_exch_rate, cur_pool_rec.prprd_scrpr_code,
    --                               cur_pool_rec.prprd_rein_pool_rate,
    --                               cur_pool_rec.prprd_ipu_code,
    --                               cur_pool_rec.prprd_scl_code,
    --                               cur_pool_rec.prprd_covt_code,
    --                               cur_pool_rec.prprd_pol_batch_no, NULL,
    --                               cur_pool_rec.prprd_rein_pool_comm_rate,
    --                               cur_pool_rec.prprd_rein_pool_vat_rate,
    --                               NULL,
    --                               NULL,
    --                               cur_pool_rec.prprd_code, v_trans_no,
    --                               cur_pool_rec.prprd_property_id,
    --                               cur_pool_rec.prprd_uwyr,
    --                               cur_pool_rec.prprd_pol_ren_endos_no,
    --                               TRUNC (SYSDATE), NULL,
    --                               cur_pool_rec.prprd_pta_code, NULL,
    --                               NULL, NULL,
    --                               v_prrd_code, NULL,
    --                               NULL, cur_pool_rec.prprd_rein_pool_amt,
    --                               cur_pool_rec.prprd_rein_pool_comm_rate,
    --                               cur_pool_rec.prprd_rein_pool_rate
    --                              );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('Unable to create risk RI details, ...');
    --               END;
    --            END LOOP;
    --         --cur_prev_treaty_cession
    --         END LOOP;                                                 --old risks
    --      --MESSAGE('HERE 4');PAUSE;
    --      --END IF;
    --      END LOOP;
    --   --  COMMIT;
    --     --RAISE_ERROR('STOP');
    --   EXCEPTION
    --      WHEN v_zero_devide
    --      THEN
    --         raise_error
    --            ('Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null.Continue if covered by XOL...'
    --            );
    --   END;
    PROCEDURE pop_grp_prev_cessions (
        v_ipu_code          IN     NUMBER,
        v_trans_no          IN     NUMBER,
        v_trans_type        IN     VARCHAR2,
        v_cur_code          IN     NUMBER,
        v_prrd_code         IN OUT NUMBER,
        v_recompute_facre   IN     VARCHAR2 DEFAULT 'N',
        v_user              IN     VARCHAR2)
    IS
        v_trt_uwyr                  NUMBER := NULL;
        cnt                         NUMBER := 1;
        v_retention_amt             NUMBER := 0;
        v_facre_rate                NUMBER := 0;
        al_id                       NUMBER;
        v_cnt                       NUMBER := 0;
        --v_prrd_code    NUMBER ;
        v_errmsg                    VARCHAR2 (200);
        v_facre_amt                 NUMBER := 0;
        v_zero_devide               EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        v_scl_code                  NUMBER;
        v_grp_tot_ret               NUMBER := 0;
        v_grp_pct                   NUMBER := 0;
        v_group_si                  NUMBER := 0;
        v_grp_flag                  BOOLEAN := FALSE;
        v_reinsure_amt              NUMBER := 0;
        v_no_ri_si                  VARCHAR2 (2);
        v_rei_code                  NUMBER;
        v_as_code                   NUMBER;
        v_exch_rate                 NUMBER := 0;
        v_rnd                       NUMBER := 0;
        v_bcur_rnd                  NUMBER := 0;
        v_prev_prrd_code            NUMBER;
        v_prev_com_retention_rate   NUMBER := 0;
        v_prev_comp_net_rate        NUMBER := 0;
        v_ctl_code                  NUMBER;
        v_allowed_rate              NUMBER;
        --v_facre_amount              NUMBER;
        v_facob_rate                NUMBER;
        v_fc_amount                 NUMBER;
        v_facob_amt                 NUMBER;
        v_facob_amt_rate            NUMBER;
        v_facre_amt_rate            NUMBER;
        v_fc_rate                   NUMBER;
        v_prorata_rate              NUMBER;
        v_fc_wef_date               DATE;
        v_prem                      NUMBER;
        v_fc_prem_diff_amt          NUMBER;
        v_comm_amt                  NUMBER;
        v_prev_prem                 NUMBER;
        v_prev_comm                 NUMBER;
        v_prprd_code                NUMBER;
        v_amnt                      NUMBER;
        v_obligamnt                 NUMBER;
        v_eq_prem                   NUMBER;
        v_prev_ri_si                NUMBER;
        v_prev_facre_amt            NUMBER;

        v_prev_net_retention        NUMBER;
        v_net_prev_prem             NUMBER;
        v_ri_prev_prem              NUMBER;
        v_cumm_ri_prem              NUMBER;
        v_prev_facre_prem           NUMBER;

        CURSOR cur_risk IS
            SELECT ipu_code,
                   ipu_property_id,
                   ipu_item_desc,
                   ipu_qty,
                   ipu_value,
                   ipu_wef,
                   ipu_wet,
                   ipu_pol_batch_no,
                   ipu_pol_policy_no,
                   ipu_pol_ren_endos_no,
                   ipu_comp_retention,
                   ipu_pol_est_max_loss,
                   ipu_avail_fulc_bal,
                   ipu_endos_diff_amt,
                   ipu_sec_scl_code,
                   ipu_related_ipu_code,
                   ipu_bp,
                   ipu_gp,
                   ipu_fp,
                   ipu_fap,
                   ipu_nett_premium,
                   ipu_eml_si,
                   ipu_cummulative_reins,
                   ipu_sec_sect_code,
                   ipu_reinsure_amt,
                   ipu_facre_amount,
                   ipu_prev_ipu_code,
                   ipu_grp_si_risk_pct,
                   ipu_grp_top_loc,
                   ipu_grp_comp_gross_ret,
                   ipu_relr_code,
                   ipu_eff_wef,
                   ipu_eff_wet,
                   ipu_id,
                   ipu_uw_yr,
                   ipu_status,
                   ipu_earthqke_prem_diff,
                   ipu_earth_quake_prem,
                   pol_policy_status,
                   ipu_rc_code
              FROM gin_policies, gin_insured_property_unds
             WHERE pol_batch_no = ipu_pol_batch_no AND ipu_code = v_ipu_code;

        CURSOR cur_old_risk (v_prev_ipu NUMBER)
        IS
            SELECT prrd_ipu_code,
                   prrd_com_retention_rate,
                   prrd_code,
                   prrd_comp_net_rate,
                   prrd_comp_retention,
                   prrd_facoblig_user_excess,
                   prrd_as_uwyr,
                   prrd_as_code,
                   prrd_facoblig_excess,
                   prrd_facoblig_limit,
                   prrd_cede_pool
              FROM gin_policy_risk_ri_dtls
             WHERE     prrd_ipu_code = v_prev_ipu
                   AND prrd_current = 'Y'
                   AND prrd_idx =
                       (SELECT MAX (prrd_idx)
                          FROM gin_policy_risk_ri_dtls
                         WHERE     prrd_ipu_code = v_prev_ipu
                               AND prrd_current = 'Y');

        CURSOR cur_prev_treaty_cession (v_old_ipu_code    NUMBER,
                                        v_ipu             NUMBER,
                                        v_old_prrd_code   NUMBER)
        IS
            SELECT ptotr_code,
                   ptotr_risk_cur_code,
                   ptotr_trt_cur_code,
                   ptotr_risk_si_pcur,
                   ptotr_risk_prem_pcur,
                   ptotr_rei_code,
                   ptotr_trt_code,
                   ptotr_trt_sht_desc,
                   ptotr_clt_scl_code,
                   ptotr_rate,
                   ptotr_rate_type,
                   ptotr_property_id,
                   ptotr_uwyr,
                   ptotr_ipu_code,
                   ptotr_risk_cur_symbol,
                   ptotr_trt_cur_symbol,
                   ptotr_sect_code,
                   ptotr_ta_code,
                   ptotr_as_code,
                   ptotr_trs_code,
                   ptotr_trs_sht_desc,
                   ptotr_prev_cession_rate,
                   ptotr_cession_pct,
                   ta_type,
                   ptotr_date,
                   ptotr_ctl_code,
                   ptotr_allowed_rate
              FROM gin_policy_rein_risk_details, gin_treaty_arrangements
             WHERE     ptotr_ta_code = ta_code
                   AND ptotr_ipu_code = v_old_ipu_code
                   AND ptotr_prrd_code = v_old_prrd_code
                   AND ptotr_rei_code NOT IN
                           (SELECT ptotr_rei_code
                              FROM gin_policy_rein_risk_details
                             WHERE     ptotr_ipu_code = v_ipu
                                   AND ptotr_ggt_tran_no = v_trans_no);

        CURSOR cur_participant (v_rei_code IN NUMBER)
        IS
            SELECT trpa_agnt_agent_code,
                   trpa_agnt_sht_desc,
                   trpa_rei_code,
                   trpa_uw_year,
                   trpa_comp_rate,
                   trpa_rei_prem_taxable,
                   trpa_trs_code,
                   trpa_trs_sht_desc,
                   trpa_code
              FROM gin_treaty_participants
             WHERE trpa_rei_code = v_rei_code;

        CURSOR cur_facre (v_old_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_facre_cessions
             WHERE fc_prrd_code = v_old_prrd_code;

        CURSOR cur_pool (v_old_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_pol_rein_pool_risk_details
             WHERE prprd_prrd_code = v_old_prrd_code;
    BEGIN
        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        --raise_error('v_ipu_code='||v_ipu_code);
        FOR cur_risk_rec IN cur_risk
        LOOP
            v_scl_code := NULL;

            BEGIN
                SELECT NVL (scl_no_ri_si, 'N')
                  INTO v_no_ri_si
                  FROM gin_sub_classes
                 WHERE scl_code = cur_risk_rec.ipu_sec_scl_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'Unable to retrieve RI SI status for the sub class '
                        || cur_risk_rec.ipu_sec_scl_code);
            END;

            IF     NVL (v_no_ri_si, 'N') = 'N'
               AND NVL (cur_risk_rec.ipu_reinsure_amt, 0) = 0
            THEN
                raise_error (
                    'No reinsure amount specified, cannot reinsure this risk');
            END IF;

            -- IF NVL (cur_risk_rec.ipu_status, 'O') != 'RN'
            --  THEN
            v_scl_code := cur_risk_rec.ipu_sec_scl_code;

            -- open arrangements cursor
            --reserve facre sessions if its not a new business or renewal
            BEGIN
                v_prrd_code := NULL;

                SELECT prrd_code,
                       prrd_prev_prrd_code,
                       prrd_com_retention_rate,
                       prrd_comp_net_rate
                  INTO v_prrd_code,
                       v_prev_prrd_code,
                       v_prev_com_retention_rate,
                       v_prev_comp_net_rate
                  FROM gin_policy_risk_ri_dtls
                 WHERE     prrd_ipu_code = cur_risk_rec.ipu_code
                       AND prrd_tran_no = v_trans_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_prrd_code := NULL;
                    v_prev_prrd_code := NULL;
            END;

            v_retention_amt := 0;
            v_grp_tot_ret := 0;

            FOR cur_old_risk_rec IN cur_old_risk (cur_risk_rec.ipu_code)
            LOOP
                -- raise_error(23232322);
                v_prev_prrd_code := cur_old_risk_rec.prrd_code;

                BEGIN
                    v_facre_rate := 0;
                    v_facre_amt := 0;

                    SELECT SUM (
                               DECODE (NVL (fc_facre_type, 'N'),
                                       'O', 0,
                                       NVL (fc_rate, 0))),
                           SUM (
                               DECODE (NVL (fc_facre_type, 'N'),
                                       'O', NVL (fc_rate, 0),
                                       0))
                      INTO v_facre_rate, v_facob_rate
                      FROM gin_facre_cessions
                     WHERE     fc_ipu_code = cur_risk_rec.ipu_code
                           AND fc_prrd_code = v_prev_prrd_code
                           AND fc_amt_or_rate = 'R'
                           AND NVL (fc_facre_type, 'N') = 'O';

                    DBMS_OUTPUT.put_line (
                           'v_facre_rate='
                        || v_facre_rate
                        || 'v_facob_rate='
                        || v_facob_rate);

                    SELECT SUM (
                               DECODE (NVL (fc_facre_type, 'N'),
                                       'O', 0,
                                       NVL (fc_amount, 0))),
                           SUM (
                               DECODE (NVL (fc_facre_type, 'N'),
                                       'O', NVL (fc_amount, 0),
                                       0))
                      INTO v_facre_amt, v_facob_amt
                      FROM gin_facre_cessions
                     WHERE     fc_ipu_code = cur_risk_rec.ipu_code
                           AND fc_prrd_code = v_prev_prrd_code
                           AND fc_amt_or_rate = 'A'
                           AND NVL (fc_facre_type, 'N') = 'O';

                    DBMS_OUTPUT.put_line (
                           'v_facre_amt='
                        || v_facre_amt
                        || 'v_facob_amt='
                        || v_facob_amt);

                    IF NVL (cur_risk_rec.ipu_reinsure_amt, 0) != 0
                    THEN
                        v_facre_amt_rate :=
                              NVL (v_facre_amt, 0)
                            / NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                            * 100;
                        v_facob_amt_rate :=
                              NVL (v_facob_amt, 0)
                            / NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                            * 100;
                    ELSE
                        v_facre_amt := 0;
                    END IF;

                    v_facre_rate :=
                        NVL (v_facre_rate, 0) + NVL (v_facre_amt_rate, 0);
                    v_facob_rate :=
                        NVL (v_facob_rate, 0) + NVL (v_facob_amt_rate, 0);

                    IF     NVL (v_facre_rate, 0) + NVL (v_facob_rate, 0) >
                           100
                       AND NVL (v_recompute_facre, 'N') = 'N'
                    THEN
                        raise_error (
                            'New facre percentage is greater than the 100%');
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_facre_rate := 0;
                    WHEN OTHERS
                    THEN
                        raise_error (' ');
                END;

                /*
                            IF cur_risk_rec.pol_policy_status IN
                                  ('NB', 'RN', 'SP', 'CO', 'CN', 'EN')
                            THEN
                               v_eq_prem :=
                                    cur_risk_rec.ipu_earthqke_prem_diff
                                  * SIGN (NVL (cur_risk_rec.ipu_endos_diff_amt, 0));
                            ELSE
                               v_eq_prem := 0;
                            END IF;
                */
                IF cur_risk_rec.pol_policy_status IN ('NB',
                                                      'RN',
                                                      'SP',
                                                      'CO')
                THEN
                    v_eq_prem :=
                          cur_risk_rec.ipu_earth_quake_prem
                        * SIGN (NVL (cur_risk_rec.ipu_endos_diff_amt, 0));
                ELSIF cur_risk_rec.pol_policy_status IN ('EN', 'CN')
                THEN
                    v_eq_prem :=
                          cur_risk_rec.ipu_earthqke_prem_diff
                        * SIGN (NVL (cur_risk_rec.ipu_endos_diff_amt, 0));
                ELSE
                    v_eq_prem := 0;
                END IF;

                v_prev_net_retention :=
                    NVL (
                        get_risk_comp_retention (cur_risk_rec.ipu_id,
                                                 cur_risk_rec.ipu_uw_yr,
                                                 cur_risk_rec.ipu_code),
                        0);
                v_net_prev_prem :=
                    NVL (get_risk_cumulative_prem (cur_risk_rec.ipu_id,
                                                   cur_risk_rec.ipu_uw_yr,
                                                   'O',
                                                   cur_risk_rec.ipu_code),
                         0);
                v_ri_prev_prem :=
                    NVL (get_risk_cumulative_prem (cur_risk_rec.ipu_id,
                                                   cur_risk_rec.ipu_uw_yr,
                                                   'T',
                                                   cur_risk_rec.ipu_code),
                         0);
                v_prev_ri_si :=
                    get_risk_ri_si (cur_risk_rec.ipu_id,
                                    cur_risk_rec.ipu_code,
                                    cur_risk_rec.ipu_uw_yr);
                v_cumm_ri_prem :=
                    NVL (get_risk_cumulative_prem (cur_risk_rec.ipu_id,
                                                   cur_risk_rec.ipu_uw_yr,
                                                   'G',
                                                   cur_risk_rec.ipu_code),
                         0);
                v_prev_facre_prem :=
                    NVL (get_risk_cumulative_prem (cur_risk_rec.ipu_id,
                                                   cur_risk_rec.ipu_uw_yr,
                                                   'F',
                                                   cur_risk_rec.ipu_code),
                         0);

                IF v_prrd_code IS NULL
                THEN
                    BEGIN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || gin_prrd_code_seq.NEXTVAL)
                          INTO v_prrd_code
                          FROM DUAL;

                        INSERT INTO gin_policy_risk_ri_dtls (
                                        prrd_code,
                                        prrd_ipu_code,
                                        prrd_idx,
                                        prrd_tran_no,
                                        prrd_wef,
                                        prrd_wet,
                                        prrd_current,
                                        prrd_comp_retention,
                                        prrd_excess_pct,
                                        prrd_avail_fulc_bal,
                                        prrd_gross_comp_retention,
                                        prrd_com_retention_rate,
                                        prrd_grp_si_risk_pct,
                                        prrd_grp_top_loc,
                                        prrd_grp_comp_gross_ret,
                                        prrd_grp_comp_net_ret,
                                        prrd_ri_prem,
                                        prrd_prev_ret_rate,
                                        prrd_prev_facre_rate,
                                        prrd_earthquake_prem,
                                        prrd_ri_net_less_eq_prem,
                                        prrd_as_uwyr,
                                        prrd_prev_prrd_code,
                                        prrd_as_code,
                                        prrd_facoblig_excess,
                                        prrd_facoblig_limit,
                                        prrd_facoblig_user_excess,
                                        prrd_cede_pool,
                                        prrd_effective_date,
                                        prrd_prev_net_rate,
                                        prrd_prev_net_retention,
                                        prrd_net_prev_prem,
                                        prrd_ri_prev_prem,
                                        prrd_prev_ri_si,
                                        prrd_prev_facre_si,
                                        prrd_cumm_ri_prem,
                                        prrd_prev_facre_prem)
                                 VALUES (
                                     v_prrd_code,
                                     cur_risk_rec.ipu_code,
                                     1,
                                     v_trans_no,
                                     cur_risk_rec.ipu_wef,
                                     cur_risk_rec.ipu_wet,
                                     'Y',
                                     ROUND (
                                           NVL (
                                               cur_risk_rec.ipu_reinsure_amt,
                                               0)
                                         * (  DECODE (
                                                  NVL (
                                                      v_prev_com_retention_rate,
                                                      0),
                                                  0, 100,
                                                  v_prev_com_retention_rate)
                                            / 100)
                                         * NVL (v_grp_pct, 100)),
                                     ROUND (v_facre_rate, 4),
                                     ROUND (
                                           v_facre_rate
                                         * DECODE (
                                               NVL (
                                                   cur_risk_rec.ipu_reinsure_amt,
                                                   0),
                                               0, 100,
                                                 NVL (
                                                     cur_risk_rec.ipu_reinsure_amt,
                                                     0)
                                               / 100)),
                                     ROUND (
                                           NVL (
                                               cur_risk_rec.ipu_reinsure_amt,
                                               0)
                                         * (  DECODE (
                                                  NVL (
                                                      v_prev_com_retention_rate,
                                                      0),
                                                  0, 100,
                                                  v_prev_com_retention_rate)
                                            / 100)
                                         * NVL (v_grp_pct, 100)),
                                     v_prev_com_retention_rate,
                                     cur_risk_rec.ipu_grp_si_risk_pct,
                                     cur_risk_rec.ipu_grp_top_loc,
                                     cur_risk_rec.ipu_grp_comp_gross_ret,
                                     0,
                                     cur_risk_rec.ipu_endos_diff_amt,
                                     v_prev_comp_net_rate,
                                     ROUND (v_facre_rate, 4),
                                     v_eq_prem,
                                       ROUND (
                                           NVL (
                                               cur_risk_rec.ipu_endos_diff_amt,
                                               0))
                                     - v_eq_prem,
                                     NVL (cur_old_risk_rec.prrd_as_uwyr,
                                          cur_risk_rec.ipu_uw_yr),
                                     cur_old_risk_rec.prrd_code,
                                     cur_old_risk_rec.prrd_as_code,
                                     ROUND (
                                           v_facob_rate
                                         * DECODE (
                                               NVL (
                                                   cur_risk_rec.ipu_reinsure_amt,
                                                   0),
                                               0, 100,
                                                 cur_risk_rec.ipu_reinsure_amt
                                               / 100),
                                         v_rnd),
                                     cur_old_risk_rec.prrd_facoblig_limit,
                                     cur_old_risk_rec.prrd_facoblig_user_excess,
                                     cur_old_risk_rec.prrd_cede_pool,
                                     cur_risk_rec.ipu_wef,
                                     cur_old_risk_rec.prrd_comp_net_rate,
                                     -- cur_old_risk_rec.prrd_comp_retention,
                                     v_prev_net_retention,
                                     --                                  cur_old_risk_rec.prrd_net_prem,
                                     v_net_prev_prem,
                                     --cur_old_risk_rec.prrd_ri_prem,
                                     v_ri_prev_prem,
                                     -- v_prev_ri_si,
                                     v_prev_ri_si,
                                     v_prev_facre_amt,
                                     v_cumm_ri_prem,
                                     v_prev_facre_prem);
                    END;

                    BEGIN
                        UPDATE gin_insured_property_unds
                           SET ipu_current_prrd_code = v_prrd_code
                         WHERE ipu_code = cur_risk_rec.ipu_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to update risks current RI details code, ...');
                    END;
                ELSE
                    -- raise_error( 'here='||v_facre_rate);
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_comp_retention =
                               ROUND (
                                   ((  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                                     * DECODE (NVL (v_prev_comp_net_rate, 0),
                                               0, 100,
                                               v_prev_comp_net_rate)
                                     / 100)),
                                   v_rnd),
                           prrd_avail_fulc_bal =
                               ROUND (
                                     v_facre_rate
                                   * DECODE (
                                         NVL (cur_risk_rec.ipu_reinsure_amt,
                                              0),
                                         0, 100,
                                         cur_risk_rec.ipu_reinsure_amt / 100),
                                   v_rnd),
                           prrd_excess_pct = ROUND (v_facre_rate, 4),
                           prrd_gross_comp_retention =
                               ROUND (
                                   ((  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                                     * DECODE (
                                           NVL (v_prev_com_retention_rate, 0),
                                           0, 100,
                                           v_prev_com_retention_rate)
                                     / 100)),
                                   v_rnd),
                           prrd_com_retention_rate =
                               v_prev_com_retention_rate,
                           prrd_grp_top_loc = cur_risk_rec.ipu_grp_top_loc,
                           prrd_grp_si_risk_pct =
                               cur_risk_rec.ipu_grp_si_risk_pct,
                           prrd_grp_comp_gross_ret =
                               cur_risk_rec.ipu_grp_comp_gross_ret,
                           prrd_ri_prem = cur_risk_rec.ipu_endos_diff_amt,
                           prrd_earthquake_prem = v_eq_prem,
                           prrd_ri_net_less_eq_prem =
                                 ROUND (
                                     NVL (cur_risk_rec.ipu_endos_diff_amt, 0))
                               - v_eq_prem,
                           prrd_comp_net_rate = NVL (v_prev_comp_net_rate, 0),
                           prrd_prev_ret_rate = v_prev_comp_net_rate,
                           prrd_prev_facre_rate = ROUND (v_facre_rate, 4),
                           prrd_as_uwyr =
                               NVL (cur_old_risk_rec.prrd_as_uwyr,
                                    cur_risk_rec.ipu_uw_yr),
                           prrd_as_code = cur_old_risk_rec.prrd_as_code,
                           prrd_facoblig_excess =
                               ROUND (
                                     v_facob_rate
                                   * DECODE (
                                         NVL (cur_risk_rec.ipu_reinsure_amt,
                                              0),
                                         0, 100,
                                         cur_risk_rec.ipu_reinsure_amt / 100),
                                   v_rnd),
                           prrd_facoblig_limit =
                               cur_old_risk_rec.prrd_facoblig_limit,
                           prrd_facoblig_user_excess =
                               cur_old_risk_rec.prrd_facoblig_user_excess,
                           prrd_cede_pool = cur_old_risk_rec.prrd_cede_pool,
                           prrd_prev_net_rate =
                               cur_old_risk_rec.prrd_comp_net_rate,
                           prrd_prev_net_retention = v_prev_net_retention,
                           prrd_net_prev_prem = v_net_prev_prem,
                           prrd_ri_prev_prem = v_ri_prev_prem,
                           prrd_prev_ri_si = v_prev_ri_si,
                           prrd_prev_facre_si = v_prev_facre_amt,
                           prrd_cumm_ri_prem = v_cumm_ri_prem,
                           prrd_prev_facre_prem = v_prev_facre_prem
                     WHERE     prrd_ipu_code = cur_risk_rec.ipu_code
                           AND prrd_code = v_prrd_code
                           AND prrd_tran_no = v_trans_no;
                END IF;

                DBMS_OUTPUT.put_line (
                       'previous cessions'
                    || cur_risk_rec.ipu_code
                    || '='
                    || cur_risk_rec.ipu_code
                    || '='
                    || v_prev_prrd_code);

                /** check if the risk arrangement is clean cut or uw year
                if its underwriting year use the previus details to populate foward
                else if it clean cut then use the prevoius cesstion info to populate for the current
                year treaty. first check if the previous recorsds are for this year or not***/
                FOR cur_prev_treaty_cession_rec
                    IN cur_prev_treaty_cession (cur_risk_rec.ipu_code,
                                                cur_risk_rec.ipu_code,
                                                v_prev_prrd_code)
                LOOP
                    DBMS_OUTPUT.put_line ('222previous cessions');
                    v_rei_code := NULL;
                    v_as_code := NULL;
                    v_rei_code := cur_prev_treaty_cession_rec.ptotr_rei_code;
                    v_as_code := cur_prev_treaty_cession_rec.ptotr_as_code;
                    v_ctl_code := cur_prev_treaty_cession_rec.ptotr_ctl_code;

                    IF NVL (cur_prev_treaty_cession_rec.ptotr_allowed_rate,
                            0) =
                       0
                    THEN
                        DBMS_OUTPUT.put_line ('3333previous cessions');

                        BEGIN
                            SELECT ctl_cede_rate
                              INTO v_allowed_rate
                              FROM gin_class_treaty_limits
                             WHERE ctl_code = v_ctl_code;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                BEGIN
                                    SELECT rei_cede_rate
                                      INTO v_allowed_rate
                                      FROM gin_treaty_setups
                                     WHERE rei_code = v_rei_code;
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Error determining the allowed cede rate for a previous apportionment.1.');
                                END;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error determining the allowed cede rate for a previous apportionment.2.');
                        END;
                    ELSE
                        v_allowed_rate :=
                            cur_prev_treaty_cession_rec.ptotr_allowed_rate;
                    END IF;

                    DBMS_OUTPUT.put_line (
                           'previous cessions'
                        || cur_prev_treaty_cession_rec.ptotr_cession_pct);

                    BEGIN
                        INSERT INTO gin_policy_rein_risk_details (
                                        ptotr_code,
                                        ptotr_risk_cur_code,
                                        ptotr_trt_cur_code,
                                        ptotr_rei_code,
                                        ptotr_trt_code,
                                        ptotr_trt_sht_desc,
                                        ptotr_clt_scl_code,
                                        ptotr_rate,
                                        ptotr_rate_type,
                                        ptotr_property_id,
                                        ptotr_uwyr,
                                        ptotr_ipu_code,
                                        ptotr_pol_batch_no,
                                        ptotr_pol_policy_no,
                                        ptotr_pol_ren_endos_no,
                                        ptotr_risk_cur_symbol,
                                        ptotr_trt_cur_symbol,
                                        ptotr_sect_code,
                                        ptotr_ta_code,
                                        ptotr_as_code,
                                        ptotr_trs_code,
                                        ptotr_trs_sht_desc,
                                        ptotr_prev_cession_rate,
                                        ptotr_ggt_tran_no,
                                        ptotr_tran_type,
                                        ptotr_prrd_code,
                                        ptotr_cession_pct,
                                        ptotr_allowed_rate,
                                        ptotr_risk_si_pcur,
                                        ptotr_risk_prem_pcur)
                                 VALUES (
                                     ptotr_code_seq.NEXTVAL,
                                     cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
                                     cur_prev_treaty_cession_rec.ptotr_trt_cur_code,
                                     v_rei_code,
                                     cur_prev_treaty_cession_rec.ptotr_trt_code,
                                     cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
                                     cur_prev_treaty_cession_rec.ptotr_clt_scl_code,
                                     cur_prev_treaty_cession_rec.ptotr_rate,
                                     cur_prev_treaty_cession_rec.ptotr_rate_type,
                                     cur_risk_rec.ipu_property_id,
                                     cur_risk_rec.ipu_uw_yr,
                                     cur_risk_rec.ipu_code,
                                     cur_risk_rec.ipu_pol_batch_no,
                                     cur_risk_rec.ipu_pol_policy_no,
                                     cur_risk_rec.ipu_pol_ren_endos_no,
                                     cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
                                     cur_prev_treaty_cession_rec.ptotr_trt_cur_symbol,
                                     cur_prev_treaty_cession_rec.ptotr_sect_code,
                                     cur_prev_treaty_cession_rec.ptotr_ta_code,
                                     v_as_code,
                                     cur_prev_treaty_cession_rec.ptotr_trs_code,
                                     cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
                                     cur_prev_treaty_cession_rec.ptotr_cession_pct,
                                     v_trans_no,
                                     v_trans_type,
                                     v_prrd_code,
                                     cur_prev_treaty_cession_rec.ptotr_cession_pct,
                                     v_allowed_rate,
                                     cur_risk_rec.ipu_reinsure_amt,
                                     cur_risk_rec.ipu_endos_diff_amt);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error in populate_prev_cessins :- Unable to insert previous treaty details...');
                    END;

                    FOR cur_participant_rec IN cur_participant (v_rei_code)
                    LOOP
                        BEGIN
                            INSERT INTO gin_participations (
                                            part_code,
                                            part_cede_rate,
                                            part_trt_code,
                                            part_trt_sht_desc,
                                            part_agnt_agent_code,
                                            part_agnt_sht_desc,
                                            part_ptotr_code,
                                            part_rei_code,
                                            part_pol_cur_code,
                                            part_pol_cur_symbol,
                                            part_uwyr,
                                            part_pol_batch_no,
                                            part_pol_policy_no,
                                            part_pol_ren_endos_no,
                                            part_ipu_code,
                                            part_ta_code,
                                            part_as_code,
                                            part_fiscal_year,
                                            part_acc_posted,
                                            part_trs_code,
                                            part_trs_sht_desc,
                                            part_scl_code,
                                            part_ggt_tran_no,
                                            part_tran_type,
                                            part_prrd_code,
                                            part_trpa_code)
                                     VALUES (
                                         gin_part_code_seq.NEXTVAL,
                                         cur_participant_rec.trpa_comp_rate,
                                         cur_prev_treaty_cession_rec.ptotr_trt_code,
                                         cur_prev_treaty_cession_rec.ptotr_trt_sht_desc,
                                         cur_participant_rec.trpa_agnt_agent_code,
                                         cur_participant_rec.trpa_agnt_sht_desc,
                                         ptotr_code_seq.CURRVAL,
                                         v_rei_code,
                                         cur_prev_treaty_cession_rec.ptotr_risk_cur_code,
                                         cur_prev_treaty_cession_rec.ptotr_risk_cur_symbol,
                                         cur_risk_rec.ipu_uw_yr,
                                         cur_risk_rec.ipu_pol_batch_no,
                                         cur_risk_rec.ipu_pol_policy_no,
                                         cur_risk_rec.ipu_pol_ren_endos_no,
                                         cur_risk_rec.ipu_code,
                                         cur_prev_treaty_cession_rec.ptotr_ta_code,
                                         v_as_code,
                                         TO_NUMBER (
                                             TO_CHAR (SYSDATE, 'YYYY')),
                                         'R',
                                         cur_prev_treaty_cession_rec.ptotr_trs_code,
                                         cur_prev_treaty_cession_rec.ptotr_trs_sht_desc,
                                         cur_risk_rec.ipu_sec_scl_code,
                                         v_trans_no,
                                         v_trans_type,
                                         v_prrd_code,
                                         cur_participant_rec.trpa_code);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error in populate prev cessions :- Unable to insert participants details...');
                        END;
                    END LOOP;                     --cur_prev_participation_rec
                END LOOP;

                SELECT prrd_facre_amount, prrd_facoblig_excess
                  INTO v_amnt, v_obligamnt
                  FROM gin_policy_risk_ri_dtls
                 WHERE prrd_code = v_prrd_code;



                DBMS_OUTPUT.put_line (
                       '7777777777v_amnt   ='
                    || v_amnt
                    || 'v_obligamnt   ='
                    || v_obligamnt);

                FOR cur_pool_rec IN cur_pool (v_prev_prrd_code)
                LOOP
                    BEGIN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || gin_prprd_code_seq.NEXTVAL)
                          INTO v_prprd_code
                          FROM DUAL;

                        INSERT INTO gin_pol_rein_pool_risk_details (
                                        prprd_code,
                                        prprd_risk_prem_amt,
                                        prprd_risk_own_ret_amt,
                                        prprd_risk_cur_code,
                                        prprd_risk_exch_rate,
                                        prprd_scrpr_code,
                                        prprd_rein_pool_rate,
                                        prprd_ipu_code,
                                        prprd_scl_code,
                                        prprd_covt_code,
                                        prprd_pol_batch_no,
                                        prprd_rein_pool_amt,
                                        prprd_rein_pool_comm_rate,
                                        prprd_rein_pool_vat_rate,
                                        prprd_rein_pool_comm_amt,
                                        prprd_rein_pool_vat_amt,
                                        prprd_prev_prprd_code,
                                        prprd_ggt_tran_no,
                                        prprd_property_id,
                                        prprd_uwyr,
                                        prprd_pol_ren_endos_no,
                                        prprd_date,
                                        prprd_risk_trt_own_ret_amt,
                                        prprd_pta_code,
                                        prprd_os_claim_amt,
                                        prprd_paid_claim_amt,
                                        prprd_pool_net_amt,
                                        prprd_prrd_code,
                                        prprd_refund_prem,
                                        prprd_refund_comm,
                                        prprd_prev_pool_amt,
                                        prprd_prev_pool_comm_rate,
                                        prprd_prev_pool_rate)
                             VALUES (v_prprd_code,
                                     cur_risk_rec.ipu_endos_diff_amt,
                                     NULL,
                                     cur_pool_rec.prprd_risk_cur_code,
                                     v_exch_rate,
                                     cur_pool_rec.prprd_scrpr_code,
                                     cur_pool_rec.prprd_rein_pool_rate,
                                     cur_pool_rec.prprd_ipu_code,
                                     cur_pool_rec.prprd_scl_code,
                                     cur_pool_rec.prprd_covt_code,
                                     cur_pool_rec.prprd_pol_batch_no,
                                     NULL,
                                     cur_pool_rec.prprd_rein_pool_comm_rate,
                                     cur_pool_rec.prprd_rein_pool_vat_rate,
                                     NULL,
                                     NULL,
                                     cur_pool_rec.prprd_code,
                                     v_trans_no,
                                     cur_pool_rec.prprd_property_id,
                                     cur_pool_rec.prprd_uwyr,
                                     cur_pool_rec.prprd_pol_ren_endos_no,
                                     TRUNC (SYSDATE),
                                     NULL,
                                     cur_pool_rec.prprd_pta_code,
                                     NULL,
                                     NULL,
                                     NULL,
                                     v_prrd_code,
                                     NULL,
                                     NULL,
                                     cur_pool_rec.prprd_rein_pool_amt,
                                     cur_pool_rec.prprd_rein_pool_comm_rate,
                                     cur_pool_rec.prprd_rein_pool_rate);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to create risk RI details, ...');
                    END;
                END LOOP;
            --cur_prev_treaty_cession
            END LOOP;                                              --old risks
        --MESSAGE('HERE 4');PAUSE;
        --END IF;
        END LOOP;
    --  COMMIT;
    --RAISE_ERROR('STOP');
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null.Continue if covered by XOL...');
    END;

    PROCEDURE pop_grp_treaty_details (v_ipu_code    IN NUMBER,
                                      v_eff_date    IN DATE,
                                      v_tran_no     IN NUMBER,
                                      v_tran_type   IN VARCHAR2)
    IS
        v_cnt                  NUMBER := 0;
        v_trt_uwyr             NUMBER := NULL;
        cnt                    NUMBER := 1;
        v_retention_amt        NUMBER := 0;
        v_facre_rate           NUMBER := 0;
        v_errmsg               VARCHAR2 (200);
        v_zero_devide          EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        v_group_si             NUMBER := 0;
        v_grp_flag             BOOLEAN := FALSE;
        v_grp_pct              NUMBER := 0;
        v_grp_tot_ret          NUMBER := 0;
        v_retention_type       VARCHAR2 (3);
        v_reinsure_amt         NUMBER := 0;
        v_exhange_rate         NUMBER := 1;
        v_prrd_code            NUMBER;
        v_facre_amt            NUMBER := 0;
        v_facre_excess         NUMBER := 0;
        v_arrngmt_defined      NUMBER := 0;
        v_msg                  VARCHAR2 (200);
        v_arrangement          NUMBER;
        v_arrangement_type     VARCHAR2 (10);
        v_old_grs_ret_rate     NUMBER := 0;
        v_net_ret_rate         NUMBER := 0;
        v_retention_limit      NUMBER := 0;
        v_no_ri_si             VARCHAR2 (2);
        v_comp_ret_rate        NUMBER := 0;
        v_prorata_days         NUMBER := 0;
        v_prorata_rate         NUMBER := 0;
        v_cover_days           NUMBER := 0;
        v_prorata_prem         NUMBER := 0;
        v_ref_net_reten        NUMBER := 0;
        v_rnd                  NUMBER := 0;
        v_rnd_bcur             NUMBER := 0;
        v_prev_ret_rate        NUMBER := 0;
        v_ctl_code             NUMBER;
        v_ctl_cede_rate        NUMBER;
        v_ctl_rate_type        VARCHAR2 (2);
        v_unadjusted_ri_tran   NUMBER;
        v_dummy                NUMBER;
        v_as_code              NUMBER;
        v_trt_cur_code         NUMBER;
        v_fac_oblig_limit      NUMBER;
        v_bcur_code            NUMBER;
        v_bcur_symbol          VARCHAR2 (15);
        v_as_uwyr              NUMBER;
        v_trt_cur_rate         NUMBER;
        v_cur_code             NUMBER;
        v_cur_symbol           VARCHAR2 (15);
        v_pol_uw_year          NUMBER;
        v_pol_incept_year      NUMBER;
        v_pol_batch_no         NUMBER;
        v_pol_fc_rate          NUMBER;
        v_pol_fc_amt           NUMBER;
        v_rsk_fc_rate          NUMBER;
        v_rsk_fc_amnt          NUMBER;
        v_user                 VARCHAR2 (15)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_cede_pool            VARCHAR2 (1);
        v_pol_fc_rate_type     VARCHAR2 (1);
        v_eq_prem              NUMBER;

        -- select treaties to reinsure each risk
        CURSOR cur_risk IS
            SELECT *
              FROM gin_policies, gin_insured_property_unds
             WHERE pol_batch_no = ipu_pol_batch_no AND ipu_code = v_ipu_code;

        CURSOR cur_treaties (v_scl_code   IN NUMBER,
                             v_ta_code    IN NUMBER,
                             v_uwyr          NUMBER,
                             v_ipu           NUMBER)
        IS
              SELECT *
                FROM gin_treaty_setups_vw
               WHERE     clt_scl_code = v_scl_code
                     AND as_ta_code = v_ta_code
                     AND as_uwyr = v_uwyr
                     AND trt_code IN (1001, 1003, 1004)
                     AND NVL (as_status, 'N') = 'A'
                     AND rei_code NOT IN
                             (SELECT ptotr_rei_code
                                FROM gin_policy_rein_risk_details
                               WHERE     ptotr_ipu_code = v_ipu
                                     AND ptotr_ggt_tran_no = v_tran_no)
            ORDER BY rei_si_start_from;

        CURSOR cur_cnt_trt (vv_ta_code   NUMBER,
                            uwyr         NUMBER,
                            v_scl_code   NUMBER)
        IS
            SELECT COUNT ('x')     cnt
              FROM gin_class_treaties, gin_arrangement_setups
             WHERE     clt_as_code = as_code
                   AND clt_ta_code = vv_ta_code
                   AND as_uwyr = uwyr
                   AND clt_scl_code = v_scl_code;

        CURSOR cur_arrangments (v_scl_code IN NUMBER, v_uwyr NUMBER)
        IS
            SELECT DISTINCT ta_code, ta_type, NVL (as_status, 'N') as_status
              FROM gin_treaty_arrangements,
                   gin_class_treaties,
                   gin_arrangement_setups
             WHERE     ta_code = clt_ta_code
                   AND ta_code = as_ta_code
                   AND clt_as_code = as_code
                   --AND ta_cur_code = v_cur_code
                   --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
                   AND as_uwyr = v_uwyr
                   AND clt_scl_code = v_scl_code
                   AND NVL (as_status, 'N') = 'A' --- UNCOMMENTED BY SOLOMON FOR HERITAGE. FIND OUT WHY IT WAS COMMENTED
                                                 ;

        CURSOR cur_arrangments_yr (v_scl_code IN NUMBER, v_uwyr NUMBER)
        IS
            SELECT DISTINCT ta_code, clt_retention_limit
              FROM gin_treaty_arrangements,
                   gin_class_treaties,
                   gin_arrangement_setups
             WHERE     ta_code = clt_ta_code
                   AND ta_code = as_ta_code
                   --AND ta_cur_code = v_cur_code
                   AND clt_as_code = as_code
                   AND as_uwyr = v_uwyr
                   AND clt_scl_code = v_scl_code;

        --,CLT_RETENTION_LIMIT
        CURSOR cur_participant (v_rei_code IN NUMBER)
        IS
            SELECT trpa_agnt_agent_code,
                   trpa_agnt_sht_desc,
                   trpa_rei_code,
                   trpa_uw_year,
                   trpa_comp_rate,
                   trpa_rei_prem_taxable,
                   trpa_trs_code,
                   trpa_trs_sht_desc
              FROM gin_treaty_participants
             WHERE trpa_rei_code = v_rei_code;

        CURSOR cur_pol_facre (v_batch_no NUMBER)
        IS
            SELECT *
              FROM gin_policy_facre_setup
             WHERE pfcs_pol_batch_no = v_batch_no;
    BEGIN
        --   RAISE_ERROR(v_ipu_code||'='||
        --      v_eff_date||'='||
        --      v_tran_no||'='||
        --      v_tran_type);
        BEGIN
            SELECT pol_cur_symbol,
                   pol_uw_year,
                   pol_inception_uwyr,
                   pol_cur_code,
                   pol_batch_no
              INTO v_cur_symbol,
                   v_pol_uw_year,
                   v_pol_incept_year,
                   v_cur_code,
                   v_pol_batch_no
              FROM gin_policies, gin_insured_property_unds
             WHERE ipu_pol_batch_no = pol_batch_no AND ipu_code = v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :-, Unable to get the policy details for the risk ');
        END;

        v_exhange_rate := 1;
        v_exhange_rate := get_currexch_rate (v_cur_code, v_rnd, v_rnd_bcur);
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

        BEGIN
              SELECT SUM (
                         DECODE (NVL (pfcs_amt_or_rate, 'R'),
                                 'R', NVL (pfcs_rate, 0),
                                 0)),
                     SUM (
                         DECODE (NVL (pfcs_amt_or_rate, 'R'),
                                 'R', 0,
                                 NVL (pfcs_rate, 0))),
                     pfcs_amt_or_rate
                INTO v_pol_fc_rate, v_pol_fc_amt, v_pol_fc_rate_type
                FROM gin_policy_facre_setup
               WHERE pfcs_pol_batch_no = v_pol_batch_no
            GROUP BY pfcs_amt_or_rate;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                raise_error ('Error computing preset facultative cessions.');
        END;

        --RAISE_ERROR('v_pol_fc_amt='||v_pol_fc_amt);
        FOR cur_risk_rec IN cur_risk
        LOOP
            --         IF SIGN (NVL (cur_risk_rec.ipu_endos_diff_amt, 0)) IN (1, 0)  THEN
            BEGIN
                SELECT NVL (scl_no_ri_si, 'N')
                  INTO v_no_ri_si
                  FROM gin_sub_classes
                 WHERE scl_code = cur_risk_rec.ipu_sec_scl_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'Unable to retrieve RI SI status for the sub class '
                        || cur_risk_rec.ipu_sec_scl_code);
            END;

            IF     NVL (v_no_ri_si, 'N') = 'N'
               AND NVL (cur_risk_rec.ipu_reinsure_amt, 0) = 0
            THEN
                raise_error (
                    'No reinsure amount specified, cannot reinsure this risk');
            END IF;

            BEGIN
                v_prrd_code := NULL;
                v_facre_amt := 0;

                SELECT prrd_code,
                       prrd_facre_amount,
                       prrd_avail_fulc_bal,
                       prrd_prev_ret_rate
                  INTO v_prrd_code,
                       v_facre_amt,
                       v_facre_excess,
                       v_prev_ret_rate
                  FROM gin_policy_risk_ri_dtls
                 WHERE     prrd_ipu_code = cur_risk_rec.ipu_code
                       AND prrd_tran_no = v_tran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_prrd_code := NULL;
                    v_facre_amt := 0;
                WHEN OTHERS
                THEN
                    raise_error ('Unable to retrieve RI details, ...');
            END;

            /* BEGIN
                UPDATE gin_policy_risk_ri_dtls
                   SET prrd_facre_rate = 0,
                       prrd_facre_amount = 0
                 WHERE prrd_code = v_prrd_code;
             EXCEPTION
                WHEN OTHERS
                THEN
                   raise_error ('Unable to update facre rates at 1, ...');
             END;*/
            v_retention_amt := 0;
            v_group_si := 0;

            IF cur_risk_rec.ipu_relr_code IS NOT NULL
            THEN
                --first check if there is any ri transaction not adjusted
                BEGIN
                    --GGT_TRANS_NO
                    v_unadjusted_ri_tran := 0;

                    SELECT COUNT (ggt_trans_no)
                      INTO v_unadjusted_ri_tran
                      FROM gin_gis_transactions
                     WHERE     ggt_uw_clm_tran = 'R'
                           AND (   ggt_trans_authorised IS NULL
                                OR ggt_trans_authorised IN ('N', 'R'))
                           AND ggt_trans_no != v_tran_no
                           AND ggt_risk_grp_code = cur_risk_rec.ipu_relr_code;

                    IF NVL (v_unadjusted_ri_tran, 0) > 0
                    THEN
                        raise_error (
                               'There are '
                            || v_tran_no
                            || ' '
                            || v_unadjusted_ri_tran
                            || ' Grouped RI transactions not adjusted. please adjust them first.');
                    END IF;
                END;

                v_group_si := 0;
                v_grp_flag := TRUE;

                BEGIN
                    v_group_si :=
                        get_group_top_loc (cur_risk_rec.ipu_pol_batch_no,
                                           cur_risk_rec.ipu_pol_policy_no,
                                           cur_risk_rec.ipu_relr_code,
                                           cur_risk_rec.ipu_rc_code,
                                           v_eff_date);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error computing group top location..');
                END;

                --v_group_si := v_group_si * v_exhange_rate;
                IF NVL (v_group_si, 0) = 0
                THEN
                    v_group_si := 1;
                END IF;

                v_grp_pct := 0;
                v_group_si := v_group_si * v_exhange_rate;
                v_grp_pct :=
                    ROUND (
                          NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                        / v_group_si
                        * 100,
                        4);
                v_reinsure_amt := v_group_si;
                v_comp_ret_rate :=
                    ROUND (
                          NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                        / NVL (v_group_si, 100)
                        * 100,
                        4);
                v_prorata_days := CEIL (cur_risk_rec.ipu_wet - v_eff_date);
                v_cover_days :=
                    CEIL (cur_risk_rec.ipu_wet - cur_risk_rec.ipu_wef);
                v_prorata_rate :=
                    ROUND (v_prorata_days / v_cover_days * 100, 4);
                --               v_prorata_prem :=
                --                  ROUND (NVL (cur_risk_rec.ipu_gp, 0) * v_prorata_rate / 100,
                --                         v_rnd
                --                        ); WHY USE ipu_gp AT GROUPED RI <solo>
                v_prorata_prem :=
                    ROUND (
                          NVL (cur_risk_rec.ipu_endos_diff_amt, 0)
                        * v_prorata_rate
                        / 100,
                        v_rnd);
                v_ref_net_reten :=
                    ROUND (NVL (v_prev_ret_rate, 0) / 100 * v_prorata_prem,
                           v_rnd);
            ELSE
                v_grp_pct := 100;
                v_group_si := NVL (cur_risk_rec.ipu_reinsure_amt, 0);
                v_reinsure_amt := NVL (cur_risk_rec.ipu_reinsure_amt, 0);
                v_comp_ret_rate := 1;
                v_cover_days :=
                    CEIL (cur_risk_rec.ipu_wet - cur_risk_rec.ipu_wef);
                --v_prorata_days := CEIL (cur_risk_rec.ipu_wet - cur_risk_rec.ipu_wef);
                v_prorata_days :=
                    CEIL (
                          cur_risk_rec.ipu_wet
                        - NVL (v_eff_date, cur_risk_rec.ipu_wef));
                v_prorata_rate :=
                    ROUND (v_prorata_days / v_cover_days * 100, 4);
                v_prorata_prem :=
                    ROUND (
                          NVL (cur_risk_rec.ipu_endos_diff_amt, 0)
                        * v_prorata_rate
                        / 100,
                        v_rnd);
                v_ref_net_reten :=
                    ROUND (NVL (v_prev_ret_rate, 0) / 100 * v_prorata_prem,
                           v_rnd);
                DBMS_OUTPUT.put_line (
                       cur_risk_rec.ipu_wet
                    || '='
                    || cur_risk_rec.ipu_wef
                    || '='
                    || v_eff_date);
                DBMS_OUTPUT.put_line ('v_cover_days=' || v_cover_days);
                DBMS_OUTPUT.put_line ('v_prorata_days=' || v_prorata_days);
                DBMS_OUTPUT.put_line ('v_prorata_rate=' || v_prorata_rate);
                DBMS_OUTPUT.put_line ('v_prorata_prem=' || v_prorata_prem);
                DBMS_OUTPUT.put_line ('v_ref_net_reten=' || v_ref_net_reten);
                DBMS_OUTPUT.put_line ('v_reinsure_amt=' || v_reinsure_amt);
            END IF;

            IF NVL (cur_risk_rec.ipu_reinsure_amt, 0) != 0
            THEN                                                        --????
                v_retention_amt :=
                    ROUND (
                          NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                        - (  NVL (v_facre_rate, 0)
                           * NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                           / 100)
                        - NVL (v_facre_amt, 0),
                        v_rnd);
                v_retention_amt :=
                    ROUND (v_retention_amt * NVL (v_grp_pct, 100) / 100,
                           v_rnd);
            ELSE
                v_retention_amt := 0;
            END IF;

            /****
                     IF cur_risk_rec.pol_policy_status IN
                           ('NB', 'RN', 'SP', 'EN', 'CN', 'CO')
                     THEN
                        v_eq_prem :=
                             cur_risk_rec.ipu_earthqke_prem_diff
                           * SIGN (NVL (cur_risk_rec.ipu_endos_diff_amt, 0));
                     ELSE
                        v_eq_prem := 0;
                     END IF;
            ****/
            IF cur_risk_rec.pol_policy_status IN ('NB',
                                                  'RN',
                                                  'SP',
                                                  'CO')
            THEN
                v_eq_prem :=
                      cur_risk_rec.ipu_earth_quake_prem
                    * SIGN (NVL (cur_risk_rec.ipu_endos_diff_amt, 0));
            ELSIF cur_risk_rec.pol_policy_status IN ('EN', 'CN')
            THEN
                v_eq_prem :=
                      cur_risk_rec.ipu_earthqke_prem_diff
                    * SIGN (NVL (cur_risk_rec.ipu_endos_diff_amt, 0));
            ELSE
                v_eq_prem := 0;
            END IF;

            -- RAISE_ERROR ('v_retention_amt=' || v_retention_amt);
            DBMS_OUTPUT.put_line ('v_prorata_prem=' || v_prorata_prem);

            IF v_prrd_code IS NULL
            THEN
                BEGIN
                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_prrd_code_seq.NEXTVAL)
                      INTO v_prrd_code
                      FROM DUAL;

                    v_cede_pool := 'Y';

                    --                  raise_error('AHA AHA IN PROCESS POPULATE GRP TREATIES  RI...............');

                    INSERT INTO gin_policy_risk_ri_dtls (
                                    prrd_code,
                                    prrd_ipu_code,
                                    prrd_idx,
                                    prrd_tran_no,
                                    prrd_wef,
                                    prrd_wet,
                                    prrd_current,
                                    prrd_comp_retention,
                                    prrd_avail_fulc_bal,
                                    prrd_gross_comp_retention, --prrd_facre_amount,
                                    prrd_com_retention_rate,
                                    prrd_grp_si_risk_pct,
                                    prrd_grp_top_loc,
                                    prrd_grp_comp_gross_ret,
                                    prrd_grp_comp_net_ret,
                                    prrd_ri_prem,
                                    prrd_as_uwyr,
                                    prrd_cover_days,
                                    prrd_prorata_prem,
                                    prrd_annual_prem,
                                    prrd_refund_net_prem,
                                    prrd_refund_facre_prem,
                                    prrd_prev_prrd_code,
                                    prrd_allowed_grs_comp_ret,
                                    prrd_effective_date,
                                    prrd_cede_pool,
                                    prrd_earthquake_prem,
                                    prrd_ri_net_less_eq_prem)
                             VALUES (
                                 v_prrd_code,
                                 cur_risk_rec.ipu_code,
                                 1,
                                 v_tran_no,
                                 cur_risk_rec.ipu_wef,
                                 cur_risk_rec.ipu_wet,
                                 'Y',
                                 ROUND (v_retention_amt, v_rnd),
                                 0,
                                 ROUND (v_retention_amt, v_rnd),          --0,
                                 ROUND (
                                       v_retention_amt
                                     / DECODE (
                                           NVL (
                                               cur_risk_rec.ipu_reinsure_amt,
                                               0),
                                           0, 1,
                                           cur_risk_rec.ipu_reinsure_amt)
                                     * 100,
                                     4),
                                 v_grp_pct,
                                 v_group_si,
                                 v_grp_tot_ret,
                                 0,
                                 ROUND (v_prorata_prem, v_rnd),
                                 cur_risk_rec.ipu_uw_yr,
                                 v_cover_days,
                                 ROUND (v_prorata_prem),
                                 NVL (cur_risk_rec.ipu_endos_diff_amt, 0),
                                 v_ref_net_reten,
                                 0,
                                 v_prrd_code,
                                 ROUND (v_retention_amt, v_rnd),
                                 v_eff_date,
                                 v_cede_pool,
                                 v_eq_prem,
                                   ROUND (
                                       NVL (cur_risk_rec.ipu_endos_diff_amt,
                                            0))
                                 - NVL (v_eq_prem, 0));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Unable to create risk RI details, ...');
                END;

                BEGIN
                    UPDATE gin_insured_property_unds
                       SET ipu_current_prrd_code = v_prrd_code
                     WHERE ipu_code = cur_risk_rec.ipu_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Unable to update risks current RI details code, ...');
                END;
            ELSE
                -- raise_error('AHA AHA IN PROCESS POPULATE GRP TREATIES  RI ELSE...............');
                BEGIN
                       UPDATE gin_policy_risk_ri_dtls
                          SET prrd_comp_retention = v_retention_amt,
                              prrd_gross_comp_retention =
                                  ROUND (v_retention_amt, v_rnd),
                              prrd_com_retention_rate =
                                  ROUND (
                                      DECODE (
                                          NVL (cur_risk_rec.ipu_reinsure_amt, 0),
                                          0, 100,
                                            v_retention_amt
                                          / NVL (cur_risk_rec.ipu_reinsure_amt,
                                                 0)
                                          * 100),
                                      4),           /***miti changed here ***/
                              prrd_grp_top_loc =
                                  ROUND (NVL (v_group_si, 0), v_rnd),
                              prrd_grp_si_risk_pct = ROUND (v_grp_pct, 4),
                              prrd_grp_comp_gross_ret =
                                  ROUND (v_grp_tot_ret, v_rnd),
                              prrd_ri_prem = ROUND (v_prorata_prem, v_rnd),
                              prrd_comp_net_rate =
                                  ROUND (
                                      DECODE (
                                          NVL (cur_risk_rec.ipu_reinsure_amt, 0),
                                          0, 100,
                                            v_retention_amt
                                          / NVL (cur_risk_rec.ipu_reinsure_amt,
                                                 0)
                                          * 100),
                                      4),           /***miti changed here ***/
                              prrd_net_prem =
                                  ROUND (
                                        ROUND (
                                            DECODE (
                                                NVL (
                                                    cur_risk_rec.ipu_reinsure_amt,
                                                    0),
                                                0, 100,
                                                  v_retention_amt
                                                / NVL (
                                                      cur_risk_rec.ipu_reinsure_amt,
                                                      0)
                                                * 100),
                                            4)
                                      * ROUND (v_prorata_prem, v_rnd)
                                      / 100),
                              prrd_as_uwyr = cur_risk_rec.ipu_uw_yr,
                              prrd_cover_days = v_cover_days,
                              prrd_prorata_prem = ROUND (v_prorata_prem),
                              prrd_annual_prem =
                                  NVL (cur_risk_rec.ipu_endos_diff_amt, 0),
                              prrd_refund_net_prem = v_ref_net_reten,
                              prrd_refund_facre_prem = 0,
                              prrd_allowed_grs_comp_ret =
                                  ROUND (v_retention_amt, v_rnd),
                              prrd_effective_date = v_eff_date,
                              prrd_earthquake_prem = NVL (v_eq_prem, 0),
                              prrd_ri_net_less_eq_prem =
                                    ROUND (
                                        NVL (cur_risk_rec.ipu_endos_diff_amt, 0))
                                  - NVL (v_eq_prem, 0)
                        WHERE     prrd_ipu_code = cur_risk_rec.ipu_code
                              AND prrd_code = v_prrd_code
                              AND prrd_tran_no = v_tran_no
                    RETURNING prrd_cede_pool
                         INTO v_cede_pool;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Unable to update the risk RI details, ...');
                END;

                IF v_cede_pool = 'Y'
                THEN
                    BEGIN
                        pop_pool_risk (cur_risk_rec.pol_batch_no,
                                       cur_risk_rec.ipu_code,
                                       v_tran_no,
                                       v_prrd_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('Error populating pool amount...');
                    END;
                END IF;

                --RAISE_ERROR('v_pol_fc_amt='||v_pol_fc_amt);
                IF     NVL (cur_risk_rec.ipu_reinsure_amt, 0) = 0
                   AND NVL (v_pol_fc_amt, 0) != 0
                THEN
                    raise_error (
                        'An amount facre setup has been provided when risks exist with no SI exist. Change all facre setups to percentage.');
                ELSIF NVL (cur_risk_rec.ipu_reinsure_amt, 0) = 0
                THEN
                    v_rsk_fc_rate := NVL (v_pol_fc_rate, 0);
                ELSIF     NVL (v_pol_fc_rate, 0) != 0
                      AND v_pol_fc_rate_type = 'R'
                THEN
                    v_rsk_fc_rate :=
                          (  (  NVL (v_pol_fc_amt, 0)
                              / NVL (cur_risk_rec.ipu_reinsure_amt, 0))
                           * 100)
                        + NVL (v_pol_fc_rate, 0);
                ELSIF NVL (v_pol_fc_amt, 0) != 0 AND v_pol_fc_rate_type = 'A'
                THEN
                    v_rsk_fc_rate :=
                          (  (  NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                              / NVL (v_pol_fc_amt, 0))
                           * 100)
                        + NVL (v_pol_fc_rate, 0);
                END IF;

                IF NVL (v_rsk_fc_rate, 0) > 0
                THEN
                    v_rsk_fc_amnt :=
                        ROUND (
                              v_rsk_fc_rate
                            * NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                            / 100,
                            v_rnd);

                    IF v_rsk_fc_rate > 100
                    THEN
                        raise_error (
                               'The preset facultative placement percentage/amount is more than the risk SI='
                            || v_rsk_fc_rate);
                    END IF;

                    v_facre_excess :=
                        NVL (v_facre_amt, 0) + NVL (v_rsk_fc_amnt, 0);

                    --RAISE_ERROR('HERE='||v_facre_excess||';'||v_facre_amt||';'||v_rsk_fc_amnt||';'||v_rsk_fc_rate);
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_avail_fulc_bal = v_facre_excess,
                           --v_rsk_fc_amnt,
                           prrd_excess_pct = v_rsk_fc_rate
                     WHERE prrd_code = v_prrd_code;

                    FOR cur_pol_facre_rec
                        IN cur_pol_facre (cur_risk_rec.pol_batch_no)
                    LOOP
                        --raise_error(v_facre_excess||';'||cur_pol_facre_rec.pfcs_rate||';'||cur_risk_rec.ipu_reinsure_amt);
                        IF cur_pol_facre_rec.pfcs_amt_or_rate = 'A'
                        THEN
                            v_rsk_fc_rate :=
                                  (cur_pol_facre_rec.pfcs_rate / v_pol_fc_amt)
                                * v_facre_excess;
                        ELSE
                            v_rsk_fc_rate := cur_pol_facre_rec.pfcs_rate;
                        END IF;

                        --RAISE_ERROR('stop='||cur_pol_facre_rec.pfcs_mngment_type||';'||cur_pol_facre_rec.pfcs_mngment_value||';'||cur_pol_facre_rec.pfcs_reins_tax_type||';'||cur_pol_facre_rec.pfcs_reins_tax_value);
                        --                  IF cur_pol_facre_rec.pfcs_rate= 169000000 THEN
                        --                  RAISE_ERROR(v_rsk_fc_rate||';'||v_facre_excess);
                        --                  END IF; gin_policy_facre_setup
                        insert_facre (cur_risk_rec.pol_batch_no,
                                      cur_risk_rec.ipu_code,
                                      v_tran_no,
                                      cur_pol_facre_rec.pfcs_agn_code,
                                      cur_pol_facre_rec.pfcs_agn_sht_desc,
                                      cur_pol_facre_rec.pfcs_amt_or_rate,
                                      v_rsk_fc_rate,
                                      v_user,
                                      'A',
                                      NULL,
                                      'N',
                                      cur_pol_facre_rec.pfcs_accepted_date,
                                      cur_pol_facre_rec.pfcs_accepted,
                                      cur_pol_facre_rec.pfcs_comm_rate,
                                      TRUE,
                                      cur_pol_facre_rec.pfcs_mngment_type,
                                      cur_pol_facre_rec.pfcs_mngment_value,
                                      cur_pol_facre_rec.pfcs_reins_tax_type,
                                      cur_pol_facre_rec.pfcs_reins_tax_value,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL);
                    END LOOP;
                END IF;
            END IF;

            v_arrngmt_defined := 0;
            v_arrangement := NULL;
            v_arrangement_type := NULL;

            FOR cur_arrangments_rec
                IN cur_arrangments (cur_risk_rec.ipu_sec_scl_code,
                                    cur_risk_rec.ipu_uw_yr)
            LOOP
                v_arrangement := cur_arrangments_rec.ta_code;
                -- get the underwriting year to refere to for the treaty
                v_arrngmt_defined := 1;
                v_trt_uwyr := NULL;
                v_arrangement_type := cur_arrangments_rec.ta_type;
                v_dummy := 0;

                SELECT COUNT (DISTINCT ('x'))
                  INTO v_dummy
                  FROM gin_treaty_arrangements, gin_class_treaties
                 WHERE     ta_code = clt_ta_code
                       AND clt_scl_code = cur_risk_rec.ipu_sec_scl_code
                       AND (cur_risk_rec.ipu_eff_wef BETWEEN clt_wef
                                                         AND clt_wet);

                IF v_dummy > 1
                THEN
                    --raise_error('The sub class '||cur_all_risks_rec.ipu_sec_scl_code||' has been defined in more than one treaty arrangements');
                    raise_error (
                           'The sub class '
                        || cur_risk_rec.ipu_sec_scl_code
                        || ' has been defined in more than one treaty arrangements');
                END IF;

                IF cur_arrangments_rec.ta_type IN ('U', 'X')
                THEN
                    --v_trt_uwyr :=TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'));
                    --v_trt_uwyr := NVL(cur_risk_rec.IPU_INCEPTION_UWYR,v_pol_incept_year);
                    /** commented on 20/03/2002by Njuki to take care of clean cut and uw yr treaties
                    --v_trt_uwyr := v_pol_incept_year;
                    the bug may be check if the risk is changing its uwyr if the arrangement is a clean cut it should not change if the arrangement is unwr year ***/
                    v_trt_uwyr := cur_risk_rec.ipu_uw_yr;
                ELSE
                    --v_trt_uwyr :=TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'));
                    --remmed for same reason above
                    --v_trt_uwyr := cur_risk_rec.IPU_UW_YR;
                    v_trt_uwyr := cur_risk_rec.ipu_uw_yr;
                END IF;

                --get retention limit
                IF    cur_risk_rec.pol_policy_status != 'DC'
                   OR (    cur_risk_rec.pol_policy_status = 'DC'
                       AND NVL (cur_risk_rec.pol_loaded, 'N') = 'Y')
                THEN
                    v_retention_amt := 0;
                    v_retention_type := NULL;

                    IF cur_risk_rec.ipu_rc_code IS NOT NULL
                    THEN
                        BEGIN
                            SELECT tcc_retention_limit,
                                   tcc_retention_type,
                                   as_code,
                                   tcc_fac_oblig_limit,
                                   ta_cur_code
                              INTO v_retention_amt,
                                   v_retention_type,
                                   v_as_code,
                                   v_fac_oblig_limit,
                                   v_trt_cur_code
                              FROM gin_trt_class_categories,
                                   gin_arrangement_setups,
                                   gin_treaty_arrangements
                             WHERE     as_ta_code = ta_code
                                   AND tcc_as_code = as_code
                                   AND tcc_scl_code =
                                       cur_risk_rec.ipu_sec_scl_code
                                   AND as_ta_code =
                                       cur_arrangments_rec.ta_code
                                   AND as_uwyr = v_trt_uwyr
                                   AND tcc_rc_code = cur_risk_rec.ipu_rc_code;

                            IF v_retention_type = 'P'
                            THEN
                                SELECT DISTINCT
                                         clt_retention_limit
                                       * v_retention_amt
                                       / 100,
                                       as_code,
                                       clt_fac_oblig_limit,
                                       ta_cur_code
                                  INTO v_retention_amt,
                                       v_as_code,
                                       v_fac_oblig_limit,
                                       v_trt_cur_code
                                  FROM gin_class_treaties,
                                       gin_arrangement_setups,
                                       gin_treaty_arrangements
                                 WHERE     as_ta_code = ta_code
                                       AND clt_as_code = as_code
                                       AND clt_scl_code =
                                           cur_risk_rec.ipu_sec_scl_code
                                       AND as_ta_code =
                                           cur_arrangments_rec.ta_code
                                       AND as_uwyr = v_trt_uwyr
                                       AND (cur_risk_rec.ipu_wef BETWEEN clt_wef
                                                                     AND clt_wet);
                            END IF;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                SELECT DISTINCT clt_retention_limit,
                                                as_code,
                                                clt_fac_oblig_limit,
                                                ta_cur_code
                                  INTO v_retention_amt,
                                       v_as_code,
                                       v_fac_oblig_limit,
                                       v_trt_cur_code
                                  FROM gin_class_treaties,
                                       gin_arrangement_setups,
                                       gin_treaty_arrangements
                                 WHERE     as_ta_code = ta_code
                                       AND clt_as_code = as_code
                                       AND clt_scl_code =
                                           cur_risk_rec.ipu_sec_scl_code
                                       AND as_ta_code =
                                           cur_arrangments_rec.ta_code
                                       AND as_uwyr = v_trt_uwyr;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to retrieve risk class retention amount');
                        END;
                    ELSE
                        v_retention_amt := 0;

                        BEGIN
                            SELECT DISTINCT clt_retention_limit,
                                            as_code,
                                            clt_fac_oblig_limit,
                                            ta_cur_code
                              INTO v_retention_amt,
                                   v_as_code,
                                   v_fac_oblig_limit,
                                   v_trt_cur_code
                              FROM gin_class_treaties,
                                   gin_arrangement_setups,
                                   gin_treaty_arrangements
                             WHERE     as_ta_code = ta_code
                                   AND clt_as_code = as_code
                                   AND clt_scl_code =
                                       cur_risk_rec.ipu_sec_scl_code
                                   AND as_ta_code =
                                       cur_arrangments_rec.ta_code
                                   AND as_uwyr = v_trt_uwyr
                                   AND (cur_risk_rec.ipu_wef BETWEEN clt_wef
                                                                 AND clt_wet);
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_retention_amt :=
                                      NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                                    - NVL (v_facre_amt, 0)
                                    - NVL (v_facre_excess, 0);
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to retrieve the arrangement retention limit');
                        END;
                    END IF;

                    DBMS_OUTPUT.put_line (
                           '2v_retention_amt='
                        || v_retention_amt
                        || ' SCL='
                        || cur_risk_rec.ipu_sec_scl_code
                        || ' TA='
                        || cur_arrangments_rec.ta_code
                        || ' uwyr='
                        || v_trt_uwyr
                        || ' WEF='
                        || cur_risk_rec.ipu_wef
                        || ' v_trt_cur_code='
                        || v_trt_cur_code
                        || ' v_bcur_code='
                        || v_bcur_code
                        || ' pol_cur_code='
                        || cur_risk_rec.pol_cur_code);

                    IF v_trt_cur_code != cur_risk_rec.pol_cur_code
                    THEN
                        IF v_bcur_code = v_trt_cur_code
                        THEN
                            -- raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
                            v_retention_amt :=
                                ROUND (
                                      v_retention_amt
                                    / cur_risk_rec.pol_cur_rate,
                                    v_rnd);
                            v_retention_amt := ROUND (v_retention_amt, v_rnd);
                        -- raise_error('v_retention_amt='||v_retention_amt||';'||v_exhange_rate);
                        ELSE
                            v_trt_cur_rate :=
                                get_exchange_rate (v_trt_cur_code,
                                                   v_bcur_code);
                            v_retention_amt :=
                                ROUND (
                                      v_retention_amt
                                    * v_trt_cur_rate
                                    / cur_risk_rec.pol_cur_rate,
                                    v_rnd);
                        END IF;
                    ELSE
                        v_retention_amt := ROUND (v_retention_amt, v_rnd);
                    END IF;

                    DBMS_OUTPUT.put_line (
                        '3v_retention_amt=' || v_retention_amt);

                    IF (v_retention_amt * NVL (v_grp_pct, 100) / 100) >
                         NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                       - NVL (v_facre_amt, 0)
                       - NVL (v_facre_excess, 0)
                    THEN
                        v_retention_amt :=
                              NVL (cur_risk_rec.ipu_reinsure_amt, 0)
                            - NVL (v_facre_amt, 0)
                            - NVL (v_facre_excess, 0);
                    ELSE
                        v_retention_amt :=
                            (v_retention_amt * NVL (v_grp_pct, 100) / 100);
                    END IF;

                    DBMS_OUTPUT.put_line (
                        '4v_retention_amt=' || v_retention_amt);

                    BEGIN
                        UPDATE gin_policy_risk_ri_dtls
                           SET prrd_comp_retention =
                                   ROUND (v_retention_amt, v_rnd),
                               prrd_gross_comp_retention =
                                   ROUND (v_retention_amt, v_rnd),
                               prrd_com_retention_rate =
                                   DECODE (
                                       ROUND (
                                             v_retention_amt
                                           / DECODE (
                                                 NVL (
                                                     cur_risk_rec.ipu_reinsure_amt,
                                                     0),
                                                 0, 100,
                                                 cur_risk_rec.ipu_reinsure_amt)
                                           * 100,
                                           4),
                                       0, 100,
                                       ROUND (
                                             v_retention_amt
                                           / DECODE (
                                                 NVL (
                                                     cur_risk_rec.ipu_reinsure_amt,
                                                     0),
                                                 0, 100,
                                                 cur_risk_rec.ipu_reinsure_amt)
                                           * 100,
                                           4)),
                               prrd_comp_net_rate =
                                   DECODE (
                                       ROUND (
                                             v_retention_amt
                                           / DECODE (
                                                 NVL (
                                                     cur_risk_rec.ipu_reinsure_amt,
                                                     0),
                                                 0, 100,
                                                 cur_risk_rec.ipu_reinsure_amt)
                                           * 100,
                                           4),
                                       0, 100,
                                       ROUND (
                                             v_retention_amt
                                           / DECODE (
                                                 NVL (
                                                     cur_risk_rec.ipu_reinsure_amt,
                                                     0),
                                                 0, 100,
                                                 cur_risk_rec.ipu_reinsure_amt)
                                           * 100,
                                           4)),
                               prrd_net_prem =
                                   ROUND (
                                         DECODE (
                                             ROUND (
                                                   v_retention_amt
                                                 / DECODE (
                                                       NVL (
                                                           cur_risk_rec.ipu_reinsure_amt,
                                                           0),
                                                       0, 100,
                                                       cur_risk_rec.ipu_reinsure_amt)
                                                 * 100,
                                                 4),
                                             0, 100,
                                             ROUND (
                                                   v_retention_amt
                                                 / DECODE (
                                                       NVL (
                                                           cur_risk_rec.ipu_reinsure_amt,
                                                           0),
                                                       0, 100,
                                                       cur_risk_rec.ipu_reinsure_amt)
                                                 * 100,
                                                 4))
                                       * NVL (prrd_ri_prem, 0)
                                       / 100),
                               prrd_allowed_grs_comp_ret =
                                   ROUND (v_retention_amt, v_rnd),
                               prrd_as_uwyr = v_trt_uwyr,
                               prrd_as_code = v_as_code,
                               prrd_facoblig_limit =
                                   DECODE (
                                       NVL (prrd_facoblig_alloc_chk, 'N'),
                                       'Y', 0,
                                       v_fac_oblig_limit)
                         WHERE     prrd_ipu_code = cur_risk_rec.ipu_code
                               AND prrd_code = v_prrd_code
                               AND prrd_tran_no = v_tran_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to update the risk retention limit');
                    END;
                ELSE
                    BEGIN
                        v_old_grs_ret_rate := 0;
                        v_net_ret_rate := 0;

                        SELECT prrd_com_retention_rate,
                               prrd_com_retention_rate,
                               prrd_as_uwyr,
                               prrd_as_code,
                               prrd_facoblig_excess
                          INTO v_old_grs_ret_rate,
                               v_net_ret_rate,
                               v_as_uwyr,
                               v_as_code,
                               v_fac_oblig_limit
                          FROM gin_policy_risk_ri_dtls
                         WHERE prrd_code =
                               (SELECT prrd_code
                                  FROM gin_policy_risk_ri_dtls
                                 WHERE     prrd_ipu_code =
                                           cur_risk_rec.ipu_prev_ipu_code
                                       AND prrd_current = 'Y');
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            v_old_grs_ret_rate := 0;
                            v_net_ret_rate := 0;
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to retrieve the prevoius cession rates');
                    END;

                    BEGIN
                        UPDATE gin_policy_risk_ri_dtls
                           SET prrd_comp_retention =
                                   ROUND (
                                         NVL (v_net_ret_rate, 0)
                                       / 100
                                       * NVL (cur_risk_rec.ipu_reinsure_amt,
                                              0),
                                       v_rnd),
                               prrd_gross_comp_retention =
                                   ROUND (
                                         NVL (v_old_grs_ret_rate, 0)
                                       / 100
                                       * NVL (cur_risk_rec.ipu_reinsure_amt,
                                              0),
                                       v_rnd),
                               prrd_allowed_grs_comp_ret =
                                   ROUND (
                                         NVL (v_old_grs_ret_rate, 0)
                                       / 100
                                       * NVL (cur_risk_rec.ipu_reinsure_amt,
                                              0),
                                       v_rnd),
                               prrd_com_retention_rate =
                                   NVL (v_old_grs_ret_rate, 0),
                               prrd_comp_net_rate = NVL (v_net_ret_rate, 0),
                               prrd_net_prem =
                                   ROUND (
                                         NVL (v_net_ret_rate, 0)
                                       * NVL (prrd_ri_prem, 0)
                                       / 100),
                               prrd_as_uwyr = v_as_uwyr,
                               prrd_as_code = v_as_code,
                               prrd_facoblig_limit =
                                   DECODE (
                                       NVL (prrd_facoblig_alloc_chk, 'N'),
                                       'Y', 0,
                                       v_fac_oblig_limit)
                         WHERE     prrd_ipu_code = cur_risk_rec.ipu_code
                               AND prrd_code = v_prrd_code
                               AND prrd_tran_no = v_tran_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to update the risk retention limit');
                    END;
                END IF;

                IF     cur_arrangments_rec.ta_type != 'X'
                   AND (   cur_risk_rec.pol_policy_status != 'DC'
                        OR (    cur_risk_rec.pol_policy_status = 'DC'
                            AND NVL (cur_risk_rec.pol_loaded, 'N') = 'Y'))
                THEN
                    --open treaty cursor
                    FOR cur_treaties_rec
                        IN cur_treaties (cur_risk_rec.ipu_sec_scl_code,
                                         cur_arrangments_rec.ta_code,
                                         v_trt_uwyr,
                                         cur_risk_rec.ipu_code)
                    LOOP
                        check_treaty_participation (
                            cur_treaties_rec.rei_code);
                        v_arrngmt_defined := 2;

                        -- get the correct u
                        --update retention amount
                        -- insert treaty details for the risk
                        BEGIN
                            SELECT ctl_code,
                                   DECODE (cur_risk_rec.pol_policy_type,
                                           'N', ctl_cede_rate,
                                           ctl_fi_cede_rate),
                                   ctl_rate_type
                              INTO v_ctl_code,
                                   v_ctl_cede_rate,
                                   v_ctl_rate_type
                              FROM gin_class_treaty_limits
                             WHERE     ctl_rei_code =
                                       cur_treaties_rec.rei_code
                                   AND ctl_scl_code =
                                       cur_risk_rec.ipu_sec_scl_code
                                   AND ctl_as_code = cur_treaties_rec.as_code;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                NULL;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error while picking the classs treaty ri rates...');
                        END;

                        BEGIN
                            INSERT INTO gin_policy_rein_risk_details (
                                            ptotr_code,
                                            ptotr_risk_cur_code,
                                            ptotr_trt_cur_code,
                                            ptotr_risk_si_pcur,
                                            ptotr_risk_prem_pcur,
                                            ptotr_rei_code,
                                            ptotr_trt_code,
                                            ptotr_trt_sht_desc,
                                            ptotr_clt_scl_code,
                                            ptotr_rate,
                                            ptotr_rate_type,
                                            ptotr_property_id,
                                            ptotr_uwyr,
                                            ptotr_ipu_code,
                                            ptotr_pol_batch_no,
                                            ptotr_pol_policy_no,
                                            ptotr_pol_ren_endos_no,
                                            ptotr_risk_cur_symbol,
                                            ptotr_trt_cur_symbol,
                                            ptotr_sect_code,
                                            ptotr_ta_code,
                                            ptotr_as_code,
                                            ptotr_trs_code,
                                            ptotr_trs_sht_desc,
                                            ptotr_ggt_tran_no,
                                            ptotr_tran_type,
                                            ptotr_prev_cession_rate,
                                            ptotr_prrd_code,
                                            ptotr_allowed_rate,
                                            ptotr_ctl_code)
                                     VALUES (
                                         ptotr_code_seq.NEXTVAL,
                                         v_cur_code,
                                         cur_treaties_rec.rei_cur_code,
                                         cur_risk_rec.ipu_reinsure_amt,
                                         cur_risk_rec.ipu_endos_diff_amt,
                                         cur_treaties_rec.rei_code,
                                         cur_treaties_rec.rei_trt_code,
                                         cur_treaties_rec.rei_trt_sht_desc,
                                         cur_risk_rec.ipu_sec_scl_code,
                                         --                                     NVL (v_ctl_cede_rate,
                                         --                                          cur_treaties_rec.rei_cede_rate
                                         --                                         ),
                                         NVL (
                                             v_ctl_cede_rate,
                                             DECODE (
                                                 cur_risk_rec.pol_policy_type,
                                                 'N', cur_treaties_rec.rei_cede_rate,
                                                 cur_treaties_rec.rei_fi_cede_rate)),
                                         NVL (v_ctl_rate_type,
                                              cur_treaties_rec.rei_rate_type),
                                         cur_risk_rec.ipu_property_id,
                                         v_trt_uwyr,
                                         cur_risk_rec.ipu_code,
                                         cur_risk_rec.ipu_pol_batch_no,
                                         cur_risk_rec.ipu_pol_policy_no,
                                         cur_risk_rec.ipu_pol_ren_endos_no,
                                         v_cur_symbol,
                                         cur_treaties_rec.rei_cur_symbol,
                                         cur_risk_rec.ipu_sec_sect_code,
                                         cur_treaties_rec.as_ta_code,
                                         cur_treaties_rec.as_code,
                                         cur_treaties_rec.rei_trs_code,
                                         cur_treaties_rec.rei_trs_sht_desc,
                                         v_tran_no,
                                         v_tran_type,
                                         0,
                                         v_prrd_code,
                                         -- NVL (v_ctl_cede_rate, cur_treaties_rec.rei_cede_rate ),
                                         NVL (
                                             v_ctl_cede_rate,
                                             DECODE (
                                                 cur_risk_rec.pol_policy_type,
                                                 'N', cur_treaties_rec.rei_cede_rate,
                                                 cur_treaties_rec.rei_fi_cede_rate)),
                                         v_ctl_code);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error in populate_treaty_details:- Unable to insert new treaty details....');
                        END;

                        --insert participants
                        FOR cur_participant_rec
                            IN cur_participant (cur_treaties_rec.rei_code)
                        LOOP
                            BEGIN
                                INSERT INTO gin_participations (
                                                part_code,
                                                part_cede_rate,
                                                part_trt_code,
                                                part_trt_sht_desc,
                                                part_agnt_agent_code,
                                                part_agnt_sht_desc,
                                                part_ptotr_code,
                                                part_rei_code,
                                                part_pol_cur_code,
                                                part_pol_cur_symbol,
                                                part_uwyr,
                                                part_pol_batch_no,
                                                part_pol_policy_no,
                                                part_pol_ren_endos_no,
                                                part_ipu_code,
                                                part_ta_code,
                                                part_as_code,
                                                part_fiscal_year,
                                                part_acc_posted,
                                                part_trs_code,
                                                part_trs_sht_desc,
                                                part_scl_code,
                                                part_ggt_tran_no,
                                                part_tran_type,
                                                part_prrd_code)
                                         VALUES (
                                             gin_part_code_seq.NEXTVAL,
                                             cur_participant_rec.trpa_comp_rate,
                                             cur_treaties_rec.rei_trt_code,
                                             cur_treaties_rec.rei_trt_sht_desc,
                                             cur_participant_rec.trpa_agnt_agent_code,
                                             cur_participant_rec.trpa_agnt_sht_desc,
                                             ptotr_code_seq.CURRVAL,
                                             cur_treaties_rec.rei_code,
                                             v_cur_code,
                                             v_cur_symbol,
                                             v_trt_uwyr,
                                             cur_risk_rec.ipu_pol_batch_no,
                                             cur_risk_rec.ipu_pol_policy_no,
                                             cur_risk_rec.ipu_pol_ren_endos_no,
                                             cur_risk_rec.ipu_code,
                                             cur_treaties_rec.as_ta_code,
                                             cur_treaties_rec.as_code,
                                             TO_NUMBER (
                                                 TO_CHAR (SYSDATE, 'YYYY')),
                                             'R',
                                             cur_treaties_rec.rei_trs_code,
                                             cur_treaties_rec.rei_trs_sht_desc,
                                             cur_risk_rec.ipu_sec_scl_code,
                                             v_tran_no,
                                             v_tran_type,
                                             v_prrd_code);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Error in populate_treaty_details:- Unable to insert treaty participants details....');
                            END;
                        END LOOP;                               --participants
                    END LOOP;                    --cur_treaties_rec main risks
                END IF;
            END LOOP;                                    --cur_arrangments_rec

            v_grp_flag := FALSE;

            IF v_arrngmt_defined = 0
            THEN
                v_msg :=
                       'No RI arrangement defined for the sub class code '
                    || cur_risk_rec.ipu_sec_scl_code
                    || ' UW Year :'
                    || cur_risk_rec.ipu_uw_yr
                    || ' currency code :'
                    || v_cur_code
                    || ' Define the Arrangement first. ';
                raise_error (v_msg);
            ELSIF v_arrngmt_defined = 1 AND v_arrangement_type != 'X'
            THEN
                FOR cur_cnt_trt_rec
                    IN cur_cnt_trt (v_arrangement,
                                    v_trt_uwyr,
                                    cur_risk_rec.ipu_sec_scl_code)
                LOOP
                    IF cur_cnt_trt_rec.cnt = 0
                    THEN
                        v_msg :=
                               'No RI treaties have been setup for the sub class code '
                            || cur_risk_rec.ipu_sec_scl_code
                            || ' UW year '
                            || v_trt_uwyr
                            || ' Define the treaties first. ';
                        clear_grp_cessions (v_ipu_code, v_tran_no);

                        DELETE gin_policy_risk_ri_dtls
                         WHERE prrd_code = v_prrd_code;

                        raise_error (v_msg);
                    END IF;
                END LOOP;
            --            END IF;
            END IF;
        END LOOP;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL..2..');
    --            raise_error('AHA AHA IN PROCESS POPULATE GRP TREATIES  RI  GENERAL...............');
    END;

    PROCEDURE call_grp_pop_treaties (
        v_pol_batch_no      IN     NUMBER,
        v_eff_date          IN     DATE,
        v_trans_no          IN OUT NUMBER,
        v_trans_type        IN     VARCHAR2,
        v_recompute_facre   IN     VARCHAR2 DEFAULT 'N',
        v_relr_code         IN     NUMBER,
        v_user              IN     VARCHAR2,
        v_ipu_data          IN     web_risk_tab)
    IS
        CURSOR pols IS
            SELECT ipu_code, ipu_relr_code, ipu_property_id
              FROM gin_insured_property_unds, gin_policies
             WHERE     ipu_pol_batch_no = v_pol_batch_no
                   AND ipu_pol_batch_no = pol_batch_no
                   --AND pol_current_status = 'A'
                   AND NVL (pol_authosrised, 'N') = 'A';

        CURSOR risks IS
            SELECT ipu_code, ipu_property_id, ipu_relr_code
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_pol_batch_no = v_pol_batch_no
                   AND prrd_tran_no = v_trans_no
                   AND ipu_code = prrd_ipu_code;

        CURSOR rein_risks (v_ipu_code NUMBER)
        IS
            SELECT ipu_code, ipu_property_id, ipu_relr_code
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = v_ipu_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_code = prrd_ipu_code;
    BEGIN
        -- RAISE_ERROR(333);
        --raise_error('TRANS NO. ='||v_trans_no);
        IF v_trans_no IS NULL
        THEN
            raise_error ('Error:- Transaction number not found...');
        END IF;

        IF v_ipu_data.COUNT = 0
        THEN
            FOR r IN risks
            LOOP
                call_grp_pop_treaties (r.ipu_code,
                                       r.ipu_property_id,
                                       v_eff_date,
                                       v_trans_no,
                                       v_trans_type,
                                       v_recompute_facre,
                                       r.ipu_relr_code,
                                       v_user);
            END LOOP;
        ELSE
            FOR i IN 1 .. v_ipu_data.COUNT
            LOOP
                FOR r IN rein_risks (v_ipu_data (i).gis_ipu_code)
                LOOP
                    call_grp_pop_treaties (r.ipu_code,
                                           r.ipu_property_id,
                                           v_eff_date,
                                           v_trans_no,
                                           v_trans_type,
                                           v_recompute_facre,
                                           r.ipu_relr_code,
                                           v_user);
                END LOOP;
            END LOOP;
        END IF;
    --      FOR P IN POLS LOOP
    --         call_grp_pop_treaties (P.ipu_code,
    --                                          P.ipu_property_id,
    --                                          v_eff_date,
    --                                          v_trans_no,
    --                                          v_trans_type,
    --                                          v_recompute_facre,
    --                                          p.IPU_relr_code ,
    --                                          v_user );
    --    END LOOP;
    --
    END;

    PROCEDURE call_grp_pop_treaties (
        v_ipu_code          IN     NUMBER,
        v_ipu_property_id   IN     VARCHAR2,
        v_eff_date          IN     DATE,
        v_trans_no          IN OUT NUMBER,
        v_trans_type        IN     VARCHAR2,
        v_recompute_facre   IN     VARCHAR2 DEFAULT 'N',
        v_relr_code         IN     NUMBER,
        v_user              IN     VARCHAR2)
    IS
        msg              VARCHAR2 (200);
        v_ta_type        VARCHAR2 (2);
        v_auth           VARCHAR2 (2);
        v_cur_symbol     gin_policies.pol_cur_symbol%TYPE;
        v_uwyr           gin_policies.pol_uw_year%TYPE;
        v_incept_year    gin_policies.pol_inception_uwyr%TYPE;
        v_cur_code       gin_policies.pol_cur_code%TYPE;
        v_prrd_code      NUMBER;
        v_pol_batch_no   NUMBER;
        v_ipu_wef        DATE;
    BEGIN
        --RAISE_ERROR(222);
        BEGIN
            SELECT NVL (ggt_trans_authorised, 'N')
              INTO v_auth
              FROM gin_gis_transactions
             WHERE ggt_trans_no = v_trans_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_auth := 'N';
                msg :=
                       'The transaction number '
                    || v_trans_no
                    || ' does not exist...retry processing..';
        --raise_error (msg);
        END;

        IF NVL (v_auth, 'N') != 'A'
        THEN
            BEGIN
                SELECT pol_cur_symbol,
                       pol_uw_year,
                       pol_inception_uwyr,
                       pol_cur_code,
                       pol_batch_no,
                       ipu_wef
                  INTO v_cur_symbol,
                       v_uwyr,
                       v_incept_year,
                       v_cur_code,
                       v_pol_batch_no,
                       v_ipu_wef
                  FROM gin_policies, gin_insured_property_unds
                 WHERE     ipu_pol_batch_no = pol_batch_no
                       AND ipu_code = v_ipu_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    msg :=
                           'Error :-, Unable to get the policy details for the risk '
                        || v_ipu_code;
                    raise_error (msg);
            END;

            --RAISE_eRROR(99999);
            reprocess_grp_ri (v_ipu_code,
                              v_relr_code,
                              v_trans_no,
                              v_ipu_wef,
                              v_user);
            clear_grp_cessions (v_ipu_code, v_trans_no);

            pop_grp_prev_cessions (v_ipu_code,
                                   v_trans_no,
                                   v_trans_type,
                                   v_cur_code,
                                   v_prrd_code,
                                   v_recompute_facre,
                                   v_user);
            pop_grp_treaty_details (v_ipu_code,
                                    v_ipu_wef,
                                    v_trans_no,
                                    v_trans_type);
        ELSE
            msg :=
                'This Policy Has Already Been Processed And Authorized ...You Cannot Process It Again...';
            raise_error (msg);
        END IF;
    END;

    PROCEDURE call_grp_pop_treaties (
        v_pol_batch_no      IN     NUMBER,
        v_ipu_code          IN     NUMBER,
        v_ipu_property_id   IN     VARCHAR2,
        v_eff_date          IN     DATE,
        v_trans_no          IN OUT NUMBER,
        v_trans_type        IN     VARCHAR2,
        v_recompute_facre   IN     VARCHAR2 DEFAULT 'N',
        v_relr_code         IN     NUMBER,
        v_user              IN     VARCHAR2)
    IS
        msg           VARCHAR2 (200);
        v_ta_type     VARCHAR2 (2);
        v_auth        VARCHAR2 (2);
        --v_cur_symbol     gin_policies.pol_cur_symbol%TYPE;
        --v_uwyr           gin_policies.pol_uw_year%TYPE;
        --v_incept_year    gin_policies.pol_inception_uwyr%TYPE;
        -- v_cur_code       gin_policies.pol_cur_code%TYPE;
        v_prrd_code   NUMBER;

        --v_pol_batch_no   number;
        CURSOR pol_rsks IS
            SELECT pol_cur_symbol,
                   pol_uw_year,
                   pol_inception_uwyr,
                   pol_cur_code,
                   pol_batch_no,
                   ipu_code,
                   ipu_relr_code
              FROM gin_policies, gin_insured_property_unds
             WHERE     ipu_pol_batch_no = pol_batch_no
                   AND pol_batch_no = v_pol_batch_no
                   AND ipu_code = NVL (v_ipu_code, ipu_code);
    BEGIN
        --  RAISE_ERROR(111);
        BEGIN
            SELECT NVL (ggt_trans_authorised, 'N')
              INTO v_auth
              FROM gin_gis_transactions
             WHERE ggt_trans_no = v_trans_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_auth := 'N';
                msg :=
                       'The transaction number '
                    || v_trans_no
                    || ' does not exist...retry processing..';
        --raise_error (msg);
        END;

        IF NVL (v_auth, 'N') != 'A'
        THEN
            FOR r IN pol_rsks
            LOOP
                --RAISE_eRROR(99999);
                reprocess_grp_ri (r.ipu_code,
                                  r.ipu_relr_code,
                                  v_trans_no,
                                  v_eff_date,
                                  v_user);
                clear_grp_cessions (r.ipu_code, v_trans_no);
                pop_grp_prev_cessions (r.ipu_code,
                                       v_trans_no,
                                       v_trans_type,
                                       r.pol_cur_code,
                                       v_prrd_code,
                                       v_recompute_facre,
                                       v_user);
                pop_grp_treaty_details (r.ipu_code,
                                        v_eff_date,
                                        v_trans_no,
                                        v_trans_type);
            END LOOP;
        ELSE
            msg :=
                'This Policy Has Already Been Processed And Authorized ...You Cannot Process It Again...';
            raise_error (msg);
        END IF;
    END;

    PROCEDURE grp_reinsure_risks (v_batch_no       IN NUMBER,
                                  v_base_cur       IN NUMBER,
                                  v_cur_sht_desc   IN VARCHAR2,
                                  v_tran_no        IN NUMBER,
                                  v_tran_type      IN VARCHAR2,
                                  v_user              VARCHAR2)
    IS
        v_d                           NUMBER;
        --v_user                 VARCHAR2 (30);
        --:= PKG_GLOBAL_VARS.GET_PVARCHAR2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        v_diary_item                  VARCHAR2 (1000);
        v_exhange_rate                NUMBER := 1;
        v_tot_si                      NUMBER := 0;
        v_amt_to_reinsure             NUMBER := 0;
        v_trt_rate                    NUMBER;
        v_trt_si_tcur                 NUMBER := 0;
        v_accprd                      NUMBER;
        v_acpr_sht_desc               VARCHAR2 (25);
        msg                           VARCHAR2 (200);
        v_cession_rate                NUMBER := 0;
        v_trt_prem_tcur               NUMBER := 0;
        v_trt_com_tcur                NUMBER := 0;
        v_trt_si_pcur                 NUMBER := 0;
        v_trt_prem_pcur               NUMBER := 0;
        v_trt_com_pcur                NUMBER := 0;
        v_ptax_amount                 NUMBER := 0;
        v_ptax_tcur                   NUMBER := 0;
        v_ctax_amount                 NUMBER := 0;
        v_ctax_tcur                   NUMBER := 0;
        v_ret_limit                   NUMBER := 0;
        v_gross_ret                   NUMBER := 0;
        v_net_ret                     NUMBER := 0;
        v_prec_tax                    NUMBER := 0;
        v_crec_tax                    NUMBER := 0;
        v_prev_wef                    DATE;
        v_prev_wet                    DATE;
        v_prev_ipu_gp                 NUMBER := 0;
        --      v_trt_rpremtax_pcur       NUMBER          := 0;
        --      v_part_rpremtax_pcur      NUMBER          := 0;
        --      v_trt_premtax_pcur        NUMBER          := 0;
        --      v_part_premtax_pcur       NUMBER          := 0;
        v_prem_tax                    NUMBER := 0;
        --v_pol_com    NUMBER :=NVL(:GIN_POLICIES.POL_COMM_ENDOS_DIFF_AMT,0);
        v_pol_com                     NUMBER := 0;
        v_prrd_code                   NUMBER;
        --v_PART_PREM_TAX    NUMBER :=0;
        v_trt_rprem_tax               NUMBER := 0;
        v_trt_prem_tax                NUMBER := 0;
        v_ref_trt_prem_pcur           NUMBER := 0;
        v_ref_trt_com_pcur            NUMBER := 0;
        v_test                        NUMBER;
        v_rnd                         NUMBER := 0;
        v_rnd_bcur                    NUMBER := 0;
        v_q                           NUMBER;
        v_zero_devide                 EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        v_ctl_si_start_from           NUMBER;
        v_ctl_limit_amt               NUMBER;
        --      v_part_si_pcur            NUMBER;
        --      v_part_si_tcur            NUMBER;
        --      v_part_prem_pcur          NUMBER;
        --      v_part_prem_tcur          NUMBER;
        --      v_part_comm_pcur          NUMBER;
        --      v_part_comm_tcur          NUMBER;
        v_cnt                         NUMBER;
        v_part_code                   NUMBER;
        v_special_ret_limit           NUMBER;
        v_special_ret_diff            NUMBER;
        v_pool_amt                    NUMBER;
        v_total_facoblig_ceded        NUMBER;
        v_facoblig_excess             NUMBER;
        v_facnorml_excess             NUMBER;
        v_pool_si                     NUMBER;
        v_pool_prem                   NUMBER;
        v_pool_rate                   NUMBER;
        v_facoblig_limit              NUMBER;
        v_avail_fulc_bal              NUMBER;
        --      v_part_refund_com         NUMBER;
        --      v_part_refund_prem        NUMBER;
        v_special_ret_prem            NUMBER;
        v_special_ret_prem_diff       NUMBER;

        v_trt_cur_code                NUMBER;
        v_ta_type                     VARCHAR2 (25);
        v_ri_cur_rate                 NUMBER;

        --        v_trt_cur_code  NUMBER;
        v_ta_code                     NUMBER;
        v_bcur_code                   NUMBER;
        v_bcur_symbol                 VARCHAR2 (10);
        v_trt_cur_rate                NUMBER;

        v_rein_cur_param              VARCHAR2 (25);
        v_bcur_rnd                    NUMBER;
        v_retention_amt               NUMBER;
        v_ri_prem_formular            VARCHAR2 (20);
        v_trt_net_less_eq_prem_pcur   NUMBER;
        v_trt_net_less_eq_comm_pcur   NUMBER;
        v_trt_eq_prem_pcur            NUMBER;
        v_trt_eq_com_pcur             NUMBER;

        -- select the current accounting period
        CURSOR cur_accprd IS
            SELECT acpr_code, acpr_sht_desc
              FROM gin_acc_periods
             WHERE TRUNC (SYSDATE) BETWEEN TO_DATE (
                                                  TO_CHAR (acpr_wef,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY')
                                       AND TO_DATE (
                                                  TO_CHAR (acpr_wet,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY');

        --select all single the policy risks that have not been reinsured and are ready for reinsurance
        CURSOR cur_all_risks IS
              SELECT pol_cur_code,
                     ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     prrd_gross_comp_retention     gross_comp_ret,
                     ipu_pol_est_max_loss,
                     prrd_avail_fulc_bal,
                     prrd_ri_prem,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_sect_sht_desc,
                     ipu_cur_code,
                     prrd_facre_amount,
                     ipu_reinsure_amt,
                     prrd_gross_comp_retention,
                     ipu_prem_tax,
                     prrd_facoblig_excess,
                     pol_cur_symbol,
                     ipu_override_ri_retention,
                     prrd_facoblig_user_excess,
                     prrd_code,
                     prrd_facoblig_limit,
                     ipu_endos_diff_amt,
                     ipu_overrideride_ret_type,
                     ipu_uw_yr,
                     pol_exch_rate_fixed,
                     ipu_rc_code,
                     pol_cur_rate,
                     prrd_comp_ret_edited,
                     prrd_cumm_ri_prem,
                     prrd_ri_prev_prem,
                     POL_POLICY_STATUS,
                     prrd_ri_net_less_eq_prem,
                     prrd_earthquake_prem,
                     ipu_prev_ipu_code
                FROM gin_policies,
                     gin_insured_property_unds,
                     gin_policy_risk_ri_dtls
               WHERE     pol_batch_no = ipu_pol_batch_no
                     AND ipu_code = prrd_ipu_code
                     AND prrd_tran_no = v_tran_no
                     -- AND ipu_reinsured = 1
                     AND ipu_pol_batch_no = v_batch_no
                     AND NVL (prrd_current, 'N') = 'D'
            --AND IPU_CUMMULATIVE_REINS ='N'
            --AND IPU_RELR_CODE IS NULL
            ORDER BY ipu_code;

        -- select risk treaty setup
        -- get teaty setups
        CURSOR cur_treaties (v_ipu_code   IN NUMBER,
                             v_type       IN NUMBER,
                             v_prrd          NUMBER)
        IS
              SELECT clt_ta_sht_desc,
                     clt_scl_code,
                     clt_retention_limit,
                     trt_code,
                     trt_sht_desc,
                     trt_level,
                     rei_code,
                     rei_trt_code,
                     rei_trt_sht_desc,
                     rei_comm_rate,
                     rei_limit,
                     ptotr_rate,
                     rei_rate_type,
                     rei_quake_limit,
                     rei_retained_prem,
                     rei_cur_code,
                     rei_cur_symbol,
                     rei_as_code,
                     rei_ta_code,
                     rei_trs_code,
                     rei_trs_sht_desc,
                     NVL (rei_si_start_from, 0)     rei_si_start_from,
                     rei_ri_prem_tax_rate,
                     rei_ri_prem_tax_div_fact,
                     ptotr_property_id,
                     ptotr_uwyr,
                     ptotr_ipu_code,
                     ptotr_pol_batch_no,
                     ptotr_pol_policy_no,
                     ptotr_pol_ren_endos_no,
                     ptotr_sect_code,
                     ptotr_risk_cur_code,
                     ptotr_prev_cession_rate,
                     ptotr_ctl_code,
                     ptotr_code,
                     rei_earthqke_comm_rate
                FROM gin_policy_rein_risk_details, gin_treaty_setups_vw
               WHERE     ptotr_clt_scl_code = clt_scl_code
                     AND ptotr_rei_code = rei_code
                     AND ptotr_ipu_code = v_ipu_code
                     AND trt_code = v_type
                     AND ptotr_prrd_code = v_prrd
            ORDER BY trt_level, NVL (rei_si_start_from, 0);

        --get retention limit
        CURSOR cur_arrangement_det (v_ipu_code NUMBER, v_scl_code NUMBER)
        IS
            SELECT DISTINCT clt_retention_limit
              FROM gin_class_treaties, gin_policy_rein_risk_details
             WHERE     clt_as_code = ptotr_as_code
                   AND ptotr_ipu_code = v_ipu_code
                   AND clt_scl_code = v_scl_code;

        CURSOR cur_participant_rate (v_rei_code IN NUMBER)
        IS
            SELECT trpa_agnt_agent_code,
                   trpa_agnt_sht_desc,
                   trpa_rei_code,
                   trpa_uw_year,
                   trpa_comp_rate,
                   trpa_rei_prem_taxable,
                   trpa_trs_code,
                   trpa_trs_sht_desc
              FROM gin_treaty_participants
             WHERE trpa_rei_code = v_rei_code;

        ---get tax rates
        CURSOR cur_tax_rates IS
            SELECT taxr_rate,
                   taxr_wef,
                   taxr_wet,
                   trnt_application_lvl,
                   trnt_type,
                   taxr_min_amt,
                   taxr_round_nxt,
                   taxr_trnt_code,
                   taxr_division_factor
              FROM gin_tax_rates, gin_transaction_types
             WHERE     trnt_code = taxr_trnt_code
                   AND (trnt_type LIKE 'WTHTX%' OR trnt_type IN ('PRP'))
                   AND (   (TRUNC (SYSDATE) BETWEEN taxr_wef AND taxr_wet)
                        OR (TRUNC (SYSDATE) >= taxr_wef AND taxr_wet IS NULL));
    --R0 = Reinsurance tax
    --R1 = Reinsurance premium tax
    --R2 = Reinsurance interest tax
    --R3 = Reinsurance commission tax
    BEGIN
        --v_user :=
        --         pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        DBMS_OUTPUT.put_line ('HEREONLY');
        v_exhange_rate := get_currexch_rate (v_base_cur, v_rnd, v_bcur_rnd);
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

        --raise_error('v_batch_no='||v_batch_no||';'||v_tran_no);
        FOR cur_all_risks_rec IN cur_all_risks
        LOOP
            BEGIN
                SELECT gin_parameters_pkg.get_param_varchar (
                           'REINS_IN_BASE_CURRENCY')
                  INTO v_rein_cur_param
                  FROM DUAL;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_rein_cur_param := 'N';
                WHEN OTHERS
                THEN
                    raise_error ('Error fetching Treaty  parameter...');
            END;

            BEGIN
                SELECT gin_parameters_pkg.get_param_varchar (
                           'RI_PREM_FORMULAR')
                  INTO v_ri_prem_formular
                  FROM DUAL;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_rein_cur_param := 'N';
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error fetching Reinsurance Premium Calculation Option...');
            END;

            BEGIN
                v_prrd_code := NULL;

                SELECT prrd_code, PRRD_AS_CODE
                  INTO v_prrd_code, v_ta_code
                  FROM gin_policy_risk_ri_dtls
                 WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                       AND prrd_tran_no = v_tran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'Error :- Unable Please populate treaties again....');
            END;

            BEGIN
                SELECT DISTINCT ta_cur_code, TA_TYPE, REI_CUR_RATE
                  INTO v_trt_cur_code, v_ta_type, v_ri_cur_rate
                  FROM gin_class_treaties,
                       gin_arrangement_setups,
                       gin_treaty_arrangements,
                       gin_treaty_setups -- for now... this needs to be looked into afresh
                 WHERE     as_ta_code = ta_code
                       AND clt_as_code = as_code
                       AND clt_scl_code = cur_all_risks_rec.ipu_sec_scl_code
                       AND AS_CODE = v_ta_code
                       AND REI_AS_CODE = as_code
                       AND REI_TA_CODE = ta_code
                       AND as_uwyr = cur_all_risks_rec.ipu_uw_yr;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    raise_error (
                        'Unable to retrieve the arrangement retention limit');
            END;

            v_prem_tax := 0;
            v_prem_tax := cur_all_risks_rec.ipu_prem_tax;

            BEGIN
                v_prrd_code := NULL;

                SELECT prrd_code
                  INTO v_prrd_code
                  FROM gin_policy_risk_ri_dtls
                 WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                       AND prrd_tran_no = v_tran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'Error :- Unable Please populate treaties again....');
            END;

            BEGIN
                SELECT ipu_wef, ipu_wet, ipu_gp
                  INTO v_prev_wef, v_prev_wet, v_prev_ipu_gp
                  FROM gin_insured_property_unds
                 WHERE ipu_code = cur_all_risks_rec.ipu_prev_ipu_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            v_exhange_rate := 0;
            v_exhange_rate :=
                get_currexch_rate (cur_all_risks_rec.pol_cur_code,
                                   v_rnd,
                                   v_rnd_bcur);
            v_pool_si := get_risk_ri_pool (cur_all_risks_rec.prrd_code);
            v_pool_prem := get_ri_pool_prem (cur_all_risks_rec.prrd_code);
            v_pool_rate := get_ri_pool_rate (cur_all_risks_rec.prrd_code);
            v_tot_si := cur_all_risks_rec.ipu_reinsure_amt;
            v_avail_fulc_bal :=
                NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0);
            v_amt_to_reinsure :=
                (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                 - NVL (v_avail_fulc_bal, 0)
                 - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                 - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
                 - NVL (v_pool_si, 0));

            IF NVL (v_amt_to_reinsure, 0) < 0
            THEN
                IF NVL (v_pool_si, 0) >
                   (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                    - NVL (cur_all_risks_rec.prrd_facre_amount, 0))
                THEN
                    raise_error (
                        'The pool rate specified is greater than the available excess on risk. Please remove some of the facre cessions..');
                ELSIF NVL (v_pool_si, 0) <
                      (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                       - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                       - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0))
                THEN
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_avail_fulc_bal = 0
                     WHERE prrd_code = v_prrd_code;

                    v_avail_fulc_bal := 0;
                    v_amt_to_reinsure :=
                        (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                         - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                         - NVL (cur_all_risks_rec.prrd_facoblig_excess, 0)
                         - NVL (v_pool_si, 0));
                ELSIF NVL (v_pool_si, 0) <
                      (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                       - NVL (cur_all_risks_rec.prrd_facre_amount, 0))
                THEN
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_avail_fulc_bal = 0, prrd_facoblig_excess = 0
                     WHERE prrd_code = v_prrd_code;

                    v_avail_fulc_bal := 0;
                    v_amt_to_reinsure :=
                        (  NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                         - NVL (cur_all_risks_rec.prrd_facre_amount, 0)
                         - NVL (v_pool_si, 0));
                END IF;
            END IF;

            IF NVL (v_amt_to_reinsure, 0) = 0
            THEN
                UPDATE gin_policy_risk_ri_dtls
                   SET prrd_com_retention_rate = (100 - NVL (v_pool_rate, 0)),
                       prrd_comp_net_rate = (100 - NVL (v_pool_rate, 0)),
                       prrd_net_prem =
                           ROUND (
                                 ((100 - NVL (v_pool_rate, 0)) / 100)
                               * NVL (prrd_ri_prem, 0),
                               2)
                 WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                       AND prrd_code = v_prrd_code
                       AND prrd_tran_no = v_tran_no;
            ELSE
                --MANDATORY
                FOR cur_treaties_rec
                    IN cur_treaties (cur_all_risks_rec.ipu_code,
                                     1001,
                                     v_prrd_code)
                LOOP
                    check_treaty_participation (cur_treaties_rec.rei_code);
                    -- Its A Mandatory Type treaty

                    -- calculate treaty sum insured in policy currency
                    v_trt_si_pcur :=
                        v_tot_si * (cur_treaties_rec.ptotr_rate / 100);
                    v_trt_si_tcur := v_trt_si_pcur / v_exhange_rate;
                    v_trt_rate := (cur_treaties_rec.ptotr_rate);
                    -- Culculate treaty premium
                    v_cession_rate := v_trt_si_pcur / v_tot_si * 100;

                    IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CESSION'
                       OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB',
                                                                   'RN',
                                                                   'EX',
                                                                   'CN'))
                       OR (    cur_all_risks_rec.POL_POLICY_STATUS = 'EN'
                           AND cur_all_risks_rec.ipu_wef = v_prev_wef
                           AND cur_all_risks_rec.ipu_wet = v_prev_wet
                           AND cur_all_risks_rec.ipu_gp = v_prev_ipu_gp)
                    THEN
                        v_trt_net_less_eq_prem_pcur :=
                            ROUND (
                                  v_cession_rate
                                * NVL (
                                      cur_all_risks_rec.prrd_ri_net_less_eq_prem,
                                      0)
                                / 100,
                                v_rnd);
                        --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
                        v_trt_eq_prem_pcur :=
                            ROUND (
                                  v_cession_rate
                                * NVL (
                                      cur_all_risks_rec.prrd_earthquake_prem,
                                      0)
                                / 100,
                                v_rnd);
                        --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
                        v_trt_prem_pcur :=
                              NVL (v_trt_eq_prem_pcur, 0)
                            + NVL (v_trt_net_less_eq_prem_pcur, 0);
                        v_trt_prem_tcur :=
                            ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                    --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
                    ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CHANGE'
                    THEN
                        v_trt_net_less_eq_prem_pcur :=
                              (  (  v_cession_rate
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.PRRD_RI_PREM))
                            * cur_all_risks_rec.prrd_ri_net_less_eq_prem
                            / cur_all_risks_rec.PRRD_RI_PREM;
                        v_trt_net_less_eq_prem_pcur :=
                            ROUND (v_trt_net_less_eq_prem_pcur, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                               'v_trt_net_less_eq_prem_pcur='
                            || v_trt_net_less_eq_prem_pcur);
                        v_trt_eq_prem_pcur :=
                              (  (  v_cession_rate
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.PRRD_RI_PREM))
                            * cur_all_risks_rec.prrd_earthquake_prem
                            / cur_all_risks_rec.PRRD_RI_PREM;
                        v_trt_eq_prem_pcur :=
                            ROUND (v_trt_eq_prem_pcur, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_eq_prem_pcur=' || v_trt_eq_prem_pcur);
                        v_trt_prem_pcur :=
                              NVL (v_trt_eq_prem_pcur, 0)
                            + NVL (v_trt_net_less_eq_prem_pcur, 0);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_prem_pcur=' || v_trt_prem_pcur);
                        v_trt_prem_tcur :=
                            ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_prem_tcur=' || v_trt_prem_tcur);
                    END IF;

                    --               v_trt_prem_pcur :=
                    --                     (v_cession_rate * cur_all_risks_rec.prrd_ri_prem / 100
                    --                     );
                    --               v_ref_trt_prem_pcur :=
                    --                    (  NVL (cur_treaties_rec.ptotr_prev_cession_rate, 0)
                    --                     * cur_all_risks_rec.ipu_endos_diff_amt     --prrd_ri_prem
                    --                     / 100
                    --                    )
                    --                  - v_trt_prem_pcur;
                    --               v_trt_prem_tcur := v_trt_prem_pcur / v_exhange_rate;
                    -- calculate mandatory commission

                    v_trt_net_less_eq_comm_pcur :=
                        ROUND (
                            (  (  v_trt_net_less_eq_prem_pcur
                                * cur_treaties_rec.rei_comm_rate)
                             / 100),
                            v_rnd);
                    v_trt_eq_com_pcur :=
                        ROUND (
                            (  (  v_trt_eq_prem_pcur
                                * cur_treaties_rec.rei_earthqke_comm_rate)
                             / 100),
                            v_rnd);
                    --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
                    v_trt_com_pcur :=
                          NVL (v_trt_net_less_eq_comm_pcur, 0)
                        + NVL (v_trt_eq_com_pcur, 0);
                    v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
                    v_amt_to_reinsure := (v_amt_to_reinsure - v_trt_si_tcur);
                    DBMS_OUTPUT.put_line (
                        '22v_amt_to_reinsure=' || v_amt_to_reinsure);
                    --v_quota_bal    := v_quota_bal - v_trt_si_pcur;
                    --v_eml_to_reinsure := v_eml_to_reinsure - v_trt_si_tcur;
                    /*********tax part**************************/
                    ----calculate reinsurance tax, reinsurance commission tax part
                    v_ptax_amount := 0;
                    v_ctax_amount := 0;
                    v_ptax_tcur := 0;
                    v_ctax_tcur := 0;
                    v_ptax_amount := ROUND (NVL (v_prem_tax, 0), v_rnd);
                    v_ctax_amount :=
                        ROUND (NVL (v_pol_com, 0) * v_cession_rate, v_rnd);
                    v_ptax_tcur := v_ptax_amount * v_exhange_rate;
                    v_ctax_tcur := v_ctax_amount * v_exhange_rate;

                    /***********************************************************************/
                    UPDATE gin_policy_rein_risk_details
                       SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
                           ptotr_risk_si_tcur =
                               ROUND (ptotr_trt_si_tcur, v_rnd_bcur),
                           ptotr_risk_prem_tcur =
                               ROUND (ptotr_trt_prem_tcur, v_rnd_bcur),
                           ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
                           ptotr_trt_si_tcur =
                               ROUND (v_trt_si_tcur, v_rnd_bcur),
                           ptotr_trt_prem_pcur =
                               ROUND (v_trt_prem_pcur, v_rnd),
                           ptotr_trt_prem_tcur =
                               ROUND (v_trt_prem_tcur, v_rnd_bcur),
                           ptotr_trt_comm_pcur =
                               ROUND (v_trt_com_pcur, v_rnd),
                           ptotr_trt_comm_tcur =
                               ROUND (v_trt_com_tcur, v_rnd_bcur),
                           ptotr_cession_pct = ROUND (v_cession_rate, 4),
                           ptotr_acpr_sht_desc = v_acpr_sht_desc,
                           ptotr_acpr_code = v_accprd,
                           ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
                           ptotr_prem_tax_tcur =
                               ROUND (v_ptax_tcur, v_rnd_bcur),
                           ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
                           ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
                           ptotr_comm_tax_tcur =
                               ROUND (v_ctax_tcur, v_rnd_bcur),
                           ptotr_refund_prem =
                               ROUND (NVL (v_ref_trt_prem_pcur, 0),
                                      v_rnd_bcur),
                           ptotr_refund_com =
                               ROUND (NVL (v_ref_trt_com_pcur, 0),
                                      v_rnd_bcur),
                           ptotr_ggt_tran_no = v_tran_no,
                           ptotr_tran_type = v_tran_type,
                           ptotr_earthqke_comm_rate =
                               cur_treaties_rec.rei_earthqke_comm_rate,
                           ptotr_earthqke_prem =
                               ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
                           ptotr_earthqke_comm =
                               ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
                           ptotr_net_less_eq_prem =
                               ROUND (v_trt_net_less_eq_prem_pcur,
                                      v_bcur_rnd),
                           ptotr_net_less_eq_comm =
                               ROUND (v_trt_net_less_eq_comm_pcur,
                                      v_bcur_rnd)
                     WHERE     ptotr_ipu_code = cur_all_risks_rec.ipu_code
                           AND ptotr_as_code = cur_treaties_rec.rei_as_code
                           AND ptotr_rei_code = cur_treaties_rec.rei_code
                           AND ptotr_prrd_code = v_prrd_code;

                    /************************start participartion *****/

                    Update_treaty_partipants (
                        cur_treaties_rec.rei_code,
                        v_prrd_code,
                        cur_treaties_rec.ptotr_code,
                        v_trt_si_pcur,
                        v_trt_si_tcur,
                        v_trt_prem_pcur,
                        v_trt_prem_tcur,
                        v_trt_com_pcur,
                        v_trt_com_tcur,
                        cur_all_risks_rec.pol_cur_code,
                        cur_all_risks_rec.pol_cur_symbol,
                        cur_all_risks_rec.ipu_pol_batch_no,
                        cur_all_risks_rec.ipu_pol_policy_no,
                        cur_all_risks_rec.ipu_pol_ren_endos_no,
                        v_tran_no,
                        v_tran_type,
                        cur_all_risks_rec.ipu_code,
                        cur_all_risks_rec.ipu_sec_scl_code,
                        v_exhange_rate,
                        v_rnd,
                        v_bcur_rnd);
                /*********************************end participation**********************/
                END LOOP;                                        --- mandatory

                -- calculate company retention

                /*** THIS PART WAS REMMED ON 09/10/2001 IN THE SENSE THAT ALWAYs USE THE RISK COMPANY RETENTION AND NOT PICKING FROM THE SETUPS */
                --OPEN cur_arrangement_det(cur_all_risks_rec.ipu_code,cur_all_risks_rec.IPU_SEC_SCL_CODE);
                --FETCH cur_arrangement_det INTO v_ret_limit;
                --CLOSE cur_arrangement_det;
                v_ret_limit := cur_all_risks_rec.prrd_gross_comp_retention;

                IF v_amt_to_reinsure > NVL (v_ret_limit, 0)
                THEN
                    v_gross_ret := NVL (v_ret_limit, 0);
                ELSE
                    v_gross_ret := v_amt_to_reinsure;
                END IF;

                v_special_ret_limit := v_gross_ret;
                v_special_ret_diff := 0;

                IF     NVL (cur_all_risks_rec.ipu_override_ri_retention, 0) !=
                       0
                   AND NVL (cur_all_risks_rec.ipu_overrideride_ret_type, 'X') !=
                       'P'
                THEN
                    v_special_ret_limit :=
                        NVL (cur_all_risks_rec.ipu_override_ri_retention, 0);

                    IF v_special_ret_limit > v_amt_to_reinsure
                    THEN
                        v_special_ret_limit := v_amt_to_reinsure;
                    END IF;

                    v_special_ret_diff := v_special_ret_limit - v_gross_ret;
                    v_special_ret_prem := 0;
                ELSIF     NVL (cur_all_risks_rec.ipu_override_ri_retention,
                               0) !=
                          0
                      AND NVL (cur_all_risks_rec.ipu_overrideride_ret_type,
                               'X') =
                          'P'
                THEN
                    v_special_ret_prem :=
                        NVL (cur_all_risks_rec.ipu_override_ri_retention, 0);
                ELSE
                    v_special_ret_prem := 0;
                END IF;

                v_amt_to_reinsure :=
                    NVL (v_amt_to_reinsure, 0) - NVL (v_special_ret_limit, 0);
                --the line below commented out on 19th Jan 2002
                --v_gross_ret := NVL(cur_all_risks_rec.prrd_GROSS_COMP_RETENTION,v_gross_ret);

                --v_net_ret := v_gross_ret;
                v_net_ret := 0;
                --
                -- v_gross_ret := ROUND(NVL(v_gross_ret,0));
                --v_amt_to_reinsure := NVL(v_amt_to_reinsure,0) - NVL(v_gross_ret,0);
                /*  DBMS_OUTPUT.put_line (   '1 be qst v_special_ret_limit='
                                       || v_special_ret_limit);
                 IF v_special_ret_limit > v_amt_to_reinsure THEN
                     v_special_ret_limit := v_amt_to_reinsure;
                 ELSE
                     v_amt_to_reinsure :=           NVL (v_amt_to_reinsure, 0)
                           - NVL (v_special_ret_limit, 0);
                 END IF;*/
                v_gross_ret := NVL (v_gross_ret, 0);
                v_pool_amt := 0;
                DBMS_OUTPUT.put_line (
                    'v_amt_to_reinsure=' || v_amt_to_reinsure);

                -- process quota share
                FOR cur_treaties_rec
                    IN cur_treaties (cur_all_risks_rec.ipu_code,
                                     1003,
                                     v_prrd_code)
                LOOP
                    check_treaty_participation (cur_treaties_rec.rei_code);

                    -- Its A Quota share Type treaty
                    -- calculate treaty sum insured in policy currency
                    BEGIN
                        SELECT ctl_si_start_from, ctl_limit_amt
                          INTO v_ctl_si_start_from, v_ctl_limit_amt
                          FROM gin_class_treaty_limits
                         WHERE ctl_code = cur_treaties_rec.ptotr_ctl_code;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            NULL;
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error fetching class treaty quota share limits....');
                    END;

                    v_ctl_si_start_from :=
                        NVL (v_ctl_si_start_from,
                             cur_treaties_rec.rei_si_start_from);
                    v_ctl_limit_amt :=
                        NVL (v_ctl_limit_amt, cur_treaties_rec.rei_limit);

                    IF (NVL (v_ctl_si_start_from, 0) * v_exhange_rate) <
                       NVL (v_gross_ret, 0)
                    THEN
                        v_gross_ret :=
                            NVL (v_gross_ret, 0) - NVL (v_pool_amt, 0);

                        IF NVL (v_gross_ret, 0) >
                           (NVL (v_ctl_limit_amt, 0) * v_exhange_rate)
                        THEN
                            v_trt_si_pcur :=
                                  NVL (v_ctl_limit_amt, 0)
                                * v_exhange_rate
                                * (cur_treaties_rec.ptotr_rate / 100);
                            v_net_ret :=
                                  NVL (v_net_ret, 0)
                                + (  (  NVL (v_ctl_limit_amt, 0)
                                      * NVL (v_exhange_rate, 0))
                                   - NVL (v_trt_si_pcur, 0));
                        ELSE
                            v_trt_si_pcur :=
                                ROUND (
                                      NVL (v_gross_ret, 0)
                                    * (  NVL (cur_treaties_rec.ptotr_rate, 0)
                                       / 100));
                            v_net_ret :=
                                  NVL (v_net_ret, 0)
                                + (  NVL (v_gross_ret, 0)
                                   - NVL (v_trt_si_pcur, 0));
                        END IF;

                        IF NVL (cur_all_risks_rec.ipu_overrideride_ret_type,
                                'X') =
                           'P'
                        THEN
                            v_special_ret_prem_diff :=
                                  v_special_ret_prem
                                - (  (  v_net_ret
                                      / NVL (
                                            cur_all_risks_rec.ipu_reinsure_amt,
                                            0)
                                      * 100)
                                   * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                                   / 100);
                        END IF;

                        v_trt_si_tcur := v_trt_si_pcur / v_exhange_rate;
                        v_trt_rate := (cur_treaties_rec.ptotr_rate);
                        -- Culculate treaty premium
                        v_cession_rate := v_trt_si_pcur / v_tot_si * 100;

                        IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                              'BASED_ON_CESSION'
                           OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB',
                                                                       'RN',
                                                                       'EX',
                                                                       'CN'))
                           OR (    cur_all_risks_rec.POL_POLICY_STATUS = 'EN'
                               AND cur_all_risks_rec.ipu_wef = v_prev_wef
                               AND cur_all_risks_rec.ipu_wet = v_prev_wet
                               AND cur_all_risks_rec.ipu_gp = v_prev_ipu_gp)
                        THEN
                            v_trt_net_less_eq_prem_pcur :=
                                ROUND (
                                      v_cession_rate
                                    * NVL (
                                          cur_all_risks_rec.prrd_ri_net_less_eq_prem,
                                          0)
                                    / 100,
                                    v_rnd);
                            --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
                            v_trt_eq_prem_pcur :=
                                ROUND (
                                      v_cession_rate
                                    * NVL (
                                          cur_all_risks_rec.prrd_earthquake_prem,
                                          0)
                                    / 100,
                                    v_rnd);
                            --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
                            v_trt_prem_pcur :=
                                  NVL (v_trt_eq_prem_pcur, 0)
                                + NVL (v_trt_net_less_eq_prem_pcur, 0);
                            v_trt_prem_tcur :=
                                ROUND (v_trt_prem_pcur * v_exhange_rate,
                                       v_rnd);
                        --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
                        ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                              'BASED_ON_CHANGE'
                        THEN
                            v_trt_net_less_eq_prem_pcur :=
                                  (  (  v_cession_rate
                                      / 100
                                      * cur_all_risks_rec.ipu_GP)
                                   - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                      / 100
                                      * cur_all_risks_rec.ipu_GP)
                                   + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                      / 100
                                      * cur_all_risks_rec.PRRD_RI_PREM))
                                * cur_all_risks_rec.prrd_ri_net_less_eq_prem
                                / cur_all_risks_rec.PRRD_RI_PREM;
                            v_trt_net_less_eq_prem_pcur :=
                                ROUND (v_trt_net_less_eq_prem_pcur, v_rnd);
                            DBMS_OUTPUT.PUT_LINE (
                                   'v_trt_net_less_eq_prem_pcur='
                                || v_trt_net_less_eq_prem_pcur);
                            v_trt_eq_prem_pcur :=
                                  (  (  v_cession_rate
                                      / 100
                                      * cur_all_risks_rec.ipu_GP)
                                   - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                      / 100
                                      * cur_all_risks_rec.ipu_GP)
                                   + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                      / 100
                                      * cur_all_risks_rec.PRRD_RI_PREM))
                                * cur_all_risks_rec.prrd_earthquake_prem
                                / cur_all_risks_rec.PRRD_RI_PREM;
                            v_trt_eq_prem_pcur :=
                                ROUND (v_trt_eq_prem_pcur, v_rnd);
                            DBMS_OUTPUT.PUT_LINE (
                                'v_trt_eq_prem_pcur=' || v_trt_eq_prem_pcur);
                            v_trt_prem_pcur :=
                                  NVL (v_trt_eq_prem_pcur, 0)
                                + NVL (v_trt_net_less_eq_prem_pcur, 0);
                            DBMS_OUTPUT.PUT_LINE (
                                'v_trt_prem_pcur=' || v_trt_prem_pcur);
                            v_trt_prem_tcur :=
                                ROUND (v_trt_prem_pcur * v_exhange_rate,
                                       v_rnd);
                            DBMS_OUTPUT.PUT_LINE (
                                'v_trt_prem_tcur=' || v_trt_prem_tcur);
                        END IF;

                        --                  v_trt_prem_pcur :=
                        --                      (v_cession_rate * cur_all_risks_rec.prrd_ri_prem / 100
                        --                      );
                        --                  v_trt_prem_pcur :=
                        --                            v_trt_prem_pcur - NVL (v_special_ret_prem_diff, 0);
                        --                  v_trt_prem_tcur := v_trt_prem_pcur / v_exhange_rate;
                        -- calculate mandatory commission

                        v_trt_net_less_eq_comm_pcur :=
                            ROUND (
                                (  (  v_trt_net_less_eq_prem_pcur
                                    * cur_treaties_rec.rei_comm_rate)
                                 / 100),
                                v_rnd);
                        v_trt_eq_com_pcur :=
                            ROUND (
                                (  (  v_trt_eq_prem_pcur
                                    * cur_treaties_rec.rei_earthqke_comm_rate)
                                 / 100),
                                v_rnd);
                        --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
                        v_trt_com_pcur :=
                              NVL (v_trt_net_less_eq_comm_pcur, 0)
                            + NVL (v_trt_eq_com_pcur, 0);
                        v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
                        --message('v_ref_trt_prem_pcur='||v_ref_trt_prem_pcur);pause;
                        --------calculate reinsurance tax, reinsurance commission tax part
                        v_ptax_tcur := 0;
                        v_ctax_tcur := 0;
                        v_ptax_amount :=
                            ROUND (
                                NVL (v_prem_tax, 0) * v_cession_rate / 100,
                                v_rnd);
                        v_ctax_amount :=
                            ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,
                                   v_rnd);
                        v_ptax_tcur := v_ptax_amount * v_exhange_rate;
                        v_ctax_tcur := v_ctax_amount * v_exhange_rate;

                        /***********************************************************************/
                        UPDATE gin_policy_rein_risk_details
                           SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
                               ptotr_risk_si_tcur =
                                   ROUND (ptotr_trt_si_tcur, v_rnd_bcur),
                               ptotr_risk_prem_tcur =
                                   ROUND (ptotr_trt_prem_tcur, v_rnd_bcur),
                               ptotr_trt_si_pcur =
                                   ROUND (v_trt_si_pcur, v_rnd),
                               ptotr_trt_si_tcur =
                                   ROUND (v_trt_si_tcur, v_rnd_bcur),
                               ptotr_trt_prem_pcur =
                                   ROUND (v_trt_prem_pcur, v_rnd),
                               ptotr_trt_prem_tcur =
                                   ROUND (v_trt_prem_tcur, v_rnd_bcur),
                               ptotr_trt_comm_pcur =
                                   ROUND (v_trt_com_pcur, v_rnd),
                               ptotr_trt_comm_tcur =
                                   ROUND (v_trt_com_tcur, v_rnd_bcur),
                               ptotr_cession_pct = ROUND (v_cession_rate, 4),
                               ptotr_acpr_sht_desc = v_acpr_sht_desc,
                               ptotr_comm_rate =
                                   cur_treaties_rec.rei_comm_rate,
                               ptotr_acpr_code = v_accprd,
                               ptotr_prem_tax_pcur =
                                   ROUND (v_ptax_amount, v_rnd),
                               ptotr_prem_tax_tcur =
                                   ROUND (v_ptax_tcur, v_rnd_bcur),
                               ptotr_comm_tax_pcur =
                                   ROUND (v_ctax_amount, v_rnd),
                               ptotr_comm_tax_tcur =
                                   ROUND (v_ctax_tcur, v_rnd_bcur),
                               ptotr_refund_prem =
                                   ROUND (NVL (v_ref_trt_prem_pcur, 0),
                                          v_rnd_bcur),
                               ptotr_refund_com =
                                   ROUND (NVL (v_ref_trt_com_pcur, 0),
                                          v_rnd_bcur),
                               ptotr_ggt_tran_no = v_tran_no,
                               ptotr_tran_type = v_tran_type,
                               ptotr_earthqke_comm_rate =
                                   cur_treaties_rec.rei_earthqke_comm_rate,
                               ptotr_earthqke_prem =
                                   ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
                               ptotr_earthqke_comm =
                                   ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
                               ptotr_net_less_eq_prem =
                                   ROUND (v_trt_net_less_eq_prem_pcur,
                                          v_bcur_rnd),
                               ptotr_net_less_eq_comm =
                                   ROUND (v_trt_net_less_eq_comm_pcur,
                                          v_bcur_rnd)
                         WHERE     ptotr_ipu_code =
                                   cur_all_risks_rec.ipu_code
                               AND ptotr_as_code =
                                   cur_treaties_rec.rei_as_code
                               AND ptotr_rei_code = cur_treaties_rec.rei_code
                               AND ptotr_prrd_code = v_prrd_code;

                        /************************start participartion *****/
                        --------------------insert participarticipation for each risk

                        Update_treaty_partipants (
                            cur_treaties_rec.rei_code,
                            v_prrd_code,
                            cur_treaties_rec.ptotr_code,
                            v_trt_si_pcur,
                            v_trt_si_tcur,
                            v_trt_prem_pcur,
                            v_trt_prem_tcur,
                            v_trt_com_pcur,
                            v_trt_com_tcur,
                            cur_all_risks_rec.pol_cur_code,
                            cur_all_risks_rec.pol_cur_symbol,
                            cur_all_risks_rec.ipu_pol_batch_no,
                            cur_all_risks_rec.ipu_pol_policy_no,
                            cur_all_risks_rec.ipu_pol_ren_endos_no,
                            v_tran_no,
                            v_tran_type,
                            cur_all_risks_rec.ipu_code,
                            cur_all_risks_rec.ipu_sec_scl_code,
                            v_exhange_rate,
                            v_rnd,
                            v_bcur_rnd);
                    END IF;
                END LOOP;                                        --qouta share

                --end quota******************************************************************************************
                --message('B4 SURPLUS=');PAUSE;
                DBMS_OUTPUT.put_line (' v_net_ret=' || v_net_ret);

                FOR cur_treaties_rec
                    IN cur_treaties (cur_all_risks_rec.ipu_code,
                                     1004,
                                     v_prrd_code)
                LOOP
                    check_treaty_participation (cur_treaties_rec.rei_code);
                    --message('SURPLUS=');PAUSE;
                    v_trt_rprem_tax := 0;
                    v_trt_prem_tax := 0;
                    v_trt_com_pcur := 0;

                    -- Its A Surplus Type treaty
                    -- calculate treaty sum insured in policy currency

                    IF v_trt_cur_code != cur_all_risks_rec.pol_cur_code
                    THEN
                        IF    (v_bcur_code = v_trt_cur_code)
                           OR     (NVL (
                                       cur_all_risks_rec.pol_exch_rate_fixed,
                                       'N') =
                                   'Y')
                              AND NVL (v_rein_cur_param, 'N') = 'Y'
                        THEN
                            IF (v_bcur_code = v_trt_cur_code)
                            THEN
                                v_retention_amt :=
                                    ROUND (
                                          get_scl_uwyr_g_ret (
                                              cur_all_risks_rec.ipu_uw_yr,
                                              cur_all_risks_rec.ipu_sec_scl_code,
                                              v_bcur_code,
                                              cur_all_risks_rec.ipu_rc_code)
                                        / cur_all_risks_rec.pol_cur_rate,
                                        v_rnd);
                            ELSE
                                v_retention_amt :=
                                    ROUND (
                                        get_scl_uwyr_g_ret (
                                            cur_all_risks_rec.ipu_uw_yr,
                                            cur_all_risks_rec.ipu_sec_scl_code,
                                            v_bcur_code,
                                            cur_all_risks_rec.ipu_rc_code),
                                        v_rnd);
                            END IF;
                        ELSE
                            v_retention_amt :=
                                ROUND (
                                      get_scl_uwyr_g_ret (
                                          cur_all_risks_rec.ipu_uw_yr,
                                          cur_all_risks_rec.ipu_sec_scl_code,
                                          v_trt_cur_code,
                                          cur_all_risks_rec.ipu_rc_code)
                                    * NVL (v_ri_cur_rate, v_trt_cur_rate),
                                    v_rnd);
                        END IF;
                    ELSE
                        v_retention_amt :=
                            get_scl_uwyr_g_ret (
                                cur_all_risks_rec.ipu_uw_yr,
                                cur_all_risks_rec.ipu_sec_scl_code,
                                v_base_cur,
                                cur_all_risks_rec.ipu_rc_code);
                    END IF;

                    IF     NVL (cur_all_risks_rec.prrd_gross_comp_retention,
                                0) <>
                           NVL (v_retention_amt, 0)
                       AND NVL (cur_all_risks_rec.prrd_comp_ret_edited, 'N') =
                           'Y' /*cur_all_risks_rec.ipu_pol_est_max_loss <> 100 AND cur_all_risks_rec.ipu_eml_based_on = 'R' */
                    THEN
                        v_retention_amt :=
                            cur_all_risks_rec.prrd_gross_comp_retention;
                    END IF;

                    --      RAISE_ERROR(v_ret_limit||';'||v_amt_to_reinsure||';'||v_retention_amt);
                    IF cur_treaties_rec.ptotr_rate * v_ret_limit >
                       v_amt_to_reinsure
                    THEN
                        v_trt_si_pcur := v_amt_to_reinsure;
                    ELSE
                        v_trt_si_pcur :=
                              NVL (cur_treaties_rec.ptotr_rate, 0)
                            * NVL (v_ret_limit, 0);
                    END IF;

                    v_trt_si_pcur := NVL (v_trt_si_pcur, 0);
                    --message('v_ret_limit='||v_ret_limit);pause;
                    --message('v_amt_to_reinsure='||v_amt_to_reinsure);pause;
                    --message('v_trt_si_pcur='||v_trt_si_pcur);pause;
                    v_trt_si_tcur := 0;
                    v_amt_to_reinsure :=
                        v_amt_to_reinsure - NVL (v_trt_si_pcur, 0);
                    v_trt_si_tcur := NVL (v_trt_si_pcur, 0) / v_exhange_rate;
                    --message('v_trt_si_pcur='||v_trt_si_pcur);pause;
                    v_trt_rate := (cur_treaties_rec.ptotr_rate);
                    -- Culculate treaty premium
                    --message('v_trt_si_pcur='||v_trt_si_pcur);pause;
                    --message('v_tot_si='||v_tot_si);pause;
                    v_cession_rate := v_trt_si_pcur / v_tot_si * 100;

                    IF    NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CESSION'
                       OR (cur_all_risks_rec.POL_POLICY_STATUS IN ('NB',
                                                                   'RN',
                                                                   'EX',
                                                                   'CN'))
                       OR (    cur_all_risks_rec.POL_POLICY_STATUS = 'EN'
                           AND cur_all_risks_rec.ipu_wef = v_prev_wef
                           AND cur_all_risks_rec.ipu_wet = v_prev_wet
                           AND cur_all_risks_rec.ipu_gp = v_prev_ipu_gp)
                    THEN
                        v_trt_net_less_eq_prem_pcur :=
                            ROUND (
                                  v_cession_rate
                                * NVL (
                                      cur_all_risks_rec.prrd_ri_net_less_eq_prem,
                                      0)
                                / 100,
                                v_rnd);
                        --DBMS_OUTPUT.PUT_LINE('v_trt_net_less_eq_prem_pcur='||v_trt_net_less_eq_prem_pcur);
                        v_trt_eq_prem_pcur :=
                            ROUND (
                                  v_cession_rate
                                * NVL (
                                      cur_all_risks_rec.prrd_earthquake_prem,
                                      0)
                                / 100,
                                v_rnd);
                        --DBMS_OUTPUT.PUT_LINE('v_trt_eq_prem_pcur='||v_trt_eq_prem_pcur);
                        v_trt_prem_pcur :=
                              NVL (v_trt_eq_prem_pcur, 0)
                            + NVL (v_trt_net_less_eq_prem_pcur, 0);
                        v_trt_prem_tcur :=
                            ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                    --DBMS_OUTPUT.PUT_LINE('v_trt_prem_tcur='||v_trt_prem_tcur);
                    ELSIF NVL (v_ri_prem_formular, 'BASED_ON_CESSION') =
                          'BASED_ON_CHANGE'
                    THEN
                        v_trt_net_less_eq_prem_pcur :=
                              (  (  v_cession_rate
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.PRRD_RI_PREM))
                            * cur_all_risks_rec.prrd_ri_net_less_eq_prem
                            / cur_all_risks_rec.PRRD_RI_PREM;
                        v_trt_net_less_eq_prem_pcur :=
                            ROUND (v_trt_net_less_eq_prem_pcur, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                               'v_trt_net_less_eq_prem_pcur='
                            || v_trt_net_less_eq_prem_pcur);
                        v_trt_eq_prem_pcur :=
                              (  (  v_cession_rate
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               - (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.ipu_GP)
                               + (  cur_treaties_rec.PTOTR_PREV_CESSION_RATE
                                  / 100
                                  * cur_all_risks_rec.PRRD_RI_PREM))
                            * cur_all_risks_rec.prrd_earthquake_prem
                            / cur_all_risks_rec.PRRD_RI_PREM;
                        v_trt_eq_prem_pcur :=
                            ROUND (v_trt_eq_prem_pcur, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_eq_prem_pcur=' || v_trt_eq_prem_pcur);
                        v_trt_prem_pcur :=
                              NVL (v_trt_eq_prem_pcur, 0)
                            + NVL (v_trt_net_less_eq_prem_pcur, 0);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_prem_pcur=' || v_trt_prem_pcur);
                        v_trt_prem_tcur :=
                            ROUND (v_trt_prem_pcur * v_exhange_rate, v_rnd);
                        DBMS_OUTPUT.PUT_LINE (
                            'v_trt_prem_tcur=' || v_trt_prem_tcur);
                    END IF;

                    --message(' cur_all_risks_rec.PRRD_RI_PREM='|| cur_all_risks_rec.PRRD_RI_PREM);pause;
                    --               v_trt_prem_pcur :=    (v_cession_rate * cur_all_risks_rec.prrd_ri_prem / 100  );
                    --               v_trt_prem_pcur :=(v_trt_rate*NVL(cur_all_risks_rec.prrd_cumm_ri_prem,cur_all_risks_rec.prrd_ri_prem)/100)- NVL(cur_all_risks_rec.prrd_ri_prev_prem,0)  ;
                    IF NVL (cur_all_risks_rec.ipu_overrideride_ret_type, 'X') =
                       'P'
                    THEN
                        v_special_ret_prem_diff :=
                              v_special_ret_prem
                            - (  (  v_special_ret_limit
                                  / NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                         0)
                                  * 100)
                               * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                               / 100);
                    END IF;

                    v_trt_prem_pcur :=
                        v_trt_prem_pcur - NVL (v_special_ret_prem_diff, 0);
                    v_trt_prem_tcur := v_trt_prem_pcur / v_exhange_rate;
                    -- calculate surpluss commission

                    v_trt_net_less_eq_comm_pcur :=
                        ROUND (
                            (  (  v_trt_net_less_eq_prem_pcur
                                * cur_treaties_rec.rei_comm_rate)
                             / 100),
                            v_rnd);
                    v_trt_eq_com_pcur :=
                        ROUND (
                            (  (  v_trt_eq_prem_pcur
                                * cur_treaties_rec.rei_earthqke_comm_rate)
                             / 100),
                            v_rnd);
                    --    v_trt_com_pcur      := ((v_trt_eq_prem_pcur * cur_treaties_rec.rei_comm_rate) /100);
                    v_trt_com_pcur :=
                          NVL (v_trt_net_less_eq_comm_pcur, 0)
                        + NVL (v_trt_eq_com_pcur, 0);
                    v_trt_com_tcur := v_trt_com_pcur * v_exhange_rate;
                    /*********tax part**************************/
                    --------calculate reinsurance tax, reinsurance commission tax part
                    --message('v_prem_tax='||v_prem_tax);pause;
                    v_ptax_tcur := 0;
                    v_ctax_tcur := 0;
                    v_ptax_amount :=
                        ROUND (NVL (v_prem_tax, 0) * v_cession_rate / 100,
                               v_rnd);
                    v_ctax_amount :=
                        ROUND (NVL (v_pol_com, 0) * v_cession_rate / 100,
                               v_rnd);
                    v_ptax_tcur := v_ptax_amount / v_exhange_rate;
                    v_ctax_tcur := v_ctax_amount / v_exhange_rate;

                    /***********************************************************************/
                    --message('v_ptax_amount='||v_ptax_amount);pause;
                    UPDATE gin_policy_rein_risk_details
                       SET ptotr_exch_rate = ROUND (v_exhange_rate, 4),
                           ptotr_risk_si_tcur =
                               ROUND (ptotr_trt_si_tcur * v_exhange_rate,
                                      v_rnd_bcur),
                           ptotr_risk_prem_tcur =
                               ROUND (ptotr_trt_prem_tcur * v_exhange_rate,
                                      v_rnd_bcur),
                           ptotr_trt_si_pcur = ROUND (v_trt_si_pcur, v_rnd),
                           ptotr_trt_si_tcur = ROUND (v_trt_si_tcur),
                           ptotr_trt_prem_pcur =
                               ROUND (v_trt_prem_pcur, v_rnd),
                           ptotr_trt_prem_tcur =
                               ROUND (v_trt_prem_tcur, v_rnd_bcur),
                           ptotr_trt_comm_pcur =
                               ROUND (v_trt_com_pcur, v_rnd),
                           ptotr_trt_comm_tcur =
                               ROUND (v_trt_com_tcur, v_rnd_bcur),
                           ptotr_cession_pct = ROUND (v_cession_rate, 4),
                           ptotr_acpr_sht_desc = v_acpr_sht_desc,
                           ptotr_acpr_code = v_accprd,
                           ptotr_prem_tax_pcur = ROUND (v_ptax_amount, v_rnd),
                           ptotr_prem_tax_tcur =
                               ROUND (v_ptax_tcur, v_rnd_bcur),
                           ptotr_comm_rate = cur_treaties_rec.rei_comm_rate,
                           ptotr_comm_tax_pcur = ROUND (v_ctax_amount, v_rnd),
                           ptotr_comm_tax_tcur =
                               ROUND (v_ctax_tcur, v_rnd_bcur),
                           ptotr_refund_prem =
                               ROUND (NVL (v_ref_trt_prem_pcur, 0), v_rnd),
                           ptotr_refund_com =
                               ROUND (NVL (v_ref_trt_com_pcur, 0), v_rnd),
                           ptotr_ggt_tran_no = v_tran_no,
                           ptotr_tran_type = v_tran_type,
                           ptotr_earthqke_comm_rate =
                               cur_treaties_rec.rei_earthqke_comm_rate,
                           ptotr_earthqke_prem =
                               ROUND (v_trt_eq_prem_pcur, v_bcur_rnd),
                           ptotr_earthqke_comm =
                               ROUND (v_trt_eq_com_pcur, v_bcur_rnd),
                           ptotr_net_less_eq_prem =
                               ROUND (v_trt_net_less_eq_prem_pcur,
                                      v_bcur_rnd),
                           ptotr_net_less_eq_comm =
                               ROUND (v_trt_net_less_eq_comm_pcur,
                                      v_bcur_rnd)
                     WHERE     ptotr_ipu_code = cur_all_risks_rec.ipu_code
                           AND ptotr_as_code = cur_treaties_rec.rei_as_code
                           AND ptotr_rei_code = cur_treaties_rec.rei_code
                           AND ptotr_prrd_code = v_prrd_code;

                    /************************start participartion *****/
                    --------------------insert participarticipation for each risk

                    Update_treaty_partipants (
                        cur_treaties_rec.rei_code,
                        v_prrd_code,
                        cur_treaties_rec.ptotr_code,
                        v_trt_si_pcur,
                        v_trt_si_tcur,
                        v_trt_prem_pcur,
                        v_trt_prem_tcur,
                        v_trt_com_pcur,
                        v_trt_com_tcur,
                        cur_all_risks_rec.pol_cur_code,
                        cur_all_risks_rec.pol_cur_symbol,
                        cur_all_risks_rec.ipu_pol_batch_no,
                        cur_all_risks_rec.ipu_pol_policy_no,
                        cur_all_risks_rec.ipu_pol_ren_endos_no,
                        v_tran_no,
                        v_tran_type,
                        cur_all_risks_rec.ipu_code,
                        cur_all_risks_rec.ipu_sec_scl_code,
                        v_exhange_rate,
                        v_rnd,
                        v_bcur_rnd);
                END LOOP;

                DBMS_OUTPUT.put_line (' v_net_ret=' || v_net_ret);

                IF NVL (v_net_ret, 0) = 0
                THEN
                    v_net_ret := v_special_ret_limit;
                ELSE
                    v_net_ret :=
                        NVL (v_net_ret, 0) + NVL (v_special_ret_diff, 0);
                END IF;

                UPDATE gin_policy_risk_ri_dtls
                   SET prrd_comp_retention = v_net_ret,
                       prrd_gross_comp_retention =
                           NVL (v_gross_ret, prrd_gross_comp_retention),
                       prrd_com_retention_rate =
                           ROUND (
                                 NVL (v_gross_ret, prrd_gross_comp_retention)
                               / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                               * 100,
                               4),
                       prrd_comp_net_rate =
                           ROUND (
                                 v_net_ret
                               / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                               * 100,
                               4),
                       prrd_net_prem =
                           DECODE (
                               NVL (v_special_ret_prem, 0),
                               0, ROUND (
                                        (  v_net_ret
                                         / NVL (
                                               cur_all_risks_rec.ipu_reinsure_amt,
                                               0)
                                         * 100)
                                      * NVL (prrd_ri_prem, 0)
                                      / 100),
                               NVL (v_special_ret_prem, 0))
                 --                   prrd_net_prem =
                 --                      ROUND (  v_net_ret
                 --                             / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                 --                             * 100
                 --                             / 100
                 --                             * NVL (prrd_ri_prem, 0)
                 --                            )
                 WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                       AND prrd_code = v_prrd_code
                       AND prrd_tran_no = v_tran_no;

                --IF v_amt_to_reinsure > 0
                BEGIN
                    SELECT SUM (NVL (fc_amount, 0))
                      INTO v_total_facoblig_ceded
                      FROM gin_facre_cessions
                     WHERE     fc_prrd_code = cur_all_risks_rec.prrd_code
                           AND fc_facre_type = 'O';
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error getting fac obliq cession..');
                END;

                IF NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0) > 0
                THEN
                    v_facoblig_limit :=
                        NVL (cur_all_risks_rec.prrd_facoblig_user_excess, 0);
                ELSE
                    v_facoblig_limit :=
                        NVL (cur_all_risks_rec.prrd_facoblig_limit, 0);
                END IF;

                IF    v_amt_to_reinsure > 0
                   OR (    NVL (v_avail_fulc_bal, 0) > 0
                       AND NVL (v_facoblig_limit, 0) > 0)
                THEN
                    IF     NVL (v_amt_to_reinsure, 0) > 0
                       AND NVL (v_facoblig_limit, 0) > 0
                       AND NVL (v_total_facoblig_ceded, 0) = 0
                    THEN
                        IF v_amt_to_reinsure > v_facoblig_limit
                        THEN
                            -- raise_error('here');
                            v_facoblig_excess := v_facoblig_limit;
                            v_facnorml_excess :=
                                  v_amt_to_reinsure
                                - NVL (v_facoblig_excess, 0);
                        ELSE
                            v_facoblig_excess := v_amt_to_reinsure;
                            v_facnorml_excess := 0;
                        END IF;
                    ELSIF     NVL (v_amt_to_reinsure, 0) > 0
                          AND NVL (v_facoblig_limit, 0) > 0
                    THEN
                        v_facoblig_excess :=
                              NVL (v_facoblig_limit, 0)
                            - NVL (v_total_facoblig_ceded, 0);

                        IF v_amt_to_reinsure > v_facoblig_excess
                        THEN
                            -- raise_error('here');
                            v_facoblig_excess := v_facoblig_excess;
                            v_facnorml_excess :=
                                  v_amt_to_reinsure
                                - NVL (v_facoblig_excess, 0);
                        ELSE
                            v_facoblig_excess := v_amt_to_reinsure;
                            v_facnorml_excess := 0;
                        END IF;
                    ELSE
                        v_facoblig_excess :=
                              v_facoblig_limit
                            - NVL (v_total_facoblig_ceded, 0);
                        v_facnorml_excess :=
                              NVL (v_amt_to_reinsure, 0)
                            - NVL (v_facoblig_excess, 0);
                    END IF;

                    -- commit;
                    --            raise_error('v_net_ret ==== '||v_net_ret||';'||v_facnorml_excess||';'||v_avail_fulc_bal);
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_avail_fulc_bal =
                               v_facnorml_excess + NVL (v_avail_fulc_bal, 0),
                           prrd_facoblig_excess = v_facoblig_excess,
                           --PRRD_FACOBLIG_USER_EXCESS =v_facoblig_excess,
                           prrd_excess_pct =
                               ROUND (
                                     (  NVL (v_facnorml_excess, 0)
                                      + NVL (v_avail_fulc_bal, 0))
                                   / NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                          0)
                                   * 100,
                                   4),
                           prrd_comp_retention = v_net_ret,
                           prrd_gross_comp_retention = v_gross_ret,
                           prrd_com_retention_rate =
                               ROUND (
                                     NVL (prrd_gross_comp_retention, 0)
                                   / NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                          0)
                                   * 100,
                                   4),
                           prrd_comp_net_rate =
                               ROUND (
                                     v_net_ret
                                   / NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                          0)
                                   * 100,
                                   4),
                           prrd_net_prem =
                               DECODE (
                                   NVL (v_special_ret_prem, 0),
                                   0, (  (  v_net_ret
                                          / NVL (
                                                cur_all_risks_rec.ipu_reinsure_amt,
                                                0)
                                          * 100)
                                       * NVL (prrd_ri_prem, 0)
                                       / 100),
                                   v_special_ret_prem)
                     --                      prrd_net_prem =
                     --                         (  (  v_net_ret
                     --                             / NVL (cur_all_risks_rec.ipu_reinsure_amt, 0)
                     --                             * 100
                     --                            )
                     --                          * NVL (prrd_ri_prem, 0)
                     --                          / 100
                     --                         )                                                 --,
                     --PRRD_FACRE_AMOUNT =v_facoblig_excess
                     WHERE     prrd_ipu_code = cur_all_risks_rec.ipu_code
                           AND prrd_code = v_prrd_code
                           AND prrd_tran_no = v_tran_no;

                    IF NVL (v_facoblig_excess, 0) != 0
                    THEN
                        DELETE gin_facre_cessions
                         WHERE     fc_ipu_code = cur_all_risks_rec.ipu_code
                               AND fc_prrd_code = cur_all_risks_rec.prrd_code
                               AND fc_facre_type = 'O';
                    END IF;
                END IF;
            END IF;
        END LOOP;

        NULL;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0...');
    END;

    PROCEDURE call_grp_reinsure (v_pol_batch_no   IN NUMBER,
                                 v_ipu_code       IN NUMBER,
                                 v_trans_no       IN NUMBER,
                                 v_trans_type     IN VARCHAR2,
                                 v_user           IN VARCHAR2              --,
                                                             --v_ipu_data IN web_risk_tab
                                                             --,
                                                             -- v_recompute_facre IN VARCHAR2 DEFAULT 'N'
                                                             )
    IS
        msg              VARCHAR2 (200);
        v_ta_type        VARCHAR2 (2);
        v_base_cur       NUMBER;
        v_cur_sht_desc   VARCHAR2 (30);
        v_tran_code      VARCHAR2 (10);
        v_cnt            NUMBER;
        v_auth           VARCHAR2 (5);
        v_zero_devide    EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);

        CURSOR cur_pol_rsk IS
            SELECT pol_batch_no,
                   pol_cur_code,
                   ipu_pol_batch_no,
                   IPU_CODE,
                   prrd_code,
                   prrd_excess_pct,
                   facres_pct,
                   trts_pct,
                   prrd_comp_net_rate,
                     NVL (prrd_excess_pct, 0)
                   + NVL (facres_pct, 0)
                   + NVL (trts_pct, 0)
                   + NVL (prrd_comp_net_rate, 0)
                   + NVL (get_ri_pool_rate (prrd_code), 0)    tot_pct
              FROM GIN_POLICIES,
                   gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   (  SELECT ptotr_prrd_code,
                             SUM (NVL (ptotr_cession_pct, 0))     trts_pct
                        FROM gin_policy_rein_risk_details
                       WHERE ptotr_ggt_tran_no = v_trans_no
                    GROUP BY ptotr_prrd_code),
                   (  SELECT fc_prrd_code, SUM (NVL (fc_rate, 0)) facres_pct
                        FROM gin_facre_cessions
                       WHERE fc_ggt_tran_no = v_trans_no
                    GROUP BY fc_prrd_code)
             WHERE     POL_BATCH_NO = IPU_POL_BATCH_NO
                   AND prrd_ipu_code = ipu_code
                   AND prrd_code = ptotr_prrd_code(+)
                   AND prrd_code = fc_prrd_code(+)
                   AND ipu_code = v_ipu_code
                   AND prrd_tran_no = v_trans_no;
    BEGIN
        --   IF v_ipu_code = 20142274940 THEN
        --       RAISE_ERROR(v_pol_batch_no||'='||
        --      v_ipu_code||'='||
        --      v_trans_no||'='||
        --      v_trans_type||'='||
        --      v_user     );
        --   END IF;
        BEGIN
            SELECT ggt_btr_trans_code
              INTO v_tran_code
              FROM gin_gis_transactions
             WHERE ggt_trans_no = v_trans_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
        END;

        BEGIN
            SELECT NVL (ggt_trans_authorised, 'N')
              INTO v_auth
              FROM gin_gis_transactions
             WHERE ggt_trans_no = v_trans_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_auth := 'N';
                msg :=
                       'The transaction number '
                    || v_trans_no
                    || ' does not exist...retry processing..';
                raise_error (msg);
        END;

        --   message(v_auth);pause;
        IF NVL (v_auth, 'N') != 'A'
        THEN
            BEGIN
                SELECT org_cur_code, cur_symbol
                  INTO v_base_cur, v_cur_sht_desc
                  FROM tqc_currencies, tqc_organizations, tqc_systems
                 WHERE     org_cur_code = cur_code
                       AND org_code = sys_org_code
                       AND sys_sht_desc = 'GIS';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    msg := 'The base currency has not been defined...';
                    raise_error (msg);
                WHEN TOO_MANY_ROWS
                THEN
                    raise_error (
                        'More than one company records have been defined in the company parameters...ensure that only one company record is defined...');
            END;

            BEGIN
                reinsure_pool_risks (v_pol_batch_no,
                                     v_trans_no,
                                     v_trans_type,
                                     TRUE);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error populating pool details.....');
            END;

            --         grp_reinsure_risks (v_pol_batch_no,
            --                             v_base_cur,
            --                             v_cur_sht_desc,
            --                             v_trans_no,
            --                             v_trans_type,
            --                             v_user
            --                            );



            FOR r IN cur_pol_rsk
            LOOP
                BEGIN
                    reinsure_risks (R.pol_batch_no,
                                    R.pol_cur_code,
                                    v_base_cur,
                                    v_cur_sht_desc,
                                    v_tranS_no,
                                    v_tranS_type,
                                    R.IPU_CODE);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error processing facultative obligatory..');
                END;

                BEGIN
                    reprocess_grp_facoblig (R.pol_batch_no,
                                            R.IPU_CODE,
                                            v_trans_no,
                                            v_trans_type,
                                            v_user);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error processing facultative obligatory..');
                END;
            END LOOP;

            FOR cur_pol_rsk_rec IN cur_pol_rsk
            LOOP
                IF cur_pol_rsk_rec.tot_pct - 100 < 0.01
                THEN
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_comp_net_rate =
                                 prrd_comp_net_rate
                               - (cur_pol_rsk_rec.tot_pct - 100)
                     WHERE prrd_code = cur_pol_rsk_rec.prrd_code;
                ELSIF 100 - cur_pol_rsk_rec.tot_pct < .01
                THEN
                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_comp_net_rate =
                                 prrd_comp_net_rate
                               + (100 - cur_pol_rsk_rec.tot_pct)
                     WHERE prrd_code = cur_pol_rsk_rec.prrd_code;
                END IF;


                BEGIN
                    gis_ri_procedures.round_uw_ri_to_own (
                        v_trans_no,
                        cur_pol_rsk_rec.IPU_CODE);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error rounding off the reinsurance cessions..');
                END;

                del_grp_zero_cessions (v_trans_no, cur_pol_rsk_rec.IPU_CODE);
            END LOOP;
        --check_excess_amount (v_pol_batch_no);
        ELSE
            msg :=
                'This Policy Has Already Been Processed And Authorized ...You Cannot Process It Again...';
            raise_error (msg);
        END IF;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not 0....');
    END;

    PROCEDURE grp_post_ri_gl (v_trans_no IN NUMBER, v_user VARCHAR2)
    IS
        v_tran_type           VARCHAR2 (3);
        v_tran_sign           NUMBER;
        v_today               DATE := TRUNC (SYSDATE);
        v_client_acc          VARCHAR2 (20);
        v_client_gl_acc       VARCHAR2 (20);
        v_client_code         NUMBER;
        v_client_type         VARCHAR2 (1);
        v_dc_no               VARCHAR2 (15);
        v_tran_amount         NUMBER := 0;
        --v_user                VARCHAR2(30);-- :=  :TOOLBAR.USER_NAME;
        al_id                 NUMBER;
        v_tot_rein_prem_tax   NUMBER := 0;
        v_tot_prem_tax        NUMBER := 0;
        v_agnt_code           NUMBER;
        v_agnt_sht_desc       VARCHAR2 (15);
        v_retained_prem       NUMBER := 0;
        v_acc_pr              NUMBER;
        v_acc_sht_desc        VARCHAR2 (15);
        v_cnt                 NUMBER := 0;
        v_ret_dbnote          VARCHAR2 (15);
        v_errmsg              VARCHAR2 (200);
        v_rp                  VARCHAR2 (1) := 'N';
        v_rc                  VARCHAR2 (1) := 'N';
        v_rpr                 VARCHAR2 (1) := 'N';
        v_wthtx               VARCHAR2 (1) := 'N';
        v_mtran_no            NUMBER;
        v_pol_stat            VARCHAR2 (10);
        v_exhange_rate        NUMBER := 1;
        v_lvl                 VARCHAR2 (10);
        v_rnd                 NUMBER := 0;
        v_rnd_bcur            NUMBER := 0;

        -- select the current accounting period
        CURSOR cur_accprd IS
            SELECT acpr_code, acpr_sht_desc
              FROM gin_acc_periods
             WHERE TRUNC (SYSDATE) BETWEEN TO_DATE (
                                                  TO_CHAR (acpr_wef,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY')
                                       AND TO_DATE (
                                                  TO_CHAR (acpr_wet,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY');

        CURSOR grp_risks IS
            SELECT prrd_code,
                   ipu_pol_policy_no,
                   ipu_pol_ren_endos_no,
                   ipu_pol_batch_no,
                   ipu_sec_scl_code,
                   pol_pro_code,
                   pol_cur_symbol,
                   pol_cur_code,
                   pol_policy_no,
                   pol_brn_code
              FROM gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_policies
             WHERE     ipu_pol_batch_no = pol_batch_no
                   AND ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_trans_no;

        -- SELECT THE TREATY SETUP
        CURSOR cur_treaty_setup (v_rei_code IN NUMBER)
        IS
            SELECT *
              FROM gin_treaty_setups
             WHERE rei_code = v_rei_code;

        CURSOR cur_client_acc (v_agnt_cd IN NUMBER)
        IS
            SELECT agn_acc_no, agn_code, agn_sht_desc
              FROM tqc_agencies
             WHERE agn_code = v_agnt_cd;

        CURSOR cur_trans (v_scl_code IN NUMBER, v_level VARCHAR2)
        IS
            SELECT trac_trnt_code,
                   trac_acc_no,
                   trac_contra_acc,
                   trnt_code,
                   trnt_type,
                   trnt_contra_gl_code,
                   trnt_gl_code
              FROM gin_class_transactions, gin_transaction_types
             WHERE     trac_trnt_code(+) = trnt_code
                   AND trac_scl_code(+) = v_scl_code
                   AND trnt_application_lvl = v_level
                   AND (trnt_type IN ('RP', 'RC')                    --,'RPR')
                                                  OR trnt_type LIKE ('WTHT%'));

        CURSOR cur_part_trans (v_prrd_code NUMBER)
        IS
              SELECT NVL (SUM (NVL (part_refund_comm, 0)), 0)
                         comm,
                     NVL (SUM (NVL (part_refund_prem, 0)), 0)
                         prem,
                     NVL (SUM (NVL (part_rprem_tax_pcur, 0)), 0)
                         prem_tax,
                     (  NVL (SUM (NVL (part_prem_amt_pcur, 0)), 0)
                      - SUM (NVL (part_comm_amt_pcur, 0)))
                         total,
                     NVL (SUM (NVL (part_rprem_tax_pcur, 0)), 0)
                         pol_rein_prem_tax,
                     NVL (SUM (NVL (part_prem_tax_pcur, 0)), 0)
                         pol_prem_tax,
                     NVL (SUM (NVL (part_prem_tax_pcur, 0)), 0)
                         prem_tax_tcur,
                     NVL (SUM (NVL (part_comm_amt_pcur, 0)), 0)
                         comm_pcur,
                     NVL (SUM (NVL (part_prem_amt_pcur, 0)), 0)
                         prem_pcur,
                     part_rei_code,
                     part_ta_code,
                     part_as_code,
                     part_fiscal_year,
                     part_uwyr,
                     part_pol_cur_code,
                     part_scl_code,
                     part_trt_code,
                     part_trs_code,
                     part_trs_sht_desc,
                     part_prrd_code,
                     trs_trtg_code
                FROM gin_participations, gin_treaties
               WHERE part_trs_code = trs_code AND part_prrd_code = v_prrd_code
            GROUP BY part_rei_code,
                     part_trt_code,
                     part_trs_code,
                     part_trs_sht_desc,
                     part_ta_code,
                     part_as_code,
                     part_fiscal_year,
                     part_uwyr,
                     part_pol_cur_code,
                     part_scl_code,
                     part_ggt_tran_no,
                     part_prrd_code,
                     trs_trtg_code;
    BEGIN
        v_client_code := NULL;
        v_client_type := NULL;
        v_client_acc := NULL;
        v_client_acc := NULL;
        --v_user:= PKG_GLOBAL_VARS.GET_PVARCHAR2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        --RAISE_ERROR('v_trans_no='||v_trans_no);
        v_exhange_rate := 1;

        FOR grp_risks_rec IN grp_risks
        LOOP
            v_exhange_rate :=
                get_currexch_rate (grp_risks_rec.pol_cur_code,
                                   v_rnd,
                                   v_rnd_bcur);

            FOR cur_part_trans_rec
                IN cur_part_trans (grp_risks_rec.prrd_code)
            LOOP
                --check if all revenue items r defined
                v_rp := 'N';
                v_rc := 'N';
                v_rpr := 'N';
                v_wthtx := 'N';
                v_lvl := NULL;
                v_tran_sign := SIGN (cur_part_trans_rec.total);

                FOR cur_treaty_setup_rec
                    IN cur_treaty_setup (cur_part_trans_rec.part_rei_code)
                LOOP
                    v_retained_prem := 0;
                    v_retained_prem :=
                          cur_part_trans_rec.total
                        * NVL (cur_treaty_setup_rec.rei_retained_prem, 0)
                        / 100;
                -- insert retained premium
                --message(' inserting retention :PARAMETER.TRAN_NO_PARAM='||:PARAMETER.TRAN_NO_PARAM);pause;
                END LOOP;

                IF cur_part_trans_rec.trs_trtg_code IS NULL
                THEN
                    raise_error (
                           'Treaty grouping has not defined for the treaty..'
                        || cur_part_trans_rec.part_trs_sht_desc);
                ELSIF cur_part_trans_rec.trs_trtg_code = 1007
                THEN
                    v_lvl := 'FO';
                ELSIF cur_part_trans_rec.trs_trtg_code = 1001
                THEN
                    v_lvl := 'MAN';
                ELSIF cur_part_trans_rec.trs_trtg_code = 1003
                THEN
                    v_lvl := 'QST';
                ELSIF cur_part_trans_rec.trs_trtg_code = 10041
                THEN
                    v_lvl := 'FSTSUP';
                ELSIF cur_part_trans_rec.trs_trtg_code = 10042
                THEN
                    v_lvl := 'SECSUP';
                END IF;

                IF v_lvl IS NULL
                THEN
                    raise_error (
                           'Treaty grouping has not defined for the treaty.2.'
                        || cur_part_trans_rec.part_trs_sht_desc);
                END IF;

                FOR cur_trans_rec
                    IN cur_trans (grp_risks_rec.ipu_sec_scl_code, v_lvl)
                LOOP
                    IF cur_trans_rec.trnt_type = 'RP'
                    THEN
                        v_rp := 'Y';
                    ELSIF cur_trans_rec.trnt_type = 'RC'
                    THEN
                        v_rc := 'Y';
                    ELSIF cur_trans_rec.trnt_type = 'RPR'
                    THEN
                        v_rpr := 'Y';
                    --ELSIF cur_trans_rec.TRNT_type LIKE 'WTHTX%' THEN
                    --    v_wthtx             :='Y';
                    END IF;
                END LOOP;                                      --cur_trans_rec

                IF v_rp = 'N'
                THEN
                    raise_error (
                           ' Revenue item for reinsurance premum of type RI Premium '
                        || v_lvl
                        || ' is not defined in the setup. Cannot authorise this transaction... ');
                END IF;

                IF v_rc = 'N'
                THEN
                    raise_error (
                           ' Revenue item for reinsurance commission of type RI Commission '
                        || v_lvl
                        || '  is not defined in the setup. Cannot authorise this transaction... ');
                END IF;

                IF v_rpr = 'N' AND NVL (v_retained_prem, 0) != 0
                THEN
                    raise_error (
                           ' Revenue item for reinsurance retained premium of type RI Premium Retained '
                        || v_lvl
                        || '  is not defined in the setup. Cannot authorise this transaction... ');
                END IF;

                ----------end of check

                --IF :gin_policies.pol_policy_status != 'CO' THEN
                --v_pol_stat := :gin_policies.pol_policy_status;
                --ELSE
                BEGIN
                    SELECT pol_policy_status
                      INTO v_pol_stat
                      FROM gin_policies
                     WHERE pol_batch_no = grp_risks_rec.ipu_pol_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Unable to retrieve the policy transaction status');
                END;

                BEGIN
                    SELECT DECODE (v_tran_sign,
                                   1, btr_debit_code,
                                   btr_credit_code)
                      INTO v_tran_type
                      FROM gin_business_transactions
                     WHERE btr_trans_code = v_pol_stat;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                            'The transactions codes have not been defined .');
                    WHEN TOO_MANY_ROWS
                    THEN
                        raise_error (
                            'More than one transactions codes have been defined ');
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error :- Unable to retrieve transaction code...');
                END;

                IF v_tran_type IS NULL
                THEN
                    -- may be the debit or credit transaction have not been define
                    raise_error (
                        'The transactions codes have not been defined ');
                END IF;

                ---    calculate retained premium
                --post reisurance premium
                --v_tran_type := 'RPC';
                --RAISE_ERROR('grp_risks_rec.ipu_sec_scl_code='||cur_part_trans_rec.prem||';'||cur_part_trans_rec.PART_scl_code);
                IF NVL (cur_part_trans_rec.prem, 0) != 0
                THEN
                    --message('1 after post rein premium....');pause;
                    FOR cur_trans_rec
                        IN cur_trans (cur_part_trans_rec.part_scl_code,
                                      v_lvl)
                    LOOP
                        IF cur_trans_rec.trnt_type = 'RP'
                        THEN
                            -- post ceded premium
                            BEGIN
                                --post to gl
                                INSERT INTO gin_gl_transactions (
                                                gltran_no,
                                                gltran_auth_date,
                                                gltran_dc,
                                                gltran_trnt_code,
                                                gltran_amount,
                                                gltran_amount_bcur,
                                                gltran_gltran_acc,
                                                gltran_contra_acc,
                                                gltran_usrname,
                                                gltran_tran_no,
                                                gltran_pol_policy_no,
                                                gltran_u_c_trans,
                                                gltran_claim_no,
                                                gltran_cur_code,
                                                gltran_cur_symbol,
                                                gltran_cur_rate,
                                                gltran_scl_code,
                                                gltran_pro_code,
                                                gltran_btr_trans_code,
                                                gltran_level,
                                                gltran_brn_code)
                                         VALUES (
                                                TO_NUMBER (
                                                    TO_CHAR (SYSDATE, 'YYYY'))
                                             || gin_gltran_no_seq.NEXTVAL,
                                             v_today,
                                             DECODE (v_tran_sign,
                                                     1, 'C',
                                                     'D'),
                                             cur_trans_rec.trnt_code,
                                             ROUND (-cur_part_trans_rec.prem,
                                                    v_rnd),
                                             ROUND (
                                                   -cur_part_trans_rec.prem
                                                 / v_exhange_rate,
                                                 v_rnd),
                                             NVL (cur_trans_rec.trac_acc_no,
                                                  cur_trans_rec.trnt_gl_code),
                                             gin_interfaces_pkg.sl_control_acc (
                                                 'GIS',
                                                 'R',
                                                 v_lvl),
                                             --NVL(cur_trans_rec.TRAC_CONTRA_ACC,cur_trans_rec.TRNT_CONTRA_GL_CODE),
                                             v_user,
                                             v_trans_no,
                                             grp_risks_rec.ipu_pol_policy_no,
                                             'U',
                                             NULL,
                                             grp_risks_rec.pol_cur_code,
                                             grp_risks_rec.pol_cur_symbol,
                                             v_exhange_rate,
                                             cur_part_trans_rec.part_scl_code,
                                             grp_risks_rec.pol_pro_code,
                                             v_pol_stat,
                                             v_lvl,
                                             grp_risks_rec.pol_brn_code);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to post underwriting premium to the GL ');
                            END;
                        ELSIF cur_trans_rec.trnt_type = 'RPR'
                        THEN
                            ---cur_trans_rec.trac_trnt_code this concept changes to cur_trans_rec.trnt_type
                            -- post retained premium
                            IF NVL (v_retained_prem, 0) != 0
                            THEN
                                BEGIN
                                    --post to gl
                                    INSERT INTO gin_gl_transactions (
                                                    gltran_no,
                                                    gltran_auth_date,
                                                    gltran_dc,
                                                    gltran_trnt_code,
                                                    gltran_amount,
                                                    gltran_amount_bcur,
                                                    gltran_gltran_acc,
                                                    gltran_contra_acc,
                                                    gltran_usrname,
                                                    gltran_tran_no,
                                                    gltran_pol_policy_no,
                                                    gltran_u_c_trans,
                                                    gltran_claim_no,
                                                    gltran_cur_code,
                                                    gltran_cur_symbol,
                                                    gltran_cur_rate,
                                                    gltran_scl_code,
                                                    gltran_pro_code,
                                                    gltran_btr_trans_code,
                                                    gltran_level,
                                                    gltran_brn_code)
                                             VALUES (
                                                    TO_NUMBER (
                                                        TO_CHAR (SYSDATE,
                                                                 'YYYY'))
                                                 || gin_gltran_no_seq.NEXTVAL,
                                                 v_today,
                                                 DECODE (v_tran_sign,
                                                         1, 'D',
                                                         'C'),
                                                 cur_trans_rec.trnt_code,
                                                 ROUND (v_retained_prem,
                                                        v_rnd),
                                                 ROUND (
                                                       v_retained_prem
                                                     / v_exhange_rate,
                                                     v_rnd),
                                                 NVL (
                                                     cur_trans_rec.trac_acc_no,
                                                     cur_trans_rec.trnt_gl_code),
                                                 gin_interfaces_pkg.sl_control_acc (
                                                     'GIS',
                                                     'R',
                                                     v_lvl),
                                                 --NVL(cur_trans_rec.TRAC_CONTRA_ACC,cur_trans_rec.TRNT_CONTRA_GL_CODE),
                                                 v_user,
                                                 v_trans_no,
                                                 grp_risks_rec.pol_policy_no,
                                                 'U',
                                                 NULL,
                                                 grp_risks_rec.pol_cur_code,
                                                 grp_risks_rec.pol_cur_symbol,
                                                 v_exhange_rate,
                                                 cur_part_trans_rec.part_scl_code,
                                                 grp_risks_rec.pol_pro_code,
                                                 v_pol_stat,
                                                 v_lvl,
                                                 grp_risks_rec.pol_brn_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to post RI retained premium to the GL ');
                                END;
                            END IF;
                        ELSIF cur_trans_rec.trnt_type LIKE ('WTHTX%')
                        THEN
                            --post premium and reinsurance taxes
                            IF NVL (cur_part_trans_rec.prem_tax_tcur, 0) != 0
                            THEN
                                BEGIN
                                    --post to gl
                                    INSERT INTO gin_gl_transactions (
                                                    gltran_no,
                                                    gltran_auth_date,
                                                    gltran_dc,
                                                    gltran_trnt_code,
                                                    gltran_amount,
                                                    gltran_amount_bcur,
                                                    gltran_gltran_acc,
                                                    gltran_contra_acc,
                                                    gltran_usrname,
                                                    gltran_tran_no,
                                                    gltran_pol_policy_no,
                                                    gltran_u_c_trans,
                                                    gltran_claim_no,
                                                    gltran_cur_code,
                                                    gltran_cur_symbol,
                                                    gltran_cur_rate,
                                                    gltran_scl_code,
                                                    gltran_pro_code,
                                                    gltran_btr_trans_code,
                                                    gltran_level,
                                                    gltran_brn_code)
                                             VALUES (
                                                    TO_NUMBER (
                                                        TO_CHAR (SYSDATE,
                                                                 'YYYY'))
                                                 || gin_gltran_no_seq.NEXTVAL,
                                                 v_today,
                                                 DECODE (v_tran_sign,
                                                         1, 'C',
                                                         'D'),
                                                 cur_trans_rec.trnt_code,
                                                 ROUND (
                                                       -cur_part_trans_rec.prem_tax_tcur
                                                     * v_exhange_rate,
                                                     v_rnd),
                                                 ROUND (
                                                     -cur_part_trans_rec.prem_tax_tcur,
                                                     v_rnd),
                                                 NVL (
                                                     cur_trans_rec.trac_acc_no,
                                                     cur_trans_rec.trnt_gl_code),
                                                 gin_interfaces_pkg.sl_control_acc (
                                                     'GIS',
                                                     'R',
                                                     v_lvl),
                                                 --NVL(cur_trans_rec.TRAC_CONTRA_ACC,cur_trans_rec.TRNT_CONTRA_GL_CODE),
                                                 v_user,
                                                 v_trans_no,
                                                 grp_risks_rec.pol_policy_no,
                                                 'U',
                                                 NULL,
                                                 grp_risks_rec.pol_cur_code,
                                                 grp_risks_rec.pol_cur_symbol,
                                                 v_exhange_rate,
                                                 cur_part_trans_rec.part_scl_code,
                                                 grp_risks_rec.pol_pro_code,
                                                 v_pol_stat,
                                                 v_lvl,
                                                 grp_risks_rec.pol_brn_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to post RI tax to the GL ');
                                END;
                            END IF;
                        ELSIF cur_trans_rec.trnt_type = 'RC'
                        THEN
                            --post commission
                            IF NVL (cur_part_trans_rec.comm, 0) != 0
                            THEN
                                BEGIN
                                    --post to gl
                                    INSERT INTO gin_gl_transactions (
                                                    gltran_no,
                                                    gltran_auth_date,
                                                    gltran_dc,
                                                    gltran_trnt_code,
                                                    gltran_amount,
                                                    gltran_amount_bcur,
                                                    gltran_gltran_acc,
                                                    gltran_contra_acc,
                                                    gltran_usrname,
                                                    gltran_tran_no,
                                                    gltran_pol_policy_no,
                                                    gltran_u_c_trans,
                                                    gltran_claim_no,
                                                    gltran_cur_code,
                                                    gltran_cur_symbol,
                                                    gltran_cur_rate,
                                                    gltran_scl_code,
                                                    gltran_pro_code,
                                                    gltran_btr_trans_code,
                                                    gltran_level,
                                                    gltran_brn_code)
                                             VALUES (
                                                    TO_NUMBER (
                                                        TO_CHAR (SYSDATE,
                                                                 'YYYY'))
                                                 || gin_gltran_no_seq.NEXTVAL,
                                                 v_today,
                                                 DECODE (v_tran_sign,
                                                         1, 'C',
                                                         'D'),
                                                 cur_trans_rec.trnt_code,
                                                 ROUND (
                                                     cur_part_trans_rec.comm,
                                                     v_rnd),
                                                 ROUND (
                                                       cur_part_trans_rec.comm
                                                     / v_exhange_rate,
                                                     v_rnd),
                                                 NVL (
                                                     cur_trans_rec.trac_acc_no,
                                                     cur_trans_rec.trnt_gl_code),
                                                 gin_interfaces_pkg.sl_control_acc (
                                                     'GIS',
                                                     'R',
                                                     v_lvl),
                                                 --NVL(cur_trans_rec.TRAC_CONTRA_ACC,cur_trans_rec.TRNT_CONTRA_GL_CODE),
                                                 v_user,
                                                 v_trans_no,
                                                 grp_risks_rec.pol_policy_no,
                                                 'U',
                                                 NULL,
                                                 grp_risks_rec.pol_cur_code,
                                                 grp_risks_rec.pol_cur_symbol,
                                                 v_exhange_rate,
                                                 cur_part_trans_rec.part_scl_code,
                                                 grp_risks_rec.pol_pro_code,
                                                 v_pol_stat,
                                                 v_lvl,
                                                 grp_risks_rec.pol_brn_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to post RI reinsurance commssion to GL');
                                END;
                            END IF;
                        END IF;
                    END LOOP;
                END IF;
            END LOOP;
        END LOOP;                                             --grp_risks_rec.
    --post facre accounts
    END;

    PROCEDURE grp_post_pool_ri_gl (v_batch_no   IN NUMBER,
                                   v_tran_no    IN NUMBER,
                                   v_user       IN VARCHAR2)
    IS
        v_tran_type           VARCHAR2 (3);
        v_act_code            NUMBER;
        v_tran_sign           NUMBER;
        v_today               DATE := TRUNC (SYSDATE);
        v_client_acc          VARCHAR2 (30);
        v_client_gl_acc       VARCHAR2 (30);
        v_client_code         NUMBER;
        v_client_type         VARCHAR2 (1);
        v_dc_no               VARCHAR2 (15);
        al_id                 NUMBER;
        v_tot_rein_prem_tax   NUMBER := 0;
        v_tot_prem_tax        NUMBER := 0;
        v_agnt_code           NUMBER;
        v_agnt_sht_desc       VARCHAR2 (15);
        v_retained_prem       NUMBER := 0;
        v_acc_pr              NUMBER;
        v_acc_sht_desc        VARCHAR2 (15);
        v_cnt                 NUMBER := 0;
        v_ret_dbnote          VARCHAR2 (15);
        v_errmsg              VARCHAR2 (200);
        v_rp                  VARCHAR2 (1) := 'N';
        v_rc                  VARCHAR2 (1) := 'N';
        v_rpr                 VARCHAR2 (1) := 'N';
        v_wthtx               VARCHAR2 (1) := 'N';
        v_mtran_no            NUMBER;
        v_pol_stat            VARCHAR2 (10);
        v_exhange_rate        NUMBER := 1;
        v_lvl                 VARCHAR2 (10);
        --v_gltrt_lvl           VARCHAR2 (10);
        v_rnd                 NUMBER;
        v_bcur_rnd            NUMBER;

        -- select the current accounting period
        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_accprd IS
            SELECT acpr_code, acpr_sht_desc
              FROM gin_acc_periods
             WHERE TRUNC (SYSDATE) BETWEEN TO_DATE (
                                                  TO_CHAR (acpr_wef,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY')
                                       AND TO_DATE (
                                                  TO_CHAR (acpr_wet,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY');

        CURSOR cur_client_acc (v_agnt_cd IN NUMBER)
        IS
            SELECT agn_acc_no, agn_code, agn_sht_desc
              FROM tqc_agencies                                  ---GIN_AGENTS
             WHERE agn_code = v_agnt_cd;

        CURSOR cur_trans (v_scl_code IN NUMBER, v_level VARCHAR2)
        IS
            SELECT trac_trnt_code,
                   trac_acc_no,
                   trac_contra_acc,
                   trnt_code,
                   trnt_type,
                   trnt_contra_gl_code,
                   trnt_gl_code
              FROM gin_class_transactions, gin_transaction_types
             WHERE     trac_trnt_code(+) = trnt_code
                   AND trac_scl_code(+) = v_scl_code
                   AND trnt_application_lvl = v_level
                   AND (trnt_type IN ('POOLRP', 'POOLRC', 'POOLVAT'));

        CURSOR cur_scl IS
            SELECT DISTINCT ipu_sec_scl_code
              FROM gin_insured_property_unds
             WHERE ipu_pol_batch_no = v_batch_no;

        CURSOR cur_rei_trans IS
            SELECT NVL (prprd_refund_comm, 0)           comm,
                   NVL (prprd_refund_prem, 0)           prem,
                   NVL (prprd_rein_pool_vat_amt, 0)     rein_vat,     --change
                   prprd_scl_code
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_tran_no
                   AND prprd_pol_batch_no = v_batch_no;
    BEGIN
        v_client_code := NULL;
        v_client_type := NULL;
        v_client_acc := NULL;
        v_client_acc := NULL;

        FOR p IN cur_pol
        LOOP
            IF NVL (p.pol_exch_rate_fixed, 'N') != 'Y'
            THEN      --AND v_base_cur_code != :gin_policies.pol_CUR_CODE THEN
                v_exhange_rate :=
                    get_currexch_rate (p.pol_cur_code, v_rnd, v_bcur_rnd);
            ELSE
                v_exhange_rate := p.pol_cur_rate;
                v_rnd := get_curr_rounding (p.pol_cur_code, v_bcur_rnd);
            END IF;

            /*OPEN cur_accprd;
               FETCH cur_accprd INTO v_acc_pr ,v_acc_sht_desc;
                 IF cur_accprd%NOTFOUND THEN
                   RAISE_ERROR(' Accounting period not defined...Please Check..');

               END IF;
             CLOSE cur_accprd;*/
            --    message('1 after post rein premium...v_lvl = '||v_lvl||' & '||:gin_policies.pol_agnt_agent_code);pause;
            FOR cur_rei_trans_rec IN cur_rei_trans
            LOOP
                --check if all revenue items r defined
                v_rp := 'N';
                v_rc := 'N';
                v_rpr := 'N';
                v_wthtx := 'N';
                v_lvl := 'POOL';

                FOR cur_scl_rec IN cur_scl
                LOOP
                    --    message('2 after post rein premium...v_lvl = '||v_lvl||' & '||:gin_policies.pol_agnt_agent_code);pause;
                    FOR cur_trans_rec
                        IN cur_trans (cur_scl_rec.ipu_sec_scl_code, v_lvl)
                    LOOP
                        IF cur_trans_rec.trnt_type = 'POOLRP'
                        THEN
                            v_rp := 'Y';
                        ELSIF cur_trans_rec.trnt_type = 'POOLRC'
                        THEN
                            v_rc := 'Y';
                        ELSIF cur_trans_rec.trnt_type = 'POOLVAT'
                        THEN
                            v_rpr := 'Y';
                        END IF;
                    END LOOP;                                  --cur_trans_rec
                END LOOP;                                            --cur_scl

                --    message('1 after post rein premium...v_lvl = '||v_lvl||' & '||:gin_policies.pol_agnt_agent_code);pause;
                IF v_rp = 'N'
                THEN
                    raise_error (
                           ' Revenue item for reinsurance premum of type RI Premium '
                        || v_lvl
                        || ' is not defined in the setup... ');
                END IF;

                IF v_rc = 'N'
                THEN
                    raise_error (
                           ' Revenue item for reinsurance commission of type RI Commission '
                        || v_lvl
                        || '  is not defined in the setup... ');
                END IF;

                IF v_rpr = 'N'
                THEN
                    raise_error (
                           ' Revenue item for reinsurance retained premium of type RI Premium Retained '
                        || v_lvl
                        || '  is not defined in the setup... ');
                END IF;

                ----------end of check
                --message('cur_rei_trans_rec.total ='||cur_rei_trans_rec.total);pause;
                IF NVL (cur_rei_trans_rec.prem, 0) = 0
                THEN
                    v_tran_sign := 1;
                ELSE
                    v_tran_sign := SIGN (cur_rei_trans_rec.prem);
                END IF;

                v_retained_prem := 0;

                IF p.pol_policy_status != 'CO'
                THEN
                    v_pol_stat := p.pol_policy_status;
                ELSE
                    BEGIN
                        SELECT pol_policy_status
                          INTO v_pol_stat
                          FROM gin_policies
                         WHERE pol_batch_no = p.pol_prev_batch_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to retrieve the previous transaction status');
                    END;
                END IF;

                BEGIN
                    SELECT DECODE (v_tran_sign,
                                   1, btr_debit_code,
                                   btr_credit_code)
                      INTO v_tran_type
                      FROM gin_business_transactions
                     WHERE btr_trans_code = v_pol_stat;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                               'The transactions codes have not been defined for the '
                            || p.pol_policy_status
                            || ' transaction ..');
                    WHEN TOO_MANY_ROWS
                    THEN
                        raise_error (
                               'More than one transactions codes have been defined for the '
                            || p.pol_policy_status
                            || ' transaction ..');
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error :- Unable to retrieve transaction code...');
                END;

                IF v_tran_type IS NULL
                THEN
                    -- may be the debit or credit transaction have not been define
                    raise_error (
                           'The transactions codes have not been defined for the '
                        || p.pol_policy_status
                        || ' transaction ..');
                END IF;

                IF NVL (cur_rei_trans_rec.prem, 0) != 0
                THEN
                    --message('1 after post rein premium...v_lvl = '||v_lvl||' & '||:gin_policies.pol_agnt_agent_code);pause;
                    FOR cur_trans_rec
                        IN cur_trans (cur_rei_trans_rec.prprd_scl_code,
                                      v_lvl)
                    LOOP
                        IF cur_trans_rec.trnt_type = 'POOLRP'
                        THEN
                            -- post ceded premium
                            BEGIN
                                INSERT INTO gin_gl_transactions (
                                                gltran_no,
                                                gltran_auth_date,
                                                gltran_dc,
                                                gltran_trnt_code,
                                                gltran_amount,
                                                gltran_amount_bcur,
                                                gltran_gltran_acc,
                                                gltran_contra_acc,
                                                gltran_usrname,
                                                gltran_tran_no,
                                                gltran_pol_policy_no,
                                                gltran_u_c_trans,
                                                gltran_claim_no,
                                                gltran_cur_code,
                                                gltran_cur_symbol,
                                                gltran_cur_rate,
                                                gltran_scl_code,
                                                gltran_pro_code,
                                                gltran_btr_trans_code,
                                                gltran_level,
                                                gltran_brn_code)
                                         VALUES (
                                                TO_NUMBER (
                                                    TO_CHAR (SYSDATE, 'YYYY'))
                                             || gin_gltran_no_seq.NEXTVAL,
                                             v_today,
                                             DECODE (v_tran_sign,
                                                     1, 'D',
                                                     'C'),
                                             cur_trans_rec.trnt_code,
                                             ROUND (-cur_rei_trans_rec.prem,
                                                    v_rnd),
                                             ROUND (
                                                   -cur_rei_trans_rec.prem
                                                 * v_exhange_rate,
                                                 v_rnd),
                                             --calling fms proc to get gl account if cur_trans_rec.TRNT_CONTRA_GL_CODE is null
                                             DECODE (
                                                 gin_interfaces_pkg.interface_enabled (
                                                     'UW_TRANS'),
                                                 'Y', gin_interfaces_pkg.sl_control_acc (
                                                          'GIS',
                                                          'R',
                                                          v_lvl)),
                                             NVL (cur_trans_rec.trac_acc_no,
                                                  cur_trans_rec.trnt_gl_code),
                                             v_user,
                                             v_tran_no,
                                             p.pol_policy_no,
                                             'U',
                                             NULL,
                                             p.pol_cur_code,
                                             p.pol_cur_symbol,
                                             v_exhange_rate,
                                             cur_rei_trans_rec.prprd_scl_code,
                                             p.pol_pro_code,
                                             v_pol_stat,
                                             v_lvl,
                                             p.pol_brn_code);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to post underwriting RI Pool premium to the GL ');
                            END;
                        ELSIF cur_trans_rec.trnt_type LIKE ('POOLVAT')
                        THEN
                            --post premium and reinsurance taxes
                            IF NVL (cur_rei_trans_rec.rein_vat, 0) != 0
                            THEN
                                BEGIN
                                    --post to gl
                                    INSERT INTO gin_gl_transactions (
                                                    gltran_no,
                                                    gltran_auth_date,
                                                    gltran_dc,
                                                    gltran_trnt_code,
                                                    gltran_amount,
                                                    gltran_amount_bcur,
                                                    gltran_gltran_acc,
                                                    gltran_contra_acc,
                                                    gltran_usrname,
                                                    gltran_tran_no,
                                                    gltran_pol_policy_no,
                                                    gltran_u_c_trans,
                                                    gltran_claim_no,
                                                    gltran_cur_code,
                                                    gltran_cur_symbol,
                                                    gltran_cur_rate,
                                                    gltran_scl_code,
                                                    gltran_pro_code,
                                                    gltran_btr_trans_code,
                                                    gltran_level,
                                                    gltran_brn_code)
                                             VALUES (
                                                    TO_NUMBER (
                                                        TO_CHAR (SYSDATE,
                                                                 'YYYY'))
                                                 || gin_gltran_no_seq.NEXTVAL,
                                                 v_today,
                                                 DECODE (v_tran_sign,
                                                         1, 'C',
                                                         'D'),
                                                 cur_trans_rec.trnt_code,
                                                 ROUND (
                                                       -cur_rei_trans_rec.rein_vat
                                                     * v_exhange_rate,
                                                     v_rnd),
                                                 ROUND (
                                                     -cur_rei_trans_rec.rein_vat,
                                                     v_rnd),
                                                 DECODE (
                                                     gin_interfaces_pkg.interface_enabled (
                                                         'UW_TRANS'),
                                                     'Y', gin_interfaces_pkg.sl_control_acc (
                                                              'GIS',
                                                              'R',
                                                              v_lvl)),
                                                 NVL (
                                                     cur_trans_rec.trac_acc_no,
                                                     cur_trans_rec.trnt_gl_code),
                                                 v_user,
                                                 v_tran_no,
                                                 p.pol_policy_no,
                                                 'U',
                                                 NULL,
                                                 p.pol_cur_code,
                                                 p.pol_cur_symbol,
                                                 v_exhange_rate,
                                                 cur_rei_trans_rec.prprd_scl_code,
                                                 p.pol_pro_code,
                                                 v_pol_stat,
                                                 v_lvl,
                                                 p.pol_brn_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to post RI Pool vat to the GL ');
                                END;
                            END IF;
                        ELSIF cur_trans_rec.trnt_type = 'POOLRC'
                        THEN
                            --post commission
                            IF NVL (cur_rei_trans_rec.comm, 0) != 0
                            THEN
                                BEGIN
                                    --post to gl
                                    INSERT INTO gin_gl_transactions (
                                                    gltran_no,
                                                    gltran_auth_date,
                                                    gltran_dc,
                                                    gltran_trnt_code,
                                                    gltran_amount,
                                                    gltran_amount_bcur,
                                                    gltran_gltran_acc,
                                                    gltran_contra_acc,
                                                    gltran_usrname,
                                                    gltran_tran_no,
                                                    gltran_pol_policy_no,
                                                    gltran_u_c_trans,
                                                    gltran_claim_no,
                                                    gltran_cur_code,
                                                    gltran_cur_symbol,
                                                    gltran_cur_rate,
                                                    gltran_scl_code,
                                                    gltran_pro_code,
                                                    gltran_btr_trans_code,
                                                    gltran_level,
                                                    gltran_brn_code)
                                             VALUES (
                                                    TO_NUMBER (
                                                        TO_CHAR (SYSDATE,
                                                                 'YYYY'))
                                                 || gin_gltran_no_seq.NEXTVAL,
                                                 v_today,
                                                 DECODE (v_tran_sign,
                                                         1, 'C',
                                                         'D'),
                                                 cur_trans_rec.trnt_code,
                                                 ROUND (
                                                     cur_rei_trans_rec.comm,
                                                     v_rnd),
                                                 ROUND (
                                                       cur_rei_trans_rec.comm
                                                     * v_exhange_rate,
                                                     v_rnd),
                                                 DECODE (
                                                     gin_interfaces_pkg.interface_enabled (
                                                         'UW_TRANS'),
                                                     'Y', gin_interfaces_pkg.sl_control_acc (
                                                              'GIS',
                                                              'R',
                                                              v_lvl)),
                                                 NVL (
                                                     cur_trans_rec.trac_acc_no,
                                                     cur_trans_rec.trnt_gl_code),
                                                 v_user,
                                                 v_tran_no,
                                                 p.pol_policy_no,
                                                 'U',
                                                 NULL,
                                                 p.pol_cur_code,
                                                 p.pol_cur_symbol,
                                                 v_exhange_rate,
                                                 cur_rei_trans_rec.prprd_scl_code,
                                                 p.pol_pro_code,
                                                 v_pol_stat,
                                                 v_lvl,
                                                 p.pol_brn_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to post RI reinsurance Pool commssion to GL');
                                END;
                            END IF;
                        END IF;
                    END LOOP;
                END IF;
            END LOOP;
        END LOOP;
    END;

    PROCEDURE grp_post_pool_ri_trans (v_batch_no   IN NUMBER,
                                      v_trans_no   IN NUMBER)
    IS
        v_tran_sign           NUMBER;
        v_today               DATE;
        v_client_acc          VARCHAR2 (30);
        v_client_gl_acc       VARCHAR2 (30);
        v_client_code         NUMBER;
        v_client_type         VARCHAR2 (1);
        v_dc_no               VARCHAR2 (15);
        v_tran_amount         NUMBER := 0;
        al_id                 NUMBER;
        v_tot_rein_prem_tax   NUMBER := 0;
        v_tot_prem_tax        NUMBER := 0;
        v_agnt_code           NUMBER;
        v_agnt_sht_desc       VARCHAR2 (15);
        v_retained_prem       NUMBER := 0;
        v_acc_pr              NUMBER;
        v_acc_sht_desc        VARCHAR2 (15);
        v_cnt                 NUMBER := 0;
        v_ret_dbnote          VARCHAR2 (15);
        v_errmsg              VARCHAR2 (200);
        v_rp                  VARCHAR2 (1) := 'N';
        v_rc                  VARCHAR2 (1) := 'N';
        v_rpr                 VARCHAR2 (1) := 'N';
        v_wthtx               VARCHAR2 (1) := 'N';
        v_mtran_no            NUMBER;
        v_exhange_rate        NUMBER := 1;
        v_lvl                 VARCHAR2 (10);
        v_rnd                 NUMBER;
        v_bcur_rnd            NUMBER;

        CURSOR cur_accprd IS
            SELECT acpr_code, acpr_sht_desc
              FROM gin_acc_periods
             WHERE TRUNC (SYSDATE) BETWEEN TO_DATE (
                                                  TO_CHAR (acpr_wef,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY')
                                       AND TO_DATE (
                                                  TO_CHAR (acpr_wet,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY');

        -- SELECT THE TREATY SETUP
        CURSOR cur_treaty_setup (v_rei_code IN NUMBER)
        IS
            SELECT *
              FROM gin_treaty_setups
             WHERE rei_code = v_rei_code;

        CURSOR cur_client_acc (v_agnt_cd IN NUMBER)
        IS
            SELECT agn_acc_no, agn_code, agn_sht_desc
              FROM tqc_agencies                                  ---GIN_AGENTS
             WHERE agn_code = v_agnt_cd;

        CURSOR cur_scl IS
            SELECT DISTINCT ipu_sec_scl_code
              FROM gin_insured_property_unds
             WHERE ipu_pol_batch_no = v_batch_no;

        CURSOR cur_rei_trans IS
              SELECT SUM (NVL (prprd_refund_comm, 0))     comm,
                     SUM (NVL (prprd_refund_prem, 0))     prem,
                     --SUM(NVL (prprd_rein_pool_vat_amt, 0))
                     0                                    rein_vat,
                     prprd_pta_code,
                     pta_sht_desc,
                     prprd_scl_code
                FROM gin_pol_rein_pool_risk_details,
                     gin_pool_treaty_arrangements
               WHERE     pta_code = prprd_pta_code
                     AND prprd_ggt_tran_no = v_trans_no
                     AND prprd_pol_batch_no = v_batch_no
            GROUP BY prprd_pta_code, pta_sht_desc, prprd_scl_code;

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        v_pol_stat            VARCHAR2 (10);
        v_tran_type           VARCHAR2 (10);
        v_pol_prev_drcr_no    VARCHAR2 (30);
    BEGIN
        v_client_code := NULL;
        v_client_type := NULL;
        v_client_acc := NULL;
        v_client_acc := NULL;

        FOR cur_pol_rec IN cur_pol
        LOOP
            v_exhange_rate := cur_pol_rec.pol_cur_rate;
            v_rnd := get_curr_rounding (cur_pol_rec.pol_cur_code, v_bcur_rnd);
            v_today := TRUNC (SYSDATE);

            IF cur_pol_rec.pol_policy_status != 'CO'
            THEN
                v_pol_stat := cur_pol_rec.pol_policy_status;
            ELSE
                BEGIN
                    SELECT pol_policy_status, pol_drcr_no
                      INTO v_pol_stat, v_pol_prev_drcr_no
                      FROM gin_policies
                     WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Unable to retrieve the previous transaction status');
                END;
            END IF;

            BEGIN
                SELECT DECODE (v_tran_sign,
                               1, btr_debit_code,
                               btr_credit_code)
                  INTO v_tran_type
                  FROM gin_business_transactions
                 WHERE btr_trans_code = v_pol_stat;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                           'Error : The transactions codes have not been defined for the '
                        || cur_pol_rec.pol_policy_status
                        || ' transaction ..');
                WHEN OTHERS
                THEN
                    raise_error (
                           'Error : The transactions codes have not been defined for the '
                        || cur_pol_rec.pol_policy_status
                        || ' transaction ..');
            END;

            FOR cur_rei_trans_rec IN cur_rei_trans
            LOOP
                --check if all revenue items r defined
                v_rp := 'N';
                v_rc := 'N';
                v_rpr := 'N';
                v_wthtx := 'N';
                v_lvl := 'POOL';
                v_client_type := 'R';
                v_tran_sign := SIGN (cur_rei_trans_rec.prem);

                IF NVL (cur_rei_trans_rec.prem, 0) != 0
                THEN
                    --SELECT v_tran_type||GIN_DC_NOTE_SEQ.NEXTVAL INTO v_dc_no FROM DUAL;
                    v_dc_no := cur_pol_rec.pol_drcr_no;

                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                           || gin_mtran_no_seq.NEXTVAL
                      INTO v_mtran_no
                      FROM DUAL;

                    BEGIN
                        INSERT INTO gin_master_transactions (
                                        mtran_no,
                                        mtran_date,
                                        mtran_ref_no,
                                        mtran_other_ref,
                                        mtran_tran_type,
                                        mtran_dc,
                                        mtran_control_acc,
                                        mtran_client_type,
                                        mtran_client_code,
                                        mtran_amount,
                                        mtran_balance,
                                        mtran_pol_batch_no,
                                        mtran_scl_code,
                                        mtran_narrations,
                                        mtran_rei_code,
                                        mtran_client_polcy_no,
                                        mtran_pol_ren_endos_no,
                                        mtran_ggt_tran_no,
                                        mtran_acct_code,
                                        mtran_pro_sht_desc,
                                        mtran_pro_code,
                                        mtran_authorised,
                                        mtran_date_authorized,
                                        mtran_authorised_by,
                                        mtran_posting_date,
                                        mtran_net_amt,
                                        mtran_origin,
                                        mtran_btr_trans_code,
                                        mtran_cur_code,
                                        mtran_cur_symbol,
                                        mtran_cur_rate,
                                        mtran_prp_code,
                                        mtran_vat)
                                 VALUES (
                                     v_mtran_no,
                                     v_today,
                                     v_dc_no,
                                     v_pol_prev_drcr_no,
                                     v_tran_type,
                                     DECODE (v_tran_sign, 1, 'C', 'D'),
                                     cur_rei_trans_rec.pta_sht_desc,
                                     v_client_type,
                                     cur_rei_trans_rec.prprd_pta_code,
                                       DECODE (v_tran_sign, 1, -1, 1)
                                     * ABS (
                                           ROUND (
                                               NVL (cur_rei_trans_rec.prem,
                                                    0),
                                               v_rnd)),
                                       DECODE (v_tran_sign, 1, -1, 1)
                                     * ABS (
                                           ROUND (
                                               -NVL (cur_rei_trans_rec.prem,
                                                     0),
                                               v_rnd)),
                                     v_batch_no,
                                     cur_rei_trans_rec.prprd_scl_code,
                                     DECODE (
                                         v_tran_sign,
                                         1, 'Reinsurance pool premium credit note',
                                         'Reinsurance pool premium Debit note'),
                                     cur_rei_trans_rec.prprd_pta_code,
                                     cur_pol_rec.pol_policy_no,
                                     cur_pol_rec.pol_ren_endos_no,
                                     v_trans_no,
                                     cur_rei_trans_rec.pta_sht_desc,
                                     cur_pol_rec.pol_pro_sht_desc,
                                     cur_pol_rec.pol_pro_code,
                                     'Y',
                                     v_today,
                                     cur_pol_rec.pol_checked_by,
                                     v_today,
                                       DECODE (v_tran_sign, 1, -1, 1)
                                     * ABS (
                                           ROUND (
                                               -NVL (cur_rei_trans_rec.prem,
                                                     0),
                                               v_rnd)),
                                     'U',
                                     cur_pol_rec.pol_policy_status,
                                     cur_pol_rec.pol_cur_code,
                                     cur_pol_rec.pol_cur_symbol,
                                     v_exhange_rate,
                                     cur_pol_rec.pol_prp_code,
                                     cur_rei_trans_rec.rein_vat);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error :- Unable to post RI premium credit/Debit note to accounts...');
                    END;
                END IF;
            END LOOP;
        END LOOP;
    END;

    PROCEDURE grp_post_rein (v_tran_no     IN NUMBER,
                             v_tran_type   IN VARCHAR2,
                             v_user           VARCHAR2)
    IS
        --v_client_pol IN VARCHAR2,
        --v_ren_endos IN VARCHAR2,
        --cur_part_trans_rec.PART_UWYR      IN NUMBER) IS
        v_tran_pfx            VARCHAR2 (3);
        v_tran_sign           NUMBER;
        v_today               DATE := TRUNC (SYSDATE);
        v_client_acc          VARCHAR2 (20);
        v_client_gl_acc       VARCHAR2 (20);
        v_client_code         NUMBER;
        v_client_type         VARCHAR2 (1);
        v_dc_no               VARCHAR2 (15);
        v_tran_amount         NUMBER := 0;
        --v_user                VARCHAR2(30);--  := PKG_GLOBAL_VARS.GET_PVARCHAR2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        al_id                 NUMBER;
        v_tot_rein_prem_tax   NUMBER := 0;
        v_tot_prem_tax        NUMBER := 0;
        v_agnt_code           NUMBER;
        v_agnt_sht_desc       VARCHAR2 (15);
        v_acc_pr              NUMBER;
        v_acc_sht_desc        VARCHAR2 (15);
        v_cnt                 NUMBER := 0;
        v_retained_prem       NUMBER := 0;
        v_refund_prem_ret     NUMBER := 0;
        v_errnum              NUMBER;
        v_errmsg              VARCHAR2 (200);
        v_rp                  VARCHAR2 (1) := 'N';
        v_rc                  VARCHAR2 (1) := 'N';
        v_rpr                 VARCHAR2 (1) := 'N';
        v_wthtx               VARCHAR2 (1) := 'N';
        v_mtran_no            NUMBER;
        v_exch_rate           NUMBER;
        v_rnd                 NUMBER := 0;
        v_rnd_bcur            NUMBER := 0;

        -- select the current accounting period
        CURSOR cur_accprd IS
            SELECT acpr_code, acpr_sht_desc
              FROM gin_acc_periods
             WHERE TRUNC (SYSDATE) BETWEEN TO_DATE (
                                                  TO_CHAR (acpr_wef,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY')
                                       AND TO_DATE (
                                                  TO_CHAR (acpr_wet,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY');

        CURSOR grp_risks IS
            SELECT pol_cur_code,
                   prrd_code,
                   ipu_pol_policy_no,
                   pol_cur_symbol,
                   ipu_pol_ren_endos_no,
                   ipu_pol_batch_no,
                   ipu_sec_scl_code
              FROM gin_policies,
                   gin_insured_property_unds,
                   gin_policy_risk_ri_dtls
             WHERE     pol_batch_no = ipu_pol_batch_no
                   AND ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_tran_no;

        -- SELECT THE TREATY SETUP
        CURSOR cur_treaty_setup (v_rei_code IN NUMBER)
        IS
            SELECT *
              FROM gin_treaty_setups
             WHERE rei_code = v_rei_code;

        CURSOR cur_client_acc (v_agnt_cd IN NUMBER)
        IS
            SELECT agn_acc_no, agn_code, agn_sht_desc
              FROM tqc_agencies, tqc_agency_systems
             WHERE     agn_code = asys_agn_code
                   AND asys_sys_code = 37
                   AND agn_code = v_agnt_cd;

        CURSOR cur_trans (v_scl_code IN NUMBER)
        IS
            SELECT trac_trnt_code,
                   trac_acc_no,
                   trac_contra_acc,
                   trnt_code,
                   trnt_type,
                   trnt_contra_gl_code,
                   trnt_gl_code
              FROM gin_class_transactions, gin_transaction_types
             WHERE     trac_trnt_code(+) = trnt_code
                   AND trac_scl_code(+) = v_scl_code
                   AND (   trnt_type IN ('RP', 'RC', 'RPR')
                        OR trnt_type LIKE ('WTHT%'));

        CURSOR cur_part_trans (v_prrd_code NUMBER)
        IS
              SELECT NVL (SUM (NVL (part_comm_amt_pcur, 0)), 0)
                         comm_pcur,
                     NVL (SUM (NVL (part_prem_amt_pcur, 0)), 0)
                         prem_pcur,
                     NVL (SUM (NVL (part_rprem_tax_pcur, 0)), 0)
                         rein_prem_tax_pcur,
                     (  NVL (SUM (NVL (part_prem_amt_pcur, 0)), 0)
                      - SUM (NVL (part_comm_amt_pcur, 0)))
                         net_prem_pcur,
                     NVL (SUM (NVL (part_rprem_tax_tcur, 0)), 0)
                         rein_prem_tax_tcur,
                     NVL (SUM (NVL (part_prem_tax_pcur, 0)), 0)
                         prem_tax_pcur,
                     NVL (SUM (NVL (part_prem_tax_tcur, 0)), 0)
                         prem_tax_tcur,
                     NVL (SUM (NVL (part_comm_amt_pcur, 0)), 0)
                         comm_tcur,
                     NVL (SUM (NVL (part_prem_amt_tcur, 0)), 0)
                         prem_tcur,
                     NVL (SUM (NVL (part_refund_prem, 0)), 0)
                         refund_prem,
                     NVL (SUM (NVL (part_prev_com, 0)), 0)
                         refund_com,
                     part_pol_policy_no,
                     part_rei_code,
                     part_agnt_agent_code,
                     part_agnt_sht_desc,
                     part_ta_code,
                     part_as_code,
                     part_fiscal_year,
                     part_uwyr,
                     part_pol_cur_code,
                     part_scl_code,
                     part_trt_code,
                     part_trs_code,
                     part_trs_sht_desc,
                     part_prrd_code,
                     trs_trtg_code
                FROM gin_participations, gin_treaties
               WHERE part_trs_code = trs_code AND part_prrd_code = v_prrd_code
            GROUP BY part_rei_code,
                     part_agnt_agent_code,
                     part_agnt_sht_desc,
                     part_trt_code,
                     part_trs_code,
                     part_trs_sht_desc,
                     part_pol_policy_no,
                     part_ta_code,
                     part_as_code,
                     part_fiscal_year,
                     part_uwyr,
                     part_pol_cur_code,
                     part_scl_code,
                     part_ggt_tran_no,
                     part_prrd_code,
                     trs_trtg_code;
    BEGIN
        v_client_code := NULL;
        v_client_type := NULL;
        v_client_acc := NULL;
        v_client_acc := NULL;

        --v_user := PKG_GLOBAL_VARS.GET_PVARCHAR2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        FOR grp_risks_rec IN grp_risks
        LOOP
            v_exch_rate :=
                get_currexch_rate (grp_risks_rec.pol_cur_code,
                                   v_rnd,
                                   v_rnd_bcur);
            v_rp := 'N';
            v_rc := 'N';
            v_rpr := 'N';
            v_wthtx := 'N';

            FOR cur_trans_rec IN cur_trans (grp_risks_rec.ipu_sec_scl_code)
            LOOP
                IF cur_trans_rec.trnt_type = 'RP'
                THEN
                    v_rp := 'Y';
                ELSIF cur_trans_rec.trnt_type = 'RC'
                THEN
                    v_rc := 'Y';
                ELSIF cur_trans_rec.trnt_type = 'RPR'
                THEN
                    v_rpr := 'Y';
                ELSIF cur_trans_rec.trnt_type LIKE 'WTHTX%'
                THEN
                    v_wthtx := 'Y';
                END IF;
            END LOOP;                                          --cur_trans_rec

            IF v_rp = 'N'
            THEN
                raise_error (
                    ' Revenue item for reinsurance premum of type RI Premium is not defined in the setup. Cannot authorise this transaction... ');
            END IF;

            IF v_rc = 'N'
            THEN
                raise_error (
                    ' Revenue item for reinsurance commission of type RI Commission is not defined in the setup...  Cannot authorise this transaction... ');
            END IF;

            IF v_rpr = 'N'
            THEN
                raise_error (
                    ' Revenue item for reinsurance retained premium of type RI Premium Retained is not defined in the setup. Cannot authorise this transaction... ');
            END IF;

            IF v_wthtx = 'N'
            THEN
                raise_error (
                    ' Revenue item for reinsurance commission withholding tax of type RI commission withholding tax is not defined in the setup. Cannot authorise this transaction... ');
            END IF;

            FOR cur_part_trans_rec
                IN cur_part_trans (grp_risks_rec.prrd_code)
            LOOP
                -- get client account
                OPEN cur_client_acc (cur_part_trans_rec.part_agnt_agent_code);

                FETCH cur_client_acc
                    INTO v_client_gl_acc, v_agnt_code, v_agnt_sht_desc;

                v_client_acc := v_agnt_sht_desc;

                IF cur_client_acc%NOTFOUND
                THEN
                    raise_error (
                           v_agnt_sht_desc
                        || ' Client account code have not been defined...Please Check..');
                END IF;

                CLOSE cur_client_acc;

                v_client_type := 'R';
                v_tran_sign := SIGN (cur_part_trans_rec.prem_pcur);

                FOR cur_treaty_setup_rec
                    IN cur_treaty_setup (cur_part_trans_rec.part_rei_code)
                LOOP
                    v_retained_prem := 0;
                    v_refund_prem_ret := 0;
                    v_retained_prem :=
                          cur_part_trans_rec.net_prem_pcur
                        * NVL (cur_treaty_setup_rec.rei_retained_prem, 0)
                        / 100;
                    v_refund_prem_ret :=
                          cur_part_trans_rec.refund_prem
                        * NVL (cur_treaty_setup_rec.rei_retained_prem, 0)
                        / 100;

                    BEGIN
                        -- insert retained premium
                        ---insert refund of retained premium
                        INSERT INTO gin_prem_retentions (
                                        pret_code,
                                        pret_clt_rei_code,
                                        pret_clt_trt_code,
                                        pret_trt_sht_desc,
                                        pret_clt_scl_code,
                                        pret_resv_amt,
                                        pret_resv_date,
                                        pret_resv_uw_year,
                                        pret_pol_policy_no,
                                        pret_pol_ren_endos_no,
                                        pret_pol_batch_no,
                                        pret_resv_acpr_code,
                                        pret_resv_acpr_sht_desc,
                                        part_resv_percentage,
                                        pret_ta_code,
                                        pret_as_code,
                                        pret_pol_cur_code,
                                        pret_trt_cur_code,
                                        pret_agnt_agent_code,
                                        pret_agnt_sht_desc,
                                        pret_rei_code,
                                        pret_ggt_tran_no,
                                        pret_trs_code,
                                        pret_trs_sht_desc)
                                 VALUES (
                                     TO_NUMBER (
                                            TO_CHAR (SYSDATE, 'YYYY')
                                         || gin_pret_code_seq.NEXTVAL),
                                     cur_part_trans_rec.part_rei_code,
                                     cur_treaty_setup_rec.rei_trt_code,
                                     cur_treaty_setup_rec.rei_trt_sht_desc,
                                     cur_part_trans_rec.part_scl_code,
                                     -v_refund_prem_ret,
                                     TRUNC (SYSDATE),
                                     cur_part_trans_rec.part_uwyr,
                                     grp_risks_rec.ipu_pol_policy_no,
                                     grp_risks_rec.ipu_pol_ren_endos_no,
                                     grp_risks_rec.ipu_pol_batch_no,
                                     v_acc_pr,
                                     v_acc_sht_desc,
                                     cur_treaty_setup_rec.rei_retained_prem,
                                     cur_treaty_setup_rec.rei_ta_code,
                                     cur_treaty_setup_rec.rei_as_code,
                                     cur_part_trans_rec.part_pol_cur_code,
                                     cur_treaty_setup_rec.rei_cur_code,
                                     cur_part_trans_rec.part_agnt_agent_code,
                                     cur_part_trans_rec.part_agnt_sht_desc,
                                     cur_treaty_setup_rec.rei_code,
                                     v_tran_no,
                                     cur_treaty_setup_rec.rei_trs_code,
                                     cur_treaty_setup_rec.rei_trs_sht_desc);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to insert retained premium refund..');
                    END;

                    BEGIN
                        --insert new retained premium
                        INSERT INTO gin_prem_retentions (
                                        pret_code,
                                        pret_clt_rei_code,
                                        pret_clt_trt_code,
                                        pret_trt_sht_desc,
                                        pret_clt_scl_code,
                                        pret_resv_amt,
                                        pret_resv_date,
                                        pret_resv_uw_year,
                                        pret_pol_policy_no,
                                        pret_pol_ren_endos_no,
                                        pret_pol_batch_no,
                                        pret_resv_acpr_code,
                                        pret_resv_acpr_sht_desc,
                                        part_resv_percentage,
                                        pret_ta_code,
                                        pret_as_code,
                                        pret_pol_cur_code,
                                        pret_trt_cur_code,
                                        pret_agnt_agent_code,
                                        pret_agnt_sht_desc,
                                        pret_rei_code,
                                        pret_ggt_tran_no,
                                        pret_trs_code,
                                        pret_trs_sht_desc)
                                 VALUES (
                                     TO_NUMBER (
                                            TO_CHAR (SYSDATE, 'YYYY')
                                         || gin_pret_code_seq.NEXTVAL),
                                     cur_part_trans_rec.part_rei_code,
                                     cur_treaty_setup_rec.rei_trt_code,
                                     cur_treaty_setup_rec.rei_trt_sht_desc,
                                     cur_part_trans_rec.part_scl_code,
                                     v_retained_prem,
                                     TRUNC (SYSDATE),
                                     cur_part_trans_rec.part_uwyr,
                                     grp_risks_rec.ipu_pol_policy_no,
                                     grp_risks_rec.ipu_pol_ren_endos_no,
                                     grp_risks_rec.ipu_pol_batch_no,
                                     v_acc_pr,
                                     v_acc_sht_desc,
                                     cur_treaty_setup_rec.rei_retained_prem,
                                     cur_treaty_setup_rec.rei_ta_code,
                                     cur_treaty_setup_rec.rei_as_code,
                                     cur_part_trans_rec.part_pol_cur_code,
                                     cur_treaty_setup_rec.rei_cur_code,
                                     cur_part_trans_rec.part_agnt_agent_code,
                                     cur_part_trans_rec.part_agnt_sht_desc,
                                     cur_treaty_setup_rec.rei_code,
                                     v_tran_no,
                                     cur_treaty_setup_rec.rei_trs_code,
                                     cur_treaty_setup_rec.rei_trs_sht_desc);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to insert new retained premium ..');
                    END;
                --        message('doc now post rein loop.3.');pause;
                END LOOP;

                BEGIN
                    SELECT DECODE (v_tran_sign,
                                   1, btr_debit_code,
                                   btr_credit_code)
                      INTO v_tran_pfx
                      FROM gin_business_transactions
                     WHERE btr_trans_code = v_tran_type;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                               'The transactions codes have not been defined for the '
                            || v_tran_type
                            || ' transaction ..');
                    WHEN TOO_MANY_ROWS
                    THEN
                        raise_error (
                               'More than one transactions codes have been defined for the '
                            || v_tran_type
                            || ' transaction ..');
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Unable to retrieve transaction code, ...');
                END;

                IF v_tran_pfx IS NULL
                THEN
                    -- may be the debit or credit transaction have not been define
                    raise_error (
                           'The transactions codes have not been defined for the '
                        || v_tran_type
                        || ' transaction ..');
                END IF;

                /*********************************************************************************/
                --- post refund transaction
                /**********************************************************************************/
                IF NVL (cur_part_trans_rec.refund_prem, 0) != 0
                THEN
                    BEGIN
                        SELECT v_tran_pfx || gin_dc_note_seq.NEXTVAL
                          INTO v_dc_no
                          FROM DUAL;

                        v_mtran_no := NULL;

                        SELECT TO_NUMBER (
                                      TO_CHAR (v_today, 'YYYY')
                                   || gin_mtran_no_seq.NEXTVAL)
                          INTO v_mtran_no
                          FROM DUAL;

                        IF v_mtran_no IS NULL
                        THEN
                            raise_error (
                                'Unable to generate gin_MTRAN_NO_SEQ.nextval sequence...');
                        END IF;

                        INSERT INTO gin_master_transactions (
                                        mtran_no,
                                        mtran_date,
                                        mtran_ref_no,
                                        mtran_other_ref,
                                        mtran_tran_type,
                                        mtran_dc,
                                        mtran_control_acc,
                                        mtran_client_type,
                                        mtran_client_code,
                                        mtran_amount,
                                        mtran_balance,
                                        mtran_pol_batch_no,
                                        mtran_scl_code,
                                        mtran_narrations,
                                        mtran_rei_code,
                                        mtran_client_polcy_no,
                                        mtran_pol_ren_endos_no,
                                        mtran_ggt_tran_no,
                                        mtran_acct_code,
                                        mtran_authorised,
                                        mtran_date_authorized,
                                        mtran_authorised_by,
                                        mtran_posting_date,
                                        mtran_net_amt,
                                        mtran_origin,
                                        mtran_btr_trans_code,
                                        mtran_cur_code,
                                        mtran_cur_symbol,
                                        mtran_cur_rate)
                                 VALUES (
                                     v_mtran_no,
                                     v_today,
                                     v_dc_no,
                                     NULL,
                                     v_tran_type,
                                     DECODE (v_tran_sign, 1, 'D', 'C'),
                                     v_client_acc,
                                     v_client_type,
                                     v_agnt_code,
                                       DECODE (v_tran_sign, 1, 1, -1)
                                     * ABS (cur_part_trans_rec.refund_prem),
                                       DECODE (v_tran_sign, 1, 1, -1)
                                     * ABS (cur_part_trans_rec.refund_prem),
                                     grp_risks_rec.ipu_pol_batch_no,
                                     cur_part_trans_rec.part_scl_code,
                                     DECODE (
                                         v_tran_sign,
                                         1, 'RI debit note for refund of premium due to grouped risks',
                                         'RI credit note for refund of premium due to grouped risks'),
                                     cur_part_trans_rec.part_rei_code,
                                     cur_part_trans_rec.part_pol_policy_no,
                                     grp_risks_rec.ipu_pol_ren_endos_no,
                                     v_tran_no,
                                     v_client_gl_acc,
                                     'Y',
                                     TRUNC (SYSDATE),
                                     v_user,
                                     TRUNC (SYSDATE),
                                       DECODE (v_tran_sign, 1, 1, -1)
                                     * ABS (cur_part_trans_rec.refund_prem),
                                     'U',
                                     v_tran_type,
                                     grp_risks_rec.pol_cur_code,
                                     grp_risks_rec.pol_cur_symbol,
                                     v_exch_rate);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to post Reinsurance refund premium debit note details, ...');
                    END;

                    --    message('doc now post rein loop.4.');pause;
                    FOR cur_trans_rec
                        IN cur_trans (cur_part_trans_rec.part_scl_code)
                    LOOP
                        IF cur_trans_rec.trnt_type = 'RPR'
                        THEN
                            IF NVL (v_refund_prem_ret, 0) != 0
                            THEN
                                BEGIN
                                    --post retained premium to deduct
                                    INSERT INTO gin_transaction_details (
                                                    tran_no,
                                                    tran_mtran_code,
                                                    tran_date,
                                                    tran_dc,
                                                    tran_trnt_code,
                                                    tran_amount,
                                                    tran_tran_acc,
                                                    tran_contra_acc,
                                                    tran_usrname,
                                                    tran_pol_batch_no,
                                                    tran_item_type,
                                                    tran_scl_code)
                                             VALUES (
                                                 TO_NUMBER (
                                                        TO_CHAR (v_today,
                                                                 'YYYY')
                                                     || gin_tran_no_seq.NEXTVAL),
                                                 v_mtran_no,
                                                 v_today,
                                                 DECODE (v_tran_sign,
                                                         1, 'D',
                                                         'C'),
                                                 cur_trans_rec.trnt_code,
                                                 v_refund_prem_ret,
                                                 NVL (
                                                     cur_trans_rec.trac_acc_no,
                                                     cur_trans_rec.trnt_gl_code),
                                                 NVL (
                                                     cur_trans_rec.trac_contra_acc,
                                                     cur_trans_rec.trnt_contra_gl_code),
                                                 v_user,
                                                 grp_risks_rec.ipu_pol_batch_no,
                                                 cur_trans_rec.trnt_type,
                                                 cur_part_trans_rec.part_scl_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to post Reinsurance refund retained premium details, ...');
                                END;
                            END IF;
                        ELSIF cur_trans_rec.trnt_type = 'RC'
                        THEN
                            ---cur_trans_rec.trac_trnt_code this concept changes to cur_trans_rec.trnt_type
                            IF NVL (cur_part_trans_rec.refund_com, 0) != 0
                            THEN
                                BEGIN
                                    INSERT INTO gin_transaction_details (
                                                    tran_no,
                                                    tran_mtran_code,
                                                    tran_date,
                                                    tran_dc,
                                                    tran_trnt_code,
                                                    tran_amount,
                                                    tran_tran_acc,
                                                    tran_contra_acc,
                                                    tran_usrname,
                                                    tran_pol_batch_no,
                                                    tran_item_type,
                                                    tran_scl_code)
                                             VALUES (
                                                 TO_NUMBER (
                                                        TO_CHAR (v_today,
                                                                 'YYYY')
                                                     || gin_tran_no_seq.NEXTVAL),
                                                 v_mtran_no,
                                                 v_today,
                                                 DECODE (v_tran_sign,
                                                         1, 'C',
                                                         'D'),
                                                 cur_trans_rec.trnt_code,
                                                 cur_part_trans_rec.refund_com,
                                                 NVL (
                                                     cur_trans_rec.trac_acc_no,
                                                     cur_trans_rec.trnt_gl_code),
                                                 NVL (
                                                     cur_trans_rec.trac_contra_acc,
                                                     cur_trans_rec.trnt_contra_gl_code),
                                                 v_user,
                                                 grp_risks_rec.ipu_pol_batch_no,
                                                 cur_trans_rec.trnt_type,
                                                 cur_part_trans_rec.part_scl_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_when_others (
                                            'Unable to post Reinsurance refund commission details, ...');
                                END;
                            END IF;
                        END IF;
                    END LOOP;
                END IF;

                --message('doc now post rein loop.5.');pause;
                /*************************************************************************/
                -- post new transaction
                /************************************************************************/
                IF NVL (cur_part_trans_rec.prem_pcur, 0) != 0
                THEN
                    BEGIN
                        SELECT v_tran_type || gin_dc_note_seq.NEXTVAL
                          INTO v_dc_no
                          FROM DUAL;

                        v_mtran_no := NULL;

                        SELECT TO_NUMBER (
                                      TO_CHAR (v_today, 'YYYY')
                                   || gin_mtran_no_seq.NEXTVAL)
                          INTO v_mtran_no
                          FROM DUAL;

                        IF v_mtran_no IS NULL
                        THEN
                            raise_when_others (
                                'Unable to generate gin_MTRAN_NO_SEQ.nextval sequence...');
                        END IF;

                        INSERT INTO gin_master_transactions (
                                        mtran_no,
                                        mtran_date,
                                        mtran_ref_no,
                                        mtran_other_ref,
                                        mtran_tran_type,
                                        mtran_dc,
                                        mtran_control_acc,
                                        mtran_client_type,
                                        mtran_client_code,
                                        mtran_amount,
                                        mtran_balance,
                                        mtran_pol_batch_no,
                                        mtran_scl_code,
                                        mtran_narrations,
                                        mtran_rei_code,
                                        mtran_client_polcy_no,
                                        mtran_pol_ren_endos_no,
                                        mtran_ggt_tran_no,
                                        mtran_acct_code,
                                        mtran_authorised,
                                        mtran_date_authorized,
                                        mtran_authorised_by,
                                        mtran_posting_date,
                                        mtran_net_amt,
                                        mtran_origin,
                                        mtran_btr_trans_code,
                                        mtran_cur_code,
                                        mtran_cur_symbol,
                                        mtran_cur_rate)
                                 VALUES (
                                     v_mtran_no,
                                     v_today,
                                     v_dc_no,
                                     NULL,
                                     v_tran_type,
                                     DECODE (v_tran_sign, 1, 'C', 'D'),
                                     v_client_acc,
                                     v_client_type,
                                     v_agnt_code,
                                       DECODE (v_tran_sign, 1, -1, 1)
                                     * ABS (cur_part_trans_rec.prem_pcur),
                                       DECODE (v_tran_sign, 1, -1, 1)
                                     * ABS (cur_part_trans_rec.prem_pcur),
                                     grp_risks_rec.ipu_pol_batch_no,
                                     cur_part_trans_rec.part_scl_code,
                                     DECODE (
                                         v_tran_sign,
                                         1, 'RI debit note for refund of premium due to grouped risks',
                                         'RI credit note for refund of premium due to grouped risks'),
                                     cur_part_trans_rec.part_rei_code,
                                     cur_part_trans_rec.part_pol_policy_no,
                                     grp_risks_rec.ipu_pol_ren_endos_no,
                                     v_tran_no,
                                     v_client_gl_acc,
                                     'Y',
                                     TRUNC (SYSDATE),
                                     v_user,
                                     TRUNC (SYSDATE),
                                       DECODE (v_tran_sign, 1, -1, 1)
                                     * ABS (cur_part_trans_rec.prem_pcur),
                                     'U',
                                     v_tran_type,
                                     grp_risks_rec.pol_cur_code,
                                     grp_risks_rec.pol_cur_symbol,
                                     v_exch_rate);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                'Unable to Reinsurance premium credit note details, ...');
                    END;

                    --            message('doc now post rein loop.6.');pause;
                    FOR cur_trans_rec
                        IN cur_trans (cur_part_trans_rec.part_scl_code)
                    LOOP
                        IF cur_trans_rec.trnt_type = 'RPR'
                        THEN
                            IF NVL (v_retained_prem, 0) != 0
                            THEN
                                BEGIN
                                    --post retained premium to deduct
                                    INSERT INTO gin_transaction_details (
                                                    tran_no,
                                                    tran_mtran_code,
                                                    tran_date,
                                                    tran_dc,
                                                    tran_trnt_code,
                                                    tran_amount,
                                                    tran_tran_acc,
                                                    tran_contra_acc,
                                                    tran_usrname,
                                                    tran_pol_batch_no,
                                                    tran_item_type,
                                                    tran_scl_code)
                                             VALUES (
                                                 TO_NUMBER (
                                                        TO_CHAR (v_today,
                                                                 'YYYY')
                                                     || gin_tran_no_seq.NEXTVAL),
                                                 v_mtran_no,
                                                 v_today,
                                                 DECODE (v_tran_sign,
                                                         1, 'D',
                                                         'C'),
                                                 cur_trans_rec.trnt_code,
                                                 v_retained_prem,
                                                 NVL (
                                                     cur_trans_rec.trac_acc_no,
                                                     cur_trans_rec.trnt_gl_code),
                                                 NVL (
                                                     cur_trans_rec.trac_contra_acc,
                                                     cur_trans_rec.trnt_contra_gl_code),
                                                 v_user,
                                                 grp_risks_rec.ipu_pol_batch_no,
                                                 cur_trans_rec.trnt_type,
                                                 cur_part_trans_rec.part_scl_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_when_others (
                                            'Unable to post Reinsurance retained premium details, ...');
                                END;
                            END IF;
                        ELSIF cur_trans_rec.trnt_type = 'RC'
                        THEN
                            ---cur_trans_rec.trac_trnt_code this concept changes to cur_trans_rec.trnt_type
                            IF NVL (cur_part_trans_rec.comm_pcur, 0) != 0
                            THEN
                                BEGIN
                                    INSERT INTO gin_transaction_details (
                                                    tran_no,
                                                    tran_mtran_code,
                                                    tran_date,
                                                    tran_dc,
                                                    tran_trnt_code,
                                                    tran_amount,
                                                    tran_tran_acc,
                                                    tran_contra_acc,
                                                    tran_usrname,
                                                    tran_pol_batch_no,
                                                    tran_item_type,
                                                    tran_scl_code)
                                             VALUES (
                                                 TO_NUMBER (
                                                        TO_CHAR (v_today,
                                                                 'YYYY')
                                                     || gin_tran_no_seq.NEXTVAL),
                                                 v_mtran_no,
                                                 v_today,
                                                 DECODE (v_tran_sign,
                                                         1, 'C',
                                                         'D'),
                                                 cur_trans_rec.trnt_code,
                                                 cur_part_trans_rec.comm_pcur,
                                                 NVL (
                                                     cur_trans_rec.trac_acc_no,
                                                     cur_trans_rec.trnt_gl_code),
                                                 NVL (
                                                     cur_trans_rec.trac_contra_acc,
                                                     cur_trans_rec.trnt_contra_gl_code),
                                                 v_user,
                                                 grp_risks_rec.ipu_pol_batch_no,
                                                 cur_trans_rec.trnt_type,
                                                 cur_part_trans_rec.part_scl_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_when_others (
                                            'Unable to post Reinsurance commission details, ...');
                                END;
                            END IF;
                        END IF;
                    END LOOP;                                  --cur_trans_rec
                END IF;

                BEGIN
                    SELECT COUNT ('x')
                      INTO v_cnt
                      FROM gin_prd_treaty_summaries
                     WHERE     prts_rei_code =
                               cur_part_trans_rec.part_rei_code
                           AND prts_fiscal_year =
                               TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                           AND prts_fiscal_month =
                               TO_NUMBER (TO_CHAR (SYSDATE, 'MM'))
                           AND prts_scl_code =
                               cur_part_trans_rec.part_scl_code;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_cnt := 0;
                END;

                IF v_cnt IS NOT NULL AND v_cnt > 0
                THEN
                    BEGIN
                        UPDATE gin_prd_treaty_summaries
                           SET prts_prem_tax =
                                     NVL (prts_prem_tax, 0)
                                   + NVL (cur_part_trans_rec.prem_tax_tcur,
                                          0),
                               prts_ceded_premium =
                                     NVL (prts_ceded_premium, 0)
                                   + NVL (cur_part_trans_rec.prem_tcur, 0),
                               prts_rein_prem_tax =
                                     NVL (prts_rein_prem_tax, 0)
                                   + NVL (
                                         cur_part_trans_rec.rein_prem_tax_tcur,
                                         0),
                               prts_rein_comm =
                                     NVL (prts_rein_comm, 0)
                                   + NVL (cur_part_trans_rec.comm_tcur, 0),
                               prts_reserve_retained =
                                     NVL (prts_reserve_retained, 0)
                                   + NVL (v_retained_prem, 0)
                         WHERE     prts_rei_code =
                                   cur_part_trans_rec.part_rei_code
                               AND prts_fiscal_year =
                                   TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                               AND prts_fiscal_month =
                                   TO_NUMBER (TO_CHAR (SYSDATE, 'MM'))
                               AND prts_scl_code =
                                   cur_part_trans_rec.part_scl_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                'Error :- Unable to update treaty summaries...');
                    END;
                ELSE
                    BEGIN
                        INSERT INTO gin_prd_treaty_summaries (
                                        prts_code,
                                        prts_rei_code,
                                        prts_trt_code,
                                        prts_ta_code,
                                        prts_uw_year,
                                        prts_fiscal_year,
                                        prts_fiscal_month,
                                        prts_scl_code,
                                        prts_prem_tax,
                                        prts_ceded_premium,
                                        prts_rein_prem_tax,
                                        prts_rein_comm,
                                        prts_reserve_retained,
                                        prts_trs_code,
                                        prts_trs_sht_desc,
                                        prts_as_code)
                                 VALUES (
                                        TO_CHAR (SYSDATE, 'YYYY')
                                     || gin_prts_code_seq.NEXTVAL,
                                     cur_part_trans_rec.part_rei_code,
                                     cur_part_trans_rec.part_trt_code,
                                     cur_part_trans_rec.part_ta_code,
                                     cur_part_trans_rec.part_uwyr,
                                     TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY')),
                                     TO_NUMBER (TO_CHAR (SYSDATE, 'MM')),
                                     cur_part_trans_rec.part_scl_code,
                                     cur_part_trans_rec.prem_tax_tcur,
                                     cur_part_trans_rec.prem_tcur,
                                     cur_part_trans_rec.rein_prem_tax_tcur,
                                     cur_part_trans_rec.comm_tcur,
                                     ROUND (v_retained_prem / v_exch_rate,
                                            v_rnd_bcur),
                                     cur_part_trans_rec.part_trs_code,
                                     cur_part_trans_rec.part_trs_sht_desc,
                                     cur_part_trans_rec.part_as_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                'Error :- Unable to insert treaty summaries details...');
                    END;
                END IF;

                BEGIN
                    UPDATE gin_participations
                       SET part_acc_posted = 'P'
                     WHERE     part_prrd_code = grp_risks_rec.prrd_code
                           AND part_agnt_agent_code =
                               cur_part_trans_rec.part_agnt_agent_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others (
                            'Unable to update RI participants posting status ...');
                END;
            END LOOP;                                     --cur_part_trans_rec
        END LOOP;                                             -- grp_risks_rec
    END;

    PROCEDURE post_facre_cession (v_tran_no     IN NUMBER,
                                  v_tran_type   IN VARCHAR2,
                                  v_user           VARCHAR2)
    IS
        --v_client_pol IN VARCHAR2,
        --v_ren_endos IN VARCHAR2,
        --v_uwyr      IN NUMBER) IS
        v_tran_pfx            VARCHAR2 (3);
        v_tran_sign           NUMBER;
        v_today               DATE := TRUNC (SYSDATE);
        v_client_acc          VARCHAR2 (20);
        v_client_gl_acc       VARCHAR2 (20);
        v_client_code         NUMBER;
        v_client_type         VARCHAR2 (3);
        v_dc_no               VARCHAR2 (15);
        v_tran_amount         NUMBER := 0;
        --v_user        VARCHAR2(30);--  := PKG_GLOBAL_VARS.GET_PVARCHAR2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        al_id                 NUMBER;
        v_tot_rein_prem_tax   NUMBER := 0;
        v_tot_prem_tax        NUMBER := 0;
        v_agnt_code           NUMBER;
        v_agnt_sht_desc       VARCHAR2 (15);
        v_retained_prem       NUMBER := 0;
        v_acc_pr              NUMBER;
        v_acc_sht_desc        VARCHAR2 (15);
        v_cnt                 NUMBER := 0;
        v_errnum              NUMBER;
        v_errmsg              VARCHAR2 (200);
        v_rp                  VARCHAR2 (1) := 'N';
        v_rc                  VARCHAR2 (1) := 'N';
        v_net_amt             NUMBER := 0;
        v_mtran_no            NUMBER;
        v_exch_rate           NUMBER;
        v_rnd                 NUMBER := 0;
        v_rnd_bcur            NUMBER := 0;
        v_level               VARCHAR2 (15);

        -- select the current accounting period
        CURSOR cur_accprd IS
            SELECT acpr_code, acpr_sht_desc
              FROM gin_acc_periods
             WHERE TRUNC (SYSDATE) BETWEEN TO_DATE (
                                                  TO_CHAR (acpr_wef,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY')
                                       AND TO_DATE (
                                                  TO_CHAR (acpr_wet,
                                                           'DD-MON')
                                               || '-'
                                               || TO_CHAR (SYSDATE, 'YYYY'),
                                               'DD-MON-YYYY');

        /*
        CURSOR grp_risks IS select
            prrd_code,ipu_pol_policy_no,ipu_pol_ren_endos_no,ipu_pol_batch_no,
            IPU_SEC_SCL_CODE
            FROM GIN_INSURED_PROPERTY_UNDS,GIN_POLICY_RISK_RI_DTLS
            WHERE ipu_code =prrd_ipu_code
            AND prrd_tran_no =v_tran_no;
        */
        CURSOR grp_risks IS
            SELECT prrd_code,
                   ipu_pol_policy_no,
                   ipu_pol_ren_endos_no,
                   ipu_pol_batch_no,
                   pol_pro_sht_desc,
                   pol_prp_code,
                   ipu_sec_scl_code,
                   pol_pro_code,
                   pol_cur_symbol,
                   pol_cur_code,
                   pol_policy_no,
                   pol_cur_rate
              FROM gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_policies
             WHERE     ipu_pol_batch_no = pol_batch_no
                   AND ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_tran_no;

        -- SELECT THE TREATY SETUP
        CURSOR cur_treaty_setup (v_rei_code IN NUMBER)
        IS
            SELECT *
              FROM gin_treaty_setups
             WHERE rei_code = v_rei_code;

        CURSOR cur_client_acc (v_agnt_cd IN NUMBER)
        IS
            SELECT agn_acc_no, agn_code, agn_sht_desc
              FROM tqc_agencies, tqc_agency_systems
             WHERE     agn_code = asys_agn_code
                   AND asys_sys_code = 37
                   AND agn_code = v_agnt_cd;

        CURSOR cur_trans (v_scl_code IN NUMBER, v_level VARCHAR2)
        IS
            SELECT trac_trnt_code,
                   trac_acc_no,
                   trac_contra_acc,
                   trnt_code,
                   trnt_type,
                   trnt_contra_gl_code,
                   trnt_gl_code
              FROM gin_class_transactions, gin_transaction_types
             WHERE     trac_trnt_code(+) = trnt_code
                   AND trac_scl_code(+) = v_scl_code
                   AND trnt_application_lvl = v_level
                   AND (trnt_type IN ('RP', 'RC')                    --,'RPR')
                                                  OR trnt_type LIKE ('WTHT%'));

        CURSOR cur_facre (v_prrd_code NUMBER)
        IS
            SELECT fc_agnt_agent_code,
                   fc_amount,
                   fc_agent_sht_desc,
                   fc_scl_code,
                   fc_comm_amt,
                   fc_prem_amt,
                   fc_pol_batch_no,
                   fc_ggt_tran_no,
                   fc_tran_type
              FROM gin_facre_cessions
             WHERE fc_prrd_code = v_prrd_code;

        CURSOR cur_part_trans (v_prrd_code NUMBER)
        IS
              SELECT NVL (SUM (NVL (part_refund_comm, 0)), 0)
                         comm,
                     NVL (SUM (NVL (part_refund_prem, 0)), 0)
                         prem,
                     NVL (SUM (NVL (part_rprem_tax_pcur, 0)), 0)
                         prem_tax,
                     (  NVL (SUM (NVL (part_prem_amt_pcur, 0)), 0)
                      - SUM (NVL (part_comm_amt_pcur, 0)))
                         total,
                     NVL (SUM (NVL (part_rprem_tax_pcur, 0)), 0)
                         pol_rein_prem_tax,
                     NVL (SUM (NVL (part_prem_tax_pcur, 0)), 0)
                         pol_prem_tax,
                     NVL (SUM (NVL (part_prem_tax_pcur, 0)), 0)
                         prem_tax_tcur,
                     NVL (SUM (NVL (part_comm_amt_pcur, 0)), 0)
                         comm_pcur,
                     NVL (SUM (NVL (part_prem_amt_pcur, 0)), 0)
                         prem_pcur,
                     part_rei_code,
                     part_ta_code,
                     part_as_code,
                     part_fiscal_year,
                     part_uwyr,
                     part_pol_cur_code,
                     part_scl_code,
                     part_trt_code,
                     part_trs_code,
                     part_trs_sht_desc,
                     part_prrd_code,
                     trs_trtg_code
                FROM gin_participations, gin_treaties
               WHERE part_trs_code = trs_code AND part_prrd_code = v_prrd_code
            GROUP BY part_rei_code,
                     part_trt_code,
                     part_trs_code,
                     part_trs_sht_desc,
                     part_ta_code,
                     part_as_code,
                     part_fiscal_year,
                     part_uwyr,
                     part_pol_cur_code,
                     part_scl_code,
                     part_ggt_tran_no,
                     part_prrd_code,
                     trs_trtg_code;
    BEGIN
        /*************note part using :parameter.EXCH_RATE_PARAM will have to changes and read per risk as they may have different currencies--dif policies***/
        v_client_code := NULL;
        v_client_type := NULL;
        v_client_acc := NULL;
        v_client_acc := NULL;

        --v_user  := PKG_GLOBAL_VARS.GET_PVARCHAR2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        FOR grp_risks_rec IN grp_risks
        LOOP
            v_exch_rate :=
                get_currexch_rate (grp_risks_rec.pol_cur_code,
                                   v_rnd,
                                   v_rnd_bcur);
            v_rp := 'N';
            v_rc := 'N';

            FOR cur_trans_rec
                IN cur_trans (grp_risks_rec.ipu_sec_scl_code, v_level)
            LOOP
                IF cur_trans_rec.trnt_type = 'RP'
                THEN
                    v_rp := 'Y';
                ELSIF cur_trans_rec.trnt_type = 'RC'
                THEN
                    v_rc := 'Y';
                END IF;
            END LOOP;

            IF NVL (v_rp, 'N') = 'N'
            THEN
                raise_error (
                    'Premium revenue item of type reinsurance premium have not been defined in the setup. cannot post facre preiums. Cannot authorise this transaction...');
            END IF;

            IF NVL (v_rc, 'N') = 'N'
            THEN
                raise_error (
                    'Commission revenue item of type reinsurance commission have not been defined in the setup. cannot post facre commission. Cannot authorise this transaction...');
            END IF;

            FOR cur_facre_rec IN cur_facre (grp_risks_rec.prrd_code)
            LOOP
                -- get client account
                OPEN cur_client_acc (cur_facre_rec.fc_agnt_agent_code);

                FETCH cur_client_acc
                    INTO v_client_gl_acc, v_agnt_code, v_agnt_sht_desc;

                v_client_acc := v_agnt_sht_desc;

                IF cur_client_acc%NOTFOUND
                THEN
                    raise_error (
                           v_agnt_sht_desc
                        || ' Client account code have not been defined...Please Check..');
                END IF;

                CLOSE cur_client_acc;

                v_tran_sign := SIGN (cur_facre_rec.fc_amount);
                v_client_type := 'R';

                BEGIN
                    SELECT DECODE (v_tran_sign,
                                   1, btr_debit_code,
                                   btr_credit_code)
                      INTO v_tran_pfx
                      FROM gin_business_transactions
                     WHERE btr_trans_code = v_tran_type;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                               'The transactions codes have not been defined for the '
                            || v_tran_type
                            || ' transaction ..');
                END;

                IF v_tran_pfx IS NULL
                THEN
                    raise_error (
                           'The transactions codes have not been defined for the '
                        || v_tran_type
                        || ' transaction ..');
                END IF;

                ---    cede facre
                v_net_amt := 0;
                v_net_amt :=
                      NVL (cur_facre_rec.fc_prem_amt, 0)
                    - NVL (cur_facre_rec.fc_comm_amt, 0);

                SELECT v_tran_pfx || gin_dc_note_seq.NEXTVAL
                  INTO v_dc_no
                  FROM DUAL;

                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || gin_mtran_no_seq.NEXTVAL)
                  INTO v_mtran_no
                  FROM DUAL;

                IF v_mtran_no IS NULL
                THEN
                    raise_when_others (
                        'Unable to generate gin_MTRAN_NO_SEQ.nextval sequence...');
                END IF;

                BEGIN
                    --post new premium
                    INSERT INTO gin_master_transactions (
                                    mtran_no,
                                    mtran_date,
                                    mtran_ref_no,
                                    mtran_other_ref,
                                    mtran_tran_type,
                                    mtran_dc,
                                    mtran_control_acc,
                                    mtran_client_type,
                                    mtran_client_code,
                                    mtran_amount,
                                    mtran_balance,
                                    mtran_pol_batch_no,
                                    mtran_scl_code,
                                    mtran_narrations,
                                    mtran_client_polcy_no,
                                    mtran_pol_ren_endos_no,
                                    mtran_ggt_tran_no,
                                    mtran_acct_code,
                                    mtran_pro_sht_desc,
                                    mtran_pro_code,
                                    mtran_authorised,
                                    mtran_date_authorized,
                                    mtran_authorised_by,
                                    mtran_posting_date,
                                    mtran_net_amt,
                                    mtran_prp_code,
                                    mtran_origin,
                                    mtran_btr_trans_code,
                                    mtran_cur_code,
                                    mtran_cur_symbol,
                                    mtran_cur_rate,
                                    mtran_commission)
                             VALUES (
                                 v_mtran_no,
                                 v_today,
                                 v_dc_no,
                                 NULL,
                                 v_tran_type,
                                 DECODE (v_tran_sign, 1, 'C', 'D'),
                                 v_client_acc,
                                 v_client_type,
                                 v_agnt_code,
                                 ROUND (
                                     DECODE (
                                         v_tran_sign,
                                         1, -ABS (cur_facre_rec.fc_prem_amt),
                                         ABS (cur_facre_rec.fc_prem_amt)),
                                     v_rnd),
                                 ROUND (
                                     DECODE (v_tran_sign,
                                             1, -ABS (v_net_amt),
                                             ABS (v_net_amt)),
                                     v_rnd),
                                 grp_risks_rec.ipu_pol_batch_no,
                                 NULL,
                                 DECODE (
                                     v_tran_sign,
                                     1, 'Facre Reinsurance premium credit note',
                                     'Facre Reinsurance premium debit note'),
                                 grp_risks_rec.ipu_pol_policy_no,
                                 grp_risks_rec.ipu_pol_ren_endos_no,
                                 v_tran_no,
                                 v_client_gl_acc,
                                 grp_risks_rec.pol_pro_sht_desc,
                                 grp_risks_rec.pol_pro_code,
                                 'Y',
                                 TRUNC (SYSDATE),
                                 v_user,
                                 TRUNC (SYSDATE),
                                 ROUND (
                                     DECODE (v_tran_sign,
                                             1, -ABS (v_net_amt),
                                             ABS (v_net_amt)),
                                     v_rnd),
                                 grp_risks_rec.pol_prp_code,
                                 'U',
                                 v_tran_type,
                                 grp_risks_rec.pol_cur_code,
                                 grp_risks_rec.pol_cur_symbol,
                                 grp_risks_rec.pol_cur_rate,
                                 NVL (cur_facre_rec.fc_comm_amt, 0));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others (
                            'Unable to post facre credit note, ...');
                END;

                FOR cur_trans_rec
                    IN cur_trans (grp_risks_rec.ipu_sec_scl_code, v_level)
                LOOP
                    IF cur_trans_rec.trnt_type = 'RC'
                    THEN
                        BEGIN
                            --post commission
                            INSERT INTO gin_transaction_details (
                                            tran_no,
                                            tran_mtran_code,
                                            tran_date,
                                            tran_dc,
                                            tran_trnt_code,
                                            tran_amount,
                                            tran_tran_acc,
                                            tran_contra_acc,
                                            tran_usrname,
                                            tran_pol_batch_no,
                                            tran_item_type,
                                            tran_scl_code)
                                     VALUES (
                                         TO_NUMBER (
                                                TO_CHAR (SYSDATE, 'YYYY')
                                             || gin_tran_no_seq.NEXTVAL),
                                         v_mtran_no,
                                         v_today,
                                         DECODE (v_tran_sign, 1, 'D', 'C'),
                                         cur_trans_rec.trnt_code,
                                         DECODE (
                                             v_tran_sign,
                                             1, ABS (
                                                    cur_facre_rec.fc_comm_amt),
                                             -ABS (cur_facre_rec.fc_comm_amt)),
                                         cur_trans_rec.trnt_gl_code,
                                         cur_trans_rec.trnt_contra_gl_code,
                                         v_user,
                                         grp_risks_rec.ipu_pol_batch_no,
                                         cur_trans_rec.trnt_type,
                                         cur_facre_rec.fc_scl_code);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to post facre commission details, ...');
                        END;
                    ELSIF cur_trans_rec.trnt_type = 'RP'
                    THEN
                        BEGIN
                            --post premium
                            INSERT INTO gin_transaction_details (
                                            tran_no,
                                            tran_mtran_code,
                                            tran_date,
                                            tran_dc,
                                            tran_trnt_code,
                                            tran_amount,
                                            tran_tran_acc,
                                            tran_contra_acc,
                                            tran_usrname,
                                            tran_pol_batch_no,
                                            tran_item_type,
                                            tran_scl_code)
                                     VALUES (
                                         TO_NUMBER (
                                                TO_CHAR (SYSDATE, 'YYYY')
                                             || gin_tran_no_seq.NEXTVAL),
                                         v_mtran_no,
                                         v_today,
                                         DECODE (v_tran_sign, 1, 'D', 'C'),
                                         cur_trans_rec.trnt_code,
                                         DECODE (
                                             v_tran_sign,
                                             1, -ABS (
                                                     cur_facre_rec.fc_prem_amt),
                                             ABS (cur_facre_rec.fc_prem_amt)),
                                         cur_trans_rec.trnt_gl_code,
                                         cur_trans_rec.trnt_contra_gl_code,
                                         v_user,
                                         grp_risks_rec.ipu_pol_batch_no,
                                         cur_trans_rec.trnt_type,
                                         cur_facre_rec.fc_scl_code);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to post facre premium details, ...');
                        END;
                    END IF;
                END LOOP;
            END LOOP;
        END LOOP;
    END;



    PROCEDURE grp_update_register (v_pol_batch_no      NUMBER,
                                   v_tran_no        IN NUMBER,
                                   v_tran_dt           DATE)
    IS
        v_tran_type                VARCHAR2 (5);
        v_tran_sign                NUMBER := 0;
        v_facre_com                NUMBER := 0;
        v_facre_ref_com            NUMBER := 0;
        v_facre_prem               NUMBER := 0;
        v_facre_si                 NUMBER := 0;
        v_facre_ref_prem           NUMBER := 0;
        v_errmsg                   VARCHAR2 (200);
        v_pr_code                  NUMBER;
        v_prem_type                VARCHAR2 (20);
        v_rskrg_code               NUMBER;
        v_comp_rate                NUMBER := 0;
        v_ri_premium               NUMBER := 0;
        v_facre_com_rate           NUMBER := 0;
        v_facre_ref_com_rate       NUMBER := 0;
        v_facre_prem_rate          NUMBER := 0;
        v_facre_ref_prem_rate      NUMBER := 0;
        v_mand_rate                NUMBER := 0;
        v_mand_prem                NUMBER := 0;
        v_mand_si                  NUMBER := 0;
        v_mand_pct                 NUMBER := 0;
        v_mand_com                 NUMBER := 0;
        v_mand_eq_prem             NUMBER := 0;
        v_mand_noneq_prem          NUMBER := 0;
        v_mand_eq_com              NUMBER := 0;
        v_mand_noneq_com           NUMBER := 0;
        v_qs_rate                  NUMBER := 0;
        v_qs_com                   NUMBER := 0;
        v_qs_prem                  NUMBER := 0;
        v_qs_si                    NUMBER := 0;
        v_qs_pct                   NUMBER := 0;
        v_qs_eq_prem               NUMBER := 0;
        v_qs_noneq_prem            NUMBER := 0;
        v_qs_eq_com                NUMBER := 0;
        v_qs_noneq_com             NUMBER := 0;
        v_fstsup_rate              NUMBER := 0;
        v_fstsup_com               NUMBER := 0;
        v_fstsup_prem              NUMBER := 0;
        v_fstsup_si                NUMBER := 0;
        v_fstsup_pct               NUMBER := 0;
        v_fstsup_eq_prem           NUMBER := 0;
        v_fstsup_noneq_prem        NUMBER := 0;
        v_fstsup_eq_com            NUMBER := 0;
        v_fstsup_noneq_com         NUMBER := 0;
        v_secsup_prem              NUMBER := 0;
        v_secsup_si                NUMBER := 0;
        v_secsup_pct               NUMBER := 0;
        v_secsup_rate              NUMBER := 0;
        v_secsup_com               NUMBER := 0;
        v_secsup_eq_prem           NUMBER := 0;
        v_secsup_noneq_prem        NUMBER := 0;
        v_secsup_eq_com            NUMBER := 0;
        v_secsup_noneq_com         NUMBER := 0;
        v_facre_eq_prem            NUMBER := 0;
        v_facre_noneq_prem         NUMBER := 0;
        v_facre_eq_com             NUMBER := 0;
        v_facre_noneq_com          NUMBER := 0;
        v_ob_facre_com_rate        NUMBER;
        v_ob_facre_ref_com_rate    NUMBER;
        v_ob_facre_com             NUMBER;
        v_ob_facre_ref_com         NUMBER;
        v_ob_facre_prem            NUMBER;
        v_ob_facre_si              NUMBER;
        v_ob_facre_ref_prem        NUMBER;
        v_ob_facre_prem_rate       NUMBER;
        v_ob_facre_ref_prem_rate   NUMBER;
        v_ob_facre_eq_prem         NUMBER := 0;
        v_ob_facre_noneq_prem      NUMBER := 0;
        v_pool_prem                NUMBER;
        v_pool_comm                NUMBER;
        v_pool_vat                 NUMBER;
        v_pool_si                  NUMBER;
        v_pool_rate                NUMBER;
        v_pool_ref_prem            NUMBER;
        v_pool_ref_comm            NUMBER;
        v_exhange_rate             NUMBER;
        v_rnd                      NUMBER := 0;
        v_rnd_bcur                 NUMBER;
        v_net_rate                 NUMBER;
        v_rsk_net_prem             NUMBER;
        v_pol_net_prem             NUMBER;
        v_eq_prem                  NUMBER;
        v_non_eq_prem              NUMBER;
        v_com_ret                  NUMBER;
        v_gross_si                 NUMBER;
        v_net_si                   NUMBER;
        v_gross_prem               NUMBER;
        v_tl                       NUMBER;
        v_phfund                   NUMBER;
        v_sd                       NUMBER;
        v_duties                   NUMBER;
        v_facre_diff_amt           NUMBER := 0;

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;

        CURSOR cur_all_risks IS
            SELECT prrd_code,
                   ipu_wef,
                   ipu_wet,
                   ipu_eff_wet,
                   ipu_eff_wef,
                   ipu_code,
                   ipu_sec_scl_code,
                   ipu_id,
                   prrd_comp_retention,
                   ipu_comm_endos_diff_amt,
                   ipu_quz_code,
                   ipu_quz_sht_desc,
                   ipu_prem_tax,
                   ipu_property_id,
                   ipu_status,
                   ipu_current_prrd_code,
                   ipu_endos_diff_amt,
                   ipu_si_diff,
                   prrd_net_prem,
                   prrd_ri_prem,
                   ipu_reinsure_amt,
                   ipu_value,
                   ipu_covt_code,
                   ipu_itl
              FROM gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_policies
             WHERE     ipu_code = prrd_ipu_code
                   AND ipu_pol_batch_no = pol_batch_no
                   AND pol_batch_no = v_pol_batch_no
                   AND pol_loaded != 'Y'
                   AND prrd_tran_no = v_tran_no;

        CURSOR cur_rein (v_ipu_code NUMBER, v_trans_no NUMBER) ---(v_prrd_code NUMBER)
        IS
              SELECT ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)),
                         v_rnd)    mand_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_earthqke_prem, 0)),
                                 0)),
                         v_rnd)    mand_eq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_net_less_eq_prem, 0)),
                                 0)),
                         v_rnd)    mand_noneq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_earthqke_comm, 0)),
                                 0)),
                         v_rnd)    mand_eq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_net_less_eq_comm, 0)),
                                 0)),
                         v_rnd)    mand_noneq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_si_pcur, 0)),
                                 0)),
                         v_rnd)    mand_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_prem, 0)),
                                 0)),
                         v_rnd)    mand_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)),
                         v_rnd)    mand_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_com, 0)),
                                 0)),
                         v_rnd)    mand_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)        mand_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1001, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)        mand_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)),
                         v_rnd)    qs_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_earthqke_prem, 0)),
                                 0)),
                         v_rnd)    qs_eq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_net_less_eq_prem, 0)),
                                 0)),
                         v_rnd)    qs_noneq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_earthqke_comm, 0)),
                                 0)),
                         v_rnd)    qs_eq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_net_less_eq_comm, 0)),
                                 0)),
                         v_rnd)    qs_noneq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_si_pcur, 0)),
                                 0)),
                         v_rnd)    qs_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)),
                         v_rnd)    qs_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)        qs_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_prem, 0)),
                                 0)),
                         v_rnd)    qs_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_com, 0)),
                                 0)),
                         v_rnd)    qs_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1003, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)        qs_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)),
                         v_rnd)    fstsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_earthqke_prem, 0)),
                                 0)),
                         v_rnd)    fstsup_eq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                                 0)),
                         v_rnd)    fstsup_noneq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_earthqke_comm, 0)),
                                 0)),
                         v_rnd)    fstsup_eq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                                 0)),
                         v_rnd)    fstsup_noneq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_si_pcur, 0)),
                                 0)),
                         v_rnd)    fstsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)),
                         v_rnd)    fstsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)        fstsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_prem, 0)),
                                 0)),
                         v_rnd)    fstsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_com, 0)),
                                 0)),
                         v_rnd)    fstsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)        fstsup_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)),
                         v_rnd)    secsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_earthqke_prem, 0)),
                                 0)),
                         v_rnd)    secsup_eq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                                 0)),
                         v_rnd)    secsup_noneq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_earthqke_comm, 0)),
                                 0)),
                         v_rnd)    secsup_eq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                                 0)),
                         v_rnd)    secsup_noneq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_si_pcur, 0)),
                                 0)),
                         v_rnd)    secsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)),
                         v_rnd)    secsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)        secsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_prem, 0)),
                                 0)),
                         v_rnd)    secsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_com, 0)),
                                 0)),
                         v_rnd)    secsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)        secsup_ref_pct
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ipu_code = v_ipu_code
                     AND ptotr_ggt_tran_no = v_trans_no
            --                     AND ptotr_prrd_code = v_prrd_code
            GROUP BY ptotr_ipu_code;

        CURSOR cur_pol_rein (v_trans_no NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_si_pcur, 0)),
                             0))    mand_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))    mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))    mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_si_pcur, 0)),
                             0))    qs_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))    qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))    qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_si_pcur, 0)),
                             0))    fstsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))    fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))    fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_si_pcur, 0)),
                             0))    secsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))    secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))    secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    secsup_noneq_com
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ggt_tran_no = v_trans_no
            GROUP BY ptotr_ggt_tran_no;

        CURSOR cur_rsk_rein_dtls (v_ipu_code NUMBER, v_trans_no NUMBER) --(v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_policy_rein_risk_details, gin_treaties
             WHERE     ptotr_trs_code = trs_code
                   AND ptotr_ipu_code = v_ipu_code
                   AND ptotr_ggt_tran_no = v_trans_no;

        --                   AND ptotr_prrd_code = v_prrd_code;

        CURSOR cur_rsk_rein_part_dtls (v_ptotr_code NUMBER)
        IS
            SELECT *
              FROM gin_participations
             WHERE part_ptotr_code = v_ptotr_code;

        CURSOR cur_pol_facre IS
            SELECT SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_comm_amt, 0)),
                           0))    facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_amt, 0)),
                           0))    facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_amount, 0)),
                           0))    facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_prem, 0)),
                           0))    facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))    facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_comm, 0)),
                           0))    facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))    facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_comm_amt, 0)),
                           0))    ob_facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_prem_amt, 0)),
                           0))    ob_facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_amount, 0)),
                           0))    ob_facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))    ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))    ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))    ob_facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))    ob_facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_diff_amt, 0)),
                           0))    fc_prem_diff_amt
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_tran_no;

        CURSOR cur_facre                              --- (v_prrd_code NUMBER)
                         IS
              SELECT SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_amt, 0)),
                             0))    facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_earthqke_comm, 0)),
                             0))    facre_eq_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))    facre_noneq_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prem_amt, 0)),
                             0))    facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_earthqke_prem, 0)),
                             0))    facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))    facre_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_amount, 0)),
                             0))    facre_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_rate, 0)),
                             0))    facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_comm, 0)),
                             0))    facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_comm_rate, 0)),
                             0))    facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_rate, 0)),
                             0))    facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_prem, 0)),
                             0))    facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_rate, 0)),
                             0))    facre_ref_prem_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_amt, 0)),
                             0))    ob_facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prem_amt, 0)),
                             0))    ob_facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_amount, 0)),
                             0))    ob_facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))    ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))    ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))    ob_facre_eq_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))    ob_facre_noneq_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_rate, 0)),
                             0))    ob_facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_comm, 0)),
                             0))    ob_facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_comm_rate, 0)),
                             0))    ob_facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_rate, 0)),
                             0))    ob_facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_prem, 0)),
                             0))    ob_facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_rate, 0)),
                             0))    ob_facre_ref_prem_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prem_diff_amt, 0)),
                             0))    fc_prem_diff_amt
                FROM gin_facre_cessions
               WHERE fc_ggt_tran_no = v_tran_no ----fc_prrd_code = v_prrd_code
            GROUP BY fc_prrd_code;

        CURSOR cur_risk_facre_dtls (v_ipu_code NUMBER) --- (v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_tran_no AND fc_ipu_code = v_ipu_code;

        --             WHERE fc_prrd_code = v_prrd_code;

        CURSOR cur_pol_pool_trans IS
            SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                   SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                   SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                   SUM (NVL (prprd_pool_si, 0))                pool_si
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_tran_no
                   AND prprd_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_pl_dtls (v_ipu_code NUMBER)   --- (v_prrd_code NUMBER)
        IS
              SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                     SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                     SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                     SUM (NVL (prprd_pool_si, 0))                pool_si,
                     SUM (NVL (prprd_rein_pool_rate, 0))         pool_rate
                FROM gin_pol_rein_pool_risk_details
               WHERE     prprd_ggt_tran_no = v_tran_no
                     AND prprd_pol_batch_no = v_pol_batch_no
                     AND prprd_ipu_code = v_ipu_code
            --                   WHERE prprd_prrd_code = v_prrd_code
            GROUP BY prprd_prrd_code;

        CURSOR cur_risk_pool_dtls (v_ipu_code NUMBER)  ---(v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_tran_no
                   AND prprd_pol_batch_no = v_pol_batch_no
                   AND prprd_ipu_code = v_ipu_code;

        --             WHERE prprd_prrd_code = v_prrd_code;

        CURSOR cur_policy_own_ret (v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   ROUND (
                       SUM (
                             NVL (prrd_net_prem, 0)
                           * NVL (prrd_com_retention_rate, 0)
                           / 100),
                       v_rnd)
                       comp_gross_ret,
                   SUM (prrd_net_prem)
                       comp_net_ret,
                   --                ROUND (SUM (DECODE(NVL(ipu_overrideride_ret_type,'S'),'P',prrd_net_prem,(NVL (prrd_ri_prem, 0) * NVL (prrd_comp_net_rate, 0) / 100))),
                   --                       v_rnd
                   --                      ) comp_net_ret,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_si,
                   SUM (NVL (ipu_reinsure_amt, 0))
                       comp_gross_si,
                   SUM (NVL (prrd_ri_prem, 0))
                       comp_gross_prem
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_own_ret (v_ipucode NUMBER, v_trans_no NUMBER) --- (v_prrd_code NUMBER, v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   SUM (
                         NVL (prrd_ri_prem, 0)
                       * NVL (prrd_com_retention_rate, 0)
                       / 100)
                       comp_gross_ret,
                   SUM (NVL (prrd_com_retention_rate, 0))
                       comp_gross_rate,
                   SUM (prrd_net_prem)
                       comp_net_ret,
                   --                 (SUM (DECODE(NVL(ipu_overrideride_ret_type,'S'),'P',prrd_net_prem,(NVL (prrd_ri_prem, 0) * NVL (prrd_comp_net_rate, 0) / 100)))
                   --                      ) comp_net_ret,
                   SUM (NVL (prrd_comp_net_rate, 0))
                       comp_net_rate,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_si,
                   SUM (NVL (ipu_reinsure_amt, 0))
                       comp_gross_si,
                   SUM (NVL (prrd_ri_prem, 0))
                       comp_gross_prem
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND ipu_code = v_ipucode     ---AND prrd_code = v_prrd_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        v_ob_facre_eq_com          NUMBER;
        v_ob_facre_noneq_com       NUMBER;
    BEGIN
        FOR p IN cur_pol
        LOOP
            --         v_exhange_rate := p.pol_cur_rate;

            v_exhange_rate :=
                get_currexch_rate (p.pol_cur_code, v_rnd, v_rnd_bcur);

            v_prem_type := NULL;
            v_prem_type := p.pol_policy_status;
            v_tran_sign := SIGN (p.pol_tot_endos_diff_amt);

            BEGIN
                v_gross_prem := 0;
                v_comp_rate := 0;
                v_ri_premium := 0;
                v_facre_com_rate := 0;
                v_facre_prem_rate := 0;
                v_facre_com := 0;
                v_facre_ref_com := 0;
                v_facre_prem := 0;
                v_facre_si := 0;
                v_facre_si := 0;
                v_facre_ref_prem := 0;
                v_facre_com_rate := 0;
                v_facre_ref_com_rate := 0;
                v_facre_ref_prem_rate := 0;
                v_ob_facre_com_rate := 0;
                v_ob_facre_ref_com_rate := 0;
                v_ob_facre_com := 0;
                v_ob_facre_ref_com := 0;
                v_ob_facre_prem := 0;
                v_ob_facre_si := 0;
                v_ob_facre_si := 0;
                v_ob_facre_ref_prem := 0;
                v_ob_facre_prem_rate := 0;
                v_ob_facre_ref_prem_rate := 0;
                v_pool_prem := 0;
                v_pool_comm := 0;
                v_pool_vat := 0;
                v_pool_si := 0;
                v_pool_rate := 0;
                v_pool_ref_prem := 0;
                v_pool_ref_comm := 0;
                v_gross_si := 0;
                v_net_si := 0;
                v_ob_facre_eq_com := 0;
                v_ob_facre_noneq_com := 0;

                FOR cur_pol_rein_rec IN cur_pol_rein (v_tran_no)
                LOOP
                    v_mand_prem := cur_pol_rein_rec.mand_prem;
                    v_mand_si := cur_pol_rein_rec.mand_si;
                    v_mand_eq_prem :=
                        v_tran_sign * cur_pol_rein_rec.mand_eq_prem;
                    v_mand_noneq_prem :=
                        v_tran_sign * cur_pol_rein_rec.mand_noneq_prem;
                    v_mand_com := cur_pol_rein_rec.mand_com;
                    v_mand_eq_com := cur_pol_rein_rec.mand_eq_com;
                    v_mand_noneq_com := cur_pol_rein_rec.mand_noneq_com;
                    v_qs_prem := cur_pol_rein_rec.qs_prem;
                    v_qs_si := cur_pol_rein_rec.qs_si;
                    v_qs_eq_prem := v_tran_sign * cur_pol_rein_rec.qs_eq_prem;
                    v_qs_noneq_prem :=
                        v_tran_sign * cur_pol_rein_rec.qs_noneq_prem;
                    v_qs_com := cur_pol_rein_rec.qs_com;
                    v_qs_eq_com := cur_pol_rein_rec.qs_eq_com;
                    v_qs_noneq_com := cur_pol_rein_rec.qs_noneq_com;
                    v_fstsup_prem := cur_pol_rein_rec.fstsup_prem;
                    v_fstsup_si := cur_pol_rein_rec.fstsup_si;
                    v_fstsup_eq_prem :=
                        v_tran_sign * cur_pol_rein_rec.fstsup_eq_prem;
                    v_fstsup_noneq_prem :=
                        v_tran_sign * cur_pol_rein_rec.fstsup_noneq_prem;
                    v_fstsup_com := cur_pol_rein_rec.fstsup_com;
                    v_fstsup_eq_com := cur_pol_rein_rec.fstsup_eq_com;
                    v_fstsup_noneq_com := cur_pol_rein_rec.fstsup_noneq_com;
                    v_secsup_prem := cur_pol_rein_rec.secsup_prem;
                    v_secsup_si := cur_pol_rein_rec.secsup_si;
                    v_secsup_eq_prem :=
                        v_tran_sign * cur_pol_rein_rec.secsup_eq_prem;
                    v_secsup_noneq_prem :=
                        v_tran_sign * cur_pol_rein_rec.secsup_noneq_prem;
                    v_secsup_com := cur_pol_rein_rec.secsup_com;
                    v_secsup_eq_com := cur_pol_rein_rec.secsup_eq_com;
                    v_secsup_noneq_com := cur_pol_rein_rec.secsup_noneq_com;
                END LOOP;                                  ---cur_pol_rein_rec

                ---facre sessions
                FOR cur_facre_rec IN cur_pol_facre
                LOOP
                    v_facre_prem :=
                          NVL (v_facre_prem, 0)
                        + NVL (cur_facre_rec.facre_prem, 0);
                    v_facre_si :=
                        NVL (v_facre_si, 0) + NVL (cur_facre_rec.facre_si, 0);
                    v_facre_eq_prem :=
                          NVL (v_facre_eq_prem, 0)
                        + NVL (cur_facre_rec.facre_eq_prem, 0);
                    v_facre_noneq_prem :=
                          NVL (v_facre_noneq_prem, 0)
                        + NVL (cur_facre_rec.facre_noneq_prem, 0);
                    v_facre_com :=
                          NVL (v_facre_com, 0)
                        + NVL (cur_facre_rec.facre_com, 0);
                    v_ob_facre_prem :=
                          NVL (v_ob_facre_prem, 0)
                        + NVL (cur_facre_rec.ob_facre_prem, 0);
                    v_ob_facre_si :=
                          NVL (v_ob_facre_si, 0)
                        + NVL (cur_facre_rec.ob_facre_si, 0);
                    v_ob_facre_eq_prem :=
                          NVL (v_ob_facre_eq_prem, 0)
                        + NVL (cur_facre_rec.ob_facre_eq_prem, 0);
                    v_ob_facre_noneq_prem :=
                          NVL (v_ob_facre_noneq_prem, 0)
                        + NVL (cur_facre_rec.ob_facre_noneq_prem, 0);
                    v_ob_facre_com :=
                          NVL (v_ob_facre_com, 0)
                        + NVL (cur_facre_rec.ob_facre_com, 0);
                    v_facre_diff_amt :=
                          NVL (v_facre_diff_amt, 0)
                        + NVL (cur_facre_rec.fc_prem_diff_amt, 0);
                END LOOP;

                v_facre_eq_prem := v_tran_sign * v_facre_eq_prem;
                v_facre_noneq_prem := v_tran_sign * v_facre_noneq_prem;
                v_ob_facre_eq_prem := v_tran_sign * v_ob_facre_eq_prem;
                v_ob_facre_noneq_prem := v_tran_sign * v_ob_facre_noneq_prem;

                -- pool at policy level
                FOR cur_pol_pool IN cur_pol_pool_trans
                LOOP
                    v_pool_prem := cur_pol_pool.pool_prem;
                    v_pool_comm := cur_pol_pool.pool_comm;
                    v_pool_vat := cur_pol_pool.pool_vat;
                    v_pool_si := cur_pol_pool.pool_si;
                END LOOP;

                FOR cur_policy_own_ret_rec IN cur_policy_own_ret (v_tran_no)
                LOOP
                    v_com_ret := cur_policy_own_ret_rec.comp_gross_ret;
                    v_pol_net_prem :=
                          cur_policy_own_ret_rec.comp_net_ret
                        - NVL (v_pool_prem, 0)
                        + NVL (v_facre_diff_amt, 0);
                    v_eq_prem := cur_policy_own_ret_rec.comp_eq_prem;
                    v_non_eq_prem :=
                          cur_policy_own_ret_rec.comp_non_eq_prem
                        - NVL (v_pool_prem, 0);
                    v_gross_si := cur_policy_own_ret_rec.comp_gross_si;
                    v_net_si := cur_policy_own_ret_rec.comp_net_si;
                    v_gross_prem := cur_policy_own_ret_rec.comp_gross_prem;
                END LOOP;

                v_eq_prem := v_tran_sign * v_eq_prem;
                v_non_eq_prem := v_tran_sign * v_non_eq_prem;

                --                raise_error('GIS_RI_PROCEDURES::LN 44589::v_eq_prem = '||v_eq_prem
                --                            ||'& v_non_eq_prem = '||v_non_eq_prem);
                BEGIN
                    SELECT SUM (
                               DECODE (UPPER (trnt_code),
                                       'TL', NVL (ptx_amount, 0),
                                       0))                      tl,
                             SUM (
                                 DECODE (UPPER (trnt_code),
                                         'PHFUND', NVL (ptx_amount, 0),
                                         0))
                           + SUM (
                                 DECODE (UPPER (trnt_code),
                                         'COPHFUND', NVL (ptx_amount, 0),
                                         0))                    phfund,
                           SUM (
                               DECODE (UPPER (trnt_code),
                                       'SD', NVL (ptx_amount, 0),
                                       'MPSD', NVL (ptx_amount, 0),
                                       0))                      sd,
                           SUM (
                               DECODE (UPPER (trnt_code),
                                       'TL', 0,
                                       'SD', 0,
                                       'PHFUND', 0,
                                       'COPHFUND', 0,
                                       'MPSD', 0,
                                       NVL (ptx_amount, 0)))    other_duties
                      INTO v_tl,
                           v_phfund,
                           v_sd,
                           v_duties
                      FROM gin_policy_taxes, gin_transaction_types
                     WHERE     ptx_trac_trnt_code = trnt_code
                           AND ptx_pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        NULL;
                        v_duties := 0;
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR, UNABLE TO RETRIEVE POLICY TAXES..');
                END;

                v_duties := NVL (v_duties, 0) + NVL (v_phfund, 0);

                ---
                BEGIN
                    v_pr_code := NULL;

                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_pr_code_seq.NEXTVAL)
                      INTO v_pr_code
                      FROM DUAL;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. ERR AT 5...');
                END;

                BEGIN
                    INSERT INTO gin_policy_register (pr_code,
                                                     pr_transaction_date,
                                                     pr_pol_policy_no,
                                                     pr_pol_ren_endos_no,
                                                     pr_pol_batch_no,
                                                     pr_agnt_agent_code,
                                                     pr_agnt_sht_desc,
                                                     pr_wef_dt,
                                                     pr_wet_dt,
                                                     pr_cur_code,
                                                     pr_brn_code,
                                                     pr_cur_symbol,
                                                     pr_cur_rate,
                                                     pr_brn_sht_desc,
                                                     pr_inception_uwyr,
                                                     pr_pro_code,
                                                     pr_prev_batch_no,
                                                     pr_prem_type,
                                                     pr_mand_prem,
                                                     pr_mand_com,
                                                     pr_quota_prem,
                                                     pr_quota_com,
                                                     pr_fstsup_prem,
                                                     pr_fstsup_com,
                                                     pr_secsup_prem,
                                                     pr_secsup_com,
                                                     pr_facre_prem,
                                                     pr_facre_com,
                                                     pr_comp_net_prem,
                                                     pr_comp_net_com,
                                                     pr_mand_eq_prem,
                                                     pr_mand_noneq_prem,
                                                     pr_fstsup_eq_prem,
                                                     pr_fstsup_noneq_prem,
                                                     pr_secsup_eq_prem,
                                                     pr_secsup_noneq_prem,
                                                     pr_quota_eq_prem,
                                                     pr_quota_noneq_prem,
                                                     pr_facre_eq_prem,
                                                     pr_facre_noneq_prem,
                                                     pr_earthquake_prem,
                                                     pr_ri_net_less_eq_prem,
                                                     pr_mand_eq_com,
                                                     pr_mand_noneq_com,
                                                     pr_quota_eq_com,
                                                     pr_quota_noneq_com,
                                                     pr_fstsup_eq_com,
                                                     pr_fstsup_noneq_com,
                                                     pr_secsup_eq_com,
                                                     pr_secsup_noneq_com,
                                                     pr_facre_eq_com,
                                                     pr_facre_noneq_com,
                                                     pr_si_diff,
                                                     pr_endos_diff_amt,
                                                     pr_comm_amt,
                                                     pr_comm_endos_diff_amt,
                                                     pr_uw_year,
                                                     pr_tran_type,
                                                     pr_client_policy_number,
                                                     pr_prp_code,
                                                     pr_current_status,
                                                     pr_uwyr_length,
                                                     pr_policy_cover_to,
                                                     pr_policy_cover_from,
                                                     pr_ggt_trans_no,
                                                     pr_facre_ob_prem,
                                                     pr_facre_ob_com,
                                                     pr_pool_com,
                                                     pr_pool_prem,
                                                     pr_pool_si,
                                                     pr_pool_vat,
                                                     --pr_pool_rate,
                                                     pr_coinsurance,
                                                     pr_mand_si,
                                                     pr_quota_si,
                                                     pr_fstsup_si,
                                                     pr_secsup_si,
                                                     pr_facre_si,
                                                     pr_facre_ob_si,
                                                     pr_net_si,
                                                     pr_gross_si,
                                                     pr_pro_sht_desc,
                                                     pr_policy_type,
                                                     pr_stamp_duty,
                                                     pr_tl,
                                                     pr_other_duties,
                                                     pr_wtht,
                                                     pr_prem_tax,
                                                     pr_phfund)
                             VALUES (
                                 v_pr_code,
                                 TRUNC (v_tran_dt),
                                 p.pol_policy_no,
                                 p.pol_ren_endos_no,
                                 p.pol_batch_no,
                                 p.pol_agnt_agent_code,
                                 p.pol_agnt_sht_desc,
                                 p.pol_wef_dt,
                                 p.pol_wet_dt,
                                 p.pol_cur_code,
                                 p.pol_brn_code,
                                 p.pol_cur_symbol,
                                 p.pol_cur_rate,
                                 p.pol_brn_sht_desc,
                                 p.pol_inception_uwyr,
                                 p.pol_pro_code,
                                 p.pol_prev_batch_no,
                                 v_prem_type,
                                 v_mand_prem,
                                 v_mand_com,
                                 v_qs_prem,
                                 v_qs_com,
                                 v_fstsup_prem,
                                 v_fstsup_com,
                                 v_secsup_prem,
                                 v_secsup_com,
                                 v_facre_prem,
                                 v_facre_com,
                                 v_pol_net_prem,
                                 v_com_ret,
                                 v_mand_eq_prem,
                                 v_mand_noneq_prem,
                                 v_fstsup_eq_prem,
                                 v_fstsup_noneq_prem,
                                 v_secsup_eq_prem,
                                 v_secsup_noneq_prem,
                                 v_qs_eq_prem,
                                 v_qs_noneq_prem,
                                 v_facre_eq_prem,
                                 v_facre_noneq_prem,
                                 v_eq_prem,
                                 v_non_eq_prem,
                                 v_mand_eq_com,
                                 v_mand_noneq_com,
                                 v_qs_eq_com,
                                 v_qs_noneq_com,
                                 v_fstsup_eq_com,
                                 v_fstsup_noneq_com,
                                 v_secsup_eq_com,
                                 v_secsup_noneq_com,
                                 v_facre_eq_com,
                                 v_facre_noneq_com,
                                 0,
                                 p.pol_tot_endos_diff_amt,
                                 0,
                                 0,
                                 p.pol_uw_year,
                                 'RIC',
                                 p.pol_client_policy_number,
                                 p.pol_prp_code,
                                 p.pol_current_status,
                                 p.pol_uwyr_length,
                                 p.pol_policy_cover_to,
                                 p.pol_policy_cover_from,
                                 v_tran_no,
                                 v_ob_facre_prem,
                                 v_ob_facre_com,
                                 v_pool_comm,
                                 v_pool_prem,
                                 v_pool_si,
                                 v_pool_vat,
                                 p.pol_coinsurance,
                                 v_mand_si,
                                 v_qs_si,
                                 v_fstsup_si,
                                 v_secsup_si,
                                 v_facre_si,
                                 v_ob_facre_si,
                                 v_net_si,
                                 v_gross_si,
                                 p.pol_pro_sht_desc,
                                 p.pol_policy_type,
                                 v_sd,
                                 v_tl,
                                 v_duties,
                                 p.pol_wtht,
                                 p.pol_prem_tax,
                                 DECODE (p.pol_tot_phfund,
                                         NULL, p.pol_tot_phfund,
                                         0, p.pol_phfund,
                                         p.pol_tot_phfund));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO POST REINSURANCE REFUNDS INTO POLICY REGISTER...AT 6..');
                END;

                ------------------------post risk new cessions-------------register
                FOR cur_all_risks_rec IN cur_all_risks
                LOOP
                    v_mand_prem := 0;
                    v_mand_si := 0;
                    v_mand_eq_prem := 0;
                    v_mand_noneq_prem := 0;
                    v_mand_com := 0;
                    v_mand_eq_com := 0;
                    v_mand_noneq_com := 0;
                    v_qs_prem := 0;
                    v_qs_si := 0;
                    v_qs_eq_prem := 0;
                    v_qs_noneq_prem := 0;
                    v_qs_com := 0;
                    v_qs_eq_com := 0;
                    v_qs_noneq_com := 0;
                    v_fstsup_prem := 0;
                    v_fstsup_si := 0;
                    v_fstsup_eq_prem := 0;
                    v_fstsup_noneq_prem := 0;
                    v_fstsup_com := 0;
                    v_fstsup_eq_com := 0;
                    v_fstsup_noneq_com := 0;
                    v_secsup_prem := 0;
                    v_secsup_si := 0;
                    v_secsup_eq_prem := 0;
                    v_secsup_noneq_prem := 0;
                    v_secsup_com := 0;
                    v_secsup_eq_com := 0;
                    v_secsup_noneq_com := 0;
                    v_pool_prem := 0;
                    v_pool_comm := 0;
                    v_pool_vat := 0;
                    v_pool_si := 0;
                    v_pool_rate := 0;
                    v_facre_com_rate := 0;
                    v_facre_com := 0;
                    v_facre_prem := 0;
                    v_facre_si := 0;
                    v_facre_prem_rate := 0;
                    v_ob_facre_com_rate := 0;
                    v_ob_facre_com := 0;
                    v_ob_facre_prem := 0;
                    v_ob_facre_si := 0;
                    v_ob_facre_prem_rate := 0;
                    v_net_rate := 0;
                    v_rsk_net_prem := 0;
                    v_net_si := 0;
                    v_gross_si := 0;
                    v_gross_prem := 0;
                    v_facre_diff_amt := 0;
                    v_eq_prem := 0;
                    v_fstsup_eq_prem := 0;
                    v_fstsup_noneq_prem := 0;
                    v_fstsup_eq_com := 0;
                    v_fstsup_noneq_com := 0;
                    v_secsup_eq_prem := 0;
                    v_secsup_noneq_prem := 0;
                    v_secsup_eq_com := 0;
                    v_secsup_noneq_com := 0;
                    v_mand_eq_prem := 0;
                    v_mand_noneq_prem := 0;
                    v_mand_eq_com := 0;
                    v_mand_noneq_com := 0;
                    v_ob_facre_eq_com := 0;
                    v_ob_facre_noneq_com := 0;
                    v_facre_eq_prem := 0;
                    v_facre_noneq_prem := 0;
                    v_facre_noneq_com := 0;
                    v_ob_facre_eq_prem := 0;
                    v_ob_facre_noneq_prem := 0;
                    v_ob_facre_noneq_com := 0;
                    v_ob_facre_eq_com := 0;

                    FOR cur_rsk_rein_rec
                        IN cur_rein (cur_all_risks_rec.ipu_code, v_tran_no) ---(cur_all_risks_rec.prrd_code)
                    LOOP
                        v_mand_prem := cur_rsk_rein_rec.mand_prem;
                        v_mand_si := cur_rsk_rein_rec.mand_si;
                        v_mand_pct := cur_rsk_rein_rec.mand_pct;
                        v_mand_eq_prem := cur_rsk_rein_rec.mand_eq_prem;
                        v_mand_noneq_prem := cur_rsk_rein_rec.mand_noneq_prem;
                        v_mand_com := cur_rsk_rein_rec.mand_com;
                        v_mand_eq_com := cur_rsk_rein_rec.mand_eq_com;
                        v_mand_noneq_com := cur_rsk_rein_rec.mand_noneq_com;
                        v_qs_prem := cur_rsk_rein_rec.qs_prem;
                        v_qs_si := cur_rsk_rein_rec.qs_si;
                        v_qs_pct := cur_rsk_rein_rec.qs_pct;
                        v_qs_eq_prem := cur_rsk_rein_rec.qs_eq_prem;
                        v_qs_noneq_prem := cur_rsk_rein_rec.qs_noneq_prem;
                        v_qs_com := cur_rsk_rein_rec.qs_com;
                        v_qs_eq_com := cur_rsk_rein_rec.qs_eq_com;
                        v_qs_noneq_com := cur_rsk_rein_rec.qs_noneq_com;
                        v_fstsup_prem := cur_rsk_rein_rec.fstsup_prem;
                        v_fstsup_si := cur_rsk_rein_rec.fstsup_si;
                        v_fstsup_pct := cur_rsk_rein_rec.fstsup_pct;
                        v_fstsup_eq_prem := cur_rsk_rein_rec.fstsup_eq_prem;
                        v_fstsup_noneq_prem :=
                            cur_rsk_rein_rec.fstsup_noneq_prem;
                        v_fstsup_com := cur_rsk_rein_rec.fstsup_com;
                        v_fstsup_eq_com := cur_rsk_rein_rec.fstsup_eq_com;
                        v_fstsup_noneq_com :=
                            cur_rsk_rein_rec.fstsup_noneq_com;
                        v_secsup_prem := cur_rsk_rein_rec.secsup_prem;
                        v_secsup_si := cur_rsk_rein_rec.secsup_si;
                        v_secsup_pct := cur_rsk_rein_rec.secsup_pct;
                        v_secsup_eq_prem := cur_rsk_rein_rec.secsup_eq_prem;
                        v_secsup_noneq_prem :=
                            cur_rsk_rein_rec.secsup_noneq_prem;
                        v_secsup_com := cur_rsk_rein_rec.secsup_com;
                        v_secsup_eq_com := cur_rsk_rein_rec.secsup_eq_com;
                        v_secsup_noneq_com :=
                            cur_rsk_rein_rec.secsup_noneq_com;
                    END LOOP;

                    FOR cur_facre_rec IN cur_facre -- (cur_all_risks_rec.prrd_code)
                    LOOP
                        v_facre_com_rate := cur_facre_rec.facre_com_rate;
                        v_facre_com := cur_facre_rec.facre_com;
                        v_facre_prem := cur_facre_rec.facre_prem;
                        v_facre_si := cur_facre_rec.facre_si;
                        v_facre_prem_rate := cur_facre_rec.facre_rate;
                        v_ob_facre_com_rate :=
                            cur_facre_rec.ob_facre_com_rate;
                        v_ob_facre_com := cur_facre_rec.ob_facre_com;
                        v_ob_facre_prem := cur_facre_rec.ob_facre_prem;
                        v_ob_facre_si := cur_facre_rec.ob_facre_si;
                        v_ob_facre_prem_rate := cur_facre_rec.ob_facre_rate;
                        v_facre_diff_amt :=
--                              NVL (v_facre_diff_amt, 0)
--                            + 
                            NVL (cur_facre_rec.fc_prem_diff_amt, 0);
                        v_facre_eq_prem :=
--                              NVL (v_facre_eq_prem, 0)
--                            + 
                        NVL (cur_facre_rec.facre_eq_prem, 0);
                        v_facre_noneq_prem := --NVL (v_facre_noneq_prem, 0)+ 
                        NVL (cur_facre_rec.facre_noneq_prem, 0);
                        v_facre_eq_com :=
--                              NVL (v_facre_eq_com, 0)
--                            + 
                            NVL (cur_facre_rec.facre_eq_com, 0);
                    v_facre_noneq_com :=--NVL (v_facre_noneq_com, 0)+ 
                    NVL (cur_facre_rec.facre_noneq_com, 0);
                    v_ob_facre_eq_prem :=--NVL (v_ob_facre_eq_prem, 0)+ 
                    NVL (cur_facre_rec.ob_facre_eq_prem, 0);
                     v_ob_facre_noneq_prem :=--NVL (v_ob_facre_noneq_prem, 0)+ 
                     NVL (cur_facre_rec.ob_facre_noneq_prem, 0);
                    v_ob_facre_eq_com :=--NVL (v_ob_facre_eq_com, 0)+ 
                    NVL (cur_facre_rec.ob_facre_eq_com, 0);
                     v_ob_facre_noneq_com :=-NVL (v_ob_facre_noneq_com, 0)+ 
                        NVL (cur_facre_rec.ob_facre_noneq_com, 0);
                    END LOOP;
--                    RAISE_ERROR('GIS_RI_PROCEDURES::LN 45091::v_facre_noneq_prem = '||v_facre_noneq_prem
--                            ||'& v_facre_eq_prem = '||v_facre_eq_prem
--                            ||'& ipu_property_id = '||cur_all_risks_rec.ipu_property_id);
                    FOR cur_risk_pool
                        IN cur_risk_pl_dtls (cur_all_risks_rec.ipu_code)
                    LOOP
                        v_pool_prem := cur_risk_pool.pool_prem;
                        v_pool_comm := cur_risk_pool.pool_comm;
                        v_pool_vat := cur_risk_pool.pool_vat;
                        v_pool_si := cur_risk_pool.pool_si;
                        v_pool_rate := cur_risk_pool.pool_rate;
                    END LOOP;

                    FOR cur_risk_own_ret_rec
                        IN cur_risk_own_ret (cur_all_risks_rec.ipu_code, ---cur_all_risks_rec.prrd_code,
                                             v_tran_no)
                    LOOP
                        v_rsk_net_prem :=
                              cur_risk_own_ret_rec.comp_net_ret
                            + NVL (v_facre_diff_amt, 0);
                        v_net_rate := cur_risk_own_ret_rec.comp_net_rate;
                        v_eq_prem := cur_risk_own_ret_rec.comp_eq_prem;
                        v_non_eq_prem :=
                              cur_risk_own_ret_rec.comp_non_eq_prem
                            - NVL (v_pool_prem, 0);
                        v_gross_si := cur_risk_own_ret_rec.comp_gross_si;
                        v_net_si := cur_risk_own_ret_rec.comp_net_si;
                        v_gross_prem := cur_risk_own_ret_rec.comp_gross_prem;
                    END LOOP;

                    BEGIN
                        v_rskrg_code := NULL;

                        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                               || gin_rskrg_code_seq.NEXTVAL
                          INTO v_rskrg_code
                          FROM DUAL;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR : UNABLE TO GENERATE SEQUENCE GIN_RSKRG_CODE_SEQ..AT 7.');
                    END;

                    BEGIN
                        --DBMS_OUTPUT.PUT_LINE('inserting risk reg new cecssion');
                        INSERT INTO gin_policy_risk_reg (
                                        rskrg_code,
                                        rskrg_pol_policy_no,
                                        rskrg_pol_ren_endos_no,
                                        rskrg_pol_batch_no,
                                        rskrg_wef_dt,
                                        rskrg_wet_dt,
                                        rskrg_risk_cover_to,
                                        rskrg_risk_cover_from,
                                        rskrg_ipu_code,
                                        rskrg_scl_code,
                                        rskrg_ipu_id,
                                        rskrg_pr_code,
                                        rskrg_ggt_trans_no,
                                        rskrg_mand_rate,
                                        rskrg_mand_prem,
                                        rskrg_mand_com,
                                        rskrg_quota_rate,
                                        rskrg_quota_com,
                                        rskrg_fstsup_rate,
                                        rskrg_fstsup_com,
                                        rskrg_secsup_rate,
                                        rskrg_secsup_com,
                                        rskrg_fstsup_prem,
                                        rskrg_secsup_prem,
                                        rskrg_tran_date,
                                        rskrg_quota_prem,
                                        rskrg_uw_yr,
                                        rskrg_comm_endos_diff_amt,
                                        rskrg_cur_code,
                                        rskrg_cur_symbol,
                                        rskrg_quz_code,
                                        rskrg_quz_sht_desc,
                                        rskrg_exchange_rate,
                                        rskrg_prem_tax,
                                        rskrg_ipu_property_id,
                                        rskrg_tran_type,
                                        rskrg_coin_own_pct,
                                        rskrg_com_ret_rate,
                                        rskrg_facre_rate,
                                        rskrg_endos_diff_amt,
                                        rskrg_si_diff,
                                        rskrg_facre_prem,
                                        rskrg_facre_com,
                                        rskrg_brn_code,
                                        rskrg_brn_sht_desc,
                                        rskrg_policy_type,
                                        rskrg_agnt_sht_desc,
                                        rskrg_agnt_agent_code,
                                        rskrg_prp_code,
                                        rskrg_facre_ob_prem,
                                        rskrg_facre_ob_rate,
                                        rskrg_facre_ob_com,
                                        rskrg_pool_prem,
                                        rskrg_pool_com,
                                        rskrg_pool_si,
                                        rskrg_pool_vat,
                                        rskrg_pool_rate,
                                        rskrg_comp_net_ret,
                                        rskrg_reinsure_amt,
                                        rskrg_sum_insured,
                                        rskrg_mand_si,
                                        rskrg_quota_si,
                                        rskrg_fstsup_si,
                                        rskrg_secsup_si,
                                        rskrg_facre_si,
                                        rskrg_facre_ob_si,
                                        rskrg_net_si,
                                        rskrg_gross_si,
                                        rskrg_covt_code,
                                        rskrg_tl,
                                        rskrg_earthquake_prem,
                                        rskrg_fstsup_eq_prem,
                                        rskrg_fstsup_noneq_prem,
                                        rskrg_fstsup_eq_com,
                                        rskrg_fstsup_noneq_com,
                                        rskrg_secsup_eq_prem,
                                        rskrg_secsup_noneq_prem,
                                        rskrg_secsup_eq_com,
                                        rskrg_secsup_noneq_com,
                                        rskrg_mand_eq_prem,
                                        rskrg_mand_noneq_prem,
                                        rskrg_mand_eq_com,
                                        rskrg_mand_noneq_com,
                                        rskrg_facre_eq_prem,
                                        rskrg_facre_noneq_prem,
                                        rskrg_facre_noneq_com,
                                        rskrg_facre_eq_ob_prem,
                                        rskrg_facre_noneq_ob_prem,
                                        rskrg_facre_noneq_ob_com,
                                        rskrg_facre_eq_ob_com)
                             VALUES (v_rskrg_code,
                                     p.pol_policy_no,
                                     p.pol_ren_endos_no,
                                     p.pol_batch_no,
                                     cur_all_risks_rec.ipu_wef,
                                     cur_all_risks_rec.ipu_wef,
                                     cur_all_risks_rec.ipu_eff_wet,
                                     cur_all_risks_rec.ipu_eff_wef,
                                     cur_all_risks_rec.ipu_code,
                                     cur_all_risks_rec.ipu_sec_scl_code,
                                     cur_all_risks_rec.ipu_id,
                                     v_pr_code,
                                     v_tran_no,
                                     NVL (v_mand_pct, 0),
                                     NVL (v_mand_prem, 0),
                                     NVL (v_mand_com, 0),
                                     NVL (v_qs_pct, 0),
                                     NVL (v_qs_com, 0),
                                     NVL (v_fstsup_pct, 0),
                                     NVL (v_fstsup_com, 0),
                                     NVL (v_secsup_pct, 0),
                                     NVL (v_secsup_com, 0),
                                     NVL (v_fstsup_prem, 0),
                                     NVL (v_secsup_prem, 0),
                                     TRUNC (v_tran_dt),
                                     NVL (v_qs_prem, 0),
                                     p.pol_uw_year,
                                     0,
                                     p.pol_cur_code,
                                     p.pol_cur_symbol,
                                     cur_all_risks_rec.ipu_quz_code,
                                     cur_all_risks_rec.ipu_quz_sht_desc,
                                     p.pol_cur_rate,
                                     NVL (cur_all_risks_rec.ipu_prem_tax, 0),
                                     cur_all_risks_rec.ipu_property_id,
                                     'RIC',
                                     NVL (p.pol_coinsurance_share, 100),
                                     NVL (v_net_rate, 0),
                                     NVL (v_facre_prem_rate, 0),
                                     NVL (cur_all_risks_rec.prrd_ri_prem, 0),
                                     NVL (cur_all_risks_rec.ipu_si_diff, 0),
                                     v_facre_prem,
                                     v_facre_com,
                                     p.pol_brn_code,
                                     p.pol_brn_sht_desc,
                                     p.pol_policy_type,
                                     p.pol_agnt_sht_desc,
                                     p.pol_agnt_agent_code,
                                     p.pol_prp_code,
                                     v_ob_facre_prem,
                                     v_ob_facre_prem_rate,
                                     v_ob_facre_com,
                                     v_pool_prem,
                                     v_pool_comm,
                                     v_pool_si,
                                     v_pool_vat,
                                     v_pool_rate,
                                     v_rsk_net_prem,
                                     cur_all_risks_rec.ipu_reinsure_amt,
                                     cur_all_risks_rec.ipu_value,
                                     v_mand_si,
                                     v_qs_si,
                                     v_fstsup_si,
                                     v_secsup_si,
                                     v_facre_si,
                                     v_ob_facre_si,
                                     v_net_si,
                                     v_gross_si,
                                     cur_all_risks_rec.ipu_covt_code,
                                     cur_all_risks_rec.ipu_itl,
                                     NVL (v_eq_prem, 0),
                                     NVL (v_fstsup_eq_prem, 0),
                                     NVL (v_fstsup_noneq_prem, 0),
                                     NVL (v_fstsup_eq_com, 0),
                                     NVL (v_fstsup_noneq_com, 0),
                                     NVL (v_secsup_eq_prem, 0),
                                     NVL (v_secsup_noneq_prem, 0),
                                     NVL (v_secsup_eq_com, 0),
                                     NVL (v_secsup_noneq_com, 0),
                                     NVL (v_mand_eq_prem, 0),
                                     NVL (v_mand_noneq_prem, 0),
                                     NVL (v_mand_eq_com, 0),
                                     NVL (v_mand_noneq_com, 0),
                                     NVL (v_facre_eq_prem, 0),
                                     NVL (v_facre_noneq_prem, 0),
                                     NVL (v_facre_noneq_com, 0),
                                     NVL (v_ob_facre_eq_prem, 0),
                                     NVL (v_ob_facre_noneq_prem, 0),
                                     NVL (v_ob_facre_noneq_com, 0),
                                     NVL (v_ob_facre_eq_com, 0));
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO INSERT RI REFUND INTO THE RISK REGISTER..AT 8.');
                    END;

                    --            DELETE gin_policy_risk_treaty_reg
                    --            WHERE trtrg_pr_code = v_pr_code
                    --            AND trtrg_rskrg_code = v_rskrg_code;

                    --            DELETE gin_policy_treaty_part_reg
                    --            WHERE trtpg_pr_code = v_pr_code
                    --            AND trtpg_rskrg_code = v_rskrg_code;
                    FOR rdtls
                        IN cur_rsk_rein_dtls (cur_all_risks_rec.ipu_code,
                                              v_tran_no) ---(cur_all_risks_rec.prrd_code)
                    LOOP
                        INSERT INTO gin_policy_risk_treaty_reg (
                                        trtrg_code,
                                        trtrg_ptotr_code,
                                        trtrg_pr_code,
                                        trtrg_rskrg_code,
                                        trtrg_rei_code,
                                        trtrg_trt_code,
                                        trtrg_ta_code,
                                        trtrg_as_code,
                                        trtrg_risk_cur_code,
                                        trtrg_trt_cur_code,
                                        trtrg_exch_rate,
                                        trtrg_trt_si_pcur,
                                        trtrg_trt_si_tcur,
                                        trtrg_trt_prem_pcur,
                                        trtrg_trt_prem_tcur,
                                        trtrg_trt_share,
                                        trtrg_trt_sht_desc,
                                        trtrg_rate,
                                        trtrg_trt_comm_pcur,
                                        trtrg_trt_comm_tcur,
                                        trtrg_cession_pct,
                                        trtrg_uwyr,
                                        trtrg_ipu_code,
                                        trtrg_pol_batch_no,
                                        trtrg_risk_cur_symbol,
                                        trtrg_trt_cur_symbol,
                                        trtrg_prem_tax_pcur,
                                        trtrg_prem_tax_tcur,
                                        trtrg_trs_code,
                                        trtrg_trs_sht_desc,
                                        trtrg_rate_type,
                                        trtrg_remarks,
                                        trtrg_ggt_tran_no,
                                        trtrg_tran_type,
                                        trtrg_rprem_tax_pcur,
                                        trtrg_prrd_code,
                                        trtrg_comm_rate,
                                        trtrg_auth_dt,
                                        trtrg_rprem_tax_tcur,
                                        trtrg_earthqke_prem,
                                        trtrg_earthqke_comm_rate,
                                        trtrg_earthqke_comm,
                                        trtrg_net_less_eq_comm,
                                        trtrg_net_less_eq_prem,
                                        trtrg_ctl_code)
                             VALUES (trtrg_code_seq.NEXTVAL,
                                     rdtls.ptotr_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     rdtls.ptotr_rei_code,
                                     rdtls.ptotr_trt_code,
                                     rdtls.ptotr_ta_code,
                                     rdtls.ptotr_as_code,
                                     rdtls.ptotr_risk_cur_code,
                                     rdtls.ptotr_trt_cur_code,
                                     rdtls.ptotr_exch_rate,
                                     rdtls.ptotr_trt_si_pcur,
                                     rdtls.ptotr_trt_si_tcur,
                                     rdtls.ptotr_trt_prem_pcur,
                                     rdtls.ptotr_trt_prem_tcur,
                                     rdtls.ptotr_trt_share,
                                     rdtls.ptotr_trt_sht_desc,
                                     rdtls.ptotr_rate,
                                     rdtls.ptotr_trt_comm_pcur,
                                     rdtls.ptotr_trt_comm_tcur,
                                     rdtls.ptotr_cession_pct,
                                     rdtls.ptotr_uwyr,
                                     rdtls.ptotr_ipu_code,
                                     rdtls.ptotr_pol_batch_no,
                                     rdtls.ptotr_risk_cur_symbol,
                                     rdtls.ptotr_trt_cur_symbol,
                                     rdtls.ptotr_prem_tax_pcur,
                                     rdtls.ptotr_prem_tax_tcur,
                                     rdtls.ptotr_trs_code,
                                     rdtls.ptotr_trs_sht_desc,
                                     rdtls.ptotr_rate_type,
                                     rdtls.ptotr_remarks,
                                     rdtls.ptotr_ggt_tran_no,
                                     rdtls.ptotr_tran_type,
                                     rdtls.ptotr_rprem_tax_pcur,
                                     rdtls.ptotr_prrd_code,
                                     rdtls.ptotr_comm_rate,
                                     rdtls.ptotr_auth_dt,
                                     rdtls.ptotr_rprem_tax_tcur,
                                     rdtls.ptotr_earthqke_prem,
                                     rdtls.ptotr_earthqke_comm_rate,
                                     rdtls.ptotr_earthqke_comm,
                                     rdtls.ptotr_net_less_eq_comm,
                                     rdtls.ptotr_net_less_eq_prem,
                                     rdtls.ptotr_ctl_code);

                        FOR pdtls
                            IN cur_rsk_rein_part_dtls (rdtls.ptotr_code)
                        LOOP
                            INSERT INTO gin_policy_treaty_part_reg (
                                            trtpg_code,
                                            trtpg_ptotr_code,
                                            trtpg_part_code,
                                            trtpg_pr_code,
                                            trtpg_rskrg_code,
                                            trtpg_trtrg_code,
                                            trtpg_rei_code,
                                            trtpg_cede_rate,
                                            trtpg_si_amt_pcur,
                                            trtpg_si_amt_tcur,
                                            trtpg_comm_amt_pcur,
                                            trtpg_comm_amt_tcur,
                                            trtpg_prem_amt_pcur,
                                            trtpg_prem_amt_tcur,
                                            trtpg_trt_code,
                                            trtpg_trt_sht_desc,
                                            trtpg_agnt_agent_code,
                                            trtpg_agnt_sht_desc,
                                            trtpg_uwyr,
                                            trtpg_pol_batch_no,
                                            trtpg_pol_policy_no,
                                            trtpg_pol_ren_endos_no,
                                            trtpg_ipu_code,
                                            trtpg_rprem_tax_pcur,
                                            trtpg_rprem_tax_tcur,
                                            trtpg_prem_tax_pcur,
                                            trtpg_prem_tax_tcur,
                                            trtpg_ta_code,
                                            trtpg_as_code,
                                            trtpg_fiscal_year,
                                            trtpg_trs_code,
                                            trtpg_trs_sht_desc,
                                            trtpg_trpa_code,
                                            trtpg_mgt_fee_tcur,
                                            trtpg_mgt_fee_pcur)
                                 VALUES (trtpg_code_seq.NEXTVAL,
                                         rdtls.ptotr_code,
                                         pdtls.part_code,
                                         v_pr_code,
                                         v_rskrg_code,
                                         trtrg_code_seq.CURRVAL,
                                         rdtls.ptotr_rei_code,
                                         pdtls.part_cede_rate,
                                         pdtls.part_si_amt_pcur,
                                         pdtls.part_si_amt_tcur,
                                         pdtls.part_comm_amt_pcur,
                                         pdtls.part_comm_amt_tcur,
                                         pdtls.part_prem_amt_pcur,
                                         pdtls.part_prem_amt_tcur,
                                         pdtls.part_trt_code,
                                         pdtls.part_trt_sht_desc,
                                         pdtls.part_agnt_agent_code,
                                         pdtls.part_agnt_sht_desc,
                                         pdtls.part_uwyr,
                                         pdtls.part_pol_batch_no,
                                         pdtls.part_pol_policy_no,
                                         pdtls.part_pol_ren_endos_no,
                                         pdtls.part_ipu_code,
                                         pdtls.part_rprem_tax_pcur,
                                         pdtls.part_rprem_tax_tcur,
                                         pdtls.part_prem_tax_pcur,
                                         pdtls.part_prem_tax_tcur,
                                         pdtls.part_ta_code,
                                         pdtls.part_as_code,
                                         pdtls.part_fiscal_year,
                                         pdtls.part_trs_code,
                                         pdtls.part_trs_sht_desc,
                                         pdtls.part_trpa_code,
                                         pdtls.part_mgt_fee_tcur,
                                         pdtls.part_mgt_fee_pcur);
                        END LOOP;
                    END LOOP;

                    DELETE gin_policy_risk_facre_reg
                     WHERE     facrg_pr_code = v_pr_code
                           AND facrg_rskrg_code = v_rskrg_code;

                    FOR fdtls
                        IN cur_risk_facre_dtls (cur_all_risks_rec.ipu_code) ---cur_all_risks_rec.prrd_code)
                    LOOP
                        INSERT INTO gin_policy_risk_facre_reg (
                                        facrg_code,
                                        facrg_fc_code,
                                        facrg_pr_code,
                                        facrg_rskrg_code,
                                        facrg_agnt_agent_code,
                                        facrg_amount,
                                        facrg_wef,
                                        facrg_ipu_code,
                                        facrg_agent_sht_desc,
                                        facrg_rate,
                                        facrg_comm_rate,
                                        facrg_comm_amt,
                                        facrg_don_by,
                                        facrg_dc_no,
                                        facrg_prem_amt,
                                        facrg_pol_batch_no,
                                        facrg_uwyr,
                                        facrg_ggt_tran_no,
                                        facrg_tran_type,
                                        facrg_scl_code,
                                        facrg_amt_or_rate,
                                        facrg_prrd_code,
                                        facrg_auth_dt,
                                        facrg_wet,
                                        facrg_earthqke_prem,
                                        facrg_earthqke_comm_rate,
                                        facrg_earthqke_comm,
                                        facrg_net_less_eq_comm,
                                        facrg_net_less_eq_prem,
                                        facrg_facre_type,
                                        facrg_prem_diff_amt,
                                        facrg_remark,
                                        facrg_vat_amt,
                                        facrg_vat_rate,
                                        facrg_mngmnt_amt,
                                        facrg_rein_tax_amt,
                                        facrg_mngmnt_type,
                                        facrg_mngmnt_value,
                                        facrg_rein_tax_type,
                                        facrg_rein_tax_value)
                             VALUES (facrg_code_seq.NEXTVAL,
                                     fdtls.fc_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     fdtls.fc_agnt_agent_code,
                                     fdtls.fc_amount,
                                     fdtls.fc_wef,
                                     fdtls.fc_ipu_code,
                                     fdtls.fc_agent_sht_desc,
                                     fdtls.fc_rate,
                                     fdtls.fc_comm_rate,
                                     fdtls.fc_comm_amt,
                                     fdtls.fc_don_by,
                                     fdtls.fc_dc_no,
                                     fdtls.fc_prem_amt,
                                     fdtls.fc_pol_batch_no,
                                     fdtls.fc_uwyr,
                                     fdtls.fc_ggt_tran_no,
                                     fdtls.fc_tran_type,
                                     fdtls.fc_scl_code,
                                     fdtls.fc_amt_or_rate,
                                     fdtls.fc_prrd_code,
                                     fdtls.fc_auth_dt,
                                     fdtls.fc_wet,
                                     fdtls.fc_earthqke_prem,
                                     fdtls.fc_earthqke_comm_rate,
                                     fdtls.fc_earthqke_comm,
                                     fdtls.fc_net_less_eq_comm,
                                     fdtls.fc_net_less_eq_prem,
                                     fdtls.fc_facre_type,
                                     fdtls.fc_prem_diff_amt,
                                     fdtls.fc_remark,
                                     fdtls.fc_vat_amt,
                                     fdtls.fc_vat_rate,
                                     fdtls.fc_mngmnt_amt,
                                     fdtls.fc_rein_tax_amt,
                                     fdtls.fc_mngmnt_type,
                                     fdtls.fc_mngmnt_value,
                                     fdtls.fc_rein_tax_type,
                                     fdtls.fc_rein_tax_value);
                    END LOOP;

                    DELETE gin_policy_risk_pool_reg
                     WHERE     poorg_pr_code = v_pr_code
                           AND poorg_rskrg_code = v_rskrg_code;

                    FOR pdtls
                        IN cur_risk_pool_dtls (cur_all_risks_rec.ipu_code) ---prrd_code)
                    LOOP
                        INSERT INTO gin_policy_risk_pool_reg (
                                        poorg_code,
                                        poorg_prprd_code,
                                        poorg_pr_code,
                                        poorg_rskrg_code,
                                        poorg_scrpr_code,
                                        poorg_rein_pool_rate,
                                        poorg_ipu_code,
                                        poorg_scl_code,
                                        poorg_covt_code,
                                        poorg_pol_batch_no,
                                        poorg_rein_pool_amt,
                                        poorg_rein_pool_comm_rate,
                                        poorg_rein_pool_vat_rate,
                                        poorg_rein_pool_comm_amt,
                                        poorg_rein_pool_vat_amt,
                                        poorg_ggt_tran_no,
                                        poorg_uwyr,
                                        poorg_pol_ren_endos_no,
                                        poorg_date,
                                        poorg_risk_trt_own_ret_amt,
                                        poorg_pta_code,
                                        poorg_os_claim_amt,
                                        poorg_paid_claim_amt,
                                        poorg_pool_net_amt,
                                        poorg_prrd_code,
                                        poorg_pool_si)
                             VALUES (poorg_code_seq.NEXTVAL,
                                     pdtls.prprd_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     pdtls.prprd_scrpr_code,
                                     pdtls.prprd_rein_pool_rate,
                                     pdtls.prprd_ipu_code,
                                     pdtls.prprd_scl_code,
                                     pdtls.prprd_covt_code,
                                     pdtls.prprd_pol_batch_no,
                                     pdtls.prprd_rein_pool_amt,
                                     pdtls.prprd_rein_pool_comm_rate,
                                     pdtls.prprd_rein_pool_vat_rate,
                                     pdtls.prprd_rein_pool_comm_amt,
                                     pdtls.prprd_rein_pool_vat_amt,
                                     pdtls.prprd_ggt_tran_no,
                                     pdtls.prprd_uwyr,
                                     pdtls.prprd_pol_ren_endos_no,
                                     pdtls.prprd_date,
                                     pdtls.prprd_risk_trt_own_ret_amt,
                                     pdtls.prprd_pta_code,
                                     pdtls.prprd_os_claim_amt,
                                     pdtls.prprd_paid_claim_amt,
                                     pdtls.prprd_pool_net_amt,
                                     pdtls.prprd_prrd_code,
                                     pdtls.prprd_pool_si);
                    END LOOP;
                --cur_rsk_rein_rec
                END LOOP;
            END LOOP;                                          --cur_all_risks
        END LOOP;                                                   -- cur_pol
    END;

    --   PROCEDURE grp_reverse_register (
    --      v_pol_batch_no        NUMBER,
    --      v_tran_no        IN   NUMBER,
    --      v_tran_dt             DATE,
    --      v_ipu_code        NUMBER default null
    --   )
    --   IS
    --      v_tran_type                VARCHAR2 (5);
    --      v_facre_com                NUMBER         := 0;
    --      v_facre_ref_com            NUMBER         := 0;
    --      v_facre_prem               NUMBER         := 0;
    --      v_facre_si                 NUMBER         := 0;
    --      v_facre_ref_prem           NUMBER         := 0;
    --      v_errmsg                   VARCHAR2 (200);
    --      v_pr_code                  NUMBER;
    --      v_prem_type                VARCHAR2 (20);
    --      v_rskrg_code               NUMBER;
    --      v_comp_rate                NUMBER         := 0;
    --      v_ri_premium               NUMBER         := 0;
    --      v_facre_com_rate           NUMBER         := 0;
    --      v_facre_ref_com_rate       NUMBER         := 0;
    --      v_facre_prem_rate          NUMBER         := 0;
    --      v_facre_ref_prem_rate      NUMBER         := 0;
    --      v_mand_rate                NUMBER         := 0;
    --      v_mand_prem                NUMBER         := 0;
    --      v_mand_si                  NUMBER         := 0;
    --      v_mand_pct                 NUMBER         := 0;
    --      v_mand_com                 NUMBER         := 0;
    --      v_mand_eq_prem             NUMBER         := 0;
    --      v_mand_noneq_prem          NUMBER         := 0;
    --      v_mand_eq_com              NUMBER         := 0;
    --      v_mand_noneq_com           NUMBER         := 0;
    --      v_qs_rate                  NUMBER         := 0;
    --      v_qs_com                   NUMBER         := 0;
    --      v_qs_prem                  NUMBER         := 0;
    --      v_qs_si                    NUMBER         := 0;
    --      v_qs_pct                   NUMBER         := 0;
    --      v_qs_eq_prem               NUMBER         := 0;
    --      v_qs_noneq_prem            NUMBER         := 0;
    --      v_qs_eq_com                NUMBER         := 0;
    --      v_qs_noneq_com             NUMBER         := 0;
    --      v_fstsup_rate              NUMBER         := 0;
    --      v_fstsup_com               NUMBER         := 0;
    --      v_fstsup_prem              NUMBER         := 0;
    --      v_fstsup_si                NUMBER         := 0;
    --      v_fstsup_pct               NUMBER         := 0;
    --      v_fstsup_eq_prem           NUMBER         := 0;
    --      v_fstsup_noneq_prem        NUMBER         := 0;
    --      v_fstsup_eq_com            NUMBER         := 0;
    --      v_fstsup_noneq_com         NUMBER         := 0;
    --      v_secsup_prem              NUMBER         := 0;
    --      v_secsup_si                NUMBER         := 0;
    --      v_secsup_pct               NUMBER         := 0;
    --      v_secsup_rate              NUMBER         := 0;
    --      v_secsup_com               NUMBER         := 0;
    --      v_secsup_eq_prem           NUMBER         := 0;
    --      v_secsup_noneq_prem        NUMBER         := 0;
    --      v_secsup_eq_com            NUMBER         := 0;
    --      v_secsup_noneq_com         NUMBER         := 0;
    --      v_facre_eq_prem            NUMBER         := 0;
    --      v_facre_noneq_prem         NUMBER         := 0;
    --      v_facre_eq_com             NUMBER         := 0;
    --      v_facre_noneq_com          NUMBER         := 0;
    --      v_ob_facre_com_rate        NUMBER;
    --      v_ob_facre_ref_com_rate    NUMBER;
    --      v_ob_facre_com             NUMBER;
    --      v_ob_facre_ref_com         NUMBER;
    --      v_ob_facre_prem            NUMBER;
    --      v_ob_facre_si              NUMBER;
    --      v_ob_facre_ref_prem        NUMBER;
    --      v_ob_facre_prem_rate       NUMBER;
    --      v_ob_facre_ref_prem_rate   NUMBER;
    --      v_ob_facre_eq_prem         NUMBER         := 0;
    --      v_ob_facre_noneq_prem      NUMBER         := 0;
    --      v_pool_prem                NUMBER;
    --      v_pool_comm                NUMBER;
    --      v_pool_vat                 NUMBER;
    --      v_pool_si                  NUMBER;
    --      v_pool_rate                NUMBER;
    --      v_pool_ref_prem            NUMBER;
    --      v_pool_ref_comm            NUMBER;
    --      v_exhange_rate             NUMBER;
    --      v_rnd                      NUMBER         := 0;
    --      v_rnd_bcur                 NUMBER;
    --      v_com_ret                  NUMBER;
    --      v_rsk_net_prem             NUMBER;
    --      v_net_rate                 NUMBER;
    --      v_gross_prem               NUMBER;
    --      v_pol_net_prem             NUMBER;
    --      v_eq_prem                  NUMBER;
    --      v_non_eq_prem              NUMBER;
    --      v_gross_si                 NUMBER;
    --      v_net_si                   NUMBER;
    --      v_tl                       NUMBER;
    --      v_phfund                   NUMBER;
    --      v_sd                       NUMBER;
    --      v_duties                   NUMBER;
    --      v_facre_diff_amt        NUMBER         := 0;
    --
    --      CURSOR cur_pol
    --      IS
    --         SELECT *
    --           FROM gin_policies
    --          WHERE pol_batch_no = v_pol_batch_no;
    --
    --      CURSOR cur_all_risks
    --      IS
    --         SELECT prrd_code, ipu_wef, ipu_wet, ipu_eff_wet, ipu_eff_wef,
    --                ipu_code, ipu_sec_scl_code, ipu_id, prrd_comp_retention,
    --                ipu_comm_endos_diff_amt, ipu_quz_code, ipu_quz_sht_desc,
    --                ipu_prem_tax, ipu_property_id, ipu_status,
    --                ipu_current_prrd_code, ipu_endos_diff_amt, ipu_si_diff,
    --                prrd_net_prem, prrd_ri_prem, ipu_value, ipu_reinsure_amt,
    --                ipu_covt_code
    --           FROM gin_insured_property_unds,
    --                gin_policy_risk_ri_dtls,
    --                gin_policies
    --          WHERE ipu_code = prrd_ipu_code
    --            AND ipu_pol_batch_no = pol_batch_no
    --            AND pol_batch_no = v_pol_batch_no
    --            and ipu_code = v_ipu_code
    --            --AND pol_loaded != 'Y'
    --            AND prrd_tran_no = v_tran_no;
    --
    --      CURSOR cur_rein (v_prrd_code NUMBER)
    --      IS
    ----         SELECT   ROUND
    ----                      (SUM (NVL (DECODE (trs_trtg_code,
    ----                                         1001, NVL (ptotr_trt_prem_pcur, 0)
    ----                                        ),
    ----                                 0
    ----                                )
    ----                           ),v_rnd
    ----                      ) mand_prem,
    ----                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    ----                                           1001, NVL (ptotr_trt_si_pcur, 0)
    ----                                          ),
    ----                                   0
    ----                                  )
    ----                             ), v_rnd
    ----                        ) mand_si,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        1001, NVL (ptotr_refund_prem, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ), v_rnd
    ----                     ) mand_ref_prem,
    ----                  ROUND
    ----                       (SUM (NVL (DECODE (trs_trtg_code,
    ----                                          1001, NVL (ptotr_trt_comm_pcur, 0)
    ----                                         ),
    ----                                  0
    ----                                 )
    ----                            ),v_rnd
    ----                       ) mand_com,
    ----                  ROUND
    ----                      (SUM (NVL (DECODE (trs_trtg_code,
    ----                                         1001, NVL (ptotr_refund_com, 0)
    ----                                        ),
    ----                                 0
    ----                                )
    ----                           ), v_rnd
    ----                      ) mand_ref_com,
    ----                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    ----                                           1001, NVL (ptotr_cession_pct, 0)
    ----                                          ),
    ----                                   0
    ----                                  )
    ----                             ),
    ----                         4
    ----                        ) mand_pct,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        1001, NVL (ptotr_prev_cession_rate, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),
    ----                      4
    ----                     ) mand_ref_pct,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        1001, NVL (ptotr_prev_cession_si, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) mand_ref_si,
    ----                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    ----                                           1003, NVL (ptotr_trt_prem_pcur, 0)
    ----                                          ),
    ----                                   0
    ----                                  )
    ----                             ),v_rnd
    ----                        ) qs_prem,
    ----                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    ----                                           1003, NVL (ptotr_trt_si_pcur, 0)
    ----                                          ),
    ----                                   0
    ----                                  )
    ----                             ),v_rnd
    ----                        ) qs_si,
    ----                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    ----                                           1003, NVL (ptotr_trt_comm_pcur, 0)
    ----                                          ),
    ----                                   0
    ----                                  )
    ----                             ),v_rnd
    ----                        ) qs_com,
    ----                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    ----                                           1003, NVL (ptotr_cession_pct, 0)
    ----                                          ),
    ----                                   0
    ----                                  )
    ----                             ),
    ----                         4
    ----                        ) qs_pct,
    ----                  ROUND
    ----                      (SUM (NVL (DECODE (trs_trtg_code,
    ----                                         1003, NVL (ptotr_refund_prem, 0)
    ----                                        ),
    ----                                 0
    ----                                )
    ----                           ),v_rnd
    ----                      ) qs_ref_prem,
    ----                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    ----                                           1003, NVL (ptotr_refund_com, 0)
    ----                                          ),
    ----                                   0
    ----                                  )
    ----                             ),v_rnd
    ----                        ) qs_ref_com,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        1003, NVL (ptotr_prev_cession_rate, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),
    ----                      4
    ----                     ) qs_ref_pct,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        1003, NVL (ptotr_prev_cession_si, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) qs_ref_si,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10041, NVL (ptotr_trt_prem_pcur, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) fstsup_prem,
    ----                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    ----                                           10041, NVL (ptotr_trt_si_pcur, 0)
    ----                                          ),
    ----                                   0
    ----                                  )
    ----                             ),v_rnd
    ----                        ) fstsup_si,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10041, NVL (ptotr_trt_comm_pcur, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) fstsup_com,
    ----                  ROUND
    ----                      (SUM (NVL (DECODE (trs_trtg_code,
    ----                                         10041, NVL (ptotr_cession_pct, 0)
    ----                                        ),
    ----                                 0
    ----                                )
    ----                           ),
    ----                       4
    ----                      ) fstsup_pct,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10041, NVL (ptotr_refund_prem, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) fstsup_ref_prem,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10041, NVL (ptotr_refund_com, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) fstsup_ref_com,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10041, NVL (ptotr_prev_cession_rate,
    ----                                                    0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),
    ----                      4
    ----                     ) fstsup_ref_pct,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10041, NVL (ptotr_prev_cession_si, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) fstsup_ref_si,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10042, NVL (ptotr_trt_prem_pcur, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) secsup_prem,
    ----                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    ----                                           10042, NVL (ptotr_trt_si_tcur, 0)
    ----                                          ),
    ----                                   0
    ----                                  )
    ----                             ),v_rnd
    ----                        ) secsup_si,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10042, NVL (ptotr_trt_comm_pcur, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) secsup_com,
    ----                  ROUND
    ----                      (SUM (NVL (DECODE (trs_trtg_code,
    ----                                         10042, NVL (ptotr_cession_pct, 0)
    ----                                        ),
    ----                                 0
    ----                                )
    ----                           ),
    ----                       4
    ----                      ) secsup_pct,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10042, NVL (ptotr_refund_prem, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) secsup_ref_prem,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10042, NVL (ptotr_refund_com, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) secsup_ref_com,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10042, NVL (ptotr_prev_cession_rate,
    ----                                                    0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),
    ----                      4
    ----                     ) secsup_ref_pct,
    ----                  ROUND
    ----                     (SUM (NVL (DECODE (trs_trtg_code,
    ----                                        10042, NVL (ptotr_prev_cession_si, 0)
    ----                                       ),
    ----                                0
    ----                               )
    ----                          ),v_rnd
    ----                     ) secsup_ref_si
    ----             FROM gin_policy_rein_risk_details, gin_treaties
    ----            WHERE ptotr_trs_code = trs_code AND ptotr_prrd_code = v_prrd_code
    ----         GROUP BY ptotr_ipu_code;
    --
    --SELECT   ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         1001, NVL (ptotr_trt_prem_pcur, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) mand_prem,
    --                ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         1001, NVL (ptotr_earthqke_prem, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) mand_eq_prem,
    --                    ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         1001, NVL (ptotr_earthqke_comm, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) mand_eq_com,
    --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    --                                           1001, NVL (ptotr_trt_si_pcur, 0)
    --                                          ),
    --                                   0
    --                                  )
    --                             ), v_rnd
    --                        ) mand_si,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        1001, NVL (ptotr_refund_prem, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ), v_rnd
    --                     ) mand_ref_prem,
    --                  ROUND
    --                       (SUM (NVL (DECODE (trs_trtg_code,
    --                                          1001, NVL (ptotr_trt_comm_pcur, 0)
    --                                         ),
    --                                  0
    --                                 )
    --                            ),v_rnd
    --                       ) mand_com,
    --                  ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         1001, NVL (ptotr_refund_com, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ), v_rnd
    --                      ) mand_ref_com,
    --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    --                                           1001, NVL (ptotr_cession_pct, 0)
    --                                          ),
    --                                   0
    --                                  )
    --                             ),
    --                         4
    --                        ) mand_pct,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        1001, NVL (ptotr_prev_cession_rate, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),
    --                      4
    --                     ) mand_ref_pct,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        1001, NVL (ptotr_prev_cession_si, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) mand_ref_si,
    --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    --                                           1003, NVL (ptotr_trt_prem_pcur, 0)
    --                                          ),
    --                                   0
    --                                  )
    --                             ),v_rnd
    --                        ) qs_prem,
    --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    --                                           1003, NVL (ptotr_trt_si_pcur, 0)
    --                                          ),
    --                                   0
    --                                  )
    --                             ),v_rnd
    --                        ) qs_si,
    --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    --                                           1003, NVL (ptotr_trt_comm_pcur, 0)
    --                                          ),
    --                                   0
    --                                  )
    --                             ),v_rnd
    --                        ) qs_com,
    --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    --                                           1003, NVL (ptotr_cession_pct, 0)
    --                                          ),
    --                                   0
    --                                  )
    --                             ),
    --                         4
    --                        ) qs_pct,
    --                  ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         1003, NVL (ptotr_refund_prem, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) qs_ref_prem,
    --                      ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         1003, NVL (ptotr_earthqke_prem, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) qs_eq_prem,
    --                    ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         1003, NVL (ptotr_earthqke_comm, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) qs_eq_com,
    --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    --                                           1003, NVL (ptotr_refund_com, 0)
    --                                          ),
    --                                   0
    --                                  )
    --                             ),v_rnd
    --                        ) qs_ref_com,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        1003, NVL (ptotr_prev_cession_rate, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),
    --                      4
    --                     ) qs_ref_pct,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        1003, NVL (ptotr_prev_cession_si, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) qs_ref_si,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10041, NVL (ptotr_trt_prem_pcur, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) fstsup_prem,
    --                      ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         10041, NVL (ptotr_earthqke_prem, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) fstsup_eq_prem,
    --                    ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         10041, NVL (ptotr_earthqke_comm, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) fstsup_eq_com,
    --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
    --                                           10041, NVL (ptotr_trt_si_pcur, 0)
    --                                          ),
    --                                   0
    --                                  )
    --                             ),v_rnd
    --                        ) fstsup_si,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10041, NVL (ptotr_trt_comm_pcur, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) fstsup_com,
    --                  ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         10041, NVL (ptotr_cession_pct, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),
    --                       4
    --                      ) fstsup_pct,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10041, NVL (ptotr_refund_prem, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) fstsup_ref_prem,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10041, NVL (ptotr_refund_com, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) fstsup_ref_com,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10041, NVL (ptotr_prev_cession_rate,
    --                                                    0)
    --                                       ),
    --                                0
    --                               )
    --                          ),
    --                      4
    --                     ) fstsup_ref_pct,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10041, NVL (ptotr_prev_cession_si, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) fstsup_ref_si,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10042, NVL (ptotr_trt_prem_pcur, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) secsup_prem,
    --                     ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         10042, NVL (ptotr_earthqke_prem, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) secsup_eq_prem,
    --                    ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         10042, NVL (ptotr_earthqke_comm, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),v_rnd
    --                      ) secsup_eq_com,
    --                       ROUND (SUM (NVL (DECODE (trs_trtg_code,
    --                                           10042, NVL (ptotr_trt_si_tcur, 0)
    --                                          ),
    --                                   0
    --                                  )
    --                             ),v_rnd
    --                        ) secsup_si,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10042, NVL (ptotr_trt_comm_pcur, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) secsup_com,
    --                  ROUND
    --                      (SUM (NVL (DECODE (trs_trtg_code,
    --                                         10042, NVL (ptotr_cession_pct, 0)
    --                                        ),
    --                                 0
    --                                )
    --                           ),
    --                       4
    --                      ) secsup_pct,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10042, NVL (ptotr_refund_prem, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) secsup_ref_prem,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10042, NVL (ptotr_refund_com, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) secsup_ref_com,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10042, NVL (ptotr_prev_cession_rate,
    --                                                    0)
    --                                       ),
    --                                0
    --                               )
    --                          ),
    --                      4
    --                     ) secsup_ref_pct,
    --                  ROUND
    --                     (SUM (NVL (DECODE (trs_trtg_code,
    --                                        10042, NVL (ptotr_prev_cession_si, 0)
    --                                       ),
    --                                0
    --                               )
    --                          ),v_rnd
    --                     ) secsup_ref_si
    --             FROM gin_policy_rein_risk_details, gin_treaties
    --            WHERE ptotr_trs_code = trs_code AND ptotr_prrd_code = v_prrd_code
    --         GROUP BY ptotr_ipu_code;
    --
    --
    --      CURSOR cur_pol_rein (v_trans_no NUMBER)
    --      IS
    --         SELECT   SUM (NVL (DECODE (trs_trtg_code,
    --                                    1001, NVL (ptotr_trt_prem_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) mand_prem,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    1001, NVL (ptotr_trt_si_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) mand_si,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    1001, NVL (ptotr_earthqke_prem, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) mand_eq_prem,
    --                  SUM
    --                     (NVL (DECODE (trs_trtg_code,
    --                                   1001, NVL (ptotr_net_less_eq_prem, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) mand_noneq_prem,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    1001, NVL (ptotr_trt_comm_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) mand_com,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    1001, NVL (ptotr_earthqke_comm, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) mand_eq_com,
    --                  SUM
    --                     (NVL (DECODE (trs_trtg_code,
    --                                   1001, NVL (ptotr_net_less_eq_comm, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) mand_noneq_com,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    1003, NVL (ptotr_trt_prem_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) qs_prem,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    1003, NVL (ptotr_trt_si_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) qs_si,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    1003, NVL (ptotr_earthqke_prem, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) qs_eq_prem,
    --                  SUM
    --                     (NVL (DECODE (trs_trtg_code,
    --                                   1003, NVL (ptotr_net_less_eq_prem, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) qs_noneq_prem,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    1003, NVL (ptotr_trt_comm_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) qs_com,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    1003, NVL (ptotr_earthqke_comm, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) qs_eq_com,
    --                  SUM
    --                     (NVL (DECODE (trs_trtg_code,
    --                                   1003, NVL (ptotr_net_less_eq_comm, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) qs_noneq_com,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10041, NVL (ptotr_trt_prem_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) fstsup_prem,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10041, NVL (ptotr_trt_si_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) fstsup_si,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10041, NVL (ptotr_earthqke_prem, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) fstsup_eq_prem,
    --                  SUM
    --                     (NVL (DECODE (trs_trtg_code,
    --                                   10041, NVL (ptotr_net_less_eq_prem, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) fstsup_noneq_prem,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10041, NVL (ptotr_trt_comm_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) fstsup_com,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10041, NVL (ptotr_earthqke_comm, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) fstsup_eq_com,
    --                  SUM
    --                     (NVL (DECODE (trs_trtg_code,
    --                                   10041, NVL (ptotr_net_less_eq_comm, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) fstsup_noneq_com,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10042, NVL (ptotr_trt_prem_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) secsup_prem,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10042, NVL (ptotr_trt_si_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) secsup_si,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10042, NVL (ptotr_earthqke_prem, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) secsup_eq_prem,
    --                  SUM
    --                     (NVL (DECODE (trs_trtg_code,
    --                                   10042, NVL (ptotr_net_less_eq_prem, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) secsup_noneq_prem,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10042, NVL (ptotr_trt_comm_pcur, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) secsup_com,
    --                  SUM (NVL (DECODE (trs_trtg_code,
    --                                    10042, NVL (ptotr_earthqke_comm, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) secsup_eq_com,
    --                  SUM
    --                     (NVL (DECODE (trs_trtg_code,
    --                                   10042, NVL (ptotr_net_less_eq_comm, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) secsup_noneq_com
    --             FROM gin_policy_rein_risk_details, gin_treaties
    --            WHERE ptotr_trs_code = trs_code AND ptotr_ggt_tran_no = v_trans_no
    --         GROUP BY ptotr_ggt_tran_no;
    --
    --      CURSOR cur_rsk_rein_dtls (v_prrd_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_policy_rein_risk_details, gin_treaties
    --          WHERE ptotr_trs_code = trs_code AND ptotr_prrd_code = v_prrd_code;
    --
    --      CURSOR cur_rsk_rein_part_dtls (v_ptotr_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_participations
    --          WHERE part_ptotr_code = v_ptotr_code;
    --
    --      CURSOR cur_pol_facre
    --      IS
    --         SELECT SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_comm_amt, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) facre_com,
    --                   SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_earthqke_comm, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) facre_eq_com ,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_prem_amt, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) facre_prem,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_amount, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) facre_si,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_earthqke_prem, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) facre_eq_prem,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_net_less_eq_prem, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) facre_noneq_prem,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_earthqke_comm, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) facre_eq_comm,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_net_less_eq_comm, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) facre_noneq_comm,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'O', NVL (fc_comm_amt, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) ob_facre_com,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'O', NVL (fc_prem_amt, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) ob_facre_prem,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'O', NVL (fc_amount, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) ob_facre_si,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'O', NVL (fc_earthqke_prem, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) ob_facre_eq_prem,
    --                SUM
    --                   (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                 'O', NVL (fc_net_less_eq_prem, 0)
    --                                ),
    --                         0
    --                        )
    --                   ) ob_facre_noneq_prem,
    --                SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'O', NVL (fc_earthqke_comm, 0)
    --                                 ),
    --                          0
    --                         )
    --                    ) ob_facre_eq_comm,
    --                SUM
    --                   (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                 'O', NVL (fc_net_less_eq_comm, 0)
    --                                ),
    --                         0
    --                        )
    --                   ) ob_facre_noneq_comm,
    --                   SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_prem_diff_amt, 0)
    --                                 ),
    --                          0
    --                         )
    --                    )    fc_prem_diff_amt
    --           FROM gin_facre_cessions
    --          WHERE fc_ggt_tran_no = v_tran_no;
    --
    --      CURSOR cur_facre (v_prrd_code NUMBER)
    --      IS
    --         SELECT   SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_comm_amt, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) facre_com,
    --                       SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_earthqke_comm, 0)
    --                                   ),
    --                            0
    --                           )
    --                      )  facre_eq_com,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_prem_amt, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) facre_prem,
    --                    SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_earthqke_prem, 0)
    --                                   ),
    --                            0
    --                           )
    --                      )  facre_eq_prem,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_amount, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) facre_si,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_comm_rate, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) facre_com_rate,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_refund_comm, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) facre_ref_com,
    --                  SUM
    --                     (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'N', NVL (fc_prev_comm_rate, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) facre_ref_com_rate,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_rate, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) facre_rate,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_refund_prem, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) facre_ref_prem,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_prev_rate, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) facre_ref_prem_rate,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'N', NVL (fc_prev_si, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) facre_ref_si,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'O', NVL (fc_comm_amt, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) ob_facre_com,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'O', NVL (fc_prem_amt, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) ob_facre_prem,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'O', NVL (fc_amount, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) ob_facre_si,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'O', NVL (fc_comm_rate, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) ob_facre_com_rate,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'O', NVL (fc_refund_comm, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) ob_facre_ref_com,
    --                  SUM
    --                     (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', NVL (fc_prev_comm_rate, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) ob_facre_ref_com_rate,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'O', NVL (fc_rate, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) ob_facre_rate,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'O', NVL (fc_refund_prem, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) ob_facre_ref_prem,
    --                  SUM
    --                     (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                   'O', NVL (fc_prev_rate, 0)
    --                                  ),
    --                           0
    --                          )
    --                     ) ob_facre_ref_prem_rate,
    --                  SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                    'O', NVL (fc_prev_si, 0)
    --                                   ),
    --                            0
    --                           )
    --                      ) ob_facre_ref_si,
    --                   SUM (NVL (DECODE (NVL (fc_facre_type, 'N'),
    --                                  'N', NVL (fc_prem_diff_amt, 0)
    --                                 ),
    --                          0
    --                         )
    --                    )    fc_prem_diff_amt
    --             FROM gin_facre_cessions
    --            WHERE fc_prrd_code = v_prrd_code
    --         GROUP BY fc_prrd_code;
    --
    --      CURSOR cur_risk_facre_dtls (v_prrd_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_facre_cessions
    --          WHERE fc_prrd_code = v_prrd_code;
    --
    --      CURSOR cur_pol_pool_trans
    --      IS
    --         SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0)) pool_comm,
    --                SUM (NVL (prprd_rein_pool_amt, 0)) pool_prem,
    --                SUM (NVL (prprd_rein_pool_vat_amt, 0)) pool_vat,
    --                SUM (NVL (prprd_pool_si, 0)) pool_si
    --           FROM gin_pol_rein_pool_risk_details
    --          WHERE prprd_ggt_tran_no = v_tran_no
    --            AND prprd_pol_batch_no = v_pol_batch_no;
    --
    --      CURSOR cur_risk_pl_dtls (v_prrd_code NUMBER)
    --      IS
    --         SELECT   SUM (NVL (prprd_rein_pool_comm_amt, 0)) pool_comm,
    --                  SUM (NVL (prprd_rein_pool_amt, 0)) pool_prem,
    --                  SUM (NVL (prprd_rein_pool_vat_amt, 0)) pool_vat,
    --                  SUM (NVL (prprd_pool_si, 0)) pool_si,
    --                  SUM (NVL (prprd_rein_pool_rate, 0)) pool_rate
    --             FROM gin_pol_rein_pool_risk_details
    --            WHERE prprd_prrd_code = v_prrd_code
    --         GROUP BY prprd_prrd_code;
    --
    --      CURSOR cur_risk_pool_dtls (v_prrd_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_pol_rein_pool_risk_details
    --          WHERE prprd_prrd_code = v_prrd_code;
    --
    --      CURSOR cur_policy_own_ret (v_trans_no NUMBER)
    --      IS
    --         SELECT SUM (NVL (prrd_earthquake_prem, 0)) comp_eq_prem,
    --                SUM (NVL (prrd_ri_net_less_eq_prem, 0)) comp_non_eq_prem,
    --                ROUND (SUM (  NVL (prrd_net_prem, 0)
    --                            * NVL (prrd_com_retention_rate, 0)
    --                            / 100
    --                           ),
    --                       v_rnd
    --                      ) comp_gross_ret,
    --                 SUM (prrd_net_prem ) comp_net_ret,
    --            --    ROUND (SUM (DECODE(NVL(ipu_overrideride_ret_type,'S'),'P',prrd_net_prem,(NVL (prrd_ri_prem, 0) * NVL (prrd_comp_net_rate, 0) / 100))),
    --              --         v_rnd
    --              --        ) comp_net_ret,
    --                SUM (NVL (ipu_reinsure_amt, 0)) comp_gross_si,
    --                SUM (  NVL (ipu_reinsure_amt, 0)
    --                     * NVL (prrd_comp_net_rate, 0)
    --                     / 100
    --                    ) comp_net_si
    --           FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
    --          WHERE ipu_code = prrd_ipu_code
    --            AND prrd_tran_no = v_trans_no
    --            and  ipu_code = v_ipu_code
    --            AND ipu_pol_batch_no = v_pol_batch_no;
    --
    --      CURSOR cur_risk_own_ret (v_prrd_code NUMBER)
    --      IS
    --         SELECT SUM (NVL (prrd_earthquake_prem, 0)) comp_eq_prem,
    --                SUM (NVL (prrd_ri_net_less_eq_prem, 0)) comp_non_eq_prem,
    --                ROUND (SUM (  NVL (prrd_net_prem, 0)
    --                            * NVL (prrd_com_retention_rate, 0)
    --                            / 100
    --                           ),
    --                       v_rnd
    --                      ) comp_gross_ret,
    --                 SUM (prrd_net_prem ) comp_net_ret,
    ----                 ROUND (SUM (DECODE(NVL(ipu_overrideride_ret_type,'S'),'P',prrd_net_prem,(NVL (prrd_ri_prem, 0) * NVL (prrd_comp_net_rate, 0) / 100))),
    ----                       v_rnd
    ----                      ) comp_net_ret,
    --                SUM (NVL (ipu_reinsure_amt, 0)) comp_gross_si,
    --                SUM (NVL (prrd_comp_net_rate, 0)) comp_net_rate,
    --                SUM (NVL (prrd_ri_prem, 0)) comp_gross_prem,
    --                SUM (  NVL (ipu_reinsure_amt, 0)
    --                     * NVL (prrd_comp_net_rate, 0)
    --                     / 100
    --                    ) comp_net_si
    --           FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
    --          WHERE ipu_code = prrd_ipu_code
    --            -- AND prrd_tran_no = v_trans_no
    --            AND prrd_code = v_prrd_code
    --            AND ipu_pol_batch_no = v_pol_batch_no;
    --
    --            v_ob_facre_eq_com  number;
    --            v_ob_facre_noneq_com  number;
    --   BEGIN
    --      FOR p IN cur_pol
    --      LOOP
    ----         v_exhange_rate := p.pol_cur_rate
    --         v_exhange_rate :=
    --              get_currexch_rate (p.pol_cur_code, v_rnd, v_rnd_bcur);
    --         v_prem_type := NULL;
    --         v_prem_type := p.pol_policy_status;
    --         v_comp_rate := 0;
    --         v_ri_premium := 0;
    --         v_facre_com_rate := 0;
    --         v_facre_prem_rate := 0;
    --         v_facre_com := 0;
    --         v_facre_ref_com := 0;
    --         v_facre_prem := 0;
    --         v_facre_ref_prem := 0;
    --         v_facre_com_rate := 0;
    --         v_facre_ref_com_rate := 0;
    --         v_facre_ref_prem_rate := 0;
    --         v_ob_facre_com_rate := 0;
    --         v_ob_facre_ref_com_rate := 0;
    --         v_ob_facre_com := 0;
    --         v_ob_facre_ref_com := 0;
    --         v_ob_facre_prem := 0;
    --         v_ob_facre_ref_prem := 0;
    --         v_ob_facre_prem_rate := 0;
    --         v_ob_facre_ref_prem_rate := 0;
    --         v_pool_prem := 0;
    --         v_pool_comm := 0;
    --         v_pool_vat := 0;
    --         v_pool_si := 0;
    --         v_pool_rate := 0;
    --         v_pool_ref_prem := 0;
    --         v_pool_ref_comm := 0;
    --         v_gross_si := 0;
    --         v_net_si := 0;
    --         v_ob_facre_eq_com:=0;
    --         v_ob_facre_noneq_com:=0;
    --
    --         FOR cur_pol_rein_rec IN cur_pol_rein (v_tran_no)
    --         LOOP
    --            v_mand_prem := cur_pol_rein_rec.mand_prem;
    --            v_mand_si := cur_pol_rein_rec.mand_si;
    --            v_mand_eq_prem := cur_pol_rein_rec.mand_eq_prem;
    --            v_mand_noneq_prem := cur_pol_rein_rec.mand_noneq_prem;
    --            v_mand_com := cur_pol_rein_rec.mand_com;
    --            v_mand_eq_com := cur_pol_rein_rec.mand_eq_com;
    --            v_mand_noneq_com := cur_pol_rein_rec.mand_noneq_com;
    --            v_qs_prem := cur_pol_rein_rec.qs_prem;
    --            v_qs_si := cur_pol_rein_rec.qs_si;
    --            v_qs_eq_prem := cur_pol_rein_rec.qs_eq_prem;
    --            v_qs_noneq_prem := cur_pol_rein_rec.qs_noneq_prem;
    --            v_qs_com := cur_pol_rein_rec.qs_com;
    --            v_qs_eq_com := cur_pol_rein_rec.qs_eq_com;
    --            v_qs_noneq_com := cur_pol_rein_rec.qs_noneq_com;
    --            v_fstsup_prem := cur_pol_rein_rec.fstsup_prem;
    --            v_fstsup_si := cur_pol_rein_rec.fstsup_si;
    --            v_fstsup_eq_prem := cur_pol_rein_rec.fstsup_eq_prem;
    --            v_fstsup_noneq_prem := cur_pol_rein_rec.fstsup_noneq_prem;
    --            v_fstsup_com := cur_pol_rein_rec.fstsup_com;
    --            v_fstsup_eq_com := cur_pol_rein_rec.fstsup_eq_com;
    --            v_fstsup_noneq_com := cur_pol_rein_rec.fstsup_noneq_com;
    --            v_secsup_prem := cur_pol_rein_rec.secsup_prem;
    --            v_secsup_si := cur_pol_rein_rec.secsup_si;
    --            v_secsup_eq_prem := cur_pol_rein_rec.secsup_eq_prem;
    --            v_secsup_noneq_prem := cur_pol_rein_rec.secsup_noneq_prem;
    --            v_secsup_com := cur_pol_rein_rec.secsup_com;
    --            v_secsup_eq_com := cur_pol_rein_rec.secsup_eq_com;
    --            v_secsup_noneq_com := cur_pol_rein_rec.secsup_noneq_com;
    --         END LOOP;                                         ---cur_pol_rein_rec
    --
    --         ---facre sessions
    --         FOR cur_facre_rec IN cur_pol_facre
    --         LOOP
    --            v_facre_prem :=
    --                     NVL (v_facre_prem, 0)
    --                     + NVL (cur_facre_rec.facre_prem, 0);
    --            v_facre_si :=
    --                         NVL (v_facre_si, 0)
    --                         + NVL (cur_facre_rec.facre_si, 0);
    --            v_facre_eq_prem :=
    --               NVL (v_facre_eq_prem, 0)
    --               + NVL (cur_facre_rec.facre_eq_prem, 0);
    --            v_facre_noneq_prem :=
    --                 NVL (v_facre_noneq_prem, 0)
    --               + NVL (cur_facre_rec.facre_noneq_prem, 0);
    --            v_facre_eq_com :=
    --               NVL (v_facre_eq_com, 0)
    --               + NVL (cur_facre_rec.facre_eq_com, 0);
    --            v_facre_noneq_com :=
    --                 NVL (v_facre_noneq_com, 0)
    --               + NVL (cur_facre_rec.facre_noneq_comm, 0);
    --            v_facre_com :=
    --                        NVL (v_facre_com, 0)
    --                        + NVL (cur_facre_rec.facre_com, 0);
    --            v_ob_facre_prem :=
    --                NVL (v_ob_facre_prem, 0)
    --                + NVL (cur_facre_rec.ob_facre_prem, 0);
    --            v_ob_facre_si :=
    --                    NVL (v_ob_facre_si, 0)
    --                    + NVL (cur_facre_rec.ob_facre_si, 0);
    --            v_ob_facre_eq_prem :=
    --                 NVL (v_ob_facre_eq_prem, 0)
    --               + NVL (cur_facre_rec.ob_facre_eq_prem, 0);
    --             v_ob_facre_eq_com :=
    --                 NVL (v_ob_facre_eq_com, 0)
    --               + NVL (cur_facre_rec.ob_facre_eq_comm, 0);
    --            v_ob_facre_noneq_prem :=
    --                 NVL (v_ob_facre_noneq_prem, 0)
    --               + NVL (cur_facre_rec.ob_facre_noneq_prem, 0);
    --             v_ob_facre_noneq_com :=
    --                 NVL (v_ob_facre_noneq_com, 0)
    --               + NVL (cur_facre_rec.ob_facre_noneq_comm, 0);
    --            v_ob_facre_com :=
    --                  NVL (v_ob_facre_com, 0)
    --                  + NVL (cur_facre_rec.ob_facre_com, 0);
    --           v_facre_diff_amt :=
    --                     NVL (v_facre_diff_amt, 0)
    --                     + NVL (cur_facre_rec.fc_prem_diff_amt, 0);
    --         END LOOP;
    --
    --         v_com_ret := 0;
    --         v_rsk_net_prem := 0;
    --
    --         -- pool at policy level
    --         FOR cur_pol_pool IN cur_pol_pool_trans
    --         LOOP
    --            v_pool_prem := cur_pol_pool.pool_prem;
    --            v_pool_comm := cur_pol_pool.pool_comm;
    --            v_pool_vat := cur_pol_pool.pool_vat;
    --            v_pool_si := cur_pol_pool.pool_si;
    --         END LOOP;
    --
    --         FOR cur_policy_own_ret_rec IN cur_policy_own_ret (v_tran_no)
    --         LOOP
    --            v_com_ret := cur_policy_own_ret_rec.comp_gross_ret;
    --            v_pol_net_prem := cur_policy_own_ret_rec.comp_net_ret - NVL (v_pool_prem, 0) + nvl(v_facre_diff_amt,0);
    --            v_eq_prem := cur_policy_own_ret_rec.comp_eq_prem;
    --            v_non_eq_prem :=
    --               cur_policy_own_ret_rec.comp_non_eq_prem - NVL (v_pool_prem, 0);
    --            v_gross_si := cur_policy_own_ret_rec.comp_gross_si;
    --            v_net_si := cur_policy_own_ret_rec.comp_net_si;
    --         END LOOP;
    --
    --         BEGIN
    --            BEGIN
    --               SELECT SUM (DECODE (UPPER (trnt_code),
    --                                   'TL', NVL (ptx_amount, 0),
    --                                   0
    --                                  )
    --                          ) tl,
    --                        SUM (DECODE (UPPER (trnt_code),
    --                                     'PHFUND', NVL (ptx_amount, 0),
    --                                     0
    --                                    )
    --                            )
    --                      + SUM (DECODE (UPPER (trnt_code),
    --                                     'COPHFUND', NVL (ptx_amount, 0),
    --                                     0
    --                                    )
    --                            ) phfund,
    --                      SUM (DECODE (UPPER (trnt_code),
    --                                   'SD', NVL (ptx_amount, 0),
    --                                   'MPSD', NVL (ptx_amount, 0),
    --                                   0
    --                                  )
    --                          ) sd,
    --                      SUM (DECODE (UPPER (trnt_code),
    --                                   'TL', 0,
    --                                   'SD', 0,
    --                                   'PHFUND', 0,
    --                                   'COPHFUND', 0,
    --                                   'MPSD', 0,
    --                                   NVL (ptx_amount, 0)
    --                                  )
    --                          ) other_duties
    --                 INTO v_tl,
    --                      v_phfund,
    --                      v_sd,
    --                      v_duties
    --                 FROM gin_policy_taxes, gin_transaction_types
    --                WHERE ptx_trac_trnt_code = trnt_code
    --                  AND ptx_pol_batch_no = v_pol_batch_no;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  NULL;
    --                  v_duties := 0;
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('ERROR, UNABLE TO RETRIEVE POLICY TAXES..');
    --            END;
    --
    --            v_duties := NVL (v_duties, 0) + NVL (v_phfund, 0);
    --
    --            BEGIN
    --               v_pr_code := NULL;
    --
    --               SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                 || gin_pr_code_seq.NEXTVAL
    --                                )
    --                 INTO v_pr_code
    --                 FROM DUAL;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  raise_error
    --                     ('ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. ERR AT 5...'
    --                     );
    --            END;
    --
    --            BEGIN
    --               INSERT INTO gin_policy_register
    --                           (pr_code, pr_transaction_date, pr_pol_policy_no,
    --                            pr_pol_ren_endos_no, pr_pol_batch_no,
    --                            pr_agnt_agent_code, pr_agnt_sht_desc,
    --                            pr_wef_dt, pr_wet_dt, pr_cur_code,
    --                            pr_brn_code, pr_cur_symbol,
    --                            pr_cur_rate, pr_brn_sht_desc,
    --                            pr_inception_uwyr, pr_pro_code,
    --                            pr_prev_batch_no, pr_prem_type, pr_mand_prem,
    --                            pr_mand_com, pr_quota_prem, pr_quota_com,
    --                            pr_fstsup_prem, pr_fstsup_com, pr_secsup_prem,
    --                            pr_secsup_com, pr_facre_prem, pr_facre_com,
    --                            pr_comp_net_prem, pr_comp_net_com,
    --                            pr_mand_eq_prem, pr_mand_noneq_prem,
    --                            pr_fstsup_eq_prem, pr_fstsup_noneq_prem,
    --                            pr_secsup_eq_prem, pr_secsup_noneq_prem,
    --                            pr_quota_eq_prem, pr_quota_noneq_prem,
    --                            pr_facre_eq_prem, pr_facre_noneq_prem,
    --                            pr_earthquake_prem, pr_ri_net_less_eq_prem,
    --                            pr_mand_eq_com, pr_mand_noneq_com,
    --                            pr_quota_eq_com, pr_quota_noneq_com,
    --                            pr_fstsup_eq_com, pr_fstsup_noneq_com,
    --                            pr_secsup_eq_com, pr_secsup_noneq_com,
    --                            pr_facre_eq_com, pr_facre_noneq_com, pr_si_diff,
    --                            pr_endos_diff_amt, pr_comm_amt,
    --                            pr_comm_endos_diff_amt, pr_uw_year,
    --                            pr_tran_type, pr_client_policy_number,
    --                            pr_prp_code, pr_current_status,
    --                            pr_uwyr_length, pr_policy_cover_to,
    --                            pr_policy_cover_from, pr_ggt_trans_no,
    --                            pr_facre_ob_prem, pr_facre_ob_com, pr_pool_com,
    --                            pr_pool_prem, pr_pool_si, pr_pool_vat,
    --                            --pr_pool_rate,
    --                            pr_coinsurance, pr_mand_si, pr_quota_si,
    --                            pr_fstsup_si, pr_secsup_si, pr_facre_si,
    --                            pr_facre_ob_si, pr_net_si, pr_gross_si,
    --                            pr_pro_sht_desc, pr_policy_type, pr_stamp_duty,
    --                            pr_tl, pr_other_duties, pr_wtht, pr_prem_tax,
    --                            pr_phfund,
    --                            pr_health_tax, pr_road_safety_tax,
    --                            pr_motor_levy, pr_certchg
    --                           )
    --                    VALUES (v_pr_code, TRUNC (v_tran_dt), p.pol_policy_no,
    --                            p.pol_ren_endos_no, p.pol_batch_no,
    --                            p.pol_agnt_agent_code, p.pol_agnt_sht_desc,
    --                            p.pol_wef_dt, p.pol_wet_dt, p.pol_cur_code,
    --                            p.pol_brn_code, p.pol_cur_symbol,
    --                            v_exhange_rate, p.pol_brn_sht_desc,
    --                            p.pol_inception_uwyr, p.pol_pro_code,
    --                            p.pol_prev_batch_no, v_prem_type, -v_mand_prem,
    --                            -v_mand_com, -v_qs_prem, -v_qs_com,
    --                            -v_fstsup_prem, -v_fstsup_com, -v_secsup_prem,
    --                            -v_secsup_com, -v_facre_prem, -v_facre_com,
    --                            -v_pol_net_prem, v_com_ret,
    --                            -v_mand_eq_prem, -v_mand_noneq_prem,
    --                            -v_fstsup_eq_prem, -v_fstsup_noneq_prem,
    --                            -v_secsup_eq_prem, -v_secsup_noneq_prem,
    --                            -v_qs_eq_prem, -v_qs_noneq_prem,
    --                            -v_facre_eq_prem, -v_facre_noneq_prem,
    --                            -v_eq_prem, -v_non_eq_prem,
    --                            -v_mand_eq_com, -v_mand_noneq_com,
    --                            -v_qs_eq_com, -v_qs_noneq_com,
    --                            -v_fstsup_eq_com, -v_fstsup_noneq_com,
    --                            -v_secsup_eq_com, -v_secsup_noneq_com,
    --                            -v_facre_eq_com, -v_facre_noneq_com, 0,
    --                            -p.pol_tot_endos_diff_amt, 0,
    --                            0, p.pol_uw_year,
    --                            'RIR', p.pol_client_policy_number,
    --                            p.pol_prp_code, p.pol_current_status,
    --                            p.pol_uwyr_length, p.pol_policy_cover_to,
    --                            p.pol_policy_cover_from, v_tran_no,
    --                            -v_ob_facre_prem, -v_ob_facre_com, -v_pool_comm,
    --                            -v_pool_prem, v_pool_si, -v_pool_vat,
    --                            p.pol_coinsurance, v_mand_si, v_qs_si,
    --                            v_fstsup_si, v_secsup_si, v_facre_si,
    --                            v_ob_facre_si, v_net_si, v_gross_si,
    --                            p.pol_pro_sht_desc, p.pol_policy_type, -v_sd,
    --                            -v_tl, -v_duties, -p.pol_wtht, -p.pol_prem_tax,
    --                            DECODE (p.pol_tot_phfund,
    --                                    NULL, -p.pol_tot_phfund,
    --                                    0, -p.pol_phfund,
    --                                    -p.pol_tot_phfund
    --                                   ),
    --                            -p.pol_health_tax, -p.pol_road_safety_tax,
    --                            -p.pol_motor_levy, -p.pol_certchg
    --                           );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     ('ERROR :- UNABLE TO POST REINSURANCE REFUNDS INTO POLICY REGISTER...AT 6..'
    --                     );
    --            END;
    --
    --            ------------------------post risk new cessions-------------register
    --            FOR cur_all_risks_rec IN cur_all_risks
    --            LOOP
    --               v_pool_prem := 0;
    --               v_pool_comm := 0;
    --               v_pool_vat := 0;
    --               v_pool_si := 0;
    --               v_pool_rate := 0;
    --               v_facre_com_rate := 0;
    --               v_facre_com := 0;
    --               v_facre_prem := 0;
    --               v_facre_prem_rate := 0;
    --               v_ob_facre_com_rate := 0;
    --               v_ob_facre_com := 0;
    --               v_ob_facre_prem := 0;
    --               v_ob_facre_prem_rate := 0;
    --               v_mand_prem := 0;
    --               v_mand_si := 0;
    --               v_mand_pct := 0;
    --               v_mand_com := 0;
    --               v_qs_prem := 0;
    --               v_qs_si := 0;
    --               v_qs_pct := 0;
    --               v_qs_com := 0;
    --               v_fstsup_prem := 0;
    --               v_fstsup_si := 0;
    --               v_fstsup_pct := 0;
    --               v_fstsup_com := 0;
    --               v_secsup_prem := 0;
    --               v_secsup_si := 0;
    --               v_secsup_pct := 0;
    --               v_secsup_com := 0;
    --               v_facre_diff_amt := 0;
    --               v_eq_prem:= 0;
    --               v_fstsup_eq_prem:= 0;
    --               v_fstsup_noneq_prem:= 0;
    --                v_fstsup_eq_com:= 0;
    --               v_fstsup_noneq_com:= 0;
    --               v_secsup_eq_prem:= 0;
    --               v_secsup_noneq_prem:= 0;
    --               v_secsup_eq_com:= 0;
    --               v_secsup_noneq_com:= 0;
    --               v_mand_eq_prem:= 0;
    --               v_mand_noneq_prem:= 0;
    --               v_mand_eq_com:= 0;
    --               v_mand_noneq_com:= 0;
    --               v_ob_facre_eq_com:=0;
    --               v_ob_facre_noneq_com:=0;
    --               v_facre_eq_prem:=0;
    --               v_facre_noneq_prem:=0;
    --               v_facre_noneq_com:=0;
    --               v_ob_facre_eq_prem:=0;
    --               v_ob_facre_noneq_prem:=0;
    --               v_ob_facre_noneq_com:=0;
    --               v_ob_facre_eq_com:=0;
    --
    --               FOR cur_rsk_rein_rec IN cur_rein (cur_all_risks_rec.prrd_code)
    --               LOOP
    --                  v_mand_prem := cur_rsk_rein_rec.mand_prem;
    --                  v_mand_si := cur_rsk_rein_rec.mand_si;
    --                  v_mand_pct := cur_rsk_rein_rec.mand_pct;
    --
    --                   v_mand_eq_prem        := cur_rsk_rein_rec.mand_eq_prem;
    --                   --v_mand_noneq_prem     := cur_rsk_rein_rec.mand_noneq_prem;
    --
    --                  v_mand_com := cur_rsk_rein_rec.mand_com;
    --
    --                   v_mand_eq_com         := cur_rsk_rein_rec.mand_eq_com;
    --                   --v_mand_noneq_com      := cur_pol_rein_rec.mand_noneq_com;
    --
    --                  v_qs_prem := cur_rsk_rein_rec.qs_prem;
    --                  v_qs_si := cur_rsk_rein_rec.qs_si;
    --                  v_qs_pct := cur_rsk_rein_rec.qs_pct;
    --
    --                   v_qs_eq_prem          := cur_rsk_rein_rec.qs_eq_prem;
    --                   --v_qs_noneq_prem       := cur_rsk_rein_rec.qs_noneq_prem;
    --
    --                  v_qs_com := cur_rsk_rein_rec.qs_com;
    --
    --                   v_qs_eq_com           := cur_rsk_rein_rec.qs_eq_com;
    --                   --v_qs_noneq_com        := cur_rsk_rein_rec.qs_noneq_com;
    --
    --                  v_fstsup_prem := cur_rsk_rein_rec.fstsup_prem;
    --                  v_fstsup_si := cur_rsk_rein_rec.fstsup_si;
    --                  v_fstsup_pct := cur_rsk_rein_rec.fstsup_pct;
    --
    --                   v_fstsup_eq_prem      := cur_rsk_rein_rec.fstsup_eq_prem;
    --                   --v_fstsup_noneq_prem   := cur_rsk_rein_rec.fstsup_noneq_prem;
    --
    --                  v_fstsup_com := cur_rsk_rein_rec.fstsup_com;
    --
    --                   v_fstsup_eq_com       := cur_rsk_rein_rec.fstsup_eq_com;
    --                   --v_fstsup_noneq_com    := cur_rsk_rein_rec.fstsup_noneq_com;
    --
    --                  v_secsup_prem := cur_rsk_rein_rec.secsup_prem;
    --                  v_secsup_si := cur_rsk_rein_rec.secsup_si;
    --                  v_secsup_pct := cur_rsk_rein_rec.secsup_pct;
    --
    --                   v_secsup_eq_prem      := cur_rsk_rein_rec.secsup_eq_prem;
    --                   --v_secsup_noneq_prem   := cur_rsk_rein_rec.secsup_noneq_prem;
    --
    --                  v_secsup_com := cur_rsk_rein_rec.secsup_com;
    --
    --               v_secsup_eq_com       := cur_rsk_rein_rec.secsup_eq_com;
    --               --v_secsup_noneq_com    := cur_rsk_rein_rec.secsup_noneq_com;
    --
    --               END LOOP;
    --
    --               FOR cur_facre_rec IN cur_facre (cur_all_risks_rec.prrd_code)
    --               LOOP
    --                  v_facre_com_rate := cur_facre_rec.facre_com_rate;
    --                  v_facre_com := cur_facre_rec.facre_com;
    --                  v_facre_prem := cur_facre_rec.facre_prem;
    --                  v_facre_si := cur_facre_rec.facre_si;
    --                  v_facre_prem_rate := cur_facre_rec.facre_rate;
    --                  v_ob_facre_com_rate := cur_facre_rec.ob_facre_com_rate;
    --                  v_ob_facre_com := cur_facre_rec.ob_facre_com;
    --                  v_ob_facre_si := cur_facre_rec.ob_facre_si;
    --                  v_ob_facre_prem_rate := cur_facre_rec.ob_facre_rate;
    --                  v_facre_diff_amt :=NVL (v_facre_diff_amt, 0)+ NVL (cur_facre_rec.fc_prem_diff_amt, 0);
    --
    --                 v_facre_eq_prem := NVL (v_facre_eq_prem, 0)+ NVL (cur_facre_rec.facre_eq_prem, 0);
    --                 --v_facre_noneq_prem := NVL (v_facre_noneq_prem, 0)+ NVL (cur_facre_rec.facre_noneq_prem, 0);
    --                 v_facre_eq_com :=NVL (v_facre_eq_com, 0)+ NVL (cur_facre_rec.facre_eq_com, 0);
    --                 --v_facre_noneq_com :=NVL (v_facre_noneq_com, 0)+ NVL (cur_facre_rec.facre_noneq_com, 0);
    --                 --v_ob_facre_eq_prem :=NVL (v_ob_facre_eq_prem, 0)+ NVL (cur_facre_rec.ob_facre_eq_prem, 0);
    --                -- v_ob_facre_noneq_prem :=NVL (v_ob_facre_noneq_prem, 0)+ NVL (cur_facre_rec.ob_facre_noneq_prem, 0);
    --                 --v_ob_facre_eq_com :=NVL (v_ob_facre_eq_com, 0)+ NVL (cur_facre_rec.ob_facre_eq_com, 0);
    --                -- v_ob_facre_noneq_com :=NVL (v_ob_facre_noneq_com, 0)+ NVL (cur_facre_rec.ob_facre_noneq_com, 0);
    --
    --               END LOOP;
    --
    --               FOR cur_risk_pool IN
    --                  cur_risk_pl_dtls (cur_all_risks_rec.prrd_code)
    --               LOOP
    --                  v_pool_prem := cur_risk_pool.pool_prem;
    --                  v_pool_comm := cur_risk_pool.pool_comm;
    --                  v_pool_vat := cur_risk_pool.pool_vat;
    --                  v_pool_si := cur_risk_pool.pool_si;
    --                  v_pool_rate := cur_risk_pool.pool_rate;
    --               END LOOP;
    --
    --               FOR cur_risk_own_ret_rec IN
    --                  cur_risk_own_ret (cur_all_risks_rec.prrd_code)
    --               LOOP
    --
    --                  v_rsk_net_prem :=
    --                     cur_risk_own_ret_rec.comp_net_ret - NVL (v_pool_prem, 0)+nvl(v_facre_diff_amt,0);
    --                  v_net_rate := cur_risk_own_ret_rec.comp_net_rate;
    --                  v_eq_prem := cur_risk_own_ret_rec.comp_eq_prem;
    --                  v_non_eq_prem :=
    --                       cur_risk_own_ret_rec.comp_non_eq_prem
    --                     - NVL (v_pool_prem, 0);
    --                  v_gross_si := cur_risk_own_ret_rec.comp_gross_si;
    --                  v_net_si := cur_risk_own_ret_rec.comp_net_si;
    --                  v_gross_prem := cur_risk_own_ret_rec.comp_gross_prem;
    --               END LOOP;
    ----  RAISE_ERROR('PRRD PREM='||cur_all_risks_rec.prrd_code||'EQ PREM='||v_eq_prem);
    --               BEGIN
    --                  v_rskrg_code := NULL;
    --
    --                  SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
    --                         || gin_rskrg_code_seq.NEXTVAL
    --                    INTO v_rskrg_code
    --                    FROM DUAL;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('ERROR : UNABLE TO GENERATE SEQUENCE GIN_RSKRG_CODE_SEQ..AT 7.'
    --                        );
    --               END;
    --
    --               BEGIN
    --                  --DBMS_OUTPUT.PUT_LINE('inserting risk reg new cecssion');
    --                  INSERT INTO gin_policy_risk_reg
    --                              (rskrg_code, rskrg_pol_policy_no,
    --                               rskrg_pol_ren_endos_no, rskrg_pol_batch_no,
    --                               rskrg_wef_dt,
    --                               rskrg_wet_dt,
    --                               rskrg_risk_cover_to,
    --                               rskrg_risk_cover_from,
    --                               rskrg_ipu_code,
    --                               rskrg_scl_code,
    --                               rskrg_ipu_id, rskrg_pr_code,
    --                               rskrg_ggt_trans_no, rskrg_mand_rate,
    --                               rskrg_mand_prem, rskrg_mand_com,
    --                               rskrg_quota_rate, rskrg_quota_com,
    --                               rskrg_fstsup_rate,
    --                               rskrg_fstsup_com,
    --                               rskrg_secsup_rate,
    --                               rskrg_secsup_com,
    --                               rskrg_fstsup_prem,
    --                               rskrg_secsup_prem, rskrg_tran_date,
    --                               rskrg_quota_prem, rskrg_uw_yr,
    --                               rskrg_comm_endos_diff_amt, rskrg_cur_code,
    --                               rskrg_cur_symbol,
    --                               rskrg_quz_code,
    --                               rskrg_quz_sht_desc,
    --                               rskrg_exchange_rate,
    --                               rskrg_prem_tax,
    --                               rskrg_ipu_property_id, rskrg_tran_type,
    --                               rskrg_coin_own_pct,
    --                               rskrg_com_ret_rate,
    --                               rskrg_facre_rate,
    --                               rskrg_endos_diff_amt,
    --                               rskrg_si_diff,
    --                               rskrg_facre_prem, rskrg_facre_com,
    --                               rskrg_brn_code, rskrg_brn_sht_desc,
    --                               rskrg_policy_type, rskrg_agnt_sht_desc,
    --                               rskrg_agnt_agent_code, rskrg_prp_code,
    --                               rskrg_facre_ob_prem, rskrg_facre_ob_rate,
    --                               rskrg_facre_ob_com, rskrg_pool_prem,
    --                               rskrg_pool_com, rskrg_pool_si,
    --                               rskrg_pool_vat, rskrg_pool_rate,
    --                               rskrg_mand_si, rskrg_quota_si,
    --                               rskrg_fstsup_si, rskrg_secsup_si,
    --                               rskrg_facre_si, rskrg_facre_ob_si,
    --                               rskrg_net_si, rskrg_gross_si,
    --                               rskrg_comp_net_ret,
    --                               rskrg_reinsure_amt,
    --                               rskrg_sum_insured,
    --                               rskrg_covt_code,
    --                               rskrg_earthquake_prem,
    --                               rskrg_fstsup_eq_prem,
    --                                rskrg_fstsup_noneq_prem,
    --                                rskrg_fstsup_eq_com,
    --                                rskrg_fstsup_noneq_com,
    --                                rskrg_secsup_eq_prem,
    --                                rskrg_secsup_noneq_prem,
    --                                rskrg_secsup_eq_com,
    --                                rskrg_secsup_noneq_com,
    --                                rskrg_mand_eq_prem,
    --                                rskrg_mand_noneq_prem,
    --                                rskrg_mand_eq_com,
    --                                rskrg_mand_noneq_com,
    --
    --                                rskrg_facre_eq_prem,
    --                                rskrg_facre_noneq_prem,
    --                                rskrg_facre_noneq_com,
    --                                rskrg_facre_eq_ob_prem,
    --                                rskrg_facre_noneq_ob_prem,
    --                                rskrg_facre_noneq_ob_com,
    --                                rskrg_facre_eq_ob_com
    --
    --                              )
    --                       VALUES (v_rskrg_code, p.pol_policy_no,
    --                               p.pol_ren_endos_no, p.pol_batch_no,
    --                               cur_all_risks_rec.ipu_wef,
    --                               cur_all_risks_rec.ipu_wef,
    --                               cur_all_risks_rec.ipu_eff_wet,
    --                               cur_all_risks_rec.ipu_eff_wef,
    --                               cur_all_risks_rec.ipu_code,
    --                               cur_all_risks_rec.ipu_sec_scl_code,
    --                               cur_all_risks_rec.ipu_id, v_pr_code,
    --                               v_tran_no, NVL (v_mand_pct, 0),
    --                               -NVL (v_mand_prem, 0), -NVL (v_mand_com, 0),
    --                               NVL (v_qs_pct, 0), -NVL (v_qs_com, 0),
    --                               NVL (v_fstsup_pct, 0),
    --                               -NVL (v_fstsup_com, 0),
    --                               NVL (v_secsup_pct, 0),
    --                               -NVL (v_secsup_com, 0),
    --                               -NVL (v_fstsup_prem, 0),
    --                               -NVL (v_secsup_prem, 0), TRUNC (v_tran_dt),
    --                               -NVL (v_qs_prem, 0), p.pol_uw_year,
    --                               0, p.pol_cur_code,
    --                               p.pol_cur_symbol,
    --                               cur_all_risks_rec.ipu_quz_code,
    --                               cur_all_risks_rec.ipu_quz_sht_desc,
    --                               p.pol_cur_rate,
    --                               NVL (cur_all_risks_rec.ipu_prem_tax, 0),
    --                               cur_all_risks_rec.ipu_property_id, 'RIR',
    --                               NVL (p.pol_coinsurance_share, 100),
    --                               NVL (v_net_rate, 0),
    --                               NVL (v_facre_prem_rate, 0),
    --                               -NVL (cur_all_risks_rec.prrd_ri_prem, 0),
    --                               NVL (cur_all_risks_rec.ipu_si_diff, 0),
    --                               -v_facre_prem, -v_facre_com,
    --                               p.pol_brn_code, p.pol_brn_sht_desc,
    --                               p.pol_policy_type, p.pol_agnt_sht_desc,
    --                               p.pol_agnt_agent_code, p.pol_prp_code,
    --                               -v_ob_facre_prem, v_ob_facre_prem_rate,
    --                               -v_ob_facre_com, -v_pool_prem,
    --                               -v_pool_comm, v_pool_si,
    --                               -v_pool_vat, v_pool_rate,
    --                               v_mand_si, v_qs_si,
    --                               v_fstsup_si, v_secsup_si,
    --                               v_facre_si, v_ob_facre_si,
    --                               v_net_si, v_gross_si,
    --                               -v_rsk_net_prem,
    --                               cur_all_risks_rec.ipu_reinsure_amt,
    --                               cur_all_risks_rec.ipu_value,
    --                               cur_all_risks_rec.ipu_covt_code,
    --                               -NVL (v_eq_prem,0),
    --                               -NVL (v_fstsup_eq_prem,0),
    --                               -NVL (v_fstsup_noneq_prem,0),
    --                               -NVL (v_fstsup_eq_com,0),
    --                               -NVL (v_fstsup_noneq_com,0),
    --                               -NVL (v_secsup_eq_prem,0),
    --                               -NVL (v_secsup_noneq_prem,0),
    --                               -NVL (v_secsup_eq_com,0),
    --                               -NVL (v_secsup_noneq_com,0),
    --                               -NVL (v_mand_eq_prem,0),
    --                               -NVL (v_mand_noneq_prem,0),
    --                               -NVL (v_mand_eq_com,0),
    --                               -NVL (v_mand_noneq_com,0),
    --                               -NVL (v_facre_eq_prem,0),
    --                               -NVL (v_facre_noneq_prem,0),
    --                               -NVL (v_facre_noneq_com,0),
    --                               -NVL (v_ob_facre_eq_prem,0),
    --                               -NVL (v_ob_facre_noneq_prem,0),
    --                               -NVL (v_ob_facre_noneq_com,0),
    --                               -NVL (v_ob_facre_eq_com,0)
    --                              );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('ERROR :- UNABLE TO INSERT RI REFUND INTO THE RISK REGISTER..AT 8.'
    --                        );
    --               END;
    --
    --               DELETE      gin_policy_treaty_part_reg
    --                     WHERE trtpg_pr_code = v_pr_code
    --                       AND trtpg_rskrg_code = v_rskrg_code;
    --
    --               DELETE      gin_policy_risk_treaty_reg
    --                     WHERE trtrg_pr_code = v_pr_code
    --                       AND trtrg_rskrg_code = v_rskrg_code;
    --
    --               FOR rdtls IN cur_rsk_rein_dtls (cur_all_risks_rec.prrd_code)
    --               LOOP
    --                  INSERT INTO gin_policy_risk_treaty_reg
    --                              (trtrg_code, trtrg_ptotr_code,
    --                               trtrg_pr_code, trtrg_rskrg_code,
    --                               trtrg_rei_code, trtrg_trt_code,
    --                               trtrg_ta_code, trtrg_as_code,
    --                               trtrg_risk_cur_code,
    --                               trtrg_trt_cur_code,
    --                               trtrg_exch_rate,
    --                               trtrg_trt_si_pcur,
    --                               trtrg_trt_si_tcur,
    --                               trtrg_trt_prem_pcur,
    --                               trtrg_trt_prem_tcur,
    --                               trtrg_trt_share,
    --                               trtrg_trt_sht_desc, trtrg_rate,
    --                               trtrg_trt_comm_pcur,
    --                               trtrg_trt_comm_tcur,
    --                               trtrg_cession_pct, trtrg_uwyr,
    --                               trtrg_ipu_code,
    --                               trtrg_pol_batch_no,
    --                               trtrg_risk_cur_symbol,
    --                               trtrg_trt_cur_symbol,
    --                               trtrg_prem_tax_pcur,
    --                               trtrg_prem_tax_tcur,
    --                               trtrg_trs_code,
    --                               trtrg_trs_sht_desc,
    --                               trtrg_rate_type, trtrg_remarks,
    --                               trtrg_ggt_tran_no,
    --                               trtrg_tran_type,
    --                               trtrg_rprem_tax_pcur,
    --                               trtrg_prrd_code, trtrg_comm_rate,
    --                               trtrg_auth_dt,
    --                               trtrg_rprem_tax_tcur,
    --                               trtrg_earthqke_prem,
    --                               trtrg_earthqke_comm_rate,
    --                               trtrg_earthqke_comm,
    --                               trtrg_net_less_eq_comm,
    --                               trtrg_net_less_eq_prem,
    --                               trtrg_ctl_code
    --                              )
    --                       VALUES (trtrg_code_seq.NEXTVAL, rdtls.ptotr_code,
    --                               v_pr_code, v_rskrg_code,
    --                               rdtls.ptotr_rei_code, rdtls.ptotr_trt_code,
    --                               rdtls.ptotr_ta_code, rdtls.ptotr_as_code,
    --                               rdtls.ptotr_risk_cur_code,
    --                               rdtls.ptotr_trt_cur_code,
    --                               rdtls.ptotr_exch_rate,
    --                               rdtls.ptotr_trt_si_pcur,
    --                               rdtls.ptotr_trt_si_tcur,
    --                               -rdtls.ptotr_trt_prem_pcur,
    --                               -rdtls.ptotr_trt_prem_tcur,
    --                               rdtls.ptotr_trt_share,
    --                               rdtls.ptotr_trt_sht_desc, rdtls.ptotr_rate,
    --                               -rdtls.ptotr_trt_comm_pcur,
    --                               -rdtls.ptotr_trt_comm_tcur,
    --                               rdtls.ptotr_cession_pct, rdtls.ptotr_uwyr,
    --                               rdtls.ptotr_ipu_code,
    --                               rdtls.ptotr_pol_batch_no,
    --                               rdtls.ptotr_risk_cur_symbol,
    --                               rdtls.ptotr_trt_cur_symbol,
    --                               -rdtls.ptotr_prem_tax_pcur,
    --                               -rdtls.ptotr_prem_tax_tcur,
    --                               rdtls.ptotr_trs_code,
    --                               rdtls.ptotr_trs_sht_desc,
    --                               rdtls.ptotr_rate_type, rdtls.ptotr_remarks,
    --                               rdtls.ptotr_ggt_tran_no,
    --                               rdtls.ptotr_tran_type,
    --                               -rdtls.ptotr_rprem_tax_pcur,
    --                               rdtls.ptotr_prrd_code, rdtls.ptotr_comm_rate,
    --                               rdtls.ptotr_auth_dt,
    --                               -rdtls.ptotr_rprem_tax_tcur,
    --                               -rdtls.ptotr_earthqke_prem,
    --                               rdtls.ptotr_earthqke_comm_rate,
    --                               -rdtls.ptotr_earthqke_comm,
    --                               -rdtls.ptotr_net_less_eq_comm,
    --                               -rdtls.ptotr_net_less_eq_prem,
    --                               rdtls.ptotr_ctl_code
    --                              );
    --
    --                  FOR pdtls IN cur_rsk_rein_part_dtls (rdtls.ptotr_code)
    --                  LOOP
    --                     INSERT INTO gin_policy_treaty_part_reg
    --                                 (trtpg_code, trtpg_ptotr_code,
    --                                  trtpg_part_code, trtpg_pr_code,
    --                                  trtpg_rskrg_code, trtpg_trtrg_code,
    --                                  trtpg_rei_code,
    --                                  trtpg_cede_rate,
    --                                  trtpg_si_amt_pcur,
    --                                  trtpg_si_amt_tcur,
    --                                  trtpg_comm_amt_pcur,
    --                                  trtpg_comm_amt_tcur,
    --                                  trtpg_prem_amt_pcur,
    --                                  trtpg_prem_amt_tcur,
    --                                  trtpg_trt_code,
    --                                  trtpg_trt_sht_desc,
    --                                  trtpg_agnt_agent_code,
    --                                  trtpg_agnt_sht_desc, trtpg_uwyr,
    --                                  trtpg_pol_batch_no,
    --                                  trtpg_pol_policy_no,
    --                                  trtpg_pol_ren_endos_no,
    --                                  trtpg_ipu_code,
    --                                  trtpg_rprem_tax_pcur,
    --                                  trtpg_rprem_tax_tcur,
    --                                  trtpg_prem_tax_pcur,
    --                                  trtpg_prem_tax_tcur,
    --                                  trtpg_ta_code, trtpg_as_code,
    --                                  trtpg_fiscal_year,
    --                                  trtpg_trs_code,
    --                                  trtpg_trs_sht_desc,
    --                                  trtpg_trpa_code,
    --                                  trtpg_mgt_fee_tcur,
    --                                  trtpg_mgt_fee_pcur
    --                                 )
    --                          VALUES (trtpg_code_seq.NEXTVAL, rdtls.ptotr_code,
    --                                  pdtls.part_code, v_pr_code,
    --                                  v_rskrg_code, trtrg_code_seq.CURRVAL,
    --                                  rdtls.ptotr_rei_code,
    --                                  pdtls.part_cede_rate,
    --                                  pdtls.part_si_amt_pcur,
    --                                  pdtls.part_si_amt_tcur,
    --                                  -pdtls.part_comm_amt_pcur,
    --                                  -pdtls.part_comm_amt_tcur,
    --                                  -pdtls.part_prem_amt_pcur,
    --                                  -pdtls.part_prem_amt_tcur,
    --                                  pdtls.part_trt_code,
    --                                  pdtls.part_trt_sht_desc,
    --                                  pdtls.part_agnt_agent_code,
    --                                  pdtls.part_agnt_sht_desc, pdtls.part_uwyr,
    --                                  pdtls.part_pol_batch_no,
    --                                  pdtls.part_pol_policy_no,
    --                                  pdtls.part_pol_ren_endos_no,
    --                                  pdtls.part_ipu_code,
    --                                  -pdtls.part_rprem_tax_pcur,
    --                                  -pdtls.part_rprem_tax_tcur,
    --                                  -pdtls.part_prem_tax_pcur,
    --                                  -pdtls.part_prem_tax_tcur,
    --                                  pdtls.part_ta_code, pdtls.part_as_code,
    --                                  pdtls.part_fiscal_year,
    --                                  pdtls.part_trs_code,
    --                                  pdtls.part_trs_sht_desc,
    --                                  pdtls.part_trpa_code,
    --                                  -pdtls.part_mgt_fee_tcur,
    --                                  -pdtls.part_mgt_fee_pcur
    --                                 );
    --                  END LOOP;
    --               END LOOP;
    --
    --               DELETE      gin_policy_risk_facre_reg
    --                     WHERE facrg_pr_code = v_pr_code
    --                       AND facrg_rskrg_code = v_rskrg_code;
    --
    --               FOR fdtls IN cur_risk_facre_dtls (cur_all_risks_rec.prrd_code)
    --               LOOP
    --                  INSERT INTO gin_policy_risk_facre_reg
    --                              (facrg_code, facrg_fc_code,
    --                               facrg_pr_code, facrg_rskrg_code,
    --                               facrg_agnt_agent_code, facrg_amount,
    --                               facrg_wef, facrg_ipu_code,
    --                               facrg_agent_sht_desc, facrg_rate,
    --                               facrg_comm_rate, facrg_comm_amt,
    --                               facrg_don_by, facrg_dc_no,
    --                               facrg_prem_amt, facrg_pol_batch_no,
    --                               facrg_uwyr, facrg_ggt_tran_no,
    --                               facrg_tran_type, facrg_scl_code,
    --                               facrg_amt_or_rate, facrg_prrd_code,
    --                               facrg_auth_dt, facrg_wet,
    --                               facrg_earthqke_prem,
    --                               facrg_earthqke_comm_rate,
    --                               facrg_earthqke_comm,
    --                               facrg_net_less_eq_comm,
    --                               facrg_net_less_eq_prem,
    --                               facrg_facre_type, facrg_prem_diff_amt,
    --                               facrg_remark, facrg_vat_amt,
    --                               facrg_vat_rate, facrg_mngmnt_amt,
    --                               facrg_rein_tax_amt, facrg_mngmnt_type,
    --                               facrg_mngmnt_value,
    --                               facrg_rein_tax_type,
    --                               facrg_rein_tax_value
    --                              )
    --                       VALUES (facrg_code_seq.NEXTVAL, fdtls.fc_code,
    --                               v_pr_code, v_rskrg_code,
    --                               fdtls.fc_agnt_agent_code, fdtls.fc_amount,
    --                               fdtls.fc_wef, fdtls.fc_ipu_code,
    --                               fdtls.fc_agent_sht_desc, fdtls.fc_rate,
    --                               fdtls.fc_comm_rate, -fdtls.fc_comm_amt,
    --                               fdtls.fc_don_by, fdtls.fc_dc_no,
    --                               -fdtls.fc_prem_amt, fdtls.fc_pol_batch_no,
    --                               fdtls.fc_uwyr, fdtls.fc_ggt_tran_no,
    --                               fdtls.fc_tran_type, fdtls.fc_scl_code,
    --                               fdtls.fc_amt_or_rate, fdtls.fc_prrd_code,
    --                               fdtls.fc_auth_dt, fdtls.fc_wet,
    --                               -fdtls.fc_earthqke_prem,
    --                               fdtls.fc_earthqke_comm_rate,
    --                               -fdtls.fc_earthqke_comm,
    --                               -fdtls.fc_net_less_eq_comm,
    --                               -fdtls.fc_net_less_eq_prem,
    --                               fdtls.fc_facre_type, -fdtls.fc_prem_diff_amt,
    --                               fdtls.fc_remark, -fdtls.fc_vat_amt,
    --                               fdtls.fc_vat_rate, -fdtls.fc_mngmnt_amt,
    --                               -fdtls.fc_rein_tax_amt, fdtls.fc_mngmnt_type,
    --                               -fdtls.fc_mngmnt_value,
    --                               fdtls.fc_rein_tax_type,
    --                               -fdtls.fc_rein_tax_value
    --                              );
    --               END LOOP;
    --
    --               DELETE      gin_policy_risk_pool_reg
    --                     WHERE poorg_pr_code = v_pr_code
    --                       AND poorg_rskrg_code = v_rskrg_code;
    --
    --               FOR pdtls IN cur_risk_pool_dtls (cur_all_risks_rec.prrd_code)
    --               LOOP
    --                  INSERT INTO gin_policy_risk_pool_reg
    --                              (poorg_code, poorg_prprd_code,
    --                               poorg_pr_code, poorg_rskrg_code,
    --                               poorg_scrpr_code,
    --                               poorg_rein_pool_rate,
    --                               poorg_ipu_code, poorg_scl_code,
    --                               poorg_covt_code,
    --                               poorg_pol_batch_no,
    --                               poorg_rein_pool_amt,
    --                               poorg_rein_pool_comm_rate,
    --                               poorg_rein_pool_vat_rate,
    --                               poorg_rein_pool_comm_amt,
    --                               poorg_rein_pool_vat_amt,
    --                               poorg_ggt_tran_no, poorg_uwyr,
    --                               poorg_pol_ren_endos_no,
    --                               poorg_date,
    --                               poorg_risk_trt_own_ret_amt,
    --                               poorg_pta_code,
    --                               poorg_os_claim_amt,
    --                               poorg_paid_claim_amt,
    --                               poorg_pool_net_amt,
    --                               poorg_prrd_code, poorg_pool_si
    --                              )
    --                       VALUES (poorg_code_seq.NEXTVAL, pdtls.prprd_code,
    --                               v_pr_code, v_rskrg_code,
    --                               pdtls.prprd_scrpr_code,
    --                               pdtls.prprd_rein_pool_rate,
    --                               pdtls.prprd_ipu_code, pdtls.prprd_scl_code,
    --                               pdtls.prprd_covt_code,
    --                               pdtls.prprd_pol_batch_no,
    --                               -pdtls.prprd_rein_pool_amt,
    --                               pdtls.prprd_rein_pool_comm_rate,
    --                               pdtls.prprd_rein_pool_vat_rate,
    --                               -pdtls.prprd_rein_pool_comm_amt,
    --                               -pdtls.prprd_rein_pool_vat_amt,
    --                               pdtls.prprd_ggt_tran_no, pdtls.prprd_uwyr,
    --                               pdtls.prprd_pol_ren_endos_no,
    --                               pdtls.prprd_date,
    --                               -pdtls.prprd_risk_trt_own_ret_amt,
    --                               pdtls.prprd_pta_code,
    --                               -pdtls.prprd_os_claim_amt,
    --                               -pdtls.prprd_paid_claim_amt,
    --                               -pdtls.prprd_pool_net_amt,
    --                               pdtls.prprd_prrd_code, pdtls.prprd_pool_si
    --                              );
    --               END LOOP;
    --            END LOOP;
    --         END LOOP;                                             --cur_all_risks
    --      END LOOP;                                                     -- cur_pol
    --   END;
    PROCEDURE grp_reverse_register (v_pol_batch_no      NUMBER,
                                    v_tran_no        IN NUMBER,
                                    v_tran_dt           DATE,
                                    v_ipu_code          NUMBER DEFAULT NULL)
    IS
        v_tran_type                VARCHAR2 (5);
        v_facre_com                NUMBER := 0;
        v_facre_ref_com            NUMBER := 0;
        v_facre_prem               NUMBER := 0;
        v_facre_si                 NUMBER := 0;
        v_facre_ref_prem           NUMBER := 0;
        v_errmsg                   VARCHAR2 (200);
        v_pr_code                  NUMBER;
        v_prem_type                VARCHAR2 (20);
        v_rskrg_code               NUMBER;
        v_comp_rate                NUMBER := 0;
        v_ri_premium               NUMBER := 0;
        v_facre_com_rate           NUMBER := 0;
        v_facre_ref_com_rate       NUMBER := 0;
        v_facre_prem_rate          NUMBER := 0;
        v_facre_ref_prem_rate      NUMBER := 0;
        v_mand_rate                NUMBER := 0;
        v_mand_prem                NUMBER := 0;
        v_mand_si                  NUMBER := 0;
        v_mand_pct                 NUMBER := 0;
        v_mand_com                 NUMBER := 0;
        v_mand_eq_prem             NUMBER := 0;
        v_mand_noneq_prem          NUMBER := 0;
        v_mand_eq_com              NUMBER := 0;
        v_mand_noneq_com           NUMBER := 0;
        v_qs_rate                  NUMBER := 0;
        v_qs_com                   NUMBER := 0;
        v_qs_prem                  NUMBER := 0;
        v_qs_si                    NUMBER := 0;
        v_qs_pct                   NUMBER := 0;
        v_qs_eq_prem               NUMBER := 0;
        v_qs_noneq_prem            NUMBER := 0;
        v_qs_eq_com                NUMBER := 0;
        v_qs_noneq_com             NUMBER := 0;
        v_fstsup_rate              NUMBER := 0;
        v_fstsup_com               NUMBER := 0;
        v_fstsup_prem              NUMBER := 0;
        v_fstsup_si                NUMBER := 0;
        v_fstsup_pct               NUMBER := 0;
        v_fstsup_eq_prem           NUMBER := 0;
        v_fstsup_noneq_prem        NUMBER := 0;
        v_fstsup_eq_com            NUMBER := 0;
        v_fstsup_noneq_com         NUMBER := 0;
        v_secsup_prem              NUMBER := 0;
        v_secsup_si                NUMBER := 0;
        v_secsup_pct               NUMBER := 0;
        v_secsup_rate              NUMBER := 0;
        v_secsup_com               NUMBER := 0;
        v_secsup_eq_prem           NUMBER := 0;
        v_secsup_noneq_prem        NUMBER := 0;
        v_secsup_eq_com            NUMBER := 0;
        v_secsup_noneq_com         NUMBER := 0;
        v_facre_eq_prem            NUMBER := 0;
        v_facre_noneq_prem         NUMBER := 0;
        v_facre_eq_com             NUMBER := 0;
        v_facre_noneq_com          NUMBER := 0;
        v_ob_facre_com_rate        NUMBER;
        v_ob_facre_ref_com_rate    NUMBER;
        v_ob_facre_com             NUMBER;
        v_ob_facre_ref_com         NUMBER;
        v_ob_facre_prem            NUMBER;
        v_ob_facre_si              NUMBER;
        v_ob_facre_ref_prem        NUMBER;
        v_ob_facre_prem_rate       NUMBER;
        v_ob_facre_ref_prem_rate   NUMBER;
        v_ob_facre_eq_prem         NUMBER := 0;
        v_ob_facre_noneq_prem      NUMBER := 0;
        v_pool_prem                NUMBER;
        v_pool_comm                NUMBER;
        v_pool_vat                 NUMBER;
        v_pool_si                  NUMBER;
        v_pool_rate                NUMBER;
        v_pool_ref_prem            NUMBER;
        v_pool_ref_comm            NUMBER;
        v_exhange_rate             NUMBER;
        v_rnd                      NUMBER := 0;
        v_rnd_bcur                 NUMBER;
        v_com_ret                  NUMBER;
        v_rsk_net_prem             NUMBER;
        v_net_rate                 NUMBER;
        v_gross_prem               NUMBER;
        v_pol_net_prem             NUMBER;
        v_eq_prem                  NUMBER;
        v_non_eq_prem              NUMBER;
        v_gross_si                 NUMBER;
        v_net_si                   NUMBER;
        v_tl                       NUMBER;
        v_phfund                   NUMBER;
        v_sd                       NUMBER;
        v_duties                   NUMBER;
        v_facre_diff_amt           NUMBER := 0;
        v_trans_sign               NUMBER;

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;

        CURSOR cur_all_risks IS
            SELECT prrd_code,
                   ipu_wef,
                   ipu_wet,
                   ipu_eff_wet,
                   ipu_eff_wef,
                   ipu_code,
                   ipu_sec_scl_code,
                   ipu_id,
                   prrd_comp_retention,
                   ipu_comm_endos_diff_amt,
                   ipu_quz_code,
                   ipu_quz_sht_desc,
                   ipu_prem_tax,
                   ipu_property_id,
                   ipu_status,
                   ipu_current_prrd_code,
                   ipu_endos_diff_amt,
                   ipu_si_diff,
                   prrd_net_prem,
                   prrd_ri_prem,
                   ipu_value,
                   ipu_reinsure_amt,
                   ipu_covt_code
              FROM gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_policies
             WHERE     ipu_code = prrd_ipu_code
                   AND ipu_pol_batch_no = pol_batch_no
                   AND pol_batch_no = v_pol_batch_no
                   AND ipu_code = v_ipu_code
                   --AND pol_loaded != 'Y'
                   AND prrd_tran_no = v_tran_no;

        CURSOR cur_rein (v_ipu_code NUMBER, v_trans_no NUMBER) ---(v_prrd_code NUMBER)
        IS
              --         SELECT   ROUND
              --                      (SUM (NVL (DECODE (trs_trtg_code,
              --                                         1001, NVL (ptotr_trt_prem_pcur, 0)
              --                                        ),
              --                                 0
              --                                )
              --                           ),v_rnd
              --                      ) mand_prem,
              --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
              --                                           1001, NVL (ptotr_trt_si_pcur, 0)
              --                                          ),
              --                                   0
              --                                  )
              --                             ), v_rnd
              --                        ) mand_si,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        1001, NVL (ptotr_refund_prem, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ), v_rnd
              --                     ) mand_ref_prem,
              --                  ROUND
              --                       (SUM (NVL (DECODE (trs_trtg_code,
              --                                          1001, NVL (ptotr_trt_comm_pcur, 0)
              --                                         ),
              --                                  0
              --                                 )
              --                            ),v_rnd
              --                       ) mand_com,
              --                  ROUND
              --                      (SUM (NVL (DECODE (trs_trtg_code,
              --                                         1001, NVL (ptotr_refund_com, 0)
              --                                        ),
              --                                 0
              --                                )
              --                           ), v_rnd
              --                      ) mand_ref_com,
              --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
              --                                           1001, NVL (ptotr_cession_pct, 0)
              --                                          ),
              --                                   0
              --                                  )
              --                             ),
              --                         4
              --                        ) mand_pct,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        1001, NVL (ptotr_prev_cession_rate, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),
              --                      4
              --                     ) mand_ref_pct,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        1001, NVL (ptotr_prev_cession_si, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) mand_ref_si,
              --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
              --                                           1003, NVL (ptotr_trt_prem_pcur, 0)
              --                                          ),
              --                                   0
              --                                  )
              --                             ),v_rnd
              --                        ) qs_prem,
              --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
              --                                           1003, NVL (ptotr_trt_si_pcur, 0)
              --                                          ),
              --                                   0
              --                                  )
              --                             ),v_rnd
              --                        ) qs_si,
              --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
              --                                           1003, NVL (ptotr_trt_comm_pcur, 0)
              --                                          ),
              --                                   0
              --                                  )
              --                             ),v_rnd
              --                        ) qs_com,
              --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
              --                                           1003, NVL (ptotr_cession_pct, 0)
              --                                          ),
              --                                   0
              --                                  )
              --                             ),
              --                         4
              --                        ) qs_pct,
              --                  ROUND
              --                      (SUM (NVL (DECODE (trs_trtg_code,
              --                                         1003, NVL (ptotr_refund_prem, 0)
              --                                        ),
              --                                 0
              --                                )
              --                           ),v_rnd
              --                      ) qs_ref_prem,
              --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
              --                                           1003, NVL (ptotr_refund_com, 0)
              --                                          ),
              --                                   0
              --                                  )
              --                             ),v_rnd
              --                        ) qs_ref_com,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        1003, NVL (ptotr_prev_cession_rate, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),
              --                      4
              --                     ) qs_ref_pct,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        1003, NVL (ptotr_prev_cession_si, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) qs_ref_si,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10041, NVL (ptotr_trt_prem_pcur, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) fstsup_prem,
              --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
              --                                           10041, NVL (ptotr_trt_si_pcur, 0)
              --                                          ),
              --                                   0
              --                                  )
              --                             ),v_rnd
              --                        ) fstsup_si,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10041, NVL (ptotr_trt_comm_pcur, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) fstsup_com,
              --                  ROUND
              --                      (SUM (NVL (DECODE (trs_trtg_code,
              --                                         10041, NVL (ptotr_cession_pct, 0)
              --                                        ),
              --                                 0
              --                                )
              --                           ),
              --                       4
              --                      ) fstsup_pct,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10041, NVL (ptotr_refund_prem, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) fstsup_ref_prem,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10041, NVL (ptotr_refund_com, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) fstsup_ref_com,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10041, NVL (ptotr_prev_cession_rate,
              --                                                    0)
              --                                       ),
              --                                0
              --                               )
              --                          ),
              --                      4
              --                     ) fstsup_ref_pct,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10041, NVL (ptotr_prev_cession_si, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) fstsup_ref_si,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10042, NVL (ptotr_trt_prem_pcur, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) secsup_prem,
              --                  ROUND (SUM (NVL (DECODE (trs_trtg_code,
              --                                           10042, NVL (ptotr_trt_si_tcur, 0)
              --                                          ),
              --                                   0
              --                                  )
              --                             ),v_rnd
              --                        ) secsup_si,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10042, NVL (ptotr_trt_comm_pcur, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) secsup_com,
              --                  ROUND
              --                      (SUM (NVL (DECODE (trs_trtg_code,
              --                                         10042, NVL (ptotr_cession_pct, 0)
              --                                        ),
              --                                 0
              --                                )
              --                           ),
              --                       4
              --                      ) secsup_pct,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10042, NVL (ptotr_refund_prem, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) secsup_ref_prem,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10042, NVL (ptotr_refund_com, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) secsup_ref_com,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10042, NVL (ptotr_prev_cession_rate,
              --                                                    0)
              --                                       ),
              --                                0
              --                               )
              --                          ),
              --                      4
              --                     ) secsup_ref_pct,
              --                  ROUND
              --                     (SUM (NVL (DECODE (trs_trtg_code,
              --                                        10042, NVL (ptotr_prev_cession_si, 0)
              --                                       ),
              --                                0
              --                               )
              --                          ),v_rnd
              --                     ) secsup_ref_si
              --             FROM gin_policy_rein_risk_details, gin_treaties
              --            WHERE ptotr_trs_code = trs_code AND ptotr_prrd_code = v_prrd_code
              --         GROUP BY ptotr_ipu_code;

              SELECT ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)),
                         v_rnd)    mand_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_earthqke_prem, 0)),
                                 0)),
                         v_rnd)    mand_eq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_net_less_eq_prem, 0)),
                                 0)),
                         v_rnd)    mand_noneq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_earthqke_comm, 0)),
                                 0)),
                         v_rnd)    mand_eq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_net_less_eq_comm, 0)),
                                 0)),
                         v_rnd)    mand_noneq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_si_pcur, 0)),
                                 0)),
                         v_rnd)    mand_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_prem, 0)),
                                 0)),
                         v_rnd)    mand_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)),
                         v_rnd)    mand_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_com, 0)),
                                 0)),
                         v_rnd)    mand_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)        mand_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1001, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)        mand_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_prev_cession_si, 0)),
                                 0)),
                         v_rnd)    mand_ref_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)),
                         v_rnd)    qs_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_si_pcur, 0)),
                                 0)),
                         v_rnd)    qs_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)),
                         v_rnd)    qs_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)        qs_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_prem, 0)),
                                 0)),
                         v_rnd)    qs_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_earthqke_prem, 0)),
                                 0)),
                         v_rnd)    qs_eq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_net_less_eq_prem, 0)),
                                 0)),
                         v_rnd)    qs_noneq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_earthqke_comm, 0)),
                                 0)),
                         v_rnd)    qs_eq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_net_less_eq_comm, 0)),
                                 0)),
                         v_rnd)    qs_noneq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_com, 0)),
                                 0)),
                         v_rnd)    qs_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1003, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)        qs_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_prev_cession_si, 0)),
                                 0)),
                         v_rnd)    qs_ref_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)),
                         v_rnd)    fstsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_earthqke_prem, 0)),
                                 0)),
                         v_rnd)    fstsup_eq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                                 0)),
                         v_rnd)    fstsup_noneq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_earthqke_comm, 0)),
                                 0)),
                         v_rnd)    fstsup_eq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                                 0)),
                         v_rnd)    fstsup_noneq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_si_pcur, 0)),
                                 0)),
                         v_rnd)    fstsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)),
                         v_rnd)    fstsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)        fstsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_prem, 0)),
                                 0)),
                         v_rnd)    fstsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_com, 0)),
                                 0)),
                         v_rnd)    fstsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)        fstsup_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_prev_cession_si, 0)),
                                 0)),
                         v_rnd)    fstsup_ref_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)),
                         v_rnd)    secsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_earthqke_prem, 0)),
                                 0)),
                         v_rnd)    secsup_eq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                                 0)),
                         v_rnd)    secsup_noneq_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_earthqke_comm, 0)),
                                 0)),
                         v_rnd)    secsup_eq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                                 0)),
                         v_rnd)    secsup_noneq_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_si_tcur, 0)),
                                 0)),
                         v_rnd)    secsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)),
                         v_rnd)    secsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)        secsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_prem, 0)),
                                 0)),
                         v_rnd)    secsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_com, 0)),
                                 0)),
                         v_rnd)    secsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)        secsup_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_prev_cession_si, 0)),
                                 0)),
                         v_rnd)    secsup_ref_si
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ipu_code = v_ipu_code
                     AND ptotr_ggt_tran_no = v_trans_no
            --                     AND ptotr_prrd_code = v_prrd_code
            GROUP BY ptotr_ipu_code;


        CURSOR cur_pol_rein (v_trans_no NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_si_pcur, 0)),
                             0))    mand_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))    mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))    mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_si_pcur, 0)),
                             0))    qs_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))    qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))    qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_si_pcur, 0)),
                             0))    fstsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))    fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))    fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_si_pcur, 0)),
                             0))    secsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))    secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))    secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    secsup_noneq_com
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ggt_tran_no = v_trans_no
            GROUP BY ptotr_ggt_tran_no;

        CURSOR cur_rsk_rein_dtls (v_ipu_code NUMBER, v_trans_no NUMBER) ---(v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_policy_rein_risk_details, gin_treaties
             WHERE     ptotr_trs_code = trs_code
                   AND ptotr_ipu_code = v_ipu_code
                   AND ptotr_ggt_tran_no = v_trans_no;

        --                   AND ptotr_prrd_code = v_prrd_code;

        CURSOR cur_rsk_rein_part_dtls (v_ptotr_code NUMBER)
        IS
            SELECT *
              FROM gin_participations
             WHERE part_ptotr_code = v_ptotr_code;

        CURSOR cur_pol_facre IS
            SELECT SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_comm_amt, 0)),
                           0))    facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_comm, 0)),
                           0))    facre_eq_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_amt, 0)),
                           0))    facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_amount, 0)),
                           0))    facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_prem, 0)),
                           0))    facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))    facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_comm, 0)),
                           0))    facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))    facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_comm_amt, 0)),
                           0))    ob_facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_prem_amt, 0)),
                           0))    ob_facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_amount, 0)),
                           0))    ob_facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))    ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))    ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))    ob_facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))    ob_facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_diff_amt, 0)),
                           0))    fc_prem_diff_amt
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_tran_no;

        CURSOR cur_facre                               ---(v_prrd_code NUMBER)
                         IS
              SELECT SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_amt, 0)),
                             0))    facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_earthqke_comm, 0)),
                             0))    facre_eq_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))    facre_noneq_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prem_amt, 0)),
                             0))    facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_earthqke_prem, 0)),
                             0))    facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))    facre_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_amount, 0)),
                             0))    facre_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_rate, 0)),
                             0))    facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_comm, 0)),
                             0))    facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_comm_rate, 0)),
                             0))    facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_rate, 0)),
                             0))    facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_prem, 0)),
                             0))    facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_rate, 0)),
                             0))    facre_ref_prem_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_si, 0)),
                             0))    facre_ref_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_amt, 0)),
                             0))    ob_facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prem_amt, 0)),
                             0))    ob_facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_amount, 0)),
                             0))    ob_facre_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_rate, 0)),
                             0))    ob_facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_comm, 0)),
                             0))    ob_facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_comm_rate, 0)),
                             0))    ob_facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_rate, 0)),
                             0))    ob_facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_prem, 0)),
                             0))    ob_facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_rate, 0)),
                             0))    ob_facre_ref_prem_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_si, 0)),
                             0))    ob_facre_ref_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))    ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))    ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))    ob_facre_eq_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))    ob_facre_noneq_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prem_diff_amt, 0)),
                             0))    fc_prem_diff_amt
                FROM gin_facre_cessions
               WHERE fc_ggt_tran_no = v_tran_no  ---fc_prrd_code = v_prrd_code
            GROUP BY fc_prrd_code;

        CURSOR cur_risk_facre_dtls (v_ipu_code NUMBER) ---(v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_tran_no AND fc_ipu_code = v_ipu_code; ---fc_prrd_code = v_prrd_code;

        CURSOR cur_pol_pool_trans IS
            SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                   SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                   SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                   SUM (NVL (prprd_pool_si, 0))                pool_si
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_tran_no
                   AND prprd_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_pl_dtls                        ---(v_prrd_code NUMBER)
                                IS
              SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                     SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                     SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                     SUM (NVL (prprd_pool_si, 0))                pool_si,
                     SUM (NVL (prprd_rein_pool_rate, 0))         pool_rate
                FROM gin_pol_rein_pool_risk_details
               WHERE     prprd_ggt_tran_no = v_tran_no
                     AND prprd_pol_batch_no = v_pol_batch_no
            --               WHERE prprd_prrd_code = v_prrd_code
            GROUP BY prprd_prrd_code;

        CURSOR cur_risk_pool_dtls (v_ipu_code NUMBER)  ---(v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_tran_no
                   AND prprd_pol_batch_no = v_pol_batch_no
                   AND prprd_ipu_code = v_ipu_code; ---prprd_prrd_code = v_prrd_code;

        CURSOR cur_policy_own_ret (v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   ROUND (
                       SUM (
                             NVL (prrd_net_prem, 0)
                           * NVL (prrd_com_retention_rate, 0)
                           / 100),
                       v_rnd)
                       comp_gross_ret,
                   SUM (prrd_net_prem)
                       comp_net_ret,
                   --    ROUND (SUM (DECODE(NVL(ipu_overrideride_ret_type,'S'),'P',prrd_net_prem,(NVL (prrd_ri_prem, 0) * NVL (prrd_comp_net_rate, 0) / 100))),
                   --         v_rnd
                   --        ) comp_net_ret,
                   SUM (NVL (ipu_reinsure_amt, 0))
                       comp_gross_si,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_si
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_code = v_ipu_code
                   AND ipu_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_own_ret (v_ipucode NUMBER, v_trans_no NUMBER) ---(v_prrd_code NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   ROUND (
                       SUM (
                             NVL (prrd_net_prem, 0)
                           * NVL (prrd_com_retention_rate, 0)
                           / 100),
                       v_rnd)
                       comp_gross_ret,
                   SUM (prrd_net_prem)
                       comp_net_ret,
                   SUM (NVL (ipu_reinsure_amt, 0))
                       comp_gross_si,
                   SUM (NVL (prrd_comp_net_rate, 0))
                       comp_net_rate,
                   SUM (NVL (prrd_ri_prem, 0))
                       comp_gross_prem,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_si
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   --                   AND prrd_code = v_prrd_code
                   AND ipu_code = v_ipucode
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        v_ob_facre_eq_com          NUMBER;
        v_ob_facre_noneq_com       NUMBER;
    BEGIN
        FOR p IN cur_pol
        LOOP
            --         v_exhange_rate := p.pol_cur_rate
            v_exhange_rate :=
                get_currexch_rate (p.pol_cur_code, v_rnd, v_rnd_bcur);
            v_prem_type := NULL;
            v_prem_type := p.pol_policy_status;
            v_comp_rate := 0;
            v_ri_premium := 0;
            v_facre_com_rate := 0;
            v_facre_prem_rate := 0;
            v_facre_com := 0;
            v_facre_ref_com := 0;
            v_facre_prem := 0;
            v_facre_ref_prem := 0;
            v_facre_com_rate := 0;
            v_facre_ref_com_rate := 0;
            v_facre_ref_prem_rate := 0;
            v_ob_facre_com_rate := 0;
            v_ob_facre_ref_com_rate := 0;
            v_ob_facre_com := 0;
            v_ob_facre_ref_com := 0;
            v_ob_facre_prem := 0;
            v_ob_facre_ref_prem := 0;
            v_ob_facre_prem_rate := 0;
            v_ob_facre_ref_prem_rate := 0;
            v_pool_prem := 0;
            v_pool_comm := 0;
            v_pool_vat := 0;
            v_pool_si := 0;
            v_pool_rate := 0;
            v_pool_ref_prem := 0;
            v_pool_ref_comm := 0;
            v_gross_si := 0;
            v_net_si := 0;
            v_ob_facre_eq_com := 0;
            v_ob_facre_noneq_com := 0;

            FOR cur_pol_rein_rec IN cur_pol_rein (v_tran_no)
            LOOP
                v_mand_prem := cur_pol_rein_rec.mand_prem;
                v_mand_si := cur_pol_rein_rec.mand_si;
                v_mand_eq_prem := cur_pol_rein_rec.mand_eq_prem;
                v_mand_noneq_prem := cur_pol_rein_rec.mand_noneq_prem;
                v_mand_com := cur_pol_rein_rec.mand_com;
                v_mand_eq_com := cur_pol_rein_rec.mand_eq_com;
                v_mand_noneq_com := cur_pol_rein_rec.mand_noneq_com;
                v_qs_prem := cur_pol_rein_rec.qs_prem;
                v_qs_si := cur_pol_rein_rec.qs_si;
                v_qs_eq_prem := cur_pol_rein_rec.qs_eq_prem;
                v_qs_noneq_prem := cur_pol_rein_rec.qs_noneq_prem;
                v_qs_com := cur_pol_rein_rec.qs_com;
                v_qs_eq_com := cur_pol_rein_rec.qs_eq_com;
                v_qs_noneq_com := cur_pol_rein_rec.qs_noneq_com;
                v_fstsup_prem := cur_pol_rein_rec.fstsup_prem;
                v_fstsup_si := cur_pol_rein_rec.fstsup_si;
                v_fstsup_eq_prem := cur_pol_rein_rec.fstsup_eq_prem;
                v_fstsup_noneq_prem := cur_pol_rein_rec.fstsup_noneq_prem;
                v_fstsup_com := cur_pol_rein_rec.fstsup_com;
                v_fstsup_eq_com := cur_pol_rein_rec.fstsup_eq_com;
                v_fstsup_noneq_com := cur_pol_rein_rec.fstsup_noneq_com;
                v_secsup_prem := cur_pol_rein_rec.secsup_prem;
                v_secsup_si := cur_pol_rein_rec.secsup_si;
                v_secsup_eq_prem := cur_pol_rein_rec.secsup_eq_prem;
                v_secsup_noneq_prem := cur_pol_rein_rec.secsup_noneq_prem;
                v_secsup_com := cur_pol_rein_rec.secsup_com;
                v_secsup_eq_com := cur_pol_rein_rec.secsup_eq_com;
                v_secsup_noneq_com := cur_pol_rein_rec.secsup_noneq_com;
            END LOOP;                                      ---cur_pol_rein_rec

            ---facre sessions
            FOR cur_facre_rec IN cur_pol_facre
            LOOP
                v_facre_prem :=
                    NVL (v_facre_prem, 0) + NVL (cur_facre_rec.facre_prem, 0);
                v_facre_si :=
                    NVL (v_facre_si, 0) + NVL (cur_facre_rec.facre_si, 0);
                v_facre_eq_prem :=
                      NVL (v_facre_eq_prem, 0)
                    + NVL (cur_facre_rec.facre_eq_prem, 0);
                v_facre_noneq_prem :=
                      NVL (v_facre_noneq_prem, 0)
                    + NVL (cur_facre_rec.facre_noneq_prem, 0);
                v_facre_eq_com :=
                      NVL (v_facre_eq_com, 0)
                    + NVL (cur_facre_rec.facre_eq_com, 0);
                v_facre_noneq_com :=
                      NVL (v_facre_noneq_com, 0)
                    + NVL (cur_facre_rec.facre_noneq_comm, 0);
                v_facre_com :=
                    NVL (v_facre_com, 0) + NVL (cur_facre_rec.facre_com, 0);
                v_ob_facre_prem :=
                      NVL (v_ob_facre_prem, 0)
                    + NVL (cur_facre_rec.ob_facre_prem, 0);
                v_ob_facre_si :=
                      NVL (v_ob_facre_si, 0)
                    + NVL (cur_facre_rec.ob_facre_si, 0);
                v_ob_facre_eq_prem :=
                      NVL (v_ob_facre_eq_prem, 0)
                    + NVL (cur_facre_rec.ob_facre_eq_prem, 0);
                v_ob_facre_eq_com :=
                      NVL (v_ob_facre_eq_com, 0)
                    + NVL (cur_facre_rec.ob_facre_eq_comm, 0);
                v_ob_facre_noneq_prem :=
                      NVL (v_ob_facre_noneq_prem, 0)
                    + NVL (cur_facre_rec.ob_facre_noneq_prem, 0);
                v_ob_facre_noneq_com :=
                      NVL (v_ob_facre_noneq_com, 0)
                    + NVL (cur_facre_rec.ob_facre_noneq_comm, 0);
                v_ob_facre_com :=
                      NVL (v_ob_facre_com, 0)
                    + NVL (cur_facre_rec.ob_facre_com, 0);
                v_facre_diff_amt :=
                      NVL (v_facre_diff_amt, 0)
                    + NVL (cur_facre_rec.fc_prem_diff_amt, 0);
            END LOOP;

            v_com_ret := 0;
            v_rsk_net_prem := 0;

            -- pool at policy level
            FOR cur_pol_pool IN cur_pol_pool_trans
            LOOP
                v_pool_prem := cur_pol_pool.pool_prem;
                v_pool_comm := cur_pol_pool.pool_comm;
                v_pool_vat := cur_pol_pool.pool_vat;
                v_pool_si := cur_pol_pool.pool_si;
            END LOOP;

            FOR cur_policy_own_ret_rec IN cur_policy_own_ret (v_tran_no)
            LOOP
                v_com_ret := cur_policy_own_ret_rec.comp_gross_ret;
                v_pol_net_prem :=
                      cur_policy_own_ret_rec.comp_net_ret
                    - NVL (v_pool_prem, 0)
                    + NVL (v_facre_diff_amt, 0);
                v_eq_prem := cur_policy_own_ret_rec.comp_eq_prem;
                v_non_eq_prem :=
                      cur_policy_own_ret_rec.comp_non_eq_prem
                    - NVL (v_pool_prem, 0);
                v_gross_si := cur_policy_own_ret_rec.comp_gross_si;
                v_net_si := cur_policy_own_ret_rec.comp_net_si;
            END LOOP;

            BEGIN
                BEGIN
                    SELECT SUM (
                               DECODE (UPPER (trnt_code),
                                       'TL', NVL (ptx_amount, 0),
                                       0))                      tl,
                             SUM (
                                 DECODE (UPPER (trnt_code),
                                         'PHFUND', NVL (ptx_amount, 0),
                                         0))
                           + SUM (
                                 DECODE (UPPER (trnt_code),
                                         'COPHFUND', NVL (ptx_amount, 0),
                                         0))                    phfund,
                           SUM (
                               DECODE (UPPER (trnt_code),
                                       'SD', NVL (ptx_amount, 0),
                                       'MPSD', NVL (ptx_amount, 0),
                                       0))                      sd,
                           SUM (
                               DECODE (UPPER (trnt_code),
                                       'TL', 0,
                                       'SD', 0,
                                       'PHFUND', 0,
                                       'COPHFUND', 0,
                                       'MPSD', 0,
                                       NVL (ptx_amount, 0)))    other_duties
                      INTO v_tl,
                           v_phfund,
                           v_sd,
                           v_duties
                      FROM gin_policy_taxes, gin_transaction_types
                     WHERE     ptx_trac_trnt_code = trnt_code
                           AND ptx_pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        NULL;
                        v_duties := 0;
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR, UNABLE TO RETRIEVE POLICY TAXES..');
                END;

                v_duties := NVL (v_duties, 0) + NVL (v_phfund, 0);

                SELECT SIGN (p.pol_tot_endos_diff_amt)
                  INTO v_trans_sign
                  FROM DUAL;

                BEGIN
                    v_pr_code := NULL;

                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_pr_code_seq.NEXTVAL)
                      INTO v_pr_code
                      FROM DUAL;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. ERR AT 5...');
                END;

                BEGIN
                    INSERT INTO gin_policy_register (pr_code,
                                                     pr_transaction_date,
                                                     pr_pol_policy_no,
                                                     pr_pol_ren_endos_no,
                                                     pr_pol_batch_no,
                                                     pr_agnt_agent_code,
                                                     pr_agnt_sht_desc,
                                                     pr_wef_dt,
                                                     pr_wet_dt,
                                                     pr_cur_code,
                                                     pr_brn_code,
                                                     pr_cur_symbol,
                                                     pr_cur_rate,
                                                     pr_brn_sht_desc,
                                                     pr_inception_uwyr,
                                                     pr_pro_code,
                                                     pr_prev_batch_no,
                                                     pr_prem_type,
                                                     pr_mand_prem,
                                                     pr_mand_com,
                                                     pr_quota_prem,
                                                     pr_quota_com,
                                                     pr_fstsup_prem,
                                                     pr_fstsup_com,
                                                     pr_secsup_prem,
                                                     pr_secsup_com,
                                                     pr_facre_prem,
                                                     pr_facre_com,
                                                     pr_comp_net_prem,
                                                     pr_comp_net_com,
                                                     pr_mand_eq_prem,
                                                     pr_mand_noneq_prem,
                                                     pr_fstsup_eq_prem,
                                                     pr_fstsup_noneq_prem,
                                                     pr_secsup_eq_prem,
                                                     pr_secsup_noneq_prem,
                                                     pr_quota_eq_prem,
                                                     pr_quota_noneq_prem,
                                                     pr_facre_eq_prem,
                                                     pr_facre_noneq_prem,
                                                     pr_earthquake_prem,
                                                     pr_ri_net_less_eq_prem,
                                                     pr_mand_eq_com,
                                                     pr_mand_noneq_com,
                                                     pr_quota_eq_com,
                                                     pr_quota_noneq_com,
                                                     pr_fstsup_eq_com,
                                                     pr_fstsup_noneq_com,
                                                     pr_secsup_eq_com,
                                                     pr_secsup_noneq_com,
                                                     pr_facre_eq_com,
                                                     pr_facre_noneq_com,
                                                     pr_si_diff,
                                                     pr_endos_diff_amt,
                                                     pr_comm_amt,
                                                     pr_comm_endos_diff_amt,
                                                     pr_uw_year,
                                                     pr_tran_type,
                                                     pr_client_policy_number,
                                                     pr_prp_code,
                                                     pr_current_status,
                                                     pr_uwyr_length,
                                                     pr_policy_cover_to,
                                                     pr_policy_cover_from,
                                                     pr_ggt_trans_no,
                                                     pr_facre_ob_prem,
                                                     pr_facre_ob_com,
                                                     pr_pool_com,
                                                     pr_pool_prem,
                                                     pr_pool_si,
                                                     pr_pool_vat,
                                                     --pr_pool_rate,
                                                     pr_coinsurance,
                                                     pr_mand_si,
                                                     pr_quota_si,
                                                     pr_fstsup_si,
                                                     pr_secsup_si,
                                                     pr_facre_si,
                                                     pr_facre_ob_si,
                                                     pr_net_si,
                                                     pr_gross_si,
                                                     pr_pro_sht_desc,
                                                     pr_policy_type,
                                                     pr_stamp_duty,
                                                     pr_tl,
                                                     pr_other_duties,
                                                     pr_wtht,
                                                     pr_prem_tax,
                                                     pr_phfund,
                                                     pr_health_tax,
                                                     pr_road_safety_tax,
                                                     pr_motor_levy,
                                                     pr_certchg)
                             VALUES (
                                 v_pr_code,
                                 TRUNC (v_tran_dt),
                                 p.pol_policy_no,
                                 p.pol_ren_endos_no,
                                 p.pol_batch_no,
                                 p.pol_agnt_agent_code,
                                 p.pol_agnt_sht_desc,
                                 p.pol_wef_dt,
                                 p.pol_wet_dt,
                                 p.pol_cur_code,
                                 p.pol_brn_code,
                                 p.pol_cur_symbol,
                                 v_exhange_rate,
                                 p.pol_brn_sht_desc,
                                 p.pol_inception_uwyr,
                                 p.pol_pro_code,
                                 p.pol_prev_batch_no,
                                 v_prem_type,
                                 -v_mand_prem,
                                 -v_mand_com,
                                 -v_qs_prem,
                                 -v_qs_com,
                                 -v_fstsup_prem,
                                 -v_fstsup_com,
                                 -v_secsup_prem,
                                 -v_secsup_com,
                                 -v_facre_prem,
                                 -v_facre_com,
                                 -v_pol_net_prem,
                                 v_com_ret,
                                 -v_mand_eq_prem,
                                 -v_mand_noneq_prem,
                                 -v_fstsup_eq_prem,
                                 -v_fstsup_noneq_prem,
                                 -v_secsup_eq_prem,
                                 -v_secsup_noneq_prem,
                                 -v_qs_eq_prem,
                                 -v_qs_noneq_prem,
                                 -v_facre_eq_prem,
                                 -v_facre_noneq_prem,
                                 -v_eq_prem,
                                 -v_non_eq_prem,
                                 -v_mand_eq_com,
                                 -v_mand_noneq_com,
                                 -v_qs_eq_com,
                                 -v_qs_noneq_com,
                                 -v_fstsup_eq_com,
                                 -v_fstsup_noneq_com,
                                 -v_secsup_eq_com,
                                 -v_secsup_noneq_com,
                                 -v_facre_eq_com,
                                 -v_facre_noneq_com,
                                 0,
                                   v_trans_sign
                                 * ABS (p.pol_tot_endos_diff_amt),
                                 0,
                                 0,
                                 p.pol_uw_year,
                                 'RIR',
                                 p.pol_client_policy_number,
                                 p.pol_prp_code,
                                 p.pol_current_status,
                                 p.pol_uwyr_length,
                                 p.pol_policy_cover_to,
                                 p.pol_policy_cover_from,
                                 v_tran_no,
                                 -v_ob_facre_prem,
                                 -v_ob_facre_com,
                                 -v_pool_comm,
                                 -v_pool_prem,
                                 v_pool_si,
                                 -v_pool_vat,
                                 p.pol_coinsurance,
                                 v_mand_si,
                                 v_qs_si,
                                 v_fstsup_si,
                                 v_secsup_si,
                                 v_facre_si,
                                 v_ob_facre_si,
                                 v_net_si,
                                 v_gross_si,
                                 p.pol_pro_sht_desc,
                                 p.pol_policy_type,
                                 -v_sd,
                                 -v_tl,
                                 -v_duties,
                                 -p.pol_wtht,
                                 -p.pol_prem_tax,
                                 DECODE (p.pol_tot_phfund,
                                         NULL, -p.pol_tot_phfund,
                                         0, -p.pol_phfund,
                                         -p.pol_tot_phfund),
                                 -p.pol_health_tax,
                                 -p.pol_road_safety_tax,
                                 -p.pol_motor_levy,
                                 -p.pol_certchg);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO POST REINSURANCE REFUNDS INTO POLICY REGISTER...AT 6..');
                END;

                --raise_error('here');
                ------------------------post risk new cessions-------------register
                FOR cur_all_risks_rec IN cur_all_risks
                LOOP
                    v_pool_prem := 0;
                    v_pool_comm := 0;
                    v_pool_vat := 0;
                    v_pool_si := 0;
                    v_pool_rate := 0;
                    v_facre_com_rate := 0;
                    v_facre_com := 0;
                    v_facre_prem := 0;
                    v_facre_prem_rate := 0;
                    v_ob_facre_com_rate := 0;
                    v_ob_facre_com := 0;
                    v_ob_facre_prem := 0;
                    v_ob_facre_prem_rate := 0;
                    v_mand_prem := 0;
                    v_mand_si := 0;
                    v_mand_pct := 0;
                    v_mand_com := 0;
                    v_qs_prem := 0;
                    v_qs_si := 0;
                    v_qs_pct := 0;
                    v_qs_com := 0;
                    v_fstsup_prem := 0;
                    v_fstsup_si := 0;
                    v_fstsup_pct := 0;
                    v_fstsup_com := 0;
                    v_secsup_prem := 0;
                    v_secsup_si := 0;
                    v_secsup_pct := 0;
                    v_secsup_com := 0;
                    v_facre_diff_amt := 0;
                    v_eq_prem := 0;
                    v_fstsup_eq_prem := 0;
                    v_fstsup_noneq_prem := 0;
                    v_fstsup_eq_com := 0;
                    v_fstsup_noneq_com := 0;
                    v_secsup_eq_prem := 0;
                    v_secsup_noneq_prem := 0;
                    v_secsup_eq_com := 0;
                    v_secsup_noneq_com := 0;
                    v_mand_eq_prem := 0;
                    v_mand_noneq_prem := 0;
                    v_mand_eq_com := 0;
                    v_mand_noneq_com := 0;
                    v_ob_facre_eq_com := 0;
                    v_ob_facre_noneq_com := 0;
                    v_facre_eq_prem := 0;
                    v_facre_noneq_prem := 0;
                    v_facre_noneq_com := 0;
                    v_ob_facre_eq_prem := 0;
                    v_ob_facre_noneq_prem := 0;
                    v_ob_facre_noneq_com := 0;
                    v_ob_facre_eq_com := 0;

                    FOR cur_rsk_rein_rec
                        IN cur_rein (cur_all_risks_rec.ipu_code, v_tran_no) ---(cur_all_risks_rec.prrd_code)
                    LOOP
                        v_mand_prem := cur_rsk_rein_rec.mand_prem;
                        v_mand_si := cur_rsk_rein_rec.mand_si;
                        v_mand_pct := cur_rsk_rein_rec.mand_pct;

                        v_mand_eq_prem := cur_rsk_rein_rec.mand_eq_prem;
                        v_mand_noneq_prem := cur_rsk_rein_rec.mand_noneq_prem;

                        v_mand_com := cur_rsk_rein_rec.mand_com;

                        v_mand_eq_com := cur_rsk_rein_rec.mand_eq_com;
                        v_mand_noneq_com := cur_rsk_rein_rec.mand_noneq_com;

                        v_qs_prem := cur_rsk_rein_rec.qs_prem;
                        v_qs_si := cur_rsk_rein_rec.qs_si;
                        v_qs_pct := cur_rsk_rein_rec.qs_pct;

                        v_qs_eq_prem := cur_rsk_rein_rec.qs_eq_prem;
                        v_qs_noneq_prem := cur_rsk_rein_rec.qs_noneq_prem;

                        v_qs_com := cur_rsk_rein_rec.qs_com;

                        v_qs_eq_com := cur_rsk_rein_rec.qs_eq_com;
                        v_qs_noneq_com := cur_rsk_rein_rec.qs_noneq_com;

                        v_fstsup_prem := cur_rsk_rein_rec.fstsup_prem;
                        v_fstsup_si := cur_rsk_rein_rec.fstsup_si;
                        v_fstsup_pct := cur_rsk_rein_rec.fstsup_pct;

                        v_fstsup_eq_prem := cur_rsk_rein_rec.fstsup_eq_prem;
                        v_fstsup_noneq_prem :=
                            cur_rsk_rein_rec.fstsup_noneq_prem;

                        v_fstsup_com := cur_rsk_rein_rec.fstsup_com;

                        v_fstsup_eq_com := cur_rsk_rein_rec.fstsup_eq_com;
                        v_fstsup_noneq_com :=
                            cur_rsk_rein_rec.fstsup_noneq_com;

                        v_secsup_prem := cur_rsk_rein_rec.secsup_prem;
                        v_secsup_si := cur_rsk_rein_rec.secsup_si;
                        v_secsup_pct := cur_rsk_rein_rec.secsup_pct;

                        v_secsup_eq_prem := cur_rsk_rein_rec.secsup_eq_prem;
                        v_secsup_noneq_prem :=
                            cur_rsk_rein_rec.secsup_noneq_prem;

                        v_secsup_com := cur_rsk_rein_rec.secsup_com;

                        v_secsup_eq_com := cur_rsk_rein_rec.secsup_eq_com;
                        v_secsup_noneq_com :=
                            cur_rsk_rein_rec.secsup_noneq_com;
                    END LOOP;

                    FOR cur_facre_rec IN cur_facre ---(cur_all_risks_rec.prrd_code)
                    LOOP
                        v_facre_com_rate := cur_facre_rec.facre_com_rate;
                        v_facre_com := cur_facre_rec.facre_com;
                        v_facre_prem := cur_facre_rec.facre_prem;
                        v_facre_si := cur_facre_rec.facre_si;
                        v_facre_prem_rate := cur_facre_rec.facre_rate;
                        v_ob_facre_com_rate :=
                            cur_facre_rec.ob_facre_com_rate;
                        v_ob_facre_com := cur_facre_rec.ob_facre_com;
                        v_ob_facre_si := cur_facre_rec.ob_facre_si;
                        v_ob_facre_prem_rate := cur_facre_rec.ob_facre_rate;
                        v_facre_diff_amt :=
--                              NVL (v_facre_diff_amt, 0)
--                            + 
                            NVL (cur_facre_rec.fc_prem_diff_amt, 0);

                        v_facre_eq_prem :=
--                              NVL (v_facre_eq_prem, 0)
--                            + 
                            NVL (cur_facre_rec.facre_eq_prem, 0);
                        v_facre_noneq_prem := --NVL (v_facre_noneq_prem, 0)+ 
                        NVL (cur_facre_rec.facre_noneq_prem, 0);
                        v_facre_eq_com :=
--                              NVL (v_facre_eq_com, 0)
--                            + 
                            NVL (cur_facre_rec.facre_eq_com, 0);
                    v_facre_noneq_com :=--NVL (v_facre_noneq_com, 0)+ 
                    NVL (cur_facre_rec.facre_noneq_com, 0);
                    v_ob_facre_eq_prem :=--NVL (v_ob_facre_eq_prem, 0)+ 
                    NVL (cur_facre_rec.ob_facre_eq_prem, 0);
                     v_ob_facre_noneq_prem :=--NVL (v_ob_facre_noneq_prem, 0)+ 
                     NVL (cur_facre_rec.ob_facre_noneq_prem, 0);
                    v_ob_facre_eq_com :=--NVL (v_ob_facre_eq_com, 0)+ 
                    NVL (cur_facre_rec.ob_facre_eq_com, 0);
                     v_ob_facre_noneq_com :=--NVL (v_ob_facre_noneq_com, 0)+ 
                     NVL (cur_facre_rec.ob_facre_noneq_com, 0);

                    END LOOP;

                    FOR cur_risk_pool IN cur_risk_pl_dtls ---(cur_all_risks_rec.prrd_code)
                    LOOP
                        v_pool_prem := cur_risk_pool.pool_prem;
                        v_pool_comm := cur_risk_pool.pool_comm;
                        v_pool_vat := cur_risk_pool.pool_vat;
                        v_pool_si := cur_risk_pool.pool_si;
                        v_pool_rate := cur_risk_pool.pool_rate;
                    END LOOP;

                    FOR cur_risk_own_ret_rec
                        IN cur_risk_own_ret (cur_all_risks_rec.ipu_code,
                                             v_tran_no) ---(cur_all_risks_rec.prrd_code)
                    LOOP
                        v_rsk_net_prem :=
                              cur_risk_own_ret_rec.comp_net_ret
                            - NVL (v_pool_prem, 0)
                            + NVL (v_facre_diff_amt, 0);
                        v_net_rate := cur_risk_own_ret_rec.comp_net_rate;
                        v_eq_prem := cur_risk_own_ret_rec.comp_eq_prem;
                        v_non_eq_prem :=
                              cur_risk_own_ret_rec.comp_non_eq_prem
                            - NVL (v_pool_prem, 0);
                        v_gross_si := cur_risk_own_ret_rec.comp_gross_si;
                        v_net_si := cur_risk_own_ret_rec.comp_net_si;
                        v_gross_prem := cur_risk_own_ret_rec.comp_gross_prem;
                    END LOOP;

                    --  RAISE_ERROR('PRRD PREM='||cur_all_risks_rec.prrd_code||'EQ PREM='||v_eq_prem);
                    BEGIN
                        v_rskrg_code := NULL;

                        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                               || gin_rskrg_code_seq.NEXTVAL
                          INTO v_rskrg_code
                          FROM DUAL;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR : UNABLE TO GENERATE SEQUENCE GIN_RSKRG_CODE_SEQ..AT 7.');
                    END;

                    BEGIN
                        --DBMS_OUTPUT.PUT_LINE('inserting risk reg new cecssion');
                        INSERT INTO gin_policy_risk_reg (
                                        rskrg_code,
                                        rskrg_pol_policy_no,
                                        rskrg_pol_ren_endos_no,
                                        rskrg_pol_batch_no,
                                        rskrg_wef_dt,
                                        rskrg_wet_dt,
                                        rskrg_risk_cover_to,
                                        rskrg_risk_cover_from,
                                        rskrg_ipu_code,
                                        rskrg_scl_code,
                                        rskrg_ipu_id,
                                        rskrg_pr_code,
                                        rskrg_ggt_trans_no,
                                        rskrg_mand_rate,
                                        rskrg_mand_prem,
                                        rskrg_mand_com,
                                        rskrg_quota_rate,
                                        rskrg_quota_com,
                                        rskrg_fstsup_rate,
                                        rskrg_fstsup_com,
                                        rskrg_secsup_rate,
                                        rskrg_secsup_com,
                                        rskrg_fstsup_prem,
                                        rskrg_secsup_prem,
                                        rskrg_tran_date,
                                        rskrg_quota_prem,
                                        rskrg_uw_yr,
                                        rskrg_comm_endos_diff_amt,
                                        rskrg_cur_code,
                                        rskrg_cur_symbol,
                                        rskrg_quz_code,
                                        rskrg_quz_sht_desc,
                                        rskrg_exchange_rate,
                                        rskrg_prem_tax,
                                        rskrg_ipu_property_id,
                                        rskrg_tran_type,
                                        rskrg_coin_own_pct,
                                        rskrg_com_ret_rate,
                                        rskrg_facre_rate,
                                        rskrg_endos_diff_amt,
                                        rskrg_si_diff,
                                        rskrg_facre_prem,
                                        rskrg_facre_com,
                                        rskrg_brn_code,
                                        rskrg_brn_sht_desc,
                                        rskrg_policy_type,
                                        rskrg_agnt_sht_desc,
                                        rskrg_agnt_agent_code,
                                        rskrg_prp_code,
                                        rskrg_facre_ob_prem,
                                        rskrg_facre_ob_rate,
                                        rskrg_facre_ob_com,
                                        rskrg_pool_prem,
                                        rskrg_pool_com,
                                        rskrg_pool_si,
                                        rskrg_pool_vat,
                                        rskrg_pool_rate,
                                        rskrg_mand_si,
                                        rskrg_quota_si,
                                        rskrg_fstsup_si,
                                        rskrg_secsup_si,
                                        rskrg_facre_si,
                                        rskrg_facre_ob_si,
                                        rskrg_net_si,
                                        rskrg_gross_si,
                                        rskrg_comp_net_ret,
                                        rskrg_reinsure_amt,
                                        rskrg_sum_insured,
                                        rskrg_covt_code,
                                        rskrg_earthquake_prem,
                                        rskrg_fstsup_eq_prem,
                                        rskrg_fstsup_noneq_prem,
                                        rskrg_fstsup_eq_com,
                                        rskrg_fstsup_noneq_com,
                                        rskrg_secsup_eq_prem,
                                        rskrg_secsup_noneq_prem,
                                        rskrg_secsup_eq_com,
                                        rskrg_secsup_noneq_com,
                                        rskrg_mand_eq_prem,
                                        rskrg_mand_noneq_prem,
                                        rskrg_mand_eq_com,
                                        rskrg_mand_noneq_com,
                                        rskrg_facre_eq_prem,
                                        rskrg_facre_noneq_prem,
                                        rskrg_facre_noneq_com,
                                        rskrg_facre_eq_ob_prem,
                                        rskrg_facre_noneq_ob_prem,
                                        rskrg_facre_noneq_ob_com,
                                        rskrg_facre_eq_ob_com)
                                 VALUES (
                                     v_rskrg_code,
                                     p.pol_policy_no,
                                     p.pol_ren_endos_no,
                                     p.pol_batch_no,
                                     cur_all_risks_rec.ipu_wef,
                                     cur_all_risks_rec.ipu_wef,
                                     cur_all_risks_rec.ipu_eff_wet,
                                     cur_all_risks_rec.ipu_eff_wef,
                                     cur_all_risks_rec.ipu_code,
                                     cur_all_risks_rec.ipu_sec_scl_code,
                                     cur_all_risks_rec.ipu_id,
                                     v_pr_code,
                                     v_tran_no,
                                     NVL (v_mand_pct, 0),
                                     -NVL (v_mand_prem, 0),
                                     -NVL (v_mand_com, 0),
                                     NVL (v_qs_pct, 0),
                                     -NVL (v_qs_com, 0),
                                     NVL (v_fstsup_pct, 0),
                                     -NVL (v_fstsup_com, 0),
                                     NVL (v_secsup_pct, 0),
                                     -NVL (v_secsup_com, 0),
                                     -NVL (v_fstsup_prem, 0),
                                     -NVL (v_secsup_prem, 0),
                                     TRUNC (v_tran_dt),
                                     -NVL (v_qs_prem, 0),
                                     p.pol_uw_year,
                                     0,
                                     p.pol_cur_code,
                                     p.pol_cur_symbol,
                                     cur_all_risks_rec.ipu_quz_code,
                                     cur_all_risks_rec.ipu_quz_sht_desc,
                                     p.pol_cur_rate,
                                     NVL (cur_all_risks_rec.ipu_prem_tax, 0),
                                     cur_all_risks_rec.ipu_property_id,
                                     'RIR',
                                     NVL (p.pol_coinsurance_share, 100),
                                     NVL (v_net_rate, 0),
                                     NVL (v_facre_prem_rate, 0),
                                     -NVL (cur_all_risks_rec.prrd_ri_prem, 0),
                                     NVL (cur_all_risks_rec.ipu_si_diff, 0),
                                     -v_facre_prem,
                                     -v_facre_com,
                                     p.pol_brn_code,
                                     p.pol_brn_sht_desc,
                                     p.pol_policy_type,
                                     p.pol_agnt_sht_desc,
                                     p.pol_agnt_agent_code,
                                     p.pol_prp_code,
                                     -v_ob_facre_prem,
                                     v_ob_facre_prem_rate,
                                     -v_ob_facre_com,
                                     -v_pool_prem,
                                     -v_pool_comm,
                                     v_pool_si,
                                     -v_pool_vat,
                                     v_pool_rate,
                                     v_mand_si,
                                     v_qs_si,
                                     v_fstsup_si,
                                     v_secsup_si,
                                     v_facre_si,
                                     v_ob_facre_si,
                                     v_net_si,
                                     v_gross_si,
                                     -v_rsk_net_prem,
                                     cur_all_risks_rec.ipu_reinsure_amt,
                                     cur_all_risks_rec.ipu_value,
                                     cur_all_risks_rec.ipu_covt_code,
                                     -NVL (v_eq_prem, 0),
                                     -NVL (v_fstsup_eq_prem, 0),
                                     -NVL (v_fstsup_noneq_prem, 0),
                                     -NVL (v_fstsup_eq_com, 0),
                                     -NVL (v_fstsup_noneq_com, 0),
                                     -NVL (v_secsup_eq_prem, 0),
                                     -NVL (v_secsup_noneq_prem, 0),
                                     -NVL (v_secsup_eq_com, 0),
                                     -NVL (v_secsup_noneq_com, 0),
                                     -NVL (v_mand_eq_prem, 0),
                                     -NVL (v_mand_noneq_prem, 0),
                                     -NVL (v_mand_eq_com, 0),
                                     -NVL (v_mand_noneq_com, 0),
                                     -NVL (v_facre_eq_prem, 0),
                                     -NVL (v_facre_noneq_prem, 0),
                                     -NVL (v_facre_noneq_com, 0),
                                     -NVL (v_ob_facre_eq_prem, 0),
                                     -NVL (v_ob_facre_noneq_prem, 0),
                                     -NVL (v_ob_facre_noneq_com, 0),
                                     -NVL (v_ob_facre_eq_com, 0));
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO INSERT RI REFUND INTO THE RISK REGISTER..AT 8.');
                    END;

                    DELETE gin_policy_treaty_part_reg
                     WHERE     trtpg_pr_code = v_pr_code
                           AND trtpg_rskrg_code = v_rskrg_code;

                    DELETE gin_policy_risk_treaty_reg
                     WHERE     trtrg_pr_code = v_pr_code
                           AND trtrg_rskrg_code = v_rskrg_code;

                    FOR rdtls
                        IN cur_rsk_rein_dtls (cur_all_risks_rec.ipu_code,
                                              v_tran_no) ---(cur_all_risks_rec.prrd_code)
                    LOOP
                        INSERT INTO gin_policy_risk_treaty_reg (
                                        trtrg_code,
                                        trtrg_ptotr_code,
                                        trtrg_pr_code,
                                        trtrg_rskrg_code,
                                        trtrg_rei_code,
                                        trtrg_trt_code,
                                        trtrg_ta_code,
                                        trtrg_as_code,
                                        trtrg_risk_cur_code,
                                        trtrg_trt_cur_code,
                                        trtrg_exch_rate,
                                        trtrg_trt_si_pcur,
                                        trtrg_trt_si_tcur,
                                        trtrg_trt_prem_pcur,
                                        trtrg_trt_prem_tcur,
                                        trtrg_trt_share,
                                        trtrg_trt_sht_desc,
                                        trtrg_rate,
                                        trtrg_trt_comm_pcur,
                                        trtrg_trt_comm_tcur,
                                        trtrg_cession_pct,
                                        trtrg_uwyr,
                                        trtrg_ipu_code,
                                        trtrg_pol_batch_no,
                                        trtrg_risk_cur_symbol,
                                        trtrg_trt_cur_symbol,
                                        trtrg_prem_tax_pcur,
                                        trtrg_prem_tax_tcur,
                                        trtrg_trs_code,
                                        trtrg_trs_sht_desc,
                                        trtrg_rate_type,
                                        trtrg_remarks,
                                        trtrg_ggt_tran_no,
                                        trtrg_tran_type,
                                        trtrg_rprem_tax_pcur,
                                        trtrg_prrd_code,
                                        trtrg_comm_rate,
                                        trtrg_auth_dt,
                                        trtrg_rprem_tax_tcur,
                                        trtrg_earthqke_prem,
                                        trtrg_earthqke_comm_rate,
                                        trtrg_earthqke_comm,
                                        trtrg_net_less_eq_comm,
                                        trtrg_net_less_eq_prem,
                                        trtrg_ctl_code)
                             VALUES (trtrg_code_seq.NEXTVAL,
                                     rdtls.ptotr_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     rdtls.ptotr_rei_code,
                                     rdtls.ptotr_trt_code,
                                     rdtls.ptotr_ta_code,
                                     rdtls.ptotr_as_code,
                                     rdtls.ptotr_risk_cur_code,
                                     rdtls.ptotr_trt_cur_code,
                                     rdtls.ptotr_exch_rate,
                                     rdtls.ptotr_trt_si_pcur,
                                     rdtls.ptotr_trt_si_tcur,
                                     -rdtls.ptotr_trt_prem_pcur,
                                     -rdtls.ptotr_trt_prem_tcur,
                                     rdtls.ptotr_trt_share,
                                     rdtls.ptotr_trt_sht_desc,
                                     rdtls.ptotr_rate,
                                     -rdtls.ptotr_trt_comm_pcur,
                                     -rdtls.ptotr_trt_comm_tcur,
                                     rdtls.ptotr_cession_pct,
                                     rdtls.ptotr_uwyr,
                                     rdtls.ptotr_ipu_code,
                                     rdtls.ptotr_pol_batch_no,
                                     rdtls.ptotr_risk_cur_symbol,
                                     rdtls.ptotr_trt_cur_symbol,
                                     -rdtls.ptotr_prem_tax_pcur,
                                     -rdtls.ptotr_prem_tax_tcur,
                                     rdtls.ptotr_trs_code,
                                     rdtls.ptotr_trs_sht_desc,
                                     rdtls.ptotr_rate_type,
                                     rdtls.ptotr_remarks,
                                     rdtls.ptotr_ggt_tran_no,
                                     rdtls.ptotr_tran_type,
                                     -rdtls.ptotr_rprem_tax_pcur,
                                     rdtls.ptotr_prrd_code,
                                     rdtls.ptotr_comm_rate,
                                     rdtls.ptotr_auth_dt,
                                     -rdtls.ptotr_rprem_tax_tcur,
                                     -rdtls.ptotr_earthqke_prem,
                                     rdtls.ptotr_earthqke_comm_rate,
                                     -rdtls.ptotr_earthqke_comm,
                                     -rdtls.ptotr_net_less_eq_comm,
                                     -rdtls.ptotr_net_less_eq_prem,
                                     rdtls.ptotr_ctl_code);

                        FOR pdtls
                            IN cur_rsk_rein_part_dtls (rdtls.ptotr_code)
                        LOOP
                            INSERT INTO gin_policy_treaty_part_reg (
                                            trtpg_code,
                                            trtpg_ptotr_code,
                                            trtpg_part_code,
                                            trtpg_pr_code,
                                            trtpg_rskrg_code,
                                            trtpg_trtrg_code,
                                            trtpg_rei_code,
                                            trtpg_cede_rate,
                                            trtpg_si_amt_pcur,
                                            trtpg_si_amt_tcur,
                                            trtpg_comm_amt_pcur,
                                            trtpg_comm_amt_tcur,
                                            trtpg_prem_amt_pcur,
                                            trtpg_prem_amt_tcur,
                                            trtpg_trt_code,
                                            trtpg_trt_sht_desc,
                                            trtpg_agnt_agent_code,
                                            trtpg_agnt_sht_desc,
                                            trtpg_uwyr,
                                            trtpg_pol_batch_no,
                                            trtpg_pol_policy_no,
                                            trtpg_pol_ren_endos_no,
                                            trtpg_ipu_code,
                                            trtpg_rprem_tax_pcur,
                                            trtpg_rprem_tax_tcur,
                                            trtpg_prem_tax_pcur,
                                            trtpg_prem_tax_tcur,
                                            trtpg_ta_code,
                                            trtpg_as_code,
                                            trtpg_fiscal_year,
                                            trtpg_trs_code,
                                            trtpg_trs_sht_desc,
                                            trtpg_trpa_code,
                                            trtpg_mgt_fee_tcur,
                                            trtpg_mgt_fee_pcur)
                                 VALUES (trtpg_code_seq.NEXTVAL,
                                         rdtls.ptotr_code,
                                         pdtls.part_code,
                                         v_pr_code,
                                         v_rskrg_code,
                                         trtrg_code_seq.CURRVAL,
                                         rdtls.ptotr_rei_code,
                                         pdtls.part_cede_rate,
                                         pdtls.part_si_amt_pcur,
                                         pdtls.part_si_amt_tcur,
                                         -pdtls.part_comm_amt_pcur,
                                         -pdtls.part_comm_amt_tcur,
                                         -pdtls.part_prem_amt_pcur,
                                         -pdtls.part_prem_amt_tcur,
                                         pdtls.part_trt_code,
                                         pdtls.part_trt_sht_desc,
                                         pdtls.part_agnt_agent_code,
                                         pdtls.part_agnt_sht_desc,
                                         pdtls.part_uwyr,
                                         pdtls.part_pol_batch_no,
                                         pdtls.part_pol_policy_no,
                                         pdtls.part_pol_ren_endos_no,
                                         pdtls.part_ipu_code,
                                         -pdtls.part_rprem_tax_pcur,
                                         -pdtls.part_rprem_tax_tcur,
                                         -pdtls.part_prem_tax_pcur,
                                         -pdtls.part_prem_tax_tcur,
                                         pdtls.part_ta_code,
                                         pdtls.part_as_code,
                                         pdtls.part_fiscal_year,
                                         pdtls.part_trs_code,
                                         pdtls.part_trs_sht_desc,
                                         pdtls.part_trpa_code,
                                         -pdtls.part_mgt_fee_tcur,
                                         -pdtls.part_mgt_fee_pcur);
                        END LOOP;
                    END LOOP;

                    DELETE gin_policy_risk_facre_reg
                     WHERE     facrg_pr_code = v_pr_code
                           AND facrg_rskrg_code = v_rskrg_code;

                    FOR fdtls
                        IN cur_risk_facre_dtls (cur_all_risks_rec.ipu_code) ---(cur_all_risks_rec.prrd_code)
                    LOOP
                        INSERT INTO gin_policy_risk_facre_reg (
                                        facrg_code,
                                        facrg_fc_code,
                                        facrg_pr_code,
                                        facrg_rskrg_code,
                                        facrg_agnt_agent_code,
                                        facrg_amount,
                                        facrg_wef,
                                        facrg_ipu_code,
                                        facrg_agent_sht_desc,
                                        facrg_rate,
                                        facrg_comm_rate,
                                        facrg_comm_amt,
                                        facrg_don_by,
                                        facrg_dc_no,
                                        facrg_prem_amt,
                                        facrg_pol_batch_no,
                                        facrg_uwyr,
                                        facrg_ggt_tran_no,
                                        facrg_tran_type,
                                        facrg_scl_code,
                                        facrg_amt_or_rate,
                                        facrg_prrd_code,
                                        facrg_auth_dt,
                                        facrg_wet,
                                        facrg_earthqke_prem,
                                        facrg_earthqke_comm_rate,
                                        facrg_earthqke_comm,
                                        facrg_net_less_eq_comm,
                                        facrg_net_less_eq_prem,
                                        facrg_facre_type,
                                        facrg_prem_diff_amt,
                                        facrg_remark,
                                        facrg_vat_amt,
                                        facrg_vat_rate,
                                        facrg_mngmnt_amt,
                                        facrg_rein_tax_amt,
                                        facrg_mngmnt_type,
                                        facrg_mngmnt_value,
                                        facrg_rein_tax_type,
                                        facrg_rein_tax_value)
                             VALUES (facrg_code_seq.NEXTVAL,
                                     fdtls.fc_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     fdtls.fc_agnt_agent_code,
                                     fdtls.fc_amount,
                                     fdtls.fc_wef,
                                     fdtls.fc_ipu_code,
                                     fdtls.fc_agent_sht_desc,
                                     fdtls.fc_rate,
                                     fdtls.fc_comm_rate,
                                     -fdtls.fc_comm_amt,
                                     fdtls.fc_don_by,
                                     fdtls.fc_dc_no,
                                     -fdtls.fc_prem_amt,
                                     fdtls.fc_pol_batch_no,
                                     fdtls.fc_uwyr,
                                     fdtls.fc_ggt_tran_no,
                                     fdtls.fc_tran_type,
                                     fdtls.fc_scl_code,
                                     fdtls.fc_amt_or_rate,
                                     fdtls.fc_prrd_code,
                                     fdtls.fc_auth_dt,
                                     fdtls.fc_wet,
                                     -fdtls.fc_earthqke_prem,
                                     fdtls.fc_earthqke_comm_rate,
                                     -fdtls.fc_earthqke_comm,
                                     -fdtls.fc_net_less_eq_comm,
                                     -fdtls.fc_net_less_eq_prem,
                                     fdtls.fc_facre_type,
                                     -fdtls.fc_prem_diff_amt,
                                     fdtls.fc_remark,
                                     -fdtls.fc_vat_amt,
                                     fdtls.fc_vat_rate,
                                     -fdtls.fc_mngmnt_amt,
                                     -fdtls.fc_rein_tax_amt,
                                     fdtls.fc_mngmnt_type,
                                     -fdtls.fc_mngmnt_value,
                                     fdtls.fc_rein_tax_type,
                                     -fdtls.fc_rein_tax_value);
                    END LOOP;

                    DELETE gin_policy_risk_pool_reg
                     WHERE     poorg_pr_code = v_pr_code
                           AND poorg_rskrg_code = v_rskrg_code;

                    FOR pdtls
                        IN cur_risk_pool_dtls (cur_all_risks_rec.ipu_code) ---(cur_all_risks_rec.prrd_code)
                    LOOP
                        INSERT INTO gin_policy_risk_pool_reg (
                                        poorg_code,
                                        poorg_prprd_code,
                                        poorg_pr_code,
                                        poorg_rskrg_code,
                                        poorg_scrpr_code,
                                        poorg_rein_pool_rate,
                                        poorg_ipu_code,
                                        poorg_scl_code,
                                        poorg_covt_code,
                                        poorg_pol_batch_no,
                                        poorg_rein_pool_amt,
                                        poorg_rein_pool_comm_rate,
                                        poorg_rein_pool_vat_rate,
                                        poorg_rein_pool_comm_amt,
                                        poorg_rein_pool_vat_amt,
                                        poorg_ggt_tran_no,
                                        poorg_uwyr,
                                        poorg_pol_ren_endos_no,
                                        poorg_date,
                                        poorg_risk_trt_own_ret_amt,
                                        poorg_pta_code,
                                        poorg_os_claim_amt,
                                        poorg_paid_claim_amt,
                                        poorg_pool_net_amt,
                                        poorg_prrd_code,
                                        poorg_pool_si)
                             VALUES (poorg_code_seq.NEXTVAL,
                                     pdtls.prprd_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     pdtls.prprd_scrpr_code,
                                     pdtls.prprd_rein_pool_rate,
                                     pdtls.prprd_ipu_code,
                                     pdtls.prprd_scl_code,
                                     pdtls.prprd_covt_code,
                                     pdtls.prprd_pol_batch_no,
                                     -pdtls.prprd_rein_pool_amt,
                                     pdtls.prprd_rein_pool_comm_rate,
                                     pdtls.prprd_rein_pool_vat_rate,
                                     -pdtls.prprd_rein_pool_comm_amt,
                                     -pdtls.prprd_rein_pool_vat_amt,
                                     pdtls.prprd_ggt_tran_no,
                                     pdtls.prprd_uwyr,
                                     pdtls.prprd_pol_ren_endos_no,
                                     pdtls.prprd_date,
                                     -pdtls.prprd_risk_trt_own_ret_amt,
                                     pdtls.prprd_pta_code,
                                     -pdtls.prprd_os_claim_amt,
                                     -pdtls.prprd_paid_claim_amt,
                                     -pdtls.prprd_pool_net_amt,
                                     pdtls.prprd_prrd_code,
                                     pdtls.prprd_pool_si);
                    END LOOP;
                END LOOP;
            END LOOP;                                          --cur_all_risks
        END LOOP;                                                   -- cur_pol
    END;

    PROCEDURE grp_make_ready (v_trans_no IN NUMBER, v_user VARCHAR2)
    IS
        pol_stat      VARCHAR2 (15);
        v_new_stat    VARCHAR2 (2);
        v_dummy       NUMBER := 0;
        v_auth_stat   VARCHAR2 (1);
        v_uw_yr       NUMBER := TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'));
        --v_user VARCHAR2(30) ;
        v_errnum      NUMBER;
        v_errmsg      VARCHAR2 (200);
        ri_not_done   EXCEPTION;
        PRAGMA EXCEPTION_INIT (ri_not_done, -20001);
    BEGIN
        --v_user:= PKG_GLOBAL_VARS.GET_PVARCHAR2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        BEGIN
            check_grp_uw_ri (v_trans_no);
        EXCEPTION
            WHEN ri_not_done
            THEN
                raise_when_others (
                    'Cannot authorise when there are risks not reinsured...');
            WHEN OTHERS
            THEN
                v_errmsg := SQLERRM (SQLCODE);
                raise_error (
                       'Error :- Cannot authorise while there a risks not reinsured ...'
                    || v_errmsg);
        END;

        SELECT COUNT (1)
          INTO v_dummy
          FROM gin_policy_risk_ri_dtls
         WHERE prrd_tran_no = v_trans_no AND prrd_avail_fulc_bal > 0;

        BEGIN
            SELECT NVL (ggt_trans_authorised, 'N')
              INTO v_auth_stat
              FROM gin_gis_transactions
             WHERE ggt_trans_no = v_trans_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_auth_stat := 'N';
            WHEN OTHERS
            THEN
                v_errmsg := SQLERRM (SQLCODE);
                raise_error (
                       'Unable to retrive authorization details, ...'
                    || v_errmsg);
        END;

        IF v_dummy > 0
        THEN
            raise_error (
                   'This transaction has '
                || v_dummy
                || ' risks with excess sum insured to be placed falcultaively..You cannot AUTHORISE it now ...');
        END IF;

        IF v_auth_stat = 'N'
        THEN
            UPDATE gin_gis_transactions
               SET ggt_trans_authorised = 'R'
             WHERE ggt_trans_no = v_trans_no;
        ELSIF v_auth_stat = 'R'
        THEN
            UPDATE gin_gis_transactions
               SET ggt_trans_authorised = 'N'
             WHERE ggt_trans_no = v_trans_no;
        ELSIF v_auth_stat = 'A'
        THEN
            raise_error ('This transaction has already been authorized...');
        END IF;
    END;

    --   PROCEDURE authorise_grp_trans (
    --      v_trans_no     IN   NUMBER,
    --      v_trans_type   IN   VARCHAR2,
    --      v_user              VARCHAR2,
    --      v_auth_date    IN   DATE DEFAULT TRUNC (SYSDATE)
    --   )
    --   IS
    --      pol_stat                VARCHAR2 (15);
    --      v_new_stat              VARCHAR2 (2);
    --      v_dummy                 NUMBER         := 0;
    --      --v_uw_yr              number    := TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'));
    --      --v_auth_stat          varchar2 (2);
    --      --v_tran_code          varchar2 (5);
    --      v_prev_status           VARCHAR2 (5);
    --      v_errnum                NUMBER;
    --      v_errmsg                VARCHAR2 (200);
    --      v_rnd                   NUMBER         := 0;
    --      v_rnd_bcur              NUMBER         := 0;
    --      --v_eff_date           date;
    --      ri_not_done             EXCEPTION;
    --      PRAGMA EXCEPTION_INIT (ri_not_done, -20001);
    --       --v_vchr_desc          varchar2 (50);
    --      -- v_batch_no           number;
    --      -- v_post_past_period   varchar2 (5);
    --      -- v_agn_code           number;
    --       --v_dcnote_no varchar2 (30);
    --       --v_old_trans_no NUMBER;
    --      v_acc_interface_param   VARCHAR2 (1);
    --
    --      CURSOR cur_ri_trans
    --      IS
    --         SELECT DISTINCT pol_policy_no || ' / ' || pol_drcr_no vchr_desc,
    --                         pol_past_period_endos, pol_agnt_agent_code,
    --                         pol_drcr_no, prev.prrd_tran_no prev_tran_no,
    --                         NVL (ggt_trans_authorised, 'N')
    --                                                        ggt_trans_authorised,
    --                         ggt_effective_date, ggt_btr_trans_code,
    --                         pol_batch_no, ipu_uw_yr,ipu_code
    ----               INTO v_vchr_desc, v_post_past_period, v_agn_code,v_dcnote_no,
    ----                    v_old_trans_no,v_auth_stat, v_eff_date,v_tran_code,v_batch_no
    --         FROM            gin_policies,
    --                         gin_insured_property_unds,
    --                         gin_policy_risk_ri_dtls curr,
    --                         gin_policy_risk_ri_dtls prev,
    --                         gin_gis_transactions
    --                   WHERE pol_batch_no = ipu_pol_batch_no
    --                     AND ipu_code = curr.prrd_ipu_code
    --                     AND curr.prrd_prev_prrd_code = prev.prrd_code
    --                     AND curr.prrd_tran_no = ggt_trans_no
    --                     AND curr.prrd_tran_no = v_trans_no;
    --
    --      CURSOR cur_risks
    --      IS
    --         SELECT prrd_code, prrd_ipu_code
    --           FROM gin_policy_risk_ri_dtls
    --          WHERE prrd_tran_no = v_trans_no;
    --
    --      CURSOR cur_old_risks (v_old_tran_no IN NUMBER)
    --      IS
    --         SELECT prrd_code, prrd_ipu_code
    --           FROM gin_policy_risk_ri_dtls
    --          WHERE prrd_tran_no = v_old_tran_no;
    --
    --      CURSOR cur_endos_risk (v_ipu_code IN NUMBER)
    --      IS
    --         SELECT ipu_code
    --           FROM gin_insured_property_unds
    --          WHERE ipu_prev_ipu_code = v_ipu_code AND ipu_code != v_ipu_code;
    --   BEGIN
    ----RAISE_ERROR('HAPA');
    --      IF v_trans_no IS NULL
    --      THEN
    --         raise_error ('Error determining transaction to authorise...');
    --      END IF;
    --
    --      BEGIN
    --         check_grp_risk_ri (v_trans_no);
    --      EXCEPTION
    --         WHEN ri_not_done
    --         THEN
    --            raise_error
    --                 (   'Cannot authorise when there are risks not reinsured...'
    --                  || v_trans_no
    --                 );
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --               ('Error :- Cannot authorise while there a risks not reinsured ...'
    --               );
    --      END;
    --
    --      BEGIN
    --         check_uw_ri (v_trans_no);
    --      EXCEPTION
    --         WHEN ri_not_done
    --         THEN
    --            raise_error
    --                    ('Cannot authorise when there are risks not reinsured...');
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --               ('Error :- Cannot authorise while there a risks not reinsured ...'
    --               );
    --      END;
    --
    --      SELECT COUNT (1)
    --        INTO v_dummy
    --        FROM gin_policy_risk_ri_dtls
    --       WHERE prrd_tran_no = v_trans_no AND prrd_avail_fulc_bal > 0;
    --
    --      IF v_dummy > 0
    --      THEN
    --         raise_error
    --            (   'This transaction has '
    --             || v_dummy
    --             || ' risks with excess sum insured to be placed falcultaively..You cannot AUTHORISE it now ...'
    --            );
    --      END IF;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('IFRS_ACC_MAPPING')
    --           INTO v_acc_interface_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            NULL;
    --      END;
    --
    ----          BEGIN
    ----             SELECT DISTINCT pol_policy_no || ' / ' || pol_drcr_no,
    ----                    pol_past_period_endos, pol_agnt_agent_code,pol_drcr_no,
    ----                    PREV.PRRD_TRAN_NO ,nvl (ggt_trans_authorised, 'N') ggt_trans_authorised,
    ----                    ggt_effective_date,ggt_btr_trans_code,pol_batch_no
    ----               INTO v_vchr_desc, v_post_past_period, v_agn_code,v_dcnote_no,
    ----                    v_old_trans_no,v_auth_stat, v_eff_date,v_tran_code,v_batch_no
    ----              FROM GIN_POLICIES,GIN_INSURED_PROPERTY_UNDS,GIN_POLICY_RISK_RI_DTLS CURR,
    ----              GIN_POLICY_RISK_RI_DTLS PREV, GIN_GIS_TRANSACTIONS
    ----              WHERE POL_BATCH_NO = IPU_POL_BATCH_NO
    ----              AND IPU_CODE = CURR.PRRD_IPU_CODE
    ----              AND CURR.PRRD_PREV_PRRD_CODE = PREV.PRRD_CODE
    ----              AND PREV.PRRD_TRAN_NO = GGT_TRANS_NO
    ----              --AND POL_BATCH_NO = v_batch_no
    ----              AND CURR.PRRD_TRAN_NO = v_trans_no;
    ----
    ------             SELECT pol_policy_no || ' / ' || pol_drcr_no,
    ------                    pol_past_period_endos, pol_agnt_agent_code,pol_drcr_no,
    ------                    ggt_old_tran_no,nvl (ggt_trans_authorised, 'N'),
    ------                    ggt_effective_date,ggt_btr_trans_code,pol_batch_no
    ------               INTO v_vchr_desc, v_post_past_period, v_agn_code,v_dcnote_no,
    ------                    v_old_trans_no,v_auth_stat, v_eff_date,v_tran_code,v_batch_no
    ------               FROM gin_policies,gin_gis_transactions
    ------              WHERE pol_batch_no =ggt_pol_batch_no
    ------             -- AND GGT_UW_CLM_TRAN = 'R'
    ------              AND GGT_TRANS_NO = v_trans_no;
    ----          EXCEPTION
    ----             WHEN OTHERS
    ----             THEN
    ----                raise_error ('ERROR FETCHING POLICY DETAILS...='||v_trans_no||'='||v_batch_no);
    ----          END;
    --      FOR cur_ri_rec IN cur_ri_trans
    --      LOOP
    --         IF cur_ri_rec.ggt_trans_authorised IN ('Y')
    --         THEN
    --            raise_error ('This transaction has already been authorised....');
    --         END IF;
    --
    --         IF cur_ri_rec.prev_tran_no IS NULL
    --         THEN
    --            raise_error
    --                       ('Error determining the old transaction to reverse...');
    --         END IF;
    --
    --         -- FIRST REVERSE THE PREVIOUS TRANSACTION FROM FMS
    --         -- POST THE CURRENT PROCESSED TRANSACTION TO FMS
    --         IF cur_ri_rec.prev_tran_no IS NOT NULL
    --         THEN                              -- REVERSE THE PREVIOUS TRANSACTION
    --            BEGIN
    --               --update rein auth_dt
    --               UPDATE gin_policy_rein_risk_details
    --                  SET ptotr_auth_dt = TRUNC (SYSDATE)
    --                WHERE ptotr_ggt_tran_no = cur_ri_rec.prev_tran_no;
    --
    --               UPDATE gin_policy_risk_ri_dtls
    --                  SET prrd_auth_dt = TRUNC (SYSDATE)
    --                WHERE prrd_tran_no = cur_ri_rec.prev_tran_no;
    --
    --               UPDATE gin_facre_cessions
    --                  SET fc_auth_dt = TRUNC (SYSDATE)
    --                WHERE fc_ggt_tran_no = cur_ri_rec.prev_tran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                          ('Unable to update reinsurance authorization date.');
    --            END;
    --
    --            --raise_error(v_pol_batch_no);
    --            BEGIN
    --               gin_uw_author_proc.post_ri_transactions
    --                                                  (cur_ri_rec.pol_batch_no,
    --                                                   cur_ri_rec.prev_tran_no,
    --                                                   v_trans_type,
    --                                                   'RI',
    --                                                   NULL, --v_pol_prev_drcr_no,
    --                                                   cur_ri_rec.ipu_uw_yr,
    --                                                   v_user,
    --                                                   'Y',
    --                                                   TRUNC (SYSDATE)
    --                                                  );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     ('Error :- Unable to post treaty reinsurance transactions to the accounts...'
    --                     );
    --            END;
    --
    --            BEGIN
    --               gin_uw_author_proc.post_pool_ri_trans
    --                                                    (cur_ri_rec.pol_batch_no,
    --                                                     cur_ri_rec.prev_tran_no,
    --                                                     'Y',
    --                                                     TRUNC (SYSDATE)
    --                                                    );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error posting pool to statements area..');
    --            END;
    --
    --            --------------post ri gl
    --            --raise_error('v_acc_interface_param='||v_acc_interface_param);
    --            IF NVL (v_acc_interface_param, 'N') = 'Y'
    --            THEN
    --               BEGIN
    --                  NULL;
    ----GIN_UW_AUTHOR_PROC.post_ri_gl_ifrs (v_batch_no, v_old_trans_no, v_uw_yr, v_user,TRUNC(SYSDATE));
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error :- Unable to post treaty reinsurance transactions to the GL accounts ...'
    --                        );
    --               END;
    --
    --               -- RAISE_ERROR('HERE ONE');
    --               BEGIN
    --                  -- GIN_UW_AUTHOR_PROC.post_facre_cession_ifrs (v_batch_no,  v_old_trans_no,   v_uw_yr,  v_user,  TRUNC(SYSDATE)  );
    --                  NULL;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error :- Unable to post facre reinsurance transactions to the accounts...'
    --                        );
    --               END;
    --
    --               BEGIN                         -- ifrs to be taken care of  solo
    --                  gin_uw_author_proc.post_pool_ri_gl
    --                                                    (cur_ri_rec.pol_batch_no,
    --                                                     cur_ri_rec.prev_tran_no,
    --                                                     v_user,
    --                                                     'Y',
    --                                                     TRUNC (SYSDATE)
    --                                                    );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error :- Unable to post reinsurance pool transactions to the accounts...'
    --                        );
    --               END;
    --            ELSE
    --               BEGIN
    --                  gin_uw_author_proc.post_ri_gl (cur_ri_rec.pol_batch_no,
    --                                                 cur_ri_rec.prev_tran_no,
    --                                                 cur_ri_rec.ipu_uw_yr,
    --                                                 v_user,
    --                                                 'Y',
    --                                                 TRUNC (SYSDATE)
    --                                                );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error :- Unable to post treaty reinsurance transactions to the GL accounts ...'
    --                        );
    --               END;
    --
    --               BEGIN
    --                  gin_uw_author_proc.post_facre_cession
    --                                                    (cur_ri_rec.pol_batch_no,
    --                                                     cur_ri_rec.prev_tran_no,
    --                                                     cur_ri_rec.ipu_uw_yr,
    --                                                     v_user,
    --                                                     'Y',
    --                                                     TRUNC (SYSDATE)
    --                                                    );
    ----               EXCEPTION
    ----                  WHEN OTHERS
    ----                  THEN
    ----                     raise_error
    ----                        ('Error :- Unable to post facre reinsurance transactions to the accounts...'
    ----                        );
    --               END;
    --
    --               BEGIN                         -- ifrs to be taken care of  solo
    --                  gin_uw_author_proc.post_pool_ri_gl
    --                                                    (cur_ri_rec.pol_batch_no,
    --                                                     cur_ri_rec.prev_tran_no,
    --                                                     v_user,
    --                                                     'Y',
    --                                                     TRUNC (SYSDATE)
    --                                                    );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error :- Unable to post reinsurance pool transactions to the accounts...'
    --                        );
    --               END;
    --            END IF;
    --
    --            IF gin_interfaces_pkg.interface_enabled
    --                                             ('UW_TRANS',
    --                                              cur_ri_rec.pol_past_period_endos
    --                                             ) = 'Y'
    --            THEN
    --               -- RAISE_ERROR('ERROR FETCHING TRANSACTION BATCH NUMBER...');
    --               gin_interfaces_pkg.create_gl_voucher
    --                                             (cur_ri_rec.prev_tran_no,
    --                                              cur_ri_rec.vchr_desc,
    --                                              v_user,
    --                                              cur_ri_rec.pol_agnt_agent_code,
    --                                              'U',
    --                                              cur_ri_rec.pol_batch_no,
    --                                              cur_ri_rec.pol_drcr_no
    --                                             );
    --            END IF;
    --         END IF;
    --
    --          -- AUTHORISE CURRENT REINSURANCE CESSIONS
    --         --insert register transaction with prev refund
    --         --insert register with new ri prem
    --         --insert accumulation
    --         BEGIN
    --            gin_uw_author_proc.post_ri_transactions
    --                                (cur_ri_rec.pol_batch_no,
    --                                 v_trans_no,
    --                                 v_trans_type,
    --                                 'RI',
    --                                 cur_ri_rec.pol_drcr_no, --v_pol_prev_drcr_no,
    --                                 cur_ri_rec.ipu_uw_yr,
    --                                 v_user,
    --                                 'N',
    --                                 TRUNC (SYSDATE)
    --                                );
    --         --grp_post_rein (v_trans_no, v_trans_type, v_user);
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                  ('Error :- Unable to post treaty reinsurance transactions to the accounts...'
    --                  );
    --         END;
    --
    --         BEGIN
    --            gin_uw_author_proc.post_pool_ri_trans (cur_ri_rec.pol_batch_no,
    --                                                   v_trans_no,
    --                                                   'N',
    --                                                   TRUNC (SYSDATE)
    --                                                  );
    --         -- grp_post_pool_ri_trans (v_batch_no ,v_trans_no);
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('ERROR POSTING POOL TRANSACTION...');
    --         END;
    --
    --         BEGIN
    --            -- Gis_Ri_Procedures.post_facre_cession (v_trans_no,v_trans_type,v_user);
    --            gin_uw_author_proc.post_facre_cession (cur_ri_rec.pol_batch_no,
    --                                                   v_trans_no,
    --                                                   cur_ri_rec.ipu_uw_yr,
    --                                                   v_user,
    --                                                   'N',
    --                                                   TRUNC (SYSDATE)
    --                                                  );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                  ('Error :- Unable to post facre reinsurance transactions to the accounts...'
    --                  );
    --         END;
    --
    -----------------------------
    --         BEGIN
    --            gin_uw_author_proc.post_pool_ri_gl (cur_ri_rec.pol_batch_no,
    --                                                v_trans_no,
    --                                                v_user,
    --                                                'N',
    --                                                TRUNC (SYSDATE)
    --                                               );
    --         --grp_post_pool_ri_gl ( v_batch_no , v_trans_no,v_user  );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                          ('Error:- Unable to post pool reinsurance to Gl...');
    --         END;
    --
    --         BEGIN
    --            gin_uw_author_proc.post_ri_gl (cur_ri_rec.pol_batch_no,
    --                                           v_trans_no,
    --                                           cur_ri_rec.ipu_uw_yr,
    --                                           v_user,
    --                                           'N',
    --                                           TRUNC (SYSDATE)
    --                                          );
    --         -- grp_post_ri_gl (v_trans_no, v_user);            --,v_trans_type);
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                  ('Error :- Unable to post treaty reinsurance transactions to the GL accounts ...'
    --                  );
    --         END;
    --
    --         BEGIN
    --            gis_ri_procedures.grp_reverse_register (cur_ri_rec.pol_batch_no,
    --                                                    cur_ri_rec.prev_tran_no,
    --                                                    TRUNC (SYSDATE),
    --                                                    cur_ri_rec.ipu_code
    --                                                   );
    ----         EXCEPTION
    ----            WHEN OTHERS
    ----            THEN
    ----               raise_error ('Error :- Unable to update registers ...');
    --         END;
    --
    --         BEGIN
    --            gis_ri_procedures.grp_update_register (cur_ri_rec.pol_batch_no,
    --                                                   v_trans_no,
    --                                                   TRUNC (SYSDATE)
    --                                                  );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error :- Unable to update registers ...');
    --         END;
    --
    --         IF gin_interfaces_pkg.interface_enabled
    --                                             ('UW_TRANS',
    --                                              cur_ri_rec.pol_past_period_endos
    --                                             ) = 'Y'
    --         THEN
    --            gin_interfaces_pkg.create_gl_voucher
    --                                             (v_trans_no,
    --                                              cur_ri_rec.vchr_desc,
    --                                              v_user,
    --                                              cur_ri_rec.pol_agnt_agent_code,
    --                                              'U',
    --                                              cur_ri_rec.pol_batch_no,
    --                                              cur_ri_rec.pol_drcr_no
    --                                             );
    --         END IF;
    --      END LOOP;
    --
    --      BEGIN
    --         UPDATE gin_gis_transactions
    --            SET ggt_trans_authorised = 'Y',
    --                ggt_trans_authorised_by = v_user,
    --                ggt_trans_authorise_date = TRUNC (SYSDATE)
    --          WHERE ggt_trans_no = v_trans_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --               ('Error :- Unable to update transaction authorization details...'
    --               );
    --      END;
    --
    --      BEGIN
    --         FOR cur_risks_rec IN cur_risks
    --         LOOP
    --            UPDATE gin_insured_property_unds
    --               SET ipu_current_prrd_code = cur_risks_rec.prrd_code,
    --                   ipu_reinsured = 3
    ---- 3 stands for reinsurance edit, 2 stands for norwal reinsurance, 0 and 1 stands for reinsuance not done
    --            WHERE  ipu_code = cur_risks_rec.prrd_ipu_code;
    --
    --            UPDATE gin_policy_risk_ri_dtls
    --               SET prrd_current = 'N'
    --             WHERE prrd_ipu_code = cur_risks_rec.prrd_ipu_code;
    --
    --            -- TO SET PREVIUOS CURRENT RECORD TO NOT CURRENT
    --            FOR r IN cur_endos_risk (cur_risks_rec.prrd_ipu_code)
    --            LOOP
    --               UPDATE gin_insured_property_unds
    --                  SET ipu_reinsured = 4
    ---- 4 the previous risk ri has been edited, hence this transaction ri has to be edited too
    --               WHERE  ipu_code = r.ipu_code;
    --            END LOOP;
    --         END LOOP;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                       ('Unable to update risks current RI details code, ...');
    --      END;
    --
    ----------------------------------------
    --      BEGIN
    --         --update rein auth_dt
    --         UPDATE gin_policy_rein_risk_details
    --            SET ptotr_auth_dt = TRUNC (SYSDATE)
    --          WHERE ptotr_ggt_tran_no = v_trans_no;
    --
    --         UPDATE gin_policy_risk_ri_dtls
    --            SET prrd_auth_dt = TRUNC (SYSDATE),
    --                prrd_current = 'Y'
    --          WHERE prrd_tran_no = v_trans_no;
    --
    --         UPDATE gin_facre_cessions
    --            SET fc_auth_dt = TRUNC (SYSDATE)
    --          WHERE fc_ggt_tran_no = v_trans_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Unable to update reinsurance authorization date.');
    --      END;
    --   END;

    PROCEDURE authorise_grp_trans (
        v_trans_no     IN NUMBER,
        v_trans_type   IN VARCHAR2,
        v_user            VARCHAR2,
        v_auth_date    IN DATE DEFAULT TRUNC (SYSDATE))
    IS
        pol_stat                VARCHAR2 (15);
        v_new_stat              VARCHAR2 (2);
        v_dummy                 NUMBER := 0;
        --v_uw_yr              number    := TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'));
        --v_auth_stat          varchar2 (2);
        --v_tran_code          varchar2 (5);
        v_prev_status           VARCHAR2 (5);
        v_errnum                NUMBER;
        v_errmsg                VARCHAR2 (200);
        v_rnd                   NUMBER := 0;
        v_rnd_bcur              NUMBER := 0;
        --v_eff_date           date;
        ri_not_done             EXCEPTION;

        PRAGMA EXCEPTION_INIT (ri_not_done, -20001);
        --v_vchr_desc          varchar2 (50);
        -- v_batch_no           number;
        -- v_post_past_period   varchar2 (5);
        -- v_agn_code           number;
        --v_dcnote_no varchar2 (30);
        --v_old_trans_no NUMBER;
        v_acc_interface_param   VARCHAR2 (1);

        CURSOR cur_ri_trans IS
            SELECT DISTINCT
                   pol_policy_no || ' / ' || pol_drcr_no
                       vchr_desc,
                   pol_past_period_endos,
                   pol_agnt_agent_code,
                   pol_drcr_no,
                   prev.prrd_tran_no
                       prev_tran_no,
                   NVL (ggt_trans_authorised, 'N')
                       ggt_trans_authorised,
                   ggt_effective_date,
                   ggt_btr_trans_code,
                   pol_batch_no,
                   ipu_uw_yr,
                   ipu_code
              --               INTO v_vchr_desc, v_post_past_period, v_agn_code,v_dcnote_no,
              --                    v_old_trans_no,v_auth_stat, v_eff_date,v_tran_code,v_batch_no



              FROM gin_policies,
                   gin_insured_property_unds,
                   gin_policy_risk_ri_dtls  curr,
                   gin_policy_risk_ri_dtls  prev,
                   gin_gis_transactions
             WHERE     pol_batch_no = ipu_pol_batch_no
                   AND ipu_code = curr.prrd_ipu_code
                   AND curr.prrd_prev_prrd_code = prev.prrd_code
                   AND curr.prrd_tran_no = ggt_trans_no
                   AND curr.prrd_tran_no = v_trans_no;



        CURSOR cur_risks IS
            SELECT prrd_code, prrd_ipu_code
              FROM gin_policy_risk_ri_dtls
             WHERE prrd_tran_no = v_trans_no;

        CURSOR cur_old_risks (v_old_tran_no IN NUMBER)
        IS
            SELECT prrd_code, prrd_ipu_code
              FROM gin_policy_risk_ri_dtls
             WHERE prrd_tran_no = v_old_tran_no;

        CURSOR cur_endos_risk (v_ipu_code IN NUMBER)
        IS
            SELECT ipu_code
              FROM gin_insured_property_unds
             WHERE ipu_prev_ipu_code = v_ipu_code AND ipu_code != v_ipu_code;
    BEGIN
        --RAISE_ERROR('HAPA');
        IF v_trans_no IS NULL
        THEN
            raise_error ('Error determining transaction to authorise...');
        END IF;

        BEGIN
            check_grp_risk_ri (v_trans_no);
        EXCEPTION
            WHEN ri_not_done
            THEN
                raise_error (
                       'Cannot authorise when there are risks not reinsured...'
                    || v_trans_no);
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Cannot authorise while there a risks not reinsured ...');
        END;

        BEGIN
            check_uw_ri (v_trans_no);
        EXCEPTION
            WHEN ri_not_done
            THEN
                raise_error (
                    'Cannot authorise when there are risks not reinsured...');
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Cannot authorise while there a risks not reinsured ...');
        END;

        SELECT COUNT (1)
          INTO v_dummy
          FROM gin_policy_risk_ri_dtls
         WHERE prrd_tran_no = v_trans_no AND prrd_avail_fulc_bal > 0;

        IF v_dummy > 0
        THEN
            raise_error (
                   'This transaction has '
                || v_dummy
                || ' risks with excess sum insured to be placed falcultaively..You cannot AUTHORISE it now ...');
        END IF;


        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('IFRS_ACC_MAPPING')
              INTO v_acc_interface_param
              FROM DUAL;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        --          BEGIN
        --             SELECT DISTINCT pol_policy_no || ' / ' || pol_drcr_no,
        --                    pol_past_period_endos, pol_agnt_agent_code,pol_drcr_no,
        --                    PREV.PRRD_TRAN_NO ,nvl (ggt_trans_authorised, 'N') ggt_trans_authorised,
        --                    ggt_effective_date,ggt_btr_trans_code,pol_batch_no
        --               INTO v_vchr_desc, v_post_past_period, v_agn_code,v_dcnote_no,
        --                    v_old_trans_no,v_auth_stat, v_eff_date,v_tran_code,v_batch_no
        --              FROM GIN_POLICIES,GIN_INSURED_PROPERTY_UNDS,GIN_POLICY_RISK_RI_DTLS CURR,
        --              GIN_POLICY_RISK_RI_DTLS PREV, GIN_GIS_TRANSACTIONS
        --              WHERE POL_BATCH_NO = IPU_POL_BATCH_NO
        --              AND IPU_CODE = CURR.PRRD_IPU_CODE
        --              AND CURR.PRRD_PREV_PRRD_CODE = PREV.PRRD_CODE
        --              AND PREV.PRRD_TRAN_NO = GGT_TRANS_NO
        --              --AND POL_BATCH_NO = v_batch_no
        --              AND CURR.PRRD_TRAN_NO = v_trans_no;
        --
        ----             SELECT pol_policy_no || ' / ' || pol_drcr_no,
        ----                    pol_past_period_endos, pol_agnt_agent_code,pol_drcr_no,
        ----                    ggt_old_tran_no,nvl (ggt_trans_authorised, 'N'),
        ----                    ggt_effective_date,ggt_btr_trans_code,pol_batch_no
        ----               INTO v_vchr_desc, v_post_past_period, v_agn_code,v_dcnote_no,
        ----                    v_old_trans_no,v_auth_stat, v_eff_date,v_tran_code,v_batch_no
        ----               FROM gin_policies,gin_gis_transactions
        ----              WHERE pol_batch_no =ggt_pol_batch_no
        ----             -- AND GGT_UW_CLM_TRAN = 'R'
        ----              AND GGT_TRANS_NO = v_trans_no;
        --          EXCEPTION
        --             WHEN OTHERS
        --             THEN
        --                raise_error ('ERROR FETCHING POLICY DETAILS...='||v_trans_no||'='||v_batch_no);
        --          END;
        FOR cur_ri_rec IN cur_ri_trans
        LOOP
            IF cur_ri_rec.ggt_trans_authorised IN ('Y')
            THEN
                raise_error (
                    'This transaction has already been authorised....');
            END IF;


            IF cur_ri_rec.prev_tran_no IS NULL
            THEN
                raise_error (
                    'Error determining the old transaction to reverse...');
            END IF;

            -- FIRST REVERSE THE PREVIOUS TRANSACTION FROM FMS
            -- POST THE CURRENT PROCESSED TRANSACTION TO FMS
            IF cur_ri_rec.prev_tran_no IS NOT NULL
            THEN                           -- REVERSE THE PREVIOUS TRANSACTION
                BEGIN
                    --update rein auth_dt
                    UPDATE gin_policy_rein_risk_details
                       SET ptotr_auth_dt = TRUNC (SYSDATE)
                     WHERE ptotr_ggt_tran_no = cur_ri_rec.prev_tran_no;

                    UPDATE gin_policy_risk_ri_dtls
                       SET prrd_auth_dt = TRUNC (SYSDATE)
                     WHERE prrd_tran_no = cur_ri_rec.prev_tran_no;

                    UPDATE gin_facre_cessions
                       SET fc_auth_dt = TRUNC (SYSDATE)
                     WHERE fc_ggt_tran_no = cur_ri_rec.prev_tran_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Unable to update reinsurance authorization date.');
                END;

                --raise_error(v_pol_batch_no);



                BEGIN
                    gin_uw_author_proc.post_ri_transactions (
                        cur_ri_rec.pol_batch_no,
                        cur_ri_rec.prev_tran_no,
                        v_trans_type,
                        'RI',
                        NULL,                            --v_pol_prev_drcr_no,
                        cur_ri_rec.ipu_uw_yr,
                        v_user,
                        'Y',
                        TRUNC (SYSDATE));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error :- Unable to post treaty reinsurance transactions to the accounts...');
                END;

                BEGIN
                    gin_uw_author_proc.post_pool_ri_trans (
                        cur_ri_rec.pol_batch_no,
                        cur_ri_rec.prev_tran_no,
                        'Y',
                        TRUNC (SYSDATE));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error posting pool to statements area..');
                END;

                --------------post ri gl
                --raise_error('v_acc_interface_param='||v_acc_interface_param);
                IF NVL (v_acc_interface_param, 'N') = 'Y'
                THEN
                    BEGIN
                        NULL;
                    --GIN_UW_AUTHOR_PROC.post_ri_gl_ifrs (v_batch_no, v_old_trans_no, v_uw_yr, v_user,TRUNC(SYSDATE));
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error :- Unable to post treaty reinsurance transactions to the GL accounts ...');
                    END;

                    -- RAISE_ERROR('HERE ONE');
                    BEGIN
                        -- GIN_UW_AUTHOR_PROC.post_facre_cession_ifrs (v_batch_no,  v_old_trans_no,   v_uw_yr,  v_user,  TRUNC(SYSDATE)  );
                        NULL;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error :- Unable to post facre reinsurance transactions to the accounts...');
                    END;

                    BEGIN                    -- ifrs to be taken care of  solo
                        gin_uw_author_proc.post_pool_ri_gl (
                            cur_ri_rec.pol_batch_no,
                            cur_ri_rec.prev_tran_no,
                            v_user,
                            'Y',
                            TRUNC (SYSDATE));
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error :- Unable to post reinsurance pool transactions to the accounts...');
                    END;
                ELSE
                    BEGIN
                        gin_uw_author_proc.post_ri_gl (
                            cur_ri_rec.pol_batch_no,
                            cur_ri_rec.prev_tran_no,
                            cur_ri_rec.ipu_uw_yr,
                            v_user,
                            'Y',
                            TRUNC (SYSDATE));
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error :- Unable to post treaty reinsurance transactions to the GL accounts ...');
                    END;

                    BEGIN
                        gin_uw_author_proc.post_facre_cession (
                            cur_ri_rec.pol_batch_no,
                            cur_ri_rec.prev_tran_no,
                            cur_ri_rec.ipu_uw_yr,
                            v_user,
                            'Y',
                            TRUNC (SYSDATE));
                    --               EXCEPTION
                    --                  WHEN OTHERS
                    --                  THEN
                    --                     raise_error
                    --                        ('Error :- Unable to post facre reinsurance transactions to the accounts...'
                    --                        );
                    END;

                    BEGIN                    -- ifrs to be taken care of  solo
                        gin_uw_author_proc.post_pool_ri_gl (
                            cur_ri_rec.pol_batch_no,
                            cur_ri_rec.prev_tran_no,
                            v_user,
                            'Y',
                            TRUNC (SYSDATE));
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error :- Unable to post reinsurance pool transactions to the accounts...');
                    END;
                END IF;

                IF gin_interfaces_pkg.interface_enabled (
                       'UW_TRANS',
                       cur_ri_rec.pol_past_period_endos) =
                   'Y'
                THEN
                    -- RAISE_ERROR('ERROR FETCHING TRANSACTION BATCH NUMBER...');
                    gin_interfaces_pkg.create_gl_voucher (
                        cur_ri_rec.prev_tran_no,
                        cur_ri_rec.vchr_desc,
                        v_user,
                        cur_ri_rec.pol_agnt_agent_code,
                        'U',
                        cur_ri_rec.pol_batch_no,
                        cur_ri_rec.pol_drcr_no);
                END IF;
            END IF;



            -- AUTHORISE CURRENT REINSURANCE CESSIONS
            --insert register transaction with prev refund
            --insert register with new ri prem
            --insert accumulation
            BEGIN
                gin_uw_author_proc.post_ri_transactions (
                    cur_ri_rec.pol_batch_no,
                    v_trans_no,
                    v_trans_type,
                    'RI',
                    cur_ri_rec.pol_drcr_no,              --v_pol_prev_drcr_no,
                    cur_ri_rec.ipu_uw_yr,
                    v_user,
                    'N',
                    TRUNC (SYSDATE));
            --grp_post_rein (v_trans_no, v_trans_type, v_user);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error :- Unable to post treaty reinsurance transactions to the accounts...');
            END;

            BEGIN
                gin_uw_author_proc.post_pool_ri_trans (
                    cur_ri_rec.pol_batch_no,
                    v_trans_no,
                    'N',
                    TRUNC (SYSDATE));
            -- grp_post_pool_ri_trans (v_batch_no ,v_trans_no);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR POSTING POOL TRANSACTION...');
            END;

            BEGIN
                -- Gis_Ri_Procedures.post_facre_cession (v_trans_no,v_trans_type,v_user);
                gin_uw_author_proc.post_facre_cession (
                    cur_ri_rec.pol_batch_no,
                    v_trans_no,
                    cur_ri_rec.ipu_uw_yr,
                    v_user,
                    'N',
                    TRUNC (SYSDATE));
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error :- Unable to post facre reinsurance transactions to the accounts...');
            END;

            ---------------------------
            BEGIN
                gin_uw_author_proc.post_pool_ri_gl (cur_ri_rec.pol_batch_no,
                                                    v_trans_no,
                                                    v_user,
                                                    'N',
                                                    TRUNC (SYSDATE));
            --grp_post_pool_ri_gl ( v_batch_no , v_trans_no,v_user  );
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error:- Unable to post pool reinsurance to Gl...');
            END;

            BEGIN
                gin_uw_author_proc.post_ri_gl (cur_ri_rec.pol_batch_no,
                                               v_trans_no,
                                               cur_ri_rec.ipu_uw_yr,
                                               v_user,
                                               'N',
                                               TRUNC (SYSDATE));
            -- grp_post_ri_gl (v_trans_no, v_user);            --,v_trans_type);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error :- Unable to post treaty reinsurance transactions to the GL accounts ...');
            END;

            BEGIN
                gis_ri_procedures.grp_reverse_register (
                    cur_ri_rec.pol_batch_no,
                    cur_ri_rec.prev_tran_no,
                    TRUNC (SYSDATE),
                    cur_ri_rec.ipu_code);
            --         EXCEPTION
            --            WHEN OTHERS
            --            THEN
            --               raise_error ('Error :- Unable to update registers ...');
            END;

            BEGIN
                gis_ri_procedures.grp_update_register (
                    cur_ri_rec.pol_batch_no,
                    v_trans_no,
                    TRUNC (SYSDATE));
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error :- Unable to update registers ...');
            END;

            IF gin_interfaces_pkg.interface_enabled (
                   'UW_TRANS',
                   cur_ri_rec.pol_past_period_endos) =
               'Y'
            THEN
                gin_interfaces_pkg.create_gl_voucher (
                    v_trans_no,
                    cur_ri_rec.vchr_desc,
                    v_user,
                    cur_ri_rec.pol_agnt_agent_code,
                    'U',
                    cur_ri_rec.pol_batch_no,
                    cur_ri_rec.pol_drcr_no);
            END IF;
        END LOOP;

        BEGIN
            UPDATE gin_gis_transactions
               SET ggt_trans_authorised = 'Y',
                   ggt_trans_authorised_by = v_user,
                   ggt_trans_authorise_date = TRUNC (SYSDATE)
             WHERE ggt_trans_no = v_trans_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Unable to update transaction authorization details...');
        END;

        BEGIN
            FOR cur_risks_rec IN cur_risks
            LOOP
                UPDATE gin_insured_property_unds
                   SET ipu_current_prrd_code = cur_risks_rec.prrd_code,
                       ipu_reinsured = 3
                 -- 3 stands for reinsurance edit, 2 stands for norwal reinsurance, 0 and 1 stands for reinsuance not done
                 WHERE ipu_code = cur_risks_rec.prrd_ipu_code;

                UPDATE gin_policy_risk_ri_dtls
                   SET prrd_current = 'N'
                 WHERE prrd_ipu_code = cur_risks_rec.prrd_ipu_code;

                -- TO SET PREVIUOS CURRENT RECORD TO NOT CURRENT
                FOR r IN cur_endos_risk (cur_risks_rec.prrd_ipu_code)
                LOOP
                    UPDATE gin_insured_property_unds
                       SET ipu_reinsured = 4
                     -- 4 the previous risk ri has been edited, hence this transaction ri has to be edited too
                     WHERE ipu_code = r.ipu_code;
                END LOOP;
            END LOOP;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Unable to update risks current RI details code, ...');
        END;

        --------------------------------------
        BEGIN
            --update rein auth_dt
            UPDATE gin_policy_rein_risk_details
               SET ptotr_auth_dt = TRUNC (SYSDATE)
             WHERE ptotr_ggt_tran_no = v_trans_no;

            UPDATE gin_policy_risk_ri_dtls
               SET prrd_auth_dt = TRUNC (SYSDATE), prrd_current = 'Y'
             WHERE prrd_tran_no = v_trans_no;

            UPDATE gin_facre_cessions
               SET fc_auth_dt = TRUNC (SYSDATE)
             WHERE fc_ggt_tran_no = v_trans_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Unable to update reinsurance authorization date.');
        END;
    END;



    PROCEDURE generate_si_diffs (v_pr_code IN NUMBER)
    IS
        CURSOR distinct_pol_rsks IS
              SELECT rskrg_ipu_id, rskrg_pol_policy_no            --, COUNT(1)
                FROM gin_policy_register, gin_policy_risk_reg
               WHERE pr_code = rskrg_pr_code --AND rskrg_ipu_id =v_risk_ipu_id
                                             AND rskrg_pr_code = v_pr_code
            GROUP BY rskrg_ipu_id, rskrg_pol_policy_no;

        CURSOR rsks (v_ipu_id IN NUMBER, v_polno VARCHAR2)
        IS
              SELECT curr.ipu_pol_policy_no     currpolno,
                     curr.pol_batch_no          curbatchn,
                     curr.pol_binder_policy     curbinder,
                     curr.pol_loaded            curlded,
                     curr.ipu_code,
                     curr.ipu_prev_ipu_code,
                     prev.ipu_code              prev_ipu_code,
                     curr.pol_policy_status     curpsts,
                     curr.pol_current_status    curpcsts,
                     curr.ipu_code              cur_ipu_code,
                     curr.ipu_id                cur_ipu_id,
                     curr.ipu_status,
                     curr.ipu_value             cur_ipu_value,
                     curr.ipu_reinsure_amt      cur_ri_amnt,
                     curr.mand_si               curr_mand_si,
                     prev.mand_si               prev_mand_si,
                     prev.ipu_value             prv_ipu_value,
                     curr.qs_si                 curr_qs_si,
                     prev.qs_si                 prev_qs_si,
                     prev.ipu_reinsure_amt      prv_ri_amnt,
                     curr.fstsup_si             curr_fst_si,
                     prev.fstsup_si             prev_fst_si,
                     curr.secsup_si             curr_sec_si,
                     prev.secsup_si             prev_sec_si,
                     curr.facre_si              curr_fac_si,
                     prev.facre_si              prev_fac_si,
                     curr.ob_facre_si           curr_facb_si,
                     prev.ob_facre_si           prev_facb_si,
                     curr.net_si                curr_net_si,
                     prev.net_si                prev_net_si,
                     trns,
                     rir,
                     ric,
                     editri_si_diff,
                     editri_ri_diff,
                     riedit.e_man_si_diff,
                     riedit.e_qs_si_diff,
                     riedit.e_fst_si_diff,
                     riedit.e_sec_si_diff,
                     riedit.e_fac_si_diff,
                     riedit.e_fob_si_diff,
                     riedit.e_net_si_diff,
                     --,CURR.IPU_VALUE CUR_IPU_VALUE,CURR.IPU_SI_DIFF CUR_IPU_SI_DIFF,
                     --PREV.IPU_VALUE PRV_IPU_VALUE,PREV.IPU_SI_DIFF PRV_IPU_SI_DIFF, CURR.IPU_REINSURE_AMT CUR_RI_AMNT,
                     CASE
                         WHEN NVL (curr.pol_loaded, 'N') = 'Y'
                         THEN
                             curr.fstsup_si
                         WHEN curr.pol_policy_status IN ('RN',
                                                         'NB',
                                                         'SP',
                                                         'EX',
                                                         'ME',
                                                         'RE')
                         THEN
                             curr.fstsup_si
                         WHEN curr.pol_policy_status IN ('CN')
                         THEN
                             NULL
                         WHEN curr.pol_policy_status IN ('CO')
                         THEN
                             NULL
                         ELSE
                             curr.fstsup_si - prev.fstsup_si
                     END                        fst_diff,
                     CASE
                         WHEN NVL (curr.pol_loaded, 'N') = 'Y'
                         THEN
                             curr.net_si
                         WHEN curr.pol_policy_status IN ('RN',
                                                         'NB',
                                                         'SP',
                                                         'EX',
                                                         'ME',
                                                         'RE')
                         THEN
                             curr.net_si
                         WHEN curr.pol_policy_status IN ('CN')
                         THEN
                             NULL
                         WHEN curr.pol_policy_status IN ('CO')
                         THEN
                             NULL
                         ELSE
                             curr.net_si - prev.net_si
                     END                        net_diff                   --,
                --CURR.IPU_REINSURE_DIFF_AMT CUR_RI_AMNT_DIFF, CURR.IPU_PREV_REINSURE_AMT, PREV.IPU_REINSURE_AMT PRV_RI_AMNT
                FROM (SELECT pol_batch_no,
                             ipu_code,
                             prrd_tran_no,
                             ipu_prev_ipu_code,
                             ipu_pol_policy_no,
                             ipu_id,
                             pol_check_date,
                             ipu_status,
                             pol_current_status,
                             pol_policy_status,
                             pol_loaded,
                             pol_binder_policy,
                             ipu_reinsure_amt,
                             ipu_value,
                             mand_si,
                             qs_si,
                             fstsup_si,
                             secsup_si,
                             facre_si,
                             ob_facre_si,
                             NVL (prrd_comp_retention, 0)     net_si
                        FROM gin_policies,
                             gin_insured_property_unds,
                             gin_policy_risk_ri_dtls,
                             gin_gis_transactions,
                             (  SELECT ptotr_prrd_code,
                                       SUM (
                                           NVL (
                                               DECODE (
                                                   trs_trtg_code,
                                                   1001, NVL (ptotr_trt_si_pcur,
                                                              0)),
                                               0))    mand_si,
                                       SUM (
                                           NVL (
                                               DECODE (
                                                   trs_trtg_code,
                                                   1003, NVL (ptotr_trt_si_pcur,
                                                              0)),
                                               0))    qs_si,
                                       SUM (
                                           NVL (
                                               DECODE (
                                                   trs_trtg_code,
                                                   10041, NVL (ptotr_trt_si_pcur,
                                                               0)),
                                               0))    fstsup_si,
                                       SUM (
                                           NVL (
                                               DECODE (
                                                   trs_trtg_code,
                                                   10042, NVL (ptotr_trt_si_pcur,
                                                               0)),
                                               0))    secsup_si
                                  FROM gin_policy_rein_risk_details, gin_treaties
                                 WHERE ptotr_trs_code = trs_code
                              GROUP BY ptotr_prrd_code),
                             (  SELECT fc_prrd_code,
                                       SUM (
                                           NVL (
                                               DECODE (NVL (fc_facre_type, 'N'),
                                                       'N', NVL (fc_amount, 0)),
                                               0))    facre_si,
                                       SUM (
                                           NVL (
                                               DECODE (NVL (fc_facre_type, 'N'),
                                                       'O', NVL (fc_amount, 0)),
                                               0))    ob_facre_si
                                  FROM gin_facre_cessions
                              GROUP BY fc_prrd_code)
                       WHERE     pol_batch_no = ipu_pol_batch_no
                             AND ipu_code = prrd_ipu_code
                             AND prrd_tran_no = ggt_trans_no
                             AND ggt_uw_clm_tran != 'R'
                             AND NVL (ggt_trans_authorised, 'N') = 'Y'
                             AND prrd_code = fc_prrd_code(+)
                             AND prrd_code = ptotr_prrd_code(+)) curr,
                     (SELECT ipu_code,
                             prrd_tran_no,
                             mand_si,
                             qs_si,
                             fstsup_si,
                             secsup_si,
                             facre_si,
                             ob_facre_si,
                             NVL (prrd_comp_retention, 0)     net_si,
                             ipu_reinsure_amt,
                             ipu_value
                        FROM gin_policies,
                             gin_insured_property_unds,
                             gin_policy_risk_ri_dtls,
                             gin_gis_transactions,
                             (  SELECT ptotr_prrd_code,
                                       SUM (
                                           NVL (
                                               DECODE (
                                                   trs_trtg_code,
                                                   1001, NVL (ptotr_trt_si_pcur,
                                                              0)),
                                               0))    mand_si,
                                       SUM (
                                           NVL (
                                               DECODE (
                                                   trs_trtg_code,
                                                   1003, NVL (ptotr_trt_si_pcur,
                                                              0)),
                                               0))    qs_si,
                                       SUM (
                                           NVL (
                                               DECODE (
                                                   trs_trtg_code,
                                                   10041, NVL (ptotr_trt_si_pcur,
                                                               0)),
                                               0))    fstsup_si,
                                       SUM (
                                           NVL (
                                               DECODE (
                                                   trs_trtg_code,
                                                   10042, NVL (ptotr_trt_si_pcur,
                                                               0)),
                                               0))    secsup_si
                                  FROM gin_policy_rein_risk_details, gin_treaties
                                 WHERE ptotr_trs_code = trs_code
                              GROUP BY ptotr_prrd_code),
                             (  SELECT fc_prrd_code,
                                       SUM (
                                           NVL (
                                               DECODE (NVL (fc_facre_type, 'N'),
                                                       'N', NVL (fc_amount, 0)),
                                               0))    facre_si,
                                       SUM (
                                           NVL (
                                               DECODE (NVL (fc_facre_type, 'N'),
                                                       'O', NVL (fc_amount, 0)),
                                               0))    ob_facre_si
                                  FROM gin_facre_cessions
                              GROUP BY fc_prrd_code)
                       WHERE     pol_batch_no = ipu_pol_batch_no
                             AND ipu_code = prrd_ipu_code
                             AND prrd_tran_no = ggt_trans_no
                             AND ggt_uw_clm_tran != 'R'
                             AND NVL (ggt_trans_authorised, 'N') = 'Y'
                             AND prrd_code = fc_prrd_code(+)
                             AND prrd_code = ptotr_prrd_code(+)) prev,
                     (  SELECT rskrg_ipu_code,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           1
                                       ELSE
                                           0
                                   END)     trns,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           NVL (rskrg_si_diff, 0)
                                       ELSE
                                           0
                                   END)     editri_si_diff,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           NVL (rskrg_reinsure_diff_amt, 0)
                                       ELSE
                                           0
                                   END)     editri_ri_diff,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           NVL (rskrg_mand_si_diff, 0)
                                       ELSE
                                           0
                                   END)     e_man_si_diff,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           NVL (rskrg_quota_si_diff, 0)
                                       ELSE
                                           0
                                   END)     e_qs_si_diff,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           NVL (rskrg_fstsup_si_diff, 0)
                                       ELSE
                                           0
                                   END)     e_fst_si_diff,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           NVL (rskrg_secsup_si_diff, 0)
                                       ELSE
                                           0
                                   END)     e_sec_si_diff,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           NVL (rskrg_facre_si_diff, 0)
                                       ELSE
                                           0
                                   END)     e_fac_si_diff,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           NVL (rskrg_facre_ob_si_diff, 0)
                                       ELSE
                                           0
                                   END)     e_fob_si_diff,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type NOT IN ('RIR', 'RIC')
                                       THEN
                                           NVL (rskrg_net_si_diff, 0)
                                       ELSE
                                           0
                                   END)     e_net_si_diff,
                               SUM (CASE
                                        WHEN pr_tran_type NOT IN ('RIR',
                                                                  'RIC',
                                                                  'NB',
                                                                  'RN')
                                        THEN
                                            1
                                        ELSE
                                            0
                                    END)    en,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type = 'RIR' THEN 1
                                       ELSE 0
                                   END)     rir,
                               SUM (
                                   CASE
                                       WHEN pr_tran_type = 'RIC' THEN 1
                                       ELSE 0
                                   END)     ric
                          FROM gin_policy_register, gin_policy_risk_reg
                         WHERE pr_code = rskrg_pr_code
                      GROUP BY rskrg_ipu_code) riedit
               WHERE     curr.ipu_prev_ipu_code = prev.ipu_code(+)
                     AND curr.ipu_code = riedit.rskrg_ipu_code(+)
                     AND curr.ipu_pol_policy_no = v_polno
                     AND curr.ipu_id = v_ipu_id
            -- AND CURR.POL_CHECK_DATE > TO_DATE('01/06/2015','DD/MM/YYYY')--;
            -- AND NVL(CURR.IPU_SI_DIFF,0) != CASE
            -- WHEN NVL(POL_LOADED,'N') = 'Y' THEN CURR.IPU_VALUE
            -- WHEN POL_POLICY_STATUS IN ('RN','NB','SP','EX','ME','RE') THEN CURR.IPU_VALUE
            -- WHEN POL_POLICY_STATUS IN ('CO','CN') THEN -PREV.IPU_VALUE
            -- ELSE CURR.IPU_VALUE - PREV.IPU_VALUE
            -- END
            ORDER BY curr.pol_batch_no;

        CURSOR editri (vipucode IN NUMBER)
        IS
              SELECT pr_code,
                     rskrg_code                      rskrgcode,
                     rskrg_ipu_code,
                     rskrg_ipu_id                    ipu_id,
                     pr_tran_type                    ttyp,
                     pr_transaction_date             dte,
                     pr_ggt_trans_no                 trno,
                     ipu_prev_ipu_code,
                     rskrg_sum_insured               gsi,
                     rskrg_si_diff                   gsidiff,
                     rskrg_tran_type                 rttype,
                     rskrg_reinsure_amt              riamnt,
                     rskrg_reinsure_diff_amt         ri_diff,
                     rskrg_mand_si                   mansi,
                     rskrg_quota_si                  qssi,
                     rskrg_fstsup_si                 fstsi,
                     rskrg_secsup_si                 secsi,
                     rskrg_facre_si                  facsi,
                     rskrg_facre_ob_si               fobsi,
                     rskrg_pool_si                   poolsl,
                     rskrg_net_si                    netsi,
                       NVL (rskrg_mand_si, 0)
                     + NVL (rskrg_quota_si, 0)
                     + NVL (rskrg_fstsup_si, 0)
                     + NVL (rskrg_secsup_si, 0)
                     + NVL (rskrg_facre_si, 0)
                     + NVL (rskrg_facre_ob_si, 0)
                     + NVL (rskrg_pool_si, 0)
                     + NVL (rskrg_net_si, 0)         calcgsi,
                     rskrg_mand_si_diff              msidif,
                     rskrg_quota_si_diff             qssidif,
                     rskrg_fstsup_si_diff            fstsidif,
                     rskrg_secsup_si_diff            secsidif,
                     rskrg_facre_si_diff             facsidiff,
                     rskrg_facre_ob_si_diff          fobsidiff,
                     rskrg_net_si_diff               netsidiff,
                       NVL (rskrg_mand_si_diff, 0)
                     + NVL (rskrg_quota_si_diff, 0)
                     + NVL (rskrg_fstsup_si_diff, 0)
                     + NVL (rskrg_secsup_si_diff, 0)
                     + NVL (rskrg_facre_si_diff, 0)
                     + NVL (rskrg_facre_ob_si_diff, 0)
                     + NVL (rskrg_net_si_diff, 0)    calcsidiff
                FROM gin_policy_register,
                     gin_policy_risk_reg,
                     gin_insured_property_unds
               WHERE     pr_code = rskrg_pr_code
                     AND rskrg_ipu_code = ipu_code
                     AND pr_tran_type IN ('RIR', 'RIC')
                     AND rskrg_ipu_code = vipucode
            ORDER BY pr_code, pr_ggt_trans_no;

        v_prv_si_diff        NUMBER;
        v_prv_ri_diff        NUMBER;
        v_si_diff            NUMBER;
        v_ri_diff            NUMBER;
        v_prv_man_si         NUMBER;
        v_prv_quot_si        NUMBER;
        v_prv_fst_si         NUMBER;
        v_prv_sec_si         NUMBER;
        v_prv_fac_si         NUMBER;
        v_prv_facb_si        NUMBER;
        v_prv_net_si         NUMBER;
        v_man_si_diff        NUMBER;
        v_quot_si_diff       NUMBER;
        v_fst_si_diff        NUMBER;
        v_sec_si_diff        NUMBER;
        v_fac_si_diff        NUMBER;
        v_facb_si_diff       NUMBER;
        v_net_si_diff        NUMBER;
        v_prv_man_si_diff    NUMBER;
        v_prv_quot_si_diff   NUMBER;
        v_prv_fst_si_diff    NUMBER;
        v_prv_sec_si_diff    NUMBER;
        v_prv_fac_si_diff    NUMBER;
        v_prv_facb_si_diff   NUMBER;
        v_prv_net_si_diff    NUMBER;
        v_ri_amnt_diff       NUMBER;
        v_start              BOOLEAN;
        v_trntype            VARCHAR2 (5);
    BEGIN
        FOR p IN distinct_pol_rsks
        LOOP
            BEGIN
                gin_risk_profiles.clean_risk_delta_amnts (
                    p.rskrg_pol_policy_no,
                    p.rskrg_ipu_id);
                v_man_si_diff := 0;
                v_quot_si_diff := 0;
                v_fst_si_diff := 0;
                v_sec_si_diff := 0;
                v_fac_si_diff := 0;
                v_facb_si_diff := 0;
                v_net_si_diff := 0;
                v_start := FALSE;

                FOR r IN rsks (p.rskrg_ipu_id, p.rskrg_pol_policy_no)
                LOOP
                    IF r.ipu_code = 20174555461
                    THEN
                        DBMS_OUTPUT.put_line (
                            '===================================');
                    END IF;

                    IF r.curbinder = 'Y'
                    THEN
                        v_trntype := r.ipu_status;
                    ELSE
                        v_trntype := r.curpsts;
                    END IF;

                    IF    v_trntype IN ('RN',
                                        'NB',
                                        'SP',
                                        'EX',
                                        'ME',
                                        'RE')
                       OR r.ipu_code = r.ipu_prev_ipu_code
                    THEN
                        v_start := TRUE;
                    END IF;

                    DBMS_OUTPUT.put_line ('v_trntype=' || v_trntype);

                    IF v_start
                    THEN
                        v_prv_man_si_diff := v_man_si_diff;
                        v_prv_quot_si_diff := v_quot_si_diff;
                        v_prv_fst_si_diff := v_fst_si_diff;
                        v_prv_sec_si_diff := v_sec_si_diff;
                        v_prv_fac_si_diff := v_fac_si_diff;
                        v_prv_facb_si_diff := v_facb_si_diff;
                        v_prv_net_si_diff := v_net_si_diff;

                        -- dbms_output.put_line('R.CURLDED='||R.CURLDED);
                        IF    NVL (r.curlded, 'N') = 'Y'
                           OR v_trntype IN ('RN',
                                            'NB',
                                            'SP',
                                            'EX',
                                            'ME',
                                            'RE')
                           OR r.ipu_code = r.ipu_prev_ipu_code
                        THEN
                            DBMS_OUTPUT.put_line ('111111');
                            v_man_si_diff := r.curr_mand_si;
                            v_quot_si_diff := r.curr_qs_si;
                            v_fst_si_diff := r.curr_fst_si;
                            v_sec_si_diff := r.curr_sec_si;
                            v_fac_si_diff := r.curr_fac_si;
                            v_facb_si_diff := r.curr_facb_si;
                            v_net_si_diff := r.curr_net_si;
                        ELSIF v_trntype IN ('CN', 'CO')
                        THEN
                            DBMS_OUTPUT.put_line ('2222222');
                            v_man_si_diff := -v_prv_man_si_diff;
                            v_quot_si_diff := -v_prv_quot_si_diff;
                            v_fst_si_diff := -v_prv_fst_si_diff;
                            v_sec_si_diff := -v_prv_sec_si_diff;
                            v_fac_si_diff := -v_prv_fac_si_diff;
                            v_facb_si_diff := -v_prv_facb_si_diff;
                            v_net_si_diff := -v_prv_net_si_diff;
                        ELSE
                            SELECT rskrg_reinsure_diff_amt
                              INTO v_ri_amnt_diff
                              FROM gin_policy_risk_reg
                             WHERE     rskrg_ipu_code = r.ipu_code
                                   AND rskrg_tran_type NOT IN ('RIC', 'RIR');

                            DBMS_OUTPUT.put_line (
                                'v_ri_amnt_diff=' || v_ri_amnt_diff);

                            IF     r.prev_ipu_code IS NOT NULL
                               AND NVL (v_ri_amnt_diff, 0) != 0
                            THEN
                                DBMS_OUTPUT.put_line ('33333');
                                v_man_si_diff :=
                                      NVL (r.curr_mand_si, 0)
                                    - NVL (r.prev_mand_si, 0);
                                v_quot_si_diff :=
                                      NVL (r.curr_qs_si, 0)
                                    - NVL (r.prev_qs_si, 0);
                                v_fst_si_diff :=
                                      NVL (r.curr_fst_si, 0)
                                    - NVL (r.prev_fst_si, 0);
                                v_sec_si_diff :=
                                      NVL (r.curr_sec_si, 0)
                                    - NVL (r.prev_sec_si, 0);
                                v_fac_si_diff :=
                                      NVL (r.curr_fac_si, 0)
                                    - NVL (r.prev_fac_si, 0);
                                v_facb_si_diff :=
                                      NVL (r.curr_facb_si, 0)
                                    - NVL (r.prev_facb_si, 0);
                                v_net_si_diff :=
                                      NVL (r.curr_net_si, 0)
                                    - NVL (r.prev_net_si, 0);
                            ELSE
                                DBMS_OUTPUT.put_line ('444444');
                                DBMS_OUTPUT.put_line (
                                    'v_ri_amnt_diff=' || v_ri_amnt_diff);

                                IF NVL (v_ri_amnt_diff, 0) != 0
                                THEN
                                    DBMS_OUTPUT.put_line (
                                           '-='
                                        || r.curpsts
                                        || 'v_NET='
                                        || r.curr_net_si
                                        || 'v_PNET='
                                        || v_prv_net_si_diff);
                                    v_man_si_diff :=
                                          NVL (r.curr_mand_si, 0)
                                        - NVL (v_prv_man_si_diff, 0);
                                    v_quot_si_diff :=
                                          NVL (r.curr_qs_si, 0)
                                        - NVL (v_prv_quot_si_diff, 0);
                                    v_fst_si_diff :=
                                          NVL (r.curr_fst_si, 0)
                                        - NVL (v_prv_fst_si_diff, 0);
                                    v_sec_si_diff :=
                                          NVL (r.curr_sec_si, 0)
                                        - NVL (v_prv_sec_si_diff, 0);
                                    v_fac_si_diff :=
                                          NVL (r.curr_fac_si, 0)
                                        - NVL (v_prv_fac_si_diff, 0);
                                    v_facb_si_diff :=
                                          NVL (r.curr_facb_si, 0)
                                        - NVL (v_prv_facb_si_diff, 0);
                                    v_net_si_diff :=
                                          NVL (r.curr_net_si, 0)
                                        - NVL (v_prv_net_si_diff, 0);
                                ELSE
                                    v_man_si_diff := 0;
                                    v_quot_si_diff := 0;
                                    v_fst_si_diff := 0;
                                    v_sec_si_diff := 0;
                                    v_fac_si_diff := 0;
                                    v_facb_si_diff := 0;
                                    v_net_si_diff := 0;
                                END IF;
                            END IF;
                        END IF;

                        --RAISE_ERROR(r.ipu_code);
                        UPDATE gin_policy_risk_reg
                           SET rskrg_mand_si_diff = v_man_si_diff,
                               rskrg_quota_si_diff = v_quot_si_diff,
                               rskrg_fstsup_si_diff = v_fst_si_diff,
                               rskrg_secsup_si_diff = v_sec_si_diff,
                               rskrg_facre_si_diff = v_fac_si_diff,
                               rskrg_facre_ob_si_diff = v_facb_si_diff,
                               rskrg_net_si_diff = v_net_si_diff
                         WHERE     rskrg_ipu_code = r.ipu_code
                               AND rskrg_tran_type NOT IN ('RIC', 'RIR');

                        DBMS_OUTPUT.put_line (
                               '-STS='
                            || r.curpsts
                            || 'v_man='
                            || v_man_si_diff
                            || 'v_quot='
                            || v_quot_si_diff
                            || 'v_fst='
                            || v_fst_si_diff
                            || 'v_sec='
                            || v_sec_si_diff
                            || 'v_fac='
                            || v_fac_si_diff
                            || 'v_facB='
                            || v_facb_si_diff
                            || 'v_net='
                            || v_net_si_diff
                            || 'v_si_diff='
                            || v_si_diff
                            || 'v_ri_diff='
                            || v_ri_diff);

                        IF NVL (r.rir, 0) != 1 OR NVL (r.ric, 0) = 1
                        THEN
                            v_si_diff := r.editri_si_diff;
                            v_ri_diff := r.editri_ri_diff;
                            v_prv_man_si := r.prev_mand_si;
                            v_prv_quot_si := r.prev_qs_si;
                            v_prv_fst_si := r.prev_fst_si;
                            v_prv_sec_si := r.prev_sec_si;
                            v_prv_fac_si := r.prev_fac_si;
                            v_prv_facb_si := r.prev_facb_si;
                            v_prv_net_si := r.prev_net_si;

                            FOR e IN editri (r.cur_ipu_code)
                            LOOP
                                IF e.ttyp = 'RIR'
                                THEN
                                    DBMS_OUTPUT.put_line (
                                           'IPUCODE='
                                        || r.cur_ipu_code
                                        || '-STS='
                                        || e.ttyp
                                        || 'v_man='
                                        || v_man_si_diff
                                        || 'v_quot='
                                        || v_quot_si_diff
                                        || 'v_fst='
                                        || v_fst_si_diff
                                        || 'v_sec='
                                        || v_sec_si_diff
                                        || 'v_fac='
                                        || v_fac_si_diff
                                        || 'v_facB='
                                        || v_facb_si_diff
                                        || 'v_net='
                                        || v_net_si_diff
                                        || 'v_si_diff='
                                        || v_si_diff
                                        || 'v_ri_diff='
                                        || v_ri_diff);

                                    UPDATE gin_policy_risk_reg
                                       SET rskrg_si_diff = -v_si_diff,
                                           rskrg_reinsure_diff_amt =
                                               -v_ri_diff,
                                           rskrg_mand_si_diff =
                                               -v_man_si_diff,
                                           rskrg_quota_si_diff =
                                               -v_quot_si_diff,
                                           rskrg_fstsup_si_diff =
                                               -v_fst_si_diff,
                                           rskrg_secsup_si_diff =
                                               -v_sec_si_diff,
                                           rskrg_facre_si_diff =
                                               -v_fac_si_diff,
                                           rskrg_facre_ob_si_diff =
                                               -v_facb_si_diff,
                                           rskrg_net_si_diff = -v_net_si_diff
                                     WHERE rskrg_code = e.rskrgcode;
                                ELSE
                                    DBMS_OUTPUT.put_line (
                                           'v_trntype='
                                        || v_trntype
                                        || 'FSTSI='
                                        || NVL (e.fstsi, 0)
                                        || ' NETSI='
                                        || e.netsi
                                        || 'v_FST='
                                        || r.e_fst_si_diff
                                        || 'v_NET='
                                        || r.e_net_si_diff
                                        || 'v_prv_fst_si_diff='
                                        || v_prv_fst_si_diff
                                        || 'v_prv_net_si_diff='
                                        || v_prv_net_si_diff);

                                    IF    v_trntype IN ('RN',
                                                        'NB',
                                                        'SP',
                                                        'EX',
                                                        'ME',
                                                        'RE')
                                       OR e.rskrg_ipu_code =
                                          e.ipu_prev_ipu_code
                                    THEN
                                        v_man_si_diff := NVL (e.mansi, 0);
                                        v_quot_si_diff := NVL (e.qssi, 0);
                                        v_fst_si_diff := NVL (e.fstsi, 0);
                                        v_sec_si_diff := NVL (e.secsi, 0);
                                        v_fac_si_diff := NVL (e.facsi, 0);
                                        v_facb_si_diff := NVL (e.fobsi, 0);
                                        v_net_si_diff := NVL (e.netsi, 0);
                                    ELSE
                                        -- v_man_si_diff :=NVL(r.CURR_MAND_SI,0) - NVL(v_prv_man_si_diff,0);
                                        -- v_quot_si_diff :=NVL(r.CURR_QS_SI,0) - NVL(v_prv_quot_si_diff,0);
                                        -- v_fst_si_diff :=NVL(r.CURR_FST_SI,0) - NVL(v_prv_fst_si_diff,0);
                                        -- v_sec_si_diff :=NVL(r.CURR_SEC_SI,0) - NVL(v_prv_sec_si_diff,0);
                                        -- v_fac_si_diff :=NVL(r.CURR_FAC_SI,0) - NVL(v_prv_fac_si_diff,0);
                                        -- v_facb_si_diff :=NVL(r.CURR_FACB_SI,0) - NVL(v_prv_facb_si_diff,0);
                                        -- v_net_si_diff :=NVL(r.CURR_NET_SI,0) - NVL(v_prv_net_si_diff,0);
                                        v_man_si_diff :=
                                              NVL (e.mansi, 0)
                                            - NVL (v_prv_man_si, 0);
                                        v_quot_si_diff :=
                                              NVL (e.qssi, 0)
                                            - NVL (v_prv_quot_si, 0);
                                        v_fst_si_diff :=
                                              NVL (e.fstsi, 0)
                                            - NVL (v_prv_fst_si, 0);
                                        v_sec_si_diff :=
                                              NVL (e.secsi, 0)
                                            - NVL (v_prv_sec_si, 0);
                                        v_fac_si_diff :=
                                              NVL (e.facsi, 0)
                                            - NVL (v_prv_fac_si, 0);
                                        v_facb_si_diff :=
                                              NVL (e.fobsi, 0)
                                            - NVL (v_prv_facb_si, 0);
                                        v_net_si_diff :=
                                              NVL (e.netsi, 0)
                                            - NVL (v_prv_net_si, 0);
                                    END IF;

                                    DBMS_OUTPUT.put_line (
                                           'IPUCODE='
                                        || r.cur_ipu_code
                                        || '-STS='
                                        || e.ttyp
                                        || 'v_man='
                                        || v_man_si_diff
                                        || 'v_quot='
                                        || v_quot_si_diff
                                        || 'v_fst='
                                        || v_fst_si_diff
                                        || 'v_sec='
                                        || v_sec_si_diff
                                        || 'v_fac='
                                        || v_fac_si_diff
                                        || 'v_facB='
                                        || v_facb_si_diff
                                        || 'v_net='
                                        || v_net_si_diff
                                        || 'v_si_diff='
                                        || v_si_diff
                                        || 'v_ri_diff='
                                        || v_ri_diff
                                        || 'v_prv_fst_si='
                                        || v_prv_fst_si
                                        || 'v_prv_net_si='
                                        || v_prv_net_si);

                                    UPDATE gin_policy_risk_reg
                                       SET rskrg_si_diff = v_si_diff,
                                           rskrg_reinsure_diff_amt =
                                               v_ri_diff,
                                           rskrg_mand_si_diff = v_man_si_diff,
                                           rskrg_quota_si_diff =
                                               v_quot_si_diff,
                                           rskrg_fstsup_si_diff =
                                               v_fst_si_diff,
                                           rskrg_secsup_si_diff =
                                               v_sec_si_diff,
                                           rskrg_facre_si_diff =
                                               v_fac_si_diff,
                                           rskrg_facre_ob_si_diff =
                                               v_facb_si_diff,
                                           rskrg_net_si_diff = v_net_si_diff
                                     WHERE rskrg_code = e.rskrgcode;
                                END IF;
                            END LOOP;
                        END IF;
                    -- dbms_output.put_line('-STS='||v_trntype||'-CV='||r.CUR_IPU_VALUE||'-CDIFF='||R.CUR_IPU_SI_DIFF||'-CALCDIF='||v_si_diff);
                    -- dbms_output.put_line('-STS='||R.CURPSTS||'v_man_si_diff='||v_man||'v_quot_si_diff='||v_quot
                    -- ||'v_fst='||v_fst_si_diff||'v_sec='||v_sec_si_diff||'v_fac='||v_fac_si_diff||'v_facB='||v_facb_si_diff||'v_net='||v_net_si_diff);
                    END IF;
                --dbms_output.put_line('-STS='||R.IPU_CODE);
                END LOOP;
            EXCEPTION
                WHEN OTHERS
                THEN
                    INSERT INTO gin_cleaned_risks (rsk_ipu_id,
                                                   rsk_pol_policy_no,
                                                   error)
                             VALUES (p.rskrg_ipu_id,
                                     p.rskrg_pol_policy_no,
                                     'ERROR-SYS');
            END;
        END LOOP;
    END;

    PROCEDURE grp_update_register (v_pol_batch_no   IN NUMBER,
                                   v_tran_no        IN NUMBER,
                                   v_tran_dt        IN DATE,
                                   v_ipu_code       IN NUMBER,
                                   v_pr_code        IN NUMBER,
                                   v_new_trans_no   IN NUMBER)
    IS
        v_tran_type                VARCHAR2 (5);
        v_tran_sign                NUMBER := 0;
        v_facre_com                NUMBER := 0;
        v_facre_ref_com            NUMBER := 0;
        v_facre_prem               NUMBER := 0;
        v_facre_si                 NUMBER := 0;
        v_facre_ref_prem           NUMBER := 0;
        v_errmsg                   VARCHAR2 (200);
        v_code                     NUMBER;
        v_prem_type                VARCHAR2 (20);
        v_rskrg_code               NUMBER;
        v_comp_rate                NUMBER := 0;
        v_ri_premium               NUMBER := 0;
        v_facre_com_rate           NUMBER := 0;
        v_facre_ref_com_rate       NUMBER := 0;
        v_facre_prem_rate          NUMBER := 0;
        v_facre_ref_prem_rate      NUMBER := 0;

        v_mand_rate                NUMBER := 0;
        v_mand_prem                NUMBER := 0;
        v_mand_si                  NUMBER := 0;
        v_mand_pct                 NUMBER := 0;
        v_mand_com                 NUMBER := 0;
        v_mand_eq_prem             NUMBER := 0;
        v_mand_noneq_prem          NUMBER := 0;
        v_mand_eq_com              NUMBER := 0;
        v_mand_noneq_com           NUMBER := 0;
        v_qs_rate                  NUMBER := 0;
        v_qs_com                   NUMBER := 0;
        v_qs_prem                  NUMBER := 0;
        v_qs_si                    NUMBER := 0;
        v_qs_pct                   NUMBER := 0;
        v_qs_eq_prem               NUMBER := 0;
        v_qs_noneq_prem            NUMBER := 0;
        v_qs_eq_com                NUMBER := 0;
        v_qs_noneq_com             NUMBER := 0;
        v_fstsup_rate              NUMBER := 0;
        v_fstsup_com               NUMBER := 0;
        v_fstsup_prem              NUMBER := 0;
        v_fstsup_si                NUMBER := 0;
        v_fstsup_pct               NUMBER := 0;
        v_fstsup_eq_prem           NUMBER := 0;
        v_fstsup_noneq_prem        NUMBER := 0;
        v_fstsup_eq_com            NUMBER := 0;
        v_fstsup_noneq_com         NUMBER := 0;
        v_secsup_prem              NUMBER := 0;
        v_secsup_si                NUMBER := 0;
        v_secsup_pct               NUMBER := 0;
        v_secsup_rate              NUMBER := 0;
        v_secsup_com               NUMBER := 0;
        v_secsup_eq_prem           NUMBER := 0;
        v_secsup_noneq_prem        NUMBER := 0;
        v_secsup_eq_com            NUMBER := 0;
        v_secsup_noneq_com         NUMBER := 0;

        v_facre_eq_prem            NUMBER := 0;
        v_facre_noneq_prem         NUMBER := 0;
        v_facre_eq_com             NUMBER := 0;
        v_facre_noneq_com          NUMBER := 0;

        v_ob_facre_com_rate        NUMBER;
        v_ob_facre_ref_com_rate    NUMBER;
        v_ob_facre_com             NUMBER;
        v_ob_facre_ref_com         NUMBER;
        v_ob_facre_prem            NUMBER;
        v_ob_facre_si              NUMBER;
        v_ob_facre_ref_prem        NUMBER;
        v_ob_facre_prem_rate       NUMBER;
        v_ob_facre_ref_prem_rate   NUMBER;
        v_ob_facre_eq_prem         NUMBER := 0;
        v_ob_facre_noneq_prem      NUMBER := 0;

        v_pool_prem                NUMBER;
        v_pool_comm                NUMBER;
        v_pool_vat                 NUMBER;
        v_pool_si                  NUMBER;
        v_pool_rate                NUMBER;

        v_pool_ref_prem            NUMBER;
        v_pool_ref_comm            NUMBER;
        v_exhange_rate             NUMBER;
        v_rnd                      NUMBER := 0;
        v_rnd_bcur                 NUMBER;

        v_net_rate                 NUMBER;
        v_rsk_net_prem             NUMBER;
        v_pol_net_prem             NUMBER;
        v_eq_prem                  NUMBER;
        v_non_eq_prem              NUMBER;
        v_com_ret                  NUMBER;
        v_gross_si                 NUMBER;
        v_net_si                   NUMBER;
        v_gross_prem               NUMBER;

        v_tl                       NUMBER;
        v_phfund                   NUMBER;
        v_sd                       NUMBER;
        v_duties                   NUMBER;

        v_rsk_count                NUMBER := 0;

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;

        CURSOR cur_all_risks IS
            SELECT prrd_code,
                   ipu_wef,
                   ipu_wet,
                   ipu_eff_wet,
                   ipu_eff_wef,
                   ipu_code,
                   ipu_sec_scl_code,
                   ipu_id,
                   prrd_comp_retention,
                   ipu_comm_endos_diff_amt,
                   ipu_quz_code,
                   ipu_quz_sht_desc,
                   ipu_prem_tax,
                   ipu_property_id,
                   ipu_status,
                   ipu_current_prrd_code,
                   ipu_endos_diff_amt,
                   ipu_si_diff,
                   prrd_net_prem,
                   ipu_endos_diff_amt     prrd_ri_prem,
                   ipu_reinsure_amt,
                   ipu_value,
                   ipu_covt_code,
                   ipu_itl
              FROM gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_policies
             WHERE     ipu_code = prrd_ipu_code
                   AND ipu_pol_batch_no = pol_batch_no
                   AND pol_batch_no = v_pol_batch_no
                   AND pol_loaded != 'Y'
                   AND prrd_tran_no = v_tran_no
                   AND ipu_code = v_ipu_code;

        -- AND PRRD_CURRENT='D';

        CURSOR cur_rein (v_prrd_code NUMBER)
        IS
              SELECT ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)))    mand_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_si_pcur, 0)),
                                 0)))    mand_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_prem, 0)),
                                 0)))    mand_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)))    mand_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_com, 0)),
                                 0)))    mand_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              mand_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1001, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              mand_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)))    qs_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_si_pcur, 0)),
                                 0)))    qs_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)))    qs_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              qs_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_prem, 0)),
                                 0)))    qs_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_com, 0)),
                                 0)))    qs_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1003, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              qs_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)))    fstsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_si_pcur, 0)),
                                 0)))    fstsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)))    fstsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              fstsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_prem, 0)),
                                 0)))    fstsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_com, 0)),
                                 0)))    fstsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              fstsup_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)))    secsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_si_pcur, 0)),
                                 0)))    secsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)))    secsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              secsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_prem, 0)),
                                 0)))    secsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_com, 0)),
                                 0)))    secsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              secsup_ref_pct
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_prrd_code = v_prrd_code
            GROUP BY ptotr_ipu_code;

        CURSOR cur_pol_rein (v_trans_no NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_si_pcur, 0)),
                             0))    mand_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))    mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))    mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_si_pcur, 0)),
                             0))    qs_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))    qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))    qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_si_pcur, 0)),
                             0))    fstsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))    fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))    fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_si_pcur, 0)),
                             0))    secsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))    secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))    secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    secsup_noneq_com
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ggt_tran_no = v_trans_no
                     AND PTOTR_IPU_CODE = v_ipu_code
            GROUP BY ptotr_ggt_tran_no;

        CURSOR cur_rsk_rein_dtls (v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_policy_rein_risk_details, gin_treaties
             WHERE     ptotr_trs_code = trs_code
                   AND ptotr_prrd_code = v_prrd_code;

        CURSOR cur_rsk_rein_part_dtls (v_ptotr_code NUMBER)
        IS
            SELECT *
              FROM gin_participations
             WHERE part_ptotr_code = v_ptotr_code;

        CURSOR cur_pol_facre IS
            SELECT SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_comm_amt, 0)),
                           0))    facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_amt, 0)),
                           0))    facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_amount, 0)),
                           0))    facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_prem, 0)),
                           0))    facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))    facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_comm, 0)),
                           0))    facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))    facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_comm_amt, 0)),
                           0))    ob_facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_prem_amt, 0)),
                           0))    ob_facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_amount, 0)),
                           0))    ob_facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))    ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))    ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))    ob_facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))    ob_facre_noneq_comm
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_tran_no AND FC_IPU_CODE = v_ipu_code;


        CURSOR cur_facre (v_prrd_code NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_amt, 0)),
                             0))    facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prem_amt, 0)),
                             0))    facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_amount, 0)),
                             0))    facre_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_rate, 0)),
                             0))    facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_comm, 0)),
                             0))    facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_comm_rate, 0)),
                             0))    facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_rate, 0)),
                             0))    facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_prem, 0)),
                             0))    facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_rate, 0)),
                             0))    facre_ref_prem_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_amt, 0)),
                             0))    ob_facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prem_amt, 0)),
                             0))    ob_facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_amount, 0)),
                             0))    ob_facre_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_rate, 0)),
                             0))    ob_facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_comm, 0)),
                             0))    ob_facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_comm_rate, 0)),
                             0))    ob_facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_rate, 0)),
                             0))    ob_facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_prem, 0)),
                             0))    ob_facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_rate, 0)),
                             0))    ob_facre_ref_prem_rate
                FROM gin_facre_cessions
               WHERE fc_prrd_code = v_prrd_code
            GROUP BY fc_prrd_code;

        CURSOR cur_risk_facre_dtls (v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_facre_cessions
             WHERE fc_prrd_code = v_prrd_code;

        CURSOR cur_pol_pool_trans IS
            SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                   SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                   SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                   SUM (NVL (prprd_pool_si, 0))                pool_si
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_tran_no
                   AND prprd_pol_batch_no = v_pol_batch_no
                   AND PRPRD_IPU_CODE = v_ipu_code;

        CURSOR cur_risk_pl_dtls (v_prrd_code NUMBER)
        IS
              SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                     SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                     SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                     SUM (NVL (prprd_pool_si, 0))                pool_si,
                     SUM (NVL (prprd_rein_pool_rate, 0))         pool_rate
                FROM gin_pol_rein_pool_risk_details
               WHERE prprd_prrd_code = v_prrd_code
            GROUP BY prprd_prrd_code;

        CURSOR cur_risk_pool_dtls (v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_pol_rein_pool_risk_details
             WHERE prprd_prrd_code = v_prrd_code;

        CURSOR cur_policy_own_ret (v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   ROUND (
                       SUM (
                             NVL (prrd_net_prem, 0)
                           * NVL (prrd_com_retention_rate, 0)
                           / 100),
                       v_rnd)
                       comp_gross_ret,
                   ROUND (
                       SUM (
                             NVL (prrd_ri_prem, 0)
                           * NVL (prrd_comp_net_rate, 0)
                           / 100),
                       v_rnd)
                       comp_net_ret,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_si,
                   SUM (NVL (ipu_reinsure_amt, 0))
                       comp_gross_si,
                   SUM (NVL (prrd_ri_prem, 0))
                       comp_gross_prem
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no
                   AND ipu_code = v_ipu_code;

        CURSOR cur_risk_own_ret (v_prrd_code NUMBER, v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   SUM (
                         NVL (prrd_ri_prem, 0)
                       * NVL (prrd_com_retention_rate, 0)
                       / 100)
                       comp_gross_ret,
                   SUM (NVL (prrd_com_retention_rate, 0))
                       comp_gross_rate,
                   SUM (
                         NVL (prrd_ri_prem, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_ret,
                   SUM (NVL (prrd_comp_net_rate, 0))
                       comp_net_rate,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_si,
                   SUM (NVL (ipu_reinsure_amt, 0))
                       comp_gross_si,
                   SUM (NVL (prrd_ri_prem, 0))
                       comp_gross_prem
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_code = v_prrd_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no
                   AND ipu_code = v_ipu_code;
    BEGIN
        --    ( v_pol_batch_no||';'|| v_tran_no||';'||v_ipu_code);
        FOR p IN cur_pol
        LOOP
            v_exhange_rate := p.pol_cur_rate;
            v_prem_type := NULL;
            v_prem_type := p.pol_policy_status;
            v_tran_sign := SIGN (p.pol_tot_endos_diff_amt);

            --            raise_error('GIS_RI_PROCEDURES::LN 52731::v_prem_type = '||v_prem_type);
            BEGIN
                v_gross_prem := 0;
                v_comp_rate := 0;
                v_ri_premium := 0;
                v_facre_com_rate := 0;
                v_facre_prem_rate := 0;

                v_facre_com := 0;
                v_facre_ref_com := 0;
                v_facre_prem := 0;
                v_facre_si := 0;
                v_facre_si := 0;
                v_facre_ref_prem := 0;
                v_facre_com_rate := 0;
                v_facre_ref_com_rate := 0;
                v_facre_ref_prem_rate := 0;

                v_ob_facre_com_rate := 0;
                v_ob_facre_ref_com_rate := 0;
                v_ob_facre_com := 0;
                v_ob_facre_ref_com := 0;
                v_ob_facre_prem := 0;
                v_ob_facre_si := 0;
                v_ob_facre_si := 0;
                v_ob_facre_ref_prem := 0;
                v_ob_facre_prem_rate := 0;
                v_ob_facre_ref_prem_rate := 0;

                v_pool_prem := 0;
                v_pool_comm := 0;
                v_pool_vat := 0;
                v_pool_si := 0;
                v_pool_rate := 0;

                v_pool_ref_prem := 0;
                v_pool_ref_comm := 0;

                FOR cur_pol_rein_rec IN cur_pol_rein (v_tran_no)
                LOOP
                    v_mand_prem := cur_pol_rein_rec.mand_prem;
                    v_mand_si := cur_pol_rein_rec.mand_si;
                    v_mand_eq_prem :=
                        v_tran_sign * cur_pol_rein_rec.mand_eq_prem;
                    v_mand_noneq_prem :=
                        v_tran_sign * cur_pol_rein_rec.mand_noneq_prem;
                    v_mand_com := cur_pol_rein_rec.mand_com;
                    v_mand_eq_com := cur_pol_rein_rec.mand_eq_com;
                    v_mand_noneq_com := cur_pol_rein_rec.mand_noneq_com;
                    v_qs_prem := cur_pol_rein_rec.qs_prem;
                    v_qs_si := cur_pol_rein_rec.qs_si;
                    v_qs_eq_prem := v_tran_sign * cur_pol_rein_rec.qs_eq_prem;
                    v_qs_noneq_prem :=
                        v_tran_sign * cur_pol_rein_rec.qs_noneq_prem;
                    v_qs_com := cur_pol_rein_rec.qs_com;
                    v_qs_eq_com := cur_pol_rein_rec.qs_eq_com;
                    v_qs_noneq_com := cur_pol_rein_rec.qs_noneq_com;
                    v_fstsup_prem := cur_pol_rein_rec.fstsup_prem;
                    v_fstsup_si := cur_pol_rein_rec.fstsup_si;
                    v_fstsup_eq_prem :=
                        v_tran_sign * cur_pol_rein_rec.fstsup_eq_prem;
                    v_fstsup_noneq_prem :=
                        v_tran_sign * cur_pol_rein_rec.fstsup_noneq_prem;
                    v_fstsup_com := cur_pol_rein_rec.fstsup_com;
                    v_fstsup_eq_com := cur_pol_rein_rec.fstsup_eq_com;
                    v_fstsup_noneq_com := cur_pol_rein_rec.fstsup_noneq_com;
                    v_secsup_prem := cur_pol_rein_rec.secsup_prem;
                    v_secsup_si := cur_pol_rein_rec.secsup_si;
                    v_secsup_eq_prem :=
                        v_tran_sign * cur_pol_rein_rec.secsup_eq_prem;
                    v_secsup_noneq_prem :=
                        v_tran_sign * cur_pol_rein_rec.secsup_noneq_prem;
                    v_secsup_com := cur_pol_rein_rec.secsup_com;
                    v_secsup_eq_com := cur_pol_rein_rec.secsup_eq_com;
                    v_secsup_noneq_com := cur_pol_rein_rec.secsup_noneq_com;
                END LOOP;                                  ---cur_pol_rein_rec

                ---facre sessions
                FOR cur_facre_rec IN cur_pol_facre
                LOOP
                    v_facre_prem :=
                          NVL (v_facre_prem, 0)
                        + NVL (cur_facre_rec.facre_prem, 0);
                    v_facre_si :=
                        NVL (v_facre_si, 0) + NVL (cur_facre_rec.facre_si, 0);
                    v_facre_eq_prem :=
                          NVL (v_facre_eq_prem, 0)
                        + NVL (cur_facre_rec.facre_eq_prem, 0);
                    v_facre_noneq_prem :=
                          NVL (v_facre_noneq_prem, 0)
                        + NVL (cur_facre_rec.facre_noneq_prem, 0);
                    v_facre_com :=
                          NVL (v_facre_com, 0)
                        + NVL (cur_facre_rec.facre_com, 0);
                    v_ob_facre_prem :=
                          NVL (v_ob_facre_prem, 0)
                        + NVL (cur_facre_rec.ob_facre_prem, 0);
                    v_ob_facre_si :=
                          NVL (v_ob_facre_si, 0)
                        + NVL (cur_facre_rec.ob_facre_si, 0);
                    v_ob_facre_eq_prem :=
                          NVL (v_ob_facre_eq_prem, 0)
                        + NVL (cur_facre_rec.ob_facre_eq_prem, 0);
                    v_ob_facre_noneq_prem :=
                          NVL (v_ob_facre_noneq_prem, 0)
                        + NVL (cur_facre_rec.ob_facre_noneq_prem, 0);
                    v_ob_facre_com :=
                          NVL (v_ob_facre_com, 0)
                        + NVL (cur_facre_rec.ob_facre_com, 0);
                END LOOP;

                v_facre_eq_prem := v_tran_sign * v_facre_eq_prem;
                v_facre_noneq_prem := v_tran_sign * v_facre_noneq_prem;
                v_ob_facre_eq_prem := v_tran_sign * v_ob_facre_eq_prem;
                v_ob_facre_noneq_prem := v_tran_sign * v_ob_facre_noneq_prem;

                -- pool at policy level
                FOR cur_pol_pool IN cur_pol_pool_trans
                LOOP
                    v_pool_prem := cur_pol_pool.pool_prem;
                    v_pool_comm := cur_pol_pool.pool_comm;
                    v_pool_vat := cur_pol_pool.pool_vat;
                    v_pool_si := cur_pol_pool.pool_si;
                END LOOP;

                FOR cur_policy_own_ret_rec IN cur_policy_own_ret (v_tran_no)
                LOOP
                    v_com_ret := cur_policy_own_ret_rec.comp_gross_ret;
                    v_pol_net_prem := cur_policy_own_ret_rec.comp_net_ret;
                    v_eq_prem := cur_policy_own_ret_rec.comp_eq_prem;
                    v_non_eq_prem :=
                          cur_policy_own_ret_rec.comp_non_eq_prem
                        - NVL (v_pool_prem, 0);
                    v_gross_si := cur_policy_own_ret_rec.comp_gross_si;
                    v_net_si := cur_policy_own_ret_rec.comp_net_si;
                    v_gross_prem := cur_policy_own_ret_rec.comp_gross_prem;
                END LOOP;

                v_eq_prem := v_tran_sign * v_eq_prem;
                v_non_eq_prem := v_tran_sign * v_non_eq_prem;

                BEGIN
                    SELECT SUM (
                               DECODE (UPPER (TRNT_CODE),
                                       'TL', NVL (PTX_AMOUNT, 0),
                                       0))                      tl,
                             SUM (
                                 DECODE (UPPER (TRNT_CODE),
                                         'PHFUND', NVL (PTX_AMOUNT, 0),
                                         0))
                           + SUM (
                                 DECODE (UPPER (TRNT_CODE),
                                         'COPHFUND', NVL (PTX_AMOUNT, 0),
                                         0))                    phfund,
                           SUM (
                               DECODE (UPPER (TRNT_CODE),
                                       'SD', NVL (PTX_AMOUNT, 0),
                                       'MPSD', NVL (PTX_AMOUNT, 0),
                                       0))                      SD,
                           SUM (
                               DECODE (UPPER (TRNT_CODE),
                                       'TL', 0,
                                       'SD', 0,
                                       'PHFUND', 0,
                                       'COPHFUND', 0,
                                       'MPSD', 0,
                                       NVL (PTX_AMOUNT, 0)))    other_duties
                      INTO v_tl,
                           v_phfund,
                           v_sd,
                           v_duties
                      FROM gin_policy_taxes, gin_transaction_types
                     WHERE     ptx_trac_trnt_code = trnt_code
                           AND ptx_pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        NULL;
                        v_duties := 0;
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR, UNABLE TO RETRIEVE POLICY TAXES..');
                END;

                v_duties := NVL (v_duties, 0) + NVL (v_phfund, 0);

                ---
                IF v_pr_code IS NULL
                THEN
                    BEGIN
                        v_code := NULL;

                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || gin_pr_code_seq.NEXTVAL)
                          INTO v_code
                          FROM DUAL;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. ERR AT 5...');
                    END;

                    BEGIN
                        INSERT INTO gin_policy_register (
                                        pr_code,
                                        pr_transaction_date,
                                        pr_pol_policy_no,
                                        pr_pol_ren_endos_no,
                                        pr_pol_batch_no,
                                        pr_agnt_agent_code,
                                        pr_agnt_sht_desc,
                                        pr_wef_dt,
                                        pr_wet_dt,
                                        pr_cur_code,
                                        pr_brn_code,
                                        pr_cur_symbol,
                                        pr_cur_rate,
                                        pr_brn_sht_desc,
                                        pr_inception_uwyr,
                                        pr_pro_code,
                                        pr_prev_batch_no,
                                        pr_prem_type,
                                        pr_mand_prem,
                                        pr_mand_com,
                                        pr_quota_prem,
                                        pr_quota_com,
                                        pr_fstsup_prem,
                                        pr_fstsup_com,
                                        pr_secsup_prem,
                                        pr_secsup_com,
                                        pr_facre_prem,
                                        pr_facre_com,
                                        pr_comp_net_prem,
                                        pr_comp_net_com,
                                        pr_mand_eq_prem,
                                        pr_mand_noneq_prem,
                                        pr_fstsup_eq_prem,
                                        pr_fstsup_noneq_prem,
                                        pr_secsup_eq_prem,
                                        pr_secsup_noneq_prem,
                                        pr_quota_eq_prem,
                                        pr_quota_noneq_prem,
                                        pr_facre_eq_prem,
                                        pr_facre_noneq_prem,
                                        pr_earthquake_prem,
                                        pr_ri_net_less_eq_prem,
                                        pr_mand_eq_com,
                                        pr_mand_noneq_com,
                                        pr_quota_eq_com,
                                        pr_quota_noneq_com,
                                        pr_fstsup_eq_com,
                                        pr_fstsup_noneq_com,
                                        pr_secsup_eq_com,
                                        pr_secsup_noneq_com,
                                        pr_facre_eq_com,
                                        pr_facre_noneq_com,
                                        pr_si_diff,
                                        pr_endos_diff_amt,
                                        pr_comm_amt,
                                        pr_comm_endos_diff_amt,
                                        pr_uw_year,
                                        pr_tran_type,
                                        pr_client_policy_number,
                                        pr_prp_code,
                                        pr_current_status,
                                        pr_uwyr_length,
                                        pr_policy_cover_to,
                                        pr_policy_cover_from,
                                        pr_ggt_trans_no,
                                        pr_facre_ob_prem,
                                        pr_facre_ob_com,
                                        pr_pool_com,
                                        pr_pool_prem,
                                        pr_pool_si,
                                        pr_pool_vat,
                                        --pr_pool_rate,
                                        pr_coinsurance,
                                        pr_mand_si,
                                        pr_quota_si,
                                        pr_fstsup_si,
                                        pr_secsup_si,
                                        pr_facre_si,
                                        pr_facre_ob_si,
                                        pr_net_si,
                                        pr_gross_si,
                                        pr_pro_sht_desc,
                                        pr_policy_type,
                                        pr_stamp_duty,
                                        pr_tl,
                                        pr_other_duties,
                                        pr_wtht,
                                        pr_prem_tax,
                                        pr_phfund,
                                        pr_policy_status,
                                        pr_drcr_no)
                                 VALUES (
                                     v_code,
                                     TRUNC (v_tran_dt),
                                     p.pol_policy_no,
                                     p.pol_ren_endos_no,
                                     p.pol_batch_no,
                                     p.pol_agnt_agent_code,
                                     p.pol_agnt_sht_desc,
                                     p.pol_wef_dt,
                                     p.pol_wet_dt,
                                     p.pol_cur_code,
                                     p.pol_brn_code,
                                     p.pol_cur_symbol,
                                     p.pol_cur_rate,
                                     p.pol_brn_sht_desc,
                                     p.pol_inception_uwyr,
                                     p.pol_pro_code,
                                     p.pol_prev_batch_no,
                                     v_prem_type,
                                     v_mand_prem,
                                     v_mand_com,
                                     v_qs_prem,
                                     v_qs_com,
                                     v_fstsup_prem,
                                     v_fstsup_com,
                                     v_secsup_prem,
                                     v_secsup_com,
                                     v_facre_prem,
                                     v_facre_com,
                                     v_pol_net_prem,
                                     v_com_ret,
                                     v_mand_eq_prem,
                                     v_mand_noneq_prem,
                                     v_fstsup_eq_prem,
                                     v_fstsup_noneq_prem,
                                     v_secsup_eq_prem,
                                     v_secsup_noneq_prem,
                                     v_qs_eq_prem,
                                     v_qs_noneq_prem,
                                     v_facre_eq_prem,
                                     v_facre_noneq_prem,
                                     v_eq_prem,
                                     v_non_eq_prem,
                                     v_mand_eq_com,
                                     v_mand_noneq_com,
                                     v_qs_eq_com,
                                     v_qs_noneq_com,
                                     v_fstsup_eq_com,
                                     v_fstsup_noneq_com,
                                     v_secsup_eq_com,
                                     v_secsup_noneq_com,
                                     v_facre_eq_com,
                                     v_facre_noneq_com,
                                     0,
                                     P.pol_tot_endos_diff_amt,
                                     0,
                                     0,
                                     p.pol_uw_year,
                                     'RIC',
                                     p.pol_client_policy_number,
                                     p.pol_prp_code,
                                     p.pol_current_status,
                                     p.pol_uwyr_length,
                                     p.pol_policy_cover_to,
                                     p.pol_policy_cover_from,
                                     v_new_trans_no,
                                     v_ob_facre_prem,
                                     v_ob_facre_com,
                                     v_pool_comm,
                                     v_pool_prem,
                                     v_pool_si,
                                     v_pool_vat,
                                     p.pol_coinsurance,
                                     v_mand_si,
                                     v_qs_si,
                                     v_fstsup_si,
                                     v_secsup_si,
                                     v_facre_si,
                                     v_ob_facre_si,
                                     v_net_si,
                                     v_gross_si,
                                     p.pol_pro_sht_desc,
                                     P.POL_policy_type,
                                     v_sd,
                                     v_tl,
                                     v_duties,
                                     P.pol_wtht,
                                     P.pol_prem_tax,
                                     DECODE (P.pol_tot_phfund,
                                             NULL, P.pol_tot_phfund,
                                             0, P.pol_phfund,
                                             P.pol_tot_phfund),
                                     p.pol_policy_status,
                                     p.pol_drcr_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO POST REINSURANCE REFUNDS INTO POLICY REGISTER...AT 6..');
                    END;
                ELSE
                    v_code := v_pr_code;
                END IF;

                ------------------------post risk new cessions-------------register
                FOR cur_all_risks_rec IN cur_all_risks
                LOOP
                    v_mand_prem := 0;
                    v_mand_si := 0;
                    v_mand_eq_prem := 0;
                    v_mand_noneq_prem := 0;
                    v_mand_com := 0;
                    v_mand_eq_com := 0;
                    v_mand_noneq_com := 0;
                    v_qs_prem := 0;
                    v_qs_si := 0;
                    v_qs_eq_prem := 0;
                    v_qs_noneq_prem := 0;
                    v_qs_com := 0;
                    v_qs_eq_com := 0;
                    v_qs_noneq_com := 0;
                    v_fstsup_prem := 0;
                    v_fstsup_si := 0;
                    v_fstsup_eq_prem := 0;
                    v_fstsup_noneq_prem := 0;
                    v_fstsup_com := 0;
                    v_fstsup_eq_com := 0;
                    v_fstsup_noneq_com := 0;
                    v_secsup_prem := 0;
                    v_secsup_si := 0;
                    v_secsup_eq_prem := 0;
                    v_secsup_noneq_prem := 0;
                    v_secsup_com := 0;
                    v_secsup_eq_com := 0;
                    v_secsup_noneq_com := 0;

                    v_pool_prem := 0;
                    v_pool_comm := 0;
                    v_pool_vat := 0;
                    v_pool_si := 0;
                    v_pool_rate := 0;
                    v_facre_com_rate := 0;
                    v_facre_com := 0;
                    v_facre_prem := 0;
                    v_facre_si := 0;
                    v_facre_prem_rate := 0;

                    v_ob_facre_com_rate := 0;
                    v_ob_facre_com := 0;
                    v_ob_facre_prem := 0;
                    v_ob_facre_si := 0;
                    v_ob_facre_prem_rate := 0;

                    v_net_rate := 0;
                    v_rsk_net_prem := 0;
                    v_net_si := 0;
                    v_gross_si := 0;
                    v_gross_prem := 0;

                    FOR cur_rsk_rein_rec
                        IN cur_rein (cur_all_risks_rec.prrd_code)
                    LOOP
                        v_mand_prem := cur_rsk_rein_rec.mand_prem;
                        v_mand_si := cur_rsk_rein_rec.mand_si;
                        v_mand_pct := cur_rsk_rein_rec.mand_pct;
                        --v_mand_eq_prem        := cur_rsk_rein_rec.mand_eq_prem;
                        -- v_mand_noneq_prem     := cur_rsk_rein_rec.mand_noneq_prem;
                        v_mand_com := cur_rsk_rein_rec.mand_com;
                        --v_mand_eq_com         := cur_rsk_rein_rec.mand_eq_com;
                        -- v_mand_noneq_com      := cur_pol_rein_rec.mand_noneq_com;
                        v_qs_prem := cur_rsk_rein_rec.qs_prem;
                        v_qs_si := cur_rsk_rein_rec.qs_si;
                        v_qs_pct := cur_rsk_rein_rec.qs_pct;
                        -- v_qs_eq_prem          := cur_rsk_rein_rec.qs_eq_prem;
                        -- v_qs_noneq_prem       := cur_rsk_rein_rec.qs_noneq_prem;
                        v_qs_com := cur_rsk_rein_rec.qs_com;
                        --v_qs_eq_com           := cur_rsk_rein_rec.qs_eq_com;
                        -- v_qs_noneq_com        := cur_rsk_rein_rec.qs_noneq_com;
                        v_fstsup_prem := cur_rsk_rein_rec.fstsup_prem;
                        v_fstsup_si := cur_rsk_rein_rec.fstsup_si;
                        v_fstsup_pct := cur_rsk_rein_rec.fstsup_pct;
                        --v_fstsup_eq_prem      := cur_rsk_rein_rec.fstsup_eq_prem;
                        -- v_fstsup_noneq_prem   := cur_rsk_rein_rec.fstsup_noneq_prem;
                        v_fstsup_com := cur_rsk_rein_rec.fstsup_com;
                        --v_fstsup_eq_com       := cur_rsk_rein_rec.fstsup_eq_com;
                        -- v_fstsup_noneq_com    := cur_rsk_rein_rec.fstsup_noneq_com;
                        v_secsup_prem := cur_rsk_rein_rec.secsup_prem;
                        v_secsup_si := cur_rsk_rein_rec.secsup_si;
                        v_secsup_pct := cur_rsk_rein_rec.secsup_pct;
                        --v_secsup_eq_prem      := cur_rsk_rein_rec.secsup_eq_prem;
                        -- v_secsup_noneq_prem   := cur_rsk_rein_rec.secsup_noneq_prem;
                        v_secsup_com := cur_rsk_rein_rec.secsup_com;
                    --v_secsup_eq_com       := cur_rsk_rein_rec.secsup_eq_com;
                    --v_secsup_noneq_com    := cur_rsk_rein_rec.secsup_noneq_com;
                    END LOOP;

                    FOR cur_facre_rec
                        IN cur_facre (cur_all_risks_rec.prrd_code)
                    LOOP
                        v_facre_com_rate := cur_facre_rec.facre_com_rate;
                        v_facre_com := cur_facre_rec.facre_com;
                        v_facre_prem := cur_facre_rec.facre_prem;
                        v_facre_si := cur_facre_rec.facre_si;
                        v_facre_prem_rate := cur_facre_rec.facre_rate;

                        v_ob_facre_com_rate :=
                            cur_facre_rec.ob_facre_com_rate;
                        v_ob_facre_com := cur_facre_rec.ob_facre_com;
                        v_ob_facre_prem := cur_facre_rec.ob_facre_prem;
                        v_ob_facre_si := cur_facre_rec.ob_facre_si;
                        v_ob_facre_prem_rate := cur_facre_rec.ob_facre_rate;
                    END LOOP;

                    FOR cur_risk_pool
                        IN cur_risk_pl_dtls (cur_all_risks_rec.prrd_code)
                    LOOP
                        v_pool_prem := cur_risk_pool.pool_prem;
                        v_pool_comm := cur_risk_pool.pool_comm;
                        v_pool_vat := cur_risk_pool.pool_vat;
                        v_pool_si := cur_risk_pool.pool_si;
                        v_pool_rate := cur_risk_pool.pool_rate;
                    END LOOP;

                    FOR cur_risk_own_ret_rec
                        IN cur_risk_own_ret (cur_all_risks_rec.prrd_code,
                                             v_tran_no)
                    LOOP
                        v_rsk_net_prem := cur_risk_own_ret_rec.comp_net_ret;
                        v_net_rate := cur_risk_own_ret_rec.comp_net_rate;
                        v_eq_prem := cur_risk_own_ret_rec.comp_eq_prem;
                        v_non_eq_prem :=
                              cur_risk_own_ret_rec.comp_non_eq_prem
                            - NVL (v_pool_prem, 0);
                        v_gross_si := cur_risk_own_ret_rec.comp_gross_si;
                        v_net_si := cur_risk_own_ret_rec.comp_net_si;
                        v_gross_prem := cur_risk_own_ret_rec.comp_gross_prem;
                    END LOOP;


                    BEGIN
                        SELECT COUNT (0)
                          INTO v_rsk_count
                          FROM gin_policy_risk_reg
                         WHERE     RSKRG_IPU_CODE =
                                   cur_all_risks_rec.ipu_code
                               AND RSKRG_PR_CODE = v_code
                               AND rskrg_tran_type = 'RIC'
                               AND RSKRG_GGT_TRANS_NO = v_new_trans_no;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            v_rsk_count := 0;
                    END;

                    IF NVL (v_rsk_count, 0) = 0
                    THEN
                        BEGIN
                            v_rskrg_code := NULL;

                            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                                   || gin_rskrg_code_seq.NEXTVAL
                              INTO v_rskrg_code
                              FROM DUAL;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR : UNABLE TO GENERATE SEQUENCE GIN_RSKRG_CODE_SEQ..AT 7.');
                        END;

                        BEGIN
                            INSERT INTO gin_policy_risk_reg (
                                            rskrg_code,
                                            rskrg_pol_policy_no,
                                            rskrg_pol_ren_endos_no,
                                            rskrg_pol_batch_no,
                                            rskrg_wef_dt,
                                            rskrg_wet_dt,
                                            rskrg_risk_cover_to,
                                            rskrg_risk_cover_from,
                                            rskrg_ipu_code,
                                            rskrg_scl_code,
                                            rskrg_ipu_id,
                                            rskrg_pr_code,
                                            rskrg_ggt_trans_no,
                                            rskrg_mand_rate,
                                            rskrg_mand_prem,
                                            rskrg_mand_com,
                                            rskrg_quota_rate,
                                            rskrg_quota_com,
                                            rskrg_fstsup_rate,
                                            rskrg_fstsup_com,
                                            rskrg_secsup_rate,
                                            rskrg_secsup_com,
                                            rskrg_fstsup_prem,
                                            rskrg_secsup_prem,
                                            rskrg_tran_date,
                                            rskrg_quota_prem,
                                            rskrg_uw_yr,
                                            rskrg_comm_endos_diff_amt,
                                            rskrg_cur_code,
                                            rskrg_cur_symbol,
                                            rskrg_quz_code,
                                            rskrg_quz_sht_desc,
                                            rskrg_exchange_rate,
                                            rskrg_prem_tax,
                                            rskrg_ipu_property_id,
                                            rskrg_tran_type,
                                            rskrg_coin_own_pct,
                                            rskrg_com_ret_rate,
                                            rskrg_facre_rate,
                                            rskrg_endos_diff_amt,
                                            rskrg_si_diff,
                                            rskrg_facre_prem,
                                            rskrg_facre_com,
                                            rskrg_brn_code,
                                            rskrg_brn_sht_desc,
                                            rskrg_policy_type,
                                            rskrg_agnt_sht_desc,
                                            rskrg_agnt_agent_code,
                                            rskrg_prp_code,
                                            rskrg_facre_ob_prem,
                                            rskrg_facre_ob_rate,
                                            rskrg_facre_ob_com,
                                            rskrg_pool_prem,
                                            rskrg_pool_com,
                                            rskrg_pool_si,
                                            rskrg_pool_vat,
                                            rskrg_pool_rate,
                                            rskrg_comp_net_ret,
                                            rskrg_reinsure_amt,
                                            rskrg_sum_insured,
                                            rskrg_mand_si,
                                            rskrg_quota_si,
                                            rskrg_fstsup_si,
                                            rskrg_secsup_si,
                                            rskrg_facre_si,
                                            rskrg_facre_ob_si,
                                            rskrg_net_si,
                                            rskrg_gross_si,
                                            RSKRG_COVT_CODE,
                                            RSKRG_TL)
                                     VALUES (
                                         v_rskrg_code,
                                         p.pol_policy_no,
                                         p.pol_ren_endos_no,
                                         p.pol_batch_no,
                                         cur_all_risks_rec.ipu_wef,
                                         cur_all_risks_rec.ipu_wef,
                                         cur_all_risks_rec.ipu_eff_wet,
                                         cur_all_risks_rec.ipu_eff_wef,
                                         cur_all_risks_rec.ipu_code,
                                         cur_all_risks_rec.ipu_sec_scl_code,
                                         cur_all_risks_rec.ipu_id,
                                         v_code,
                                         v_new_trans_no,
                                         NVL (v_mand_pct, 0),
                                         NVL (v_mand_prem, 0),
                                         NVL (v_mand_com, 0),
                                         NVL (v_qs_pct, 0),
                                         NVL (v_qs_com, 0),
                                         NVL (v_fstsup_pct, 0),
                                         NVL (v_fstsup_com, 0),
                                         NVL (v_secsup_pct, 0),
                                         NVL (v_secsup_com, 0),
                                         NVL (v_fstsup_prem, 0),
                                         NVL (v_secsup_prem, 0),
                                         TRUNC (v_tran_dt),
                                         NVL (v_qs_prem, 0),
                                         p.pol_uw_year,
                                         0,
                                         p.pol_cur_code,
                                         p.pol_cur_symbol,
                                         cur_all_risks_rec.ipu_quz_code,
                                         cur_all_risks_rec.ipu_quz_sht_desc,
                                         p.pol_cur_rate,
                                         NVL (cur_all_risks_rec.ipu_prem_tax,
                                              0),
                                         cur_all_risks_rec.ipu_property_id,
                                         'RIC',
                                         NVL (p.pol_coinsurance_share, 100),
                                         NVL (v_net_rate, 0),
                                         NVL (v_facre_prem_rate, 0),
                                         NVL (cur_all_risks_rec.prrd_ri_prem,
                                              0),
                                         NVL (cur_all_risks_rec.ipu_si_diff,
                                              0),
                                         v_facre_prem,
                                         v_facre_com,
                                         p.pol_brn_code,
                                         p.pol_brn_sht_desc,
                                         p.pol_policy_type,
                                         p.pol_agnt_sht_desc,
                                         p.pol_agnt_agent_code,
                                         p.pol_prp_code,
                                         v_ob_facre_prem,
                                         v_ob_facre_prem_rate,
                                         v_ob_facre_com,
                                         v_pool_prem,
                                         v_pool_comm,
                                         v_pool_si,
                                         v_pool_vat,
                                         v_pool_rate,
                                         v_rsk_net_prem,
                                         cur_all_risks_rec.ipu_reinsure_amt,
                                         cur_all_risks_rec.ipu_value,
                                         v_mand_si,
                                         v_qs_si,
                                         v_fstsup_si,
                                         v_secsup_si,
                                         v_facre_si,
                                         v_ob_facre_si,
                                         v_net_si,
                                         v_gross_si,
                                         cur_all_risks_rec.ipu_covt_code,
                                         cur_all_risks_rec.ipu_itl);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR :- UNABLE TO INSERT RI REFUND INTO THE RISK REGISTER..AT 8.');
                        END;

                        FOR rdtls
                            IN cur_rsk_rein_dtls (
                                   cur_all_risks_rec.prrd_code)
                        LOOP
                            INSERT INTO gin_policy_risk_treaty_reg (
                                            trtrg_code,
                                            trtrg_ptotr_code,
                                            trtrg_pr_code,
                                            trtrg_rskrg_code,
                                            trtrg_rei_code,
                                            trtrg_trt_code,
                                            trtrg_ta_code,
                                            trtrg_as_code,
                                            trtrg_risk_cur_code,
                                            trtrg_trt_cur_code,
                                            trtrg_exch_rate,
                                            trtrg_trt_si_pcur,
                                            trtrg_trt_si_tcur,
                                            trtrg_trt_prem_pcur,
                                            trtrg_trt_prem_tcur,
                                            trtrg_trt_share,
                                            trtrg_trt_sht_desc,
                                            trtrg_rate,
                                            trtrg_trt_comm_pcur,
                                            trtrg_trt_comm_tcur,
                                            trtrg_cession_pct,
                                            trtrg_uwyr,
                                            trtrg_ipu_code,
                                            trtrg_pol_batch_no,
                                            trtrg_risk_cur_symbol,
                                            trtrg_trt_cur_symbol,
                                            trtrg_prem_tax_pcur,
                                            trtrg_prem_tax_tcur,
                                            trtrg_trs_code,
                                            trtrg_trs_sht_desc,
                                            trtrg_rate_type,
                                            trtrg_remarks,
                                            trtrg_ggt_tran_no,
                                            trtrg_tran_type,
                                            trtrg_rprem_tax_pcur,
                                            trtrg_prrd_code,
                                            trtrg_comm_rate,
                                            trtrg_auth_dt,
                                            trtrg_rprem_tax_tcur,
                                            trtrg_earthqke_prem,
                                            trtrg_earthqke_comm_rate,
                                            trtrg_earthqke_comm,
                                            trtrg_net_less_eq_comm,
                                            trtrg_net_less_eq_prem,
                                            trtrg_ctl_code)
                                 VALUES (trtrg_code_seq.NEXTVAL,
                                         rdtls.ptotr_code,
                                         v_pr_code,
                                         v_rskrg_code,
                                         rdtls.ptotr_rei_code,
                                         rdtls.ptotr_trt_code,
                                         rdtls.ptotr_ta_code,
                                         rdtls.ptotr_as_code,
                                         rdtls.ptotr_risk_cur_code,
                                         rdtls.ptotr_trt_cur_code,
                                         rdtls.ptotr_exch_rate,
                                         rdtls.ptotr_trt_si_pcur,
                                         rdtls.ptotr_trt_si_tcur,
                                         rdtls.ptotr_trt_prem_pcur,
                                         rdtls.ptotr_trt_prem_tcur,
                                         rdtls.ptotr_trt_share,
                                         rdtls.ptotr_trt_sht_desc,
                                         rdtls.ptotr_rate,
                                         rdtls.ptotr_trt_comm_pcur,
                                         rdtls.ptotr_trt_comm_tcur,
                                         rdtls.ptotr_cession_pct,
                                         rdtls.ptotr_uwyr,
                                         rdtls.ptotr_ipu_code,
                                         rdtls.ptotr_pol_batch_no,
                                         rdtls.ptotr_risk_cur_symbol,
                                         rdtls.ptotr_trt_cur_symbol,
                                         rdtls.ptotr_prem_tax_pcur,
                                         rdtls.ptotr_prem_tax_tcur,
                                         rdtls.ptotr_trs_code,
                                         rdtls.ptotr_trs_sht_desc,
                                         rdtls.ptotr_rate_type,
                                         rdtls.ptotr_remarks,
                                         rdtls.ptotr_ggt_tran_no,
                                         rdtls.ptotr_tran_type,
                                         Rdtls.ptotr_rprem_tax_pcur,
                                         rdtls.ptotr_prrd_code,
                                         rdtls.ptotr_comm_rate,
                                         rdtls.ptotr_auth_dt,
                                         rdtls.ptotr_rprem_tax_tcur,
                                         rdtls.ptotr_earthqke_prem,
                                         rdtls.ptotr_earthqke_comm_rate,
                                         rdtls.ptotr_earthqke_comm,
                                         rdtls.ptotr_net_less_eq_comm,
                                         rdtls.ptotr_net_less_eq_prem,
                                         rdtls.ptotr_ctl_code);

                            FOR pdtls
                                IN cur_rsk_rein_part_dtls (rdtls.ptotr_code)
                            LOOP
                                INSERT INTO gin_policy_treaty_part_reg (
                                                trtpg_code,
                                                trtpg_ptotr_code,
                                                trtpg_part_code,
                                                trtpg_pr_code,
                                                trtpg_rskrg_code,
                                                trtpg_trtrg_code,
                                                trtpg_rei_code,
                                                trtpg_cede_rate,
                                                trtpg_si_amt_pcur,
                                                trtpg_si_amt_tcur,
                                                trtpg_comm_amt_pcur,
                                                trtpg_comm_amt_tcur,
                                                trtpg_prem_amt_pcur,
                                                trtpg_prem_amt_tcur,
                                                trtpg_trt_code,
                                                trtpg_trt_sht_desc,
                                                trtpg_agnt_agent_code,
                                                trtpg_agnt_sht_desc,
                                                trtpg_uwyr,
                                                trtpg_pol_batch_no,
                                                trtpg_pol_policy_no,
                                                trtpg_pol_ren_endos_no,
                                                trtpg_ipu_code,
                                                trtpg_rprem_tax_pcur,
                                                trtpg_rprem_tax_tcur,
                                                trtpg_prem_tax_pcur,
                                                trtpg_prem_tax_tcur,
                                                trtpg_ta_code,
                                                trtpg_as_code,
                                                trtpg_fiscal_year,
                                                trtpg_trs_code,
                                                trtpg_trs_sht_desc,
                                                trtpg_trpa_code,
                                                trtpg_mgt_fee_tcur,
                                                trtpg_mgt_fee_pcur)
                                     VALUES (trtpg_code_seq.NEXTVAL,
                                             rdtls.ptotr_code,
                                             pdtls.part_code,
                                             v_pr_code,
                                             v_rskrg_code,
                                             trtrg_code_seq.CURRVAL,
                                             rdtls.ptotr_rei_code,
                                             pdtls.part_cede_rate,
                                             pdtls.part_si_amt_pcur,
                                             pdtls.part_si_amt_tcur,
                                             pdtls.part_comm_amt_pcur,
                                             pdtls.part_comm_amt_tcur,
                                             pdtls.part_prem_amt_pcur,
                                             pdtls.part_prem_amt_tcur,
                                             pdtls.part_trt_code,
                                             pdtls.part_trt_sht_desc,
                                             pdtls.part_agnt_agent_code,
                                             pdtls.part_agnt_sht_desc,
                                             pdtls.part_uwyr,
                                             pdtls.part_pol_batch_no,
                                             pdtls.part_pol_policy_no,
                                             pdtls.part_pol_ren_endos_no,
                                             pdtls.part_ipu_code,
                                             pdtls.part_rprem_tax_pcur,
                                             pdtls.part_rprem_tax_tcur,
                                             pdtls.part_prem_tax_pcur,
                                             pdtls.part_prem_tax_tcur,
                                             pdtls.part_ta_code,
                                             pdtls.part_as_code,
                                             pdtls.part_fiscal_year,
                                             pdtls.part_trs_code,
                                             pdtls.part_trs_sht_desc,
                                             pdtls.part_trpa_code,
                                             pdtls.part_mgt_fee_tcur,
                                             pdtls.part_mgt_fee_pcur);
                            END LOOP;
                        END LOOP;

                        DELETE gin_policy_risk_facre_reg
                         WHERE     facrg_pr_code = v_pr_code
                               AND facrg_rskrg_code = v_rskrg_code;


                        FOR fdtls
                            IN cur_risk_facre_dtls (
                                   cur_all_risks_rec.prrd_code)
                        LOOP
                            INSERT INTO gin_policy_risk_facre_reg (
                                            facrg_code,
                                            facrg_fc_code,
                                            facrg_pr_code,
                                            facrg_rskrg_code,
                                            facrg_agnt_agent_code,
                                            facrg_amount,
                                            facrg_wef,
                                            facrg_ipu_code,
                                            facrg_agent_sht_desc,
                                            facrg_rate,
                                            facrg_comm_rate,
                                            facrg_comm_amt,
                                            facrg_don_by,
                                            facrg_dc_no,
                                            facrg_prem_amt,
                                            facrg_pol_batch_no,
                                            facrg_uwyr,
                                            facrg_ggt_tran_no,
                                            facrg_tran_type,
                                            facrg_scl_code,
                                            facrg_amt_or_rate,
                                            facrg_prrd_code,
                                            facrg_auth_dt,
                                            facrg_wet,
                                            facrg_earthqke_prem,
                                            facrg_earthqke_comm_rate,
                                            facrg_earthqke_comm,
                                            facrg_net_less_eq_comm,
                                            facrg_net_less_eq_prem,
                                            facrg_facre_type,
                                            facrg_prem_diff_amt,
                                            facrg_remark,
                                            facrg_vat_amt,
                                            facrg_vat_rate,
                                            facrg_mngmnt_amt,
                                            facrg_rein_tax_amt,
                                            facrg_mngmnt_type,
                                            facrg_mngmnt_value,
                                            facrg_rein_tax_type,
                                            facrg_rein_tax_value)
                                 VALUES (facrg_code_seq.NEXTVAL,
                                         fdtls.fc_code,
                                         v_pr_code,
                                         v_rskrg_code,
                                         fdtls.fc_agnt_agent_code,
                                         fdtls.fc_amount,
                                         fdtls.fc_wef,
                                         fdtls.fc_ipu_code,
                                         fdtls.fc_agent_sht_desc,
                                         fdtls.fc_rate,
                                         fdtls.fc_comm_rate,
                                         fdtls.fc_comm_amt,
                                         fdtls.fc_don_by,
                                         fdtls.fc_dc_no,
                                         fdtls.fc_prem_amt,
                                         fdtls.fc_pol_batch_no,
                                         fdtls.fc_uwyr,
                                         fdtls.fc_ggt_tran_no,
                                         fdtls.fc_tran_type,
                                         fdtls.fc_scl_code,
                                         fdtls.fc_amt_or_rate,
                                         fdtls.fc_prrd_code,
                                         fdtls.fc_auth_dt,
                                         fdtls.fc_wet,
                                         fdtls.fc_earthqke_prem,
                                         fdtls.fc_earthqke_comm_rate,
                                         fdtls.fc_earthqke_comm,
                                         fdtls.fc_net_less_eq_comm,
                                         fdtls.fc_net_less_eq_prem,
                                         fdtls.fc_facre_type,
                                         fdtls.fc_prem_diff_amt,
                                         fdtls.fc_remark,
                                         fdtls.fc_vat_amt,
                                         fdtls.fc_vat_rate,
                                         fdtls.fc_mngmnt_amt,
                                         fdtls.fc_rein_tax_amt,
                                         fdtls.fc_mngmnt_type,
                                         fdtls.fc_mngmnt_value,
                                         fdtls.fc_rein_tax_type,
                                         fdtls.fc_rein_tax_value);
                        END LOOP;

                        DELETE gin_policy_risk_pool_reg
                         WHERE     poorg_pr_code = v_pr_code
                               AND poorg_rskrg_code = v_rskrg_code;


                        FOR pdtls
                            IN cur_risk_pool_dtls (
                                   cur_all_risks_rec.prrd_code)
                        LOOP
                            INSERT INTO gin_policy_risk_pool_reg (
                                            poorg_code,
                                            poorg_prprd_code,
                                            poorg_pr_code,
                                            poorg_rskrg_code,
                                            poorg_scrpr_code,
                                            poorg_rein_pool_rate,
                                            poorg_ipu_code,
                                            poorg_scl_code,
                                            poorg_covt_code,
                                            poorg_pol_batch_no,
                                            poorg_rein_pool_amt,
                                            poorg_rein_pool_comm_rate,
                                            poorg_rein_pool_vat_rate,
                                            poorg_rein_pool_comm_amt,
                                            poorg_rein_pool_vat_amt,
                                            poorg_ggt_tran_no,
                                            poorg_uwyr,
                                            poorg_pol_ren_endos_no,
                                            poorg_date,
                                            poorg_risk_trt_own_ret_amt,
                                            poorg_pta_code,
                                            poorg_os_claim_amt,
                                            poorg_paid_claim_amt,
                                            poorg_pool_net_amt,
                                            poorg_prrd_code,
                                            poorg_pool_si)
                                 VALUES (poorg_code_seq.NEXTVAL,
                                         pdtls.prprd_code,
                                         v_pr_code,
                                         v_rskrg_code,
                                         pdtls.prprd_scrpr_code,
                                         pdtls.prprd_rein_pool_rate,
                                         pdtls.prprd_ipu_code,
                                         pdtls.prprd_scl_code,
                                         pdtls.prprd_covt_code,
                                         pdtls.prprd_pol_batch_no,
                                         pdtls.prprd_rein_pool_amt,
                                         pdtls.prprd_rein_pool_comm_rate,
                                         pdtls.prprd_rein_pool_vat_rate,
                                         pdtls.prprd_rein_pool_comm_amt,
                                         pdtls.prprd_rein_pool_vat_amt,
                                         pdtls.prprd_ggt_tran_no,
                                         pdtls.prprd_uwyr,
                                         pdtls.prprd_pol_ren_endos_no,
                                         pdtls.prprd_date,
                                         pdtls.prprd_risk_trt_own_ret_amt,
                                         pdtls.prprd_pta_code,
                                         pdtls.prprd_os_claim_amt,
                                         pdtls.prprd_paid_claim_amt,
                                         pdtls.prprd_pool_net_amt,
                                         pdtls.prprd_prrd_code,
                                         pdtls.prprd_pool_si);
                        END LOOP;                           --cur_rsk_rein_rec
                    END IF;
                END LOOP;

                BEGIN
                    generate_si_diffs (v_code);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;
            END loop;                                          --cur_all_risks
        END LOOP;                                                   -- cur_pol
    END;

    PROCEDURE grp_update_register (v_pol_batch_no   IN     NUMBER,
                                   v_tran_no        IN     NUMBER,
                                   v_tran_dt        IN     DATE,
                                   v_pr_code           OUT NUMBER)
    IS
        v_tran_type                VARCHAR2 (5);
        v_facre_com                NUMBER := 0;
        v_facre_ref_com            NUMBER := 0;
        v_facre_prem               NUMBER := 0;
        v_facre_si                 NUMBER := 0;
        v_facre_ref_prem           NUMBER := 0;
        v_errmsg                   VARCHAR2 (200);
        --v_pr_code                  number;
        v_prem_type                VARCHAR2 (20);
        v_rskrg_code               NUMBER;
        v_comp_rate                NUMBER := 0;
        v_ri_premium               NUMBER := 0;
        v_facre_com_rate           NUMBER := 0;
        v_facre_ref_com_rate       NUMBER := 0;
        v_facre_prem_rate          NUMBER := 0;
        v_facre_ref_prem_rate      NUMBER := 0;

        v_mand_rate                NUMBER := 0;
        v_mand_prem                NUMBER := 0;
        v_mand_si                  NUMBER := 0;
        v_mand_pct                 NUMBER := 0;
        v_mand_com                 NUMBER := 0;
        v_mand_eq_prem             NUMBER := 0;
        v_mand_noneq_prem          NUMBER := 0;
        v_mand_eq_com              NUMBER := 0;
        v_mand_noneq_com           NUMBER := 0;
        v_qs_rate                  NUMBER := 0;
        v_qs_com                   NUMBER := 0;
        v_qs_prem                  NUMBER := 0;
        v_qs_si                    NUMBER := 0;
        v_qs_pct                   NUMBER := 0;
        v_qs_eq_prem               NUMBER := 0;
        v_qs_noneq_prem            NUMBER := 0;
        v_qs_eq_com                NUMBER := 0;
        v_qs_noneq_com             NUMBER := 0;
        v_fstsup_rate              NUMBER := 0;
        v_fstsup_com               NUMBER := 0;
        v_fstsup_prem              NUMBER := 0;
        v_fstsup_si                NUMBER := 0;
        v_fstsup_pct               NUMBER := 0;
        v_fstsup_eq_prem           NUMBER := 0;
        v_fstsup_noneq_prem        NUMBER := 0;
        v_fstsup_eq_com            NUMBER := 0;
        v_fstsup_noneq_com         NUMBER := 0;
        v_secsup_prem              NUMBER := 0;
        v_secsup_si                NUMBER := 0;
        v_secsup_pct               NUMBER := 0;
        v_secsup_rate              NUMBER := 0;
        v_secsup_com               NUMBER := 0;
        v_secsup_eq_prem           NUMBER := 0;
        v_secsup_noneq_prem        NUMBER := 0;
        v_secsup_eq_com            NUMBER := 0;
        v_secsup_noneq_com         NUMBER := 0;

        v_facre_eq_prem            NUMBER := 0;
        v_facre_noneq_prem         NUMBER := 0;
        v_facre_eq_com             NUMBER := 0;
        v_facre_noneq_com          NUMBER := 0;

        v_ob_facre_com_rate        NUMBER;
        v_ob_facre_ref_com_rate    NUMBER;
        v_ob_facre_com             NUMBER;
        v_ob_facre_ref_com         NUMBER;
        v_ob_facre_prem            NUMBER;
        v_ob_facre_si              NUMBER;
        v_ob_facre_ref_prem        NUMBER;
        v_ob_facre_prem_rate       NUMBER;
        v_ob_facre_ref_prem_rate   NUMBER;
        v_ob_facre_eq_prem         NUMBER := 0;
        v_ob_facre_noneq_prem      NUMBER := 0;

        v_pool_prem                NUMBER;
        v_pool_comm                NUMBER;
        v_pool_vat                 NUMBER;
        v_pool_si                  NUMBER;
        v_pool_rate                NUMBER;

        v_pool_ref_prem            NUMBER;
        v_pool_ref_comm            NUMBER;
        v_exhange_rate             NUMBER;
        v_rnd                      NUMBER := 0;
        v_rnd_bcur                 NUMBER;

        v_net_rate                 NUMBER;
        v_rsk_net_prem             NUMBER;
        v_pol_net_prem             NUMBER;
        v_eq_prem                  NUMBER;
        v_non_eq_prem              NUMBER;
        v_com_ret                  NUMBER;
        v_gross_si                 NUMBER;
        v_net_si                   NUMBER;
        v_gross_prem               NUMBER;

        v_tl                       NUMBER;
        v_phfund                   NUMBER;
        v_sd                       NUMBER;
        v_duties                   NUMBER;

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;

        CURSOR cur_all_risks IS
            SELECT prrd_code,
                   ipu_wef,
                   ipu_wet,
                   ipu_eff_wet,
                   ipu_eff_wef,
                   ipu_code,
                   ipu_sec_scl_code,
                   ipu_id,
                   prrd_comp_retention,
                   ipu_comm_endos_diff_amt,
                   ipu_quz_code,
                   ipu_quz_sht_desc,
                   ipu_prem_tax,
                   ipu_property_id,
                   ipu_status,
                   ipu_current_prrd_code,
                   ipu_endos_diff_amt,
                   ipu_si_diff,
                   prrd_net_prem,
                   prrd_ri_prem,
                   ipu_reinsure_amt,
                   ipu_value,
                   ipu_covt_code,
                   ipu_itl
              FROM gin_insured_property_unds,
                   gin_policy_risk_ri_dtls,
                   gin_policies
             WHERE     ipu_code = prrd_ipu_code
                   AND ipu_pol_batch_no = pol_batch_no
                   AND pol_batch_no = v_pol_batch_no
                   AND pol_loaded != 'Y'
                   AND prrd_tran_no = v_tran_no;

        CURSOR cur_rein (v_prrd_code NUMBER)
        IS
              SELECT ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)))    mand_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_si_pcur, 0)),
                                 0)))    mand_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_prem, 0)),
                                 0)))    mand_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)))    mand_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_com, 0)),
                                 0)))    mand_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              mand_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1001, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              mand_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)))    qs_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_si_pcur, 0)),
                                 0)))    qs_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)))    qs_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              qs_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_prem, 0)),
                                 0)))    qs_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_com, 0)),
                                 0)))    qs_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1003, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              qs_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)))    fstsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_si_pcur, 0)),
                                 0)))    fstsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)))    fstsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              fstsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_prem, 0)),
                                 0)))    fstsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_com, 0)),
                                 0)))    fstsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              fstsup_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_prem_pcur, 0)),
                                 0)))    secsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_si_pcur, 0)),
                                 0)))    secsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_comm_pcur, 0)),
                                 0)))    secsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              secsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_prem, 0)),
                                 0)))    secsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_com, 0)),
                                 0)))    secsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              secsup_ref_pct
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_prrd_code = v_prrd_code
            GROUP BY ptotr_ipu_code;

        CURSOR cur_pol_rein (v_trans_no NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_si_pcur, 0)),
                             0))    mand_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))    mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))    mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_si_pcur, 0)),
                             0))    qs_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))    qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))    qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_si_pcur, 0)),
                             0))    fstsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))    fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))    fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_si_pcur, 0)),
                             0))    secsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))    secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))    secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    secsup_noneq_com
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ggt_tran_no = v_trans_no
                     AND ptotr_pol_batch_no = v_pol_batch_no
            GROUP BY ptotr_ggt_tran_no;

        CURSOR cur_rsk_rein_dtls (v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_policy_rein_risk_details, gin_treaties
             WHERE     ptotr_trs_code = trs_code
                   AND ptotr_prrd_code = v_prrd_code;

        CURSOR cur_rsk_rein_part_dtls (v_ptotr_code NUMBER)
        IS
            SELECT *
              FROM gin_participations
             WHERE part_ptotr_code = v_ptotr_code;

        CURSOR cur_pol_facre IS
            SELECT SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_comm_amt, 0)),
                           0))    facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_amt, 0)),
                           0))    facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_amount, 0)),
                           0))    facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_prem, 0)),
                           0))    facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))    facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_comm, 0)),
                           0))    facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))    facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_comm_amt, 0)),
                           0))    ob_facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_prem_amt, 0)),
                           0))    ob_facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_amount, 0)),
                           0))    ob_facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))    ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))    ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))    ob_facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))    ob_facre_noneq_comm
              FROM gin_facre_cessions
             WHERE     fc_ggt_tran_no = v_tran_no
                   AND fc_pol_batch_no = v_pol_batch_no;


        CURSOR cur_facre (v_prrd_code NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_amt, 0)),
                             0))    facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prem_amt, 0)),
                             0))    facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_amount, 0)),
                             0))    facre_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_rate, 0)),
                             0))    facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_comm, 0)),
                             0))    facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_comm_rate, 0)),
                             0))    facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_rate, 0)),
                             0))    facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_prem, 0)),
                             0))    facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_rate, 0)),
                             0))    facre_ref_prem_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_amt, 0)),
                             0))    ob_facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prem_amt, 0)),
                             0))    ob_facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_amount, 0)),
                             0))    ob_facre_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_rate, 0)),
                             0))    ob_facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_comm, 0)),
                             0))    ob_facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_comm_rate, 0)),
                             0))    ob_facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_rate, 0)),
                             0))    ob_facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_prem, 0)),
                             0))    ob_facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_rate, 0)),
                             0))    ob_facre_ref_prem_rate
                FROM gin_facre_cessions
               WHERE fc_prrd_code = v_prrd_code
            GROUP BY fc_prrd_code;

        CURSOR cur_risk_facre_dtls (v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_facre_cessions
             WHERE fc_prrd_code = v_prrd_code;

        CURSOR cur_pol_pool_trans IS
            SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                   SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                   SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                   SUM (NVL (prprd_pool_si, 0))                pool_si
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_tran_no
                   AND prprd_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_pl_dtls (v_prrd_code NUMBER)
        IS
              SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                     SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                     SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                     SUM (NVL (prprd_pool_si, 0))                pool_si,
                     SUM (NVL (prprd_rein_pool_rate, 0))         pool_rate
                FROM gin_pol_rein_pool_risk_details
               WHERE prprd_prrd_code = v_prrd_code
            GROUP BY prprd_prrd_code;

        CURSOR cur_risk_pool_dtls (v_prrd_code NUMBER)
        IS
            SELECT *
              FROM gin_pol_rein_pool_risk_details
             WHERE prprd_prrd_code = v_prrd_code;

        CURSOR cur_policy_own_ret (v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   ROUND (
                       SUM (
                             NVL (prrd_net_prem, 0)
                           * NVL (prrd_com_retention_rate, 0)
                           / 100),
                       v_rnd)
                       comp_gross_ret,
                   ROUND (
                       SUM (
                             NVL (prrd_ri_prem, 0)
                           * NVL (prrd_comp_net_rate, 0)
                           / 100),
                       v_rnd)
                       comp_net_ret,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_si,
                   SUM (NVL (ipu_reinsure_amt, 0))
                       comp_gross_si,
                   SUM (NVL (prrd_ri_prem, 0))
                       comp_gross_prem
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_own_ret (v_prrd_code NUMBER, v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_earthquake_prem, 0))
                       comp_eq_prem,
                   SUM (NVL (prrd_ri_net_less_eq_prem, 0))
                       comp_non_eq_prem,
                   SUM (
                         NVL (prrd_ri_prem, 0)
                       * NVL (prrd_com_retention_rate, 0)
                       / 100)
                       comp_gross_ret,
                   SUM (NVL (prrd_com_retention_rate, 0))
                       comp_gross_rate,
                   SUM (
                         NVL (prrd_ri_prem, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_ret,
                   SUM (NVL (prrd_comp_net_rate, 0))
                       comp_net_rate,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)
                       comp_net_si,
                   SUM (NVL (ipu_reinsure_amt, 0))
                       comp_gross_si,
                   SUM (NVL (prrd_ri_prem, 0))
                       comp_gross_prem
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_code = v_prrd_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;
    BEGIN
        FOR p IN cur_pol
        LOOP
            v_exhange_rate := p.pol_cur_rate;
            v_prem_type := NULL;
            v_prem_type := p.pol_policy_status;

            --            raise_error('GIS_RI_PROCEDURES::LN 54562::v_prem_type = '||v_prem_type);
            BEGIN
                v_gross_prem := 0;
                v_comp_rate := 0;
                v_ri_premium := 0;
                v_facre_com_rate := 0;
                v_facre_prem_rate := 0;

                v_facre_com := 0;
                v_facre_ref_com := 0;
                v_facre_prem := 0;
                v_facre_si := 0;
                v_facre_si := 0;
                v_facre_ref_prem := 0;
                v_facre_com_rate := 0;
                v_facre_ref_com_rate := 0;
                v_facre_ref_prem_rate := 0;

                v_ob_facre_com_rate := 0;
                v_ob_facre_ref_com_rate := 0;
                v_ob_facre_com := 0;
                v_ob_facre_ref_com := 0;
                v_ob_facre_prem := 0;
                v_ob_facre_si := 0;
                v_ob_facre_si := 0;
                v_ob_facre_ref_prem := 0;
                v_ob_facre_prem_rate := 0;
                v_ob_facre_ref_prem_rate := 0;

                v_pool_prem := 0;
                v_pool_comm := 0;
                v_pool_vat := 0;
                v_pool_si := 0;
                v_pool_rate := 0;

                v_pool_ref_prem := 0;
                v_pool_ref_comm := 0;

                FOR cur_pol_rein_rec IN cur_pol_rein (v_tran_no)
                LOOP
                    v_mand_prem := cur_pol_rein_rec.mand_prem;
                    v_mand_si := cur_pol_rein_rec.mand_si;
                    v_mand_eq_prem := cur_pol_rein_rec.mand_eq_prem;
                    v_mand_noneq_prem := cur_pol_rein_rec.mand_noneq_prem;
                    v_mand_com := cur_pol_rein_rec.mand_com;
                    v_mand_eq_com := cur_pol_rein_rec.mand_eq_com;
                    v_mand_noneq_com := cur_pol_rein_rec.mand_noneq_com;
                    v_qs_prem := cur_pol_rein_rec.qs_prem;
                    v_qs_si := cur_pol_rein_rec.qs_si;
                    v_qs_eq_prem := cur_pol_rein_rec.qs_eq_prem;
                    v_qs_noneq_prem := cur_pol_rein_rec.qs_noneq_prem;
                    v_qs_com := cur_pol_rein_rec.qs_com;
                    v_qs_eq_com := cur_pol_rein_rec.qs_eq_com;
                    v_qs_noneq_com := cur_pol_rein_rec.qs_noneq_com;
                    v_fstsup_prem := cur_pol_rein_rec.fstsup_prem;
                    v_fstsup_si := cur_pol_rein_rec.fstsup_si;
                    v_fstsup_eq_prem := cur_pol_rein_rec.fstsup_eq_prem;
                    v_fstsup_noneq_prem := cur_pol_rein_rec.fstsup_noneq_prem;
                    v_fstsup_com := cur_pol_rein_rec.fstsup_com;
                    v_fstsup_eq_com := cur_pol_rein_rec.fstsup_eq_com;
                    v_fstsup_noneq_com := cur_pol_rein_rec.fstsup_noneq_com;
                    v_secsup_prem := cur_pol_rein_rec.secsup_prem;
                    v_secsup_si := cur_pol_rein_rec.secsup_si;
                    v_secsup_eq_prem := cur_pol_rein_rec.secsup_eq_prem;
                    v_secsup_noneq_prem := cur_pol_rein_rec.secsup_noneq_prem;
                    v_secsup_com := cur_pol_rein_rec.secsup_com;
                    v_secsup_eq_com := cur_pol_rein_rec.secsup_eq_com;
                    v_secsup_noneq_com := cur_pol_rein_rec.secsup_noneq_com;
                END LOOP;                                  ---cur_pol_rein_rec

                ---facre sessions
                FOR cur_facre_rec IN cur_pol_facre
                LOOP
                    v_facre_prem :=
                          NVL (v_facre_prem, 0)
                        + NVL (cur_facre_rec.facre_prem, 0);
                    v_facre_si :=
                        NVL (v_facre_si, 0) + NVL (cur_facre_rec.facre_si, 0);
                    v_facre_eq_prem :=
                          NVL (v_facre_eq_prem, 0)
                        + NVL (cur_facre_rec.facre_eq_prem, 0);
                    v_facre_noneq_prem :=
                          NVL (v_facre_noneq_prem, 0)
                        + NVL (cur_facre_rec.facre_noneq_prem, 0);
                    v_facre_com :=
                          NVL (v_facre_com, 0)
                        + NVL (cur_facre_rec.facre_com, 0);
                    v_ob_facre_prem :=
                          NVL (v_ob_facre_prem, 0)
                        + NVL (cur_facre_rec.ob_facre_prem, 0);
                    v_ob_facre_si :=
                          NVL (v_ob_facre_si, 0)
                        + NVL (cur_facre_rec.ob_facre_si, 0);
                    v_ob_facre_eq_prem :=
                          NVL (v_ob_facre_eq_prem, 0)
                        + NVL (cur_facre_rec.ob_facre_eq_prem, 0);
                    v_ob_facre_noneq_prem :=
                          NVL (v_ob_facre_noneq_prem, 0)
                        + NVL (cur_facre_rec.ob_facre_noneq_prem, 0);
                    v_ob_facre_com :=
                          NVL (v_ob_facre_com, 0)
                        + NVL (cur_facre_rec.ob_facre_com, 0);
                END LOOP;

                -- pool at policy level
                FOR cur_pol_pool IN cur_pol_pool_trans
                LOOP
                    v_pool_prem := cur_pol_pool.pool_prem;
                    v_pool_comm := cur_pol_pool.pool_comm;
                    v_pool_vat := cur_pol_pool.pool_vat;
                    v_pool_si := cur_pol_pool.pool_si;
                END LOOP;

                FOR cur_policy_own_ret_rec IN cur_policy_own_ret (v_tran_no)
                LOOP
                    v_com_ret := cur_policy_own_ret_rec.comp_gross_ret;
                    v_pol_net_prem := cur_policy_own_ret_rec.comp_net_ret;
                    v_eq_prem := cur_policy_own_ret_rec.comp_eq_prem;
                    v_non_eq_prem :=
                          cur_policy_own_ret_rec.comp_non_eq_prem
                        - NVL (v_pool_prem, 0);
                    v_gross_si := cur_policy_own_ret_rec.comp_gross_si;
                    v_net_si := cur_policy_own_ret_rec.comp_net_si;
                    v_gross_prem := cur_policy_own_ret_rec.comp_gross_prem;
                END LOOP;

                BEGIN
                    SELECT SUM (
                               DECODE (UPPER (TRNT_CODE),
                                       'TL', NVL (PTX_AMOUNT, 0),
                                       0))                      tl,
                             SUM (
                                 DECODE (UPPER (TRNT_CODE),
                                         'PHFUND', NVL (PTX_AMOUNT, 0),
                                         0))
                           + SUM (
                                 DECODE (UPPER (TRNT_CODE),
                                         'COPHFUND', NVL (PTX_AMOUNT, 0),
                                         0))                    phfund,
                           SUM (
                               DECODE (UPPER (TRNT_CODE),
                                       'SD', NVL (PTX_AMOUNT, 0),
                                       'MPSD', NVL (PTX_AMOUNT, 0),
                                       0))                      SD,
                           SUM (
                               DECODE (UPPER (TRNT_CODE),
                                       'TL', 0,
                                       'SD', 0,
                                       'PHFUND', 0,
                                       'COPHFUND', 0,
                                       'MPSD', 0,
                                       NVL (PTX_AMOUNT, 0)))    other_duties
                      INTO v_tl,
                           v_phfund,
                           v_sd,
                           v_duties
                      FROM gin_policy_taxes, gin_transaction_types
                     WHERE     ptx_trac_trnt_code = trnt_code
                           AND ptx_pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        NULL;
                        v_duties := 0;
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR, UNABLE TO RETRIEVE POLICY TAXES..');
                END;

                v_duties := NVL (v_duties, 0) + NVL (v_phfund, 0);

                ---
                BEGIN
                    v_pr_code := NULL;

                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_pr_code_seq.NEXTVAL)
                      INTO v_pr_code
                      FROM DUAL;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO GENERATE THE SEQUENCE GIN_PR_CODE_SEQ. ERR AT 5...');
                END;

                BEGIN
                    INSERT INTO gin_policy_register (pr_code,
                                                     pr_transaction_date,
                                                     pr_pol_policy_no,
                                                     pr_pol_ren_endos_no,
                                                     pr_pol_batch_no,
                                                     pr_agnt_agent_code,
                                                     pr_agnt_sht_desc,
                                                     pr_wef_dt,
                                                     pr_wet_dt,
                                                     pr_cur_code,
                                                     pr_brn_code,
                                                     pr_cur_symbol,
                                                     pr_cur_rate,
                                                     pr_brn_sht_desc,
                                                     pr_inception_uwyr,
                                                     pr_pro_code,
                                                     pr_prev_batch_no,
                                                     pr_prem_type,
                                                     pr_mand_prem,
                                                     pr_mand_com,
                                                     pr_quota_prem,
                                                     pr_quota_com,
                                                     pr_fstsup_prem,
                                                     pr_fstsup_com,
                                                     pr_secsup_prem,
                                                     pr_secsup_com,
                                                     pr_facre_prem,
                                                     pr_facre_com,
                                                     pr_comp_net_prem,
                                                     pr_comp_net_com,
                                                     pr_mand_eq_prem,
                                                     pr_mand_noneq_prem,
                                                     pr_fstsup_eq_prem,
                                                     pr_fstsup_noneq_prem,
                                                     pr_secsup_eq_prem,
                                                     pr_secsup_noneq_prem,
                                                     pr_quota_eq_prem,
                                                     pr_quota_noneq_prem,
                                                     pr_facre_eq_prem,
                                                     pr_facre_noneq_prem,
                                                     pr_earthquake_prem,
                                                     pr_ri_net_less_eq_prem,
                                                     pr_mand_eq_com,
                                                     pr_mand_noneq_com,
                                                     pr_quota_eq_com,
                                                     pr_quota_noneq_com,
                                                     pr_fstsup_eq_com,
                                                     pr_fstsup_noneq_com,
                                                     pr_secsup_eq_com,
                                                     pr_secsup_noneq_com,
                                                     pr_facre_eq_com,
                                                     pr_facre_noneq_com,
                                                     pr_si_diff,
                                                     pr_endos_diff_amt,
                                                     pr_comm_amt,
                                                     pr_comm_endos_diff_amt,
                                                     pr_uw_year,
                                                     pr_tran_type,
                                                     pr_client_policy_number,
                                                     pr_prp_code,
                                                     pr_current_status,
                                                     pr_uwyr_length,
                                                     pr_policy_cover_to,
                                                     pr_policy_cover_from,
                                                     pr_ggt_trans_no,
                                                     pr_facre_ob_prem,
                                                     pr_facre_ob_com,
                                                     pr_pool_com,
                                                     pr_pool_prem,
                                                     pr_pool_si,
                                                     pr_pool_vat,
                                                     --pr_pool_rate,
                                                     pr_coinsurance,
                                                     pr_mand_si,
                                                     pr_quota_si,
                                                     pr_fstsup_si,
                                                     pr_secsup_si,
                                                     pr_facre_si,
                                                     pr_facre_ob_si,
                                                     pr_net_si,
                                                     pr_gross_si,
                                                     pr_pro_sht_desc,
                                                     pr_policy_type,
                                                     pr_stamp_duty,
                                                     pr_tl,
                                                     pr_other_duties,
                                                     pr_wtht,
                                                     pr_prem_tax,
                                                     pr_phfund,
                                                     pr_policy_status,
                                                     pr_drcr_no)
                             VALUES (
                                 v_pr_code,
                                 TRUNC (v_tran_dt),
                                 p.pol_policy_no,
                                 p.pol_ren_endos_no,
                                 p.pol_batch_no,
                                 p.pol_agnt_agent_code,
                                 p.pol_agnt_sht_desc,
                                 p.pol_wef_dt,
                                 p.pol_wet_dt,
                                 p.pol_cur_code,
                                 p.pol_brn_code,
                                 p.pol_cur_symbol,
                                 p.pol_cur_rate,
                                 p.pol_brn_sht_desc,
                                 p.pol_inception_uwyr,
                                 p.pol_pro_code,
                                 p.pol_prev_batch_no,
                                 v_prem_type,
                                 v_mand_prem,
                                 v_mand_com,
                                 v_qs_prem,
                                 v_qs_com,
                                 v_fstsup_prem,
                                 v_fstsup_com,
                                 v_secsup_prem,
                                 v_secsup_com,
                                 v_facre_prem,
                                 v_facre_com,
                                 v_pol_net_prem,
                                 v_com_ret,
                                 v_mand_eq_prem,
                                 v_mand_noneq_prem,
                                 v_fstsup_eq_prem,
                                 v_fstsup_noneq_prem,
                                 v_secsup_eq_prem,
                                 v_secsup_noneq_prem,
                                 v_qs_eq_prem,
                                 v_qs_noneq_prem,
                                 v_facre_eq_prem,
                                 v_facre_noneq_prem,
                                 v_eq_prem,
                                 v_non_eq_prem,
                                 v_mand_eq_com,
                                 v_mand_noneq_com,
                                 v_qs_eq_com,
                                 v_qs_noneq_com,
                                 v_fstsup_eq_com,
                                 v_fstsup_noneq_com,
                                 v_secsup_eq_com,
                                 v_secsup_noneq_com,
                                 v_facre_eq_com,
                                 v_facre_noneq_com,
                                 0,
                                 P.pol_tot_endos_diff_amt,
                                 0,
                                 0,
                                 p.pol_uw_year,
                                 'RIC',
                                 p.pol_client_policy_number,
                                 p.pol_prp_code,
                                 p.pol_current_status,
                                 p.pol_uwyr_length,
                                 p.pol_policy_cover_to,
                                 p.pol_policy_cover_from,
                                 v_tran_no,
                                 v_ob_facre_prem,
                                 v_ob_facre_com,
                                 v_pool_comm,
                                 v_pool_prem,
                                 v_pool_si,
                                 v_pool_vat,
                                 p.pol_coinsurance,
                                 v_mand_si,
                                 v_qs_si,
                                 v_fstsup_si,
                                 v_secsup_si,
                                 v_facre_si,
                                 v_ob_facre_si,
                                 v_net_si,
                                 v_gross_si,
                                 p.pol_pro_sht_desc,
                                 P.POL_policy_type,
                                 v_sd,
                                 v_tl,
                                 v_duties,
                                 P.pol_wtht,
                                 P.pol_prem_tax,
                                 DECODE (P.pol_tot_phfund,
                                         NULL, P.pol_tot_phfund,
                                         0, P.pol_phfund,
                                         P.pol_tot_phfund),
                                 p.pol_policy_status,
                                 p.pol_drcr_no);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR :- UNABLE TO POST REINSURANCE REFUNDS INTO POLICY REGISTER...AT 6..');
                END;

                ------------------------post risk new cessions-------------register
                FOR cur_all_risks_rec IN cur_all_risks
                LOOP
                    v_mand_prem := 0;
                    v_mand_si := 0;
                    v_mand_eq_prem := 0;
                    v_mand_noneq_prem := 0;
                    v_mand_com := 0;
                    v_mand_eq_com := 0;
                    v_mand_noneq_com := 0;
                    v_qs_prem := 0;
                    v_qs_si := 0;
                    v_qs_eq_prem := 0;
                    v_qs_noneq_prem := 0;
                    v_qs_com := 0;
                    v_qs_eq_com := 0;
                    v_qs_noneq_com := 0;
                    v_fstsup_prem := 0;
                    v_fstsup_si := 0;
                    v_fstsup_eq_prem := 0;
                    v_fstsup_noneq_prem := 0;
                    v_fstsup_com := 0;
                    v_fstsup_eq_com := 0;
                    v_fstsup_noneq_com := 0;
                    v_secsup_prem := 0;
                    v_secsup_si := 0;
                    v_secsup_eq_prem := 0;
                    v_secsup_noneq_prem := 0;
                    v_secsup_com := 0;
                    v_secsup_eq_com := 0;
                    v_secsup_noneq_com := 0;

                    v_pool_prem := 0;
                    v_pool_comm := 0;
                    v_pool_vat := 0;
                    v_pool_si := 0;
                    v_pool_rate := 0;
                    v_facre_com_rate := 0;
                    v_facre_com := 0;
                    v_facre_prem := 0;
                    v_facre_si := 0;
                    v_facre_prem_rate := 0;

                    v_ob_facre_com_rate := 0;
                    v_ob_facre_com := 0;
                    v_ob_facre_prem := 0;
                    v_ob_facre_si := 0;
                    v_ob_facre_prem_rate := 0;

                    v_net_rate := 0;
                    v_rsk_net_prem := 0;
                    v_net_si := 0;
                    v_gross_si := 0;
                    v_gross_prem := 0;

                    FOR cur_rsk_rein_rec
                        IN cur_rein (cur_all_risks_rec.prrd_code)
                    LOOP
                        v_mand_prem := cur_rsk_rein_rec.mand_prem;
                        v_mand_si := cur_rsk_rein_rec.mand_si;
                        v_mand_pct := cur_rsk_rein_rec.mand_pct;
                        --v_mand_eq_prem        := cur_rsk_rein_rec.mand_eq_prem;
                        -- v_mand_noneq_prem     := cur_rsk_rein_rec.mand_noneq_prem;
                        v_mand_com := cur_rsk_rein_rec.mand_com;
                        --v_mand_eq_com         := cur_rsk_rein_rec.mand_eq_com;
                        -- v_mand_noneq_com      := cur_pol_rein_rec.mand_noneq_com;
                        v_qs_prem := cur_rsk_rein_rec.qs_prem;
                        v_qs_si := cur_rsk_rein_rec.qs_si;
                        v_qs_pct := cur_rsk_rein_rec.qs_pct;
                        -- v_qs_eq_prem          := cur_rsk_rein_rec.qs_eq_prem;
                        -- v_qs_noneq_prem       := cur_rsk_rein_rec.qs_noneq_prem;
                        v_qs_com := cur_rsk_rein_rec.qs_com;
                        --v_qs_eq_com           := cur_rsk_rein_rec.qs_eq_com;
                        -- v_qs_noneq_com        := cur_rsk_rein_rec.qs_noneq_com;
                        v_fstsup_prem := cur_rsk_rein_rec.fstsup_prem;
                        v_fstsup_si := cur_rsk_rein_rec.fstsup_si;
                        v_fstsup_pct := cur_rsk_rein_rec.fstsup_pct;
                        --v_fstsup_eq_prem      := cur_rsk_rein_rec.fstsup_eq_prem;
                        -- v_fstsup_noneq_prem   := cur_rsk_rein_rec.fstsup_noneq_prem;
                        v_fstsup_com := cur_rsk_rein_rec.fstsup_com;
                        --v_fstsup_eq_com       := cur_rsk_rein_rec.fstsup_eq_com;
                        -- v_fstsup_noneq_com    := cur_rsk_rein_rec.fstsup_noneq_com;
                        v_secsup_prem := cur_rsk_rein_rec.secsup_prem;
                        v_secsup_si := cur_rsk_rein_rec.secsup_si;
                        v_secsup_pct := cur_rsk_rein_rec.secsup_pct;
                        --v_secsup_eq_prem      := cur_rsk_rein_rec.secsup_eq_prem;
                        -- v_secsup_noneq_prem   := cur_rsk_rein_rec.secsup_noneq_prem;
                        v_secsup_com := cur_rsk_rein_rec.secsup_com;
                    --v_secsup_eq_com       := cur_rsk_rein_rec.secsup_eq_com;
                    --v_secsup_noneq_com    := cur_rsk_rein_rec.secsup_noneq_com;
                    END LOOP;

                    FOR cur_facre_rec
                        IN cur_facre (cur_all_risks_rec.prrd_code)
                    LOOP
                        v_facre_com_rate := cur_facre_rec.facre_com_rate;
                        v_facre_com := cur_facre_rec.facre_com;
                        v_facre_prem := cur_facre_rec.facre_prem;
                        v_facre_si := cur_facre_rec.facre_si;
                        v_facre_prem_rate := cur_facre_rec.facre_rate;

                        v_ob_facre_com_rate :=
                            cur_facre_rec.ob_facre_com_rate;
                        v_ob_facre_com := cur_facre_rec.ob_facre_com;
                        v_ob_facre_prem := cur_facre_rec.ob_facre_prem;
                        v_ob_facre_si := cur_facre_rec.ob_facre_si;
                        v_ob_facre_prem_rate := cur_facre_rec.ob_facre_rate;
                    END LOOP;

                    FOR cur_risk_pool
                        IN cur_risk_pl_dtls (cur_all_risks_rec.prrd_code)
                    LOOP
                        v_pool_prem := cur_risk_pool.pool_prem;
                        v_pool_comm := cur_risk_pool.pool_comm;
                        v_pool_vat := cur_risk_pool.pool_vat;
                        v_pool_si := cur_risk_pool.pool_si;
                        v_pool_rate := cur_risk_pool.pool_rate;
                    END LOOP;

                    FOR cur_risk_own_ret_rec
                        IN cur_risk_own_ret (cur_all_risks_rec.prrd_code,
                                             v_tran_no)
                    LOOP
                        v_rsk_net_prem := cur_risk_own_ret_rec.comp_net_ret;
                        v_net_rate := cur_risk_own_ret_rec.comp_net_rate;
                        v_eq_prem := cur_risk_own_ret_rec.comp_eq_prem;
                        v_non_eq_prem :=
                              cur_risk_own_ret_rec.comp_non_eq_prem
                            - NVL (v_pool_prem, 0);
                        v_gross_si := cur_risk_own_ret_rec.comp_gross_si;
                        v_net_si := cur_risk_own_ret_rec.comp_net_si;
                        v_gross_prem := cur_risk_own_ret_rec.comp_gross_prem;
                    END LOOP;

                    BEGIN
                        v_rskrg_code := NULL;

                        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                               || gin_rskrg_code_seq.NEXTVAL
                          INTO v_rskrg_code
                          FROM DUAL;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR : UNABLE TO GENERATE SEQUENCE GIN_RSKRG_CODE_SEQ..AT 7.');
                    END;

                    BEGIN
                        --DBMS_OUTPUT.PUT_LINE('inserting risk reg new cecssion');
                        INSERT INTO gin_policy_risk_reg (
                                        rskrg_code,
                                        rskrg_pol_policy_no,
                                        rskrg_pol_ren_endos_no,
                                        rskrg_pol_batch_no,
                                        rskrg_wef_dt,
                                        rskrg_wet_dt,
                                        rskrg_risk_cover_to,
                                        rskrg_risk_cover_from,
                                        rskrg_ipu_code,
                                        rskrg_scl_code,
                                        rskrg_ipu_id,
                                        rskrg_pr_code,
                                        rskrg_ggt_trans_no,
                                        rskrg_mand_rate,
                                        rskrg_mand_prem,
                                        rskrg_mand_com,
                                        rskrg_quota_rate,
                                        rskrg_quota_com,
                                        rskrg_fstsup_rate,
                                        rskrg_fstsup_com,
                                        rskrg_secsup_rate,
                                        rskrg_secsup_com,
                                        rskrg_fstsup_prem,
                                        rskrg_secsup_prem,
                                        rskrg_tran_date,
                                        rskrg_quota_prem,
                                        rskrg_uw_yr,
                                        rskrg_comm_endos_diff_amt,
                                        rskrg_cur_code,
                                        rskrg_cur_symbol,
                                        rskrg_quz_code,
                                        rskrg_quz_sht_desc,
                                        rskrg_exchange_rate,
                                        rskrg_prem_tax,
                                        rskrg_ipu_property_id,
                                        rskrg_tran_type,
                                        rskrg_coin_own_pct,
                                        rskrg_com_ret_rate,
                                        rskrg_facre_rate,
                                        rskrg_endos_diff_amt,
                                        rskrg_si_diff,
                                        rskrg_facre_prem,
                                        rskrg_facre_com,
                                        rskrg_brn_code,
                                        rskrg_brn_sht_desc,
                                        rskrg_policy_type,
                                        rskrg_agnt_sht_desc,
                                        rskrg_agnt_agent_code,
                                        rskrg_prp_code,
                                        rskrg_facre_ob_prem,
                                        rskrg_facre_ob_rate,
                                        rskrg_facre_ob_com,
                                        rskrg_pool_prem,
                                        rskrg_pool_com,
                                        rskrg_pool_si,
                                        rskrg_pool_vat,
                                        rskrg_pool_rate,
                                        rskrg_comp_net_ret,
                                        rskrg_reinsure_amt,
                                        rskrg_sum_insured,
                                        rskrg_mand_si,
                                        rskrg_quota_si,
                                        rskrg_fstsup_si,
                                        rskrg_secsup_si,
                                        rskrg_facre_si,
                                        rskrg_facre_ob_si,
                                        rskrg_net_si,
                                        rskrg_gross_si,
                                        RSKRG_COVT_CODE,
                                        RSKRG_TL)
                             VALUES (v_rskrg_code,
                                     p.pol_policy_no,
                                     p.pol_ren_endos_no,
                                     p.pol_batch_no,
                                     cur_all_risks_rec.ipu_wef,
                                     cur_all_risks_rec.ipu_wef,
                                     cur_all_risks_rec.ipu_eff_wet,
                                     cur_all_risks_rec.ipu_eff_wef,
                                     cur_all_risks_rec.ipu_code,
                                     cur_all_risks_rec.ipu_sec_scl_code,
                                     cur_all_risks_rec.ipu_id,
                                     v_pr_code,
                                     v_tran_no,
                                     NVL (v_mand_pct, 0),
                                     NVL (v_mand_prem, 0),
                                     NVL (v_mand_com, 0),
                                     NVL (v_qs_pct, 0),
                                     NVL (v_qs_com, 0),
                                     NVL (v_fstsup_pct, 0),
                                     NVL (v_fstsup_com, 0),
                                     NVL (v_secsup_pct, 0),
                                     NVL (v_secsup_com, 0),
                                     NVL (v_fstsup_prem, 0),
                                     NVL (v_secsup_prem, 0),
                                     TRUNC (v_tran_dt),
                                     NVL (v_qs_prem, 0),
                                     p.pol_uw_year,
                                     0,
                                     p.pol_cur_code,
                                     p.pol_cur_symbol,
                                     cur_all_risks_rec.ipu_quz_code,
                                     cur_all_risks_rec.ipu_quz_sht_desc,
                                     p.pol_cur_rate,
                                     NVL (cur_all_risks_rec.ipu_prem_tax, 0),
                                     cur_all_risks_rec.ipu_property_id,
                                     'RIC',
                                     NVL (p.pol_coinsurance_share, 100),
                                     NVL (v_net_rate, 0),
                                     NVL (v_facre_prem_rate, 0),
                                     NVL (cur_all_risks_rec.prrd_ri_prem, 0),
                                     NVL (cur_all_risks_rec.ipu_si_diff, 0),
                                     v_facre_prem,
                                     v_facre_com,
                                     p.pol_brn_code,
                                     p.pol_brn_sht_desc,
                                     p.pol_policy_type,
                                     p.pol_agnt_sht_desc,
                                     p.pol_agnt_agent_code,
                                     p.pol_prp_code,
                                     v_ob_facre_prem,
                                     v_ob_facre_prem_rate,
                                     v_ob_facre_com,
                                     v_pool_prem,
                                     v_pool_comm,
                                     v_pool_si,
                                     v_pool_vat,
                                     v_pool_rate,
                                     v_rsk_net_prem,
                                     cur_all_risks_rec.ipu_reinsure_amt,
                                     cur_all_risks_rec.ipu_value,
                                     v_mand_si,
                                     v_qs_si,
                                     v_fstsup_si,
                                     v_secsup_si,
                                     v_facre_si,
                                     v_ob_facre_si,
                                     v_net_si,
                                     v_gross_si,
                                     cur_all_risks_rec.ipu_covt_code,
                                     cur_all_risks_rec.ipu_itl);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR :- UNABLE TO INSERT RI REFUND INTO THE RISK REGISTER..AT 8.');
                    END;

                    --            DELETE gin_policy_risk_treaty_reg
                    --            WHERE trtrg_pr_code = v_pr_code
                    --            AND trtrg_rskrg_code = v_rskrg_code;

                    --            DELETE gin_policy_treaty_part_reg
                    --            WHERE trtpg_pr_code = v_pr_code
                    --            AND trtpg_rskrg_code = v_rskrg_code;

                    FOR rdtls
                        IN cur_rsk_rein_dtls (cur_all_risks_rec.prrd_code)
                    LOOP
                        INSERT INTO gin_policy_risk_treaty_reg (
                                        trtrg_code,
                                        trtrg_ptotr_code,
                                        trtrg_pr_code,
                                        trtrg_rskrg_code,
                                        trtrg_rei_code,
                                        trtrg_trt_code,
                                        trtrg_ta_code,
                                        trtrg_as_code,
                                        trtrg_risk_cur_code,
                                        trtrg_trt_cur_code,
                                        trtrg_exch_rate,
                                        trtrg_trt_si_pcur,
                                        trtrg_trt_si_tcur,
                                        trtrg_trt_prem_pcur,
                                        trtrg_trt_prem_tcur,
                                        trtrg_trt_share,
                                        trtrg_trt_sht_desc,
                                        trtrg_rate,
                                        trtrg_trt_comm_pcur,
                                        trtrg_trt_comm_tcur,
                                        trtrg_cession_pct,
                                        trtrg_uwyr,
                                        trtrg_ipu_code,
                                        trtrg_pol_batch_no,
                                        trtrg_risk_cur_symbol,
                                        trtrg_trt_cur_symbol,
                                        trtrg_prem_tax_pcur,
                                        trtrg_prem_tax_tcur,
                                        trtrg_trs_code,
                                        trtrg_trs_sht_desc,
                                        trtrg_rate_type,
                                        trtrg_remarks,
                                        trtrg_ggt_tran_no,
                                        trtrg_tran_type,
                                        trtrg_rprem_tax_pcur,
                                        trtrg_prrd_code,
                                        trtrg_comm_rate,
                                        trtrg_auth_dt,
                                        trtrg_rprem_tax_tcur,
                                        trtrg_earthqke_prem,
                                        trtrg_earthqke_comm_rate,
                                        trtrg_earthqke_comm,
                                        trtrg_net_less_eq_comm,
                                        trtrg_net_less_eq_prem,
                                        trtrg_ctl_code)
                             VALUES (trtrg_code_seq.NEXTVAL,
                                     rdtls.ptotr_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     rdtls.ptotr_rei_code,
                                     rdtls.ptotr_trt_code,
                                     rdtls.ptotr_ta_code,
                                     rdtls.ptotr_as_code,
                                     rdtls.ptotr_risk_cur_code,
                                     rdtls.ptotr_trt_cur_code,
                                     rdtls.ptotr_exch_rate,
                                     rdtls.ptotr_trt_si_pcur,
                                     rdtls.ptotr_trt_si_tcur,
                                     rdtls.ptotr_trt_prem_pcur,
                                     rdtls.ptotr_trt_prem_tcur,
                                     rdtls.ptotr_trt_share,
                                     rdtls.ptotr_trt_sht_desc,
                                     rdtls.ptotr_rate,
                                     rdtls.ptotr_trt_comm_pcur,
                                     rdtls.ptotr_trt_comm_tcur,
                                     rdtls.ptotr_cession_pct,
                                     rdtls.ptotr_uwyr,
                                     rdtls.ptotr_ipu_code,
                                     rdtls.ptotr_pol_batch_no,
                                     rdtls.ptotr_risk_cur_symbol,
                                     rdtls.ptotr_trt_cur_symbol,
                                     rdtls.ptotr_prem_tax_pcur,
                                     rdtls.ptotr_prem_tax_tcur,
                                     rdtls.ptotr_trs_code,
                                     rdtls.ptotr_trs_sht_desc,
                                     rdtls.ptotr_rate_type,
                                     rdtls.ptotr_remarks,
                                     rdtls.ptotr_ggt_tran_no,
                                     rdtls.ptotr_tran_type,
                                     Rdtls.ptotr_rprem_tax_pcur,
                                     rdtls.ptotr_prrd_code,
                                     rdtls.ptotr_comm_rate,
                                     rdtls.ptotr_auth_dt,
                                     rdtls.ptotr_rprem_tax_tcur,
                                     rdtls.ptotr_earthqke_prem,
                                     rdtls.ptotr_earthqke_comm_rate,
                                     rdtls.ptotr_earthqke_comm,
                                     rdtls.ptotr_net_less_eq_comm,
                                     rdtls.ptotr_net_less_eq_prem,
                                     rdtls.ptotr_ctl_code);

                        FOR pdtls
                            IN cur_rsk_rein_part_dtls (rdtls.ptotr_code)
                        LOOP
                            INSERT INTO gin_policy_treaty_part_reg (
                                            trtpg_code,
                                            trtpg_ptotr_code,
                                            trtpg_part_code,
                                            trtpg_pr_code,
                                            trtpg_rskrg_code,
                                            trtpg_trtrg_code,
                                            trtpg_rei_code,
                                            trtpg_cede_rate,
                                            trtpg_si_amt_pcur,
                                            trtpg_si_amt_tcur,
                                            trtpg_comm_amt_pcur,
                                            trtpg_comm_amt_tcur,
                                            trtpg_prem_amt_pcur,
                                            trtpg_prem_amt_tcur,
                                            trtpg_trt_code,
                                            trtpg_trt_sht_desc,
                                            trtpg_agnt_agent_code,
                                            trtpg_agnt_sht_desc,
                                            trtpg_uwyr,
                                            trtpg_pol_batch_no,
                                            trtpg_pol_policy_no,
                                            trtpg_pol_ren_endos_no,
                                            trtpg_ipu_code,
                                            trtpg_rprem_tax_pcur,
                                            trtpg_rprem_tax_tcur,
                                            trtpg_prem_tax_pcur,
                                            trtpg_prem_tax_tcur,
                                            trtpg_ta_code,
                                            trtpg_as_code,
                                            trtpg_fiscal_year,
                                            trtpg_trs_code,
                                            trtpg_trs_sht_desc,
                                            trtpg_trpa_code,
                                            trtpg_mgt_fee_tcur,
                                            trtpg_mgt_fee_pcur)
                                 VALUES (trtpg_code_seq.NEXTVAL,
                                         rdtls.ptotr_code,
                                         pdtls.part_code,
                                         v_pr_code,
                                         v_rskrg_code,
                                         trtrg_code_seq.CURRVAL,
                                         rdtls.ptotr_rei_code,
                                         pdtls.part_cede_rate,
                                         pdtls.part_si_amt_pcur,
                                         pdtls.part_si_amt_tcur,
                                         pdtls.part_comm_amt_pcur,
                                         pdtls.part_comm_amt_tcur,
                                         pdtls.part_prem_amt_pcur,
                                         pdtls.part_prem_amt_tcur,
                                         pdtls.part_trt_code,
                                         pdtls.part_trt_sht_desc,
                                         pdtls.part_agnt_agent_code,
                                         pdtls.part_agnt_sht_desc,
                                         pdtls.part_uwyr,
                                         pdtls.part_pol_batch_no,
                                         pdtls.part_pol_policy_no,
                                         pdtls.part_pol_ren_endos_no,
                                         pdtls.part_ipu_code,
                                         pdtls.part_rprem_tax_pcur,
                                         pdtls.part_rprem_tax_tcur,
                                         pdtls.part_prem_tax_pcur,
                                         pdtls.part_prem_tax_tcur,
                                         pdtls.part_ta_code,
                                         pdtls.part_as_code,
                                         pdtls.part_fiscal_year,
                                         pdtls.part_trs_code,
                                         pdtls.part_trs_sht_desc,
                                         pdtls.part_trpa_code,
                                         pdtls.part_mgt_fee_tcur,
                                         pdtls.part_mgt_fee_pcur);
                        END LOOP;
                    END LOOP;

                    DELETE gin_policy_risk_facre_reg
                     WHERE     facrg_pr_code = v_pr_code
                           AND facrg_rskrg_code = v_rskrg_code;


                    FOR fdtls
                        IN cur_risk_facre_dtls (cur_all_risks_rec.prrd_code)
                    LOOP
                        INSERT INTO gin_policy_risk_facre_reg (
                                        facrg_code,
                                        facrg_fc_code,
                                        facrg_pr_code,
                                        facrg_rskrg_code,
                                        facrg_agnt_agent_code,
                                        facrg_amount,
                                        facrg_wef,
                                        facrg_ipu_code,
                                        facrg_agent_sht_desc,
                                        facrg_rate,
                                        facrg_comm_rate,
                                        facrg_comm_amt,
                                        facrg_don_by,
                                        facrg_dc_no,
                                        facrg_prem_amt,
                                        facrg_pol_batch_no,
                                        facrg_uwyr,
                                        facrg_ggt_tran_no,
                                        facrg_tran_type,
                                        facrg_scl_code,
                                        facrg_amt_or_rate,
                                        facrg_prrd_code,
                                        facrg_auth_dt,
                                        facrg_wet,
                                        facrg_earthqke_prem,
                                        facrg_earthqke_comm_rate,
                                        facrg_earthqke_comm,
                                        facrg_net_less_eq_comm,
                                        facrg_net_less_eq_prem,
                                        facrg_facre_type,
                                        facrg_prem_diff_amt,
                                        facrg_remark,
                                        facrg_vat_amt,
                                        facrg_vat_rate,
                                        facrg_mngmnt_amt,
                                        facrg_rein_tax_amt,
                                        facrg_mngmnt_type,
                                        facrg_mngmnt_value,
                                        facrg_rein_tax_type,
                                        facrg_rein_tax_value)
                             VALUES (facrg_code_seq.NEXTVAL,
                                     fdtls.fc_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     fdtls.fc_agnt_agent_code,
                                     fdtls.fc_amount,
                                     fdtls.fc_wef,
                                     fdtls.fc_ipu_code,
                                     fdtls.fc_agent_sht_desc,
                                     fdtls.fc_rate,
                                     fdtls.fc_comm_rate,
                                     fdtls.fc_comm_amt,
                                     fdtls.fc_don_by,
                                     fdtls.fc_dc_no,
                                     fdtls.fc_prem_amt,
                                     fdtls.fc_pol_batch_no,
                                     fdtls.fc_uwyr,
                                     fdtls.fc_ggt_tran_no,
                                     fdtls.fc_tran_type,
                                     fdtls.fc_scl_code,
                                     fdtls.fc_amt_or_rate,
                                     fdtls.fc_prrd_code,
                                     fdtls.fc_auth_dt,
                                     fdtls.fc_wet,
                                     fdtls.fc_earthqke_prem,
                                     fdtls.fc_earthqke_comm_rate,
                                     fdtls.fc_earthqke_comm,
                                     fdtls.fc_net_less_eq_comm,
                                     fdtls.fc_net_less_eq_prem,
                                     fdtls.fc_facre_type,
                                     fdtls.fc_prem_diff_amt,
                                     fdtls.fc_remark,
                                     fdtls.fc_vat_amt,
                                     fdtls.fc_vat_rate,
                                     fdtls.fc_mngmnt_amt,
                                     fdtls.fc_rein_tax_amt,
                                     fdtls.fc_mngmnt_type,
                                     fdtls.fc_mngmnt_value,
                                     fdtls.fc_rein_tax_type,
                                     fdtls.fc_rein_tax_value);
                    END LOOP;

                    DELETE gin_policy_risk_pool_reg
                     WHERE     poorg_pr_code = v_pr_code
                           AND poorg_rskrg_code = v_rskrg_code;


                    FOR pdtls
                        IN cur_risk_pool_dtls (cur_all_risks_rec.prrd_code)
                    LOOP
                        INSERT INTO gin_policy_risk_pool_reg (
                                        poorg_code,
                                        poorg_prprd_code,
                                        poorg_pr_code,
                                        poorg_rskrg_code,
                                        poorg_scrpr_code,
                                        poorg_rein_pool_rate,
                                        poorg_ipu_code,
                                        poorg_scl_code,
                                        poorg_covt_code,
                                        poorg_pol_batch_no,
                                        poorg_rein_pool_amt,
                                        poorg_rein_pool_comm_rate,
                                        poorg_rein_pool_vat_rate,
                                        poorg_rein_pool_comm_amt,
                                        poorg_rein_pool_vat_amt,
                                        poorg_ggt_tran_no,
                                        poorg_uwyr,
                                        poorg_pol_ren_endos_no,
                                        poorg_date,
                                        poorg_risk_trt_own_ret_amt,
                                        poorg_pta_code,
                                        poorg_os_claim_amt,
                                        poorg_paid_claim_amt,
                                        poorg_pool_net_amt,
                                        poorg_prrd_code,
                                        poorg_pool_si)
                             VALUES (poorg_code_seq.NEXTVAL,
                                     pdtls.prprd_code,
                                     v_pr_code,
                                     v_rskrg_code,
                                     pdtls.prprd_scrpr_code,
                                     pdtls.prprd_rein_pool_rate,
                                     pdtls.prprd_ipu_code,
                                     pdtls.prprd_scl_code,
                                     pdtls.prprd_covt_code,
                                     pdtls.prprd_pol_batch_no,
                                     pdtls.prprd_rein_pool_amt,
                                     pdtls.prprd_rein_pool_comm_rate,
                                     pdtls.prprd_rein_pool_vat_rate,
                                     pdtls.prprd_rein_pool_comm_amt,
                                     pdtls.prprd_rein_pool_vat_amt,
                                     pdtls.prprd_ggt_tran_no,
                                     pdtls.prprd_uwyr,
                                     pdtls.prprd_pol_ren_endos_no,
                                     pdtls.prprd_date,
                                     pdtls.prprd_risk_trt_own_ret_amt,
                                     pdtls.prprd_pta_code,
                                     pdtls.prprd_os_claim_amt,
                                     pdtls.prprd_paid_claim_amt,
                                     pdtls.prprd_pool_net_amt,
                                     pdtls.prprd_prrd_code,
                                     pdtls.prprd_pool_si);
                    END LOOP;
                --cur_rsk_rein_rec
                END LOOP;
            END loop;                                          --cur_all_risks
        END LOOP;                                                   -- cur_pol
    END;

    PROCEDURE check_risk_ri_value (v_batch_no IN NUMBER)
    IS
        CURSOR cur_risks IS
            SELECT ipu_code,
                   scl_no_ri_si,
                   ipu_reinsure_amt,
                   ipu_max_exposure,
                   ipu_property_id,
                   ipu_item_desc,
                   ipu_covt_sht_desc,
                   ipu_covt_code,
                   DECODE (NVL (ipu_grp_si_risk_pct, 0),
                           0, 100,
                           ipu_grp_si_risk_pct)    grp_pct
              FROM gin_insured_property_unds, gin_sub_classes
             WHERE     ipu_sec_scl_code = scl_code
                   AND ipu_pol_batch_no = v_batch_no;

        v_cnt              NUMBER;
        v_cover_sht_desc   gin_cover_types.covt_sht_desc%TYPE;
    BEGIN
        v_cnt := 0;

        FOR i IN cur_risks
        LOOP
            SELECT covt_sht_desc
              INTO v_cover_sht_desc
              FROM gin_cover_types
             WHERE covt_code = i.ipu_covt_code;

            IF     (   NVL (i.ipu_reinsure_amt, 0) = 0
                    OR NVL (i.ipu_max_exposure, 0) = 0)
               --AND v_cover_sht_desc NOT IN ('TPO')
               AND NVL (i.scl_no_ri_si, 'Y') = 'N'
            --NVL (i.ipu_reinsure_amt, 0) = 0  AND NVL (i.ipu_max_exposure, 0) = 0   AND v_cover_sht_desc NOT IN ('TPO')
            --AND NVL (i.scl_no_ri_si, 'Y') = 'N'
            THEN
                v_cnt := v_cnt + 1;
            END IF;
        END LOOP;

        --RAISE_ERROR('v_cnt === '||v_cnt);
        IF NVL (v_cnt, 0) > 0
        THEN
            raise_error (
                'This policy has Risk(s) that do not have reinsurance amount.Please check....');
        END IF;
    --0--RAISE_ERROR('v_cnt==== '||v_cnt);
    END;

    PROCEDURE reinsure_pool_per_risk (v_batch_no    IN NUMBER,
                                      v_ipu_code    IN NUMBER,
                                      v_tran_no     IN NUMBER,
                                      v_tran_type   IN VARCHAR2)
    IS
        v_cnt                    NUMBER := 0;
        v_trt_uwyr               NUMBER := NULL;
        cnt                      NUMBER := 1;
        v_retention_amt          NUMBER := 0;
        v_facre_rate             NUMBER := 0;
        v_errmsg                 VARCHAR2 (200);
        v_zero_devide            EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        al_id                    NUMBER;
        v_group_si               NUMBER := 0;
        v_grp_flag               BOOLEAN := FALSE;
        v_grp_pct                NUMBER := 0;
        v_grp_tot_ret            NUMBER := 0;
        v_reinsure_amt           NUMBER := 0;
        v_exhange_rate           NUMBER := 1;
        v_prprd_code             NUMBER;
        v_facre_amt              NUMBER := 0;
        v_facre_excess           NUMBER := 0;
        v_arrngmt_defined        NUMBER := 0;
        v_msg                    VARCHAR2 (200);
        v_arrangement            NUMBER;
        v_arrangement_type       VARCHAR2 (10);
        v_old_grs_ret_rate       NUMBER := 0;
        v_net_ret_rate           NUMBER := 0;
        v_retention_limit        NUMBER := 0;
        v_no_ri_si               VARCHAR2 (2);
        v_dummy                  NUMBER := 0;
        v_retention_type         VARCHAR2 (1) := NULL;
        v_bind_max_exp           NUMBER := 0;
        v_load_status            VARCHAR2 (2);
        v_reinsure_wot_ri_prog   VARCHAR2 (2);
        v_unadjusted_ri_tran     NUMBER := 0;
        v_as_uwyr                NUMBER;
        v_dc_pol_loaded          VARCHAR2 (3);
        v_eq_prem                NUMBER := 0;
        v_rnd                    NUMBER := 0;
        v_bcur_rnd               NUMBER := 0;
        v_bcur_code              NUMBER;
        v_bcur_symbol            VARCHAR2 (15);
        v_trt_amt                NUMBER;
        v_pool_ret_amt           NUMBER;
        v_pool_amt               NUMBER;
        v_pool_com_amt           NUMBER;
        v_pool_vat_amt           NUMBER;
        v_pool_rate              NUMBER;
        v_use_rate               NUMBER;

        CURSOR cur_pol IS
            SELECT pol_policy_status,
                   pol_binder_policy,
                   pol_cur_code,
                   pol_cur_symbol,
                   pol_prev_batch_no,
                   pol_loaded
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_all_risks IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     ipu_comp_retention,
                     ipu_pol_est_max_loss,
                     ipu_avail_fulc_bal,
                     ipu_endos_diff_amt,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_reinsure_amt,
                     ipu_facre_amount,
                     ipu_prev_ipu_code,
                     ipu_relr_code,
                     ipu_eff_wef,
                     ipu_id,
                     ipu_uw_yr,
                     ipu_inception_uwyr,
                     ipu_rc_code,
                     ipu_bind_code,
                     ipu_max_exposure,
                     ipu_earthqke_prem_diff,
                     ipu_covt_code,
                     prrd_comp_net_rate,
                     prrd_ri_prem,
                     prrd_grp_comp_net_ret,
                     prrd_code
                FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
               WHERE     ipu_pol_batch_no = v_batch_no
                     AND prrd_ipu_code = ipu_code
                     AND prrd_tran_no = v_tran_no
                     AND ipu_code = v_ipu_code
                     AND ipu_sec_scl_code IN
                             (SELECT rps_scl_code
                                FROM gin_ri_pool_subclasses
                               WHERE rps_scl_code = ipu_sec_scl_code)
            --AND decode(nvl(vpolloaded,'N'),'N',IPU_REINSURED,1) = 1
            ORDER BY 1;

        -- select treaties to reinsure each risk
        CURSOR cur_treaties (v_scl_code     IN NUMBER,
                             v_pta_code     IN NUMBER,
                             v_cover_code   IN NUMBER,
                             v_date         IN DATE,
                             v_ipu          IN NUMBER)
        IS
            SELECT *
              FROM gin_subcl_cover_ri_pool_rates
             WHERE     scrpr_scl_code = v_scl_code
                   AND scrpr_covt_code = v_cover_code
                   AND scrpr_pta_code = v_pta_code
                   AND (   (v_date BETWEEN scrpr_wef AND scrpr_wet)
                        OR (v_date > scrpr_wef));

        /*AND SCRPR_CODE NOT IN (select PRPRD_SCRPR_CODE from GIN_POL_REIN_POOL_RISK_DETAILS
            where PRPRD_IPU_CODE = v_ipu
            AND PRPRD_GGT_TRAN_NO =v_tran_no );*/
        --get Arrangement Type
        CURSOR cur_arrangments (v_scl_code IN NUMBER)
        IS
            SELECT DISTINCT pta_code
              FROM gin_pool_treaty_arrangements, gin_ri_pool_subclasses
             WHERE pta_code = rps_pta_code AND rps_scl_code = v_scl_code;
    BEGIN
        --v_exhange_rate := get_exchange_rate(v_cur_code,v_base_cur_code);
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

        FOR cur_pol_rec IN cur_pol
        LOOP
            v_exhange_rate :=
                get_currexch_rate (cur_pol_rec.pol_cur_code,
                                   v_rnd,
                                   v_bcur_rnd);

            -- raise_error('Unable to update facre rates at 1, ...'||v_ipu_code||';'||v_batch_no||';'||v_tran_no);
            BEGIN
                SELECT NVL (pol_loaded, 'N')
                  INTO v_load_status
                  FROM gin_policies
                 WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_load_status := NVL (cur_pol_rec.pol_loaded, 'N');
            END;

            FOR cur_all_risks_rec IN cur_all_risks
            LOOP
                --raise_error('Unable to update facre rates at 1, ...'||v_tran_type||';'||v_batch_no||';'||v_batch_no);
                v_bind_max_exp := 0;

                IF     NVL (v_bind_max_exp, 0) = 0
                   AND NVL (cur_pol_rec.pol_binder_policy, 'N') = 'Y'
                THEN
                    v_dummy := 0;

                    SELECT COUNT ('x')
                      INTO v_dummy
                      FROM gin_binder_details
                     WHERE     db_bind_code = cur_all_risks_rec.ipu_bind_code
                           AND db_scl_code =
                               cur_all_risks_rec.ipu_sec_scl_code;

                    IF NVL (v_dummy, 0) > 1
                    THEN
                        raise_error (
                            'Setup Error, Maximum accumulation defined more than once for this binder');
                    ELSIF NVL (v_dummy, 0) = 1
                    THEN
                        BEGIN
                            SELECT db_max_limit
                              INTO v_bind_max_exp
                              FROM gin_binder_details
                             WHERE     db_bind_code =
                                       cur_all_risks_rec.ipu_bind_code
                                   AND db_scl_code =
                                       cur_all_risks_rec.ipu_sec_scl_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                                raise_error (
                                    'Unable to retrieve the maxmium exposure for the bordereaux scl');
                        END;
                    ELSIF NVL (v_dummy, 0) = 0
                    THEN
                        BEGIN
                            SELECT NVL (bind_max_exposure, 0)
                              INTO v_bind_max_exp
                              FROM gin_binders
                             WHERE bind_code =
                                   cur_all_risks_rec.ipu_bind_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                                raise_error (
                                    'Unable to retrieve the maxmium exposure for the bordereaux');
                        END;
                    END IF;

                    --v_cnt_bind_check :=NVL(v_cnt_bind_check,0) + 1;
                    IF     NVL (v_bind_max_exp, 0) > 0
                       AND NVL (v_bind_max_exp, 0) <
                           NVL (cur_all_risks_rec.ipu_max_exposure, 0)
                    THEN
                        raise_error (
                               'The maximum exposure amount for the risk '
                            || cur_all_risks_rec.ipu_property_id
                            || ' is greater than the allowed limit of '
                            || v_bind_max_exp);
                    END IF;
                END IF;

                IF    SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)) IN
                          (1, 0, -1)
                   OR NVL (v_load_status, 'N') = 'Y'
                THEN
                    BEGIN
                        v_no_ri_si := NULL;

                        SELECT NVL (scl_no_ri_si, 'N'),
                               NVL (scl_reinsure_wot_ri_prog, 'N')
                          INTO v_no_ri_si, v_reinsure_wot_ri_prog
                          FROM gin_sub_classes
                         WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Unable to retrieve RI SI status for the sub class '
                                || cur_all_risks_rec.ipu_sec_scl_code);
                    END;

                    IF     NVL (v_no_ri_si, 'N') = 'N'
                       AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
                    THEN
                        raise_error (
                               'No reinsure amount specified, cannot reinsure this risk '
                            || cur_all_risks_rec.ipu_item_desc);
                    END IF;

                    -- open arrangements cursor
                    --reserve facre sessions if its not a new business or renewal
                    FOR r
                        IN cur_arrangments (
                               cur_all_risks_rec.ipu_sec_scl_code)
                    LOOP
                        FOR i
                            IN cur_treaties (
                                   cur_all_risks_rec.ipu_sec_scl_code,
                                   r.pta_code,
                                   cur_all_risks_rec.ipu_covt_code,
                                   cur_all_risks_rec.ipu_wef,
                                   cur_all_risks_rec.ipu_code)
                        LOOP
                            --raise_error('Unable to update facre rates at 1, ...'||cur_all_risks_rec.IPU_SEC_SCL_CODE||';'||cur_all_risks_rec.IPU_COVT_CODE||';'||cur_all_risks_rec.ipu_wef||';'||cur_all_risks_rec.ipu_code);
                            BEGIN
                                v_prprd_code := NULL;

                                SELECT prprd_code, prprd_rein_pool_rate
                                  INTO v_prprd_code, v_pool_rate
                                  FROM gin_pol_rein_pool_risk_details
                                 WHERE     prprd_ipu_code =
                                           cur_all_risks_rec.ipu_code
                                       AND prprd_covt_code =
                                           cur_all_risks_rec.ipu_covt_code
                                       AND prprd_ggt_tran_no = v_tran_no;
                            EXCEPTION
                                WHEN NO_DATA_FOUND
                                THEN
                                    v_prprd_code := NULL;
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to retrieve RI details, ...');
                            END;

                            v_trt_amt :=
                                ROUND (
                                      NVL (
                                          cur_all_risks_rec.prrd_comp_net_rate,
                                          0)
                                    * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                                    / 100,
                                    v_rnd);

                            --RAISE_ERROR('cur_all_risks_rec.IPU_ENDOS_DIFF_AMT '||cur_all_risks_rec.IPU_ENDOS_DIFF_AMT||' I.SCRPR_REIN_RATE '||I.SCRPR_REIN_RATE);
                            IF NVL (v_pool_rate, 0) > 0
                            THEN
                                v_use_rate := v_pool_rate;
                            ELSE
                                v_use_rate := NVL (i.scrpr_rein_rate, 0);
                            END IF;

                            v_pool_amt :=
                                ROUND (
                                      NVL (
                                          cur_all_risks_rec.ipu_endos_diff_amt,
                                          0)
                                    * v_use_rate
                                    / 100,
                                    v_rnd);
                            v_pool_ret_amt :=
                                  NVL (cur_all_risks_rec.ipu_endos_diff_amt,
                                       0)
                                - NVL (v_pool_amt, 0);
                            v_pool_com_amt :=
                                ROUND (
                                      NVL (v_pool_amt, 0)
                                    * NVL (i.scrpr_comm_rate, 0)
                                    / 100,
                                    v_rnd);
                            v_pool_vat_amt :=
                                ROUND (
                                      NVL (v_pool_com_amt, 0)
                                    * NVL (i.scrpr_comm_vat_rate, 0)
                                    / 100,
                                    v_rnd);

                            --RAISE_ERROR('pool amount '||v_pool_amt);
                            --raise_error('Unable to update facre rates at 1, ...'||v_trt_amt||';'||v_pool_amt||';'||v_pool_ret_amt||';'||v_pool_com_amt||';'||v_pool_vat_amt);
                            IF v_prprd_code IS NULL
                            THEN
                                BEGIN
                                    SELECT TO_NUMBER (
                                                  TO_CHAR (SYSDATE, 'YYYY')
                                               || gin_prprd_code_seq.NEXTVAL)
                                      INTO v_prprd_code
                                      FROM DUAL;

                                    INSERT INTO gin_pol_rein_pool_risk_details (
                                                    prprd_code,
                                                    prprd_risk_prem_amt,
                                                    prprd_risk_own_ret_amt,
                                                    prprd_risk_cur_code,
                                                    prprd_risk_exch_rate,
                                                    prprd_scrpr_code,
                                                    prprd_rein_pool_rate,
                                                    prprd_ipu_code,
                                                    prprd_scl_code,
                                                    prprd_covt_code,
                                                    prprd_pol_batch_no,
                                                    prprd_rein_pool_amt,
                                                    prprd_rein_pool_comm_rate,
                                                    prprd_rein_pool_vat_rate,
                                                    prprd_rein_pool_comm_amt,
                                                    prprd_rein_pool_vat_amt,
                                                    prprd_prev_prprd_code,
                                                    prprd_ggt_tran_no,
                                                    prprd_property_id,
                                                    prprd_uwyr,
                                                    prprd_pol_ren_endos_no,
                                                    prprd_date,
                                                    prprd_risk_trt_own_ret_amt,
                                                    prprd_pta_code,
                                                    prprd_os_claim_amt,
                                                    prprd_paid_claim_amt,
                                                    prprd_pool_net_amt,
                                                    prprd_prrd_code)
                                             VALUES (
                                                 v_prprd_code,
                                                 cur_all_risks_rec.ipu_endos_diff_amt,
                                                 NVL (v_pool_ret_amt, 0),
                                                 cur_pol_rec.pol_cur_code,
                                                 v_exhange_rate,
                                                 i.scrpr_code,
                                                 NVL (i.scrpr_rein_rate, 0),
                                                 cur_all_risks_rec.ipu_code,
                                                 cur_all_risks_rec.ipu_sec_scl_code,
                                                 cur_all_risks_rec.ipu_covt_code,
                                                 cur_all_risks_rec.ipu_pol_batch_no,
                                                 NVL (v_pool_amt, 0),
                                                 i.scrpr_comm_rate,
                                                 i.scrpr_comm_vat_rate,
                                                 NVL (v_pool_com_amt, 0),
                                                 NVL (v_pool_vat_amt, 0),
                                                 v_prprd_code,
                                                 v_tran_no,
                                                 cur_all_risks_rec.ipu_property_id,
                                                 cur_all_risks_rec.ipu_uw_yr,
                                                 cur_all_risks_rec.ipu_pol_ren_endos_no,
                                                 SYSDATE,
                                                 NVL (v_trt_amt, 0),
                                                 r.pta_code,
                                                 gin_stp_claims_pkg.total_os_per_risk (
                                                     cur_all_risks_rec.ipu_code),
                                                 gin_stp_claims_pkg.total_pymt_per_risk (
                                                     cur_all_risks_rec.ipu_code),
                                                   NVL (v_pool_amt, 0)
                                                 - (  NVL (
                                                          gin_stp_claims_pkg.total_os_per_risk (
                                                              cur_all_risks_rec.ipu_code),
                                                          0)
                                                    + NVL (
                                                          gin_stp_claims_pkg.total_pymt_per_risk (
                                                              cur_all_risks_rec.ipu_code),
                                                          0)
                                                    + NVL (v_pool_com_amt, 0)
                                                    + NVL (v_pool_vat_amt, 0)),
                                                 cur_all_risks_rec.prrd_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to create risk RI details, ...');
                                END;
                            ELSE
                                BEGIN
                                    --PRRD_AVAIL_FULC_BAL =ROUND(DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,v_facre_rate * (DECODE(NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0),0,0,NVL(cur_all_risks_rec.IPU_REINSURE_AMT,0)) /100))),
                                    --PRRD_EXCESS_PCT        =ROUND(v_facre_rate,4),
                                    DBMS_OUTPUT.put_line (
                                           'update v_retention_amt='
                                        || v_retention_amt);

                                    UPDATE gin_pol_rein_pool_risk_details
                                       SET prprd_risk_prem_amt =
                                               cur_all_risks_rec.ipu_endos_diff_amt,
                                           prprd_risk_own_ret_amt =
                                               NVL (v_pool_ret_amt, 0),
                                           prprd_rein_pool_amt =
                                               NVL (v_pool_amt, 0),
                                           prprd_rein_pool_comm_rate =
                                               NVL (i.scrpr_comm_rate, 0),
                                           prprd_rein_pool_rate = v_use_rate,
                                           prprd_rein_pool_vat_rate =
                                               NVL (i.scrpr_comm_vat_rate, 0),
                                           prprd_rein_pool_comm_amt =
                                               NVL (v_pool_com_amt, 0),
                                           prprd_rein_pool_vat_amt =
                                               NVL (v_pool_vat_amt, 0),
                                           prprd_risk_trt_own_ret_amt =
                                               NVL (v_trt_amt, 0),
                                           prprd_os_claim_amt =
                                               gin_stp_claims_pkg.total_os_per_risk (
                                                   cur_all_risks_rec.ipu_code),
                                           prprd_paid_claim_amt =
                                               gin_stp_claims_pkg.total_pymt_per_risk (
                                                   cur_all_risks_rec.ipu_code),
                                           prprd_pool_net_amt =
                                                 NVL (prprd_rein_pool_amt, 0)
                                               - (  NVL (prprd_os_claim_amt,
                                                         0)
                                                  + NVL (
                                                        prprd_paid_claim_amt,
                                                        0)
                                                  + NVL (
                                                        prprd_rein_pool_comm_amt,
                                                        0)
                                                  + NVL (
                                                        prprd_rein_pool_vat_amt,
                                                        0))
                                     WHERE     prprd_ipu_code =
                                               cur_all_risks_rec.ipu_code
                                           AND prprd_code = v_prprd_code
                                           AND prprd_ggt_tran_no = v_tran_no;
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Unable to update the risk RI details, ...');
                                END;
                            END IF;
                        END LOOP;
                    END LOOP;
                END IF;
            END LOOP;
        END LOOP;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL...');
    END;

    PROCEDURE allocate_fac_debits (v_pol_batch_no IN NUMBER)
    AS
        CURSOR cur_fac_debit IS
            SELECT DISTINCT fc_agnt_agent_code
              FROM gin_facre_cessions
             WHERE fc_pol_batch_no = v_pol_batch_no AND fc_dc_no IS NULL;

        v_drcr_no   VARCHAR2 (50);
    BEGIN
        FOR cur_fac_debit_rec IN cur_fac_debit
        LOOP
            v_drcr_no :=
                gin_sequences_pkg.get_dbcr_number_format ('FC',
                                                          -2000,
                                                          -2000,
                                                          -2000,
                                                          'N',
                                                          NULL);

            UPDATE gin_facre_cessions
               SET fc_dc_no = v_drcr_no
             WHERE     fc_agnt_agent_code =
                       cur_fac_debit_rec.fc_agnt_agent_code
                   AND fc_pol_batch_no = v_pol_batch_no;
        END LOOP;
    END;

    PROCEDURE reprocess_grp_facoblig (v_batch_no    IN NUMBER,
                                      v_ipu_code    IN NUMBER,
                                      v_tran_no     IN NUMBER,
                                      v_tran_type   IN VARCHAR2,
                                      v_user        IN VARCHAR2)
    IS
        CURSOR cur_all_risks IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     prrd_gross_comp_retention     gross_comp_ret,
                     ipu_pol_est_max_loss,
                     prrd_avail_fulc_bal,
                     prrd_ri_prem,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_sect_sht_desc,
                     ipu_cur_code,
                     prrd_facre_amount,
                     ipu_reinsure_amt,
                     prrd_gross_comp_retention,
                     ipu_prem_tax,
                     ipu_bind_code,
                     ipu_max_exposure,
                     prrd_earthquake_prem,
                     prrd_ri_net_less_eq_prem,
                     prrd_code,
                     pol_prem_tax,
                     pol_binder_policy,
                     prrd_as_code,
                     prrd_facoblig_excess,
                     prrd_facoblig_user_excess,
                     prrd_facoblig_alloc_chk
                FROM gin_policies,
                     gin_insured_property_unds,
                     gin_policy_risk_ri_dtls
               WHERE     pol_batch_no = ipu_pol_batch_no
                     AND ipu_code = prrd_ipu_code
                     AND prrd_tran_no = v_tran_no
                     AND ipu_code = v_ipu_code
                     AND ipu_reinsured = 1
                     AND (   NVL (prrd_avail_fulc_bal, 0) > 0
                          OR NVL (prrd_facoblig_excess, 0) > 0)
                     AND ipu_pol_batch_no = v_batch_no
            ORDER BY ipu_code;

        CURSOR cur_fac_oblig (vascode IN NUMBER)
        IS
            SELECT *
              FROM gin_arrangmnt_facoblig, tqc_agencies
             WHERE afob_agn_code = agn_code AND afob_as_code = vascode;

        v_ceded                NUMBER;
        v_fc_code              NUMBER;
        --  v_user     VARCHAR(30);
        v_as_fac_oblig_limit   NUMBER;
        v_tot_pcts             NUMBER;
        v_cnt                  NUMBER;
    BEGIN
        --raise_error('PROCESS_FACOBLIG'||v_batch_no||';'||v_tran_no);
        FOR cur_all_risks_rec IN cur_all_risks
        LOOP
            --  raise_error('v_as_fac_oblig_limit'||v_as_fac_oblig_limit);
            --    DELETE GIN_FACRE_CESSIONS WHERE FC_IPU_CODE = cur_all_risks_rec.ipu_code AND FC_FACRE_TYPE = 'O';

            /*BEGIN
                SELECT NVL(CLT_FAC_OBLIG_LIMIT,0)
                   INTO v_as_fac_oblig_limit
                   FROM GIN_CLASS_TREATIES
                   WHERE CLT_AS_CODE = cur_all_risks_rec.PRRD_AS_CODE
                   AND CLT_SCL_CODE =cur_all_risks_rec.ipu_sec_scl_code;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    NULL;
               WHEN OTHERS THEN
                   TQC_ERROR_MANAGER.RAISE_UNANTICIPATED(text_in => 'Error getting facultative obligatory limit.');
            END;*/

            /*
            BEGIN
               SELECT NVL(AFOB_MAX_SI_LIMIT,0)
               INTO v_as_fac_oblig_limit
               FROM GIN_ARRANGMNT_FACOBLIG
               WHERE AFOB_AS_CODE = cur_all_risks_rec.PRRD_AS_CODE;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    NULL;
               WHEN OTHERS THEN
                   TQC_ERROR_MANAGER.RAISE_UNANTICIPATED(text_in => 'Error getting facultative obligatory limit.');
            END;
               */
            DBMS_OUTPUT.put_line (
                   'NVL(v_as_fac_oblig_limit,0)='
                || NVL (v_as_fac_oblig_limit, 0));
            DBMS_OUTPUT.put_line (
                   'NVL(PRRD_FACOBLIG_USER_EXCESS,0)='
                || cur_all_risks_rec.prrd_facoblig_user_excess);
            DBMS_OUTPUT.put_line (
                   'NVL(PRRD_FACOBLIG_EXCESS,0)='
                || cur_all_risks_rec.prrd_facoblig_excess);
            DBMS_OUTPUT.put_line (
                   'prrd_facoblig_alloc_chk='
                || cur_all_risks_rec.prrd_facoblig_alloc_chk);

            IF NVL (cur_all_risks_rec.prrd_facoblig_alloc_chk, 'N') = 'Y'
            THEN
                --IF NVL(v_as_fac_oblig_limit,0) >0 OR NVL(cur_all_risks_rec.PRRD_FACOBLIG_USER_EXCESS,cur_all_risks_rec.PRRD_FACOBLIG_EXCESS) >0 THEN
                IF    NVL (v_as_fac_oblig_limit, 0) > 0
                   OR NVL (cur_all_risks_rec.prrd_facoblig_excess, 0) > 0
                THEN
                    BEGIN
                        SELECT SUM (NVL (afob_cession_rate, 0)), COUNT (1)
                          INTO v_tot_pcts, v_cnt
                          FROM gin_arrangmnt_facoblig
                         WHERE afob_as_code = cur_all_risks_rec.prrd_as_code;

                        IF NVL (v_tot_pcts, 0) != 100 AND NVL (v_cnt, 0) > 0
                        THEN
                            tqc_error_manager.raise_unanticipated (
                                text_in   =>
                                    'Facultative obligatory participation does not add up to 100%');
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            tqc_error_manager.raise_unanticipated (
                                text_in   =>
                                    'Error checking facultative obligatory treaty participation ');
                    END;

                    DBMS_OUTPUT.put_line (
                           'cur_all_risks_rec.PRRD_FACOBLIG_EXCESS '
                        || cur_all_risks_rec.prrd_facoblig_excess);

                    IF NVL (cur_all_risks_rec.prrd_facoblig_excess, 0) != 0
                    THEN
                        v_ceded :=
                            NVL (cur_all_risks_rec.prrd_facoblig_excess, 0);
                    ELSIF NVL (v_as_fac_oblig_limit, 0) <=
                          NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0)
                    THEN
                        v_ceded := NVL (v_as_fac_oblig_limit, 0);
                    ELSE
                        v_ceded :=
                            NVL (cur_all_risks_rec.prrd_avail_fulc_bal, 0);
                    END IF;

                    --                UPDATE GIN_POLICY_RISK_RI_DTLS
                    --                SET PRRD_FACOBLIG_EXCESS =NVL(PRRD_FACOBLIG_USER_EXCESS,v_as_fac_oblig_limit)
                    --                WHERE PRRD_CODE =cur_all_risks_rec.PRRD_CODE;
                    DBMS_OUTPUT.put_line (
                           'v_ceded '
                        || v_ceded
                        || 'v_as_fac_oblig_limit='
                        || v_as_fac_oblig_limit
                        || 'v_OBLexcess='
                        || cur_all_risks_rec.prrd_facoblig_excess
                        || ';'
                        || cur_all_risks_rec.prrd_facoblig_user_excess
                        || ';'
                        || cur_all_risks_rec.prrd_code);

                    IF v_ceded > 0
                    THEN
                        -- v_cnt := 0;
                        FOR cur_fac_oblig_rec
                            IN cur_fac_oblig (cur_all_risks_rec.prrd_as_code)
                        LOOP
                            v_cnt := NVL (v_cnt, 0) + 1;

                            IF NVL (cur_fac_oblig_rec.afob_cession_rate, 0) =
                               0
                            THEN
                                raise_error (
                                    'Cession rates for facultative obligatory participants has not been specified.');
                            END IF;

                            insert_facre (
                                v_batch_no,
                                cur_all_risks_rec.ipu_code,
                                v_tran_no,
                                cur_fac_oblig_rec.afob_agn_code,
                                cur_fac_oblig_rec.agn_sht_desc,
                                'A',
                                  NVL (cur_fac_oblig_rec.afob_cession_rate,
                                       0)
                                / 100
                                * NVL (v_ceded, 0),
                                v_user,
                                'A',
                                v_fc_code,
                                'O',
                                SYSDATE,
                                'N',
                                cur_fac_oblig_rec.afob_comm_rate,
                                TRUE,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL);
                        END LOOP;

                        --raise_error('v_cnt='||v_cnt||';'||cur_all_risks_rec.PRRD_AS_CODE);
                        IF NVL (v_cnt, 0) = 0
                        THEN
                            raise_error (
                                'A facultative treaty obligatory limit has been set but the participants have not been defined.');
                        END IF;
                    END IF;
                END IF;
            END IF;
        END LOOP;
    END;



    PROCEDURE insert_facre_setup (v_pfcs_code              NUMBER,
                                  v_pol_batch_no           NUMBER,
                                  v_agn_code               NUMBER,
                                  v_agn_sht_desc           VARCHAR2,
                                  v_amt_rate               VARCHAR2,
                                  v_rate                   NUMBER,
                                  v_accepted               VARCHAR2,
                                  v_accepted_date          DATE,
                                  v_comm_rate              NUMBER,
                                  v_add_edit               VARCHAR2,
                                  v_pfcs_mngment_type      VARCHAR2,
                                  v_pfcs_mngment_value     NUMBER,
                                  v_pfcs_reins_tax_type    VARCHAR2,
                                  v_pfcs_reins_tax_value   NUMBER)
    IS
    BEGIN
        IF v_add_edit = 'A'
        THEN
            INSERT INTO gin_policy_facre_setup (pfcs_code,
                                                pfcs_pol_batch_no,
                                                pfcs_agn_code,
                                                pfcs_agn_sht_desc,
                                                pfcs_amt_or_rate,
                                                pfcs_rate,
                                                pfcs_accepted,
                                                pfcs_accepted_date,
                                                pfcs_comm_rate,
                                                pfcs_mngment_type,
                                                pfcs_mngment_value,
                                                pfcs_reins_tax_type,
                                                pfcs_reins_tax_value)
                 VALUES (gin_pfcs_code_seq.NEXTVAL,
                         v_pol_batch_no,
                         v_agn_code,
                         v_agn_sht_desc,
                         v_amt_rate,
                         v_rate,
                         v_accepted,
                         v_accepted_date,
                         v_comm_rate,
                         v_pfcs_mngment_type,
                         v_pfcs_mngment_value,
                         v_pfcs_reins_tax_type,
                         v_pfcs_reins_tax_value);
        ELSIF v_add_edit = 'E'
        THEN
            UPDATE gin_policy_facre_setup
               SET pfcs_agn_code = v_agn_code,
                   pfcs_agn_sht_desc = v_agn_sht_desc,
                   pfcs_amt_or_rate = v_amt_rate,
                   pfcs_rate = v_rate,
                   pfcs_accepted = v_accepted,
                   pfcs_accepted_date = v_accepted_date,
                   pfcs_comm_rate = v_comm_rate,
                   pfcs_mngment_type = v_pfcs_mngment_type,
                   pfcs_mngment_value = v_pfcs_mngment_value,
                   pfcs_reins_tax_type = v_pfcs_reins_tax_type,
                   pfcs_reins_tax_value = v_pfcs_reins_tax_value
             WHERE pfcs_code = v_pfcs_code;
        ELSIF v_add_edit = 'D'
        THEN
            DELETE FROM gin_policy_facre_setup
                  WHERE pfcs_code = v_pfcs_code;
        END IF;
    END;

    PROCEDURE update_pool_rate (v_rate            NUMBER,
                                v_prrd_code       NUMBER,
                                v_ipu_code        NUMBER,
                                v_pol_batch       NUMBER,
                                v_tran_no         NUMBER,
                                v_ri_edit_trans   VARCHAR2)
    IS
    BEGIN
        UPDATE gin_pol_rein_pool_risk_details
           SET prprd_rein_pool_rate = v_rate
         WHERE prprd_code = v_prrd_code;
    END;

    FUNCTION get_grp_ri_pendng_trns (v_pol_batch_no   IN NUMBER,
                                     v_ipu_code          NUMBER DEFAULT NULL)
        RETURN VARCHAR2
    IS
        v_unadjusted_ri_tran   NUMBER;
    BEGIN
        v_unadjusted_ri_tran := 0;

        SELECT COUNT (ggt_trans_no)
          INTO v_unadjusted_ri_tran
          FROM gin_gis_transactions, gin_insured_property_unds
         WHERE     ggt_uw_clm_tran = 'R'
               AND ipu_code = NVL (v_ipu_code, ipu_code)
               AND NVL (ggt_trans_authorised, 'N') IN ('N', 'R')
               AND ggt_risk_grp_code = ipu_relr_code
               AND ipu_relr_code IS NOT NULL
               AND ipu_pol_batch_no = v_pol_batch_no;

        IF NVL (v_unadjusted_ri_tran, 0) > 0
        THEN
            RETURN ('Y');
        ELSE
            RETURN ('N');
        END IF;
    END;

    PROCEDURE del_grp_ri_trns (v_pol_batch_no IN NUMBER)
    IS
        CURSOR grp_rsks IS
            SELECT ggt_trans_no
              FROM gin_gis_transactions, gin_insured_property_unds
             WHERE     ggt_uw_clm_tran = 'R'
                   AND NVL (ggt_trans_authorised, 'N') IN ('N', 'R')
                   AND ggt_risk_grp_code = ipu_relr_code
                   AND ipu_relr_code IS NOT NULL
                   AND ipu_pol_batch_no = v_pol_batch_no;
    BEGIN
        FOR g IN grp_rsks
        LOOP
            delete_grp_cessions (g.ggt_trans_no);
        END LOOP;
    END;

    FUNCTION get_exists_grp_risks (v_pol_batch_no IN NUMBER)
        RETURN VARCHAR2
    IS
        v_cnt_grp   NUMBER;
    BEGIN
        SELECT COUNT (1)
          INTO v_cnt_grp
          FROM gin_insured_property_unds
         WHERE ipu_relr_code IN
                   (SELECT ipu_relr_code
                      FROM gin_insured_property_unds
                     WHERE     ipu_pol_batch_no = v_pol_batch_no
                           AND ipu_relr_code IS NOT NULL);

        IF v_cnt_grp > 1
        THEN
            RETURN ('Y');
        ELSE
            RETURN ('N');
        END IF;
    END;

    FUNCTION get_risk_prev_si (v_prrd_code IN NUMBER)
        RETURN NUMBER
    IS
        v_reinsure_amt   NUMBER;
    BEGIN
        BEGIN
            SELECT NVL (PRRD_PREV_RI_SI, 0)
              INTO v_reinsure_amt
              FROM gin_policy_risk_ri_dtls
             WHERE PRRD_CODE = v_prrd_code;
        --AND IPU_PREV_IPU_CODE !=v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_reinsure_amt := 0;
        END;

        RETURN v_reinsure_amt;
    END;

    FUNCTION get_risk_prev_ri_siXX (v_ipu_id IN NUMBER)
        RETURN NUMBER
    IS
        v_trt_si   NUMBER;
    BEGIN
        BEGIN
            SELECT SUM (NVL (ptotr_trt_prev_si_pcur, 0))
              INTO v_trt_si
              FROM gin_policy_risk_ri_dtls,
                   gin_insured_property_unds,
                   gin_policy_rein_risk_details
             WHERE     IPU_CODE = PRRD_IPU_CODE
                   AND IPU_ID = v_ipu_id
                   AND PRRD_CODE = PTOTR_PRRD_CODE
                   AND IPU_CODE = PTOTR_IPU_CODE;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_trt_si := 0;
        END;

        RETURN v_trt_si;
    END;

    FUNCTION get_risk_prev_ri_si (v_ipu_code IN NUMBER)
        RETURN NUMBER
    IS
        v_trt_si   NUMBER;
    BEGIN
        BEGIN
            SELECT SUM (
                       DECODE (SIGN (PTOTR_RISK_PREM_PCUR),
                               1, ABS (NVL (ptotr_trt_prev_si_pcur, 0)),
                               -ABS (NVL (ptotr_trt_prev_si_pcur, 0))))
              INTO v_trt_si
              FROM gin_policy_risk_ri_dtls,
                   gin_insured_property_unds,
                   gin_policy_rein_risk_details
             WHERE     IPU_CODE = PRRD_IPU_CODE
                   AND IPU_CODE = v_ipu_code
                   AND PRRD_CODE = PTOTR_PRRD_CODE
                   AND IPU_CODE = PTOTR_IPU_CODE;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_trt_si := 0;
        END;

        RETURN v_trt_si;
    END;

    FUNCTION get_risk_ri_si (v_ipu_id     IN NUMBER,
                             v_ipu_code   IN NUMBER,
                             v_uw_yr      IN NUMBER)
        RETURN NUMBER
    IS
        v_trt_si   NUMBER;
    BEGIN
        --   IF v_ipu_id =20171573239 THEN
        --   RAISE_ERROR('v_ipu_id='||v_ipu_id||';'||v_ipu_code||';'||v_uw_yr);
        --    END IF;
        BEGIN
            SELECT                             --SUM(NVL(ptotr_trt_si_pcur,0))
                   SUM (
                       DECODE (SIGN (PTOTR_TRT_PREM_PCUR),
                               1, ABS (NVL (PTOTR_TRT_SI_PCUR, 0)),
                               -1, -ABS (NVL (PTOTR_TRT_SI_PCUR, 0)),
                               ABS (NVL (PTOTR_TRT_SI_PCUR, 0))))
              --SUM(DECODE(SIGN(PTOTR_TRT_PREM_PCUR),1,ABS(NVL(ptotr_trt_prev_si_pcur,0)),-ABS(NVL(ptotr_trt_prev_si_pcur,0)),ABS(NVL(ptotr_trt_prev_si_pcur,0))))
              INTO v_trt_si
              FROM gin_policy_risk_ri_dtls,
                   gin_insured_property_unds,
                   gin_policy_rein_risk_details
             WHERE     IPU_CODE = PRRD_IPU_CODE
                   AND IPU_id = v_ipu_id
                   --            AND PRRD_CODE !=v_prrd_code
                   --            AND PRRD_CODE < v_prrd_code
                   AND IPU_CODE < v_ipu_code
                   AND PRRD_CODE = PTOTR_PRRD_CODE
                   AND IPU_CODE = PTOTR_IPU_CODE
                   AND IPU_UW_YR = v_uw_yr;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_trt_si := 0;
        END;

        RETURN v_trt_si;
    END;

    FUNCTION get_risk_comp_retention (v_ipu_id     IN NUMBER,
                                      v_uw_yr      IN NUMBER,
                                      v_ipu_code   IN NUMBER)
        RETURN NUMBER
    IS
        v_net_retention_amt   NUMBER;
    BEGIN
        --  RAISE_ERROR(v_uw_yr||';'||v_ipu_code||';'||v_ipu_id);
        BEGIN
            SELECT                       --SUM(NVL(prrd_prev_net_retention,0))
                   SUM (
                       DECODE (SIGN (NVL (prrd_comp_retention, 0)),
                               1, ABS (NVL (prrd_prev_net_retention, 0)),
                               0, ABS (NVL (prrd_prev_net_retention, 0)),
                               -1, -ABS (NVL (prrd_prev_net_retention, 0))))
              INTO v_net_retention_amt
              FROM gin_policy_risk_ri_dtls, gin_insured_property_unds
             WHERE     ipu_code = prrd_ipu_code
                   AND IPU_UW_YR = v_uw_yr
                   AND IPU_ID = v_ipu_id
                   AND IPU_CODE <= v_ipu_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_net_retention_amt := 0;
        END;

        --        raise_error(v_net_retention_amt);
        RETURN v_net_retention_amt;
    END;

    FUNCTION get_risk_cumulative_prem (v_ipu_id     IN NUMBER,
                                       v_uw_yr      IN NUMBER,
                                       v_type       IN VARCHAR2,
                                       v_ipu_code   IN NUMBER)
        RETURN NUMBER
    IS
        v_amt   NUMBER;
    BEGIN
        --   raise_error(v_ipu_id||';'||v_uw_yr||';'||v_ipu_code);
        IF v_type = 'G'
        THEN                                                  -- gross premium
            BEGIN
                SELECT SUM (NVL (IPU_ENDOS_DIFF_AMT, 0))
                  INTO v_amt
                  FROM gin_insured_property_unds
                 WHERE     IPU_ID = v_ipu_id
                       AND IPU_UW_YR = v_uw_yr
                       AND IPU_CODE <= v_ipu_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_amt := 0;
            END;
        ELSIF v_type = 'O'
        THEN                                                        -- own ret
            BEGIN
                SELECT SUM (NVL (PRRD_NET_PREM, 0))
                  INTO v_amt
                  FROM gin_policy_risk_ri_dtls, gin_insured_property_unds
                 WHERE     IPU_ID = v_ipu_id
                       AND IPU_CODE = PRRD_IPU_CODE
                       AND IPU_UW_YR = v_uw_yr
                       AND IPU_CODE < v_ipu_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_amt := 0;
            END;
        ELSIF v_type = 'T'
        THEN                                                         -- treaty
            BEGIN
                SELECT SUM (NVL (PTOTR_TRT_PREM_PCUR, 0))
                  INTO v_amt
                  FROM gin_policy_risk_ri_dtls,
                       gin_insured_property_unds,
                       gin_policy_rein_risk_details
                 WHERE     IPU_ID = v_ipu_id
                       AND IPU_CODE = PRRD_IPU_CODE
                       AND IPU_UW_YR = v_uw_yr
                       AND PRRD_CODE = PTOTR_PRRD_CODE
                       AND IPU_CODE = PTOTR_IPU_CODE
                       AND IPU_CODE < v_ipu_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_amt := 0;
            END;
        ELSIF v_type = 'F'
        THEN                                                          -- facre
            BEGIN
                SELECT SUM (NVL (FC_PREM_AMT, 0))
                  INTO v_amt
                  FROM gin_facre_cessions, gin_insured_property_unds
                 WHERE     FC_IPU_CODE = ipu_code
                       AND IPU_ID = v_ipu_id
                       AND IPU_UW_YR = v_uw_yr
                       AND IPU_CODE < v_ipu_code;
            --AND NVL(prrd_ri_reinsured,'N') !='Y';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_amt := 0;
            END;
        END IF;

        RETURN v_amt;
    END;

    FUNCTION check_claim_cass_call (v_clm_no IN VARCHAR2)
        RETURN VARCHAR2
    IS
        v_cnt   NUMBER := 0;
    BEGIN
        SELECT COUNT (1)
          INTO v_cnt
          FROM gin_claim_master_bookings,
               gin_claim_treaty_cessions,
               gin_treaty_setups,
               (  SELECT clmrev_cmb_claim_no,
                         SUM (NVL (clmrev_amt, 0) * clmrev_cur_rate)    incurred
                    FROM gin_claim_revisions
                   WHERE clmrev_authorised = 'Y'
                GROUP BY clmrev_cmb_claim_no)
         WHERE     cmb_claim_no = ctrtc_cmb_claim_no
               AND cmb_claim_no = clmrev_cmb_claim_no(+)
               AND ctrtc_rei_code = rei_code
               AND (ctrtc_rate / 100 * NVL (incurred, 0)) >
                   NVL (rei_cash_loss, 0)
               AND NVL (rei_cash_loss, 0) > 0
               AND cmb_claim_no = v_clm_no;

        IF NVL (v_cnt, 0) > 0
        THEN
            RETURN ('Y');
        ELSE
            RETURN ('N');
        END IF;
    END;

    PROCEDURE clean_register_ri_values (v_pr_code IN NUMBER)
    IS
        CURSOR pr IS
            SELECT pr_code, pr_ggt_trans_no, pr_pol_batch_no
              FROM gin_policy_register
             WHERE pr_code = v_pr_code AND pr_tran_type NOT IN ('RIR', 'RIC');

        CURSOR cur_rein (v_prrd_code NUMBER)
        IS
              SELECT ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_prem_tcur, 0)),
                                 0)))    mand_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_si_tcur, 0)),
                                 0)))    mand_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_prem, 0)),
                                 0)))    mand_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_trt_comm_tcur, 0)),
                                 0)))    mand_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_refund_com, 0)),
                                 0)))    mand_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              mand_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1001, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              mand_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_prem_tcur, 0)),
                                 0)))    qs_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_si_tcur, 0)),
                                 0)))    qs_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_trt_comm_tcur, 0)),
                                 0)))    qs_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              qs_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_prem, 0)),
                                 0)))    qs_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ptotr_refund_com, 0)),
                                 0)))    qs_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     1003, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              qs_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_prem_tcur, 0)),
                                 0)))    fstsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_si_tcur, 0)),
                                 0)))    fstsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_trt_comm_tcur, 0)),
                                 0)))    fstsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              fstsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_prem, 0)),
                                 0)))    fstsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ptotr_refund_com, 0)),
                                 0)))    fstsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10041, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              fstsup_ref_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_prem_tcur, 0)),
                                 0)))    secsup_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_si_tcur, 0)),
                                 0)))    secsup_si,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_trt_comm_tcur, 0)),
                                 0)))    secsup_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_cession_pct, 0)),
                                 0)),
                         4)              secsup_pct,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_prem, 0)),
                                 0)))    secsup_ref_prem,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ptotr_refund_com, 0)),
                                 0)))    secsup_ref_com,
                     ROUND (
                         SUM (
                             NVL (
                                 DECODE (
                                     trs_trtg_code,
                                     10042, NVL (ptotr_prev_cession_rate, 0)),
                                 0)),
                         4)              secsup_ref_pct
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_prrd_code = v_prrd_code
            GROUP BY ptotr_ipu_code;

        CURSOR cur_pol_rein (v_trans_no NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    mand_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_si_pcur, 0)),
                             0))    mand_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_prem, 0)),
                             0))    mand_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    mand_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    mand_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_earthqke_comm, 0)),
                             0))    mand_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1001, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    mand_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    qs_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_si_pcur, 0)),
                             0))    qs_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_prem, 0)),
                             0))    qs_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    qs_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    qs_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_earthqke_comm, 0)),
                             0))    qs_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     1003, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    qs_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    fstsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_si_pcur, 0)),
                             0))    fstsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_prem, 0)),
                             0))    fstsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    fstsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    fstsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_earthqke_comm, 0)),
                             0))    fstsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10041, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    fstsup_noneq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_prem_pcur, 0)),
                             0))    secsup_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_si_pcur, 0)),
                             0))    secsup_si,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_prem, 0)),
                             0))    secsup_eq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_prem, 0)),
                             0))    secsup_noneq_prem,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_trt_comm_pcur, 0)),
                             0))    secsup_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_earthqke_comm, 0)),
                             0))    secsup_eq_com,
                     SUM (
                         NVL (
                             DECODE (trs_trtg_code,
                                     10042, NVL (ptotr_net_less_eq_comm, 0)),
                             0))    secsup_noneq_com
                FROM gin_policy_rein_risk_details, gin_treaties
               WHERE     ptotr_trs_code = trs_code
                     AND ptotr_ggt_tran_no = v_trans_no
            GROUP BY ptotr_ggt_tran_no;

        CURSOR cur_rsk_rein_dtls (v_ipu_code NUMBER, v_trans_no NUMBER)
        IS
            SELECT *
              FROM gin_policy_rein_risk_details, gin_treaties
             WHERE     ptotr_trs_code = trs_code
                   AND ptotr_ipu_code = v_ipu_code
                   AND ptotr_ggt_tran_no = v_trans_no;

        CURSOR cur_rsk_rein_part_dtls (v_ptotr_code NUMBER)
        IS
            SELECT *
              FROM gin_participations
             WHERE part_ptotr_code = v_ptotr_code;

        CURSOR cur_pol_facre (v_tran_no NUMBER)
        IS
            SELECT SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_comm_amt, 0)),
                           0))    facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_prem_amt, 0)),
                           0))    facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_amount, 0)),
                           0))    facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_prem, 0)),
                           0))    facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_prem, 0)),
                           0))    facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_earthqke_comm, 0)),
                           0))    facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'N', NVL (fc_net_less_eq_comm, 0)),
                           0))    facre_noneq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_comm_amt, 0)),
                           0))    ob_facre_com,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_prem_amt, 0)),
                           0))    ob_facre_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_amount, 0)),
                           0))    ob_facre_si,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_prem, 0)),
                           0))    ob_facre_eq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_prem, 0)),
                           0))    ob_facre_noneq_prem,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_earthqke_comm, 0)),
                           0))    ob_facre_eq_comm,
                   SUM (
                       NVL (
                           DECODE (NVL (fc_facre_type, 'N'),
                                   'O', NVL (fc_net_less_eq_comm, 0)),
                           0))    ob_facre_noneq_comm
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_tran_no;

        CURSOR cur_facre (v_prrd_code NUMBER)
        IS
              SELECT SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_amt, 0)),
                             0))    facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prem_amt, 0)),
                             0))    facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_amount, 0)),
                             0))    facre_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_comm_rate, 0)),
                             0))    facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_comm, 0)),
                             0))    facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_comm_rate, 0)),
                             0))    facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_rate, 0)),
                             0))    facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_refund_prem, 0)),
                             0))    facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'N', NVL (fc_prev_rate, 0)),
                             0))    facre_ref_prem_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_amt, 0)),
                             0))    ob_facre_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prem_amt, 0)),
                             0))    ob_facre_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_amount, 0)),
                             0))    ob_facre_si,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_comm_rate, 0)),
                             0))    ob_facre_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_comm, 0)),
                             0))    ob_facre_ref_com,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_comm_rate, 0)),
                             0))    ob_facre_ref_com_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_rate, 0)),
                             0))    ob_facre_rate,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_refund_prem, 0)),
                             0))    ob_facre_ref_prem,
                     SUM (
                         NVL (
                             DECODE (NVL (fc_facre_type, 'N'),
                                     'O', NVL (fc_prev_rate, 0)),
                             0))    ob_facre_ref_prem_rate
                FROM gin_facre_cessions
               WHERE fc_prrd_code = v_prrd_code
            GROUP BY fc_prrd_code;

        CURSOR cur_pol_pool_trans (v_pol_batch_no NUMBER, v_tran_no NUMBER)
        IS
            SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                   SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                   SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                   SUM (NVL (prprd_pool_si, 0))                pool_si
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_tran_no
                   AND prprd_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_pl_dtls (v_prrd_code NUMBER)
        IS
              SELECT SUM (NVL (prprd_rein_pool_comm_amt, 0))     pool_comm,
                     SUM (NVL (prprd_rein_pool_amt, 0))          pool_prem,
                     SUM (NVL (prprd_rein_pool_vat_amt, 0))      pool_vat,
                     SUM (NVL (prprd_pool_si, 0))                pool_si,
                     SUM (NVL (prprd_rein_pool_rate, 0))         pool_rate
                FROM gin_pol_rein_pool_risk_details
               WHERE prprd_prrd_code = v_prrd_code
            GROUP BY prprd_prrd_code;

        CURSOR rsk (vprcode IN NUMBER)
        IS
            SELECT rskrg_code, rskrg_ipu_code
              FROM gin_policy_risk_reg
             WHERE rskrg_pr_code = vprcode;

        CURSOR cur_risk_facre_dtls (v_ipu_code NUMBER, v_trans_no NUMBER)
        IS
            SELECT *
              FROM gin_facre_cessions
             WHERE fc_ggt_tran_no = v_trans_no AND fc_ipu_code = v_ipu_code;

        CURSOR cur_risk_pool_dtls (v_ipu_code NUMBER, v_trans_no NUMBER)
        IS
            SELECT *
              FROM gin_pol_rein_pool_risk_details
             WHERE     prprd_ggt_tran_no = v_trans_no --  AND prprd_pol_batch_no = v_pol_batch_no
                   AND prprd_ipu_code = v_ipu_code;

        CURSOR cur_policy_own_ret (v_pol_batch_no NUMBER, v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_net_prem, 0))       comp_net_prem,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)                         comp_net_si,
                   SUM (NVL (ipu_reinsure_amt, 0))    comp_gross_si,
                   SUM (NVL (prrd_ri_prem, 0))        comp_gross_prem
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_tran_no = v_trans_no
                   AND ipu_pol_batch_no = v_pol_batch_no;

        CURSOR cur_risk_own_ret (v_prrd_code NUMBER, v_trans_no NUMBER)
        IS
            SELECT SUM (NVL (prrd_net_prem, 0))         comp_net_prem,
                   SUM (NVL (prrd_comp_net_rate, 0))    comp_net_rate,
                   SUM (
                         NVL (ipu_reinsure_amt, 0)
                       * NVL (prrd_comp_net_rate, 0)
                       / 100)                           comp_net_si,
                   SUM (NVL (ipu_reinsure_amt, 0))      comp_gross_si
              FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
             WHERE     ipu_code = prrd_ipu_code
                   AND prrd_code = v_prrd_code
                   AND prrd_tran_no = v_trans_no;

        v_mand_prem       NUMBER;
        v_qs_prem         NUMBER;
        v_fstsup_prem     NUMBER;
        v_secsup_prem     NUMBER;
        v_facre_prem      NUMBER;
        v_ob_facre_prem   NUMBER;
        v_pool_prem       NUMBER;
        v_net_prem        NUMBER;
        v_mand_si         NUMBER;
        v_qs_si           NUMBER;
        v_fstsup_si       NUMBER;
        v_secsup_si       NUMBER;
        v_facre_si        NUMBER;
        v_ob_facre_si     NUMBER;
        v_pool_si         NUMBER;
        v_net_si          NUMBER;
        v_gross_si        NUMBER;
        v_mand_com        NUMBER;
        v_qs_com          NUMBER;
        v_fstsup_com      NUMBER;
        v_secsup_com      NUMBER;
        v_facre_com       NUMBER;
        v_ob_facre_com    NUMBER;
        v_pool_com        NUMBER;
        v_pool_vat        NUMBER;
        v_mand_pct        NUMBER;
        v_qs_pct          NUMBER;
        v_fstsup_pct      NUMBER;
        v_secsup_pct      NUMBER;
        v_facre_pct       NUMBER;
        v_ob_facre_pct    NUMBER;
        v_pool_pct        NUMBER;
        v_net_pct         NUMBER;
        v_prrd_code       NUMBER;
    BEGIN
        FOR p IN pr
        LOOP
            v_mand_prem := 0;
            v_qs_prem := 0;
            v_fstsup_prem := 0;
            v_secsup_prem := 0;
            v_facre_prem := 0;
            v_ob_facre_prem := 0;
            v_pool_prem := 0;
            v_net_prem := 0;
            v_mand_si := 0;
            v_qs_si := 0;
            v_fstsup_si := 0;
            v_secsup_si := 0;
            v_facre_si := 0;
            v_ob_facre_si := 0;
            v_pool_si := 0;
            v_net_si := 0;
            v_gross_si := 0;
            v_mand_com := 0;
            v_qs_com := 0;
            v_fstsup_com := 0;
            v_secsup_com := 0;
            v_facre_com := 0;
            v_ob_facre_com := 0;
            v_pool_com := 0;
            v_pool_vat := 0;

            FOR cur_pol_rein_rec IN cur_pol_rein (p.pr_ggt_trans_no)
            LOOP
                v_mand_prem := cur_pol_rein_rec.mand_prem;
                v_mand_si := cur_pol_rein_rec.mand_si;
                v_mand_com := cur_pol_rein_rec.mand_com;
                v_qs_prem := cur_pol_rein_rec.qs_prem;
                v_qs_si := cur_pol_rein_rec.qs_si;
                v_qs_com := cur_pol_rein_rec.qs_com;
                v_fstsup_prem := cur_pol_rein_rec.fstsup_prem;
                v_fstsup_si := cur_pol_rein_rec.fstsup_si;
                v_fstsup_com := cur_pol_rein_rec.fstsup_com;
                v_secsup_prem := cur_pol_rein_rec.secsup_prem;
                v_secsup_si := cur_pol_rein_rec.secsup_si;
                v_secsup_com := cur_pol_rein_rec.secsup_com;
            END LOOP;                                      ---cur_pol_rein_rec

            ---facre sessions
            FOR cur_facre_rec IN cur_pol_facre (p.pr_ggt_trans_no)
            LOOP
                v_facre_prem :=
                    NVL (v_facre_prem, 0) + NVL (cur_facre_rec.facre_prem, 0);
                v_facre_si :=
                    NVL (v_facre_si, 0) + NVL (cur_facre_rec.facre_si, 0);
                v_facre_com :=
                    NVL (v_facre_com, 0) + NVL (cur_facre_rec.facre_com, 0);
                v_ob_facre_prem :=
                      NVL (v_ob_facre_prem, 0)
                    + NVL (cur_facre_rec.ob_facre_prem, 0);
                v_ob_facre_si :=
                      NVL (v_ob_facre_si, 0)
                    + NVL (cur_facre_rec.ob_facre_si, 0);
                v_ob_facre_com :=
                      NVL (v_ob_facre_com, 0)
                    + NVL (cur_facre_rec.ob_facre_com, 0);
            END LOOP;

            -- pool at policy level
            FOR cur_pol_pool
                IN cur_pol_pool_trans (p.pr_pol_batch_no, p.pr_ggt_trans_no)
            LOOP
                v_pool_prem := cur_pol_pool.pool_prem;
                v_pool_com := cur_pol_pool.pool_comm;
                v_pool_vat := cur_pol_pool.pool_vat;
                v_pool_si := cur_pol_pool.pool_si;
            END LOOP;

            FOR cur_policy_own_ret_rec
                IN cur_policy_own_ret (p.pr_pol_batch_no, p.pr_ggt_trans_no)
            LOOP
                v_net_prem := cur_policy_own_ret_rec.comp_net_prem;
                v_gross_si := cur_policy_own_ret_rec.comp_gross_si;
                v_net_si := cur_policy_own_ret_rec.comp_net_si;
            END LOOP;

            UPDATE gin_policy_register
               SET pr_mand_si = NVL (v_mand_si, 0),
                   pr_quota_si = NVL (v_qs_si, 0),
                   pr_fstsup_si = NVL (v_fstsup_si, 0),
                   pr_secsup_si = NVL (v_secsup_si, 0),
                   pr_facre_si = NVL (v_facre_si, 0),
                   pr_facre_ob_si = NVL (v_ob_facre_si, 0),
                   pr_net_si = NVL (v_net_si, 0),
                   pr_gross_si = NVL (v_gross_si, 0),
                   pr_pool_si = NVL (v_pool_si, 0),
                   pr_mand_prem = NVL (v_mand_prem, 0),
                   pr_quota_prem = NVL (v_qs_prem, 0),
                   pr_fstsup_prem = NVL (v_fstsup_prem, 0),
                   pr_secsup_prem = NVL (v_secsup_prem, 0),
                   pr_facre_prem = NVL (v_facre_prem, 0),
                   pr_facre_ob_prem = NVL (v_ob_facre_prem, 0),
                   pr_comp_net_prem = NVL (v_net_prem, 0),
                   pr_pool_prem = NVL (v_pool_prem, 0),
                   pr_mand_com = NVL (v_mand_com, 0),
                   pr_quota_com = NVL (v_qs_com, 0),
                   pr_fstsup_com = NVL (v_fstsup_com, 0),
                   pr_secsup_com = NVL (v_secsup_com, 0),
                   pr_facre_com = NVL (v_facre_com, 0),
                   pr_facre_ob_com = NVL (v_ob_facre_com, 0),
                   --PR_COMP_NET_COM=NVL(v_net_com,0),
                   pr_pool_com = NVL (v_pool_com, 0),
                   pr_pool_vat = NVL (v_pool_vat, 0)
             WHERE pr_code = p.pr_code;

            FOR r IN rsk (p.pr_code)
            LOOP
                v_mand_prem := 0;
                v_qs_prem := 0;
                v_fstsup_prem := 0;
                v_secsup_prem := 0;
                v_facre_prem := 0;
                v_ob_facre_prem := 0;
                v_pool_prem := 0;
                v_net_prem := 0;
                v_mand_si := 0;
                v_qs_si := 0;
                v_fstsup_si := 0;
                v_secsup_si := 0;
                v_facre_si := 0;
                v_ob_facre_si := 0;
                v_pool_si := 0;
                v_net_si := 0;
                v_gross_si := 0;
                v_mand_com := 0;
                v_qs_com := 0;
                v_fstsup_com := 0;
                v_secsup_com := 0;
                v_facre_com := 0;
                v_ob_facre_com := 0;
                v_pool_com := 0;
                v_pool_vat := 0;
                v_mand_pct := 0;
                v_qs_pct := 0;
                v_fstsup_pct := 0;
                v_secsup_pct := 0;
                v_facre_pct := 0;
                v_ob_facre_pct := 0;
                v_pool_pct := 0;
                v_net_pct := 0;

                BEGIN
                    SELECT prrd_code
                      INTO v_prrd_code
                      FROM gin_policy_risk_ri_dtls
                     WHERE     prrd_ipu_code = r.rskrg_ipu_code
                           AND prrd_tran_no = p.pr_ggt_trans_no;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_error ('NO DATA FOUND');
                    WHEN TOO_MANY_ROWS
                    THEN
                        raise_error ('TOO MANY ROWS');
                    WHEN OTHERS
                    THEN
                        raise_error ('ERRORS' || SQLERRM);
                END;

                FOR cur_rsk_rein_rec IN cur_rein (v_prrd_code)
                LOOP
                    v_mand_prem := cur_rsk_rein_rec.mand_prem;
                    v_mand_si := cur_rsk_rein_rec.mand_si;
                    v_mand_pct := cur_rsk_rein_rec.mand_pct;
                    v_mand_com := cur_rsk_rein_rec.mand_com;
                    v_qs_prem := cur_rsk_rein_rec.qs_prem;
                    v_qs_si := cur_rsk_rein_rec.qs_si;
                    v_qs_pct := cur_rsk_rein_rec.qs_pct;
                    v_qs_com := cur_rsk_rein_rec.qs_com;
                    v_fstsup_prem := cur_rsk_rein_rec.fstsup_prem;
                    v_fstsup_si := cur_rsk_rein_rec.fstsup_si;
                    v_fstsup_pct := cur_rsk_rein_rec.fstsup_pct;
                    v_fstsup_com := cur_rsk_rein_rec.fstsup_com;
                    v_secsup_prem := cur_rsk_rein_rec.secsup_prem;
                    v_secsup_si := cur_rsk_rein_rec.secsup_si;
                    v_secsup_pct := cur_rsk_rein_rec.secsup_pct;
                    v_secsup_com := cur_rsk_rein_rec.secsup_com;
                END LOOP;

                FOR cur_facre_rec IN cur_facre (v_prrd_code)
                LOOP
                    v_facre_com := cur_facre_rec.facre_com;
                    v_facre_prem := cur_facre_rec.facre_prem;
                    v_facre_si := cur_facre_rec.facre_si;
                    v_facre_pct := cur_facre_rec.facre_rate;
                    v_ob_facre_com := cur_facre_rec.ob_facre_com;
                    v_ob_facre_prem := cur_facre_rec.ob_facre_prem;
                    v_ob_facre_si := cur_facre_rec.ob_facre_si;
                    v_ob_facre_pct := cur_facre_rec.ob_facre_rate;
                END LOOP;

                FOR cur_risk_pool IN cur_risk_pl_dtls (v_prrd_code)
                LOOP
                    v_pool_prem := cur_risk_pool.pool_prem;
                    v_pool_com := cur_risk_pool.pool_comm;
                    v_pool_vat := cur_risk_pool.pool_vat;
                    v_pool_si := cur_risk_pool.pool_si;
                    v_pool_pct := cur_risk_pool.pool_rate;
                END LOOP;

                FOR cur_risk_own_ret_rec
                    IN cur_risk_own_ret (v_prrd_code, p.pr_ggt_trans_no)
                LOOP
                    v_net_prem := cur_risk_own_ret_rec.comp_net_prem;
                    v_net_pct := cur_risk_own_ret_rec.comp_net_rate;
                    v_gross_si := cur_risk_own_ret_rec.comp_gross_si;
                    v_net_si := cur_risk_own_ret_rec.comp_net_si;
                END LOOP;

                UPDATE gin_policy_risk_reg
                   SET rskrg_mand_si = NVL (v_mand_si, 0),
                       rskrg_quota_si = NVL (v_qs_si, 0),
                       rskrg_fstsup_si = NVL (v_fstsup_si, 0),
                       rskrg_secsup_si = NVL (v_secsup_si, 0),
                       rskrg_facre_si = NVL (v_facre_si, 0),
                       rskrg_facre_ob_si = NVL (v_ob_facre_si, 0),
                       rskrg_net_si = NVL (v_net_si, 0),
                       rskrg_gross_si = NVL (v_gross_si, 0),
                       rskrg_pool_si = NVL (v_pool_si, 0),
                       rskrg_mand_prem = NVL (v_mand_prem, 0),
                       rskrg_quota_prem = NVL (v_qs_prem, 0),
                       rskrg_fstsup_prem = NVL (v_fstsup_prem, 0),
                       rskrg_secsup_prem = NVL (v_secsup_prem, 0),
                       rskrg_facre_prem = NVL (v_facre_prem, 0),
                       rskrg_facre_ob_prem = NVL (v_ob_facre_prem, 0),
                       rskrg_pool_prem = NVL (v_pool_prem, 0),
                       rskrg_comp_net_ret = NVL (v_net_prem, 0),
                       rskrg_mand_com = NVL (v_mand_com, 0),
                       rskrg_quota_com = NVL (v_qs_com, 0),
                       rskrg_fstsup_com = NVL (v_fstsup_com, 0),
                       rskrg_secsup_com = NVL (v_secsup_com, 0),
                       rskrg_facre_com = NVL (v_facre_com, 0),
                       rskrg_facre_ob_com = NVL (v_ob_facre_com, 0),
                       rskrg_pool_com = NVL (v_pool_com, 0),
                       rskrg_mand_rate = NVL (v_mand_pct, 0),
                       rskrg_quota_rate = NVL (v_qs_pct, 0),
                       rskrg_fstsup_rate = NVL (v_fstsup_pct, 0),
                       rskrg_secsup_rate = NVL (v_secsup_pct, 0),
                       rskrg_facre_rate = NVL (v_facre_pct, 0),
                       rskrg_facre_ob_rate = NVL (v_ob_facre_pct, 0),
                       rskrg_com_ret_rate = NVL (v_net_pct, 0),
                       rskrg_pool_rate = NVL (v_pool_pct, 0)
                 WHERE     rskrg_pr_code = p.pr_code
                       AND rskrg_code = r.rskrg_code;

                DELETE gin_policy_treaty_part_reg
                 WHERE     trtpg_pr_code = p.pr_code
                       AND trtpg_rskrg_code = r.rskrg_code;

                DELETE gin_policy_risk_treaty_reg
                 WHERE     trtrg_pr_code = p.pr_code
                       AND trtrg_rskrg_code = r.rskrg_code;

                FOR rdtls
                    IN cur_rsk_rein_dtls (r.rskrg_ipu_code,
                                          p.pr_ggt_trans_no)
                LOOP
                    INSERT INTO gin_policy_risk_treaty_reg (
                                    trtrg_code,
                                    trtrg_ptotr_code,
                                    trtrg_pr_code,
                                    trtrg_rskrg_code,
                                    trtrg_rei_code,
                                    trtrg_trt_code,
                                    trtrg_ta_code,
                                    trtrg_as_code,
                                    trtrg_risk_cur_code,
                                    trtrg_trt_cur_code,
                                    trtrg_exch_rate,
                                    trtrg_trt_si_pcur,
                                    trtrg_trt_si_tcur,
                                    trtrg_trt_prem_pcur,
                                    trtrg_trt_prem_tcur,
                                    trtrg_trt_share,
                                    trtrg_trt_sht_desc,
                                    trtrg_rate,
                                    trtrg_trt_comm_pcur,
                                    trtrg_trt_comm_tcur,
                                    trtrg_cession_pct,
                                    trtrg_uwyr,
                                    trtrg_ipu_code,
                                    trtrg_pol_batch_no,
                                    trtrg_risk_cur_symbol,
                                    trtrg_trt_cur_symbol,
                                    trtrg_prem_tax_pcur,
                                    trtrg_prem_tax_tcur,
                                    trtrg_trs_code,
                                    trtrg_trs_sht_desc,
                                    trtrg_rate_type,
                                    trtrg_remarks,
                                    trtrg_ggt_tran_no,
                                    trtrg_tran_type,
                                    trtrg_rprem_tax_pcur,
                                    trtrg_prrd_code,
                                    trtrg_comm_rate,
                                    trtrg_auth_dt,
                                    trtrg_rprem_tax_tcur,
                                    trtrg_earthqke_prem,
                                    trtrg_earthqke_comm_rate,
                                    trtrg_earthqke_comm,
                                    trtrg_net_less_eq_comm,
                                    trtrg_net_less_eq_prem,
                                    trtrg_ctl_code,
                                    trtrg_co_rprem_tax_pcur)
                         VALUES (trtrg_code_seq.NEXTVAL,
                                 rdtls.ptotr_code,
                                 p.pr_code,
                                 r.rskrg_code,
                                 rdtls.ptotr_rei_code,
                                 rdtls.ptotr_trt_code,
                                 rdtls.ptotr_ta_code,
                                 rdtls.ptotr_as_code,
                                 rdtls.ptotr_risk_cur_code,
                                 rdtls.ptotr_trt_cur_code,
                                 rdtls.ptotr_exch_rate,
                                 rdtls.ptotr_trt_si_pcur,
                                 rdtls.ptotr_trt_si_tcur,
                                 rdtls.ptotr_trt_prem_pcur,
                                 rdtls.ptotr_trt_prem_tcur,
                                 rdtls.ptotr_trt_share,
                                 rdtls.ptotr_trt_sht_desc,
                                 rdtls.ptotr_rate,
                                 rdtls.ptotr_trt_comm_pcur,
                                 rdtls.ptotr_trt_comm_tcur,
                                 rdtls.ptotr_cession_pct,
                                 rdtls.ptotr_uwyr,
                                 rdtls.ptotr_ipu_code,
                                 rdtls.ptotr_pol_batch_no,
                                 rdtls.ptotr_risk_cur_symbol,
                                 rdtls.ptotr_trt_cur_symbol,
                                 rdtls.ptotr_prem_tax_pcur,
                                 rdtls.ptotr_prem_tax_tcur,
                                 rdtls.ptotr_trs_code,
                                 rdtls.ptotr_trs_sht_desc,
                                 rdtls.ptotr_rate_type,
                                 rdtls.ptotr_remarks,
                                 rdtls.ptotr_ggt_tran_no,
                                 rdtls.ptotr_tran_type,
                                 rdtls.ptotr_rprem_tax_pcur,
                                 rdtls.ptotr_prrd_code,
                                 rdtls.ptotr_comm_rate,
                                 rdtls.ptotr_auth_dt,
                                 rdtls.ptotr_rprem_tax_tcur,
                                 rdtls.ptotr_earthqke_prem,
                                 rdtls.ptotr_earthqke_comm_rate,
                                 rdtls.ptotr_earthqke_comm,
                                 rdtls.ptotr_net_less_eq_comm,
                                 rdtls.ptotr_net_less_eq_prem,
                                 rdtls.ptotr_ctl_code,
                                 rdtls.ptotr_trt_prem_tax_pcur);

                    FOR pdtls IN cur_rsk_rein_part_dtls (rdtls.ptotr_code)
                    LOOP
                        INSERT INTO gin_policy_treaty_part_reg (
                                        trtpg_code,
                                        trtpg_ptotr_code,
                                        trtpg_part_code,
                                        trtpg_pr_code,
                                        trtpg_rskrg_code,
                                        trtpg_trtrg_code,
                                        trtpg_rei_code,
                                        trtpg_cede_rate,
                                        trtpg_si_amt_pcur,
                                        trtpg_si_amt_tcur,
                                        trtpg_comm_amt_pcur,
                                        trtpg_comm_amt_tcur,
                                        trtpg_prem_amt_pcur,
                                        trtpg_prem_amt_tcur,
                                        trtpg_trt_code,
                                        trtpg_trt_sht_desc,
                                        trtpg_agnt_agent_code,
                                        trtpg_agnt_sht_desc,
                                        trtpg_uwyr,
                                        trtpg_pol_batch_no,
                                        trtpg_pol_policy_no,
                                        trtpg_pol_ren_endos_no,
                                        trtpg_ipu_code,
                                        trtpg_rprem_tax_pcur,
                                        trtpg_rprem_tax_tcur,
                                        trtpg_prem_tax_pcur,
                                        trtpg_prem_tax_tcur,
                                        trtpg_ta_code,
                                        trtpg_as_code,
                                        trtpg_fiscal_year,
                                        trtpg_trs_code,
                                        trtpg_trs_sht_desc,
                                        trtpg_trpa_code,
                                        trtpg_mgt_fee_tcur,
                                        trtpg_mgt_fee_pcur,
                                        trtpg_co_rprem_tax_pcur)
                             VALUES (trtpg_code_seq.NEXTVAL,
                                     rdtls.ptotr_code,
                                     pdtls.part_code,
                                     p.pr_code,
                                     r.rskrg_code,
                                     trtrg_code_seq.CURRVAL,
                                     rdtls.ptotr_rei_code,
                                     pdtls.part_cede_rate,
                                     pdtls.part_si_amt_pcur,
                                     pdtls.part_si_amt_tcur,
                                     pdtls.part_comm_amt_pcur,
                                     pdtls.part_comm_amt_tcur,
                                     pdtls.part_prem_amt_pcur,
                                     pdtls.part_prem_amt_tcur,
                                     pdtls.part_trt_code,
                                     pdtls.part_trt_sht_desc,
                                     pdtls.part_agnt_agent_code,
                                     pdtls.part_agnt_sht_desc,
                                     pdtls.part_uwyr,
                                     pdtls.part_pol_batch_no,
                                     pdtls.part_pol_policy_no,
                                     pdtls.part_pol_ren_endos_no,
                                     pdtls.part_ipu_code,
                                     pdtls.part_rprem_tax_pcur,
                                     pdtls.part_rprem_tax_tcur,
                                     pdtls.part_prem_tax_pcur,
                                     pdtls.part_prem_tax_tcur,
                                     pdtls.part_ta_code,
                                     pdtls.part_as_code,
                                     pdtls.part_fiscal_year,
                                     pdtls.part_trs_code,
                                     pdtls.part_trs_sht_desc,
                                     pdtls.part_trpa_code,
                                     pdtls.part_mgt_fee_tcur,
                                     pdtls.part_mgt_fee_pcur,
                                     pdtls.part_trt_prem_tax_pcur);
                    END LOOP;
                END LOOP;

                DELETE gin_policy_risk_facre_reg
                 WHERE     facrg_pr_code = p.pr_code
                       AND facrg_rskrg_code = r.rskrg_code;

                FOR fdtls
                    IN cur_risk_facre_dtls (r.rskrg_ipu_code,
                                            p.pr_ggt_trans_no)
                LOOP
                    INSERT INTO gin_policy_risk_facre_reg (
                                    facrg_code,
                                    facrg_fc_code,
                                    facrg_pr_code,
                                    facrg_rskrg_code,
                                    facrg_agnt_agent_code,
                                    facrg_amount,
                                    facrg_wef,
                                    facrg_ipu_code,
                                    facrg_agent_sht_desc,
                                    facrg_rate,
                                    facrg_comm_rate,
                                    facrg_comm_amt,
                                    facrg_don_by,
                                    facrg_dc_no,
                                    facrg_prem_amt,
                                    facrg_pol_batch_no,
                                    facrg_uwyr,
                                    facrg_ggt_tran_no,
                                    facrg_tran_type,
                                    facrg_scl_code,
                                    facrg_amt_or_rate,
                                    facrg_prrd_code,
                                    facrg_auth_dt,
                                    facrg_wet,
                                    facrg_earthqke_prem,
                                    facrg_earthqke_comm_rate,
                                    facrg_earthqke_comm,
                                    facrg_net_less_eq_comm,
                                    facrg_net_less_eq_prem,
                                    facrg_facre_type,
                                    facrg_prem_diff_amt,
                                    facrg_remark,
                                    facrg_vat_amt,
                                    facrg_vat_rate,
                                    facrg_mngmnt_amt,
                                    facrg_rein_tax_amt,
                                    facrg_mngmnt_type,
                                    facrg_mngmnt_value,
                                    facrg_rein_tax_type,
                                    facrg_rein_tax_value)
                         VALUES (facrg_code_seq.NEXTVAL,
                                 fdtls.fc_code,
                                 p.pr_code,
                                 r.rskrg_code,
                                 fdtls.fc_agnt_agent_code,
                                 fdtls.fc_amount,
                                 fdtls.fc_wef,
                                 fdtls.fc_ipu_code,
                                 fdtls.fc_agent_sht_desc,
                                 fdtls.fc_rate,
                                 fdtls.fc_comm_rate,
                                 fdtls.fc_comm_amt,
                                 fdtls.fc_don_by,
                                 fdtls.fc_dc_no,
                                 fdtls.fc_prem_amt,
                                 fdtls.fc_pol_batch_no,
                                 fdtls.fc_uwyr,
                                 fdtls.fc_ggt_tran_no,
                                 fdtls.fc_tran_type,
                                 fdtls.fc_scl_code,
                                 fdtls.fc_amt_or_rate,
                                 fdtls.fc_prrd_code,
                                 fdtls.fc_auth_dt,
                                 fdtls.fc_wet,
                                 fdtls.fc_earthqke_prem,
                                 fdtls.fc_earthqke_comm_rate,
                                 fdtls.fc_earthqke_comm,
                                 fdtls.fc_net_less_eq_comm,
                                 fdtls.fc_net_less_eq_prem,
                                 fdtls.fc_facre_type,
                                 fdtls.fc_prem_diff_amt,
                                 fdtls.fc_remark,
                                 fdtls.fc_vat_amt,
                                 fdtls.fc_vat_rate,
                                 fdtls.fc_mngmnt_amt,
                                 fdtls.fc_rein_tax_amt,
                                 fdtls.fc_mngmnt_type,
                                 fdtls.fc_mngmnt_value,
                                 fdtls.fc_rein_tax_type,
                                 fdtls.fc_rein_tax_value);
                END LOOP;

                DELETE gin_policy_risk_pool_reg
                 WHERE     poorg_pr_code = p.pr_code
                       AND poorg_rskrg_code = r.rskrg_code;

                FOR pdtls
                    IN cur_risk_pool_dtls (r.rskrg_ipu_code,
                                           p.pr_ggt_trans_no)
                LOOP
                    INSERT INTO gin_policy_risk_pool_reg (
                                    poorg_code,
                                    poorg_prprd_code,
                                    poorg_pr_code,
                                    poorg_rskrg_code,
                                    poorg_scrpr_code,
                                    poorg_rein_pool_rate,
                                    poorg_ipu_code,
                                    poorg_scl_code,
                                    poorg_covt_code,
                                    poorg_pol_batch_no,
                                    poorg_rein_pool_amt,
                                    poorg_rein_pool_comm_rate,
                                    poorg_rein_pool_vat_rate,
                                    poorg_rein_pool_comm_amt,
                                    poorg_rein_pool_vat_amt,
                                    poorg_ggt_tran_no,
                                    poorg_uwyr,
                                    poorg_pol_ren_endos_no,
                                    poorg_date,
                                    poorg_risk_trt_own_ret_amt,
                                    poorg_pta_code,
                                    poorg_os_claim_amt,
                                    poorg_paid_claim_amt,
                                    poorg_pool_net_amt,
                                    poorg_prrd_code,
                                    poorg_pool_si)
                         VALUES (poorg_code_seq.NEXTVAL,
                                 pdtls.prprd_code,
                                 p.pr_code,
                                 r.rskrg_code,
                                 pdtls.prprd_scrpr_code,
                                 pdtls.prprd_rein_pool_rate,
                                 pdtls.prprd_ipu_code,
                                 pdtls.prprd_scl_code,
                                 pdtls.prprd_covt_code,
                                 pdtls.prprd_pol_batch_no,
                                 pdtls.prprd_rein_pool_amt,
                                 pdtls.prprd_rein_pool_comm_rate,
                                 pdtls.prprd_rein_pool_vat_rate,
                                 pdtls.prprd_rein_pool_comm_amt,
                                 pdtls.prprd_rein_pool_vat_amt,
                                 pdtls.prprd_ggt_tran_no,
                                 pdtls.prprd_uwyr,
                                 pdtls.prprd_pol_ren_endos_no,
                                 pdtls.prprd_date,
                                 pdtls.prprd_risk_trt_own_ret_amt,
                                 pdtls.prprd_pta_code,
                                 pdtls.prprd_os_claim_amt,
                                 pdtls.prprd_paid_claim_amt,
                                 pdtls.prprd_pool_net_amt,
                                 pdtls.prprd_prrd_code,
                                 pdtls.prprd_pool_si);
                END LOOP;
            END LOOP;

            COMMIT;
        END LOOP;
    END;

    FUNCTION checkpreviousfacre (v_ipu_code IN NUMBER)
        RETURN VARCHAR2
    IS
        v_cnt             NUMBER;
        v_available       VARCHAR2 (2);
        v_prev_ipu_code   NUMBER;
    BEGIN
        IF v_ipu_code IS NOT NULL
        THEN
            SELECT ipu_prev_ipu_code
              INTO v_prev_ipu_code
              FROM gin_insured_property_unds
             WHERE ipu_code = v_ipu_code;
        END IF;

        SELECT COUNT ('x')
          INTO v_cnt
          FROM gin_facre_cessions, gin_policy_risk_ri_dtls
         WHERE     fc_prrd_code = prrd_code
               AND prrd_ipu_code = v_prev_ipu_code
               AND v_prev_ipu_code != v_ipu_code
               AND prrd_current = 'Y';

        IF v_cnt > 0
        THEN
            v_available := 'Y';
        ELSE
            v_available := 'N';
        END IF;

        RETURN v_available;
    END;

    PROCEDURE pop_xol_risk (v_batch_no    IN NUMBER,
                            v_ipu_code    IN NUMBER,
                            v_tran_no     IN NUMBER,
                            v_prrd_code   IN NUMBER)
    IS
        v_zero_devide          EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        v_reinsure_amt         NUMBER := 0;
        v_exhange_rate         NUMBER := 1;
        v_prxrd_code           NUMBER;
        v_load_status          VARCHAR2 (2);
        v_rnd                  NUMBER := 0;
        v_bcur_rnd             NUMBER := 0;
        v_bcur_code            NUMBER;
        v_bcur_symbol          VARCHAR2 (15);
        v_trt_amt              NUMBER;
        v_pool_ret_amt         NUMBER;
        v_pool_amt             NUMBER;
        v_pool_com_amt         NUMBER;
        v_pool_vat_amt         NUMBER;
        v_pool_si              NUMBER;
        v_gross_pool_si        NUMBER;
        v_pool_si_rate         NUMBER;

        v_part_prem_pcur       NUMBER;
        v_part_comm_pcur       NUMBER;
        v_part_rpremtax_pcur   NUMBER;
        v_part_prem_tcur       NUMBER;
        v_part_comm_tcur       NUMBER;
        v_part_premtax_pcur    NUMBER;
        v_trt_rpremtax_pcur    NUMBER;
        v_trt_premtax_pcur     NUMBER;


        v_part_code            NUMBER;

        v_cnt                  NUMBER;

        CURSOR cur_pol IS
            SELECT pol_policy_status,
                   pol_binder_policy,
                   pol_cur_code,
                   pol_cur_symbol,
                   pol_prev_batch_no,
                   pol_loaded,
                   pol_cur_rate
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_all_risks (vpolloaded IN VARCHAR2)
        IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     ipu_comp_retention,
                     ipu_pol_est_max_loss,
                     ipu_avail_fulc_bal,
                     ipu_endos_diff_amt,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_reinsure_amt,
                     ipu_facre_amount,
                     ipu_prev_ipu_code,
                     ipu_relr_code,
                     ipu_eff_wef,
                     ipu_id,
                     ipu_uw_yr,
                     ipu_inception_uwyr,
                     ipu_rc_code,
                     ipu_bind_code,
                     ipu_max_exposure,
                     ipu_earthqke_prem_diff,
                     ipu_covt_code
                FROM gin_insured_property_unds
               WHERE     ipu_pol_batch_no = v_batch_no
                     AND ipu_code = v_ipu_code
                     AND DECODE (NVL (vpolloaded, 'N'), 'N', ipu_reinsured, 1) =
                         1
            ORDER BY 1;

        CURSOR cur_treaties (v_scl_code IN NUMBER, v_yr IN NUMBER)
        IS
              SELECT *
                FROM gin_xol_treaty_setups,
                     gin_xol_treaties,
                     gin_xol_arrangement_setups,
                     gin_xol_classes
               WHERE     xol_code = xols_xol_code
                     AND xas_uwyr = v_yr
                     AND xol_type IN ('W', 'C')
                     AND xolc_xas_code = xas_code
                     AND xolc_xta_code = xas_xta_code
                     AND xolc_scl_code = v_scl_code
                     AND xas_code = xols_xas_code
                     AND xols_code = xolc_xols_code
            ORDER BY xols_layer ASC;
    BEGIN
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);

        FOR cur_pol_rec IN cur_pol
        LOOP
            v_exhange_rate :=
                get_currexch_rate (cur_pol_rec.pol_cur_code,
                                   v_rnd,
                                   v_bcur_rnd);

            BEGIN
                SELECT NVL (pol_loaded, 'N')
                  INTO v_load_status
                  FROM gin_policies
                 WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_load_status := NVL (cur_pol_rec.pol_loaded, 'N');
            END;

            FOR cur_all_risks_rec IN cur_all_risks (cur_pol_rec.pol_loaded)
            LOOP
                IF (   SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)) IN
                           (1, 0, -1)
                    OR NVL (v_load_status, 'N') = 'Y')
                THEN
                    FOR i
                        IN cur_treaties (cur_all_risks_rec.ipu_sec_scl_code,
                                         cur_all_risks_rec.ipu_uw_yr)
                    LOOP
                        BEGIN
                            v_prxrd_code := NULL;

                            SELECT PRXRD_CODE
                              INTO v_prxrd_code
                              FROM gin_pol_rein_xol_risk_details
                             WHERE     PRXRD_ipu_code =
                                       cur_all_risks_rec.ipu_code
                                   AND PRXRD_ggt_tran_no = v_tran_no
                                   AND PRXRD_XOLS_CODE = i.XOLS_CODE;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_prxrd_code := NULL;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to retrieve RI details, ...');
                        END;

                        v_trt_amt := NULL;
                        v_gross_pool_si :=
                            ROUND (
                                  NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                       cur_all_risks_rec.ipu_max_exposure)
                                * NVL (i.XOLS_RATE, 0)
                                / 100,
                                v_rnd);
                        v_reinsure_amt :=
                            ROUND (
                                NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                     cur_all_risks_rec.ipu_max_exposure),
                                v_rnd);


                        IF NVL (v_reinsure_amt, 0) = 0
                        THEN
                            v_pool_si_rate := 1;
                        ELSE
                            v_pool_si_rate := (v_pool_si / v_reinsure_amt);
                        END IF;

                        v_pool_amt :=
                              v_pool_si_rate
                            * ROUND (
                                    NVL (
                                        cur_all_risks_rec.ipu_endos_diff_amt,
                                        0)
                                  * NVL (i.XOLS_RATE, 0)
                                  / 100,
                                  v_rnd);
                        v_pool_ret_amt :=
                              NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)
                            - NVL (v_pool_amt, 0);
                        v_pool_com_amt :=
                            ROUND (
                                  NVL (v_pool_amt, 0)
                                * NVL (i.XOLS_RATE, 0)
                                / 100,
                                v_rnd);
                        v_pool_vat_amt :=
                            ROUND (
                                  NVL (v_pool_com_amt, 0)
                                * NVL (i.XOLS_RATE, 0)
                                / 100,
                                v_rnd);

                        IF v_prxrd_code IS NULL
                        THEN
                            BEGIN
                                SELECT TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY')
                                           || gin_prxrd_code_seq.NEXTVAL)
                                  INTO v_prxrd_code
                                  FROM DUAL;

                                INSERT INTO GIN_POL_REIN_XOL_RISK_DETAILS (
                                                PRXRD_code,
                                                PRXRD_risk_prem_amt,
                                                PRXRD_risk_own_ret_amt,
                                                PRXRD_cur_code,
                                                PRXRD_exch_rate,
                                                PRPRD_XAS_CODE,
                                                PRXRD_rein_xol_rate,
                                                PRXRD_ipu_code,
                                                PRXRD_scl_code,
                                                PRXRD_pol_batch_no,
                                                PRXRD_rein_xol_amt,
                                                PRXRD_rein_xol_comm_rate,
                                                PRXRD_rein_xol_vat_rate,
                                                PRXRD_rein_xol_comm_amt,
                                                PRXRD_rein_xol_vat_amt,
                                                PRXRD_prev_PRXRD_code,
                                                PRXRD_ggt_tran_no,
                                                PRXRD_property_id,
                                                PRXRD_uwyr,
                                                PRXRD_pol_ren_endos_no,
                                                PRXRD_date,
                                                PRXRD_risk_trt_own_ret_amt,
                                                PRXRD_XOLS_CODE,
                                                PRXRD_prrd_code,
                                                PRXRD_XOL_si)
                                         VALUES (
                                             v_prxrd_code,
                                             cur_all_risks_rec.ipu_endos_diff_amt,
                                             NVL (v_pool_ret_amt, 0),
                                             cur_pol_rec.pol_cur_code,
                                             v_exhange_rate,
                                             i.XAS_CODE,
                                             NVL (i.XOLS_RATE, 0),
                                             cur_all_risks_rec.ipu_code,
                                             cur_all_risks_rec.ipu_sec_scl_code,
                                             cur_all_risks_rec.ipu_pol_batch_no,
                                             NVL (v_pool_amt, 0),
                                             i.XOLS_RATE,
                                             i.XOLS_RATE,
                                             NVL (v_pool_com_amt, 0),
                                             NVL (v_pool_vat_amt, 0),
                                             v_PRXRD_code,
                                             v_tran_no,
                                             cur_all_risks_rec.ipu_property_id,
                                             cur_all_risks_rec.ipu_uw_yr,
                                             cur_all_risks_rec.ipu_pol_ren_endos_no,
                                             SYSDATE,
                                             NVL (v_trt_amt, 0),
                                             I.XOLS_CODE,
                                             v_prrd_code,
                                             v_pool_si);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to create risk RI details, ...');
                            END;
                        ELSE
                            BEGIN
                                UPDATE GIN_POL_REIN_XOL_RISK_DETAILS
                                   SET PRXRD_risk_prem_amt =
                                           cur_all_risks_rec.ipu_endos_diff_amt,
                                       PRXRD_risk_own_ret_amt =
                                           NVL (v_pool_ret_amt, 0),
                                       PRXRD_rein_xol_amt =
                                           NVL (v_pool_amt, 0),
                                       PRXRD_rein_xol_comm_rate =
                                           NVL (i.XOLS_RATE, 0),
                                       PRXRD_rein_xol_rate =
                                           NVL (i.XOLS_RATE, 0),
                                       PRXRD_rein_xol_vat_rate =
                                           NVL (i.XOLS_RATE, 0),
                                       PRXRD_rein_xol_comm_amt =
                                           NVL (v_pool_com_amt, 0),
                                       PRXRD_rein_xol_vat_amt =
                                           NVL (v_pool_vat_amt, 0),
                                       PRXRD_risk_trt_own_ret_amt =
                                           NVL (v_trt_amt, 0),
                                       PRXRD_prrd_code = v_prrd_code,
                                       PRXRD_XOL_si = NVL (v_pool_si, 0)
                                 WHERE     PRXRD_ipu_code =
                                           cur_all_risks_rec.ipu_code
                                       AND PRXRD_code = v_PRXRD_code
                                       AND PRXRD_ggt_tran_no = v_tran_no;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Unable to update the risk RI details, ...');
                            END;
                        END IF;
                    END LOOP;
                END IF;
            END LOOP;
        END LOOP;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL..1..');
    END;

    PROCEDURE reinsure_xol_risks (v_batch_no        IN NUMBER,
                                  v_tran_no         IN NUMBER,
                                  v_ri_edit_trans   IN BOOLEAN DEFAULT FALSE)
    IS
        v_cnt                    NUMBER := 0;
        v_trt_uwyr               NUMBER := NULL;
        cnt                      NUMBER := 1;
        v_retention_amt          NUMBER := 0;
        v_facre_rate             NUMBER := 0;
        v_errmsg                 VARCHAR2 (200);
        v_zero_devide            EXCEPTION;
        PRAGMA EXCEPTION_INIT (v_zero_devide, -01476);
        al_id                    NUMBER;
        v_group_si               NUMBER := 0;
        v_grp_flag               BOOLEAN := FALSE;
        v_grp_pct                NUMBER := 0;
        v_grp_tot_ret            NUMBER := 0;
        v_reinsure_amt           NUMBER := 0;
        v_exhange_rate           NUMBER := 1;
        --v_PRXRD_code             number;
        v_facre_amt              NUMBER := 0;
        v_facre_excess           NUMBER := 0;
        v_arrngmt_defined        NUMBER := 0;
        v_msg                    VARCHAR2 (200);
        v_arrangement            NUMBER;
        v_arrangement_type       VARCHAR2 (10);
        v_old_grs_ret_rate       NUMBER := 0;
        v_net_ret_rate           NUMBER := 0;
        v_retention_limit        NUMBER := 0;
        v_no_ri_si               VARCHAR2 (2);
        v_dummy                  NUMBER := 0;
        v_retention_type         VARCHAR2 (1) := NULL;
        v_bind_max_exp           NUMBER := 0;
        v_load_status            VARCHAR2 (2);
        v_reinsure_wot_ri_prog   VARCHAR2 (2);
        v_unadjusted_ri_tran     NUMBER := 0;
        v_as_uwyr                NUMBER;
        v_dc_pol_loaded          VARCHAR2 (3);
        v_eq_prem                NUMBER := 0;
        v_rnd                    NUMBER := 0;
        v_bcur_rnd               NUMBER := 0;
        v_bcur_code              NUMBER;
        v_bcur_symbol            VARCHAR2 (15);
        v_trt_amt                NUMBER;
        v_pool_ret_amt           NUMBER;
        v_pool_amt               NUMBER;
        v_pool_com_amt           NUMBER;
        v_pool_vat_amt           NUMBER;
        --v_prrd_code              number;
        --v_cede_pool              varchar2 (1);
        v_pool_si                NUMBER;
        v_pool_rate              NUMBER;
        v_PRXRD_refund_prem      NUMBER;
        v_PRXRD_refund_comm      NUMBER;
        v_PRXRD_prev_prem_amt    NUMBER;
        v_PRXRD_prev_comm_rate   NUMBER;
        v_PRXRD_prev_rate        NUMBER;
        v_gross_pool_si          NUMBER;
        v_max_si                 NUMBER;
        v_pool_si_rate           NUMBER;

        v_part_prem_pcur         NUMBER;
        v_part_prem_tcur         NUMBER;
        v_part_comm_pcur         NUMBER;
        v_part_comm_tcur         NUMBER;
        v_part_rpremtax_pcur     NUMBER;
        v_part_premtax_pcur      NUMBER;
        v_trt_rpremtax_pcur      NUMBER;
        v_trt_premtax_pcur       NUMBER;
        v_part_code              NUMBER;
        v_net_amt                NUMBER;

        CURSOR cur_pol IS
            SELECT pol_policy_status,
                   pol_binder_policy,
                   pol_cur_code,
                   pol_cur_symbol,
                   pol_prev_batch_no,
                   pol_loaded
              FROM gin_policies
             WHERE pol_batch_no = v_batch_no;

        CURSOR cur_all_risks (vpolloaded IN VARCHAR2)
        IS
              SELECT ipu_code,
                     ipu_property_id,
                     ipu_item_desc,
                     ipu_qty,
                     ipu_value,
                     ipu_wef,
                     ipu_wet,
                     ipu_pol_batch_no,
                     ipu_pol_policy_no,
                     ipu_pol_ren_endos_no,
                     ipu_comp_retention,
                     ipu_pol_est_max_loss,
                     ipu_avail_fulc_bal,
                     ipu_endos_diff_amt,
                     ipu_sec_scl_code,
                     ipu_related_ipu_code,
                     ipu_bp,
                     ipu_gp,
                     ipu_fp,
                     ipu_fap,
                     ipu_nett_premium,
                     ipu_eml_si,
                     ipu_cummulative_reins,
                     ipu_sec_sect_code,
                     ipu_reinsure_amt,
                     ipu_facre_amount,
                     ipu_prev_ipu_code,
                     ipu_relr_code,
                     ipu_eff_wef,
                     ipu_id,
                     ipu_uw_yr,
                     ipu_inception_uwyr,
                     ipu_rc_code,
                     ipu_bind_code,
                     ipu_max_exposure,
                     ipu_earthqke_prem_diff,
                     ipu_covt_code,
                     prrd_comp_net_rate,
                     prrd_ri_prem,
                     prrd_grp_comp_net_ret,
                     prrd_prev_prrd_code,
                     prrd_cede_pool,
                     prrd_code,
                     prrd_comp_retention,
                     prrd_net_prem
                FROM gin_insured_property_unds, gin_policy_risk_ri_dtls
               WHERE     ipu_pol_batch_no = v_batch_no
                     AND prrd_ipu_code = ipu_code
                     AND prrd_tran_no = v_tran_no
            ORDER BY 1;

        CURSOR cur_treaties (vprrdcode IN NUMBER)
        IS
            SELECT *
              FROM GIN_POL_REIN_XOL_RISK_DETAILS
             WHERE PRXRD_prrd_code = vprrdcode;

        CURSOR cur_participant_rate (v_xols_code IN NUMBER)
        IS
            SELECT XOLP_AGNT_AGENT_CODE,
                   XOLP_AGNT_SHT_DESC,
                   XOLP_XOLS_CODE,
                   XOLP_RATE,
                   XOLP_TAXABLE,
                   XOLP_XAS_CODE,
                   XOLP_REIN_TAXABLE,
                   XOLP_REIN_TAXRATE
              FROM GIN_XOL_PARTICIPANTS
             WHERE XOLP_XOLS_CODE = v_xols_code;
    BEGIN
        --v_exhange_rate := get_exchange_rate(v_cur_code,v_base_cur_code);
        v_bcur_code := tqc_interfaces_pkg.orgcurrency (37, v_bcur_symbol);
        DBMS_OUTPUT.put_line (1);

        FOR cur_pol_rec IN cur_pol
        LOOP
            DBMS_OUTPUT.put_line (2);
            v_exhange_rate :=
                get_currexch_rate (cur_pol_rec.pol_cur_code,
                                   v_rnd,
                                   v_bcur_rnd);

            BEGIN
                SELECT NVL (pol_loaded, 'N')
                  INTO v_load_status
                  FROM gin_policies
                 WHERE pol_batch_no = cur_pol_rec.pol_prev_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_load_status := NVL (cur_pol_rec.pol_loaded, 'N');
            END;

            FOR cur_all_risks_rec IN cur_all_risks (cur_pol_rec.pol_loaded)
            LOOP
                IF (   SIGN (NVL (cur_all_risks_rec.ipu_endos_diff_amt, 0)) IN
                           (1, 0, -1)
                    OR NVL (v_load_status, 'N') = 'Y')
                THEN
                    BEGIN
                        v_no_ri_si := NULL;

                        SELECT NVL (scl_no_ri_si, 'N'),
                               NVL (scl_reinsure_wot_ri_prog, 'N')
                          INTO v_no_ri_si, v_reinsure_wot_ri_prog
                          FROM gin_sub_classes
                         WHERE scl_code = cur_all_risks_rec.ipu_sec_scl_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Unable to retrieve RI SI status for the sub class '
                                || cur_all_risks_rec.ipu_sec_scl_code);
                    END;

                    IF     NVL (v_no_ri_si, 'N') = 'N'
                       AND NVL (cur_all_risks_rec.ipu_reinsure_amt, 0) = 0
                    THEN
                        raise_error (
                               'No reinsure amount specified, cannot reinsure this risk '
                            || cur_all_risks_rec.ipu_item_desc);
                    END IF;

                    FOR r IN cur_treaties (cur_all_risks_rec.prrd_code)
                    LOOP
                        v_trt_amt :=
                            ROUND (
                                  NVL (cur_all_risks_rec.prrd_comp_net_rate,
                                       0)
                                * NVL (cur_all_risks_rec.prrd_ri_prem, 0)
                                / 100,
                                v_rnd);
                        v_net_amt := cur_all_risks_rec.prrd_comp_retention;

                        IF NVL (cur_all_risks_rec.prrd_cede_pool, 'Y') = 'Y'
                        THEN
                            v_pool_rate := NVL (r.PRXRD_rein_XOL_rate, 0);

                            v_gross_pool_si :=
                                ROUND ( /*NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                             cur_all_risks_rec.ipu_max_exposure
                                            )*/
                                    NVL (v_net_amt, 0) * v_pool_rate / 100,
                                    v_rnd);
                            v_reinsure_amt :=
                                ROUND (NVL (v_net_amt, 0) /*NVL (cur_all_risks_rec.ipu_reinsure_amt,
                                               cur_all_risks_rec.ipu_max_exposure
                                              )*/
                                                         , v_rnd);

                            --raise_error(v_gross_pool_si||';'||v_pool_rate);
                            IF v_gross_pool_si >= v_max_si
                            THEN
                                v_pool_si := v_max_si;

                                IF NVL (v_reinsure_amt, 0) = 0
                                THEN
                                    v_pool_si_rate := v_pool_rate / 100;
                                ELSE
                                    v_pool_si_rate :=
                                        (v_pool_si / v_reinsure_amt);
                                END IF;

                                v_pool_amt :=
                                      v_pool_si_rate
                                    * ROUND (
                                          NVL ( /*cur_all_risks_rec.ipu_endos_diff_amt*/
                                              cur_all_risks_rec.prrd_net_prem,
                                              0),
                                          v_rnd);
                                v_pool_rate := v_pool_si_rate * 100;
                            ELSE
                                v_pool_si := v_gross_pool_si;

                                --v_pool_amt :=(v_pool_si/v_reinsure_amt)*ROUND(NVL(cur_all_risks_rec.ipu_endos_diff_amt,0)* NVL(v_pool_rate,0)/100,v_rnd);
                                IF NVL (v_reinsure_amt, 0) = 0
                                THEN
                                    v_pool_si_rate := v_pool_rate / 100;
                                ELSE
                                    v_pool_si_rate :=
                                        (v_pool_si / v_reinsure_amt);
                                END IF;

                                --raise_error('xx'||v_pool_amt||';'||cur_all_risks_rec.prrd_cede_pool||';'||v_net_amt||';'||v_pool_si_rate);
                                v_pool_amt :=
                                      v_pool_si_rate
                                    * ROUND (
                                          NVL ( /*cur_all_risks_rec.ipu_endos_diff_amt*/
                                              cur_all_risks_rec.prrd_net_prem,
                                              0),
                                          v_rnd);
                            END IF;
                        ELSE
                            v_pool_amt := 0;
                            v_pool_si := 0;
                            v_pool_rate := 0;
                        END IF;

                        --raise_error(v_pool_amt||';'||v_pool_si_rate);
                        v_pool_ret_amt :=
                              NVL (   /*cur_all_risks_rec.ipu_endos_diff_amt*/
                                   cur_all_risks_rec.prrd_net_prem, 0)
                            - NVL (v_pool_amt, 0);
                        v_pool_com_amt :=
                            ROUND (
                                  NVL (v_pool_amt, 0)
                                * NVL (r.PRXRD_rein_XOL_comm_rate, 0)
                                / 100,
                                v_rnd);
                        v_pool_vat_amt :=
                            ROUND (
                                  NVL (v_pool_com_amt, 0)
                                * NVL (r.PRXRD_rein_XOL_vat_rate, 0)
                                / 100,
                                v_rnd);

                        IF v_ri_edit_trans
                        THEN
                            BEGIN
                                SELECT PRXRD_rein_XOL_rate,
                                       PRXRD_rein_XOL_comm_rate,
                                       PRXRD_rein_XOL_amt
                                  INTO v_PRXRD_prev_rate,
                                       v_PRXRD_prev_comm_rate,
                                       v_PRXRD_prev_prem_amt
                                  FROM GIN_POL_REIN_XOL_RISK_DETAILS
                                 WHERE     PRXRD_ipu_code =
                                           cur_all_risks_rec.ipu_code
                                       AND PRXRD_prrd_code =
                                           cur_all_risks_rec.prrd_prev_prrd_code
                                       AND PRXRD_XOLS_CODE =
                                           r.PRXRD_XOLS_CODE;
                            EXCEPTION
                                WHEN NO_DATA_FOUND
                                THEN
                                    NULL;
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Error getting previous pool cessions..');
                            END;

                            v_PRXRD_refund_prem :=
                                ROUND (
                                      v_PRXRD_prev_rate
                                    / 100
                                    * NVL (cur_all_risks_rec.prrd_net_prem /*ipu_endos_diff_amt*/
                                                                          ,
                                           0));
                            v_PRXRD_refund_comm :=
                                ROUND (
                                      v_PRXRD_refund_prem
                                    * v_PRXRD_prev_comm_rate
                                    / 100);
                        END IF;

                        --raise_error(v_pool_amt||';'||cur_all_risks_rec.ipu_endos_diff_amt||';'||v_pool_ret_amt||';'||v_trt_amt);
                        BEGIN
                            UPDATE GIN_POL_REIN_XOL_RISK_DETAILS
                               SET PRXRD_risk_prem_amt =
                                       cur_all_risks_rec.ipu_endos_diff_amt,
                                   PRXRD_risk_own_ret_amt =
                                       NVL (v_pool_ret_amt, 0),
                                   PRXRD_rein_XOL_amt = NVL (v_pool_amt, 0),
                                   PRXRD_rein_XOL_rate = v_pool_rate,
                                   PRXRD_rein_XOL_comm_amt =
                                       NVL (v_pool_com_amt, 0),
                                   PRXRD_rein_XOL_vat_amt =
                                       NVL (v_pool_vat_amt, 0),
                                   PRXRD_risk_trt_own_ret_amt =
                                       NVL (v_trt_amt, 0),
                                   PRXRD_refund_prem = v_PRXRD_refund_prem,
                                   PRXRD_refund_comm = v_PRXRD_refund_comm,
                                   PRXRD_prev_XOL_amt = v_PRXRD_prev_prem_amt,
                                   PRXRD_prev_XOL_comm_rate =
                                       v_PRXRD_prev_comm_rate,
                                   PRXRD_prev_XOL_rate = v_PRXRD_prev_rate,
                                   PRXRD_XOL_si = v_pool_si
                             WHERE     PRXRD_ipu_code =
                                       cur_all_risks_rec.ipu_code
                                   AND PRXRD_code = r.PRXRD_code
                                   AND PRXRD_ggt_tran_no = v_tran_no;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Unable to update the risk RI details, ...');
                        END;

                        --                  if r.PRXRD_XOLS_CODE !=802 then
                        --                  raise_error(r.PRXRD_XOLS_CODE);
                        --                  end if;
                        FOR p IN cur_participant_rate (r.PRXRD_XOLS_CODE)
                        LOOP
                            v_part_prem_pcur :=
                                ROUND (
                                    v_pool_amt * NVL (p.XOLP_RATE, 0) / 100,
                                    v_rnd);
                            v_part_prem_tcur :=
                                ROUND (
                                    v_pool_amt * NVL (p.XOLP_RATE, 0) / 100,
                                    v_rnd);
                            v_part_comm_pcur :=
                                ROUND (
                                      v_pool_com_amt
                                    * NVL (p.XOLP_RATE, 0)
                                    / 100,
                                    v_rnd);
                            v_part_comm_tcur :=
                                ROUND (
                                      v_pool_com_amt
                                    * NVL (p.XOLP_RATE, 0)
                                    / 100,
                                    v_rnd);
                            v_part_rpremtax_pcur := 0;
                            v_part_premtax_pcur := 0;

                            IF p.XOLP_REIN_TAXABLE NOT IN ('UN',
                                                           'N',
                                                           'RI',
                                                           'B')
                            THEN
                                raise_when_others (
                                       'Specify the taxes applicable for the '
                                    || ' participant '
                                    || p.XOLP_agnt_sht_desc);
                            END IF;

                            IF p.XOLP_TAXABLE IN ('RI', 'B')
                            THEN
                                v_part_rpremtax_pcur :=
                                    ROUND (
                                          (  NVL (p.XOLP_RATE, 0)
                                           / 100
                                           * v_pool_amt
                                           * NVL (p.XOLP_REIN_TAXRATE, 0))
                                        / 100,
                                        v_rnd);
                                v_trt_rpremtax_pcur :=
                                      NVL (v_trt_rpremtax_pcur, 0)
                                    + NVL (v_part_rpremtax_pcur, 0);
                            ELSE
                                v_part_rpremtax_pcur := 0;
                            END IF;

                            v_trt_premtax_pcur :=
                                  NVL (v_trt_premtax_pcur, 0)
                                + NVL (v_part_premtax_pcur, 0);

                            --- update participation
                            BEGIN
                                SELECT COUNT (1)
                                  INTO v_cnt
                                  FROM GIN_XOL_PARTICIPATIONS
                                 WHERE     Xpart_agnt_agent_code =
                                           p.XOLP_AGNT_AGENT_CODE
                                       AND Xpart_XOLS_code = p.XOLP_XOLS_CODE
                                       AND Xpart_prxrd_code = r.PRXRD_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_when_others (
                                        'Error checking participant records..');
                            END;

                            IF NVL (v_cnt, 0) = 0
                            THEN
                                SELECT GIN_XPART_CODE_SEQ.NEXTVAL
                                  INTO v_part_code
                                  FROM DUAL;

                                BEGIN
                                    INSERT INTO GIN_XOL_PARTICIPATIONS (
                                                    xpart_code,
                                                    xpart_cede_rate,
                                                    xpart_si_amt_pcur,
                                                    xpart_si_amt_tcur,
                                                    xpart_comm_amt_pcur,
                                                    xpart_comm_amt_tcur,
                                                    xpart_prem_amt_pcur,
                                                    xpart_prem_amt_tcur,
                                                    xpart_xols_code,
                                                    xpart_agnt_agent_code,
                                                    xpart_agnt_sht_desc,
                                                    xpart_prxrd_code,
                                                    xpart_xas_code,
                                                    xpart_pol_cur_code,
                                                    xpart_pol_cur_symbol,
                                                    xpart_uwyr,
                                                    xpart_pol_batch_no,
                                                    xpart_pol_policy_no,
                                                    xpart_pol_ren_endos_no,
                                                    xpart_ipu_code,
                                                    xpart_fiscal_year,
                                                    xpart_scl_code,
                                                    xpart_ggt_tran_no,
                                                    xpart_tran_type,
                                                    xpart_prrd_code,
                                                    xpart_prev_cede_rate,
                                                    xpart_xolp_code,
                                                    xpart_trt_prem_tax_pcur,
                                                    xpart_trpa_rei_prem_taxable)
                                        SELECT v_part_code,
                                               XOLP_RATE,
                                               NULL,
                                               NULL,
                                               v_part_comm_pcur,
                                               v_part_comm_tcur,
                                               v_part_prem_pcur,
                                               v_part_prem_tcur,
                                               XOLS_CODE,
                                               XOLP_AGNT_AGENT_CODE,
                                               XOLP_AGNT_SHT_DESC,
                                               r.prxrd_code,
                                               r.PRPRD_XAS_CODE,
                                               cur_pol_rec.pol_cur_code,
                                               cur_pol_rec.pol_cur_symbol,
                                               cur_all_risks_rec.ipu_inception_uwyr,
                                               cur_all_risks_rec.ipu_pol_batch_no,
                                               cur_all_risks_rec.ipu_pol_policy_no,
                                               cur_all_risks_rec.ipu_pol_ren_endos_no,
                                               cur_all_risks_rec.ipu_code,
                                               TO_CHAR (SYSDATE, 'YYYY'),
                                               cur_all_risks_rec.ipu_sec_scl_code,
                                               v_tran_no,
                                               'R',
                                               cur_all_risks_rec.prrd_code,
                                               NULL,
                                               XOLP_CODE,
                                               v_trt_rpremtax_pcur,
                                               XOLP_REIN_TAXABLE
                                          FROM gin_xol_treaty_setups,
                                               gin_XOL_participants
                                         WHERE     XOLS_CODE = XOLP_XOLS_CODE
                                               AND XOLS_CODE =
                                                   p.XOLP_XOLS_CODE
                                               AND XOLP_AGNT_AGENT_CODE =
                                                   p.XOLP_AGNT_AGENT_CODE;
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_when_others (
                                            'Error populating particant cessions..');
                                END;
                            ELSE
                                BEGIN
                                    UPDATE GIN_XOL_PARTICIPATIONS
                                       SET Xpart_si_amt_pcur = NULL,
                                           Xpart_si_amt_tcur = NULL,
                                           Xpart_comm_amt_pcur =
                                               v_part_comm_pcur,
                                           Xpart_comm_amt_tcur =
                                               v_part_comm_tcur,
                                           Xpart_prem_amt_pcur =
                                               v_part_prem_pcur,
                                           Xpart_prem_amt_tcur =
                                               v_part_prem_tcur,
                                           xpart_trt_prem_tax_pcur =
                                               v_trt_premtax_pcur,
                                           xpart_XOLS_CODE =
                                               r.PRXRD_XOLS_CODE
                                     WHERE     Xpart_agnt_agent_code =
                                               p.XOLP_AGNT_AGENT_CODE
                                           AND XPART_PRXRD_CODE =
                                               r.PRXRD_code;
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_when_others (
                                            'Error updating participant cessions..');
                                END;
                            END IF;
                        END LOOP;
                    END LOOP;
                END IF;
            END LOOP;
        END LOOP;
    EXCEPTION
        WHEN v_zero_devide
        THEN
            raise_error (
                'Error :- System attempted to do a zero devide. ensure that the amount to reinsure is not Zero (0) or null. Continue if covered by XOL...');
    END;

    --     FUNCTION check_quota_share (
    --   v_scl_code   IN   NUMBER,
    --   v_uwyr       IN   NUMBER,
    --   v_ipu_code   IN   NUMBER,
    --   v_tran_no    IN   NUMBER
    --)
    --   RETURN VARCHAR2
    --IS
    --   v_cnt            NUMBER;
    --   v_cnt2           NUMBER;
    --   v_is_reinsured   VARCHAR2 (2);
    --BEGIN
    --   IF     v_scl_code IS NOT NULL
    --      AND v_uwyr IS NOT NULL
    --      AND v_ipu_code IS NOT NULL
    --      AND v_tran_no IS NOT NULL
    --   THEN
    --      BEGIN
    ----      RAISE_ERROR('v_scl_code='||v_scl_code||'v_uwyr='||v_uwyr);
    --         SELECT COUNT (*)
    --           INTO v_cnt
    --           FROM gin_treaty_setups_vw
    --          WHERE clt_scl_code = v_scl_code
    --            AND as_uwyr = v_uwyr
    --            AND clt_scl_code  NOT IN (1000)
    --            AND NVL (as_status, 'N') = 'A'
    --            AND rei_code != 563
    --            AND trt_code IN (1003);
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            v_cnt := 0;
    --      END;

    --      IF NVL (v_cnt, 0) > 0
    --      THEN
    --         BEGIN
    --            SELECT   COUNT (*)
    --                INTO v_cnt2
    --                FROM gin_treaty_setups_vw
    --               WHERE clt_scl_code = v_scl_code
    --                 AND as_uwyr = v_uwyr
    --                 AND NVL (as_status, 'N') = 'A'
    --                 AND rei_code != 563
    --                 AND trt_code IN (1003)
    --                 AND rei_code IN (
    --                        SELECT ptotr_rei_code
    --                          FROM gin_policy_rein_risk_details
    --                         WHERE ptotr_ipu_code = v_ipu_code
    --                           AND ptotr_ggt_tran_no = v_tran_no
    --                           and nvl(ptotr_trt_prem_pcur,0)!=0
    --                           and nvl(ptotr_rate,0)!=100)
    --            ORDER BY clt_as_code, trt_level, clt_scl_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               v_cnt2 := 0;
    --         END;
    --      END IF;
    ----   RAISE_ERROR('v_cnt2=='||v_cnt2||'v_cnt=='||v_cnt);
    --      IF NVL (v_cnt2, 0) > 0
    --      THEN
    --         v_is_reinsured := 'Y';
    --      ELSIF NVL (v_cnt, 0) > 0 AND NVL (v_cnt2, 0) <= 0
    --          THEN
    --         v_is_reinsured := 'N';
    --      END IF;
    --   END IF;

    --   RETURN (v_is_reinsured);
    --END;

    ----FUNCTION check_quota_share (
    ----   v_scl_code   IN   NUMBER,
    ----   v_uwyr       IN   NUMBER,
    ----   v_ipu_code   IN   NUMBER,
    ----   v_tran_no    IN   NUMBER
    ----)
    ----   RETURN VARCHAR2
    ----IS
    ----   v_cnt            NUMBER;
    ----   v_cnt2           NUMBER;
    ----   v_is_reinsured   VARCHAR2 (2);
    ----BEGIN
    ----   IF     v_scl_code IS NOT NULL
    ----      AND v_uwyr IS NOT NULL
    ----      AND v_ipu_code IS NOT NULL
    ----      AND v_tran_no IS NOT NULL
    ----   THEN
    ----      BEGIN
    ----         SELECT COUNT (*)
    ----           INTO v_cnt
    ----           FROM gin_treaty_setups_vw
    ----          WHERE clt_scl_code = v_scl_code
    ----            AND as_uwyr = v_uwyr
    ----            AND clt_scl_code  NOT IN (1000)
    ----            AND NVL (as_status, 'N') = 'A'
    ----            AND rei_code != 563
    ----            AND trt_code IN (1003);
    ----      EXCEPTION
    ----         WHEN OTHERS
    ----         THEN
    ----            v_cnt := 0;
    ----      END;
    ----
    ----      IF NVL (v_cnt, 0) > 0
    ----      THEN
    ----         BEGIN
    ----
    ----          SELECT   COUNT (*)
    ----                INTO v_cnt2
    ----                FROM gin_treaty_setups_vw
    ----               WHERE clt_scl_code = v_scl_code
    ----                 AND as_uwyr = v_uwyr
    ----
    ----                 AND NVL (as_status, 'N') = 'A'
    ----                 AND rei_code != 563
    ----                 AND trt_code IN (1003)
    ----                 AND rei_code IN (
    ----                        SELECT ptotr_rei_code
    ----                          FROM gin_policy_rein_risk_details
    ----                         WHERE ptotr_ipu_code = v_ipu_code
    ----                           AND ptotr_ggt_tran_no = v_tran_no
    ----                           and nvl(ptotr_trt_prem_pcur,0)!=0
    ----                           and nvl(ptotr_rate,0)!=100
    ----                           UNION
    ----                          SELECT ptotr_rei_code
    ----                          FROM gin_policy_rein_risk_details
    ----                         WHERE ptotr_ipu_code = v_ipu_code
    ----                           AND ptotr_ggt_tran_no = v_tran_no
    ----                           and ptotr_prrd_code in (select fc_prrd_code from
    ----                                                        gin_facre_cessions
    ----                                                        where fc_ipu_code=v_ipu_code
    ----                                                        and  fc_ggt_tran_no=v_tran_no
    ----                                                   )
    ----                           and nvl(ptotr_trt_prem_pcur,0)=0
    ----                           and nvl(ptotr_rate,0)!=100
    ----                           UNION
    ----                            SELECT ptotr_rei_code
    ----                          FROM gin_policy_rein_risk_details,gin_insured_property_unds
    ----                         WHERE ptotr_ipu_code = v_ipu_code
    ----                           AND ptotr_ggt_tran_no = v_tran_no
    ----                           and ipu_code=ptotr_ipu_code
    ----                           and nvl(ipu_endos_diff_amt,0)=0
    ----                           and nvl(ptotr_trt_prem_pcur,0)=0
    ----                           and nvl(ptotr_rate,0)!=100)
    ----            ORDER BY clt_as_code, trt_level, clt_scl_code;
    ----         EXCEPTION
    ----            WHEN OTHERS
    ----            THEN
    ----               v_cnt2 := 0;
    ----         END;
    ----      END IF;
    ------   RAISE_ERROR('v_cnt2=='||v_cnt2||'v_cnt=='||v_cnt);
    ----      IF NVL (v_cnt2, 0) > 0
    ----      THEN
    ----         v_is_reinsured := 'Y';
    ----      ELSIF NVL (v_cnt, 0) > 0 AND NVL (v_cnt2, 0) <= 0
    ----          THEN
    ----         v_is_reinsured := 'N';
    ----      END IF;
    ----   END IF;
    ----
    ----   RETURN (v_is_reinsured);
    ----END;
    --FUNCTION check_quota_share (
    --   v_scl_code   IN   NUMBER,
    --   v_uwyr       IN   NUMBER,
    --   v_ipu_code   IN   NUMBER,
    --   v_tran_no    IN   NUMBER
    --)
    --   RETURN VARCHAR2
    --IS
    --   v_cnt            NUMBER;
    --   v_cnt2           NUMBER;
    --   v_is_reinsured   VARCHAR2 (2);
    --BEGIN
    --   IF     v_scl_code IS NOT NULL
    --      AND v_uwyr IS NOT NULL
    --      AND v_ipu_code IS NOT NULL
    --      AND v_tran_no IS NOT NULL
    --   THEN
    --      BEGIN
    --         SELECT COUNT (*)
    --           INTO v_cnt
    --           FROM gin_treaty_setups_vw
    --          WHERE clt_scl_code = v_scl_code
    --            AND as_uwyr = v_uwyr
    --            AND clt_scl_code  NOT IN (1000)
    --            AND NVL (as_status, 'N') = 'A'
    --            AND rei_code != 563
    --            AND trt_code IN (1003);
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            v_cnt := 0;
    --      END;
    --
    ----RAISE_ERROR('v_ipu_code='||v_ipu_code||'v_uwyr='||v_uwyr||'v_tran_no='||v_tran_no||'v_scl_code='||v_scl_code);
    --      IF NVL (v_cnt, 0) > 0
    --      THEN
    --         BEGIN
    --
    --          SELECT   COUNT (*)
    --                INTO v_cnt2
    --                FROM gin_treaty_setups_vw
    --               WHERE clt_scl_code = v_scl_code
    --                 AND as_uwyr = v_uwyr
    --
    --                 AND NVL (as_status, 'N') = 'A'
    --                 AND rei_code != 563
    --                 AND trt_code IN (1003)
    --                 AND (rei_code IN (
    --                        SELECT ptotr_rei_code
    --                          FROM gin_policy_rein_risk_details
    --                         WHERE ptotr_ipu_code = v_ipu_code
    --                           AND ptotr_ggt_tran_no = v_tran_no
    --                           and nvl(ptotr_trt_prem_pcur,0)!=0
    --                           and nvl(ptotr_rate,0)!=100
    --                           UNION
    --                          SELECT ptotr_rei_code
    --                          FROM gin_policy_rein_risk_details
    --                         WHERE ptotr_ipu_code = v_ipu_code
    --                           AND ptotr_ggt_tran_no = v_tran_no
    --                           and ptotr_prrd_code in (select fc_prrd_code from
    --                                                        gin_facre_cessions
    --                                                        where fc_ipu_code=v_ipu_code
    --                                                        and  fc_ggt_tran_no=v_tran_no
    --                                                   )
    --                           and nvl(ptotr_trt_prem_pcur,0)=0
    --                           and nvl(ptotr_rate,0)!=100
    --                           UNION
    --                            SELECT ptotr_rei_code
    --                          FROM gin_policy_rein_risk_details,gin_insured_property_unds
    --                         WHERE ptotr_ipu_code = v_ipu_code
    --                           AND ptotr_ggt_tran_no = v_tran_no
    --                           and ipu_code=ptotr_ipu_code
    --                           and nvl(ipu_endos_diff_amt,0)=0
    --                           and nvl(ptotr_trt_prem_pcur,0)=0
    --                           and nvl(ptotr_rate,0)!=100)
    --
    --                           OR (   AS_CODE
    --                            IN
    --                            (
    --                            select PRRD_aS_CODE from
    --                            gin_policy_risk_ri_dtls
    --                            where PRRD_IPU_CODE=v_ipu_code
    --                            and PRRD_TRAN_NO=v_tran_no
    --                            AND PRRD_CODE  IN (select fc_prrd_code from
    --                                                gin_facre_cessions
    --                                                where fc_ipu_code=v_ipu_code
    --                                                and  fc_ggt_tran_no=v_tran_no
    --                                               )
    --                                               )
    --                                               )
    --                                               )
    --
    --
    --            ORDER BY clt_as_code, trt_level, clt_scl_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               v_cnt2 := 0;
    --         END;
    --      END IF;
    ----   RAISE_ERROR('v_cnt2=='||v_cnt2||'v_cnt=='||v_cnt);
    --      IF NVL (v_cnt2, 0) > 0
    --      THEN
    --         v_is_reinsured := 'Y';
    --      ELSIF NVL (v_cnt, 0) > 0 AND NVL (v_cnt2, 0) <= 0
    --          THEN
    --         v_is_reinsured := 'N';
    --      END IF;
    --   END IF;
    --
    --   RETURN (v_is_reinsured);
    --END;
    FUNCTION check_quota_share (v_scl_code   IN NUMBER,
                                v_uwyr       IN NUMBER,
                                v_ipu_code   IN NUMBER,
                                v_tran_no    IN NUMBER)
        RETURN VARCHAR2
    IS
        v_cnt            NUMBER;
        v_cnt2           NUMBER;
        v_cnt3           NUMBER;
        v_is_reinsured   VARCHAR2 (2);
    BEGIN
        IF     v_scl_code IS NOT NULL
           AND v_uwyr IS NOT NULL
           AND v_ipu_code IS NOT NULL
           AND v_tran_no IS NOT NULL
        THEN
            BEGIN
                SELECT COUNT (*)
                  INTO v_cnt
                  FROM gin_treaty_setups_vw
                 WHERE     clt_scl_code = v_scl_code
                       AND as_uwyr = v_uwyr
                       AND clt_scl_code NOT IN (1000)
                       AND NVL (as_status, 'N') = 'A'
                       AND rei_code != 563
                       AND trt_code IN (1003);
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_cnt := 0;
            END;

            IF NVL (v_cnt, 0) > 0
            THEN
                BEGIN
                      SELECT COUNT (*)
                        INTO v_cnt2
                        FROM gin_treaty_setups_vw
                       WHERE     clt_scl_code = v_scl_code
                             AND as_uwyr = v_uwyr
                             AND NVL (as_status, 'N') = 'A'
                             AND rei_code != 563
                             AND trt_code IN (1003)
                             AND rei_code IN
                                     (SELECT ptotr_rei_code
                                        FROM gin_policy_rein_risk_details
                                       WHERE     ptotr_ipu_code = v_ipu_code
                                             AND ptotr_ggt_tran_no = v_tran_no
                                             AND NVL (ptotr_trt_prem_pcur, 0) !=
                                                 0
                                             AND NVL (ptotr_rate, 0) != 100
                                      UNION
                                      SELECT ptotr_rei_code
                                        FROM gin_policy_rein_risk_details
                                       WHERE     ptotr_ipu_code = v_ipu_code
                                             AND ptotr_ggt_tran_no = v_tran_no
                                             AND ptotr_prrd_code IN
                                                     (SELECT fc_prrd_code
                                                        FROM gin_facre_cessions
                                                       WHERE     fc_ipu_code =
                                                                 v_ipu_code
                                                             AND fc_ggt_tran_no =
                                                                 v_tran_no)
                                             AND NVL (ptotr_trt_prem_pcur, 0) =
                                                 0
                                             AND NVL (ptotr_rate, 0) != 100
                                      UNION
                                      SELECT ptotr_rei_code
                                        FROM gin_policy_rein_risk_details,
                                             gin_insured_property_unds
                                       WHERE     ptotr_ipu_code = v_ipu_code
                                             AND ptotr_ggt_tran_no = v_tran_no
                                             AND ipu_code = ptotr_ipu_code
                                             AND NVL (ipu_endos_diff_amt, 0) =
                                                 0
                                             AND NVL (ptotr_trt_prem_pcur, 0) =
                                                 0
                                             AND NVL (ptotr_rate, 0) != 100)
                    ORDER BY clt_as_code, trt_level, clt_scl_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        v_cnt2 := 0;
                END;
            END IF;

            /* CHECK WHETHER SPECIAL REINSURANCE HAS BEEN DONE-THE COMPANY HAS RETAINED THE FULL AMOUNT AND THE TREATY RATES HAS BEEN SET TO ZERO */
            BEGIN
                SELECT COUNT (*)
                  INTO v_cnt3
                  FROM gin_policy_rein_risk_details
                 WHERE ptotr_ggt_tran_no = v_tran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_cnt3 := 0;
            END;

            IF NVL (v_cnt3, 0) = 0
            THEN
                v_is_reinsured := 'Y';
            --   RAISE_ERROR('v_cnt2=='||v_cnt2||'v_cnt=='||v_cnt);
            ELSE
                IF NVL (v_cnt2, 0) > 0
                THEN
                    v_is_reinsured := 'Y';
                ELSIF NVL (v_cnt, 0) > 0 AND NVL (v_cnt2, 0) <= 0
                THEN
                    v_is_reinsured := 'N';
                END IF;
            END IF;
        END IF;

        RETURN (v_is_reinsured);
    END;

    ----gis_ri_procedures.reauthorise_grp_trans
    PROCEDURE reauthorise_grp_trans (
        v_trans_no     IN NUMBER,
        v_trans_type   IN VARCHAR2,
        v_user            VARCHAR2,
        v_auth_date    IN DATE DEFAULT TRUNC (SYSDATE))
    IS
        pol_stat                VARCHAR2 (15);
        v_new_stat              VARCHAR2 (2);
        v_dummy                 NUMBER := 0;
        v_prev_status           VARCHAR2 (5);
        v_errnum                NUMBER;
        v_errmsg                VARCHAR2 (200);
        v_rnd                   NUMBER := 0;
        v_rnd_bcur              NUMBER := 0;
        --v_eff_date           date;
        ri_not_done             EXCEPTION;
        v_pr_code               NUMBER;
        PRAGMA EXCEPTION_INIT (ri_not_done, -20001);
        v_acc_interface_param   VARCHAR2 (1);

        CURSOR cur_ri_trans IS
            SELECT DISTINCT
                   pol_policy_no || ' / ' || pol_drcr_no
                       vchr_desc,
                   pol_past_period_endos,
                   pol_agnt_agent_code,
                   pol_drcr_no,
                   PREV.PRRD_TRAN_NO
                       PREV_TRAN_NO,
                   NVL (ggt_trans_authorised, 'N')
                       ggt_trans_authorised,
                   ggt_effective_date,
                   ggt_btr_trans_code,
                   pol_batch_no,
                   IPU_UW_YR
              FROM GIN_POLICIES,
                   GIN_INSURED_PROPERTY_UNDS,
                   GIN_POLICY_RISK_RI_DTLS  CURR,
                   GIN_POLICY_RISK_RI_DTLS  PREV,
                   GIN_GIS_TRANSACTIONS
             WHERE     POL_BATCH_NO = IPU_POL_BATCH_NO
                   AND IPU_CODE = CURR.PRRD_IPU_CODE
                   AND CURR.PRRD_PREV_PRRD_CODE = PREV.PRRD_CODE
                   AND CURR.PRRD_TRAN_NO = GGT_TRANS_NO
                   AND CURR.PRRD_TRAN_NO = v_trans_no;

        CURSOR cur_prev_ri_trans (vtrans_no IN NUMBER)
        IS
            SELECT DISTINCT
                   ipu_code,
                   PREV.PRRD_TRAN_NO                   PREV_TRAN_NO,
                   NVL (ggt_trans_authorised, 'N')     ggt_trans_authorised,
                   pol_agnt_agent_code,
                   ggt_effective_date,
                   ggt_btr_trans_code,
                   pol_batch_no,
                   IPU_UW_YR,
                   pol_past_period_endos,
                   pol_drcr_no                         vchr_desc,
                   pol_policy_no
              FROM GIN_POLICIES,
                   GIN_INSURED_PROPERTY_UNDS,
                   GIN_POLICY_RISK_RI_DTLS  CURR,
                   GIN_POLICY_RISK_RI_DTLS  PREV,
                   GIN_GIS_TRANSACTIONS
             WHERE     POL_BATCH_NO = IPU_POL_BATCH_NO
                   AND IPU_CODE = CURR.PRRD_IPU_CODE
                   AND CURR.PRRD_PREV_PRRD_CODE = PREV.PRRD_CODE
                   AND CURR.PRRD_TRAN_NO = GGT_TRANS_NO
                   AND CURR.PRRD_TRAN_NO = vtrans_no;

        CURSOR cur_prev_curr_ri_trans (vtrans_no IN NUMBER)
        IS
            SELECT DISTINCT
                   ipu_code,
                   PREV.PRRD_TRAN_NO                   PREV_TRAN_NO,
                   NVL (ggt_trans_authorised, 'N')     ggt_trans_authorised,
                   pol_agnt_agent_code,
                   ggt_effective_date,
                   ggt_btr_trans_code,
                   pol_batch_no,
                   IPU_UW_YR,
                   pol_past_period_endos,
                   pol_drcr_no                         vchr_desc,
                   pol_policy_no
              FROM GIN_POLICIES,
                   GIN_INSURED_PROPERTY_UNDS,
                   GIN_POLICY_RISK_RI_DTLS  CURR,
                   GIN_POLICY_RISK_RI_DTLS  PREV,
                   GIN_GIS_TRANSACTIONS
             WHERE     POL_BATCH_NO = IPU_POL_BATCH_NO
                   AND IPU_CODE = CURR.PRRD_IPU_CODE
                   AND CURR.PRRD_PREV_PRRD_CODE = PREV.PRRD_CODE
                   AND CURR.PRRD_TRAN_NO = GGT_TRANS_NO
                   AND IPU_CODE NOT IN
                           (SELECT DISTINCT IPU_CODE
                              FROM GIN_POLICIES,
                                   GIN_INSURED_PROPERTY_UNDS,
                                   GIN_POLICY_RISK_RI_DTLS  CURR,
                                   GIN_POLICY_RISK_RI_DTLS  PREV,
                                   GIN_GIS_TRANSACTIONS
                             WHERE     POL_BATCH_NO = IPU_POL_BATCH_NO
                                   AND IPU_CODE = CURR.PRRD_IPU_CODE
                                   AND CURR.PRRD_PREV_PRRD_CODE =
                                       PREV.PRRD_CODE
                                   AND CURR.PRRD_TRAN_NO = GGT_TRANS_NO
                                   AND CURR.PRRD_TRAN_NO = v_trans_no)
                   AND CURR.PRRD_TRAN_NO = vtrans_no;

        CURSOR cur_risks IS
            SELECT prrd_code, prrd_ipu_code
              FROM gin_policy_risk_ri_dtls
             WHERE prrd_tran_no = v_trans_no;

        CURSOR cur_old_risks (v_old_tran_no IN NUMBER)
        IS
            SELECT prrd_code, prrd_ipu_code
              FROM gin_policy_risk_ri_dtls
             WHERE prrd_tran_no = v_old_tran_no;

        CURSOR cur_endos_risk (v_ipu_code IN NUMBER)
        IS
            SELECT ipu_code
              FROM gin_insured_property_unds
             WHERE ipu_prev_ipu_code = v_ipu_code AND ipu_code != v_ipu_code;
    BEGIN
        --RAISE_ERROR('HAPA');
        IF v_trans_no IS NULL
        THEN
            RAISE_ERROR ('Error determining transaction to authorise...');
        END IF;

        BEGIN
            check_grp_risk_ri (v_trans_no);
        EXCEPTION
            WHEN ri_not_done
            THEN
                raise_error (
                       'Cannot authorise when there are risks not reinsured...'
                    || v_trans_no);
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Cannot authorise while there a risks not reinsured ...');
        END;

        BEGIN
            check_uw_ri (v_trans_no);
        EXCEPTION
            WHEN ri_not_done
            THEN
                raise_error (
                    'Cannot authorise when there are risks not reinsured...');
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Cannot authorise while there a risks not reinsured ...');
        END;

        SELECT COUNT (1)
          INTO v_dummy
          FROM gin_policy_risk_ri_dtls
         WHERE prrd_tran_no = v_trans_no AND prrd_avail_fulc_bal > 0;

        IF v_dummy > 0
        THEN
            raise_error (
                   'This transaction has '
                || v_dummy
                || ' risks with excess sum insured to be placed falcultaively..You cannot AUTHORISE it now ...');
        END IF;


        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('IFRS_ACC_MAPPING')
              INTO v_acc_interface_param
              FROM DUAL;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        FOR R IN cur_ri_trans
        LOOP
            FOR PR IN cur_prev_ri_trans (R.PREV_TRAN_NO)
            LOOP
                --                IF PR.ggt_trans_authorised IN ('Y') THEN
                --                   raise_error ('This transaction has already been authorised....');
                --              END IF;

                IF PR.PREV_TRAN_NO IS NULL
                THEN
                    raise_error (
                        'Error determining the old transaction to reverse...');
                END IF;

                -- FIRST REVERSE THE PREVIOUS TRANSACTION FROM FMS
                -- POST THE CURRENT PROCESSED TRANSACTION TO FMS
                IF PR.PREV_TRAN_NO IS NOT NULL
                THEN                       -- REVERSE THE PREVIOUS TRANSACTION
                    BEGIN
                        --update rein auth_dt
                        UPDATE gin_policy_rein_risk_details
                           SET ptotr_auth_dt = v_auth_date
                         WHERE ptotr_ggt_tran_no = PR.PREV_TRAN_NO;

                        UPDATE gin_policy_risk_ri_dtls
                           SET prrd_auth_dt = v_auth_date
                         WHERE prrd_tran_no = PR.PREV_TRAN_NO;

                        UPDATE gin_facre_cessions
                           SET fc_auth_dt = v_auth_date
                         WHERE fc_ggt_tran_no = PR.PREV_TRAN_NO;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to update reinsurance authorization date.');
                    END;

                    BEGIN
                        gin_uw_author_proc.post_ri_transactions (
                            R.pol_batch_no,
                            R.PREV_TRAN_NO,
                            v_trans_type,
                            'RI',
                            NULL,                        --v_pol_prev_drcr_no,
                            R.IPU_UW_YR,
                            v_user,
                            'Y',
                            v_auth_date);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error :- Unable to post treaty reinsurance transactions to the accounts...');
                    END;

                    /* BEGIN
                         grp_post_pool_ri_trans (pr.pol_batch_no,
                                                             pr.PREV_TRAN_NO,
                                                             'Y',
                                                             TRUNC(SYSDATE),
                                                             pr.ipu_code);
                     EXCEPTION
                         WHEN OTHERS THEN
                             RAISE_ERROR('Error posting pool to statements area..');
                     END;*/
                    --------------post ri gl
                    BEGIN
                        grp_reverse_register (pr.pol_batch_no,
                                              pr.PREV_TRAN_NO,
                                              v_auth_date,
                                              pr.ipu_code);              --RIR
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error :- Unable to update registers ...');
                    END;

                    IF gin_interfaces_pkg.interface_enabled (
                           'UW_TRANS',
                           PR.pol_past_period_endos) =
                       'Y'
                    THEN
                        -- RAISE_ERROR('ERROR FETCHING TRANSACTION BATCH NUMBER...');
                        gin_interfaces_pkg.create_gl_voucher (
                            PR.PREV_TRAN_NO,
                            PR.vchr_desc,
                            v_user,
                            PR.pol_agnt_agent_code,
                            'U',
                            PR.pol_batch_no,
                            PR.pol_policy_no);
                    END IF;
                END IF;
            END LOOP;
        END LOOP;

        FOR cur_ri_rec IN cur_ri_trans
        LOOP
            -- AUTHORISE CURRENT REINSURANCE CESSIONS
            --insert register transaction with prev refund
            --insert register with new ri prem
            --insert accumulation
            BEGIN
                GIN_UW_AUTHOR_PROC.post_ri_transactions (
                    cur_ri_rec.pol_batch_no,
                    v_trans_no,
                    v_trans_type,
                    'RI',
                    cur_ri_rec.pol_drcr_no,              --v_pol_prev_drcr_no,
                    cur_ri_rec.IPU_UW_YR,
                    v_user,
                    'N',
                    v_auth_date);
            --grp_post_rein (v_trans_no, v_trans_type, v_user);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error :- Unable to post treaty reinsurance transactions to the accounts...');
            END;

            BEGIN
                GIN_UW_AUTHOR_PROC.post_pool_ri_trans (
                    cur_ri_rec.pol_batch_no,
                    v_trans_no,
                    'N',
                    v_auth_date);
            EXCEPTION
                WHEN OTHERS
                THEN
                    RAISE_ERROR ('ERROR POSTING POOL TRANSACTION...');
            END;

            BEGIN
                gin_uw_author_proc.post_facre_cession (
                    cur_ri_rec.pol_batch_no,
                    v_trans_no,
                    cur_ri_rec.IPU_UW_YR,
                    v_user,
                    'N',
                    v_auth_date);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error :- Unable to post facre reinsurance transactions to the accounts...');
            END;

            ---------------------------
            BEGIN
                GIN_UW_AUTHOR_PROC.post_pool_ri_gl (cur_ri_rec.pol_batch_no,
                                                    v_trans_no,
                                                    v_user,
                                                    'N',
                                                    v_auth_date);
            EXCEPTION
                WHEN OTHERS
                THEN
                    RAISE_ERROR (
                        'Error:- Unable to post pool reinsurance to Gl...');
            END;

            BEGIN
                GIN_UW_AUTHOR_PROC.post_ri_gl (cur_ri_rec.pol_batch_no,
                                               v_trans_no,
                                               cur_ri_rec.IPU_UW_YR,
                                               v_user,
                                               'N',
                                               v_auth_date);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error :- Unable to post treaty reinsurance transactions to the GL accounts ...');
            END;

            BEGIN
                gis_ri_procedures.grp_update_register (
                    cur_ri_rec.pol_batch_no,
                    v_trans_no,
                    v_auth_date,
                    v_pr_code);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error :- Unable to update registers ...');
            END;

            FOR r IN cur_prev_curr_ri_trans (cur_ri_rec.PREV_TRAN_NO)
            LOOP
                BEGIN
                    gis_ri_procedures.grp_update_register (
                        cur_ri_rec.pol_batch_no,
                        cur_ri_rec.PREV_TRAN_NO,
                        v_auth_date,
                        r.ipu_code,
                        v_pr_code,
                        v_trans_no);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Unable to update registers ..1..');
                END;
            END LOOP;

            IF gin_interfaces_pkg.interface_enabled (
                   'UW_TRANS',
                   cur_ri_rec.pol_past_period_endos) =
               'Y'
            THEN
                gin_interfaces_pkg.create_gl_voucher (
                    v_trans_no,
                    cur_ri_rec.vchr_desc,
                    v_user,
                    cur_ri_rec.pol_agnt_agent_code,
                    'U',
                    cur_ri_rec.pol_batch_no,
                    cur_ri_rec.pol_drcr_no);
            END IF;
        END LOOP;

        BEGIN
            UPDATE gin_gis_transactions
               SET ggt_trans_authorised = 'Y',
                   ggt_trans_authorised_by = v_user,
                   ggt_trans_authorise_date = v_auth_date
             WHERE ggt_trans_no = v_trans_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error :- Unable to update transaction authorization details...');
        END;

        BEGIN
            FOR cur_risks_rec IN cur_risks
            LOOP
                UPDATE gin_insured_property_unds
                   SET ipu_current_prrd_code = cur_risks_rec.prrd_code,
                       ipu_reinsured = 3 -- 3 stands for reinsurance edit, 2 stands for norwal reinsurance, 0 and 1 stands for reinsuance not done
                 WHERE ipu_code = cur_risks_rec.prrd_ipu_code;

                UPDATE gin_policy_risk_ri_dtls
                   SET prrd_current = 'N'
                 WHERE prrd_ipu_code = cur_risks_rec.prrd_ipu_code; -- TO SET PREVIUOS CURRENT RECORD TO NOT CURRENT

                FOR r IN cur_endos_risk (cur_risks_rec.prrd_ipu_code)
                LOOP
                    UPDATE gin_insured_property_unds
                       SET ipu_reinsured = 4 -- 4 the previous risk ri has been edited, hence this transaction ri has to be edited too
                     WHERE ipu_code = r.ipu_code;
                END LOOP;
            END LOOP;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Unable to update risks current RI details code, ...');
        END;

        --------------------------------------
        BEGIN
            --update rein auth_dt
            UPDATE gin_policy_rein_risk_details
               SET ptotr_auth_dt = v_auth_date
             WHERE ptotr_ggt_tran_no = v_trans_no;

            UPDATE gin_policy_risk_ri_dtls
               SET prrd_auth_dt = v_auth_date, prrd_current = 'Y'
             WHERE prrd_tran_no = v_trans_no;

            UPDATE gin_facre_cessions
               SET fc_auth_dt = v_auth_date
             WHERE fc_ggt_tran_no = v_trans_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Unable to update reinsurance authorization date.');
        END;
    END;
END;
/
