CREATE OR REPLACE PACKAGE BODY TQ_GIS."GIS_ACCOUNTS_UTILITIES"
AS
    PROCEDURE raise_error (v_msg IN VARCHAR2)
    IS
    BEGIN
        IF SQLCODE != 0
        THEN
            raise_application_error (-20019,
                                     v_msg || ' - ' || SQLERRM (SQLCODE));
        ELSE
            raise_application_error (-20019, v_msg);
        END IF;
    END raise_error;

    FUNCTION cleared_fms_rct_chq (v_rct_no NUMBER)
        RETURN VARCHAR2
    IS
        v_rct_cleared   VARCHAR2 (1);
    BEGIN
        IF v_rct_no IS NOT NULL
        THEN
            BEGIN
                SELECT rct_cleared
                  INTO v_rct_cleared
                  FROM fms_receipts
                 WHERE rct_no = v_rct_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
            END;
        ELSE
            v_rct_cleared := 'Y';
        END IF;

        IF NVL (v_rct_cleared, 'N') = 'Y'
        THEN
            RETURN 'Y';
        ELSE
            RETURN 'N';
        END IF;
    END cleared_fms_rct_chq;

    PROCEDURE insurance_pymnt_reversal (v_mtran_no NUMBER, v_user VARCHAR2)
    IS
        CURSOR c_updtd_trans IS
            SELECT ipa_id,
                   ipa_mtran_no,
                   ipa_other_mtran_no,
                   ipa_comm_amnt,
                   ipa_whtx_amnt,
                   ipa_ins_pymnt
              FROM gin_ins_pymnt_audit
             WHERE ipa_other_mtran_no = v_mtran_no;
    BEGIN
        FOR v_updtd_trans IN c_updtd_trans
        LOOP
            UPDATE gin_master_transactions
               SET mtran_balance =
                       mtran_balance - v_updtd_trans.ipa_ins_pymnt,
                   mtran_settlement =
                       mtran_settlement - v_updtd_trans.ipa_ins_pymnt,
                   mtran_comm_paid =
                       mtran_comm_paid - v_updtd_trans.ipa_comm_amnt
             WHERE mtran_no = v_updtd_trans.ipa_mtran_no;

            UPDATE gin_ins_pymnt_audit
               SET ipa_cancld = 'Y',
                   ipa_canc_date = TRUNC (SYSDATE),
                   ipa_cancld_by = v_user
             WHERE ipa_id = v_updtd_trans.ipa_id;
        END LOOP;

        UPDATE gin_master_transactions
           SET mtran_authorised = 'R'
         WHERE mtran_no = v_mtran_no;
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                ' INS_PAYMENT_REVERSAL ' || SQLERRM (SQLCODE));
    END insurance_pymnt_reversal;


    --PROCEDURE knock_off_transactions (
    -- v_cr_mtran_no NUMBER,
    -- v_cr_ref_no VARCHAR2,
    -- v_dr_mtran_no NUMBER,
    -- v_include_comm VARCHAR2,
    -- v_post_dt DATE,
    -- v_cr_bal IN OUT NUMBER,
    -- v_cr_com IN OUT NUMBER,
    -- v_alloc_amt IN NUMBER DEFAULT NULL,
    -- v_include_vat VARCHAR2
    -- )
    -- IS
    -- --v_cr_bal NUMBER :=0;
    -- v_dr_bal NUMBER := 0;
    -- v_prem_alloc NUMBER;
    -- v_comm_alloc NUMBER := 0;
    -- v_dr_comm_due NUMBER := 0;
    -- v_param VARCHAR2 (5);
    -- v_appr_comm NUMBER;
    -- v_rnd NUMBER;
    -- v_bcur_rnd NUMBER;
    -- --v_cur_rate NUMBER;
    -- v_amt_to_com NUMBER;
    -- v_amt_to_alloc NUMBER;
    -- v_comm_allocated NUMBER;
    -- errmsg VARCHAR2(1000);
    --
    -- CURSOR dr_cur
    -- IS
    -- SELECT *
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_dr_mtran_no;
    -- BEGIN
    -- BEGIN
    -- SELECT gin_parameters_pkg.get_param_varchar
    -- ('COMM_PAID_ON_FULL_DEBIT')
    -- INTO v_param
    -- FROM DUAL;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error fetching commission payment parameter...');
    -- END;
    --
    -- FOR dr_rec IN dr_cur
    -- LOOP
    -- IF NVL (v_include_comm, 'N') = 'Y'
    -- THEN
    -- v_dr_comm_due :=
    -- ABS (NVL (dr_rec.mtran_commission, 0))
    -- - ( ABS (NVL (dr_rec.mtran_comm_paid, 0))
    -- + ABS (NVL (dr_rec.mtran_comm_payable, 0))
    -- );
    -- --RAISE_ERROR(dr_rec.mtran_balance|| '='||dr_rec.mtran_commission||'='||dr_rec.mtran_comm_paid
    -- -- ||'='||dr_rec.mtran_comm_payable);
    -- v_amt_to_com :=
    -- ABS (NVL (dr_rec.mtran_balance, 0))
    -- + ABS (NVL (dr_rec.mtran_commission, 0))
    -- - ( ABS (NVL (dr_rec.mtran_comm_paid, 0))
    -- + ABS (NVL (dr_rec.mtran_comm_payable, 0))
    -- );
    -- ELSE
    -- v_dr_comm_due := 0;
    -- v_amt_to_com := 0;
    -- END IF;
    --
    -- v_dr_bal := ABS ((dr_rec.mtran_balance));
    --
    -- IF NVL (v_alloc_amt, 0) = 0
    -- OR ABS (NVL (v_alloc_amt, 0)) > ABS (NVL (v_cr_bal, 0))
    -- THEN
    -- v_amt_to_alloc := ABS (NVL (v_cr_bal, 0));
    -- ELSE
    -- v_amt_to_alloc := v_alloc_amt;
    -- END IF;
    --
    -- IF NVL (v_param, 'N') = 'Y'
    -- THEN
    -- IF ABS (v_dr_bal) > NVL (v_amt_to_alloc, 0)
    -- THEN
    -- v_prem_alloc := NVL (v_amt_to_alloc, 0);
    -- ELSE
    -- v_prem_alloc := ABS (v_dr_bal);
    -- END IF;
    -- ELSIF NVL (v_param, 'N') = 'N' AND v_include_comm = 'N'
    -- THEN
    -- IF ABS (v_dr_bal) > NVL (v_amt_to_alloc, 0)
    -- THEN
    -- v_prem_alloc := NVL (v_amt_to_alloc, 0);
    -- ELSE
    -- v_prem_alloc := ABS (v_dr_bal);
    -- END IF;
    -- ELSIF NVL (v_param, 'N') = 'N' AND v_include_comm = 'Y'
    -- THEN
    -- IF ABS (v_dr_bal) = NVL (v_amt_to_alloc, 0)
    -- THEN
    -- v_appr_comm :=
    -- ROUND (( (NVL (v_amt_to_alloc, 0) / v_amt_to_com)
    -- * v_dr_comm_due
    -- ),
    -- 0
    -- );
    -- v_prem_alloc := NVL (v_amt_to_alloc, 0) - v_appr_comm;
    -- ELSE
    -- IF NVL (v_dr_bal, 0) <> 0
    -- THEN
    -- v_appr_comm :=
    -- ROUND (( (NVL (v_amt_to_alloc, 0) / v_amt_to_com)
    -- * v_dr_comm_due
    -- ),
    -- 0
    -- );
    -- v_prem_alloc := ABS (NVL (v_amt_to_alloc, 0)) - v_appr_comm;
    -- ELSE
    -- v_prem_alloc := 0;
    -- END IF;
    -- END IF;
    --
    -- IF ABS (v_dr_bal) < NVL (v_prem_alloc, 0)
    -- THEN
    -- v_prem_alloc := ABS (v_dr_bal);
    -- END IF;
    -- END IF;
    --
    ---- raise_error ('v_prem_alloc= '||v_prem_alloc||' v_amt_to_alloc= '||v_amt_to_alloc
    ---- ||'v_amt_to_com='||v_amt_to_com||'v_dr_comm_due='||v_dr_comm_due||'v_post_dt='||v_post_dt);
    -- IF NVL (v_prem_alloc, 0) != 0
    -- THEN
    -- gis_accounts_utilities.knock_trans (v_cr_mtran_no,
    -- v_cr_ref_no,
    -- dr_rec.mtran_no,
    -- dr_rec.mtran_ref_no,
    -- v_post_dt,
    -- v_prem_alloc,
    -- 'N'
    -- );
    -- ------MOVED TOWARDS END OF PROCEDURE MASINDE
    -- /* gis_accounts_utilities.update_coin_payments
    -- (v_cr_mtran_no,
    -- v_cr_ref_no,
    -- dr_rec.mtran_no,
    -- dr_rec.mtran_ref_no,
    -- v_prem_alloc,
    -- dr_rec.mtran_brn_code,
    -- dr_rec.mtran_client_code,
    -- dr_rec.mtran_cur_code
    -- );*/
    -- END IF;
    --
    -- v_cr_bal := ABS (v_cr_bal) - ABS (NVL (v_prem_alloc, 0));
    -- v_dr_bal := ABS (v_dr_bal) - ABS (NVL (v_prem_alloc, 0));
    --
    -- IF NOT (v_cr_com = 0 AND v_dr_comm_due = 0)
    -- AND (v_alloc_amt > v_prem_alloc)
    -- THEN
    -- IF v_cr_com = 0 AND v_dr_comm_due != 0
    -- THEN
    -- IF ABS (v_cr_bal) > ABS (v_dr_comm_due)
    -- AND (v_alloc_amt - v_prem_alloc) > 0
    -- THEN
    -- IF (v_alloc_amt - v_prem_alloc) > ABS (v_dr_comm_due)
    -- THEN
    -- v_comm_alloc := v_dr_comm_due;
    -- ELSE
    -- v_comm_alloc := v_alloc_amt - v_prem_alloc;
    -- END IF;
    -- ELSE
    -- v_comm_alloc := v_cr_bal;
    -- END IF;
    --
    -- IF ABS (NVL (v_comm_alloc, 0)) > 0
    -- THEN
    -- v_comm_allocated :=
    -- gis_accounts_utilities.update_commission
    -- (v_cr_mtran_no,
    -- v_cr_ref_no,
    -- dr_rec.mtran_no,
    -- dr_rec.mtran_ref_no,
    -- v_comm_alloc,
    -- dr_rec.mtran_brn_code,
    -- dr_rec.mtran_client_code,
    -- dr_rec.mtran_cur_code,
    -- NVL (v_include_comm, 'N'),
    -- NVL (v_include_vat,'N')
    -- );
    -- END IF;
    --
    -- v_cr_bal := ABS (v_cr_bal) - ABS (NVL (v_comm_alloc, 0));
    -- ELSIF v_cr_com != 0 AND v_dr_comm_due = 0
    -- THEN
    -- IF ABS (v_dr_bal) > ABS (v_cr_com)
    -- THEN
    -- v_comm_alloc := v_cr_com;
    -- ELSE
    -- v_comm_alloc := ABS (v_dr_bal);
    -- END IF;
    --
    -- IF ABS (NVL (v_comm_alloc, 0)) > 0
    -- THEN
    -- v_comm_allocated :=
    -- gis_accounts_utilities.update_commission
    -- (dr_rec.mtran_no,
    -- dr_rec.mtran_ref_no,
    -- v_cr_mtran_no,
    -- v_cr_ref_no,
    -- -v_comm_alloc,
    -- dr_rec.mtran_brn_code,
    -- dr_rec.mtran_client_code,
    -- dr_rec.mtran_cur_code,
    -- NVL (v_include_comm, 'N'),
    -- NVL (v_include_vat,'N')
    -- );
    -- END IF;
    --
    -- v_dr_bal := ABS (v_dr_bal) - ABS (NVL (v_comm_alloc, 0));
    -- ELSE
    -- v_comm_alloc := LEAST (v_cr_com, v_dr_comm_due);
    --
    -- IF ABS (NVL (v_comm_alloc, 0)) > 0
    -- THEN
    -- v_comm_allocated :=
    -- gis_accounts_utilities.update_commission
    -- (v_cr_mtran_no,
    -- v_cr_ref_no,
    -- dr_rec.mtran_no,
    -- dr_rec.mtran_ref_no,
    -- v_comm_alloc,
    -- dr_rec.mtran_brn_code,
    -- dr_rec.mtran_client_code,
    -- dr_rec.mtran_cur_code,
    -- NVL (v_include_comm, 'N'),
    -- NVL (v_include_vat,'N')
    -- );
    -- --RAISE_ERROR('FOUR='||v_comm_alloc);
    -- v_comm_allocated :=
    -- gis_accounts_utilities.update_commission
    -- (dr_rec.mtran_no,
    -- dr_rec.mtran_ref_no,
    -- v_cr_mtran_no,
    -- v_cr_ref_no,
    -- -v_comm_alloc,
    -- dr_rec.mtran_brn_code,
    -- dr_rec.mtran_client_code,
    -- dr_rec.mtran_cur_code,
    -- NVL (v_include_comm, 'N'),
    -- NVL (v_include_vat,'N')
    -- );
    -- END IF;
    -- END IF;
    -- END IF;
    --
    -- ----***************************GENERATE COINSURANCE PAYMENTS
    -- --RAISE_eRROR('v_prem_alloc='||v_prem_alloc);
    -- IF NVL (v_prem_alloc, 0) != 0
    -- THEN
    -- gis_accounts_utilities.update_coin_payments
    -- (v_cr_mtran_no,
    -- v_cr_ref_no,
    -- dr_rec.mtran_no,
    -- dr_rec.mtran_ref_no,
    -- v_prem_alloc,
    -- v_comm_allocated,
    -- dr_rec.mtran_brn_code,
    -- dr_rec.mtran_client_code,
    -- dr_rec.mtran_cur_code,
    -- NVL (v_include_comm, 'N'),
    -- NVL (v_include_vat,'N')
    -- );
    -- END IF;
    --
    -- ----***************************VALIDATE ALLOCATIONS
    -- BEGIN
    -- validate_allocations (v_cr_mtran_no, v_dr_mtran_no);
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    --
    -- INSERT INTO gin_master_trans_error_log
    -- (MTRANERR_CODE,MTRANERR_CR_NO,MTRANERR_DR_NO,MTRANERR_DATE,MTRANERR_ERRMSG)
    -- VALUES (cel_code_seq.NEXTVAL, v_cr_mtran_no, v_dr_mtran_no,TRUNC(SYSDATE), 'Error occured on validation of allocations.');
    -- END;
    -- END LOOP;
    -- END;

    PROCEDURE knock_off_transactions (
        v_cr_mtran_no           NUMBER,
        v_cr_ref_no             VARCHAR2,
        v_dr_mtran_no           NUMBER,
        v_include_comm          VARCHAR2,
        v_post_dt               DATE,
        v_cr_bal         IN OUT NUMBER,
        v_cr_com         IN OUT NUMBER,
        v_alloc_amt      IN     NUMBER DEFAULT NULL,
        v_include_vat           VARCHAR2)
    IS
        --v_cr_bal NUMBER :=0;
        v_dr_bal            NUMBER := 0;
        v_prem_alloc        NUMBER;
        v_comm_alloc        NUMBER := 0;
        v_dr_comm_due       NUMBER := 0;
        v_param             VARCHAR2 (5);
        v_appr_comm         NUMBER;
        v_rnd               NUMBER;
        v_bcur_rnd          NUMBER;
        --v_cur_rate NUMBER;
        v_amt_to_com        NUMBER;
        v_amt_to_alloc      NUMBER;
        v_comm_allocated    NUMBER;
        errmsg              VARCHAR2 (1000);
        v_mtran_type        VARCHAR2 (50);
        v_dr_comm_paid      NUMBER;
        v_dr_comm_payable   NUMBER;

        CURSOR dr_cur IS
            SELECT *
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;
    BEGIN
        --   raise_error('v_alloc_amt'||v_alloc_amt||'v_cr_bal'||v_cr_bal);
        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'COMM_PAID_ON_FULL_DEBIT')
              INTO v_param
              FROM DUAL;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching commission payment parameter...');
        END;

        BEGIN
            SELECT mtran_tran_type
              INTO v_mtran_type
              FROM gin_master_transactions
             WHERE mtran_no = v_cr_mtran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                       'Error getting transaction type.....'
                    || 'MTRAN_NO='
                    || v_cr_mtran_no);
        END;



        FOR dr_rec IN dr_cur
        LOOP
            IF NVL (v_include_comm, 'N') = 'Y'
            THEN
                /****commented by Olson to avoid comm payable and comm paid inconsistencies*******/
                --            v_dr_comm_due :=
                --                 ABS (NVL (dr_rec.mtran_commission, 0))
                --               - (  ABS (NVL (dr_rec.mtran_comm_paid, 0))
                --                  + ABS (NVL (dr_rec.mtran_comm_payable, 0)));

                v_dr_comm_paid := get_dr_com_paid (dr_rec.mtran_no);
                v_dr_comm_payable := get_dr_com_payble (dr_rec.mtran_no);



                v_dr_comm_due :=
                      ABS (NVL (dr_rec.mtran_commission, 0))
                    - ((  NVL (v_dr_comm_paid, 0)
                        + (NVL (v_dr_comm_payable, 0))));
                v_amt_to_com :=
                      ABS (NVL (dr_rec.mtran_balance, 0))
                    + ABS (NVL (dr_rec.mtran_commission, 0))
                    - ((  NVL (v_dr_comm_paid, 0)
                        + (NVL (v_dr_comm_payable, 0))));
            -- raise_error('v_dr_comm_payable='||v_dr_comm_payable||'v_dr_comm_paid='||v_dr_comm_paid||'v_dr_comm_due='||v_dr_comm_due||'comm='||dr_rec.mtran_commission);
            ELSE
                v_dr_comm_due := 0;
                v_amt_to_com := 0;
            END IF;

            v_dr_bal := ABS ((dr_rec.mtran_balance));

            --raise_error('v_alloc_amt'||v_alloc_amt||'v_cr_bal'||v_cr_bal);
            IF    NVL (v_alloc_amt, 0) = 0
               OR ABS (NVL (v_alloc_amt, 0)) > ABS (NVL (v_cr_bal, 0))
            THEN
                v_amt_to_alloc := ABS (NVL (v_cr_bal, 0));
            ELSE
                v_amt_to_alloc := v_alloc_amt;
            END IF;

            --        raise_error('v_dr_bal'||v_dr_bal||'v_amt_to_alloc'||v_amt_to_alloc);
            IF NVL (v_param, 'N') = 'Y'
            THEN
                IF ABS (v_dr_bal) > NVL (v_amt_to_alloc, 0)
                THEN
                    v_prem_alloc := NVL (v_amt_to_alloc, 0);
                ELSE
                    --            raise_error('v_dr_bal'||v_dr_bal||'v_amt_to_alloc'||v_amt_to_alloc);
                    v_prem_alloc := ABS (v_dr_bal);
                END IF;
            ELSIF NVL (v_param, 'N') = 'N' AND v_include_comm = 'N'
            THEN
                IF ABS (v_dr_bal) > NVL (v_amt_to_alloc, 0)
                THEN
                    v_prem_alloc := NVL (v_amt_to_alloc, 0);
                ELSE
                    v_prem_alloc := ABS (v_dr_bal);
                END IF;
            ELSIF NVL (v_param, 'N') = 'N' AND v_include_comm = 'Y'
            THEN
                IF ABS (v_dr_bal) = NVL (v_amt_to_alloc, 0)
                THEN
                    v_appr_comm :=
                        ROUND (
                            (  (NVL (v_amt_to_alloc, 0) / v_amt_to_com)
                             * v_dr_comm_due),
                            0);
                    v_prem_alloc := NVL (v_amt_to_alloc, 0) - v_appr_comm;
                ELSE
                    IF NVL (v_dr_bal, 0) <> 0
                    THEN
                        v_appr_comm :=
                            ROUND (
                                (  (NVL (v_amt_to_alloc, 0) / v_amt_to_com)
                                 * v_dr_comm_due),
                                0);
                        v_prem_alloc :=
                            ABS (NVL (v_amt_to_alloc, 0)) - v_appr_comm;
                    ELSE
                        v_prem_alloc := 0;
                    END IF;
                END IF;

                IF ABS (v_dr_bal) < NVL (v_prem_alloc, 0)
                THEN
                    v_prem_alloc := ABS (v_dr_bal);
                END IF;
            END IF;

            --          raise_error ('v_prem_alloc= '||v_prem_alloc||' v_amt_to_alloc= '||v_amt_to_alloc
            --          ||'v_amt_to_com='||v_amt_to_com||'v_dr_comm_due='||v_dr_comm_due||'v_post_dt='||v_post_dt||'v_comm_alloc='||v_comm_alloc);
            IF NVL (v_prem_alloc, 0) != 0
            THEN
                --         raise_error('v_prem_alloc'||v_prem_alloc);
                gis_accounts_utilities.knock_trans (v_cr_mtran_no,
                                                    v_cr_ref_no,
                                                    dr_rec.mtran_no,
                                                    dr_rec.mtran_ref_no,
                                                    v_post_dt,
                                                    v_prem_alloc,
                                                    'N');
            ------MOVED TOWARDS END OF PROCEDURE MASINDE
            /* gis_accounts_utilities.update_coin_payments
            (v_cr_mtran_no,
            v_cr_ref_no,
            dr_rec.mtran_no,
            dr_rec.mtran_ref_no,
            v_prem_alloc,
            dr_rec.mtran_brn_code,
            dr_rec.mtran_client_code,
            dr_rec.mtran_cur_code
            );*/
            END IF;

            v_cr_bal := ABS (v_cr_bal) - ABS (NVL (v_prem_alloc, 0));
            v_dr_bal := ABS (v_dr_bal) - ABS (NVL (v_prem_alloc, 0));

            IF     NOT (v_cr_com = 0 AND v_dr_comm_due = 0)
               AND (v_alloc_amt > v_prem_alloc)
            THEN
                IF v_cr_com = 0 AND v_dr_comm_due != 0
                THEN
                    IF     ABS (v_cr_bal) > ABS (v_dr_comm_due)
                       AND (v_alloc_amt - v_prem_alloc) > 0
                    THEN
                        IF (v_alloc_amt - v_prem_alloc) > ABS (v_dr_comm_due)
                        THEN
                            v_comm_alloc := v_dr_comm_due;
                        ELSE
                            v_comm_alloc := v_alloc_amt - v_prem_alloc;
                        END IF;
                    ELSE
                        v_comm_alloc := v_cr_bal;
                    END IF;

                    IF ABS (NVL (v_comm_alloc, 0)) > 0
                    THEN
                        IF NVL (v_mtran_type, 'XXX') NOT IN ('RPC', 'RCC')
                        THEN
                            v_comm_allocated :=
                                gis_accounts_utilities.update_commission (
                                    v_cr_mtran_no,
                                    v_cr_ref_no,
                                    dr_rec.mtran_no,
                                    dr_rec.mtran_ref_no,
                                    v_comm_alloc,
                                    dr_rec.mtran_brn_code,
                                    dr_rec.mtran_client_code,
                                    dr_rec.mtran_cur_code,
                                    NVL (v_include_comm, 'N'),
                                    NVL (v_include_vat, 'N'));
                        END IF;
                    END IF;

                    v_cr_bal := ABS (v_cr_bal) - ABS (NVL (v_comm_alloc, 0));
                ELSIF v_cr_com != 0 AND v_dr_comm_due = 0
                THEN
                    IF ABS (v_dr_bal) > ABS (v_cr_com)
                    THEN
                        v_comm_alloc := v_cr_com;
                    ELSE
                        v_comm_alloc := ABS (v_dr_bal);
                    END IF;

                    IF ABS (NVL (v_comm_alloc, 0)) > 0
                    THEN
                        v_comm_allocated :=
                            gis_accounts_utilities.update_commission (
                                dr_rec.mtran_no,
                                dr_rec.mtran_ref_no,
                                v_cr_mtran_no,
                                v_cr_ref_no,
                                -v_comm_alloc,
                                dr_rec.mtran_brn_code,
                                dr_rec.mtran_client_code,
                                dr_rec.mtran_cur_code,
                                NVL (v_include_comm, 'N'),
                                NVL (v_include_vat, 'N'));
                    END IF;

                    v_dr_bal := ABS (v_dr_bal) - ABS (NVL (v_comm_alloc, 0));
                ELSE
                    v_comm_alloc := LEAST (v_cr_com, v_dr_comm_due);

                    IF ABS (NVL (v_comm_alloc, 0)) > 0
                    THEN
                        v_comm_allocated :=
                            gis_accounts_utilities.update_commission (
                                v_cr_mtran_no,
                                v_cr_ref_no,
                                dr_rec.mtran_no,
                                dr_rec.mtran_ref_no,
                                v_comm_alloc,
                                dr_rec.mtran_brn_code,
                                dr_rec.mtran_client_code,
                                dr_rec.mtran_cur_code,
                                NVL (v_include_comm, 'N'),
                                NVL (v_include_vat, 'N'));
                        --RAISE_ERROR('FOUR='||v_comm_alloc);
                        v_comm_allocated :=
                            gis_accounts_utilities.update_commission (
                                dr_rec.mtran_no,
                                dr_rec.mtran_ref_no,
                                v_cr_mtran_no,
                                v_cr_ref_no,
                                -v_comm_alloc,
                                dr_rec.mtran_brn_code,
                                dr_rec.mtran_client_code,
                                dr_rec.mtran_cur_code,
                                NVL (v_include_comm, 'N'),
                                NVL (v_include_vat, 'N'));
                    END IF;
                END IF;
            END IF;

            ----***************************GENERATE COINSURANCE PAYMENTS
            --RAISE_eRROR('v_prem_alloc='||v_prem_alloc);
            IF NVL (v_prem_alloc, 0) != 0
            THEN
                gis_accounts_utilities.update_coin_payments (
                    v_cr_mtran_no,
                    v_cr_ref_no,
                    dr_rec.mtran_no,
                    dr_rec.mtran_ref_no,
                    v_prem_alloc,
                    v_comm_allocated,
                    dr_rec.mtran_brn_code,
                    dr_rec.mtran_client_code,
                    dr_rec.mtran_cur_code,
                    NVL (v_include_comm, 'N'),
                    NVL (v_include_vat, 'N'));
            END IF;

            ----***************************VALIDATE ALLOCATIONS
            BEGIN
                validate_allocations (v_cr_mtran_no, v_dr_mtran_no);
            EXCEPTION
                WHEN OTHERS
                THEN
                    INSERT INTO gin_master_trans_error_log (MTRANERR_CODE,
                                                            MTRANERR_CR_NO,
                                                            MTRANERR_DR_NO,
                                                            MTRANERR_DATE,
                                                            MTRANERR_ERRMSG)
                             VALUES (
                                 cel_code_seq.NEXTVAL,
                                 v_cr_mtran_no,
                                 v_dr_mtran_no,
                                 TRUNC (SYSDATE),
                                 'Error occured on validation of allocations.');
            END;
        END LOOP;
    END;



    PROCEDURE validate_allocations (v_cr_mtran_no   IN NUMBER,
                                    v_dr_mtran_no   IN NUMBER)
    IS
        v_alloc_amt    NUMBER;
        v_settle_amt   NUMBER;
        v_cr_cnt       NUMBER;
        v_debit_amt    NUMBER;
        v_dr_cnt       NUMBER;
        v_dr_cr        VARCHAR2 (1);
        v_tmap_code    NUMBER;
    BEGIN
        -- raise_error('v_cr_mtran_no='||v_cr_mtran_no||'v_dr_mtran_no='||v_dr_mtran_no);
        BEGIN
              -- select TMAP_DRCR
              -- INTO v_dr_cr
              -- from GIN_TRAN_MAPPING
              -- where TMAP_CODE in (SELECT MAX(TMAP_CODE)
              -- FROM GIN_TRAN_MAPPING
              -- WHERE TMAP_MTRAN_NO = v_cr_mtran_no);
              SELECT COUNT (1),
                     NVL (mtran_settlement, 0),
                     SUM (
                           DECODE (tmap_drcr, 'C', 1, -1)
                         * ABS (NVL (tmap_amount, 0)))    alloc_amt
                INTO v_cr_cnt, v_settle_amt, v_alloc_amt
                FROM gin_master_transactions, gin_tran_mapping
               WHERE tmap_mtran_no = mtran_no AND mtran_no = v_cr_mtran_no
            GROUP BY mtran_no, NVL (mtran_settlement, 0)
              HAVING ABS (
                         SUM (
                               DECODE (tmap_drcr, 'C', 1, -1)
                             * ABS (NVL (tmap_amount, 0)))) !=
                     ABS (NVL (mtran_settlement, 0));
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_cr_cnt := 0;
            WHEN OTHERS
            THEN
                raise_error (
                       'Error determining the allocated credit ...tran_num:'
                    || v_cr_mtran_no);
        END;

        IF NVL (v_cr_cnt, 0) > 0
        THEN
            NULL;
        --raise_error ( 'Settlement on the credit '|| v_settle_amt|| ' and the allocated amt.'|| v_alloc_amt|| ' Do not tally.' );
        END IF;

        BEGIN
              SELECT COUNT (1),
                     NVL (mtran_settlement, 0),
                     SUM (
                           DECODE (tmap_drcr, 'C', 1, -1)
                         * ABS (NVL (tmap_amount, 0)))
                INTO v_dr_cnt, v_debit_amt, v_alloc_amt
                FROM gin_master_transactions, gin_tran_mapping
               WHERE     tmap_check_mtran_no = mtran_no
                     AND mtran_no = v_dr_mtran_no
            GROUP BY mtran_no, NVL (mtran_settlement, 0)
              HAVING ABS (
                         SUM (
                               DECODE (tmap_drcr, 'C', -1, 1)
                             * ABS (NVL (tmap_amount, 0)))) !=
                     ABS (NVL (mtran_settlement, 0));
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_dr_cnt := 0;
            WHEN OTHERS
            THEN
                raise_error (
                       'Error determining the Debit allocated ...tran_num:'
                    || v_dr_mtran_no);
        END;

        IF NVL (v_dr_cnt, 0) > 0
        THEN
            raise_error (
                   'Settlement on the Debit amt '
                || v_debit_amt
                || ' and the allocated amt.'
                || v_alloc_amt
                || ' Do not tally.'
                || ' Debit Mtran No '
                || v_dr_mtran_no
                || ' Credit Mtran No '
                || v_cr_mtran_no);
        END IF;
    END validate_allocations;



    --PROCEDURE knock_trans (v_cr_mtran_no IN NUMBER,
    -- v_cr_ref_no IN VARCHAR2,
    -- v_dr_mtran_no IN NUMBER,
    -- v_dr_ref_no IN VARCHAR2,
    -- v_post_dt IN DATE,
    -- v_settle_amt IN NUMBER --,
    -- --v_post_dt IN DATE
    -- ,
    -- v_undo IN VARCHAR2 DEFAULT 'N')
    -- IS
    -- v_cnt NUMBER := 0;
    -- v_cnt2 NUMBER := 0;
    -- v_rct_balance NUMBER := 0;
    -- v_rct_code NUMBER;
    -- v_rct_amount NUMBER := 0;
    -- v_cr_client_type VARCHAR2 (50);
    -- v_cr_client_code NUMBER;
    -- v_dr_client_type VARCHAR2 (50);
    -- v_dr_client_code NUMBER;
    -- v_settcr NUMBER;
    -- vtmapcr NUMBER;
    -- v_settcr2 NUMBER;
    -- vtmapcr2 NUMBER;
    -- v_cr_dc VARCHAR2 (2);
    -- v_dr_dc VARCHAR2 (2);
    -- v_cr_authorised VARCHAR2 (2);
    -- v_dr_authorised VARCHAR2 (2);
    -- v_cr_cur_code NUMBER;
    -- v_dr_cur_code NUMBER;
    -- v_cr_bal NUMBER;
    -- v_dr_bal NUMBER;
    -- v_cr_settlemnt NUMBER;
    -- v_dr_settlemnt NUMBER;
    -- v_mtran_no_dr NUMBER;
    -- v_user VARCHAR2 (30)
    -- := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
    -- BEGIN
    -- BEGIN
    -- SELECT mtran_dc,
    -- DECODE (mtran_client_type,
    -- 'IA', 'A',
    -- 'MK', 'A',
    -- 'BD', 'A',
    -- mtran_client_type),
    -- mtran_client_code,
    -- mtran_cur_code,
    -- mtran_balance,
    -- mtran_settlement,
    -- mtran_authorised
    -- INTO v_cr_dc,
    -- v_cr_client_type,
    -- v_cr_client_code,
    -- v_cr_cur_code,
    -- v_cr_bal,
    -- v_cr_settlemnt,
    -- v_cr_authorised
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_cr_mtran_no;
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- raise_error ('CREDIT TRANSACTION NOT FOUND..');
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting credit transactions.');
    -- END;
    --
    -- IF v_cr_client_code IS NULL
    -- THEN
    -- raise_error ('CREDIT TRANSACTION NOT FOUND..');
    -- END IF;
    --
    -- IF v_cr_authorised != 'Y'
    -- THEN
    -- raise_error (
    -- 'Credit transaction has not been authorized. Allocation cancelled..');
    -- END IF;
    --
    -- v_mtran_no_dr := v_dr_mtran_no;
    ---- RAISE_eRROR('v_dr_mtran_no='||v_dr_mtran_no||'v_cr_mtran_no='||v_cr_mtran_no);
    -- BEGIN
    -- SELECT mtran_dc,
    -- DECODE (mtran_client_type,
    -- 'IA', 'A',
    -- 'MK', 'A',
    -- 'BD', 'A',
    -- mtran_client_type),
    -- mtran_client_code,
    -- mtran_cur_code,
    -- mtran_balance,
    -- mtran_settlement,
    -- mtran_authorised
    -- INTO v_dr_dc,
    -- v_dr_client_type,
    -- v_dr_client_code,
    -- v_dr_cur_code,
    -- v_dr_bal,
    -- v_dr_settlemnt,
    -- v_dr_authorised
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_dr_mtran_no;
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- BEGIN
    -- SELECT mtran_dc,
    -- DECODE (mtran_client_type,
    -- 'IA', 'A',
    -- 'MK', 'A',
    -- 'BD', 'A',
    -- mtran_client_type),
    -- mtran_client_code,
    -- mtran_cur_code,
    -- mtran_balance,
    -- mtran_settlement,
    -- mtran_authorised,
    -- mtran_no
    -- INTO v_dr_dc,
    -- v_dr_client_type,
    -- v_dr_client_code,
    -- v_dr_cur_code,
    -- v_dr_bal,
    -- v_dr_settlemnt,
    -- v_dr_authorised,
    -- v_mtran_no_dr
    -- FROM gin_master_transactions
    -- WHERE mtran_pol_batch_no = v_dr_mtran_no AND mtran_dc = 'D';
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- NULL;
    -- -- raise_error ('DEBIT TRANSACTION NOT FOUND..'||v_dr_mtran_no);
    -- END;
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting debit transactions.');
    -- END;
    --
    -- IF v_mtran_no_dr IS NOT NULL
    -- THEN
    -- --raise_error('v_dr_bal='||v_dr_bal||' v_cr_bal='||v_cr_bal);
    -- IF v_dr_client_code IS NULL
    -- THEN
    -- raise_error ('DEBIT TRANSACTION NOT FOUND..');
    -- END IF;
    --
    -- IF NOT ( (v_cr_client_type = v_dr_client_type)
    -- AND (v_cr_client_code = v_dr_client_code))
    -- THEN
    -- raise_error (
    -- 'Both credit and debit transaction must have the same client type and code '
    -- || v_cr_client_type
    -- || ';'
    -- || v_dr_client_type
    -- || ';'
    -- || v_cr_mtran_no
    -- || ';'
    -- || v_dr_mtran_no);
    -- END IF;
    --
    --IF v_dr_dc= 'C' THEN
    --raise_error('v_dr_bal='||v_dr_bal||' v_cr_bal='||v_cr_bal||'v_dr_dc='||v_dr_dc);
    --END IF;
    -- IF v_dr_dc != 'D'
    -- THEN
    -- raise_error (
    -- 'Allocation must be done between credit and debit transaction..v_dr_dc='||v_dr_dc||'v_dr_mtran_no='||v_dr_mtran_no);
    -- END IF;
    --
    -- IF v_dr_authorised != 'Y'
    -- THEN
    -- raise_error (
    -- 'Debit transaction has not been authorized. Allocation cancelled..'
    -- || v_dr_mtran_no);
    -- END IF;
    --
    -- IF v_cr_client_code != v_dr_client_code
    -- THEN
    -- raise_error (
    -- 'Allocation cannot be done where credit and debit accounts are different, Crosscheck the allocation ...');
    -- END IF;
    --
    -- IF v_cr_cur_code != v_dr_cur_code
    -- THEN
    -- raise_error (
    -- 'Allocation cannot be done where credit and debit currencies are different, Crosscheck the allocation ...');
    -- END IF;
    --
    -- IF NVL (v_undo, 'N') != 'Y'
    -- THEN
    -- IF ABS (NVL (v_settle_amt, 0)) >
    -- LEAST (ABS (NVL (v_dr_bal, 0)), ABS (NVL (v_cr_bal, 0)))
    -- THEN
    -- raise_error (
    -- 'The allocated amount for settlement '
    -- || ABS (NVL (v_settle_amt, 0))
    -- || ' can not be greater than the Debit or Credit balance'
    -- || LEAST (ABS (NVL (v_dr_bal, 0)), ABS (NVL (v_cr_bal, 0)))||'v_dr_bal='||v_dr_bal||'v_cr_bal='||v_cr_bal);
    -- END IF;
    -- ELSE
    -- --raise_error('v_settle_amt='||v_settle_amt||' v_dr_settlemnt='||v_dr_settlemnt||' v_cr_settlemnt='||v_cr_settlemnt);
    -- IF ABS (NVL (v_settle_amt, 0)) >
    -- LEAST (ABS (NVL (v_dr_settlemnt, 0)),
    -- ABS (NVL (v_cr_settlemnt, 0)))
    -- THEN
    -- null;--raise_error ('The allocated amount for settlement '|| ABS (NVL (v_settle_amt, 0))|| ' can not be greater than the Debit or Credit settlements '|| ABS (NVL (v_dr_settlemnt, 0))||';'|| ABS (NVL (v_cr_settlemnt, 0)));
    -- END IF;
    -- END IF;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_balance =
    -- NVL (mtran_balance, 0)
    -- - ( DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
    -- * ABS (NVL (v_settle_amt, 0))
    -- * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
    -- mtran_settlement =
    -- NVL (mtran_settlement, 0)
    -- + ( DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
    -- * ABS (NVL (v_settle_amt, 0))
    -- * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
    -- mtran_posting_date = v_post_dt ---TRUNC(SYSDATE)
    -- WHERE mtran_no = v_cr_mtran_no;
    --
    -- DBMS_OUTPUT.put_line ('v_settle_amt = ' || v_settle_amt||'v_cr_mtran_no='||v_cr_mtran_no||'v_mtran_no_dr='||v_mtran_no_dr);
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_balance =
    -- NVL (mtran_balance, 0)
    -- - ( DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
    -- * ABS (NVL (v_settle_amt, 0))
    -- * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
    -- mtran_settlement =
    -- NVL (mtran_settlement, 0)
    -- + ( DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
    -- * ABS (NVL (v_settle_amt, 0))
    -- * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
    -- mtran_posting_date = v_post_dt ---TRUNC(SYSDATE)
    -- WHERE mtran_no = v_mtran_no_dr;
    --
    -- BEGIN
    -- INSERT INTO gin_tran_mapping (tmap_code,
    -- tmap_mtran_no,
    -- tmap_mtran_ref_no,
    -- tmap_check_mtran_no,
    -- tmap_amount,
    -- tmap_drcr,
    -- tmap_check_mtran_ref_no,
    -- tmap_posting_date,
    -- tmap_posted_by,
    -- tmap_status)
    -- VALUES (
    -- TO_NUMBER (
    -- TO_CHAR (SYSDATE, 'YYYY')
    -- || gin_tmap_code_seq.NEXTVAL),
    -- v_cr_mtran_no,
    -- v_cr_ref_no,
    -- v_mtran_no_dr,
    -- -ABS (NVL (v_settle_amt, 0))
    -- * DECODE (NVL (v_undo, 'N'), 'Y', -1, 1),
    -- DECODE (NVL (v_undo, 'N'), 'Y', 'D', 'C'),
    -- v_dr_ref_no,
    -- TRUNC (SYSDATE),
    -- v_user,
    -- v_undo);
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_application_error (
    -- -20001,
    -- 'ADD MAPPING REC' || SQLERRM (SQLCODE));
    -- END;
    --
    -- BEGIN
    -- SELECT mtran_balance, mtran_amount, mtran_rct_code
    -- INTO v_rct_balance, v_rct_amount, v_rct_code
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_cr_mtran_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_application_error (
    -- -20001,
    -- 'Error Getting Receipt transaction'
    -- || v_cr_mtran_no
    -- || '='
    -- || SQLERRM (SQLCODE));
    -- END;
    --
    -- BEGIN
    -- SELECT COUNT (1), mtran_settlement, SUM (NVL (tmap_amount, 0))
    -- INTO v_cnt, v_settcr, vtmapcr
    -- FROM gin_master_transactions, gin_tran_mapping
    -- WHERE tmap_mtran_no = mtran_no AND mtran_no = v_cr_mtran_no
    -- GROUP BY mtran_no, mtran_settlement
    -- HAVING ABS (mtran_settlement) !=
    -- ABS (SUM (NVL (tmap_amount, 0)));
    --
    -- SELECT COUNT (1), mtran_settlement, SUM (NVL (tmap_amount, 0))
    -- INTO v_cnt2, v_settcr2, vtmapcr2
    -- FROM gin_master_transactions, gin_tran_mapping
    -- WHERE tmap_check_mtran_no = mtran_no
    -- AND mtran_no = v_mtran_no_dr
    -- GROUP BY mtran_no, mtran_settlement
    -- HAVING ABS (mtran_settlement) !=
    -- ABS (SUM (NVL (tmap_amount, 0)));
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- v_cnt := 0;
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error checking allocation amounts..');
    -- END;
    --
    -- IF NVL (v_cnt, 0) != 0 OR NVL (v_cnt2, 0) != 0
    -- THEN
    -- INSERT
    -- INTO load_clm_no_pol_x (costtodate,
    -- latestestimate,
    -- description)
    -- VALUES (
    -- v_cr_mtran_no,
    -- v_mtran_no_dr,
    -- v_cnt
    -- || ';;'
    -- || v_settcr
    -- || ';;'
    -- || vtmapcr
    -- || ';;'
    -- || v_cnt2
    -- || ';;'
    -- || v_settcr2
    -- || ';;'
    -- || vtmapcr2);
    --
    -- DBMS_OUTPUT.put_line (
    -- v_cr_mtran_no
    -- || ';;'
    -- || v_dr_mtran_no
    -- || ';;'
    -- || v_cnt
    -- || ';;'
    -- || v_settcr
    -- || ';;'
    -- || vtmapcr
    -- || ';;'
    -- || v_cnt2
    -- || ';;'
    -- || v_settcr2
    -- || ';;'
    -- || vtmapcr2);
    -- --RAISE_ERROR('Error checking allocation amounts do not tally with the transaction settlement amount..');
    -- END IF;
    --
    -- IF v_rct_balance = 0
    -- THEN
    -- fms_rcts_pkg.update_allocated_rcts (v_rct_code,
    -- v_undo,
    -- v_rct_balance);
    -- ELSIF ABS (v_rct_balance) = ABS (v_rct_amount)
    -- THEN
    -- fms_rcts_pkg.update_allocated_rcts (v_rct_code,
    -- v_undo,
    -- v_rct_balance);
    -- END IF;
    -- END IF;
    --
    --
    --
    ----ND IF;
    -- -- raise_error ('Error checking allocation amounts..');
    -- -- EXCEPTION
    -- -- WHEN OTHERS
    -- -- THEN
    -- -- raise_application_error (-20001, 'KNOCK TRN ' || SQLERRM (SQLCODE));
    -- END;
    --
    --
    PROCEDURE knock_trans (v_cr_mtran_no   IN NUMBER,
                           v_cr_ref_no     IN VARCHAR2,
                           v_dr_mtran_no   IN NUMBER,
                           v_dr_ref_no     IN VARCHAR2,
                           v_post_dt       IN DATE,
                           v_settle_amt    IN NUMBER                       --,
                                                    --v_post_dt IN DATE
                                                    ,
                           v_undo          IN VARCHAR2 DEFAULT 'N')
    IS
        v_cnt              NUMBER := 0;
        v_cnt2             NUMBER := 0;
        v_rct_balance      NUMBER := 0;
        v_rct_code         NUMBER;
        v_rct_amount       NUMBER := 0;
        v_cr_client_type   VARCHAR2 (50);
        v_cr_client_code   NUMBER;
        v_dr_client_type   VARCHAR2 (50);
        v_dr_client_code   NUMBER;
        v_settcr           NUMBER;
        vtmapcr            NUMBER;
        v_settcr2          NUMBER;
        vtmapcr2           NUMBER;
        v_cr_dc            VARCHAR2 (2);
        v_dr_dc            VARCHAR2 (2);
        v_cr_authorised    VARCHAR2 (2);
        v_dr_authorised    VARCHAR2 (2);
        v_cr_cur_code      NUMBER;
        v_dr_cur_code      NUMBER;
        v_cr_bal           NUMBER;
        v_dr_bal           NUMBER;
        v_cr_settlemnt     NUMBER;
        v_dr_settlemnt     NUMBER;
        v_mtran_no_dr      NUMBER;
        v_user             VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_cr_tran_type     VARCHAR2 (30);
        v_dr_tran_type     VARCHAR2 (30);
        v_alloc_mtran_no   NUMBER;
    BEGIN
        --   RAISE_ERROR(v_settle_amt);
        BEGIN
            SELECT mtran_dc,
                   DECODE (mtran_client_type,
                           'IA', 'A',
                           'MK', 'A',
                           'BD', 'A',
                           mtran_client_type),
                   mtran_client_code,
                   mtran_cur_code,
                   mtran_balance,
                   mtran_settlement,
                   mtran_authorised,
                   mtran_tran_type
              INTO v_cr_dc,
                   v_cr_client_type,
                   v_cr_client_code,
                   v_cr_cur_code,
                   v_cr_bal,
                   v_cr_settlemnt,
                   v_cr_authorised,
                   v_cr_tran_type
              FROM gin_master_transactions
             WHERE mtran_no = v_cr_mtran_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_error ('CREDIT TRANSACTION NOT FOUND..');
            WHEN OTHERS
            THEN
                raise_error ('Error getting credit transactions.');
        END;

        IF v_cr_client_code IS NULL
        THEN
            raise_error ('CREDIT TRANSACTION NOT FOUND..');
        END IF;

        IF v_cr_authorised != 'Y'
        THEN
            raise_error (
                'Credit transaction has not been authorized. Allocation cancelled..');
        END IF;

        v_mtran_no_dr := v_dr_mtran_no;

        -- RAISE_eRROR('v_dr_mtran_no='||v_dr_mtran_no||'v_cr_mtran_no='||v_cr_mtran_no);
        BEGIN
            SELECT mtran_dc,
                   DECODE (mtran_client_type,
                           'IA', 'A',
                           'MK', 'A',
                           'BD', 'A',
                           mtran_client_type),
                   mtran_client_code,
                   mtran_cur_code,
                   mtran_balance,
                   mtran_settlement,
                   mtran_authorised,
                   mtran_tran_type
              INTO v_dr_dc,
                   v_dr_client_type,
                   v_dr_client_code,
                   v_dr_cur_code,
                   v_dr_bal,
                   v_dr_settlemnt,
                   v_dr_authorised,
                   v_dr_tran_type
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                BEGIN
                    SELECT mtran_dc,
                           DECODE (mtran_client_type,
                                   'IA', 'A',
                                   'MK', 'A',
                                   'BD', 'A',
                                   mtran_client_type),
                           mtran_client_code,
                           mtran_cur_code,
                           mtran_balance,
                           mtran_settlement,
                           mtran_authorised,
                           mtran_no,
                           mtran_tran_type
                      INTO v_dr_dc,
                           v_dr_client_type,
                           v_dr_client_code,
                           v_dr_cur_code,
                           v_dr_bal,
                           v_dr_settlemnt,
                           v_dr_authorised,
                           v_mtran_no_dr,
                           v_dr_tran_type
                      FROM gin_master_transactions
                     WHERE     mtran_pol_batch_no = v_dr_mtran_no
                           AND mtran_dc = 'D';
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                -- raise_error ('DEBIT TRANSACTION NOT FOUND..'||v_dr_mtran_no);
                END;
            WHEN OTHERS
            THEN
                raise_error ('Error getting debit transactions.');
        END;


        IF v_dr_tran_type IN ('PM', 'PMI') AND v_dr_dc = 'D'
        THEN
            IF v_cr_tran_type IN ('RPC', 'RCC')
            THEN
                v_alloc_mtran_no := v_cr_mtran_no;
            END IF;
        ELSE
            v_alloc_mtran_no := NULL;
        END IF;

        IF v_mtran_no_dr IS NOT NULL
        THEN
            --raise_error('v_dr_bal='||v_dr_bal||' v_cr_bal='||v_cr_bal);
            IF v_dr_client_code IS NULL
            THEN
                raise_error ('DEBIT TRANSACTION NOT FOUND..');
            END IF;

            IF NOT (    (v_cr_client_type = v_dr_client_type)
                    AND (v_cr_client_code = v_dr_client_code))
            THEN
                raise_error (
                       'Both credit and debit transaction must have the same client type and code '
                    || v_cr_client_type
                    || ';'
                    || v_dr_client_type
                    || ';'
                    || v_cr_mtran_no
                    || ';'
                    || v_dr_mtran_no);
            END IF;

            IF v_dr_dc = 'C'
            THEN
                raise_error (
                       'v_dr_bal='
                    || v_dr_bal
                    || ' v_cr_bal='
                    || v_cr_bal
                    || 'v_dr_dc='
                    || v_dr_dc);
            END IF;

            IF v_dr_dc != 'D'
            THEN
                raise_error (
                       'Allocation must be done between credit and debit transaction..v_dr_dc='
                    || v_dr_dc
                    || 'v_dr_mtran_no='
                    || v_dr_mtran_no);
            END IF;

            IF v_dr_authorised != 'Y'
            THEN
                raise_error (
                       'Debit transaction has not been authorized. Allocation cancelled..'
                    || v_dr_mtran_no);
            END IF;

            IF v_cr_client_code != v_dr_client_code
            THEN
                raise_error (
                    'Allocation cannot be done where credit and debit accounts are different, Crosscheck the allocation ...');
            END IF;

            IF v_cr_cur_code != v_dr_cur_code
            THEN
                raise_error (
                    'Allocation cannot be done where credit and debit currencies are different, Crosscheck the allocation ...');
            END IF;

            IF NVL (v_undo, 'N') != 'Y'
            THEN
                IF ABS (NVL (v_settle_amt, 0)) >
                   LEAST (ABS (NVL (v_dr_bal, 0)), ABS (NVL (v_cr_bal, 0)))
                THEN
                    raise_error (
                           'The allocated amount for settlement '
                        || ABS (NVL (v_settle_amt, 0))
                        || ' can not be greater than the Debit or Credit balance'
                        || LEAST (ABS (NVL (v_dr_bal, 0)),
                                  ABS (NVL (v_cr_bal, 0)))
                        || 'v_dr_bal='
                        || v_dr_bal
                        || 'v_cr_bal='
                        || v_cr_bal
                        || 'v_cr_mtran_no='
                        || v_cr_mtran_no);
                END IF;
            ELSE
                --raise_error('v_settle_amt='||v_settle_amt||' v_dr_settlemnt='||v_dr_settlemnt||' v_cr_settlemnt='||v_cr_settlemnt);
                IF ABS (NVL (v_settle_amt, 0)) >
                   LEAST (ABS (NVL (v_dr_settlemnt, 0)),
                          ABS (NVL (v_cr_settlemnt, 0)))
                THEN
                    NULL; --raise_error ('The allocated amount for settlement '|| ABS (NVL (v_settle_amt, 0))|| ' can not be greater than the Debit or Credit settlements '|| ABS (NVL (v_dr_settlemnt, 0))||';'|| ABS (NVL (v_cr_settlemnt, 0)));
                END IF;
            END IF;

            UPDATE gin_master_transactions
               SET mtran_balance =
                         NVL (mtran_balance, 0)
                       - (  DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
                          * ABS (NVL (v_settle_amt, 0))
                          * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
                   mtran_settlement =
                         NVL (mtran_settlement, 0)
                       + (  DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
                          * ABS (NVL (v_settle_amt, 0))
                          * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
                   mtran_posting_date = v_post_dt            ---TRUNC(SYSDATE)
             WHERE mtran_no = v_cr_mtran_no;

            DBMS_OUTPUT.put_line (
                   'v_settle_amt = '
                || v_settle_amt
                || 'v_cr_mtran_no='
                || v_cr_mtran_no
                || 'v_mtran_no_dr='
                || v_mtran_no_dr);

            UPDATE gin_master_transactions
               SET mtran_balance =
                         NVL (mtran_balance, 0)
                       - (  DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
                          * ABS (NVL (v_settle_amt, 0))
                          * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
                   mtran_settlement =
                         NVL (mtran_settlement, 0)
                       + (  DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
                          * ABS (NVL (v_settle_amt, 0))
                          * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
                   mtran_posting_date = v_post_dt,           ---TRUNC(SYSDATE)
                   mtran_alloc_mtran_no = v_alloc_mtran_no
             WHERE mtran_no = v_mtran_no_dr;

            BEGIN
                INSERT INTO gin_tran_mapping (tmap_code,
                                              tmap_mtran_no,
                                              tmap_mtran_ref_no,
                                              tmap_check_mtran_no,
                                              tmap_amount,
                                              tmap_drcr,
                                              tmap_check_mtran_ref_no,
                                              tmap_posting_date,
                                              tmap_posted_by,
                                              tmap_status)
                         VALUES (
                             TO_NUMBER (
                                    TO_CHAR (SYSDATE, 'YYYY')
                                 || gin_tmap_code_seq.NEXTVAL),
                             v_cr_mtran_no,
                             v_cr_ref_no,
                             v_mtran_no_dr,
                               -ABS (NVL (v_settle_amt, 0))
                             * DECODE (NVL (v_undo, 'N'), 'Y', -1, 1),
                             DECODE (NVL (v_undo, 'N'), 'Y', 'D', 'C'),
                             v_dr_ref_no,
                             TRUNC (SYSDATE),
                             v_user,
                             v_undo);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                        'ADD MAPPING REC' || SQLERRM (SQLCODE));
            END;

            BEGIN
                SELECT mtran_balance, mtran_amount, mtran_rct_code
                  INTO v_rct_balance, v_rct_amount, v_rct_code
                  FROM gin_master_transactions
                 WHERE mtran_no = v_cr_mtran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'Error Getting Receipt transaction'
                        || v_cr_mtran_no
                        || '='
                        || SQLERRM (SQLCODE));
            END;

            BEGIN
                  SELECT COUNT (1),
                         mtran_settlement,
                         SUM (NVL (tmap_amount, 0))
                    INTO v_cnt, v_settcr, vtmapcr
                    FROM gin_master_transactions, gin_tran_mapping
                   WHERE tmap_mtran_no = mtran_no AND mtran_no = v_cr_mtran_no
                GROUP BY mtran_no, mtran_settlement
                  HAVING ABS (mtran_settlement) !=
                         ABS (SUM (NVL (tmap_amount, 0)));

                  SELECT COUNT (1),
                         mtran_settlement,
                         SUM (NVL (tmap_amount, 0))
                    INTO v_cnt2, v_settcr2, vtmapcr2
                    FROM gin_master_transactions, gin_tran_mapping
                   WHERE     tmap_check_mtran_no = mtran_no
                         AND mtran_no = v_mtran_no_dr
                GROUP BY mtran_no, mtran_settlement
                  HAVING ABS (mtran_settlement) !=
                         ABS (SUM (NVL (tmap_amount, 0)));
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_cnt := 0;
                WHEN OTHERS
                THEN
                    raise_error ('Error checking allocation amounts..');
            END;

            IF NVL (v_cnt, 0) != 0 OR NVL (v_cnt2, 0) != 0
            THEN
                INSERT INTO load_clm_no_pol_x (costtodate,
                                               latestestimate,
                                               description)
                         VALUES (
                             v_cr_mtran_no,
                             v_mtran_no_dr,
                                v_cnt
                             || ';;'
                             || v_settcr
                             || ';;'
                             || vtmapcr
                             || ';;'
                             || v_cnt2
                             || ';;'
                             || v_settcr2
                             || ';;'
                             || vtmapcr2);

                DBMS_OUTPUT.put_line (
                       v_cr_mtran_no
                    || ';;'
                    || v_dr_mtran_no
                    || ';;'
                    || v_cnt
                    || ';;'
                    || v_settcr
                    || ';;'
                    || vtmapcr
                    || ';;'
                    || v_cnt2
                    || ';;'
                    || v_settcr2
                    || ';;'
                    || vtmapcr2);
            --RAISE_ERROR('Error checking allocation amounts do not tally with the transaction settlement amount..');
            END IF;

            IF v_rct_balance = 0
            THEN
                fms_rcts_pkg.update_allocated_rcts (v_rct_code,
                                                    v_undo,
                                                    v_rct_balance);
            ELSIF ABS (v_rct_balance) = ABS (v_rct_amount)
            THEN
                fms_rcts_pkg.update_allocated_rcts (v_rct_code,
                                                    v_undo,
                                                    v_rct_balance);
            END IF;
        END IF;
    --ND IF;
    -- raise_error ('Error checking allocation amounts..');
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_application_error (-20001, 'KNOCK TRN ' || SQLERRM (SQLCODE));
    END;

    PROCEDURE auth_comm_pymnts (v_date_from     IN DATE,
                                v_date_to       IN DATE,
                                v_post_option   IN VARCHAR2,
                                v_in_pyment     IN VARCHAR2 DEFAULT 'Y')
    IS
        v_user                    VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        v_user_code               NUMBER;
        v_sys_code                NUMBER;
        v_tran_status             VARCHAR2 (2);
        vfrmname                  VARCHAR2 (15);
        v_facil_name              VARCHAR2 (50);
        v_facil_code              NUMBER;
        msg                       VARCHAR2 (100);
        al_id                     NUMBER;
        v_vchr_no                 VARCHAR2 (20);
        v_org_code                NUMBER;
        v_cnt                     NUMBER := 0;
        v_tot_cnt                 NUMBER := 0;
        v_update                  VARCHAR2 (5);
        v_agn_con_code            VARCHAR2 (10);
        v_iptpecode               VARCHAR2 (15);
        v_option                  VARCHAR2 (15);
        v_date                    DATE := TRUNC (SYSDATE);
        v_mtran_no                NUMBER;
        v_cr_mtran_no             NUMBER;
        v_cr_ref_no               VARCHAR2 (35);
        v_cr_bal                  NUMBER;
        v_cr_com                  NUMBER;
        v_pol_no                  VARCHAR2 (35);
        v_copdt_code              NUMBER;
        v_tran_no                 NUMBER := 0;
        v_cr_rc_mtran_no          NUMBER;
        v_cr_rc_ref_no            VARCHAR2 (35);
        v_cr_rc_bal               NUMBER;
        v_cr_rc_com               NUMBER;
        v_mtran_cr_no             NUMBER;
        v_mtran_dr_no             NUMBER;
        v_cr_comm                 NUMBER;
        v_cop_cr_mtran_no         NUMBER;
        v_cop_cr_ref_no           VARCHAR2 (30);
        v_cr_mtran_bal            NUMBER;
        v_webserv_param           gin_parameters.param_value%TYPE;
        v_webserv_address_param   gin_parameters.param_value%TYPE;
        v_req_result              VARCHAR2 (2000);
        v_req_result1             VARCHAR2 (2000);
        vdisplaynumber            VARCHAR2 (30);
        vyear                     VARCHAR2 (30);
        vmonth                    VARCHAR2 (30);
        vpaymenttype              VARCHAR2 (30);
        vamount                   VARCHAR2 (30);
        vwhtax                    VARCHAR2 (30);

        CURSOR cur_comm IS
              SELECT                                              ---cop_code,
                     cop_agn_code,
                     cop_brn_code,
                     NVL (agn_payee, agn_name)
                         agn_name,
                     agn_payee,
                     agn_act_code,
                     agn_comm_allowed,
                     agn_con_code,
                     agn_sht_desc,
                     act_type_id,
                     cop_cur_code,
                     act_account_type,
                     SUM (NVL (cop_comm_amt, 0))
                         comm_amt,
                     SUM (NVL (cop_whdtax_amt, 0))
                         whtax,
                     SUM (NVL (cop_ovride_comm_amt, 0))
                         ovrde_comm,
                     SUM (NVL (cop_ovride_whdtax_amt, 0))
                         ovrde_whtax,
                       SUM (NVL (cop_comm_amt, 0))
                     + SUM (
                             DECODE (SIGN (NVL (cop_comm_amt, 0)), -1, 1, -1)
                           * ABS (NVL (cop_whdtax_amt, 0)))
                     + SUM (
                             DECODE (SIGN (NVL (cop_comm_amt, 0)), -1, 1, -1)
                           * ABS (NVL (cop_comm_levy_amt, 0)))
                         net_comm,
                     MAX (cop_dr_mtran_no)
                         cop_dr_mtran_no,
                     COUNT (1)
                         cnt,
                     SUM (NVL (cop_comm_levy_amt, 0))
                         comm_levy
                FROM gin_commission_pymts, tqc_agencies, tqc_account_types
               WHERE     cop_agn_code = agn_code
                     AND agn_act_code = act_code
                     AND NVL (cop_authorized, 'N') != 'Y'
                     AND NVL (cop_paid, 'N') != 'Y'
                     AND NVL (cop_checked, 'N') = 'Y'
                     AND cop_date BETWEEN NVL (v_date_from, cop_date)
                                      AND NVL (v_date_to, cop_date)
              HAVING       SUM (NVL (cop_comm_amt, 0))
                         + SUM (NVL (cop_whdtax_amt, 0)) !=
                         0
                     --AND NVL(GIS_ACCOUNTS_UTILITIES.Trans_balance(COP_DR_MTRAN_NO),0) =0
                     AND SIGN (
                               SUM (NVL (cop_comm_amt, 0))
                             + SUM (NVL (cop_whdtax_amt, 0))
                             + SUM (NVL (cop_comm_levy_amt, 0))) =
                         1
            GROUP BY                                               --cop_code,
                     cop_agn_code,
                     cop_brn_code,
                     agn_name,
                     agn_payee,
                     agn_act_code,
                     agn_comm_allowed,
                     act_account_type,
                     agn_con_code,
                     agn_sht_desc,
                     act_type_id,
                     cop_cur_code                                          --,
                                 -- cop_dr_mtran_no
                                 ;

        CURSOR cur_comm_dtls (v_agn_code IN NUMBER, v_brn_code IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   cop_comm_amt     grosscomm,
                   cop_net_comm     netcomm,
                   act_type_id
              FROM gin_commission_pymts, tqc_agencies, tqc_account_types
             WHERE     cop_agn_code = agn_code
                   AND agn_act_code = act_code
                   AND NVL (cop_authorized, 'N') != 'Y'
                   AND NVL (cop_paid, 'N') != 'Y'
                   AND NVL (cop_checked, 'N') = 'Y'
                   AND cop_agn_code = v_agn_code
                   AND cop_brn_code = v_brn_code
                   AND cop_date BETWEEN NVL (v_date_from, cop_date)
                                    AND NVL (v_date_to, cop_date);
    BEGIN
        BEGIN
            SELECT COUNT (1)
              INTO v_tot_cnt
              FROM gin_commission_pymts
             WHERE     NVL (cop_authorized, 'N') != 'Y'
                   AND NVL (cop_paid, 'N') != 'Y'
                   AND NVL (cop_checked, 'N') = 'Y'
                   --AND NVL(GIS_ACCOUNTS_UTILITIES.Trans_balance(COP_DR_MTRAN_NO),0) =0
                   --AND COP_DATE <= v_date_from;
                   AND cop_date BETWEEN NVL (v_date_from, cop_date)
                                    AND NVL (v_date_to, cop_date);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('UNABLE TO COUNT RECORDS...');
        END;

        IF NVL (v_tot_cnt, 0) = 0
        THEN
            raise_error ('NO COMMISSION PAYMENTS TO AUTHORISE..');
        END IF;

        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = v_user;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                       'ERROR FETCHING CURRENT SYSTEM USER <'
                    || v_user
                    || '>.......');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'WEBSERV_COMM_POSTING_HRMS_APPLIC')
              INTO v_webserv_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_webserv_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching WEBSERV_COMM_POSTING_HRMS_APPLIC parameter...');
        END;

        IF NVL (v_webserv_param, 'N') = 'Y'
        THEN
            BEGIN
                SELECT gin_parameters_pkg.get_param_varchar (
                           'WEBSERVICES_ADDRESS')
                  INTO v_webserv_address_param
                  FROM DUAL;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error fetching WEBSERVICES_ADDRESS parameter...');
            END;
        END IF;

        BEGIN
            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                   || ggt_trans_no_seq.NEXTVAL
              INTO v_tran_no
              FROM DUAL;

            INSERT INTO gin_gis_transactions (ggt_trans_no,
                                              ggt_btr_trans_code,
                                              ggt_done_by,
                                              ggt_done_date,
                                              ggt_uw_clm_tran,
                                              ggt_trans_date,
                                              ggt_old_tran_no,
                                              ggt_effective_date,
                                              ggt_status)
                 VALUES (v_tran_no,
                         'COM',
                         v_user,
                         TRUNC (SYSDATE),
                         'A',
                         TRUNC (SYSDATE),
                         NULL,
                         TRUNC (SYSDATE),
                         NULL);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error Creating transaction for auth ...');
        END;

        BEGIN
            FOR cur_comm_rec IN cur_comm
            LOOP
                BEGIN
                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                           || gin_copdt_code_seq.NEXTVAL
                      INTO v_copdt_code
                      FROM DUAL;

                    INSERT INTO gin_comm_pymt_dtls (copdt_code,
                                                    copdt_agn_code,
                                                    copdt_date,
                                                    copdt_comm_amt,
                                                    copdt_paid,
                                                    copdt_trans_no,
                                                    copdt_brn_code,
                                                    copdt_prepared_by,
                                                    copdt_bru_code,
                                                    copdt_whdtax_amt,
                                                    copdt_drcr,
                                                    copdt_net_comm,
                                                    copdt_ovride_comm_amt,
                                                    copdt_ovride_whdtax_amt,
                                                    copdt_cur_code,
                                                    copdt_act_type,
                                                    copdt_payee,
                                                    copdt_agn_con_code,
                                                    copdt_authorized,
                                                    copdt_ovride_net_amt,
                                                    copdt_comm_levy_amt)
                             VALUES (
                                 v_copdt_code,
                                 cur_comm_rec.cop_agn_code,
                                 TRUNC (SYSDATE),
                                 (cur_comm_rec.comm_amt),
                                 'N',
                                 v_tran_no,
                                 cur_comm_rec.cop_brn_code,
                                 v_user,
                                 NULL,
                                 (cur_comm_rec.whtax),
                                 DECODE (SIGN (cur_comm_rec.comm_amt),
                                         1, 'C',
                                         'D'),
                                 (cur_comm_rec.net_comm),
                                 NULL,
                                 NULL,
                                 cur_comm_rec.cop_cur_code,
                                 cur_comm_rec.act_type_id,
                                 cur_comm_rec.agn_name,
                                 cur_comm_rec.agn_con_code,
                                 'N',
                                 NULL,
                                 cur_comm_rec.comm_levy);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error creating commission voucher details....');
                END;

                IF v_in_pyment = 'Y'
                THEN
                    IF v_post_option IN ('CHQ',
                                         'EFT',
                                         'RTGS',
                                         'MOB')
                    THEN
                        gin_interfaces_pkg.prc_com_pymt (v_copdt_code,
                                                         v_user,
                                                         v_post_option);
                    ELSIF v_post_option IN ('CR')
                    THEN
                        BEGIN
                            BEGIN
                                SELECT TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY')
                                           || gin_mtran_no_seq.NEXTVAL)
                                  INTO v_mtran_cr_no
                                  FROM DUAL;

                                INSERT INTO gin_master_transactions --FOR DEBIT TRANSACTION
                                                                    (
                                                mtran_no,
                                                mtran_doc_date,
                                                mtran_date,
                                                mtran_ref_no,
                                                mtran_other_ref,
                                                mtran_tran_type,
                                                mtran_dc,
                                                mtran_control_acc,
                                                mtran_client_type,
                                                mtran_client_code,
                                                mtran_amount,
                                                mtran_balance,
                                                mtran_authorised,
                                                mtran_net_amt,
                                                mtran_posting_date,
                                                mtran_ggt_tran_no,
                                                mtran_prp_code,
                                                mtran_btr_trans_code,
                                                mtran_origin,
                                                mtran_cur_code,
                                                mtran_cur_symbol,
                                                mtran_brn_code,
                                                mtran_brn_sht_desc,
                                                mtran_posted_by,
                                                mtran_whtx,
                                                mtran_client_polcy_no,
                                                mtran_copdt_code,
                                                mtran_narrations,
                                                mtran_comm_levy_amt)
                                         VALUES (
                                             v_mtran_cr_no,
                                             TRUNC (SYSDATE),
                                             TRUNC (SYSDATE),
                                             'COM CRNOTE',
                                             v_copdt_code,
                                             'CRP',
                                             'C',
                                             cur_comm_rec.agn_sht_desc,
                                             cur_comm_rec.act_type_id,
                                             cur_comm_rec.cop_agn_code,
                                             -ABS (
                                                  NVL (cur_comm_rec.net_comm,
                                                       0)),
                                             -ABS (
                                                  NVL (cur_comm_rec.net_comm,
                                                       0)),
                                             'N',
                                             -ABS (
                                                  NVL (cur_comm_rec.net_comm,
                                                       0)),
                                             TRUNC (SYSDATE),
                                             NULL,
                                             NULL,
                                             'CRP',
                                             'U',
                                             cur_comm_rec.cop_cur_code,
                                             tqc_interfaces_pkg.currencysymbol (
                                                 cur_comm_rec.cop_cur_code),
                                             cur_comm_rec.cop_brn_code,
                                             fms_interfaces_pkg.brh_name (
                                                 cur_comm_rec.cop_brn_code,
                                                 'S'),
                                             v_user,
                                             NULL,
                                             v_pol_no,
                                             v_copdt_code,
                                             'COMM PAID BY CREDIT NOTE',
                                             cur_comm_rec.comm_levy);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                           'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
                                        || v_mtran_no);
                            END;

                            BEGIN
                                SELECT TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY')
                                           || gin_mtran_no_seq.NEXTVAL)
                                  INTO v_mtran_dr_no
                                  FROM DUAL;

                                INSERT INTO gin_master_transactions --FOR CREDIT TRANSACTION
                                                                    (
                                                mtran_no,
                                                mtran_doc_date,
                                                mtran_date,
                                                mtran_ref_no,
                                                mtran_other_ref,
                                                mtran_tran_type,
                                                mtran_dc,
                                                mtran_control_acc,
                                                mtran_client_type,
                                                mtran_client_code,
                                                mtran_amount,
                                                mtran_balance,
                                                mtran_authorised,
                                                mtran_net_amt,
                                                mtran_posting_date,
                                                mtran_ggt_tran_no,
                                                mtran_prp_code,
                                                mtran_btr_trans_code,
                                                mtran_origin,
                                                mtran_cur_code,
                                                mtran_cur_symbol,
                                                mtran_brn_code,
                                                mtran_brn_sht_desc,
                                                mtran_posted_by,
                                                mtran_whtx,
                                                mtran_client_polcy_no,
                                                mtran_copdt_code,
                                                mtran_narrations,
                                                mtran_date_authorized,
                                                mtran_authorised_by,
                                                mtran_comm_levy_amt)
                                         VALUES (
                                             v_mtran_dr_no,
                                             TRUNC (SYSDATE),
                                             TRUNC (SYSDATE),
                                             'COM CRNOTE',
                                             v_copdt_code,
                                             'CRP',
                                             'D',
                                             cur_comm_rec.agn_sht_desc,
                                             cur_comm_rec.act_type_id,
                                             cur_comm_rec.cop_agn_code,
                                             ABS (
                                                 NVL (cur_comm_rec.comm_amt,
                                                      0)),
                                             ABS (
                                                 NVL (cur_comm_rec.net_comm,
                                                      0)),
                                             'N',
                                             ABS (
                                                 NVL (cur_comm_rec.net_comm,
                                                      0)),
                                             TRUNC (SYSDATE),
                                             NULL,
                                             NULL,
                                             'CRP',
                                             'U',
                                             cur_comm_rec.cop_cur_code,
                                             tqc_interfaces_pkg.currencysymbol (
                                                 cur_comm_rec.cop_cur_code),
                                             cur_comm_rec.cop_brn_code,
                                             fms_interfaces_pkg.brh_name (
                                                 cur_comm_rec.cop_brn_code,
                                                 'S'),
                                             v_user,
                                             -ABS (cur_comm_rec.whtax),
                                             v_pol_no,
                                             v_copdt_code,
                                             'COMM PAID BY CREDIT NOTE',
                                             TRUNC (SYSDATE),
                                             v_user,
                                             cur_comm_rec.comm_levy);
                            END;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error ('Error updating transaction...');
                        END;
                    ELSIF v_post_option IN ('HRMS')
                    THEN
                        IF gin_interfaces_pkg.interface_enabled ('HRMS') =
                           'Y'
                        THEN
                            IF NVL (v_webserv_param, 'N') = 'Y'
                            THEN
                                IF v_webserv_address_param IS NOT NULL
                                THEN
                                    v_agn_con_code :=
                                        cur_comm_rec.agn_con_code;
                                    v_update := 'N';

                                    IF v_agn_con_code IS NULL
                                    THEN
                                        raise_error (
                                               'PAYROLL MAPPING FOR '
                                            || cur_comm_rec.act_account_type
                                            || ' '
                                            || cur_comm_rec.agn_name
                                            || ':'
                                            || cur_comm_rec.agn_sht_desc
                                            || ':'
                                            || cur_comm_rec.act_type_id
                                            || ' NOT BE DONE..');
                                    ELSE
                                        BEGIN
                                            IF NVL (cur_comm_rec.net_comm, 0) <=
                                               0
                                            THEN
                                                raise_error (
                                                       'INVALID COMM AMOUNT OF '
                                                    || NVL (
                                                           cur_comm_rec.net_comm,
                                                           0));
                                            END IF;

                                            -- SELECT DECODE (SIGN (NVL (cur_comm_rec.comm_amt, 0)),
                                            -- -1, 'GIMS-COMMC',
                                            -- 'GIMS-COMM'
                                            -- )
                                            -- INTO v_iptpecode
                                            -- FROM DUAL;
                                            vdisplaynumber :=
                                                TO_CHAR (v_copdt_code);
                                            vyear :=
                                                TO_CHAR (SYSDATE, 'RRRR');
                                            vmonth := TO_CHAR (SYSDATE, 'MM');
                                            vpaymenttype := 'GIS-COMM';
                                            vamount :=
                                                TO_CHAR (
                                                    cur_comm_rec.comm_amt);
                                            vwhtax :=
                                                TO_CHAR (cur_comm_rec.whtax);
                                            v_req_result :=
                                                UTL_HTTP.request (
                                                       v_webserv_address_param
                                                    || ':63081/cmPayItemInfo?displayNumber='
                                                    || vdisplaynumber
                                                    || '?year='
                                                    || vyear
                                                    || '?month='
                                                    || vmonth
                                                    || '?paymentType='
                                                    || vpaymenttype
                                                    || '?amount='
                                                    || vamount);
                                            v_req_result1 :=
                                                UTL_HTTP.request (
                                                       v_webserv_address_param
                                                    || ':63081/cmPayItemInfo?displayNumber='
                                                    || vdisplaynumber
                                                    || '?year='
                                                    || vyear
                                                    || '?month='
                                                    || vmonth
                                                    || '?paymentType='
                                                    || vpaymenttype
                                                    || '?amount='
                                                    || vwhtax);
                                        /*
                                        HRMS.INTERFACE_PKG.INTERFACE_PERIODIC_TRANS('MICK',--vIptEsCode varchar2,
                                        'GIMS',--vIptSystem varchar2,
                                        v_agn_con_code,--vIptPerNo varchar2,
                                        v_IptPeCode,--vIptPeCode varchar2,
                                        ABS(cur_comm_rec.COMM_AMT),--nIptAmount number,
                                        v_date);--dIptDate in out date);

                                        SELECT DECODE (SIGN (NVL (cur_comm_rec.whtax, 0)),
                                        -1, 'GIMS-WHT',
                                        'GIMS-WHTC'
                                        ) INTO v_iptpecode FROM DUAL;


                                        HRMS.INTERFACE_PKG.INTERFACE_PERIODIC_TRANS('MICK',--vIptEsCode varchar2,
                                        'GIMS',--vIptSystem varchar2,
                                        v_agn_con_code,--vIptPerNo varchar2,
                                        v_IptPeCode,--vIptPeCode varchar2,
                                        ABS(cur_comm_rec.WHTAX),--nIptAmount number,
                                        v_date);--dIptDate in out date);
                                        */



                                        EXCEPTION
                                            WHEN OTHERS
                                            THEN
                                                raise_error (
                                                    'ERROR POSTING TO HR.');
                                        END;
                                    END IF;
                                END IF;
                            END IF;
                        ELSE
                            raise_error (
                                'ERROR: POSTING TO HRMS WEB SERVISE NOT ENABLED');
                        END IF;
                    ELSE
                        raise_error ('ERROR: HRMS INTERFACE NOT ENABLED');
                    END IF;
                END IF;

                v_update := 'Y';
                v_cnt := NVL (v_cnt, 0) + 1;

                --raise_error('V_UPDATE = '||v_update);
                --******************************************************************************
                /* COMMENTED BY MSHOTE ON 25062012 TO BLOCK OF POSTING OF
                 TRANSACTION TO GIN_MASTER_TRANSACTIONS TABLE .
                 POSTING TO THIS TABLE TO BE ALLOWED ONLY WHEN THE CHEQUE IS COMMPLETED / SUCCESSFUL IN
                 FMS
                 BUT IF PROCESSED OUTSIDE THE SYSTEM IT SHOULD POST TO GIN_MASTER_TRANSACTIONS

                 */


                -- RAISE_ERROR('ERROR: HERE='||v_copdt_code||'cur_comm_rec.CNT'||cur_comm_rec.CNT);
                IF     (NVL (v_update, 'N') = 'Y' AND v_in_pyment = 'N')
                   AND v_post_option NOT IN ('CR')
                THEN
                    IF cur_comm_rec.cnt = 1
                    THEN
                        BEGIN
                            SELECT mtran_client_polcy_no
                              INTO v_pol_no
                              FROM gin_master_transactions
                             WHERE mtran_no = cur_comm_rec.cop_dr_mtran_no;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                NULL;
                        END;
                    ELSE
                        v_pol_no := 'VARIOUS';
                    END IF;

                    BEGIN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || gin_mtran_no_seq.NEXTVAL)
                          INTO v_mtran_no
                          FROM DUAL;

                        INSERT INTO gin_master_transactions (
                                        mtran_no,
                                        mtran_doc_date,
                                        mtran_date,
                                        mtran_ref_no,
                                        mtran_other_ref,
                                        mtran_tran_type,
                                        mtran_dc,
                                        mtran_control_acc,
                                        mtran_client_type,
                                        mtran_client_code,
                                        mtran_amount,
                                        mtran_balance,
                                        mtran_authorised,
                                        mtran_net_amt,
                                        mtran_posting_date,
                                        mtran_ggt_tran_no,
                                        mtran_prp_code,
                                        mtran_btr_trans_code,
                                        mtran_origin,
                                        mtran_cur_code,
                                        mtran_cur_symbol,
                                        mtran_brn_code,
                                        mtran_brn_sht_desc,
                                        mtran_posted_by,
                                        mtran_whtx,
                                        mtran_client_polcy_no,
                                        mtran_copdt_code,
                                        mtran_comm_levy_amt)
                                 VALUES (
                                     v_mtran_no,
                                     TRUNC (SYSDATE),
                                     TRUNC (SYSDATE),
                                     'COMMISSION',
                                     v_copdt_code,
                                     --cur_comm_rec.cop_code,
                                     'COM',
                                     'D',
                                     cur_comm_rec.agn_sht_desc,
                                     cur_comm_rec.act_type_id,
                                     cur_comm_rec.cop_agn_code, --acc sht desc
                                     ABS (cur_comm_rec.comm_amt),
                                     cur_comm_rec.net_comm,
                                     'Y',
                                     cur_comm_rec.net_comm,
                                     ---ABS(cur_comm_rec.COMM_AMT),
                                     TRUNC (SYSDATE),
                                     v_tran_no,
                                     NULL,
                                     'COM',
                                     'U',
                                     cur_comm_rec.cop_cur_code,
                                     tqc_interfaces_pkg.currencysymbol (
                                         cur_comm_rec.cop_cur_code),
                                     cur_comm_rec.cop_brn_code,
                                     fms_interfaces_pkg.brh_name (
                                         cur_comm_rec.cop_brn_code,
                                         'S'),
                                     v_user,
                                     cur_comm_rec.whtax,
                                     v_pol_no,
                                     v_copdt_code,
                                     cur_comm_rec.comm_levy);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR UPDATING SUBSIDIARY LEDGER RECORD...');
                    END;
                END IF;

                IF NVL (v_update, 'N') = 'Y'
                THEN
                    FOR cur_com_dtls_rec
                        IN cur_comm_dtls (cur_comm_rec.cop_agn_code,
                                          cur_comm_rec.cop_brn_code)
                    LOOP
                        IF v_in_pyment = 'Y'
                        THEN
                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'Y',
                                       cop_authorize_date = TRUNC (SYSDATE),
                                       cop_copdt_code = v_copdt_code,
                                       cop_trans_no = v_tran_no
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                            END;
                        ELSIF v_in_pyment = 'N'
                        THEN
                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'Y',
                                       cop_authorize_date = TRUNC (SYSDATE),
                                       cop_paid = 'Y',
                                       cop_paid_chq_no = 'OOS',
                                       cop_paid_chq_date = TRUNC (SYSDATE),
                                       cop_copdt_code = v_copdt_code,
                                       cop_trans_no = v_tran_no
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                           'ERROR POST UPDATING PAYMENT VOUCHER...'
                                        || cur_com_dtls_rec.cop_code);
                            END;
                        END IF;
                    -- raise_error('V_UPDATE = '||v_update||';'||cur_com_dtls_rec.COP_CR_MTRAN_NO);
                    /* PREVENT AUTO ALLOCATION OF CREDIT ON COMMISSION TILL CHEQUE AUTH TIME
                    25062012
                    BEGIN
                    SELECT mtran_no, mtran_ref_no, NVL (mtran_balance, 0)
                    INTO v_cr_mtran_no, v_cr_ref_no, v_cr_bal
                    FROM gin_master_transactions
                    WHERE mtran_no = cur_com_dtls_rec.cop_cr_mtran_no;

                    v_cr_com := 0;
                    knock_off_transactions (v_cr_mtran_no,
                    v_cr_ref_no,
                    v_mtran_no,
                    'N',
                    TRUNC (SYSDATE),
                    v_cr_bal,
                    v_cr_com
                    );
                    EXCEPTION
                    WHEN OTHERS
                    THEN
                    raise_error
                    ('ERROR RECONCILLING TRANSACTION ON ACCOUNT..');
                    END;
                    */


                    END LOOP;

                    IF v_in_pyment = 'Y'
                    THEN
                        BEGIN
                            UPDATE gin_comm_pymt_dtls
                               SET copdt_authorized = 'Y',
                                   copdt_authorized_by = v_user,
                                   copdt_authorize_date = TRUNC (SYSDATE)
                             WHERE copdt_code = v_copdt_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR UPDATING CONSOLIDATED COMM TRANS ...');
                        END;
                    ELSIF v_in_pyment = 'N'
                    THEN
                        UPDATE gin_comm_pymt_dtls
                           SET copdt_authorized = 'Y',
                               copdt_authorized_by = v_user,
                               copdt_authorize_date = TRUNC (SYSDATE),
                               copdt_paid = 'Y',
                               copdt_paid_chq_date = TRUNC (SYSDATE),
                               copdt_paid_chq_no = 'OOS'
                         WHERE copdt_code = v_copdt_code;
                    END IF;
                END IF;

                IF v_post_option IN ('HRMS')
                THEN
                    IF NVL (v_webserv_param, 'N') = 'Y'
                    THEN
                        IF gin_interfaces_pkg.interface_enabled ('HRMS') =
                           'Y'
                        THEN
                            IF NVL (v_req_result, 0) = 1
                            THEN
                                gin_interfaces_pkg.update_commissions (
                                    v_copdt_code,
                                    v_tran_no,
                                    NULL,
                                    TRUNC (SYSDATE),
                                    v_user,
                                    TO_NUMBER (vamount));
                            ELSE
                                gin_interfaces_pkg.update_undo_commissions (
                                    v_copdt_code,
                                    v_tran_no,
                                    NULL,
                                    TRUNC (SYSDATE),
                                    v_user,
                                    TO_NUMBER (vamount));
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END LOOP;

            BEGIN
                UPDATE gin_gis_transactions
                   SET ggt_trans_authorised = 'Y',
                       ggt_trans_authorised_by = v_user,
                       ggt_trans_authorise_date = TRUNC (SYSDATE)
                 WHERE ggt_trans_no = v_tran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR AUTHORISING COMM TRANS ...');
            END;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('ERROR POSTING COMM. RECORDS...');
        END;
    END;

    PROCEDURE auto_allocate_contras (v_batch_no       IN NUMBER,
                                     v_old_batch_no   IN NUMBER,
                                     v_prp_code       IN NUMBER,
                                     v_agn_code       IN NUMBER)
    IS
        v_dc             VARCHAR2 (5);
        v_mtran_no       NUMBER;
        v_mtran_ref      VARCHAR2 (25);
        v_bal            NUMBER;
        v_cr_mtran_no    NUMBER;
        v_cr_mtran_ref   VARCHAR2 (25);
        v_cr_bal         NUMBER;
        v_dr_mtran_no    NUMBER;
        v_dr_mtran_ref   VARCHAR2 (25);
        v_dr_bal         NUMBER;
        v_cr_com         NUMBER;
    BEGIN
        IF tqc_parameters_pkg.get_org_type (37) != ('INS')
        THEN
            SELECT mtran_dc,
                   mtran_no,
                   mtran_ref_no,
                   mtran_balance
              INTO v_dc,
                   v_mtran_no,
                   v_mtran_ref,
                   v_bal
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_prp_code
                   AND mtran_client_type = 'D';

            IF v_dc = 'C'
            THEN
                v_cr_mtran_no := v_mtran_no;
                v_cr_mtran_ref := v_mtran_ref;
                v_cr_bal := v_bal;

                SELECT mtran_no, mtran_ref_no, mtran_balance
                  INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_prp_code
                       AND mtran_client_type = 'D';
            ELSE
                v_dr_mtran_no := v_mtran_no;
                v_dr_mtran_ref := v_mtran_ref;
                v_dr_bal := v_bal;

                SELECT mtran_no, mtran_ref_no, mtran_balance
                  INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_prp_code
                       AND mtran_client_type = 'D';
            END IF;

            --RAISE_ERROR(abs(v_cr_bal)||'=='||abs(v_dr_bal));
            IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
            THEN
                gis_accounts_utilities.knock_off_transactions (
                    v_cr_mtran_no,
                    v_cr_mtran_ref,
                    v_dr_mtran_no,
                    'N',
                    TRUNC (SYSDATE),
                    v_cr_bal,
                    v_cr_com,
                    NULL,
                    'N');
            END IF;

            SELECT mtran_dc,
                   mtran_no,
                   mtran_ref_no,
                   mtran_balance
              INTO v_dc,
                   v_mtran_no,
                   v_mtran_ref,
                   v_bal
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_agn_code
                   AND mtran_client_type = 'I';

            IF v_dc = 'C'
            THEN
                v_cr_mtran_no := v_mtran_no;
                v_cr_mtran_ref := v_mtran_ref;
                v_cr_bal := v_bal;

                SELECT mtran_no, mtran_ref_no, mtran_balance
                  INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_agn_code
                       AND mtran_client_type = 'I';
            ELSE
                v_dr_mtran_no := v_mtran_no;
                v_dr_mtran_ref := v_mtran_ref;
                v_dr_bal := v_bal;

                SELECT mtran_no, mtran_ref_no, mtran_balance
                  INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_agn_code
                       AND mtran_client_type = 'I';
            END IF;

            IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
            THEN
                gis_accounts_utilities.knock_off_transactions (
                    v_cr_mtran_no,
                    v_cr_mtran_ref,
                    v_dr_mtran_no,
                    'N',
                    TRUNC (SYSDATE),
                    v_cr_bal,
                    v_cr_com,
                    NULL,
                    'N');
            END IF;
        ELSE
            NULL;
        END IF;
    END;

    PROCEDURE auto_allocate_trans (v_batch_no   IN NUMBER,
                                   v_prp_code   IN NUMBER,
                                   v_agn_code   IN NUMBER)
    IS
        v_dc             VARCHAR2 (5);
        v_mtran_no       NUMBER;
        v_mtran_ref      VARCHAR2 (25);
        v_bal            NUMBER;
        v_cr_mtran_no    NUMBER;
        v_cr_mtran_ref   VARCHAR2 (25);
        v_cr_bal         NUMBER;
        v_dr_mtran_no    NUMBER;
        v_dr_mtran_ref   VARCHAR2 (25);
        v_dr_bal         NUMBER;
        v_cr_com         NUMBER;

        CURSOR rec_trans IS
            SELECT *
              FROM gin_master_transactions, gin_master_prd_mapping
             WHERE     mtran_no = mpm_mtran_no
                   AND mpm_pol_batch_no = v_batch_no
                   AND mtran_tran_type = 'RC'
                   AND NVL (mtran_balance, 0) <> 0;

        CURSOR dbt_trans (v_client_code IN NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_client_code
                   AND mtran_tran_type != 'RC'
                   AND mtran_dc = 'D';
    BEGIN
        FOR rec_trans_cur IN rec_trans
        LOOP
            FOR dbt_trans_cur IN dbt_trans (rec_trans_cur.mtran_client_code)
            LOOP
                BEGIN
                    SELECT mtran_dc,
                           mtran_no,
                           mtran_ref_no,
                           mtran_balance
                      INTO v_dc,
                           v_mtran_no,
                           v_mtran_ref,
                           v_bal
                      FROM gin_master_transactions
                     WHERE     mtran_pol_batch_no = v_batch_no
                           AND mtran_no = dbt_trans_cur.mtran_no;
                EXCEPTION
                    WHEN TOO_MANY_ROWS
                    THEN
                        raise_error (
                               'Too many rows Fetched ...'
                            || dbt_trans_cur.mtran_pol_batch_no
                            || ' - '
                            || SQLERRM (SQLCODE));
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error Retrieving Records ...'
                            || dbt_trans_cur.mtran_pol_batch_no
                            || ' - '
                            || SQLERRM (SQLCODE));
                END;

                IF v_dc = 'C'
                THEN
                    v_cr_mtran_no := v_mtran_no;
                    v_cr_mtran_ref := v_mtran_ref;
                    v_cr_bal := v_bal;

                    BEGIN
                        SELECT mtran_no, mtran_ref_no, mpm_amount
                          INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                          FROM gin_master_transactions,
                               gin_master_prd_mapping
                         WHERE     mpm_pol_batch_no = v_batch_no
                               AND mpm_code = rec_trans_cur.mpm_code
                               AND mtran_no = mpm_mtran_no;
                    EXCEPTION
                        WHEN TOO_MANY_ROWS
                        THEN
                            raise_error (
                                   'Too many rows Fetched ...'
                                || rec_trans_cur.mpm_pol_batch_no
                                || ' - '
                                || SQLERRM (SQLCODE));
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error Retrieving Records ...'
                                || rec_trans_cur.mpm_pol_batch_no
                                || ' - '
                                || SQLERRM (SQLCODE));
                    END;
                ELSE
                    v_dr_mtran_no := v_mtran_no;
                    v_dr_mtran_ref := v_mtran_ref;
                    v_dr_bal := v_bal;

                    BEGIN
                        SELECT mtran_no, mtran_ref_no, mpm_amount
                          INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                          FROM gin_master_transactions,
                               gin_master_prd_mapping
                         WHERE     mpm_pol_batch_no = v_batch_no
                               AND mpm_code = rec_trans_cur.mpm_code
                               AND mtran_no = mpm_mtran_no;
                    EXCEPTION
                        WHEN TOO_MANY_ROWS
                        THEN
                            raise_error (
                                   'Too many rows Fetched ...'
                                || rec_trans_cur.mpm_pol_batch_no
                                || ' - '
                                || SQLERRM (SQLCODE));
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error Retrieving Records ...'
                                || rec_trans_cur.mpm_pol_batch_no
                                || ' - '
                                || SQLERRM (SQLCODE));
                    END;
                END IF;

                IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
                THEN
                    -- RAISE_ERROR('contras ==='||abs(v_cr_bal)||'=='||abs(v_dr_bal));
                    gis_accounts_utilities.knock_off_transactions (
                        v_cr_mtran_no,
                        v_cr_mtran_ref,
                        v_dr_mtran_no,
                        'N',
                        TRUNC (SYSDATE),
                        v_cr_bal,
                        v_cr_com,
                        v_dr_bal,
                        'N');
                -- RAISE_ERROR('contras comm= '||v_cr_com);
                --UPDATE GIN_MASTER_TRANSACTIONS SET MTRAN_COMM_PAID =v_cr_com WHERE mtran_no = v_dr_mtran_no;-- =v_mtran_no;
                ELSIF ABS (NVL (v_cr_bal, 0)) > ABS (NVL (v_dr_bal, 0))
                THEN
                    -- UNDO THE ALLOCATIONS FIRST
                    gis_accounts_utilities.undo_trans_allocation (
                        v_dr_mtran_no);
                    -- THE ALLOCATE THE CONTRA
                    gis_accounts_utilities.knock_off_transactions (
                        v_cr_mtran_no,
                        v_cr_mtran_ref,
                        v_dr_mtran_no,
                        'N',
                        TRUNC (SYSDATE),
                        v_cr_bal,
                        v_cr_com,
                        v_dr_bal,
                        'N');
                --UPDATE GIN_MASTER_TRANSACTIONS SET MTRAN_COMM_PAID =v_cr_com WHERE mtran_no =v_dr_mtran_no;-- =v_mtran_no;
                END IF;
            END LOOP;
        END LOOP;
    END;

    FUNCTION get_account_balance (v_client_code   IN NUMBER,
                                  v_client_type   IN VARCHAR2)
        RETURN NUMBER
    IS
        v_bal   NUMBER;
    BEGIN
        SELECT SUM (
                   DECODE (mtran_dc,
                           'D', NVL (mtran_balance, 0) * mtran_cur_rate,
                           -ABS (NVL (mtran_balance, 0) * mtran_cur_rate)))
          INTO v_bal
          FROM gin_master_transactions
         WHERE     mtran_client_type = v_client_type
               AND mtran_client_code = v_client_code;

        RETURN (v_bal);
    END;

    FUNCTION get_policy_balance (v_batch_no      IN NUMBER,
                                 v_tran_origin   IN VARCHAR DEFAULT 'UW')
        RETURN NUMBER
    IS
        v_bal   NUMBER;
    BEGIN
        IF v_tran_origin = 'UW'
        THEN
            BEGIN
                SELECT (  (  (  NVL (mtran_net_amt, 0)
                              + ABS (
                                    (  NVL (mtran_commission, 0)
                                     + NVL (mtran_whtx, 0)
                                     + NVL (mtran_comm_levy_amt, 0))))
                           - (  ABS (NVL (mtran_comm_payable, 0))
                              - NVL (mtran_whtx_payable, 0)
                              - NVL (mtran_comm_levy_payable, 0)))
                        - NVL (mtran_settlement, 0))
                  INTO v_bal
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_batch_no
                       AND mtran_origin = 'U'
                       AND mtran_dc = 'D'
                       AND mtran_tran_type NOT IN ('SF', 'COM');
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_bal := 0;
            END;
        ELSIF v_tran_origin = 'ADM'
        THEN
            BEGIN
                SELECT NVL (SUM (NVL (mtran_balance, 0) * mtran_cur_rate), 0)
                  INTO v_bal
                  FROM gin_master_transactions, gin_adminstration_fee
                 WHERE     adf_code = v_batch_no
                       AND mtran_ref_no = adf_ref_no
                       AND mtran_tran_type = 'ADM'
                       AND mtran_origin = 'U'
                       AND mtran_dc = 'D';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_bal := 0;
            END;
        END IF;

        RETURN (v_bal);
    END;

    FUNCTION get_policy_balance (v_policy_no     IN VARCHAR2,
                                 v_tran_origin   IN VARCHAR2 DEFAULT 'UW')
        RETURN NUMBER
    IS
        v_bal   NUMBER;
    BEGIN
        IF v_tran_origin = 'UW'
        THEN
            BEGIN
                SELECT NVL (SUM (NVL (mtran_balance, 0) * mtran_cur_rate), 0)
                  INTO v_bal
                  FROM gin_master_transactions
                 WHERE     mtran_client_polcy_no = v_policy_no
                       AND mtran_origin = 'U'
                       AND mtran_dc = 'D'
                       AND mtran_tran_type != 'COM';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_bal := 0;
            END;
        ELSIF v_tran_origin = 'ADM'
        THEN
            BEGIN
                SELECT NVL (SUM (NVL (mtran_balance, 0) * mtran_cur_rate), 0)
                  INTO v_bal
                  FROM gin_master_transactions, gin_adminstration_fee
                 WHERE     adf_pol_policy_no = v_policy_no
                       AND mtran_ref_no = adf_ref_no
                       AND mtran_tran_type = 'ADM'
                       AND mtran_origin = 'U'
                       AND mtran_dc = 'D';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_bal := 0;
            END;
        END IF;

        RETURN (v_bal);
    END;

    FUNCTION get_policy_settlement (v_batch_no      IN NUMBER,
                                    v_tran_origin   IN VARCHAR DEFAULT 'UW')
        RETURN NUMBER
    IS
        v_bal   NUMBER;
    BEGIN
        IF v_tran_origin = 'UW'
        THEN
            BEGIN
                SELECT SUM (NVL (mtran_settlement, 0))
                  INTO v_bal
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_batch_no
                       AND mtran_origin = 'U'
                       AND mtran_dc = 'D'
                       AND mtran_tran_type != 'COM';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_bal := 0;
            END;
        ELSIF v_tran_origin = 'ADM'
        THEN
            BEGIN
                SELECT SUM (NVL (mtran_settlement, 0))
                  INTO v_bal
                  FROM gin_master_transactions, gin_adminstration_fee
                 WHERE     adf_code = v_batch_no
                       AND mtran_ref_no = adf_ref_no
                       AND mtran_tran_type = 'ADM'
                       AND mtran_origin = 'U'
                       AND mtran_dc = 'D';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_bal := 0;
            END;
        END IF;

        RETURN (v_bal);
    END;

    FUNCTION get_policy_payment_status (v_batch_no IN NUMBER)
        RETURN VARCHAR2
    IS
        v_net_amt   NUMBER;
        v_val       VARCHAR2 (10);
    BEGIN
        BEGIN
            SELECT SUM (NVL (mtran_net_amt, 0))
              INTO v_net_amt
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_origin = 'U'
                   AND mtran_dc = 'D'
                   AND mtran_tran_type != 'COM';
        EXCEPTION
            WHEN OTHERS
            THEN
                v_net_amt := 0;
        END;

        IF get_policy_balance (v_batch_no) = 0
        THEN
            v_val := 'PAID';
        ELSIF     get_policy_balance (v_batch_no) > 0
              AND get_policy_balance (v_batch_no) <> v_net_amt
        THEN
            v_val := 'PARTIAL';
        ELSE
            v_val := 'NOT PAID';
        END IF;

        RETURN (v_val);
    END;

    FUNCTION get_loss_ratio (v_pol_batch_no IN NUMBER)
        RETURN NUMBER
    IS
        v_claim_cnt       NUMBER;
        v_total_reserve   NUMBER;
        v_loss_ratio      NUMBER;
        v_sum_insured     NUMBER;
        v_gross_prem      NUMBER;
        v_uw_yr           NUMBER;
        v_policy_no       VARCHAR2 (30);
    BEGIN
        BEGIN
            SELECT DISTINCT NVL (pol_total_sum_insured, 1),
                            pol_uw_year,
                            pol_policy_no,
                            GREATEST (pol_total_fap, pol_total_gp)
              INTO v_sum_insured,
                   v_uw_yr,
                   v_policy_no,
                   v_gross_prem
              FROM tqc_clients, gin_policies
             WHERE clnt_code = pol_prp_code AND pol_batch_no = v_pol_batch_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_application_error (
                    -20001,
                    'Unable to check Client details ..' || SQLERRM (SQLCODE));
            WHEN OTHERS
            THEN
                raise_application_error (
                    -20001,
                    'Unable to check Client details ..' || SQLERRM (SQLCODE));
        END;

        BEGIN
              SELECT COUNT (*), SUM (NVL (clmrev_amt, 0)) total_reserve
                INTO v_claim_cnt, v_total_reserve
                FROM gin_claim_revisions, gin_claim_master_bookings
               WHERE     clmrev_cmb_claim_no = cmb_claim_no
                     AND cmb_pol_policy_no = v_policy_no
                     AND cmb_uw_year = v_uw_yr
                     AND NVL (clmrev_authorised, 'N') = 'Y'
            GROUP BY cmb_pol_policy_no;
        -- SELECT COUNT (*), SUM (NVL (clmrev_amt, 0)) total_reserve
        -- INTO v_claim_cnt, v_total_reserve
        -- FROM gin_claim_revisions,
        -- gin_claim_master_bookings,
        -- gin_claim_perils,
        -- gin_subcl_sction_perils,
        -- gin_sections,
        -- gin_perils
        -- WHERE clmrev_cmb_claim_no = cmb_claim_no
        -- AND per_code = clmp_per_pt_code
        -- AND per_code = sspr_per_code
        -- AND sspr_sect_code = sect_code
        -- AND sect_type != 'EL'
        -- AND sspr_si_or_limit NOT IN ('PL', 'SL', 'EL')
        -- AND cmb_pol_policy_no = v_policy_no
        -- AND cmb_uw_year = v_uw_yr
        -- AND NVL (clmrev_authorised, 'N') = 'Y'
        -- GROUP BY cmb_pol_policy_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_total_reserve := 0;
            WHEN OTHERS
            THEN
                raise_application_error (
                    -20001,
                       'Unable to retrieving claims Reserve ..'
                    || SQLERRM (SQLCODE));
        END;

        IF v_total_reserve > 0
        THEN
            IF v_gross_prem = 0
            THEN
                v_loss_ratio := ROUND (v_total_reserve / 1 * 100, 2);
            ELSE
                v_loss_ratio :=
                    ROUND (v_total_reserve / v_gross_prem * 100, 2);
            END IF;
        ELSE
            v_loss_ratio := 0;
        END IF;

        RETURN (v_loss_ratio);
    END;

    PROCEDURE update_coin_payments (v_cr_mtran_no   IN NUMBER,
                                    v_cr_ref_no     IN VARCHAR2,
                                    v_dr_mtran_no   IN NUMBER,
                                    v_dr_ref_no     IN VARCHAR2,
                                    v_coin_amt      IN NUMBER,
                                    v_comm_amt      IN NUMBER,
                                    v_brn_code      IN NUMBER,
                                    v_agnt_code     IN NUMBER,
                                    v_cur_code      IN NUMBER,
                                    v_comm_incl     IN VARCHAR2,
                                    v_vat_incl      IN VARCHAR2)
    IS
        v_mtran_no               NUMBER;
        v_user                   VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_coinp_code             NUMBER;
        v_act_wthtx              NUMBER := 0;
        v_gross_coin_mat         NUMBER;
        v_net_amt                NUMBER;
        v_whtx                   NUMBER;
        v_pol_pro_code           NUMBER;
        v_act_type               VARCHAR2 (3);
        v_client_type            VARCHAR2 (3);
        v_mkt_agn_code           tqc_agencies.agn_code%TYPE;
        v_pol_batch_no           gin_policies.pol_batch_no%TYPE;
        v_pol_wthtx_appl         VARCHAR2 (1);
        v_coin_policy            VARCHAR2 (1);
        v_coin_policy_leader     VARCHAR2 (1);
        v_coin_policy_share      NUMBER;
        v_coin_policy_combined   VARCHAR2 (1);
        v_dec_amt                NUMBER;
        v_payable                NUMBER;
        v_db_amt                 NUMBER;
        v_com_amt                NUMBER;
        v_coin_fee_amt           NUMBER;
        v_vat_amt                NUMBER;
        v_whtx_amt               NUMBER;
        v_exhange_rate           NUMBER;
        v_exhange_rate_notused   NUMBER;
        v_rnd                    NUMBER;
        v_bcur_rnd               NUMBER;
        v_pol_agency_code        NUMBER;
        v_amt                    NUMBER;
        v_surv_amt               NUMBER;
        v_dbt_comm               NUMBER;
        v_dbt_vat                NUMBER;
        v_dbt_whtx               NUMBER;
        v_cur_rate               NUMBER;
        v_dbt_net_amt            NUMBER;
        v_gross_prem_amt         NUMBER;
        v_mtran_client_type      VARCHAR2 (10);
        v_net_com_param          VARCHAR2 (1);


        CURSOR coin (v_pol_batch IN NUMBER)
        IS
            SELECT *
              FROM gin_coinsurers
             WHERE coin_pol_batch_no = v_pol_batch;
    BEGIN
        -- RAISE_ERROR('v_coin_amt'||v_coin_amt||'v_comm_amt'||v_comm_amt);
        BEGIN
            SELECT mtran_pol_batch_no,
                   mtran_net_amt,
                   mtran_amount,
                   mtran_commission,
                   mtran_vat,
                   mtran_whtx,
                   mtran_net_amt,
                   mtran_client_type
              INTO v_pol_batch_no,
                   v_db_amt,
                   v_amt,
                   v_dbt_comm,
                   v_dbt_vat,
                   v_dbt_whtx,
                   v_dbt_net_amt,
                   v_mtran_client_type
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                raise_error ('ERROR FETCHING DEBIT DETAILS...');
        END;

        BEGIN
            SELECT pol_coinsurance,
                   pol_coinsure_leader,
                   pol_coinsurance_share,
                   pol_coin_leader_combined,
                   pol_agnt_agent_code,
                   pol_cur_rate
              INTO v_coin_policy,
                   v_coin_policy_leader,
                   v_coin_policy_share,
                   v_coin_policy_combined,
                   v_pol_agency_code,
                   v_cur_rate
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                raise_error ('ERROR FETCHING THE POLICY DETAILS...');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
              INTO v_net_com_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_net_com_param := 'N';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching net of commission parameter...');
        END;

        IF     NVL (v_coin_policy, 'N') = 'Y'
           AND NVL (v_coin_policy_combined, 'N') = 'Y'
        THEN
            FOR c IN coin (v_pol_batch_no)
            LOOP
                BEGIN
                    SELECT pofe_payable
                      INTO v_surv_amt
                      FROM gin_pol_misc_coin_fees, gin_pol_misc_fees
                     WHERE     pofe_code = pmcf_pofe_code
                           AND pmcf_agnt_agent_code = c.coin_agnt_agent_code
                           AND pofe_pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_surv_amt := 0;
                    WHEN OTHERS
                    THEN
                        BEGIN
                            SELECT pofe_payable
                              INTO v_surv_amt
                              FROM gin_pol_misc_coin_fees, gin_pol_misc_fees
                             WHERE     pofe_code = pmcf_pofe_code
                                   AND pmcf_agnt_agent_code =
                                       c.coin_agnt_agent_code
                                   AND pofe_pol_batch_no = v_pol_batch_no
                                   AND NVL (pofe_authorized, 'N') = 'Y';
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_surv_amt := 0;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR FETCHING SURVEY DETAILS...');
                        END;
                END;

                --***************USE POLICY CURREMCY RATE NOT NEW RATE FROM CRM*****************
                v_exhange_rate_notused :=
                    get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
                v_exhange_rate := v_cur_rate;

                v_gross_coin_mat :=
                    (NVL (c.coin_perct, 0) / 100) * NVL (v_coin_amt, 0);

                v_gross_prem_amt :=
                    (NVL (c.coin_perct, 0) / 100) * NVL (v_amt, 0);

                --RAISE_eRROR(v_gross_prem_amt|| ' = '||v_gross_coin_mat|| ' = '||c.coin_commission||'coin_perct'||c.coin_perct||'v_coin_amt'||v_coin_amt||'v_comm_incl'||v_comm_incl);
                -- deduct survey fee
                IF v_comm_incl = 'Y'
                THEN
                    v_com_amt :=
                          (NVL (v_comm_amt, 0) / NVL (v_dbt_comm, 0))
                        * NVL (c.coin_commission, 0);

                    v_whtx_amt :=
                          (NVL (v_comm_amt, 0) / NVL (v_dbt_comm, 0))
                        * NVL (c.coin_whtx, 0);

                    v_vat_amt :=
                          (NVL (v_comm_amt, 0) / NVL (v_dbt_comm, 0))
                        * NVL (c.coin_vat_amt, 0);
                ELSE
                    IF     NVL (v_net_com_param, 'N') = 'Y'
                       AND v_mtran_client_type <> 'D'
                    THEN
                        v_com_amt :=
                              (NVL (v_comm_amt, 0) / NVL (v_dbt_comm, 0))
                            * NVL (c.coin_commission, 0);

                        v_whtx_amt :=
                              (NVL (v_comm_amt, 0) / NVL (v_dbt_comm, 0))
                            * NVL (c.coin_whtx, 0);

                        v_vat_amt :=
                              (NVL (v_comm_amt, 0) / NVL (v_dbt_comm, 0))
                            * NVL (c.coin_vat_amt, 0);

                        -- v_gross_coin_mat:=NVL (v_gross_coin_mat, 0) - NVL (v_com_amt, 0) + NVL (v_whtx_amt, 0) - NVL (v_vat_amt, 0);
                        IF v_vat_incl = 'N'
                        THEN
                            v_gross_coin_mat :=
                                  NVL (v_gross_coin_mat, 0)
                                + NVL (v_whtx_amt, 0);
                        END IF;
                    ELSE
                        v_com_amt := 0;
                        v_vat_amt := 0;
                    END IF;
                END IF;

                IF NVL (c.coin_comm_rate, 0) != 0
                THEN
                    v_gross_coin_mat :=
                          NVL (v_gross_prem_amt, 0)
                        - NVL (v_com_amt, 0)
                        - NVL (v_whtx_amt, 0)
                        - NVL (v_vat_amt, 0);
                END IF;

                -- RAISE_ERROR('v_vat_incl'||v_vat_incl||'v_gross_coin_mat'||v_gross_coin_mat||'v_com_amt='||v_com_amt|| 'coin_comm_rate='||c.coin_comm_rate||
                -- + 'v_vat_amt'||v_vat_amt||'v_whtx_amt='||v_whtx_amt||'v_gross_prem_amt'||v_gross_prem_amt||'v_dbt_vat'||v_dbt_vat||'v_dbt_whtx'||v_dbt_whtx);
                IF NVL (v_dbt_vat, 0) != 0 OR NVL (v_dbt_whtx, 0) != 0
                THEN
                    v_gross_coin_mat :=
                          NVL (v_gross_coin_mat, 0)
                        + ABS (NVL (v_com_amt, 0))
                        + ABS (NVL (v_vat_amt, 0))
                        - ABS (NVL (v_whtx_amt, 0));
                ELSE
                    v_gross_coin_mat :=
                        v_gross_coin_mat + ABS (v_com_amt) - ABS (v_whtx_amt);
                END IF;

                --RAISE_ERROR('v_gross_coin_mat'||v_gross_coin_mat || ' ='||c.coin_comm_rate);
                v_payable :=
                    ROUND (
                          (NVL (v_surv_amt, 0) / NVL (v_amt, 0))
                        * NVL (c.coin_prem, 0),
                        v_rnd);

                v_coin_fee_amt := ROUND (NVL (c.coin_fee_amt, 0), v_rnd);

                v_dec_amt :=
                      ABS (NVL (v_vat_amt, 0))
                    + ABS (NVL (v_coin_fee_amt, 0))
                    + ABS (NVL (v_com_amt, 0))
                    + ABS (NVL (v_payable, 0))
                    - ABS (NVL (v_whtx_amt, 0));
                --RAISE_ERROR(v_gross_coin_mat|| ' ='||v_dec_amt|| ' ='||v_coin_fee_amt);
                v_net_amt := v_gross_coin_mat - NVL (v_dec_amt, 0);

                -- RAISE_ERROR(v_gross_coin_mat||'v_net_amt='||v_net_amt||'v_whtx_amt='||v_whtx_amt||'v_dec_amt='||
                -- v_dec_amt||'v_coin_fee_amt='||v_coin_fee_amt||'v_vat_amt='||v_vat_amt);
                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || coinp_code_seq.NEXTVAL)
                  INTO v_coinp_code
                  FROM DUAL;

                -- raise_error ('v_gross_coin_mat'||v_gross_coin_mat|| 'v_com_amt = ' ||v_com_amt || 'v_whtx_amt = ' || v_whtx_amt|| 'v_vat_amt = ' || v_vat_amt||'v_net_amt = '||v_net_amt||'v_coin_fee_amt = '||v_coin_fee_amt);
                INSERT INTO gin_coinsurance_pymts (coinp_code,
                                                   coinp_agn_code,
                                                   coinp_date,
                                                   coinp_dr_ref_no,
                                                   coinp_cr_ref_no,
                                                   coinp_amt,
                                                   coinp_fee_amt,
                                                   coinp_paid,
                                                   coinp_paid_chq_date,
                                                   coinp_paid_chq_no,
                                                   coinp_trans_no,
                                                   coinp_brn_code,
                                                   coinp_bru_code,
                                                   coinp_prepared_by,
                                                   coinp_cr_mtran_no,
                                                   coinp_dr_mtran_no,
                                                   coinp_net_amt,
                                                   coinp_cur_code,
                                                   coinp_act_type,
                                                   coinp_com_amt,
                                                   coinp_surv_amt,
                                                   coinp_vat,
                                                   coinp_client_code,
                                                   coinp_whtax)
                     VALUES (v_coinp_code,
                             c.coin_agnt_agent_code,
                             TRUNC (SYSDATE),
                             v_dr_ref_no,
                             v_cr_ref_no,
                             ROUND (v_gross_coin_mat, v_rnd),
                             ROUND (v_coin_fee_amt, v_rnd),
                             'N',
                             NULL,
                             NULL,
                             NULL,
                             v_brn_code,
                             NULL,
                             v_user,
                             v_cr_mtran_no,
                             v_dr_mtran_no,
                             ROUND (v_net_amt, v_rnd),
                             v_cur_code,
                             'I',
                             ROUND (v_com_amt, v_rnd),
                             v_payable,
                             ROUND (v_vat_amt, v_rnd),
                             DECODE (v_pol_agency_code, 0, 0, v_agnt_code),
                             v_whtx_amt);
            END LOOP;
        END IF;
    END;


    PROCEDURE update_coin_payments18112015 (v_cr_mtran_no   IN NUMBER,
                                            v_cr_ref_no     IN VARCHAR2,
                                            v_dr_mtran_no   IN NUMBER,
                                            v_dr_ref_no     IN VARCHAR2,
                                            v_coin_amt      IN NUMBER,
                                            v_comm_amt      IN NUMBER,
                                            v_brn_code      IN NUMBER,
                                            v_agnt_code     IN NUMBER,
                                            v_cur_code      IN NUMBER,
                                            v_comm_incl     IN VARCHAR2)
    IS
        v_mtran_no               NUMBER;
        v_user                   VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_coinp_code             NUMBER;
        v_act_wthtx              NUMBER := 0;
        v_gross_coin_mat         NUMBER;
        v_net_amt                NUMBER;
        v_whtx                   NUMBER;
        v_pol_pro_code           NUMBER;
        v_act_type               VARCHAR2 (3);
        v_client_type            VARCHAR2 (3);
        v_mkt_agn_code           tqc_agencies.agn_code%TYPE;
        v_pol_batch_no           gin_policies.pol_batch_no%TYPE;
        v_pol_wthtx_appl         VARCHAR2 (1);
        v_coin_policy            VARCHAR2 (1);
        v_coin_policy_leader     VARCHAR2 (1);
        v_coin_policy_share      NUMBER;
        v_coin_policy_combined   VARCHAR2 (1);
        v_dec_amt                NUMBER;
        v_payable                NUMBER;
        v_db_amt                 NUMBER;
        v_com_amt                NUMBER;
        v_coin_fee_amt           NUMBER;
        v_vat_amt                NUMBER;
        v_whtx_amt               NUMBER;
        v_exhange_rate           NUMBER;
        v_exhange_rate_notused   NUMBER;
        v_rnd                    NUMBER;
        v_bcur_rnd               NUMBER;
        v_pol_agency_code        NUMBER;
        v_amt                    NUMBER;
        v_surv_amt               NUMBER;
        v_dbt_comm               NUMBER;
        v_dbt_vat                NUMBER;
        v_dbt_whtx               NUMBER;
        v_cur_rate               NUMBER;
        v_dbt_net_amt            NUMBER;
        v_dbt_comm_levy          NUMBER;

        CURSOR coin (v_pol_batch IN NUMBER)
        IS
            SELECT *
              FROM gin_coinsurers
             WHERE coin_pol_batch_no = v_pol_batch;
    BEGIN
        BEGIN
            SELECT mtran_pol_batch_no,
                   mtran_net_amt,
                   mtran_amount,
                   mtran_commission,
                   mtran_vat,
                   mtran_whtx,
                   mtran_net_amt,
                   mtran_comm_levy_amt
              INTO v_pol_batch_no,
                   v_db_amt,
                   v_amt,
                   v_dbt_comm,
                   v_dbt_vat,
                   v_dbt_whtx,
                   v_dbt_net_amt,
                   v_dbt_comm_levy
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                raise_error ('ERROR FETCHING DEBIT DETAILS...');
        END;

        BEGIN
            SELECT pol_coinsurance,
                   pol_coinsure_leader,
                   pol_coinsurance_share,
                   pol_coin_leader_combined,
                   pol_agnt_agent_code,
                   pol_cur_rate
              INTO v_coin_policy,
                   v_coin_policy_leader,
                   v_coin_policy_share,
                   v_coin_policy_combined,
                   v_pol_agency_code,
                   v_cur_rate
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                raise_error ('ERROR FETCHING THE POLICY DETAILS...');
        END;

        IF     NVL (v_coin_policy, 'N') = 'Y'
           AND NVL (v_coin_policy_combined, 'N') = 'Y'
        THEN
            FOR c IN coin (v_pol_batch_no)
            LOOP
                BEGIN
                    SELECT pofe_payable
                      INTO v_surv_amt
                      FROM gin_pol_misc_coin_fees, gin_pol_misc_fees
                     WHERE     pofe_code = pmcf_pofe_code
                           AND pmcf_agnt_agent_code = c.coin_agnt_agent_code
                           AND pofe_pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_surv_amt := 0;
                    WHEN OTHERS
                    THEN
                        BEGIN
                            SELECT pofe_payable
                              INTO v_surv_amt
                              FROM gin_pol_misc_coin_fees, gin_pol_misc_fees
                             WHERE     pofe_code = pmcf_pofe_code
                                   AND pmcf_agnt_agent_code =
                                       c.coin_agnt_agent_code
                                   AND pofe_pol_batch_no = v_pol_batch_no
                                   AND NVL (pofe_authorized, 'N') = 'Y';
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_surv_amt := 0;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR FETCHING SURVEY DETAILS...');
                        END;
                END;

                --***************USE POLICY CURREMCY RATE ****************
                v_exhange_rate_notused :=
                    get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
                v_exhange_rate := v_cur_rate;
                v_gross_coin_mat :=
                    (NVL (c.coin_perct, 0) / 100) * NVL (v_coin_amt, 0);

                -- deduct survey fee
                IF v_comm_incl = 'Y'
                THEN
                    v_com_amt :=
                          (NVL (v_comm_amt, 0) / NVL (v_dbt_comm, 0))
                        * NVL (c.coin_commission, 0);
                    v_whtx_amt :=
                          (NVL (v_comm_amt, 0) / NVL (v_dbt_comm, 0))
                        * NVL (c.coin_whtx, 0);
                    v_vat_amt :=
                          (NVL (v_comm_amt, 0) / NVL (v_dbt_comm, 0))
                        * NVL (c.coin_vat_amt, 0);
                    v_com_amt := NVL (v_com_amt, 0) + NVL (v_whtx_amt, 0);
                ELSE
                    v_com_amt := 0;
                    v_vat_amt := 0;
                END IF;

                IF NVL (v_dbt_vat, 0) != 0
                THEN
                    v_gross_coin_mat :=
                          NVL (v_gross_coin_mat, 0)
                        + ABS (NVL (v_com_amt, 0))
                        + ABS (NVL (v_vat_amt, 0))
                        - ABS (v_whtx_amt);
                ELSE
                    v_gross_coin_mat :=
                          NVL (v_gross_coin_mat, 0)
                        + ABS (NVL (v_com_amt, 0))
                        - ABS (v_whtx_amt);
                END IF;

                -- RAISE_ERROR(v_gross_coin_mat||' = '||v_comm_incl||' = '||v_com_amt||' = '||v_coin_amt
                -- ||'='||c.coin_commission);
                v_payable :=
                    ROUND (
                          (NVL (v_surv_amt, 0) / NVL (v_amt, 0))
                        * NVL (c.coin_prem, 0),
                        v_rnd);
                v_coin_fee_amt := ROUND (NVL (c.coin_fee_amt, 0), v_rnd);
                v_dec_amt :=
                      ABS (NVL (v_vat_amt, 0))
                    + ABS (NVL (v_coin_fee_amt, 0))
                    + ABS (NVL (v_com_amt, 0))
                    + ABS (NVL (v_payable, 0));
                -- + ABS (NVL (v_whtx_amt, 0));
                v_net_amt := v_gross_coin_mat - NVL (v_dec_amt, 0);

                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || coinp_code_seq.NEXTVAL)
                  INTO v_coinp_code
                  FROM DUAL;

                INSERT INTO gin_coinsurance_pymts (coinp_code,
                                                   coinp_agn_code,
                                                   coinp_date,
                                                   coinp_dr_ref_no,
                                                   coinp_cr_ref_no,
                                                   coinp_amt,
                                                   coinp_fee_amt,
                                                   coinp_paid,
                                                   coinp_paid_chq_date,
                                                   coinp_paid_chq_no,
                                                   coinp_trans_no,
                                                   coinp_brn_code,
                                                   coinp_bru_code,
                                                   coinp_prepared_by,
                                                   coinp_cr_mtran_no,
                                                   coinp_dr_mtran_no,
                                                   coinp_net_amt,
                                                   coinp_cur_code,
                                                   coinp_act_type,
                                                   coinp_com_amt,
                                                   coinp_surv_amt,
                                                   coinp_vat,
                                                   coinp_client_code,
                                                   coinp_whtax)
                     VALUES (v_coinp_code,
                             c.coin_agnt_agent_code,
                             TRUNC (SYSDATE),
                             v_dr_ref_no,
                             v_cr_ref_no,
                             ROUND (v_gross_coin_mat, v_rnd),
                             ROUND (v_coin_fee_amt, v_rnd),
                             'N',
                             NULL,
                             NULL,
                             NULL,
                             v_brn_code,
                             NULL,
                             v_user,
                             v_cr_mtran_no,
                             v_dr_mtran_no,
                             ROUND (v_net_amt, v_rnd),
                             v_cur_code,
                             'I',
                             ROUND (v_com_amt, v_rnd),
                             v_payable,
                             ROUND (v_vat_amt, v_rnd),
                             DECODE (v_pol_agency_code, 0, 0, v_agnt_code),
                             v_whtx_amt);
            END LOOP;
        END IF;
    END;

    PROCEDURE refund_transactions (
        v_cr_mtran_no           NUMBER,
        v_cr_ref_no             VARCHAR2,
        v_dr_mtran_no           NUMBER,
        v_include_comm          VARCHAR2,
        v_post_dt               DATE,
        v_cr_bal         IN OUT NUMBER,
        v_cr_com         IN OUT NUMBER,
        v_dc                    VARCHAR2,
        v_user                  VARCHAR2,
        v_trans_no              NUMBER,
        v_pol_no                gin_policies.pol_policy_no%TYPE,
        v_cur_code              tqc_currencies.cur_code%TYPE,
        v_cur_symbol            tqc_currencies.cur_symbol%TYPE,
        v_cur_rate              gin_master_transactions.mtran_cur_rate%TYPE,
        v_client_code           tqc_clients.clnt_code%TYPE,
        v_brn_code              tqc_branches.brn_code%TYPE)
    IS
        --v_cr_bal NUMBER :=0;
        v_dr_bal          NUMBER := 0;
        v_prem_alloc      NUMBER;
        v_comm_alloc      NUMBER;
        v_name            tqc_clients.clnt_name%TYPE;
        v_dr_comm_due     NUMBER := 0;
        v_acc_no          gin_transaction_types.trnt_gl_code%TYPE;
        v_contra_acc_no   gin_transaction_types.trnt_contra_gl_code%TYPE;
        v_vchr_desc       VARCHAR2 (100) := v_pol_no || '/';

        CURSOR dr_cur IS
            SELECT *
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;
    BEGIN
        BEGIN
            SELECT DISTINCT
                   DECODE (trnt_scl_applicable,
                           'N', trnt_gl_code,
                           trac_acc_no)        trnt_gl_code,
                   DECODE (trnt_scl_applicable,
                           'N', trnt_contra_gl_code,
                           trac_contra_acc)    trnt_contra_gl_code
              INTO v_acc_no, v_contra_acc_no
              FROM gin_class_transactions, gin_transaction_types
             WHERE     trac_trnt_code(+) = 'UP'
                   AND trnt_application_lvl = 'U'
                   AND trnt_type = 'UP'
                   AND ROWNUM = 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('UNABLE TO RETRIEVE SETUP ACCOUNTS.....');
        END;

        BEGIN
            SELECT gis_utilities.clnt_name (clnt_name, clnt_other_names)
              INTO v_name
              FROM tqc_clients
             WHERE clnt_code = v_client_code;

            v_vchr_desc := v_vchr_desc || '' || v_name;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        FOR dr_rec IN dr_cur
        LOOP
            v_dr_bal := ABS (NVL (dr_rec.mtran_balance, 0));

            IF     ABS (NVL (v_cr_bal, 0)) > 0
               AND ABS (v_cr_bal) > ABS (NVL (v_dr_bal, 0))
            THEN
                v_prem_alloc := ABS (v_dr_bal);
            ELSE
                v_prem_alloc := ABS (v_cr_bal);
                v_comm_alloc := 0;
            END IF;

            --raise_application_error(-20001,'v_prem_alloc='||v_prem_alloc||'v_cr_bal='||v_cr_bal);
            DBMS_OUTPUT.put_line ('v_prem_alloc=' || v_prem_alloc);

            IF NVL (v_prem_alloc, 0) != 0
            THEN
                /*Gis_Accounts_Utilities.knock_trans(v_cr_mtran_no,
                v_cr_ref_no,
                dr_rec.mtran_no,
                dr_rec.mtran_ref_no,
                v_post_dt,
                v_prem_alloc,
                --,
                --v_post_dt
                'N');*/
                NULL;
            END IF;

            BEGIN
                INSERT INTO gin_gl_transactions (gltran_no,
                                                 gltran_auth_date,
                                                 gltran_dc,
                                                 gltran_trnt_code,
                                                 gltran_amount,
                                                 gltran_amount_bcur,
                                                 gltran_gltran_acc,
                                                 gltran_contra_acc,
                                                 gltran_usrname,
                                                 gltran_tran_no,
                                                 gltran_pol_policy_no,
                                                 gltran_u_c_trans,
                                                 gltran_cur_code,
                                                 gltran_cur_symbol,
                                                 gltran_cur_rate,
                                                 gltran_btr_trans_code,
                                                 gltran_level,
                                                 gltran_brn_code)
                         VALUES (
                                TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                             || gin_gltran_no_seq.NEXTVAL,
                             TRUNC (SYSDATE),
                             v_dc,
                             'UP',
                             v_cr_bal,
                             v_cr_bal,
                             v_acc_no,
                             v_contra_acc_no,
                             v_user,
                             v_trans_no,
                             v_pol_no,
                             'U',
                             v_cur_code,
                             v_cur_symbol,
                             v_cur_rate,
                             'RFC',
                             'U',
                             v_brn_code);
            --calling FMS proc to get gl account if cur_trans_rec.TRNT_CONTRA_GL_CODE is null
            --DECODE(GIN_INTERFACES_PKG.INTERFACE_ENABLED('UW_TRANS'),'Y', GIN_INTERFACES_PKG.SL_CONTROL_ACC('GIS',v_client_type))),
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_when_others ('Error inserting GIN GL.......');
            END;

            BEGIN
                gin_interfaces_pkg.create_gl_voucher (v_trans_no,
                                                      v_vchr_desc,
                                                      v_user,
                                                      NULL);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_when_others ('Error Creating GL Voucher...');
                    ROLLBACK;
            END;
        END LOOP;
    END;

    PROCEDURE post_upr_backup (v_user       VARCHAR2,
                               v_trans_no   NUMBER,
                               v_date_wet   DATE DEFAULT NULL)
    IS
        v_acc_no          gin_transaction_types.trnt_gl_code%TYPE;
        v_contra_acc_no   gin_transaction_types.trnt_contra_gl_code%TYPE;
        v_gl_trans_no     gin_gl_transactions.gltran_no%TYPE;
        v_vchr_desc       VARCHAR2 (100);
        v_trnt_code       VARCHAR2 (20);
        v_scl_code        gin_policies.pol_scl_code%TYPE;
        v_cur_code        tqc_currencies.cur_code%TYPE;
        v_cur_symbol      tqc_currencies.cur_symbol%TYPE;
        v_cur_rate        gin_master_transactions.mtran_cur_rate%TYPE;
        v_tran_sign       NUMBER;

        CURSOR dr_cur IS
            SELECT *
              FROM gin_unearned_premium
             WHERE up_posted = 'N' AND up_post_batch_no = v_trans_no;

        CURSOR dr_mov_cur (v_up_code NUMBER)
        IS
            SELECT *
              FROM gin_upr_movement
             WHERE     upm_up_code = v_up_code
                   AND upm_up_post_batch_no = v_trans_no;

        CURSOR acc_cur (v_scl_code NUMBER)
        IS
            SELECT trac_acc_no, trac_contra_acc
              FROM gin_transaction_types, gin_class_transactions
             WHERE     trnt_code = 'UPR'
                   AND trnt_code = trac_trnt_code
                   AND trnt_application_lvl = 'U'
                   AND trac_scl_code = v_scl_code;
    BEGIN
        --RAISE_APPLICATION_ERROR(-2000,'BEFORE THE INSERT INTO ACCOUNTS...');
        /* BEGIN
        select NVL(TRNT_CONTRA_GL_CODE,'DEF') TRNT_CONTRA_GL_CODE,TRNT_GL_CODE
        INTO v_contra_acc_no,v_acc_no
        from gin_transaction_types --,GIN_CLASS_TRANSACTIONS
        where TRNT_CODE ='UPR'
        and TRNT_APPLICATION_LVL = 'U';
        EXCEPTION
        WHEN OTHERS THEN
        RAISE_ERROR('UNABLE TO RETRIEVE SETUP ACCOUNTS.....');
        END;
        */
        FOR dr_rec IN dr_cur
        LOOP
            BEGIN
                v_vchr_desc := 'UPR / ' || dr_rec.up_pol_policy_no;

                BEGIN
                    SELECT pol_cur_code,
                           pol_cur_symbol,
                           pol_cur_rate,
                           TO_NUMBER (pol_pro_sht_desc)
                      INTO v_cur_code,
                           v_cur_symbol,
                           v_cur_rate,
                           v_scl_code
                      FROM gin_policies
                     WHERE pol_batch_no = dr_rec.up_pol_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20021,
                            'ERROR GETTING SCl_CODE.. ' || SQLERRM (SQLCODE));
                END;

                IF dr_rec.up_unearned_prem != 0
                THEN
                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                           || gin_gltran_no_seq.NEXTVAL
                      INTO v_gl_trans_no
                      FROM DUAL;

                    BEGIN
                        get_gl_code ('UPR',
                                     v_scl_code,
                                     'U',
                                     v_trnt_code,
                                     v_acc_no,
                                     v_contra_acc_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20021,
                                   'ERROR GETTING SCl_CODE ACCOUNTS ... '
                                || SQLERRM (SQLCODE));
                    END;

                    v_tran_sign := SIGN (dr_rec.up_unearned_prem);

                    -- RAISE_APPLICATION_ERROR (-20001,'v_scl_code =='||v_scl_code);
                    /* FOR acc_rec IN ACC_CUR(v_scl_code) LOOP
                    v_acc_no:=acc_rec.TRAC_ACC_NO;
                    v_contra_acc_no:=acc_rec. TRAC_CONTRA_ACC;
                    END LOOP;*/
                    --RAISE_APPLICATION_ERROR (-20001, '==ATI=='|| v_acc_no ||' contra==;'||v_contra_acc_no );
                    IF v_acc_no IS NULL OR v_contra_acc_no IS NULL
                    THEN
                        raise_application_error (
                            -20021,
                            'ERROR GETTING SCl_CODE ACCOUNTS FOR DIRECT ... ');
                    END IF;

                    INSERT INTO gin_gl_transactions (gltran_no,
                                                     gltran_auth_date,
                                                     gltran_dc,
                                                     gltran_trnt_code,
                                                     gltran_amount,
                                                     gltran_amount_bcur,
                                                     gltran_gltran_acc,
                                                     gltran_contra_acc,
                                                     gltran_usrname,
                                                     gltran_tran_no,
                                                     gltran_pol_policy_no,
                                                     gltran_u_c_trans,
                                                     gltran_cur_code,
                                                     gltran_cur_symbol,
                                                     gltran_cur_rate,
                                                     gltran_btr_trans_code,
                                                     gltran_level,
                                                     gltran_brn_code)
                             VALUES (
                                 v_gl_trans_no,
                                 TRUNC (SYSDATE),
                                 DECODE (v_tran_sign, -1, 'C', 'D'),
                                 'UPR',
                                 NVL (dr_rec.up_post_amnt,
                                      dr_rec.up_unearned_prem),
                                 NVL (dr_rec.up_post_amnt,
                                      dr_rec.up_unearned_prem),
                                 v_acc_no,
                                 v_contra_acc_no,
                                 v_user,
                                 dr_rec.up_post_batch_no,
                                 dr_rec.up_pol_policy_no,
                                 'U',
                                 v_cur_code,
                                 v_cur_symbol,
                                 v_cur_rate,
                                 'UPR',
                                 'U',
                                 dr_rec.up_brn_code);

                    --calling FMS proc to get gl account if cur_trans_rec.TRNT_CONTRA_GL_CODE is null
                    -- DECODE(GIN_INTERFACES_PKG.INTERFACE_ENABLED('UW_TRANS'),'Y', GIN_INTERFACES_PKG.SL_CONTROL_ACC('GIS',v_client_type))),
                    v_acc_no := NULL;
                    v_contra_acc_no := NULL;
                END IF;

                IF dr_rec.up_unearned_treaty_amt != 0
                THEN
                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                           || gin_gltran_no_seq.NEXTVAL
                      INTO v_gl_trans_no
                      FROM DUAL;

                    BEGIN
                        get_gl_code ('UPR',
                                     v_scl_code,
                                     'FSTSUP',
                                     v_trnt_code,
                                     v_acc_no,
                                     v_contra_acc_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20021,
                                   'ERROR GETTING SCl_CODE ACCOUNTS ... '
                                || SQLERRM (SQLCODE));
                    END;

                    IF v_acc_no IS NULL OR v_contra_acc_no IS NULL
                    THEN
                        raise_application_error (
                            -20021,
                            'ERROR GETTING SCl_CODE ACCOUNTS FOR TREATIES ... ');
                    END IF;

                    INSERT INTO gin_gl_transactions (gltran_no,
                                                     gltran_auth_date,
                                                     gltran_dc,
                                                     gltran_trnt_code,
                                                     gltran_amount,
                                                     gltran_amount_bcur,
                                                     gltran_gltran_acc,
                                                     gltran_contra_acc,
                                                     gltran_usrname,
                                                     gltran_tran_no,
                                                     gltran_pol_policy_no,
                                                     gltran_u_c_trans,
                                                     gltran_cur_code,
                                                     gltran_cur_symbol,
                                                     gltran_cur_rate,
                                                     gltran_btr_trans_code,
                                                     gltran_level,
                                                     gltran_brn_code)
                         VALUES (v_gl_trans_no,
                                 TRUNC (SYSDATE),
                                 DECODE (v_tran_sign, -1, 'C', 'D'),
                                 'UPR',
                                 NVL (dr_rec.up_unearned_treaty_amt, 0),
                                 NVL (dr_rec.up_unearned_treaty_amt, 0),
                                 v_acc_no,
                                 v_contra_acc_no,
                                 v_user,
                                 dr_rec.up_post_batch_no,
                                 dr_rec.up_pol_policy_no,
                                 'U',
                                 v_cur_code,
                                 v_cur_symbol,
                                 v_cur_rate,
                                 'UPR',
                                 'FSTSUP',
                                 dr_rec.up_brn_code);

                    v_acc_no := NULL;
                    v_contra_acc_no := NULL;
                END IF;

                IF dr_rec.up_unearned_facout_amt != 0
                THEN
                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                           || gin_gltran_no_seq.NEXTVAL
                      INTO v_gl_trans_no
                      FROM DUAL;

                    BEGIN
                        get_gl_code ('UPR',
                                     v_scl_code,
                                     'FO',
                                     v_trnt_code,
                                     v_acc_no,
                                     v_contra_acc_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20021,
                                   'ERROR GETTING SCl_CODE ACCOUNTS ... '
                                || SQLERRM (SQLCODE));
                    END;

                    IF v_acc_no IS NULL OR v_contra_acc_no IS NULL
                    THEN
                        raise_application_error (
                            -20021,
                            'ERROR GETTING SCl_CODE ACCOUNTS FOR FACRE-OUT ... ');
                    END IF;

                    INSERT INTO gin_gl_transactions (gltran_no,
                                                     gltran_auth_date,
                                                     gltran_dc,
                                                     gltran_trnt_code,
                                                     gltran_amount,
                                                     gltran_amount_bcur,
                                                     gltran_gltran_acc,
                                                     gltran_contra_acc,
                                                     gltran_usrname,
                                                     gltran_tran_no,
                                                     gltran_pol_policy_no,
                                                     gltran_u_c_trans,
                                                     gltran_cur_code,
                                                     gltran_cur_symbol,
                                                     gltran_cur_rate,
                                                     gltran_btr_trans_code,
                                                     gltran_level,
                                                     gltran_brn_code)
                         VALUES (v_gl_trans_no,
                                 TRUNC (SYSDATE),
                                 DECODE (v_tran_sign, -1, 'C', 'D'),
                                 'UPR',
                                 NVL (dr_rec.up_unearned_facout_amt, 0),
                                 NVL (dr_rec.up_unearned_facout_amt, 0),
                                 v_acc_no,
                                 v_contra_acc_no,
                                 v_user,
                                 dr_rec.up_post_batch_no,
                                 dr_rec.up_pol_policy_no,
                                 'U',
                                 v_cur_code,
                                 v_cur_symbol,
                                 v_cur_rate,
                                 'UPR',
                                 'FO',
                                 dr_rec.up_brn_code);

                    v_acc_no := NULL;
                    v_contra_acc_no := NULL;
                END IF;                                     --GIN_UPR_MOVEMENT

                FOR dr_mov_rec IN dr_mov_cur (dr_rec.up_code)
                LOOP
                    v_vchr_desc := 'MUPR/' || dr_mov_rec.upm_pol_batch_no;

                    IF dr_mov_rec.upm_unearned_direct != 0
                    THEN
                        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                               || gin_gltran_no_seq.NEXTVAL
                          INTO v_gl_trans_no
                          FROM DUAL;

                        BEGIN
                            get_gl_code ('MUPR',
                                         v_scl_code,
                                         'U',
                                         v_trnt_code,
                                         v_acc_no,
                                         v_contra_acc_no);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_application_error (
                                    -20021,
                                       'ERROR GETTING SCl_CODE ACCOUNTS ... '
                                    || SQLERRM (SQLCODE));
                        END;

                        v_tran_sign := SIGN (dr_mov_rec.upm_unearned_prem);

                        IF v_acc_no IS NULL OR v_contra_acc_no IS NULL
                        THEN
                            raise_application_error (
                                -20021,
                                'ERROR GETTING SCl_CODE ACCOUNTS FOR DIRECT ... ');
                        END IF;

                        INSERT INTO gin_gl_transactions (
                                        gltran_no,
                                        gltran_auth_date,
                                        gltran_dc,
                                        gltran_trnt_code,
                                        gltran_amount,
                                        gltran_amount_bcur,
                                        gltran_gltran_acc,
                                        gltran_contra_acc,
                                        gltran_usrname,
                                        gltran_tran_no,
                                        gltran_pol_policy_no,
                                        gltran_u_c_trans,
                                        gltran_cur_code,
                                        gltran_cur_symbol,
                                        gltran_cur_rate,
                                        gltran_btr_trans_code,
                                        gltran_level,
                                        gltran_brn_code)
                             VALUES (v_gl_trans_no,
                                     TRUNC (SYSDATE),
                                     DECODE (v_tran_sign, -1, 'C', 'D'),
                                     'MUPR',
                                     NVL (dr_mov_rec.upm_unearned_direct, 0),
                                     NVL (dr_mov_rec.upm_unearned_direct, 0),
                                     v_acc_no,
                                     v_contra_acc_no,
                                     v_user,
                                     dr_mov_rec.upm_up_post_batch_no,
                                     dr_mov_rec.upm_pol_policy_no,
                                     'U',
                                     v_cur_code,
                                     v_cur_symbol,
                                     v_cur_rate,
                                     'MUPR',
                                     'U',
                                     dr_rec.up_brn_code);

                        --calling FMS proc to get gl account if cur_trans_rec.TRNT_CONTRA_GL_CODE is null
                        -- DECODE(GIN_INTERFACES_PKG.INTERFACE_ENABLED('UW_TRANS'),'Y', GIN_INTERFACES_PKG.SL_CONTROL_ACC('GIS',v_client_type))),
                        v_acc_no := NULL;
                        v_contra_acc_no := NULL;
                    END IF;

                    IF dr_mov_rec.upm_unearned_treaty != 0
                    THEN
                        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                               || gin_gltran_no_seq.NEXTVAL
                          INTO v_gl_trans_no
                          FROM DUAL;

                        BEGIN
                            get_gl_code ('MUPR',
                                         v_scl_code,
                                         'FSTSUP',
                                         v_trnt_code,
                                         v_acc_no,
                                         v_contra_acc_no);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_application_error (
                                    -20021,
                                       'ERROR GETTING SCl_CODE ACCOUNTS ... '
                                    || SQLERRM (SQLCODE));
                        END;

                        IF v_acc_no IS NULL OR v_contra_acc_no IS NULL
                        THEN
                            raise_application_error (
                                -20021,
                                'ERROR GETTING SCl_CODE ACCOUNTS FOR TREATIES ... ');
                        END IF;

                        INSERT INTO gin_gl_transactions (
                                        gltran_no,
                                        gltran_auth_date,
                                        gltran_dc,
                                        gltran_trnt_code,
                                        gltran_amount,
                                        gltran_amount_bcur,
                                        gltran_gltran_acc,
                                        gltran_contra_acc,
                                        gltran_usrname,
                                        gltran_tran_no,
                                        gltran_pol_policy_no,
                                        gltran_u_c_trans,
                                        gltran_cur_code,
                                        gltran_cur_symbol,
                                        gltran_cur_rate,
                                        gltran_btr_trans_code,
                                        gltran_level,
                                        gltran_brn_code)
                             VALUES (v_gl_trans_no,
                                     TRUNC (SYSDATE),
                                     DECODE (v_tran_sign, -1, 'C', 'D'),
                                     'MUPR',
                                     NVL (dr_mov_rec.upm_unearned_treaty, 0),
                                     NVL (dr_mov_rec.upm_unearned_treaty, 0),
                                     v_acc_no,
                                     v_contra_acc_no,
                                     v_user,
                                     dr_mov_rec.upm_up_post_batch_no,
                                     dr_mov_rec.upm_pol_policy_no,
                                     'U',
                                     v_cur_code,
                                     v_cur_symbol,
                                     v_cur_rate,
                                     'MUPR',
                                     'FSTSUP',
                                     dr_rec.up_brn_code);

                        v_acc_no := NULL;
                        v_contra_acc_no := NULL;
                    END IF;

                    IF dr_mov_rec.upm_unearned_facout != 0
                    THEN
                        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                               || gin_gltran_no_seq.NEXTVAL
                          INTO v_gl_trans_no
                          FROM DUAL;

                        BEGIN
                            get_gl_code ('MUPR',
                                         v_scl_code,
                                         'FO',
                                         v_trnt_code,
                                         v_acc_no,
                                         v_contra_acc_no);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_application_error (
                                    -20021,
                                       'ERROR GETTING SCl_CODE ACCOUNTS ... '
                                    || SQLERRM (SQLCODE));
                        END;

                        IF v_acc_no IS NULL OR v_contra_acc_no IS NULL
                        THEN
                            raise_application_error (
                                -20021,
                                'ERROR GETTING SCl_CODE ACCOUNTS FOR FACRE-OUT ... ');
                        END IF;

                        INSERT INTO gin_gl_transactions (
                                        gltran_no,
                                        gltran_auth_date,
                                        gltran_dc,
                                        gltran_trnt_code,
                                        gltran_amount,
                                        gltran_amount_bcur,
                                        gltran_gltran_acc,
                                        gltran_contra_acc,
                                        gltran_usrname,
                                        gltran_tran_no,
                                        gltran_pol_policy_no,
                                        gltran_u_c_trans,
                                        gltran_cur_code,
                                        gltran_cur_symbol,
                                        gltran_cur_rate,
                                        gltran_btr_trans_code,
                                        gltran_level,
                                        gltran_brn_code)
                             VALUES (v_gl_trans_no,
                                     TRUNC (SYSDATE),
                                     DECODE (v_tran_sign, -1, 'C', 'D'),
                                     'MUPR',
                                     NVL (dr_mov_rec.upm_unearned_facout, 0),
                                     NVL (dr_mov_rec.upm_unearned_facout, 0),
                                     v_acc_no,
                                     v_contra_acc_no,
                                     v_user,
                                     dr_mov_rec.upm_up_post_batch_no,
                                     dr_mov_rec.upm_pol_policy_no,
                                     'U',
                                     v_cur_code,
                                     v_cur_symbol,
                                     v_cur_rate,
                                     'MUPR',
                                     'FO',
                                     dr_rec.up_brn_code);

                        v_acc_no := NULL;
                        v_contra_acc_no := NULL;
                    END IF;
                END LOOP;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_when_others ('Error inserting GIN GL ......');
            END;

            BEGIN
                --GIN_INTERFACES_PKG.Create_GL_Voucher(v_gl_trans_no,v_vchr_desc,v_user,NULL);
                gin_interfaces_pkg.create_gl_voucher (
                    dr_rec.up_post_batch_no,
                    v_vchr_desc,
                    v_user,
                    NULL);

                UPDATE gin_unearned_premium
                   SET up_posted = 'Y'
                 WHERE up_code = dr_rec.up_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_when_others ('Error Creating GL Voucher...');
                    ROLLBACK;
            END;
        END LOOP;
    END;

    PROCEDURE insert_into_gltran (v_trans_type   IN VARCHAR2,
                                  v_trans_lvl    IN VARCHAR2,
                                  v_scl_code     IN NUMBER,
                                  v_brn_code     IN NUMBER,
                                  v_amount       IN NUMBER,
                                  v_user            VARCHAR2,
                                  v_cur_code     IN NUMBER,
                                  v_cur_symbol   IN VARCHAR2,
                                  v_cur_rate     IN NUMBER,
                                  v_trans_no     IN NUMBER,
                                  v_auth_date    IN DATE)
    IS
        v_acc_no          gin_transaction_types.trnt_gl_code%TYPE;
        v_contra_acc_no   gin_transaction_types.trnt_contra_gl_code%TYPE;
        v_gl_trans_no     gin_gl_transactions.gltran_no%TYPE;
        v_trnt_code       VARCHAR2 (20);
        v_tran_sign       NUMBER;
    BEGIN
        SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
               || gin_gltran_no_seq.NEXTVAL
          INTO v_gl_trans_no
          FROM DUAL;

        BEGIN
            gin_interfaces_pkg.get_gl_acct_code (v_trans_type, --v_trnt_type IN VARCHAR2,
                                                 v_scl_code, --v_scl_code IN NUMBER,
                                                 v_trans_lvl, -- v_app_lvl IN VARCHAR2,
                                                 NULL, -- v_btr_trans_code IN VARCHAR2,
                                                 NULL,
                                                 -- v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                 v_trnt_code, -- v_trnt_code OUT VARCHAR2,
                                                 v_acc_no, -- v_trnt_gl_code OUT VARCHAR2,
                                                 v_contra_acc_no -- v_trnt_contra_gl_code OUT VARCHAR2
                                                                );
        -- get_gl_code (v_trans_type,
        -- v_scl_code,
        -- v_trans_lvl,
        -- v_trnt_code,
        -- v_acc_no,
        -- v_contra_acc_no
        -- );
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_application_error (
                    -20021,
                       'Error Getting Scl_Code Accounts ... '
                    || v_scl_code
                    || ';v_trans_type='
                    || v_trans_type
                    || ';v_trans_lvl='
                    || v_trans_lvl);
        END;

        v_tran_sign := SIGN (v_amount);

        IF v_acc_no IS NULL OR v_contra_acc_no IS NULL
        THEN
            raise_application_error (
                -20021,
                   'Error Getting Scl_Code Accounts For Sub Class :-'
                || v_scl_code
                || ';v_trans_type='
                || v_trans_type
                || ';v_trans_lvl='
                || v_trans_lvl);
        END IF;

        INSERT INTO gin_gl_transactions (gltran_no,
                                         gltran_auth_date,
                                         gltran_dc,
                                         gltran_trnt_code,
                                         gltran_amount,
                                         gltran_amount_bcur,
                                         gltran_gltran_acc,
                                         gltran_contra_acc,
                                         gltran_usrname,
                                         gltran_tran_no,
                                         gltran_pol_policy_no,
                                         gltran_u_c_trans,
                                         gltran_cur_code,
                                         gltran_cur_symbol,
                                         gltran_cur_rate,
                                         gltran_btr_trans_code,
                                         gltran_level,
                                         gltran_brn_code)
             VALUES (v_gl_trans_no,
                     NVL (v_auth_date, TRUNC (SYSDATE)),
                     DECODE (v_tran_sign, 1, 'C', 'D'),
                     v_trans_type,
                     ABS (NVL (v_amount, 0)),
                     ABS (NVL (v_amount, 0)),
                     v_acc_no,
                     v_contra_acc_no,
                     v_user,
                     v_trans_no,
                     NULL,                          --dr_rec.up_pol_policy_no,
                     'U',
                     v_cur_code,
                     v_cur_symbol,
                     v_cur_rate,
                     v_trans_type,
                     v_trans_lvl,
                     v_brn_code);
    END;

    PROCEDURE post_upr (v_utrans_code   IN NUMBER,
                        v_user             VARCHAR2,
                        v_date_wet         DATE DEFAULT NULL)
    IS
        v_vchr_desc          VARCHAR2 (100);
        v_trans_no           NUMBER;
        v_grs_movement       NUMBER;
        v_com_movement       NUMBER;
        v_mand_mvmnt         NUMBER;
        v_quota_mvmnt        NUMBER;
        v_fstsup_mvmnt       NUMBER;
        v_secsup_mvmnt       NUMBER;
        v_facre_mvmnt        NUMBER;
        v_facob_mvmnt        NUMBER;
        v_pool_mvmnt         NUMBER;
        --v_scl_code gin_policies.pol_scl_code%TYPE;
        --v_cur_code tqc_currencies.cur_code%TYPE;
        --v_cur_symbol tqc_currencies.cur_symbol%TYPE;
        v_cur_rate           gin_master_transactions.mtran_cur_rate%TYPE;
        v_rnd                NUMBER;
        v_bcur_rnd           NUMBER;
        v_trans_type         VARCHAR2 (15);
        v_trans_lvl          VARCHAR2 (15);
        v_post_ucr_param     VARCHAR2 (15) := 'Y';

        CURSOR cur_trans IS
            SELECT utrans_year, utrans_month, utrans_authorized
              FROM gin_unearned_transactions
             WHERE utrans_code = v_utrans_code;

        CURSOR cur_summary IS
            SELECT curr.*,
                   -- PREV.USUM_GROSS_PREM PREV_USUM_GROSS_PREM ,
                   prev.usum_unearned_prem     prev_usum_gross_prem,
                   prev.usum_unearned_com      prev_usum_gross_com,
                   prev.usum_mand_prem         prev_usum_mand_prem,
                   prev.usum_mand_comm         prev_usum_mand_comm,
                   prev.usum_quota_prem        prev_usum_quota_prem,
                   prev.usum_quota_comm        prev_usum_quota_comm,
                   prev.usum_fstsup_prem       prev_usum_fstsup_prem,
                   prev.usum_fstsup_comm       prev_usum_fstsup_comm,
                   prev.usum_secsup_prem       prev_usum_secsup_prem,
                   prev.usum_secsup_comm       prev_usum_secsup_comm,
                   prev.usum_facre_prem        prev_usum_facre_prem,
                   prev.usum_facre_comm        prev_usum_facre_comm,
                   prev.usum_facob_prem        prev_usum_facob_prem,
                   prev.usum_facob_comm        prev_usum_facob_comm,
                   prev.usum_pool_prem         prev_usum_pool_prem,
                   prev.usum_pool_comm         prev_usum_pool_comm,
                   cur_code,
                   cur_symbol,
                   cur_rnd
              FROM gin_unearned_summary  curr,
                   gin_unearned_summary  prev,
                   tqc_currencies
             WHERE     curr.usum_cur_code = cur_code
                   AND NVL (curr.usum_prev_usum_code, -220000) =
                       prev.usum_code(+)
                   AND curr.usum_utrans_code = v_utrans_code;

        CURSOR acc_cur (v_scl_code NUMBER)
        IS
            SELECT trac_acc_no, trac_contra_acc
              FROM gin_transaction_types, gin_class_transactions
             WHERE     trnt_code = 'UPR'
                   AND trnt_code = trac_trnt_code
                   AND trnt_application_lvl = 'U'
                   AND trac_scl_code = v_scl_code;

        v_com_mand_mvmnt     NUMBER;
        v_com_quota_mvmnt    NUMBER;
        v_com_fstsup_mvmnt   NUMBER;
        v_com_secsup_mvmnt   NUMBER;
        v_com_facre_mvmnt    NUMBER;
        v_com_facob_mvmnt    NUMBER;
        v_com_pool_mvmnt     NUMBER;
    BEGIN
        --RAISE_eRROR(v_user);
        FOR cur_trans_rec IN cur_trans
        LOOP
            IF NVL (cur_trans_rec.utrans_authorized, 'N') = 'Y'
            THEN
                raise_error ('UPR/UCR already authorized..');
            END IF;

            BEGIN
                SELECT gin_parameters_pkg.get_param_varchar ('POST_UCR')
                  INTO v_post_ucr_param
                  FROM DUAL;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_post_ucr_param := 'Y';
                WHEN OTHERS
                THEN
                    raise_error ('Error fetching POST_UCR parameter...');
            END;

            v_vchr_desc :=
                   'UPR / '
                || cur_trans_rec.utrans_year
                || '/'
                || cur_trans_rec.utrans_month;

            FOR dr_rec IN cur_summary
            LOOP
                BEGIN
                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || ggt_trans_no_seq.NEXTVAL)
                      INTO v_trans_no
                      FROM DUAL;

                    INSERT INTO gin_gis_transactions (ggt_doc_ref,
                                                      ggt_trans_no,
                                                      ggt_btr_trans_code,
                                                      ggt_done_by,
                                                      ggt_done_date,
                                                      ggt_uw_clm_tran,
                                                      ggt_trans_date,
                                                      ggt_effective_date)
                         VALUES (v_vchr_desc,
                                 v_trans_no,
                                 'UPR',
                                 v_user,
                                 TRUNC (SYSDATE),
                                 'A',
                                 TRUNC (SYSDATE),
                                 TRUNC (SYSDATE));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error creating claim transaction..');
                END;

                v_cur_rate := dr_rec.usum_cur_rate;
                v_rnd := dr_rec.cur_rnd;

                BEGIN
                    -- v_grs_movement := NVL(dr_rec.USUM_GROSS_PREM,0) - NVL(dr_rec.PREV_USUM_GROSS_PREM,0);
                    v_grs_movement :=
                          NVL (dr_rec.usum_unearned_prem, 0)
                        - NVL (dr_rec.prev_usum_gross_prem, 0);
                    v_com_movement :=
                          NVL (dr_rec.usum_unearned_com, 0)
                        - NVL (dr_rec.prev_usum_gross_com, 0);
                    v_mand_mvmnt :=
                          NVL (dr_rec.usum_mand_prem, 0)
                        - NVL (dr_rec.prev_usum_mand_prem, 0);
                    v_com_mand_mvmnt :=
                          NVL (dr_rec.usum_mand_comm, 0)
                        - NVL (dr_rec.prev_usum_mand_comm, 0);
                    v_quota_mvmnt :=
                          NVL (dr_rec.usum_quota_prem, 0)
                        - NVL (dr_rec.prev_usum_quota_prem, 0);
                    v_com_quota_mvmnt :=
                          NVL (dr_rec.usum_quota_comm, 0)
                        - NVL (dr_rec.prev_usum_quota_comm, 0);
                    v_fstsup_mvmnt :=
                          NVL (dr_rec.usum_fstsup_prem, 0)
                        - NVL (dr_rec.prev_usum_fstsup_prem, 0);
                    v_com_fstsup_mvmnt :=
                          NVL (dr_rec.usum_fstsup_comm, 0)
                        - NVL (dr_rec.prev_usum_fstsup_comm, 0);
                    v_secsup_mvmnt :=
                          NVL (dr_rec.usum_secsup_prem, 0)
                        - NVL (dr_rec.prev_usum_secsup_prem, 0);
                    v_com_secsup_mvmnt :=
                          NVL (dr_rec.usum_secsup_comm, 0)
                        - NVL (dr_rec.prev_usum_secsup_comm, 0);
                    v_facre_mvmnt :=
                          NVL (dr_rec.usum_facre_prem, 0)
                        - NVL (dr_rec.prev_usum_facre_prem, 0);
                    v_com_facre_mvmnt :=
                          NVL (dr_rec.usum_facre_comm, 0)
                        - NVL (dr_rec.prev_usum_facre_comm, 0);
                    v_facob_mvmnt :=
                          NVL (dr_rec.usum_facob_prem, 0)
                        - NVL (dr_rec.prev_usum_facob_prem, 0);
                    v_com_facob_mvmnt :=
                          NVL (dr_rec.usum_facob_comm, 0)
                        - NVL (dr_rec.prev_usum_facob_comm, 0);
                    v_pool_mvmnt :=
                          NVL (dr_rec.usum_pool_prem, 0)
                        - NVL (dr_rec.prev_usum_pool_prem, 0);
                    v_com_pool_mvmnt :=
                          NVL (dr_rec.usum_pool_comm, 0)
                        - NVL (dr_rec.prev_usum_pool_comm, 0);

                    -- PREMIUMS
                    IF NVL (v_grs_movement, 0) != 0
                    THEN
                        v_trans_type := 'UPR';
                        v_trans_lvl := 'U';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.usum_scl_code,
                                            dr_rec.usum_brn_code,
                                            NVL (v_grs_movement, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_date_wet);
                    END IF;

                    IF NVL (v_mand_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'UPR';
                        v_trans_lvl := 'MAN';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.usum_scl_code,
                                            dr_rec.usum_brn_code,
                                            NVL (v_mand_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_date_wet);
                    END IF;

                    IF NVL (v_quota_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'UPR';
                        v_trans_lvl := 'QST';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.usum_scl_code,
                                            dr_rec.usum_brn_code,
                                            NVL (v_quota_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_date_wet);
                    END IF;

                    IF NVL (v_fstsup_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'UPR';
                        v_trans_lvl := 'FSTSUP';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.usum_scl_code,
                                            dr_rec.usum_brn_code,
                                            NVL (v_fstsup_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_date_wet);
                    END IF;

                    IF NVL (v_secsup_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'UPR';
                        v_trans_lvl := 'SECSUP';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.usum_scl_code,
                                            dr_rec.usum_brn_code,
                                            NVL (v_secsup_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_date_wet);
                    END IF;

                    IF NVL (v_facre_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'UPR';
                        v_trans_lvl := 'FO';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.usum_scl_code,
                                            dr_rec.usum_brn_code,
                                            NVL (v_facre_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_date_wet);
                    END IF;

                    IF NVL (v_facob_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'UPR';
                        v_trans_lvl := 'FO';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.usum_scl_code,
                                            dr_rec.usum_brn_code,
                                            NVL (v_facob_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_date_wet);
                    END IF;

                    IF NVL (v_pool_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'UPR';
                        v_trans_lvl := 'POOL';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.usum_scl_code,
                                            dr_rec.usum_brn_code,
                                            NVL (v_pool_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_date_wet);
                    END IF;

                    -- COMMISSIONS
                    IF NVL (v_post_ucr_param, 'N') = 'Y'
                    THEN
                        IF NVL (v_com_movement, 0) != 0
                        THEN
                            v_trans_type := 'UCR';
                            v_trans_lvl := 'U';
                            insert_into_gltran (v_trans_type,
                                                v_trans_lvl,
                                                dr_rec.usum_scl_code,
                                                dr_rec.usum_brn_code,
                                                NVL (v_com_movement, 0),
                                                v_user,
                                                dr_rec.cur_code,
                                                dr_rec.cur_symbol,
                                                v_cur_rate,
                                                v_trans_no,
                                                v_date_wet);
                        END IF;

                        IF NVL (v_com_mand_mvmnt, 0) != 0
                        THEN
                            v_trans_type := 'UCR';
                            v_trans_lvl := 'MAN';
                            insert_into_gltran (v_trans_type,
                                                v_trans_lvl,
                                                dr_rec.usum_scl_code,
                                                dr_rec.usum_brn_code,
                                                NVL (v_com_mand_mvmnt, 0),
                                                v_user,
                                                dr_rec.cur_code,
                                                dr_rec.cur_symbol,
                                                v_cur_rate,
                                                v_trans_no,
                                                v_date_wet);
                        END IF;

                        IF NVL (v_com_quota_mvmnt, 0) != 0
                        THEN
                            v_trans_type := 'UCR';
                            v_trans_lvl := 'QST';
                            insert_into_gltran (v_trans_type,
                                                v_trans_lvl,
                                                dr_rec.usum_scl_code,
                                                dr_rec.usum_brn_code,
                                                NVL (v_com_quota_mvmnt, 0),
                                                v_user,
                                                dr_rec.cur_code,
                                                dr_rec.cur_symbol,
                                                v_cur_rate,
                                                v_trans_no,
                                                v_date_wet);
                        END IF;

                        IF NVL (v_com_fstsup_mvmnt, 0) != 0
                        THEN
                            v_trans_type := 'UCR';
                            v_trans_lvl := 'FSTSUP';
                            insert_into_gltran (v_trans_type,
                                                v_trans_lvl,
                                                dr_rec.usum_scl_code,
                                                dr_rec.usum_brn_code,
                                                NVL (v_com_fstsup_mvmnt, 0),
                                                v_user,
                                                dr_rec.cur_code,
                                                dr_rec.cur_symbol,
                                                v_cur_rate,
                                                v_trans_no,
                                                v_date_wet);
                        END IF;

                        IF NVL (v_com_secsup_mvmnt, 0) != 0
                        THEN
                            v_trans_type := 'UCR';
                            v_trans_lvl := 'SECSUP';
                            insert_into_gltran (v_trans_type,
                                                v_trans_lvl,
                                                dr_rec.usum_scl_code,
                                                dr_rec.usum_brn_code,
                                                NVL (v_com_secsup_mvmnt, 0),
                                                v_user,
                                                dr_rec.cur_code,
                                                dr_rec.cur_symbol,
                                                v_cur_rate,
                                                v_trans_no,
                                                v_date_wet);
                        END IF;

                        IF NVL (v_com_facre_mvmnt, 0) != 0
                        THEN
                            v_trans_type := 'UCR';
                            v_trans_lvl := 'FO';
                            insert_into_gltran (v_trans_type,
                                                v_trans_lvl,
                                                dr_rec.usum_scl_code,
                                                dr_rec.usum_brn_code,
                                                NVL (v_com_facre_mvmnt, 0),
                                                v_user,
                                                dr_rec.cur_code,
                                                dr_rec.cur_symbol,
                                                v_cur_rate,
                                                v_trans_no,
                                                v_date_wet);
                        END IF;

                        IF NVL (v_com_facob_mvmnt, 0) != 0
                        THEN
                            v_trans_type := 'UCR';
                            v_trans_lvl := 'FO';
                            insert_into_gltran (v_trans_type,
                                                v_trans_lvl,
                                                dr_rec.usum_scl_code,
                                                dr_rec.usum_brn_code,
                                                NVL (v_com_facob_mvmnt, 0),
                                                v_user,
                                                dr_rec.cur_code,
                                                dr_rec.cur_symbol,
                                                v_cur_rate,
                                                v_trans_no,
                                                v_date_wet);
                        END IF;

                        IF NVL (v_com_pool_mvmnt, 0) != 0
                        THEN
                            v_trans_type := 'UCR';
                            v_trans_lvl := 'POOL';
                            insert_into_gltran (v_trans_type,
                                                v_trans_lvl,
                                                dr_rec.usum_scl_code,
                                                dr_rec.usum_brn_code,
                                                NVL (v_com_pool_mvmnt, 0),
                                                v_user,
                                                dr_rec.cur_code,
                                                dr_rec.cur_symbol,
                                                v_cur_rate,
                                                v_trans_no,
                                                v_date_wet);
                        END IF;
                    END IF;
                -- EXCEPTION
                -- WHEN OTHERS
                -- THEN
                -- raise_when_others ('Error inserting GIN GL ......');
                END;

                gin_interfaces_pkg.create_gl_voucher (v_trans_no,
                                                      v_vchr_desc,
                                                      v_user,
                                                      NULL);

                UPDATE gin_gis_transactions
                   SET ggt_trans_authorised = 'Y',
                       ggt_trans_authorised_by = v_user,
                       ggt_trans_authorise_date = TRUNC (SYSDATE)
                 WHERE ggt_trans_no = v_trans_no;
            END LOOP;

            BEGIN
                --GIN_INTERFACES_PKG.Create_GL_Voucher(v_gl_trans_no,v_vchr_desc,v_user,NULL);
                UPDATE gin_unearned_transactions
                   SET utrans_authorized_date = TRUNC (SYSDATE),
                       utrans_authorized_by = v_user,
                       utrans_authorized = 'Y'
                 WHERE utrans_code = v_utrans_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_when_others ('Error Creating GL Voucher...');
                    ROLLBACK;
            END;
        END LOOP;
    END;

    /*
    PROCEDURE post_upr (v_user VARCHAR2, v_trans_no NUMBER)
    IS
    v_acc_no gin_transaction_types.trnt_gl_code%TYPE;
    v_contra_acc_no gin_transaction_types.trnt_contra_gl_code%TYPE;
    v_gl_trans_no gin_gl_transactions.gltran_no%TYPE;
    v_vchr_desc VARCHAR2 (100);
    v_trnt_code VARCHAR2 (20);
    v_scl_code gin_policies.pol_scl_code%TYPE;
    v_cur_code tqc_currencies.cur_code%TYPE;
    v_cur_symbol tqc_currencies.cur_symbol%TYPE;
    v_cur_rate gin_master_transactions.mtran_cur_rate%TYPE;

    CURSOR dr_cur
    IS
    SELECT *
    FROM gin_unearned_premium
    WHERE up_post_batch_no = v_trans_no;

    CURSOR acc_cur (v_scl_code NUMBER)
    IS
    SELECT trac_acc_no, trac_contra_acc
    FROM gin_transaction_types, gin_class_transactions
    WHERE trnt_code = 'UPR'
    AND trnt_code = trac_trnt_code
    AND trnt_application_lvl = 'U'
    AND trac_scl_code = v_scl_code;
    BEGIN
    --RAISE_APPLICATION_ERROR(-2000,'BEFORE THE INSERT INTO ACCOUNTS...');
    -- /* BEGIN
    -- select NVL(TRNT_CONTRA_GL_CODE,'DEF') TRNT_CONTRA_GL_CODE,TRNT_GL_CODE
    -- INTO v_contra_acc_no,v_acc_no
    -- from gin_transaction_types --,GIN_CLASS_TRANSACTIONS
    -- where TRNT_CODE ='UPR'
    -- and TRNT_APPLICATION_LVL = 'U';
    -- EXCEPTION
    -- WHEN OTHERS THEN
    -- RAISE_ERROR('UNABLE TO RETRIEVE SETUP ACCOUNTS.....');
    -- END;
    --
    FOR dr_rec IN dr_cur
    LOOP
    BEGIN
    v_vchr_desc := 'UPR / ' || dr_rec.up_pol_policy_no;

    BEGIN
    SELECT pol_cur_code, pol_cur_symbol, pol_cur_rate,
    TO_NUMBER (pol_pro_sht_desc)
    INTO v_cur_code, v_cur_symbol, v_cur_rate,
    v_scl_code
    FROM gin_policies
    WHERE pol_batch_no = dr_rec.up_pol_batch_no;
    EXCEPTION
    WHEN OTHERS
    THEN
    raise_application_error (-20021,
    'ERROR GETTING SCl_CODE.. '
    || SQLERRM (SQLCODE)
    );
    END;

    SELECT TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
    || gin_gltran_no_seq.NEXTVAL
    INTO v_gl_trans_no
    FROM DUAL;

    BEGIN
    get_gl_code ('UPR',
    v_scl_code,
    'U',
    v_trnt_code,
    v_acc_no,
    v_contra_acc_no
    );
    EXCEPTION
    WHEN OTHERS
    THEN
    raise_application_error
    (-20021,
    'ERROR GETTING SCl_CODE ACCOUNTS.. '
    || SQLERRM (SQLCODE)
    );
    END;

    -- -- RAISE_APPLICATION_ERROR (-20001,'v_scl_code =='||v_scl_code);
    -- /* FOR acc_rec IN ACC_CUR(v_scl_code) LOOP
    -- v_acc_no:=acc_rec.TRAC_ACC_NO;
    -- v_contra_acc_no:=acc_rec. TRAC_CONTRA_ACC;
    -- END LOOP;
    ----RAISE_APPLICATION_ERROR (-20001, '==ATI=='|| v_acc_no ||' contra==;'||v_contra_acc_no );
    INSERT INTO gin_gl_transactions
    (gltran_no, gltran_auth_date, gltran_dc,
    gltran_trnt_code,
    gltran_amount,
    gltran_amount_bcur,
    gltran_gltran_acc, gltran_contra_acc,
    gltran_usrname, gltran_tran_no,
    gltran_pol_policy_no, gltran_u_c_trans,
    gltran_cur_code, gltran_cur_symbol, gltran_cur_rate,
    gltran_btr_trans_code, gltran_level, gltran_brn_code
    )
    VALUES (v_gl_trans_no, TRUNC (SYSDATE), 'D',
    'UPR',
    NVL (dr_rec.up_post_amnt, dr_rec.up_unearned_prem),
    NVL (dr_rec.up_post_amnt, dr_rec.up_unearned_prem),
    v_acc_no, v_contra_acc_no,
    v_user, dr_rec.up_post_batch_no,
    dr_rec.up_pol_policy_no, 'U',
    v_cur_code, v_cur_symbol, v_cur_rate,
    'UPR', 'U', dr_rec.up_brn_code
    );
    --calling FMS proc to get gl account if cur_trans_rec.TRNT_CONTRA_GL_CODE is null
    -- DECODE(GIN_INTERFACES_PKG.INTERFACE_ENABLED('UW_TRANS'),'Y', GIN_INTERFACES_PKG.SL_CONTROL_ACC('GIS',v_client_type))),
    EXCEPTION
    WHEN OTHERS
    THEN
    raise_when_others ('Error inserting GIN GL.......');
    END;

    BEGIN
    --GIN_INTERFACES_PKG.Create_GL_Voucher(v_gl_trans_no,v_vchr_desc,v_user,NULL);
    gin_interfaces_pkg.create_gl_voucher (dr_rec.up_post_batch_no,
    v_vchr_desc,
    v_user,
    NULL
    );

    UPDATE gin_unearned_premium
    SET up_posted = 'Y'
    WHERE up_code = dr_rec.up_code;
    EXCEPTION
    WHEN OTHERS
    THEN
    raise_when_others ('Error Creating GL Voucher...');
    ROLLBACK;
    END;
    END LOOP;
    END;
    */



    /* COMMENTED BY KARANI ON 19/09/2016
     PROCEDURE undo_trans_allocation (
     v_mtran_no IN NUMBER,
     v_tmap_code IN NUMBER DEFAULT NULL,
     v_comm_processed IN varchar2 DEFAULT NULL
     )
     IS

     CURSOR cr_trs_dtls
     IS
     SELECT tmap_mtran_no, tmap_mtran_ref_no, tmap_check_mtran_no,
     SUM (DECODE (tmap_drcr,
     'C', -ABS (tmap_amount),
     ABS (tmap_amount)
     )
     ) tmap_amount,
     tmap_check_mtran_ref_no, tmap_code
     FROM gin_tran_mapping
     WHERE ( tmap_mtran_no = v_mtran_no
     OR tmap_check_mtran_no = v_mtran_no
     )
     AND NVL (tmap_status, 'N') != 'Y'
     AND tmap_code =
     DECODE (NVL (v_tmap_code, 0),
     0, tmap_code,
     v_tmap_code
     )
     GROUP BY tmap_mtran_no,
     tmap_mtran_ref_no,
     tmap_check_mtran_no,
     tmap_check_mtran_ref_no,
     tmap_code
     ORDER BY tmap_code DESC;

     CURSOR cur_commissions (v_prv_mtran_no IN NUMBER, v_dr_mtran_no IN NUMBER)
     IS
     SELECT *
     FROM gin_commission_pymts
     WHERE cop_cr_mtran_no = v_mtran_no
     AND cop_dr_mtran_no = v_dr_mtran_no
     AND NVL (cop_withdrawn, 'N') != 'Y';

     CURSOR cur_coin_pymt (v_dr_mtran_no IN NUMBER)
     IS
     SELECT *
     FROM gin_coinsurance_pymts
     WHERE coinp_cr_mtran_no = v_mtran_no
     AND coinp_dr_mtran_no = v_dr_mtran_no;

     v_cop_code NUMBER;
     v_tot_allocation NUMBER;
     v_cop_eff_dt DATE;
     v_user VARCHAR2 (60)
     := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
     v_cr_comm_payable NUMBER;
     v_dr_comm_payable NUMBER;
     v_coinp_code NUMBER;
     v_net_com_param VARCHAR2 (1) DEFAULT 'N';
     v_vat_inc VARCHAR2 (1) DEFAULT 'N';
     v_comm_inc VARCHAR2 (1) DEFAULT 'Y';
     v_client_type VARCHAR2 (10);
     v_cr_comm_paid NUMBER;
     v_dr_comm_paid NUMBER;
     v_copdt_authorized VARCHAR2 (60);
     BEGIN

     BEGIN
     SELECT gin_parameters_pkg.get_param_varchar
     ('COMM_PAYABLE_NET') INTO v_net_com_param FROM DUAL;
     EXCEPTION
     WHEN NO_DATA_FOUND THEN
     v_net_com_param := 'N';

     WHEN OTHERS
     THEN
     raise_error ('Error fetching net of commission parameter...');
     END;

     FOR cr IN cr_trs_dtls
     LOOP


     BEGIN
     SELECT SUM (DECODE (tmap_drcr,
     'C', -ABS (tmap_amount),
     ABS (tmap_amount)
     )
     )
     INTO v_tot_allocation
     FROM gin_tran_mapping
     WHERE tmap_check_mtran_no = cr.tmap_check_mtran_no
     AND tmap_mtran_no = cr.tmap_mtran_no;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error geting transaction Totals...');
     END;

     IF v_tot_allocation != 0
     THEN
     FOR cur_coms IN cur_commissions (v_mtran_no,
     cr.tmap_check_mtran_no
     )
     LOOP

     BEGIN
     SELECT mtran_vat_inc,mtran_client_type,mtran_alloc_inc_comm
     INTO v_vat_inc,v_client_type,v_comm_inc
     FROM gin_master_transactions
     WHERE mtran_no = cur_coms.cop_cr_mtran_no;
     EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     v_vat_inc := 'N';
     END;
     IF NVL (cur_coms.cop_net_comm, 0) != 0
     AND v_tot_allocation != 0
     THEN
     IF NVL (cur_coms.cop_authorized, 'N') = 'Y'
     THEN
     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || gin_cop_code_seq.NEXTVAL
     )
     INTO v_cop_code
     FROM DUAL;

     INSERT INTO gin_commission_pymts
     (cop_code, cop_agn_code,
     cop_date, cop_dr_ref_no,
     cop_cr_ref_no,
     cop_comm_amt,
     cop_whdtax_amt, cop_ovride_comm_amt,
     cop_ovride_whdtax_amt, cop_agn_unit_mgr,
     cop_paid, cop_paid_chq_date,
     cop_paid_chq_no, cop_paid_vchr_no,
     cop_trans_no, cop_brn_code, cop_bru_code,
     cop_prepared_by,
     cop_cr_mtran_no,
     cop_dr_mtran_no,
     cop_whtx_rate,
     cop_net_comm,
     cop_cur_code, cop_checked, cop_withdrawn
     )
     VALUES (v_cop_code, cur_coms.cop_agn_code,
     TRUNC (SYSDATE), cur_coms.cop_dr_ref_no,
     cur_coms.cop_cr_ref_no,
     -cur_coms.cop_comm_amt,
     ABS (cur_coms.cop_whdtax_amt), NULL,
     NULL, NULL,
     'N', NULL,
     NULL, NULL,
     NULL, cur_coms.cop_brn_code, NULL,
     cur_coms.cop_prepared_by,
     cur_coms.cop_cr_mtran_no,
     cur_coms.cop_dr_mtran_no,
     cur_coms.cop_whtx_rate,
     -cur_coms.cop_net_comm,
     cur_coms.cop_cur_code, 'Y', 'N'
     );
     ELSE --withdraw the commission payment

     if nvl(cur_coms.cop_authorized,'N')='R' AND NVL(v_comm_processed,'N')='Y'THEN
     BEGIN
     select copdt_authorized
     into v_copdt_authorized
     from gin_comm_pymt_dtls
     where copdt_code=cur_coms.cop_copdt_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Cannot Determine whether authorized...');
     END;
     if nvl(v_copdt_authorized,'N') ='Y' THEN
     raise_error ('Cannot Undo.Commission Payment is Pending In Fms...');
     END IF;
     END IF;

     UPDATE gin_commission_pymts
     SET cop_withdrawn = 'Y',
     cop_withdraw_date = SYSDATE,
     cop_withdrawn_by = v_user
     WHERE cop_code = cur_coms.cop_code;

     BEGIN
     DELETE gin_comm_pymt_prepd_dtls
     WHERE COPPDT_CODE =cur_coms.COP_COPPDT_CODE;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error DELETING ...');
     END;
     END IF;

     BEGIN
     SELECT mtran_comm_payable,mtran_comm_paid
     INTO v_dr_comm_payable,v_dr_comm_paid
     FROM gin_master_transactions
     WHERE mtran_no = cur_coms.cop_dr_mtran_no;
     EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     v_dr_comm_payable := 0;
     END;

     BEGIN
     SELECT mtran_comm_payable,mtran_comm_paid
     INTO v_cr_comm_payable,v_cr_comm_paid
     FROM gin_master_transactions
     WHERE mtran_no = cur_coms.cop_cr_mtran_no;
     EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     v_cr_comm_payable := 0;
     END;

     IF NVL (v_dr_comm_payable, 0) !=0 THEN
     UPDATE gin_master_transactions
     SET mtran_comm_payable =mtran_comm_payable- cur_coms.cop_comm_amt,
     mtran_whtx_payable =mtran_whtx_payable- ABS (cur_coms.cop_whdtax_amt),
     mtran_vat_payable = NVL(mtran_vat_payable,0) - NVL(cur_coms.cop_vat,0),
     mtran_comm_paid =0,
     mtran_whtx_paid =0
     WHERE mtran_no = cur_coms.cop_dr_mtran_no;
     END IF;

     IF NVL (v_dr_comm_paid, 0) !=0 THEN
     UPDATE gin_master_transactions
     SET
     mtran_whtx_paid =mtran_whtx_payable+ ABS (cur_coms.cop_whdtax_amt),
     mtran_comm_paid =mtran_whtx_payable+ ABS (cur_coms.cop_comm_amt)
     WHERE mtran_no = cur_coms.cop_dr_mtran_no;
     END IF;

     IF NVL (v_cr_comm_payable, 0) != 0 THEN
     UPDATE gin_master_transactions
     SET mtran_comm_payable =mtran_comm_payable-cur_coms.cop_comm_amt,
     mtran_whtx_payable =mtran_whtx_payable-ABS (cur_coms.cop_whdtax_amt),
     mtran_vat_payable = NVL(mtran_vat_payable,0) - NVL(cur_coms.cop_vat,0),
     mtran_comm_paid =0,
     mtran_whtx_paid =0
     WHERE mtran_no = cur_coms.cop_cr_mtran_no;
     END IF;
     END IF;
     --RAISE_ERROR('v_vat_inc||'||v_vat_inc);
     IF NVL(v_net_com_param,'N') = 'Y' AND v_client_type <> 'D'
     AND NVL(v_comm_inc,'Y') = 'N' THEN
     Gis_Accounts_Utilities.auth_comm_pymnts (
     cur_coms.cop_cr_mtran_no,
     NULL,-- v_mtran_no,
     NULL,
     'CHQ',
     'N',
     v_user,
     NVL(v_vat_inc,'N')
     );
     END IF;
     END LOOP;

     FOR cur_coin IN cur_coin_pymt (cr.tmap_check_mtran_no)
     LOOP
     IF NVL (cur_coin.coinp_authorized, 'N') = 'Y'
     THEN
     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || coinp_code_seq.NEXTVAL
     )
     INTO v_coinp_code
     FROM DUAL;

     INSERT INTO gin_coinsurance_pymts
     (coinp_code, coinp_agn_code,
     coinp_date, coinp_dr_ref_no,
     coinp_cr_ref_no, coinp_amt,
     coinp_fee_amt,
     coinp_com_amt,
     coinp_surv_amt, coinp_vat,
     coinp_paid,
     coinp_paid_chq_date,
     coinp_paid_chq_no,
     coinp_trans_no,
     coinp_brn_code,
     coinp_bru_code,
     coinp_prepared_by,
     coinp_cr_mtran_no,
     coinp_dr_mtran_no,
     coinp_net_amt,
     coinp_cur_code, coinp_checked,
     coinp_client_code, coinp_withdrawn
     )
     VALUES (v_coinp_code, cur_coin.coinp_agn_code,
     cur_coin.coinp_date, cur_coin.coinp_dr_ref_no,
     cur_coin.coinp_cr_ref_no, -cur_coin.coinp_amt,
     -cur_coin.coinp_fee_amt,
     -cur_coin.coinp_com_amt,
     -cur_coin.coinp_surv_amt, -cur_coin.coinp_vat,
     cur_coin.coinp_paid,
     cur_coin.coinp_paid_chq_date,
     cur_coin.coinp_paid_chq_no,
     cur_coin.coinp_trans_no,
     cur_coin.coinp_brn_code,
     cur_coin.coinp_bru_code,
     cur_coin.coinp_prepared_by,
     cur_coin.coinp_cr_mtran_no,
     cur_coin.coinp_dr_mtran_no,
     -cur_coin.coinp_net_amt,
     cur_coin.coinp_cur_code, 'Y',
     cur_coin.coinp_client_code, 'N'
     );
     ELSE --withdraw the coinsurance payment
     UPDATE gin_coinsurance_pymts
     SET coinp_withdrawn = 'Y',
     coinp_withdraw_date = SYSDATE,
     coinp_withdrawn_by = v_user
     WHERE coinp_code = cur_coin.coinp_code;
     END IF;
     END LOOP;

     knock_trans (cr.tmap_mtran_no,
     cr.tmap_mtran_ref_no,
     cr.tmap_check_mtran_no,
     cr.tmap_check_mtran_ref_no,
     TRUNC (SYSDATE),
     cr.tmap_amount,
     'Y'
     );

     UPDATE gin_tran_mapping
     SET tmap_status = 'Y',
     tmap_posted_by = v_user
     WHERE tmap_code = cr.tmap_code;

     BEGIN
     validate_allocations (cr.tmap_mtran_no,
     cr.tmap_check_mtran_no);
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ('Error occured on validation of UN-Allocations.');
     END;
     END IF;

     END LOOP;
     END undo_trans_allocation;
    */



    PROCEDURE undo_trans_allocation (
        v_mtran_no         IN NUMBER,
        v_tmap_code        IN NUMBER DEFAULT NULL,
        v_comm_processed   IN VARCHAR2 DEFAULT NULL)
    IS
        CURSOR cr_trs_dtls IS
              SELECT tmap_mtran_no,
                     tmap_mtran_ref_no,
                     tmap_check_mtran_no,
                     SUM (
                         DECODE (tmap_drcr,
                                 'C', -ABS (tmap_amount),
                                 ABS (tmap_amount)))    tmap_amount,
                     tmap_check_mtran_ref_no,
                     tmap_code
                FROM gin_tran_mapping
               WHERE     (   tmap_mtran_no = v_mtran_no
                          OR tmap_check_mtran_no = v_mtran_no)
                     AND NVL (tmap_status, 'N') != 'Y'
                     AND tmap_code =
                         DECODE (NVL (v_tmap_code, 0),
                                 0, tmap_code,
                                 v_tmap_code)
            GROUP BY tmap_mtran_no,
                     tmap_mtran_ref_no,
                     tmap_check_mtran_no,
                     tmap_check_mtran_ref_no,
                     tmap_code
            ORDER BY tmap_code DESC;

        CURSOR cur_commissions (v_prv_mtran_no   IN NUMBER,
                                v_dr_mtran_no    IN NUMBER)
        IS
            SELECT *
              FROM gin_commission_pymts
             WHERE     cop_cr_mtran_no = v_mtran_no
                   AND cop_dr_mtran_no = v_dr_mtran_no
                   AND NVL (cop_withdrawn, 'N') != 'Y';

        CURSOR cur_coin_pymt (v_dr_mtran_no IN NUMBER)
        IS
            SELECT *
              FROM gin_coinsurance_pymts
             WHERE     coinp_cr_mtran_no = v_mtran_no
                   AND coinp_dr_mtran_no = v_dr_mtran_no;

        CURSOR cur_comm (v_mtran_no IN NUMBER, v_dr_mtran_no IN NUMBER)
        IS
            SELECT DISTINCT cop_cr_mtran_no,
                            cop_cr_ref_no,
                            cop_dr_mtran_no,
                            cop_dr_ref_no
              FROM gin_commission_pymts
             WHERE     cop_cr_mtran_no = v_mtran_no
                   AND cop_dr_mtran_no = v_dr_mtran_no
                   AND cop_paid = 'Y';

        v_cop_code           NUMBER;
        v_tot_allocation     NUMBER;
        v_cop_eff_dt         DATE;
        v_user               VARCHAR2 (60)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_cr_comm_payable    NUMBER;
        v_dr_comm_payable    NUMBER;
        v_coinp_code         NUMBER;
        v_net_com_param      VARCHAR2 (1) DEFAULT 'N';
        v_vat_inc            VARCHAR2 (1) DEFAULT 'N';
        v_comm_inc           VARCHAR2 (1) DEFAULT 'Y';
        v_client_type        VARCHAR2 (10);
        v_cr_comm_paid       NUMBER;
        v_dr_comm_paid       NUMBER;
        v_cnt_auth           NUMBER;
        v_copdt_authorized   VARCHAR2 (60);
        v_error              VARCHAR2 (4000);
        v_cnt_paid           NUMBER;
        v_cnt_comm_claw      NUMBER;
        v_cnt_comm_rc        NUMBER := 0;
    BEGIN
        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
              INTO v_net_com_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_net_com_param := 'N';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching net of commission parameter...');
        END;

        IF NVL (
               GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR (
                   'DEBIT_UNDO_WITH_CREDIT_PYMTS'),
               'N') =
           'Y'
        THEN
            GIN_ACCOUNTS_PKG.checkcreditpayment (v_mtran_no, v_error);

            IF v_error IS NOT NULL
            THEN
                RAISE_ERROR (v_error);
            END IF;
        END IF;

        ---count uw credit
        BEGIN
            SELECT COUNT (1)
              INTO v_cnt_comm_claw
              FROM gin_commission_clawbacks
             WHERE coc_cr_mtran_no = v_mtran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_cnt_comm_claw := 0;
        END;

        IF NVL (v_cnt_comm_claw, 0) > 0
        THEN
            GIN_UW_CREDITS_PKG.withdrawCommClawback (v_mtran_no, v_user);
        END IF;

        ---count receipts
        BEGIN
            SELECT COUNT (1)
              INTO v_cnt_comm_rc
              FROM gin_commission_clawbacks
             WHERE coc_rct_mtran_no = v_mtran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_cnt_comm_rc := 0;
        END;

        IF NVL (v_cnt_comm_rc, 0) > 0
        THEN
            UPDATE gin_commission_clawbacks
               SET coc_utilized = 'N',
                   coc_paid = 'N',
                   coc_authorized = 'N',
                   coc_authorized_by = NULL,
                   coc_authorize_date = NULL,
                   coc_rct_mtran_no = NULL
             WHERE     coc_rct_mtran_no = v_mtran_no
                   AND coc_utilized = 'Y'
                   AND NVL (coc_withdrawn, 'Y') != 'Y';
        END IF;

        FOR cr IN cr_trs_dtls
        LOOP
            BEGIN
                SELECT SUM (
                           DECODE (tmap_drcr,
                                   'C', -ABS (tmap_amount),
                                   ABS (tmap_amount)))
                  INTO v_tot_allocation
                  FROM gin_tran_mapping
                 WHERE     tmap_check_mtran_no = cr.tmap_check_mtran_no
                       AND tmap_mtran_no = cr.tmap_mtran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error geting transaction Totals...');
            END;

            IF v_tot_allocation != 0
            THEN
                ---utilize commission clawbacks
                BEGIN
                    GIN_UW_CREDITS_PKG.utilizeCommclawback (
                        cr.tmap_check_mtran_no,
                        NULL,
                        v_user,
                        'Y');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        --RAISE_ERROR('ERROR WHEN UN-UTILIZING COMMISSION CLAWBACKS....');
                        NULL;
                END;

                FOR cur_coms
                    IN cur_commissions (v_mtran_no, cr.tmap_check_mtran_no)
                LOOP
                    BEGIN
                        SELECT mtran_vat_inc,
                               mtran_client_type,
                               mtran_alloc_inc_comm
                          INTO v_vat_inc, v_client_type, v_comm_inc
                          FROM gin_master_transactions
                         WHERE mtran_no = cur_coms.cop_cr_mtran_no;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            v_vat_inc := 'N';
                    END;



                    BEGIN
                        SELECT COUNT (1)
                          INTO v_cnt_auth
                          FROM GIN_COMMISSION_PYMTS
                         WHERE     cop_copdt_code = cur_coms.cop_copdt_code
                               AND NVL (cop_authorized, 'N') = 'R';
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            v_cnt_auth := 0;
                    END;

                    IF NVL (v_cnt_auth, 0) > 0
                    THEN
                        raise_error (
                            'Cannot Undo.Commission Payment is Pending In Authorization screen from GIS, please undo make ready to continue...');
                    -- undo_comm_allocation (cur_coms.cop_code, trunc(sysdate));
                    END IF;

                    IF NVL (v_copdt_authorized, 'N') = 'Y'
                    THEN
                        raise_error (
                            'Cannot Undo.Commission Payment is Pending In Fms...');
                    END IF;

                    /* Disabled by Brian on 12th October 2018. Cancellations should be allowed and clawbacks done accordingly once Commission has been paid
                     IF NVL (cur_coms.cop_paid, 'N') ='Y'
                     THEN
                     raise_error (
                     'Cannot Undo a debit with a commission already paid in FMS, please cancel the receipt(s) involved...');

                     END IF; */


                    IF     NVL (cur_coms.cop_net_comm, 0) != 0
                       AND v_tot_allocation != 0
                    THEN
                        IF NVL (cur_coms.cop_authorized, 'N') = 'Y'
                        THEN
                            SELECT TO_NUMBER (
                                          TO_CHAR (SYSDATE, 'YYYY')
                                       || gin_cop_code_seq.NEXTVAL)
                              INTO v_cop_code
                              FROM DUAL;

                            INSERT INTO gin_commission_pymts (
                                            cop_code,
                                            cop_agn_code,
                                            cop_date,
                                            cop_dr_ref_no,
                                            cop_cr_ref_no,
                                            cop_comm_amt,
                                            cop_whdtax_amt,
                                            cop_ovride_comm_amt,
                                            cop_ovride_whdtax_amt,
                                            cop_agn_unit_mgr,
                                            cop_paid,
                                            cop_paid_chq_date,
                                            cop_paid_chq_no,
                                            cop_paid_vchr_no,
                                            cop_trans_no,
                                            cop_brn_code,
                                            cop_bru_code,
                                            cop_prepared_by,
                                            cop_cr_mtran_no,
                                            cop_dr_mtran_no,
                                            cop_whtx_rate,
                                            cop_net_comm,
                                            cop_cur_code,
                                            cop_checked,
                                            cop_withdrawn,
                                            cop_type)
                                 VALUES (v_cop_code,
                                         cur_coms.cop_agn_code,
                                         TRUNC (SYSDATE),
                                         cur_coms.cop_dr_ref_no,
                                         cur_coms.cop_cr_ref_no,
                                         -cur_coms.cop_comm_amt,
                                         ABS (cur_coms.cop_whdtax_amt),
                                         NULL,
                                         NULL,
                                         NULL,
                                         'N',
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         cur_coms.cop_brn_code,
                                         NULL,
                                         cur_coms.cop_prepared_by,
                                         cur_coms.cop_cr_mtran_no,
                                         cur_coms.cop_dr_mtran_no,
                                         cur_coms.cop_whtx_rate,
                                         -cur_coms.cop_net_comm,
                                         cur_coms.cop_cur_code,
                                         'Y',
                                         'N',
                                         NVL (cur_coms.cop_type, 'COM'));
                        ELSE                 --withdraw the commission payment
                            IF     NVL (cur_coms.cop_authorized, 'N') = 'R'
                               AND NVL (v_comm_processed, 'N') = 'Y'
                            THEN
                                raise_error (
                                    'Cannot Undo.Commission Payment is Pending In Fms...');
                            END IF;

                            UPDATE gin_commission_pymts
                               SET cop_withdrawn = 'Y',
                                   cop_withdraw_date = SYSDATE,
                                   cop_withdrawn_by = v_user
                             WHERE cop_code = cur_coms.cop_code;

                            BEGIN
                                DELETE gin_comm_pymt_prepd_dtls
                                 WHERE COPPDT_CODE = cur_coms.COP_COPPDT_CODE;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error ('Error DELETING ...');
                            END;

                            BEGIN
                                DELETE gin_comm_pymt_dtls
                                 WHERE copdt_code = cur_coms.cop_copdt_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    --raise_error ('Error deleting commission authorization details');
                                    NULL;
                            END;
                        END IF;

                        BEGIN
                            SELECT mtran_comm_payable, mtran_comm_paid
                              INTO v_dr_comm_payable, v_dr_comm_paid
                              FROM gin_master_transactions
                             WHERE mtran_no = cur_coms.cop_dr_mtran_no;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_dr_comm_payable := 0;
                        END;

                        BEGIN
                            SELECT mtran_comm_payable, mtran_comm_paid
                              INTO v_cr_comm_payable, v_cr_comm_paid
                              FROM gin_master_transactions
                             WHERE mtran_no = cur_coms.cop_cr_mtran_no;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_cr_comm_payable := 0;
                        END;

                        -- UPDATE gin_master_transactions SET mtran_comm_paid =(NVL (mtran_comm_paid, 0))
                        -- - (decode(cur_coms.COP_PAID,'N',0,DECODE(cur_coms.COP_PAID_CHQ_DATE,NULL,0,DECODE(nvl(cur_coms.COP_WITHDRAWN,'N') ,'Y',0,(NVL(cur_coms.COP_COMM_AMT,0)))))), ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
                        -- mtran_whtx_paid=
                        -- (nvl (mtran_whtx_paid, 0))
                        -- - (decode(cur_coms.COP_PAID,'N',0,DECODE(cur_coms.COP_PAID_CHQ_DATE,NULL,0,DECODE(nvl(cur_coms.COP_WITHDRAWN,'N') ,'Y',0,((DECODE(SIGN(cur_coms.COP_COMM_AMT),1,1,-1)*ABS(cur_coms.COP_WHDTAX_AMT))))))) ,
                        -- mtran_comm_payable =(nvl(mtran_comm_payable,0)) - (DECODE(cur_coms.cop_paid_chq_date,NULL,decode(cur_coms.cop_paid,'Y',0,DECODE(nvl(cur_coms.cop_withdrawn,'N') ,'Y',0,(NVL(cur_coms.cop_comm_amt,0)))),0)),
                        -- mtran_whtx_payable =(nvl(mtran_whtx_payable,0)) - (DECODE(cur_coms.cop_paid_chq_date,NULL,decode(cur_coms.cop_paid,'Y',0,DECODE(nvl(cur_coms.cop_withdrawn,'N') ,'Y',0,((DECODE(SIGN(cur_coms.COP_COMM_AMT),1,1,-1)*ABS(cur_coms.COP_WHDTAX_AMT))))),0))
                        -- WHERE mtran_no = cur_coms.cop_cr_mtran_no;
                        ----IF cur_coms.cop_code !=2016751929 THEN
                        ----RAISE_ERROR(cur_coms.cop_code);
                        ----END IF;
                        -- UPDATE gin_master_transactions
                        -- SET mtran_comm_paid =(NVL (mtran_comm_paid, 0))
                        -- - (decode(cur_coms.COP_PAID,'N',0,DECODE(cur_coms.COP_PAID_CHQ_DATE,NULL,0,DECODE(nvl(cur_coms.COP_WITHDRAWN,'N') ,'Y',0,(NVL(cur_coms.COP_COMM_AMT,0)))))), ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
                        -- mtran_whtx_paid=
                        -- (nvl (mtran_whtx_paid, 0))
                        -- - (decode(cur_coms.COP_PAID,'N',0,DECODE(cur_coms.COP_PAID_CHQ_DATE,NULL,0,DECODE(nvl(cur_coms.COP_WITHDRAWN,'N') ,'Y',0,((DECODE(SIGN(cur_coms.COP_COMM_AMT),1,1,-1)*ABS(cur_coms.COP_WHDTAX_AMT))))))) ,
                        -- mtran_comm_payable =(nvl(mtran_comm_payable,0)) - (DECODE(cur_coms.cop_paid_chq_date,NULL,decode(cur_coms.cop_paid,'Y',0,DECODE(nvl(cur_coms.cop_withdrawn,'N') ,'Y',0,(NVL(cur_coms.cop_comm_amt,0)))),0)),
                        -- mtran_whtx_payable =(nvl(mtran_whtx_payable,0)) - (DECODE(cur_coms.cop_paid_chq_date,NULL,decode(cur_coms.cop_paid,'Y',0,DECODE(nvl(cur_coms.cop_withdrawn,'N') ,'Y',0,((DECODE(SIGN(cur_coms.COP_COMM_AMT),1,1,-1)*ABS(cur_coms.COP_WHDTAX_AMT))))),0)),
                        -- MTRAN_LTA_WHTX_PAYABLE = NULL,MTRAN_LTA_PAYABLE = NULL
                        -- WHERE mtran_no = cur_coms.cop_dr_mtran_no;
                        ---credit /receipt
                        UPDATE gin_master_transactions
                           SET mtran_comm_paid =
                                     (NVL (mtran_comm_paid, 0))
                                   - (DECODE (
                                          cur_coms.cop_paid,
                                          'N', 0,
                                          DECODE (
                                              cur_coms.cop_paid_chq_date,
                                              NULL, 0,
                                              DECODE (
                                                  NVL (
                                                      cur_coms.cop_withdrawn,
                                                      'N'),
                                                  'Y', 0,
                                                  (NVL (
                                                       cur_coms.cop_comm_amt,
                                                       0)))))),
                               ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
                               mtran_whtx_paid =
                                     (NVL (mtran_whtx_paid, 0))
                                   - (DECODE (
                                          cur_coms.cop_paid,
                                          'N', 0,
                                          DECODE (
                                              cur_coms.cop_paid_chq_date,
                                              NULL, 0,
                                              DECODE (
                                                  NVL (
                                                      cur_coms.cop_withdrawn,
                                                      'N'),
                                                  'Y', 0,
                                                  ((  DECODE (
                                                          SIGN (
                                                              cur_coms.cop_comm_amt),
                                                          1, 1,
                                                          -1)
                                                    * ABS (
                                                          cur_coms.cop_whdtax_amt))))))),
                               mtran_comm_payable =
                                     (NVL (mtran_comm_payable, 0))
                                   - (DECODE (
                                          cur_coms.cop_paid_chq_date,
                                          NULL, DECODE (
                                                    cur_coms.cop_paid,
                                                    'Y', 0,
                                                    DECODE (
                                                        NVL (
                                                            cur_coms.cop_withdrawn,
                                                            'N'),
                                                        'Y', 0,
                                                        (NVL (
                                                             cur_coms.cop_comm_amt,
                                                             0)))),
                                          0)),
                               mtran_whtx_payable =
                                     (NVL (mtran_whtx_payable, 0))
                                   - (DECODE (
                                          cur_coms.cop_paid_chq_date,
                                          NULL, DECODE (
                                                    cur_coms.cop_paid,
                                                    'Y', 0,
                                                    DECODE (
                                                        NVL (
                                                            cur_coms.cop_withdrawn,
                                                            'N'),
                                                        'Y', 0,
                                                        ((  DECODE (
                                                                SIGN (
                                                                    cur_coms.cop_comm_amt),
                                                                1, 1,
                                                                -1)
                                                          * ABS (
                                                                cur_coms.cop_whdtax_amt))))),
                                          0))
                         WHERE mtran_no = cur_coms.cop_cr_mtran_no;

                        ----DEBIT

                        UPDATE gin_master_transactions
                           SET mtran_comm_paid =
                                     (NVL (mtran_comm_paid, 0))
                                   - (DECODE (
                                          cur_coms.cop_paid,
                                          'N', 0,
                                          DECODE (
                                              cur_coms.cop_paid_chq_date,
                                              NULL, 0,
                                              DECODE (
                                                  NVL (
                                                      cur_coms.cop_withdrawn,
                                                      'N'),
                                                  'Y', 0,
                                                  (NVL (
                                                       cur_coms.cop_comm_amt,
                                                       0)))))),
                               ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
                               mtran_whtx_paid =
                                     (NVL (mtran_whtx_paid, 0))
                                   - (DECODE (
                                          cur_coms.cop_paid,
                                          'N', 0,
                                          DECODE (
                                              cur_coms.cop_paid_chq_date,
                                              NULL, 0,
                                              DECODE (
                                                  NVL (
                                                      cur_coms.cop_withdrawn,
                                                      'N'),
                                                  'Y', 0,
                                                  ((  DECODE (
                                                          SIGN (
                                                              cur_coms.cop_comm_amt),
                                                          1, 1,
                                                          -1)
                                                    * ABS (
                                                          cur_coms.cop_whdtax_amt))))))),
                               mtran_comm_payable =
                                     (NVL (mtran_comm_payable, 0))
                                   - (DECODE (
                                          cur_coms.cop_paid_chq_date,
                                          NULL, DECODE (
                                                    cur_coms.cop_paid,
                                                    'Y', 0,
                                                    DECODE (
                                                        NVL (
                                                            cur_coms.cop_withdrawn,
                                                            'N'),
                                                        'Y', 0,
                                                        (NVL (
                                                             cur_coms.cop_comm_amt,
                                                             0)))),
                                          0)),
                               mtran_whtx_payable =
                                     (NVL (mtran_whtx_payable, 0))
                                   - (DECODE (
                                          cur_coms.cop_paid_chq_date,
                                          NULL, DECODE (
                                                    cur_coms.cop_paid,
                                                    'Y', 0,
                                                    DECODE (
                                                        NVL (
                                                            cur_coms.cop_withdrawn,
                                                            'N'),
                                                        'Y', 0,
                                                        ((  DECODE (
                                                                SIGN (
                                                                    cur_coms.cop_comm_amt),
                                                                1, 1,
                                                                -1)
                                                          * ABS (
                                                                cur_coms.cop_whdtax_amt))))),
                                          0)),
                               mtran_lta_whtx_payable = NULL,
                               mtran_lta_payable = NULL
                         WHERE mtran_no = cur_coms.cop_dr_mtran_no;
                    END IF;

                    --RAISE_ERROR('v_vat_inc||'||v_vat_inc);
                    IF     NVL (v_net_com_param, 'N') = 'Y'
                       AND v_client_type <> 'D'
                       AND NVL (v_comm_inc, 'Y') = 'N'
                    THEN
                        Gis_Accounts_Utilities.auth_comm_pymnts (
                            cur_coms.cop_cr_mtran_no,
                            NULL,                               -- v_mtran_no,
                            NULL,
                            'CHQ',
                            'N',
                            v_user,
                            NVL (v_vat_inc, 'N'));
                    END IF;
                END LOOP;

                FOR cur_coin IN cur_coin_pymt (cr.tmap_check_mtran_no)
                LOOP
                    IF NVL (cur_coin.coinp_authorized, 'N') = 'Y'
                    THEN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || coinp_code_seq.NEXTVAL)
                          INTO v_coinp_code
                          FROM DUAL;

                        INSERT INTO gin_coinsurance_pymts (
                                        coinp_code,
                                        coinp_agn_code,
                                        coinp_date,
                                        coinp_dr_ref_no,
                                        coinp_cr_ref_no,
                                        coinp_amt,
                                        coinp_fee_amt,
                                        coinp_com_amt,
                                        coinp_surv_amt,
                                        coinp_vat,
                                        coinp_paid,
                                        coinp_paid_chq_date,
                                        coinp_paid_chq_no,
                                        coinp_trans_no,
                                        coinp_brn_code,
                                        coinp_bru_code,
                                        coinp_prepared_by,
                                        coinp_cr_mtran_no,
                                        coinp_dr_mtran_no,
                                        coinp_net_amt,
                                        coinp_cur_code,
                                        coinp_checked,
                                        coinp_client_code,
                                        coinp_withdrawn)
                             VALUES (v_coinp_code,
                                     cur_coin.coinp_agn_code,
                                     cur_coin.coinp_date,
                                     cur_coin.coinp_dr_ref_no,
                                     cur_coin.coinp_cr_ref_no,
                                     -cur_coin.coinp_amt,
                                     -cur_coin.coinp_fee_amt,
                                     -cur_coin.coinp_com_amt,
                                     -cur_coin.coinp_surv_amt,
                                     -cur_coin.coinp_vat,
                                     cur_coin.coinp_paid,
                                     cur_coin.coinp_paid_chq_date,
                                     cur_coin.coinp_paid_chq_no,
                                     cur_coin.coinp_trans_no,
                                     cur_coin.coinp_brn_code,
                                     cur_coin.coinp_bru_code,
                                     cur_coin.coinp_prepared_by,
                                     cur_coin.coinp_cr_mtran_no,
                                     cur_coin.coinp_dr_mtran_no,
                                     -cur_coin.coinp_net_amt,
                                     cur_coin.coinp_cur_code,
                                     'Y',
                                     cur_coin.coinp_client_code,
                                     'N');
                    ELSE                    --withdraw the coinsurance payment
                        UPDATE gin_coinsurance_pymts
                           SET coinp_withdrawn = 'Y',
                               coinp_withdraw_date = SYSDATE,
                               coinp_withdrawn_by = v_user
                         WHERE coinp_code = cur_coin.coinp_code;
                    END IF;
                END LOOP;

                knock_trans (cr.tmap_mtran_no,
                             cr.tmap_mtran_ref_no,
                             cr.tmap_check_mtran_no,
                             cr.tmap_check_mtran_ref_no,
                             TRUNC (SYSDATE),
                             cr.tmap_amount,
                             'Y');

                UPDATE gin_tran_mapping
                   SET tmap_status = 'Y'                                   --,
                 -- tmap_posted_by = v_user
                 WHERE tmap_code = cr.tmap_code;

                BEGIN
                    validate_allocations (cr.tmap_mtran_no,
                                          cr.tmap_check_mtran_no);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error occured on validation of UN-Allocations.');
                END;
            END IF;
        -- FOR cur_coms IN cur_comm(v_mtran_no,cr.tmap_check_mtran_no)
        -- LOOP
        -- begin
        -- cancel_comm
        -- (cur_coms.cop_cr_mtran_no,
        -- cur_coms.cop_cr_ref_no,
        -- cur_coms.cop_dr_mtran_no,
        -- cur_coms.cop_dr_ref_no);
        -- EXCEPTION
        -- WHEN OTHERS
        -- THEN
        -- raise_error ('Error Undoing Commision Allocations...');
        -- end;
        -- END LOOP;
        END LOOP;

        update_comm_payable (v_mtran_no);
    END undo_trans_allocation;

    PROCEDURE undo_trans_allocation101215 (
        v_mtran_no    IN NUMBER,
        v_tmap_code   IN NUMBER DEFAULT NULL)
    IS
        CURSOR cr_trs_dtls IS
              SELECT tmap_mtran_no,
                     tmap_mtran_ref_no,
                     tmap_check_mtran_no,
                     SUM (
                         DECODE (tmap_drcr,
                                 'C', -ABS (tmap_amount),
                                 ABS (tmap_amount)))    tmap_amount,
                     tmap_check_mtran_ref_no,
                     tmap_code
                FROM gin_tran_mapping
               WHERE     (   tmap_mtran_no = v_mtran_no
                          OR tmap_check_mtran_no = v_mtran_no)
                     AND NVL (tmap_status, 'N') != 'Y'
                     AND tmap_code =
                         DECODE (NVL (v_tmap_code, 0),
                                 0, tmap_code,
                                 v_tmap_code)
            GROUP BY tmap_mtran_no,
                     tmap_mtran_ref_no,
                     tmap_check_mtran_no,
                     tmap_check_mtran_ref_no,
                     tmap_code
            ORDER BY tmap_code DESC;

        CURSOR cur_commissions (v_prv_mtran_no   IN NUMBER,
                                v_dr_mtran_no    IN NUMBER)
        IS
            SELECT *
              FROM gin_commission_pymts
             WHERE     NVL (cop_withdrawn, 'N') != 'Y'
                   AND (   cop_cr_mtran_no = v_mtran_no
                        OR cop_dr_mtran_no = v_dr_mtran_no);

        CURSOR cur_comm IS
            SELECT DISTINCT cop_cr_mtran_no,
                            cop_cr_ref_no,
                            cop_dr_mtran_no,
                            cop_dr_ref_no
              FROM gin_commission_pymts
             WHERE cop_cr_mtran_no = v_mtran_no;

        -- SELECT * FROM gin_commission_pymts
        -- WHERE cop_cr_mtran_no = v_mtran_no
        -- AND cop_dr_mtran_no = v_dr_mtran_no
        -- AND NVL (cop_withdrawn, 'N') != 'Y';
        CURSOR cur_coin_pymt (v_dr_mtran_no IN NUMBER)
        IS
            SELECT *
              FROM gin_coinsurance_pymts
             WHERE     coinp_cr_mtran_no = v_mtran_no
                   AND coinp_dr_mtran_no = v_dr_mtran_no;

        v_cop_code          NUMBER;
        v_tot_allocation    NUMBER;
        v_prv_mtran_no      NUMBER;
        v_cop_eff_dt        DATE;
        v_user              VARCHAR2 (60)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_cr_comm_payable   NUMBER;
        v_dr_comm_payable   NUMBER;
        v_coinp_code        NUMBER;
    BEGIN
        -- raise_error('here');
        FOR cr IN cr_trs_dtls
        LOOP
            BEGIN
                SELECT SUM (
                           DECODE (tmap_drcr,
                                   'C', -ABS (tmap_amount),
                                   ABS (tmap_amount)))
                  INTO v_tot_allocation
                  FROM gin_tran_mapping
                 WHERE     tmap_check_mtran_no = cr.tmap_check_mtran_no
                       AND tmap_mtran_no = cr.tmap_mtran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error geting transaction Totals...');
            END;

            --raise_error('here');
            IF v_tot_allocation != 0
            THEN
                FOR cur_coms
                    IN cur_commissions (v_mtran_no, cr.tmap_check_mtran_no)
                LOOP
                    IF     NVL (cur_coms.cop_net_comm, 0) != 0
                       AND v_tot_allocation != 0
                    THEN
                        IF NVL (cur_coms.cop_authorized, 'N') = 'Y'
                        THEN
                            SELECT TO_NUMBER (
                                          TO_CHAR (SYSDATE, 'YYYY')
                                       || gin_cop_code_seq.NEXTVAL)
                              INTO v_cop_code
                              FROM DUAL;

                            INSERT INTO gin_commission_pymts (
                                            cop_code,
                                            cop_agn_code,
                                            cop_date,
                                            cop_dr_ref_no,
                                            cop_cr_ref_no,
                                            cop_comm_amt,
                                            cop_whdtax_amt,
                                            cop_ovride_comm_amt,
                                            cop_ovride_whdtax_amt,
                                            cop_agn_unit_mgr,
                                            cop_paid,
                                            cop_paid_chq_date,
                                            cop_paid_chq_no,
                                            cop_paid_vchr_no,
                                            cop_trans_no,
                                            cop_brn_code,
                                            cop_bru_code,
                                            cop_prepared_by,
                                            cop_cr_mtran_no,
                                            cop_dr_mtran_no,
                                            cop_whtx_rate,
                                            cop_net_comm,
                                            cop_cur_code,
                                            cop_checked,
                                            cop_withdrawn)
                                 VALUES (v_cop_code,
                                         cur_coms.cop_agn_code,
                                         TRUNC (SYSDATE),
                                         cur_coms.cop_dr_ref_no,
                                         cur_coms.cop_cr_ref_no,
                                         -cur_coms.cop_comm_amt,
                                         ABS (cur_coms.cop_whdtax_amt),
                                         NULL,
                                         NULL,
                                         NULL,
                                         'N',
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         cur_coms.cop_brn_code,
                                         NULL,
                                         cur_coms.cop_prepared_by,
                                         cur_coms.cop_cr_mtran_no,
                                         cur_coms.cop_dr_mtran_no,
                                         cur_coms.cop_whtx_rate,
                                         -cur_coms.cop_net_comm,
                                         cur_coms.cop_cur_code,
                                         'Y',
                                         'N');
                        ELSE                 --withdraw the commission payment
                            UPDATE gin_commission_pymts
                               SET cop_withdrawn = 'Y',
                                   cop_withdraw_date = SYSDATE,
                                   cop_withdrawn_by = v_user
                             WHERE cop_code = cur_coms.cop_code;
                        END IF;

                        BEGIN
                            SELECT mtran_comm_payable
                              INTO v_dr_comm_payable
                              FROM gin_master_transactions
                             WHERE mtran_no = cur_coms.cop_dr_mtran_no;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_dr_comm_payable := 0;
                        END;

                        BEGIN
                            SELECT mtran_comm_payable
                              INTO v_cr_comm_payable
                              FROM gin_master_transactions
                             WHERE mtran_no = cur_coms.cop_cr_mtran_no;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_cr_comm_payable := 0;
                        END;

                        IF NVL (v_dr_comm_payable, 0) != 0
                        THEN
                            UPDATE gin_master_transactions
                               SET mtran_comm_payable =
                                         mtran_comm_payable
                                       - cur_coms.cop_comm_amt,
                                   mtran_whtx_payable =
                                         mtran_whtx_payable
                                       - ABS (cur_coms.cop_whdtax_amt),
                                   mtran_comm_levy_payable =
                                         mtran_comm_levy_payable
                                       - ABS (cur_coms.cop_comm_levy_amt),
                                   mtran_comm_paid =
                                         mtran_comm_paid
                                       - cur_coms.cop_comm_amt,
                                   mtran_vat_payable =
                                         NVL (mtran_vat_payable, 0)
                                       - NVL (cur_coms.cop_vat, 0)
                             WHERE mtran_no = cur_coms.cop_dr_mtran_no;
                        END IF;

                        IF NVL (v_cr_comm_payable, 0) != 0
                        THEN
                            UPDATE gin_master_transactions
                               SET mtran_comm_payable =
                                         mtran_comm_payable
                                       - cur_coms.cop_comm_amt,
                                   mtran_comm_paid =
                                         mtran_comm_paid
                                       - cur_coms.cop_comm_amt,
                                   mtran_whtx_payable = 0,
                                   -- mtran_whtx_payable =
                                   -- mtran_whtx_payable
                                   -- - ABS (cur_coms.cop_whdtax_amt),
                                   mtran_comm_levy_payable =
                                         mtran_comm_levy_payable
                                       - ABS (cur_coms.cop_comm_levy_amt),
                                   mtran_vat_payable =
                                         NVL (mtran_vat_payable, 0)
                                       - NVL (cur_coms.cop_vat, 0)
                             WHERE mtran_no = cur_coms.cop_cr_mtran_no;
                        END IF;
                    END IF;
                END LOOP;

                FOR cur_coin IN cur_coin_pymt (cr.tmap_check_mtran_no)
                LOOP
                    IF NVL (cur_coin.coinp_authorized, 'N') = 'Y'
                    THEN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || coinp_code_seq.NEXTVAL)
                          INTO v_coinp_code
                          FROM DUAL;

                        INSERT INTO gin_coinsurance_pymts (
                                        coinp_code,
                                        coinp_agn_code,
                                        coinp_date,
                                        coinp_dr_ref_no,
                                        coinp_cr_ref_no,
                                        coinp_amt,
                                        coinp_fee_amt,
                                        coinp_com_amt,
                                        coinp_surv_amt,
                                        coinp_vat,
                                        coinp_paid,
                                        coinp_paid_chq_date,
                                        coinp_paid_chq_no,
                                        coinp_trans_no,
                                        coinp_brn_code,
                                        coinp_bru_code,
                                        coinp_prepared_by,
                                        coinp_cr_mtran_no,
                                        coinp_dr_mtran_no,
                                        coinp_net_amt,
                                        coinp_cur_code,
                                        coinp_checked,
                                        coinp_client_code,
                                        coinp_withdrawn)
                             VALUES (v_coinp_code,
                                     cur_coin.coinp_agn_code,
                                     cur_coin.coinp_date,
                                     cur_coin.coinp_dr_ref_no,
                                     cur_coin.coinp_cr_ref_no,
                                     -cur_coin.coinp_amt,
                                     -cur_coin.coinp_fee_amt,
                                     -cur_coin.coinp_com_amt,
                                     -cur_coin.coinp_surv_amt,
                                     -cur_coin.coinp_vat,
                                     cur_coin.coinp_paid,
                                     cur_coin.coinp_paid_chq_date,
                                     cur_coin.coinp_paid_chq_no,
                                     cur_coin.coinp_trans_no,
                                     cur_coin.coinp_brn_code,
                                     cur_coin.coinp_bru_code,
                                     cur_coin.coinp_prepared_by,
                                     cur_coin.coinp_cr_mtran_no,
                                     cur_coin.coinp_dr_mtran_no,
                                     -cur_coin.coinp_net_amt,
                                     cur_coin.coinp_cur_code,
                                     'Y',
                                     cur_coin.coinp_client_code,
                                     'N');
                    ELSE                    --withdraw the coinsurance payment
                        UPDATE gin_coinsurance_pymts
                           SET coinp_withdrawn = 'Y',
                               coinp_withdraw_date = SYSDATE,
                               coinp_withdrawn_by = v_user
                         WHERE coinp_code = cur_coin.coinp_code;
                    END IF;
                END LOOP;

                knock_trans (cr.tmap_mtran_no,
                             cr.tmap_mtran_ref_no,
                             cr.tmap_check_mtran_no,
                             cr.tmap_check_mtran_ref_no,
                             TRUNC (SYSDATE),
                             cr.tmap_amount,
                             'Y');

                UPDATE gin_tran_mapping
                   SET tmap_status = 'Y', tmap_posted_by = v_user
                 WHERE tmap_code = cr.tmap_code;

                BEGIN
                    validate_allocations (cr.tmap_mtran_no,
                                          cr.tmap_check_mtran_no);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error occured on validation of UN-Allocations.');
                END;
            END IF;
        END LOOP;

        FOR cur_coms IN cur_comm
        LOOP
            BEGIN
                cancel_comm (cur_coms.cop_cr_mtran_no,
                             cur_coms.cop_cr_ref_no,
                             cur_coms.cop_dr_mtran_no,
                             cur_coms.cop_dr_ref_no);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error Undoing Commision Allocations...');
            END;
        END LOOP;
    END undo_trans_allocation101215;

    PROCEDURE comms_qry (resultset     IN OUT comms_ref,
                         v_date_from   IN     DATE,
                         v_date_to     IN     DATE)
    IS
    BEGIN
        OPEN resultset FOR
              SELECT cop_agn_code,
                     cop_brn_code,
                     cop_bru_code,
                     SUM (NVL (cop_comm_amt, 0))             comm_amt,
                     SUM (NVL (cop_whdtax_amt, 0))           whtax,
                     SUM (NVL (cop_ovride_comm_amt, 0))      ovrde_comm,
                     SUM (NVL (cop_ovride_whdtax_amt, 0))    ovrde_whtax,
                       --SUM(NVL(COP_NET_COMM,0)) net_comm
                       SUM (NVL (cop_comm_amt, 0))
                     + SUM (NVL (cop_whdtax_amt, 0))         net_comm
                FROM gin_commission_pymts
               WHERE     NVL (cop_authorized, 'N') = 'N'
                     AND NVL (cop_paid, 'N') = 'N'
                     AND NVL (cop_checked, 'N') = 'Y'
                     AND cop_date BETWEEN v_date_from AND v_date_to
            GROUP BY cop_agn_code, cop_brn_code, cop_bru_code;
    END;

    PROCEDURE compute_overide (v_trans_no NUMBER, v_date DATE)
    IS
        v_rank                 NUMBER;
        v_user                 VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');

        --This procedure accummulates the agent overrides for easier processing and reporting
        CURSOR top_rank IS
              SELECT osd_code,
                     osd_parent_osd_code,
                     osd_div_head_agn_code,
                     odl_ranking,
                     act_code,
                     SUM (comm_amt)     comm_amt,
                     SUM (whtx_amt)     whtx_amt
                FROM (  SELECT osd_code,
                               osd_parent_osd_code,
                               osd_div_head_agn_code,
                               odl_ranking,
                               act_code,
                               SUM (cop_comm_amt)       comm_amt,
                               SUM (cop_whdtax_amt)     whtx_amt
                          FROM tqc_org_subdivisions,
                               tqc_org_division_levels_type,
                               tqc_org_division_levels,
                               tqc_agency_systems,
                               gin_commission_pymts,
                               tqc_account_types
                         WHERE     osd_sys_code = 37
                               AND osd_dlt_code = dlt_code
                               AND osd_odl_code = odl_code
                               AND asys_osd_code = osd_code
                               AND asys_agn_code = cop_agn_code
                               AND act_odl_code(+) = odl_code
                               AND osd_code NOT IN
                                       (SELECT DISTINCT osd_parent_osd_code
                                          FROM tqc_org_subdivisions
                                         WHERE osd_parent_osd_code IS NOT NULL)
                      GROUP BY osd_code,
                               osd_parent_osd_code,
                               osd_div_head_agn_code,
                               odl_ranking,
                               act_code)
            GROUP BY osd_code,
                     osd_parent_osd_code,
                     osd_div_head_agn_code,
                     odl_ranking,
                     act_code;

        CURSOR other_ovrds IS
              SELECT osd_code,
                     osd_parent_osd_code,
                     osd_div_head_agn_code,
                     odl_ranking,
                     act_code,
                     cov_drcr,
                     SUM (cov_comm_amt)     comm_amt,
                     SUM (cov_whtx_amt)     whtx_amt
                FROM tqc_org_subdivisions,
                     tqc_org_division_levels_type,
                     tqc_org_division_levels,
                     gin_comm_overides,
                     tqc_account_types
               WHERE     osd_sys_code = 27
                     AND osd_dlt_code = dlt_code
                     AND osd_odl_code = odl_code
                     AND act_odl_code = odl_code
                     AND odl_ranking = v_rank
                     AND osd_code = cov_parent_osd_code
            GROUP BY osd_code,
                     osd_parent_osd_code,
                     osd_div_head_agn_code,
                     odl_ranking,
                     act_code,
                     cov_drcr;

        CURSOR ov_on_ov_ovrds IS
            SELECT DISTINCT cov_agn_code, agn_act_code, agn_sht_desc
              FROM gin_comm_overides, tqc_agencies
             WHERE cov_trans_no = v_trans_no AND cov_agn_code = agn_code;

        CURSOR ovrds_update IS
              SELECT cov_agn_code,
                     agn_act_code,
                     agn_sht_desc,
                     NVL (cov_drcr, 'C')         cov_drcr,
                     SUM (cov_comm_amt)          cov_comm_amt,
                     SUM (cov_whtx_amt)          cov_whtx_amt,
                     SUM (cov_ov_on_ov_amt)      cov_ov_on_ov_amt,
                     SUM (cov_ov_on_ov_whtx)     cov_ov_on_ov_whtx
                FROM gin_comm_overides, tqc_agencies
               WHERE cov_trans_no = v_trans_no AND cov_agn_code = agn_code
            GROUP BY cov_agn_code,
                     agn_act_code,
                     agn_sht_desc,
                     cov_drcr;

        v_cnt                  NUMBER (6);
        v_cnt1                 NUMBER (6);
        v_cnt2                 NUMBER (6);
        v_comm_amt             NUMBER;
        v_whtx_amt             NUMBER;
        v_agn_rank             NUMBER;
        --To do fetch the maximum rank for the agent
        v_osd_code             gin_comm_overides.cov_osd_code%TYPE;
        v_parent_osd_code      gin_comm_overides.cov_parent_osd_code%TYPE;
        v_capin_savings_rate   NUMBER;
    BEGIN
        FOR t IN top_rank
        LOOP
            INSERT INTO gin_comm_overides (cov_code,
                                           cov_agn_code,
                                           cov_act_code,
                                           cov_trans_no,
                                           cov_comm_amt,
                                           cov_whtx_amt,
                                           cov_date,
                                           cov_ranking,
                                           cov_osd_code,
                                           cov_parent_osd_code)
                     VALUES (
                            TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                         || cov_code_seq.NEXTVAL,
                         t.osd_div_head_agn_code,
                         t.act_code,
                         v_trans_no,
                         t.comm_amt,
                         t.whtx_amt,
                         TRUNC (SYSDATE),
                         t.odl_ranking,
                         t.osd_code,
                         t.osd_parent_osd_code);

            v_rank := TO_NUMBER (t.odl_ranking);
        END LOOP;

        WHILE NVL (v_rank, 0) > 1
        LOOP
            v_rank := v_rank - 1;

            FOR o IN other_ovrds
            LOOP
                INSERT INTO gin_comm_overides (cov_code,
                                               cov_agn_code,
                                               cov_act_code,
                                               cov_trans_no,
                                               cov_comm_amt,
                                               cov_whtx_amt,
                                               cov_date,
                                               cov_ranking,
                                               cov_osd_code,
                                               cov_parent_osd_code,
                                               cov_drcr)
                         VALUES (
                                TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                             || cov_code_seq.NEXTVAL,
                             o.osd_div_head_agn_code,
                             o.act_code,
                             v_trans_no,
                             o.comm_amt,
                             o.whtx_amt,
                             TRUNC (SYSDATE),
                             o.odl_ranking,
                             o.osd_code,
                             o.osd_parent_osd_code,
                             o.cov_drcr);
            END LOOP;
        END LOOP;

        FOR ov IN ov_on_ov_ovrds
        LOOP
            v_osd_code := NULL;
            v_parent_osd_code := NULL;

            SELECT SUM (cov_comm_amt), SUM (cov_whtx_amt), MAX (cov_ranking)
              INTO v_comm_amt, v_whtx_amt, v_agn_rank
              FROM gin_comm_overides
             WHERE     cov_agn_code = ov.cov_agn_code
                   AND NVL (cov_drcr, 'C') = 'C'
                   AND cov_trans_no = v_trans_no;

            SELECT COUNT (1)
              INTO v_cnt
              FROM gin_ovrd_on_ovrd_comm
             WHERE     ooc_agn_code = ov.cov_agn_code
                   AND NVL (ooc_drcr, 'C') = 'C'
                   AND ooc_trans_no = v_trans_no;

            BEGIN
                SELECT cov_osd_code, cov_parent_osd_code
                  INTO v_osd_code, v_parent_osd_code
                  FROM gin_comm_overides
                 WHERE     cov_ranking = v_agn_rank
                       AND cov_agn_code = ov.cov_agn_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'Error fetching agent rank details agent: '
                        || ov.agn_sht_desc);
            END;

            IF NVL (v_comm_amt, 0) <> 0
            THEN
                IF v_cnt = 0
                THEN
                    BEGIN
                        INSERT INTO gin_comm_overides (cov_code,
                                                       cov_agn_code,
                                                       cov_act_code,
                                                       cov_trans_no,
                                                       cov_comm_amt,
                                                       cov_whtx_amt,
                                                       cov_date,
                                                       cov_ranking,
                                                       cov_osd_code,
                                                       cov_parent_osd_code,
                                                       cov_drcr,
                                                       cov_ov_on_ov_amt,
                                                       cov_ov_on_ov_whtx)
                                 VALUES (
                                        TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                                     || cov_code_seq.NEXTVAL,
                                     ov.cov_agn_code,
                                     ov.agn_act_code,
                                     v_trans_no,
                                     0,
                                     0,
                                     SYSDATE,
                                     v_agn_rank,
                                     v_osd_code,
                                     v_parent_osd_code,
                                     'C',
                                     v_comm_amt,
                                     v_whtx_amt);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error creating ov. on ov. details agent: '
                                || ov.agn_sht_desc);
                    END;
                ELSE
                    BEGIN
                        UPDATE gin_comm_overides
                           SET cov_date = SYSDATE,
                               cov_ranking = v_agn_rank,
                               cov_osd_code = v_osd_code,
                               cov_parent_osd_code = v_parent_osd_code,
                               cov_ov_on_ov_amt = v_comm_amt,
                               cov_ov_on_ov_whtx = v_whtx_amt
                         WHERE     cov_agn_code = ov.cov_agn_code
                               AND NVL (cov_drcr, 'C') = 'C'
                               AND cov_trans_no = v_trans_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error updating ov. on ov. details agent: '
                                || ov.agn_sht_desc);
                    END;
                END IF;
            END IF;

            --==============DEBITS================================
            v_osd_code := NULL;
            v_parent_osd_code := NULL;

            SELECT SUM (cov_comm_amt), SUM (cov_whtx_amt), MAX (cov_ranking)
              INTO v_comm_amt, v_whtx_amt, v_agn_rank
              FROM gin_comm_overides
             WHERE     cov_agn_code = ov.cov_agn_code
                   AND NVL (cov_drcr, 'C') = 'D'
                   AND cov_trans_no = v_trans_no;

            SELECT COUNT (1)
              INTO v_cnt
              FROM gin_ovrd_on_ovrd_comm
             WHERE     ooc_agn_code = ov.cov_agn_code
                   AND NVL (ooc_drcr, 'C') = 'D'
                   AND ooc_trans_no = v_trans_no;

            BEGIN
                SELECT cov_osd_code, cov_parent_osd_code
                  INTO v_osd_code, v_parent_osd_code
                  FROM gin_comm_overides
                 WHERE     cov_ranking = v_agn_rank
                       AND cov_agn_code = ov.cov_agn_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'Error fetching clawback agent rank details agent: '
                        || ov.agn_sht_desc);
            END;

            IF NVL (v_comm_amt, 0) <> 0
            THEN
                IF v_cnt = 0
                THEN
                    BEGIN
                        INSERT INTO gin_comm_overides (cov_code,
                                                       cov_agn_code,
                                                       cov_act_code,
                                                       cov_trans_no,
                                                       cov_comm_amt,
                                                       cov_whtx_amt,
                                                       cov_date,
                                                       cov_ranking,
                                                       cov_osd_code,
                                                       cov_parent_osd_code,
                                                       cov_drcr,
                                                       cov_ov_on_ov_amt,
                                                       cov_ov_on_ov_whtx)
                                 VALUES (
                                        TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                                     || cov_code_seq.NEXTVAL,
                                     ov.cov_agn_code,
                                     ov.agn_act_code,
                                     v_trans_no,
                                     0,
                                     0,
                                     SYSDATE,
                                     v_agn_rank,
                                     v_osd_code,
                                     v_parent_osd_code,
                                     'D',
                                     v_comm_amt,
                                     v_whtx_amt);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error creating clawback ov. on ov. details agent: '
                                || ov.agn_sht_desc);
                    END;
                ELSE
                    BEGIN
                        UPDATE gin_comm_overides
                           SET cov_date = SYSDATE,
                               cov_ranking = v_agn_rank,
                               cov_osd_code = v_osd_code,
                               cov_parent_osd_code = v_parent_osd_code,
                               cov_ov_on_ov_amt = v_comm_amt,
                               cov_ov_on_ov_whtx = v_whtx_amt
                         WHERE     cov_agn_code = ov.cov_agn_code
                               AND NVL (cov_drcr, 'C') = 'D'
                               AND cov_trans_no = v_trans_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error updating clawback ov. on ov. details agent: '
                                || ov.agn_sht_desc);
                    END;
                END IF;
            END IF;
        END LOOP;

        --=================override update====================
        FOR ou IN ovrds_update
        LOOP
            v_cnt1 := 0;
            v_cnt2 := 0;

            SELECT COUNT (1)
              INTO v_cnt1
              FROM gin_commission_pymts
             WHERE     cop_agn_code = ou.cov_agn_code
                   AND cop_trans_no = v_trans_no;

            IF NVL (ou.cov_comm_amt, 0) > 0
            THEN
                IF NVL (v_cnt1, 0) > 0
                THEN
                    BEGIN
                        UPDATE gin_commission_pymts
                           SET cop_ovride_comm_amt = NVL (ou.cov_comm_amt, 0),
                               cop_ovride_whdtax_amt =
                                   NVL (ou.cov_whtx_amt, 0),
                               cop_ovride_comm_rate = NULL,
                               cop_ovride_whdtax_rate = NULL
                         WHERE     cop_agn_code = ou.cov_agn_code
                               --AND COP_DRCR = OU.COV_DRCR
                               AND cop_code =
                                   (SELECT MAX (cop_code)
                                      FROM gin_commission_pymts
                                     WHERE cop_agn_code = ou.cov_agn_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to update manager overide commission amount...');
                    END;
                ELSE
                    BEGIN
                        INSERT INTO gin_commission_pymts (
                                        cop_code,
                                        cop_agn_code,
                                        cop_date,
                                        cop_ovride_comm_amt,
                                        cop_ovride_whdtax_amt,
                                        cop_agn_unit_mgr,
                                        cop_paid,
                                        cop_trans_no,
                                        cop_brn_code,
                                        cop_prepared_by,
                                        cop_authorized,
                                        cop_ovride_comm_rate,
                                        cop_ovride_whdtax_rate)
                                 VALUES (
                                     TO_NUMBER (
                                            TO_CHAR (SYSDATE, 'YYYY')
                                         || gin_cop_code_seq.NEXTVAL),
                                     ou.cov_agn_code,
                                     TRUNC (SYSDATE),
                                     NVL (ou.cov_comm_amt, 0),
                                     NVL (ou.cov_whtx_amt, 0),
                                     'Y',
                                     'N',
                                     v_trans_no,
                                     NULL,
                                     v_user,
                                     'N',
                                     NULL,
                                     NULL);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Unable to create commissions payemnts record...');
                    END;
                END IF;
            END IF;
        END LOOP;
    END compute_overide;

    PROCEDURE update_comm_recs (date_from   IN DATE,
                                date_to     IN DATE,
                                v_checked   IN VARCHAR2)
    IS
    BEGIN
        UPDATE gin_commission_pymts
           SET cop_checked = v_checked
         WHERE     NVL (cop_authorized, 'N') = 'N'
               AND NVL (cop_paid, 'N') = 'N'
               AND cop_date BETWEEN NVL (date_from, cop_date)
                                AND NVL (date_to, cop_date);
    END;

    /*
    PROCEDURE Process_Commission_Pymt(v_cop_paid_vchr_no Varchar2) IS
    Cursor c_comm is
    SELECT COP_PAID_VCHR_NO, COP_AGN_CODE, COP_DATE, COP_COMM_AMT,
    NVL(COP_COMM_AMT,0) + NVL(COP_OVRIDE_COMM_AMT,0) - (NVL(COP_WHDTAX_AMT,0) - NVL(COP_OVRIDE_COMM_AMT,0)) Amount ,
    COP_BRN_CODE, AGN_NAME,COP_CODE,
    COP_PREPARED_BY, COP_AUTHORIZED_BY, COP_AUTHORIZE_DATE
    FROM GIN_COMMISSION_PYMTS,LMS_AGENCIES
    WHERE COP_PAID_VCHR_NO = v_cop_paid_vchr_no
    AND COP_AGN_CODE = AGN_CODE
    AND COP_AUTHORIZED_BY IS NOT NULL;
    v_org_code number ;
    v_crt_acc_no varchar2(20);
    v_sys_code number;
    v_bct_code number;
    v_bct_brh_code number;
    v_chq_dtls_rec FMS_CHEQUES_PKG.type_rqn_dtls_table;
    v_prod_code NUMBER;
    v_trnt_prod_applicable VARCHAR2(3);
    v_trnt_contra_gl_code varchar2(20);
    v_count Number := 0;
    v_cur_code Number;
    v_brh_code Number;
    v_raised_by number;
    v_auth_by number;
    v_trnt_code varchar2(10);
    BEGIN
    dbms_output.put_line('Geting Control acc ' );
    get_gl_code ('UC',v_prod_code,
    v_trnt_code,
    v_crt_acc_no,
    v_trnt_contra_gl_code
    );
    dbms_output.put_line('Control acc = ' || v_crt_acc_no);
    for i in c_comm loop
    v_org_code := FMS_INTERFACES_PKG.Get_Org(i.cop_brn_code );
    VALID_ACC(v_crt_acc_no,v_org_code,i.cop_brn_code);
    v_count := v_count + 1;
    FMS_CHEQUES_PKG.APPEND_CHQ_TRANS(
    v_count,
    i.COP_COMM_AMT,
    'Commission Payment', --v_narrative
    v_crt_acc_no,
    v_org_code ,
    i.cop_brn_code,
    'D',
    v_chq_dtls_rec
    );
    IF v_count != 0 then
    v_brh_code := i.cop_brn_code ;
    v_sys_code := fms_interfaces_pkg.systemcode('LMS');
    v_org_code := FMS_INTERFACES_PKG.Get_Org(v_brh_code );
    v_cur_code := LMS_INTERFACES_PKG.Lms_Def_Cur(v_brh_code );
    FMS_INTERFACES_PKG.TRANS_BCT('COMM', v_sys_code ,v_brh_code,v_bct_code ,v_bct_brh_code );
    v_auth_by := FMS_INTERFACES_PKG.GET_USERCODE(i.cop_authorized_by);
    v_raised_by := FMS_INTERFACES_PKG.GET_USERCODE(i.cop_prepared_by);
    dbms_output.put_line('done by '||i.cop_authorized_by);
    dbms_output.put_line(v_bct_brh_code ||',' || i.agn_name ||','|| i.amount||','||v_raised_by);
    FMS_CHEQUES_PKG.CREATE_REQN (
    v_sys_code,
    i.cop_paid_vchr_no , --ref
    i.COP_CODE, --ref2
    i.cop_date, --ref_date
    'Commission Payment', --v_narrative
    v_brh_code, --brh_code
    v_bct_brh_code,
    i.amount,
    i.agn_name,
    v_cur_code,
    v_bct_code,
    v_auth_by,
    i.cop_authorize_date,
    v_raised_by, --req_by
    'COMM',
    v_chq_dtls_rec
    );
    dbms_output.put_line('Cheque requisition posted');
    END IF;
    exit;
    END LOOP;
    -- IF v_count = 0 then
    -- RAISE_ERROR('No Transactions posted to finance ');
    -- END IF;
    EXCEPTION
    WHEN OTHERS THEN
    RAISE_ERROR('Processing commission ');
    END;
    */
    PROCEDURE process_gis_payments (v_user IN VARCHAR2, v_mtran_no IN NUMBER)
    IS
        --**************get payment transaction from gin_master_transactions
        CURSOR c_payment IS
            SELECT mtran_no,
                   mtran_date,
                   mtran_ref_no,
                   mtran_other_ref,
                   mtran_tran_type,
                   mtran_dc,
                   mtran_control_acc,
                   mtran_client_type,
                   mtran_client_code,
                   mtran_amount     amount,
                   mtran_pol_batch_no,
                   mtran_narrations,
                   mtran_prp_code,
                   mtran_ggt_tran_no,
                   mtran_posting_date,
                   mtran_brn_code,
                   mtran_brn_sht_desc,
                   mtran_payee,
                   mtran_alloc_inc_comm,
                   mtran_alloc_mtran_no,
                   mtran_cur_code,
                   mtran_payee_bbr_code,
                   mtran_pyment_mode,
                   mtran_payee_account,
                   mtran_payee_swift_code
              FROM gin_master_transactions
             WHERE     mtran_no = v_mtran_no
                   AND mtran_authorised = 'N'
                   AND mtran_btr_trans_code IN ('ADVLN', 'PM');

        --ADVLN ADVANCE LOANS FOR COMMISSIONS

        ---PAYMENT TRANSACTIONS FILTER
        v_org_code                 NUMBER;
        v_crt_acc_no               VARCHAR2 (20);
        v_sys_code                 NUMBER;
        v_bct_code                 NUMBER;
        v_bct_brh_code             NUMBER;
        v_chq_dtls_rec             fms_cheques_pkg.type_rqn_dtls_table;
        v_prod_code                NUMBER;
        v_trnt_prod_applicable     VARCHAR2 (3);
        v_trnt_contra_gl_code      VARCHAR2 (20);
        v_count                    NUMBER := 0;
        v_cont                     NUMBER := -1;
        v_cnt                      NUMBER := 0;
        v_gl_count                 NUMBER := 0;
        v_cur_code                 NUMBER;
        v_brh_code                 NUMBER;
        v_raised_by                NUMBER;
        v_auth_by                  NUMBER;
        v_req_by                   NUMBER;
        v_trnt_code                VARCHAR2 (10);
        v_gl_trans                 fms_vouchers_pkg.tgl_rec_type;
        v_gl_acc                   VARCHAR2 (20);
        v_gl_acc2                  VARCHAR2 (20);
        v_vgl_no                   NUMBER;
        v_contra_gl_code           VARCHAR2 (20);
        v_ppt_id                   NUMBER;
        v_narrative                VARCHAR2 (100);
        v_drcr                     VARCHAR2 (2);
        v_trans_code               NUMBER;
        v_agn_name                 VARCHAR (30);
        v_bank_code                NUMBER;
        v_bank_branch_code         NUMBER;
        v_ref                      NUMBER;
        v_ref2                     NUMBER;
        v_ref_date                 DATE;
        v_payee                    VARCHAR2 (150);
        --v_pay_method VARCHAR2 (5);
        v_payee_bank_acc_no        NUMBER;
        v_payee_bank_branch_code   NUMBER;
        v_tot_cnt                  NUMBER;
        v_user_code                NUMBER;
        v_cqr_bnk_dtls             fms_cheques_pkg.type_bnk_dtls_table;
        v_payee_eft_dtls           fms_cheques_pkg.type_payee_eft_table;
        v_bnk_bbr_code             VARCHAR2 (30);
        v_bnk_account              VARCHAR2 (30);
        v_eft_enabled              VARCHAR2 (1);
        v_act_code                 NUMBER;
        v_bnk_code                 NUMBER;
        v_sl_rqn_dtls              fms_cheques_pkg.type_sl_rqn_dtls_table;
    BEGIN
        BEGIN
            SELECT COUNT (1)
              INTO v_tot_cnt
              FROM gin_master_transactions
             WHERE     mtran_no = v_mtran_no
                   AND mtran_authorised = 'N'
                   AND mtran_btr_trans_code IN ('ADVLN', 'PM');
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Unable to count payment records...');
        END;

        IF NVL (v_tot_cnt, 0) = 0
        THEN
            raise_error (
                   'No payments to authorise..'
                || v_mtran_no
                || '='
                || v_tot_cnt);
        END IF;
--        RAISE_ERROR('GIS_ACCOUNTS_UTILITIES::LN 7067::v_mtran_no = '||v_mtran_no);
        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = v_user;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching user code for current system user');
        END;

        FOR r IN c_payment
        LOOP
            --RAISE_ERROR('BRANCH ='||r.mtran_brn_code||'v_mtran_no='||v_mtran_no);
            --BEGIN
            -- v_org_code := fms_interfaces_pkg.get_org (r.mtran_brn_code);
            -- EXCEPTION WHEN OTHERS THEN

            --END;

            IF r.mtran_client_type != 'D'
            THEN
                BEGIN
                    SELECT act_code
                      INTO v_act_code
                      FROM tqc_account_types
                     WHERE act_type_sht_desc = r.mtran_client_type;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR FETCHING ACC DETAILS1..' || v_mtran_no);
                END;
            ELSE
                v_act_code := 2;
            END IF;

            IF r.amount <= 0
            THEN
                NULL;
            ---no processing for 0 amount payment
            ELSIF r.amount > 0
            THEN
                DBMS_OUTPUT.put_line ('r.amount==' || r.amount);
                v_crt_acc_no :=
                    get_account_no (r.mtran_no, r.mtran_client_type);

                /*fms_interfaces_pkg.sl_control_acc ('GIS', r.mtran_client_type);*/
                --COMMENTED FOR APA FOR RI RCTG POST PAYMENTS TO PICK ACCOUNT FROM RI AGENT ACCOUNT IN CRM

                IF v_crt_acc_no IS NULL
                THEN
                    RAISE_ERROR (
                           'The Account for this participant ='
                        || r.mtran_client_code
                        || ' cannot be NULL');
                END IF;

                gin_interfaces_pkg.valid_acc (
                    v_crt_acc_no,
                    -- v_org_code, --amended by waiyaki on 24.10.17
                    NVL (v_org_code,
                         fms_interfaces_pkg.get_org (r.mtran_brn_code)),
                    r.mtran_brn_code);
                DBMS_OUTPUT.put_line ('r.amount==' || r.mtran_ref_no);
                v_narrative := 'GIS PAYMENT FOR ' || r.mtran_ref_no;
                v_drcr := r.mtran_dc;
                v_count := 0;
                v_count := v_count + 1;

                BEGIN
                    IF r.mtran_pyment_mode IN ('EFT', 'RTGS')
                    THEN
                        -- tqc_agencies
                        v_eft_enabled := 'N';

                        SELECT NVL (
                                   r.mtran_payee_bbr_code,
                                   gin_interfaces_pkg.bnk_bbr_code (
                                       r.mtran_client_code,
                                       v_act_code))
                          INTO v_bnk_code
                          FROM DUAL;

                        -- RAISE_ERROR('r.mtran_client_code=='||r.mtran_client_code||'v_act_code'||v_act_code||'r.mtran_payee_bbr_code'||r.mtran_payee_bbr_code);

                        IF v_bnk_code IS NOT NULL
                        THEN
                            v_eft_enabled :=
                                gin_interfaces_pkg.account_enabled (
                                    v_bnk_code);
                            v_bnk_account :=
                                NVL (
                                    r.mtran_payee_account,
                                    gin_interfaces_pkg.bnk_account (
                                        r.mtran_client_code,
                                        v_act_code));
                            v_bnk_bbr_code :=
                                tqc_interfaces_pkg.bank_ref (v_bnk_code);
                        END IF;

                        IF v_eft_enabled = 'N'
                        THEN
                            raise_application_error (
                                -20001,
                                   'BANK BRANCH NOT ENABLED TO TRANSACT EFT PAYMENTS '
                                || v_bnk_code);
                        END IF;

                        v_bnk_account :=
                            NVL (r.mtran_payee_account, v_bnk_account);
                        v_bnk_code :=
                            NVL (r.mtran_payee_bbr_code, v_bnk_code);
                        fms_cheques_pkg.append_eft_payees (
                            v_count,                            --v_no NUMBER,
                            v_mtran_no,
                            --v_ref1 VARCHAR2,
                            NVL (r.amount, 0),
                            r.mtran_payee,
                            --v_narrative VARCHAR2,
                            v_bnk_bbr_code,
                            --NVL(r.mtran_payee_bbr_code,v_bnk_bbr_code),
                            NVL (r.mtran_payee_account, v_bnk_account),
                            v_mtran_no,
                            v_payee_eft_dtls);
                        fms_cheques_pkg.append_chq_trans (v_count,
                                                          r.amount,
                                                          v_narrative, --narrative,
                                                          v_crt_acc_no,
                                                          -- crt_acc_number
                                                          v_org_code,
                                                          --crt_acc_org_code ,
                                                          r.mtran_brn_code,
                                                          --i.cmb_brn_code, --v_brh_code,
                                                          v_drcr,   --v_dr_cr,
                                                          v_chq_dtls_rec);
                    ELSE
                        fms_cheques_pkg.append_chq_trans (v_count,
                                                          r.amount,
                                                          v_narrative,
                                                          v_crt_acc_no,
                                                          v_org_code,
                                                          r.mtran_brn_code,
                                                          v_drcr,
                                                          v_chq_dtls_rec);
                    END IF;
                -- EXCEPTION
                -- WHEN OTHERS
                -- THEN
                -- raise_error ('Error appending chq trans...');
                END;

                IF v_count != 0
                THEN
                    v_sys_code := fms_interfaces_pkg.systemcode ('GIS');
                    v_cur_code := r.mtran_cur_code;
                    --gin_interfaces_pkg.gis_def_cur (r.mtran_brn_code);

                    fms_interfaces_pkg.trans_bct ('PYMT',
                                                  v_sys_code,
                                                  r.mtran_brn_code,
                                                  v_cur_code,
                                                  v_bank_code,
                                                  v_bank_branch_code,
                                                  r.mtran_pyment_mode);

                    v_auth_by := fms_interfaces_pkg.get_usercode (v_user);
                    v_req_by := fms_interfaces_pkg.get_usercode (v_user);
                    --v_agn_name := r.agn_name;
                    v_brh_code := r.mtran_brn_code;
                    DBMS_OUTPUT.put_line ('R.MTRAN_PAYEE==' || r.mtran_payee);

                    -- RAISE_ERROR('mtran_pyment_mode='||r.mtran_pyment_mode);
                    IF r.mtran_pyment_mode IN ('EFT', 'RTGS')
                    THEN
                        -- fms_cheques_pkg.create_reqn
                        -- (v_sys_code,
                        -- 'PYMT/' || v_mtran_no, --ref
                        -- NULL, -- ref2,
                        -- TRUNC (SYSDATE),
                        -- v_narrative,
                        -- r.mtran_brn_code, --i.cmb_brn_code,
                        -- v_bank_branch_code,
                        -- r.amount,
                        -- r.mtran_payee,
                        -- r.mtran_pyment_mode,
                        -- NULL,
                        -- NULL, --12
                        -- v_cur_code,
                        -- v_bank_code,
                        -- v_auth_by,
                        -- TRUNC (SYSDATE),
                        -- v_req_by, --v_cqr_req_by ,
                        -- 'PYMT', -- pmt_type ,
                        -- v_chq_dtls_rec,
                        -- v_payee_eft_dtls,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- v_bnk_code, --v_bnk_bbr_code,
                        -- v_bnk_account,
                        -- NULL,
                        -- 'N',
                        --
                        -- ---------------------------------------------------------------
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- 'N',
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- v_sl_rqn_dtls
                        -- );
                        --

                        FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                            v_sys_code,                       -- v_cqr_source,
                            'PYMT/' || v_mtran_no,               -- v_cqr_ref,
                            NULL,                               -- v_cqr_ref2,
                            TRUNC (SYSDATE),                -- v_cqr_ref_date,
                            v_narrative,                   -- v_cqr_narrative,
                            r.mtran_brn_code,               -- v_cqr_brh_code,
                            v_bank_branch_code,         -- v_cqr_bct_brh_code,
                            r.amount,                         -- v_cqr_amount,
                            r.mtran_payee,                     -- v_cqr_payee,
                            r.mtran_pyment_mode,          -- v_cqr_pay_method,
                            v_cur_code,                     -- v_cqr_cur_code,
                            NULL,                           ---i.cpv_cur_rate,
                            v_bank_code,                                   ---
                            v_auth_by,
                            TRUNC (SYSDATE),
                            v_req_by,                         -- v_cqr_req_by,
                            'PYMT',                         -- v_cqr_pmt_type,
                            v_bnk_code,            --v_payee_bank_branch_code,
                            v_bnk_account,              --v_payee_bank_acc_no,
                            v_chq_dtls_rec,                   -- v_dtls_table,
                            v_payee_eft_dtls,                --v_payee_eft_rec
                            NULL,                     --v_cqr_physical_address
                            NULL,                      ---v_cqr_postal_address
                            v_mtran_no,                    --v_itfc_trans_code
                            NULL,                                --v_itfc_ref3
                            NULL,                         --v_payee_source_pk,
                            NULL,                       --v_payee_source_type,
                            'N',                                --v_auto_auth,
                            NULL,                               --v_num_val_1,
                            NULL,                             ---v_invoice_no,
                            NULL,                           ---v_invoice_date,
                            NULL,                       ---v_auto_consolidate,
                            NULL,                               ---v_batch_no,
                            NULL                           ---v_payee_spr_code
                                );
                    ELSE
                        BEGIN
                            FMS_INTERFACES_PKG.create_Chq_reqn (
                                v_sys_code,
                                'PYMT/' || v_mtran_no,                   --ref
                                NULL,                                 -- ref2,
                                TRUNC (SYSDATE),                          ----
                                v_narrative,                              ----
                                --'GIS Claim', --narrative V
                                r.mtran_brn_code,                        -----
                                v_bank_branch_code,                       ----
                                r.amount,                                 ----
                                --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd), --cqr_amount
                                r.mtran_payee,                            ----
                                r.mtran_pyment_mode,                      ----
                                v_cur_code,
                                NULL,                       ---i.cpv_cur_rate,
                                v_bank_code,                               ---
                                v_auth_by,                                ----
                                TRUNC (SYSDATE),                         -----
                                v_req_by, --v_user_code, ---- --v_cqr_req_by ,
                                'PYMT',      --'GIS-CLAIM', ---- -- pmt_type ,
                                v_chq_dtls_rec,                           ----
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL);
                        -- fms_cheques_pkg.create_reqn
                        -- (v_sys_code, -- v_cqr_source,
                        -- 'PYMT/' || v_mtran_no, -- v_cqr_ref, ref1
                        -- NULL, -- v_cqr_ref2, OR ANY OTHER REF
                        -- TRUNC (SYSDATE), -- v_cqr_ref_date,
                        -- v_narrative, -- v_cqr_narrative,
                        -- r.mtran_brn_code, -- v_cqr_brh_code,
                        -- v_bank_branch_code, -- v_cqr_bct_brh_code,
                        -- r.amount, -- v_cqr_amount,
                        -- r.mtran_payee, -- v_cqr_payee,
                        -- 'CHQ', -- v_cqr_pay_method,
                        -- v_bank_code, -- v_cqr_pay_bnk_acc_no,
                        -- v_bank_branch_code, -- v_cqr_pay_bnk_branch_code,
                        -- v_cur_code, -- v_cqr_cur_code,
                        -- v_bank_code, -- v_cqr_bct_code,
                        -- v_auth_by, -- v_cqr_source_auth_by,
                        -- TRUNC (SYSDATE), -- v_cqr_source_auth_dt,
                        -- v_req_by, -- v_cqr_req_by,
                        -- 'PYMT', -- v_cqr_pmt_type,
                        -- v_chq_dtls_rec,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- v_cqr_bnk_dtls,
                        -- 'N',
                        --
                        -- ---------------------------------------------------------------
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- 'N',
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- NULL,
                        -- v_sl_rqn_dtls
                        -- );
                        --


                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error ('PAYMENT CREATE_CHQ_REQN...');
                        END;
                    END IF;

                    DBMS_OUTPUT.put_line ('cheque created========');
                END IF;
            END IF;
        END LOOP;
    /* IF v_count != 0 THEN

    BEGIN
    --raise_error(v_date);
    v_vgl_no := Fms_Interfaces_Pkg.update_vgl('GIS PAYMENT', --v_btc_description
    'JV', --v_btc_type
    v_brh_code, --v_brh_code
    TRUNC(SYSDATE), --v_dt
    v_narrative, --v_description
    v_MTRAN_no, --v_ref
    v_req_by, --v_raised_by
    v_cur_code, --v_cur_code
    v_gl_trans, --v_trans
    v_MTRAN_no); --v_trans code
    --v_ref3); --v_ref3
    Fms_Interfaces_Pkg.post_je(v_vgl_no,v_req_by);
    EXCEPTION
    WHEN OTHERS THEN
    RAISE_ERROR('Update_Vgl..');
    END;

    END IF;*/



    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error posting GIS payment...' || SQLERRM);
    END process_gis_payments;

    PROCEDURE auth_comm_pymnts_bak (v_date_from     IN DATE,
                                    v_date_to       IN DATE,
                                    v_post_option   IN VARCHAR2,
                                    v_in_pyment     IN VARCHAR2 DEFAULT 'Y')
    IS
        v_user           VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        v_user_code      NUMBER;
        v_sys_code       NUMBER;
        v_tran_status    VARCHAR2 (2);
        vfrmname         VARCHAR2 (15);
        v_facil_name     VARCHAR2 (50);
        v_facil_code     NUMBER;
        msg              VARCHAR2 (100);
        al_id            NUMBER;
        v_vchr_no        VARCHAR2 (20);
        v_org_code       NUMBER;
        v_cnt            NUMBER := 0;
        v_tot_cnt        NUMBER := 0;
        v_update         VARCHAR2 (5);
        v_agn_con_code   VARCHAR2 (10);
        v_iptpecode      VARCHAR2 (15);
        v_option         VARCHAR2 (15);
        v_date           DATE := TRUNC (SYSDATE);
        v_mtran_no       NUMBER;
        v_cr_mtran_no    NUMBER;
        v_cr_ref_no      VARCHAR2 (35);
        v_cr_bal         NUMBER;
        v_cr_com         NUMBER;
        v_pol_no         VARCHAR2 (35);
        v_copdt_code     NUMBER;
        v_tran_no        NUMBER := 0;

        CURSOR cur_comm IS
              SELECT                                              ---cop_code,
                     cop_agn_code,
                     cop_brn_code,
                     NVL (agn_payee, agn_name)                 agn_name,
                     agn_payee,
                     agn_act_code,
                     agn_comm_allowed,
                     agn_con_code,
                     agn_sht_desc,
                     act_type_id,
                     cop_cur_code,
                     act_account_type,
                     SUM (NVL (cop_comm_amt, 0))               comm_amt,
                     SUM (NVL (cop_whdtax_amt, 0))             whtax,
                     SUM (NVL (cop_ovride_comm_amt, 0))        ovrde_comm,
                     SUM (NVL (cop_ovride_whdtax_amt, 0))      ovrde_whtax,
                       --SUM(NVL(COP_NET_COMM,0)) net_comm
                       SUM (NVL (cop_comm_amt, 0))
                     + SUM (
                             DECODE (SIGN (NVL (cop_comm_amt, 0)), -1, 1, -1)
                           * ABS (NVL (cop_whdtax_amt, 0)))    net_comm,
                     MAX (cop_dr_mtran_no)                     cop_dr_mtran_no,
                     COUNT (1)                                 cnt
                FROM gin_commission_pymts, tqc_agencies, tqc_account_types
               WHERE     cop_agn_code = agn_code
                     AND agn_act_code = act_code
                     AND NVL (cop_authorized, 'N') != 'Y'
                     AND NVL (cop_paid, 'N') != 'Y'
                     AND NVL (cop_checked, 'N') = 'Y'
                     AND cop_date BETWEEN NVL (v_date_from, cop_date)
                                      AND NVL (v_date_to, cop_date)
              --AND COP_DATE <= v_date_from
              HAVING                           --SUM(NVL(COP_NET_COMM,0)) != 0
                           SUM (NVL (cop_comm_amt, 0))
                         + SUM (NVL (cop_whdtax_amt, 0)) !=
                         0
                     --AND NVL(GIS_ACCOUNTS_UTILITIES.Trans_balance(COP_DR_MTRAN_NO),0) =0
                     AND SIGN (
                               SUM (NVL (cop_comm_amt, 0))
                             + SUM (NVL (cop_whdtax_amt, 0))) =
                         1
            GROUP BY                                               --cop_code,
                     cop_agn_code,
                     cop_brn_code,
                     agn_name,
                     agn_act_code,
                     agn_comm_allowed,
                     act_account_type,
                     agn_con_code,
                     agn_sht_desc,
                     act_type_id,
                     cop_cur_code                                          --,
                                 -- cop_dr_mtran_no
                                 ;

        CURSOR cur_comm_dtls (v_agn_code IN NUMBER, v_brn_code IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no
              FROM gin_commission_pymts, tqc_agencies
             WHERE     cop_agn_code = agn_code
                   AND NVL (cop_authorized, 'N') != 'Y'
                   AND NVL (cop_paid, 'N') != 'Y'
                   AND NVL (cop_checked, 'N') = 'Y'
                   AND cop_agn_code = v_agn_code
                   AND cop_brn_code = v_brn_code
                   AND cop_date BETWEEN NVL (v_date_from, cop_date)
                                    AND NVL (v_date_to, cop_date);
    BEGIN
        BEGIN
            SELECT COUNT (1)
              INTO v_tot_cnt
              FROM gin_commission_pymts
             WHERE     NVL (cop_authorized, 'N') != 'Y'
                   AND NVL (cop_paid, 'N') != 'Y'
                   AND NVL (cop_checked, 'N') = 'Y'
                   --AND NVL(GIS_ACCOUNTS_UTILITIES.Trans_balance(COP_DR_MTRAN_NO),0) =0
                   --AND COP_DATE <= v_date_from;
                   AND cop_date BETWEEN NVL (v_date_from, cop_date)
                                    AND NVL (v_date_to, cop_date);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('UNABLE TO COUNT RECORDS...');
        END;

        IF NVL (v_tot_cnt, 0) = 0
        THEN
            raise_error ('NO COMMISSION PAYMENTS TO AUTHORISE..');
        END IF;

        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = v_user;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                       'ERROR FETCHING CURRENT SYSTEM USER <'
                    || v_user
                    || '>.......');
        END;

        DELETE gin_comm_pymt_dtls
         WHERE     copdt_trans_no != v_tran_no
               AND NVL (copdt_authorized, 'N') != 'Y'
               AND NVL (copdt_paid, 'N') != 'Y';

        DELETE gin_gis_transactions
         WHERE     ggt_trans_no != v_tran_no
               AND ggt_btr_trans_code = 'COM'
               AND ggt_trans_authorised != 'Y';

        BEGIN
            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                   || ggt_trans_no_seq.NEXTVAL
              INTO v_tran_no
              FROM DUAL;

            INSERT INTO gin_gis_transactions (ggt_trans_no,
                                              ggt_btr_trans_code,
                                              ggt_done_by,
                                              ggt_done_date,
                                              ggt_uw_clm_tran,
                                              ggt_trans_date,
                                              ggt_old_tran_no,
                                              ggt_effective_date,
                                              ggt_status)
                 VALUES (v_tran_no,
                         'COM',
                         v_user,
                         TRUNC (SYSDATE),
                         'A',
                         TRUNC (SYSDATE),
                         NULL,
                         TRUNC (SYSDATE),
                         NULL);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error Creating transaction for auth ...');
        END;

        BEGIN
            FOR cur_comm_rec IN cur_comm
            LOOP
                BEGIN
                    --RAISE_ERROR('stop wait for instructions..v_override_comm='||v_override_comm);
                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                           || gin_copdt_code_seq.NEXTVAL
                      INTO v_copdt_code
                      FROM DUAL;

                    INSERT INTO gin_comm_pymt_dtls (copdt_code,
                                                    copdt_agn_code,
                                                    copdt_date,
                                                    copdt_comm_amt,
                                                    copdt_paid,
                                                    copdt_trans_no,
                                                    copdt_brn_code,
                                                    copdt_prepared_by,
                                                    copdt_bru_code,
                                                    copdt_whdtax_amt,
                                                    copdt_drcr,
                                                    copdt_net_comm,
                                                    copdt_ovride_comm_amt,
                                                    copdt_ovride_whdtax_amt,
                                                    copdt_cur_code,
                                                    copdt_act_type,
                                                    copdt_payee,
                                                    copdt_agn_con_code,
                                                    copdt_authorized,
                                                    copdt_ovride_net_amt)
                             VALUES (
                                 v_copdt_code,
                                 cur_comm_rec.cop_agn_code,
                                 TRUNC (SYSDATE),
                                 (cur_comm_rec.comm_amt),
                                 'N',
                                 v_tran_no,
                                 cur_comm_rec.cop_brn_code,
                                 v_user,
                                 NULL,
                                 (cur_comm_rec.whtax),
                                 DECODE (SIGN (cur_comm_rec.comm_amt),
                                         1, 'C',
                                         'D'),
                                 (cur_comm_rec.net_comm),
                                 NULL,
                                 NULL,
                                 cur_comm_rec.cop_cur_code,
                                 cur_comm_rec.act_type_id,
                                 cur_comm_rec.agn_name,
                                 cur_comm_rec.agn_con_code,
                                 'N',
                                 NULL);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error creating commission voucher details....');
                END;

                -- IF v_post_option = 'CHQ' THEN
                ---RAISE_APPLICATION_ERROR(-21000,'ERROR: HERE...');
                -- Gin_Interfaces_Pkg.prc_com_pymt(cur_comm_rec.COP_CODE , cur_comm_rec.COP_DR_MTRAN_NO, v_user, 'CHQ');
                --Gin_Interfaces_Pkg.prc_com_pymt(cur_comm_rec.COP_DR_MTRAN_NO, v_user, 'CHQ');
                IF v_in_pyment = 'Y'
                THEN
                    IF v_post_option IN ('CHQ',
                                         'EFT',
                                         'RTGS',
                                         'MOB')
                    THEN
                        --,'JE','CR' find out how these two are supposed to be implemented for commissions
                        /* COMMENTED DUE TO CONSOLIDATION AND CHECK REVERSAL IN FMS 26062012
                        gin_interfaces_pkg.prc_com_pymt (v_copdt_code ,---cur_comm_rec.cop_code,
                        cur_comm_rec.cop_dr_mtran_no,
                        v_user,
                        v_post_option
                        );
                        */
                        gin_interfaces_pkg.prc_com_pymt (v_copdt_code,
                                                         v_user,
                                                         v_post_option);
                    ELSE
                        IF gin_interfaces_pkg.interface_enabled ('HRMS') =
                           'Y'
                        THEN
                            v_agn_con_code := cur_comm_rec.agn_con_code;
                            v_update := 'N';

                            IF v_agn_con_code IS NULL
                            THEN
                                raise_error (
                                       'PAYROLL MAPPING FOR '
                                    || cur_comm_rec.act_account_type
                                    || ' '
                                    || cur_comm_rec.agn_name
                                    || ':'
                                    || cur_comm_rec.agn_sht_desc
                                    || ':'
                                    || cur_comm_rec.act_type_id
                                    || ' NOT BE DONE..');
                            END IF;

                            IF v_agn_con_code IS NOT NULL
                            THEN
                                BEGIN
                                    IF    NVL (cur_comm_rec.net_comm, 0) = 0
                                       OR NVL (cur_comm_rec.net_comm, 0) < 0
                                    THEN
                                        raise_error (
                                               'INVALID COMM AMOUNT OF '
                                            || NVL (cur_comm_rec.net_comm, 0));
                                    END IF;

                                    SELECT DECODE (
                                               SIGN (
                                                   NVL (
                                                       cur_comm_rec.comm_amt,
                                                       0)),
                                               -1, 'GIMS-COMMC',
                                               'GIMS-COMM')
                                      INTO v_iptpecode
                                      FROM DUAL;

                                    raise_application_error (
                                        -21000,
                                        'ERROR: I HAVE REMOVED THE HRMS INTERFACE');

                                    /*
                                    HRMS.INTERFACE_PKG.INTERFACE_PERIODIC_TRANS('MICK',--vIptEsCode varchar2,
                                    'GIMS',--vIptSystem varchar2,
                                    v_agn_con_code,--vIptPerNo varchar2,
                                    v_IptPeCode,--vIptPeCode varchar2,
                                    ABS(cur_comm_rec.COMM_AMT),--nIptAmount number,
                                    v_date);--dIptDate in out date);
                                    */
                                    SELECT DECODE (
                                               SIGN (
                                                   NVL (cur_comm_rec.whtax,
                                                        0)),
                                               -1, 'GIMS-WHT',
                                               'GIMS-WHTC')
                                      INTO v_iptpecode
                                      FROM DUAL;

                                    raise_application_error (
                                        -21000,
                                        'ERROR: I HAVE REMOVED THE HRMS INTERFACE');
                                /*
                                HRMS.INTERFACE_PKG.INTERFACE_PERIODIC_TRANS('MICK',--vIptEsCode varchar2,
                                'GIMS',--vIptSystem varchar2,
                                v_agn_con_code,--vIptPerNo varchar2,
                                v_IptPeCode,--vIptPeCode varchar2,
                                ABS(cur_comm_rec.WHTAX),--nIptAmount number,
                                v_date);--dIptDate in out date);
                                */
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error ('POST TO HR.');
                                END;
                            END IF;
                        END IF;
                    END IF;
                END IF;

                v_update := 'Y';
                v_cnt := NVL (v_cnt, 0) + 1;

                --raise_error('V_UPDATE = '||v_update);
                --******************************************************************************
                /* COMMENTED BY MSHOTE ON 25062012 TO BLOCK OF POSTING OF
                 TRANSACTION TO GIN_MASTER_TRANSACTIONS TABLE .
                 POSTING TO THIS TABLE TO BE ALLOWED ONLY WHEN THE CHEQUE IS COMMPLETED / SUCCESSFUL IN
                 FMS
                 BUT IF PROCESSED OUTSIDE THE SYSTEM IT SHOULD POST TO GIN_MASTER_TRANSACTIONS

                 */


                IF NVL (v_update, 'N') = 'Y' AND v_in_pyment = 'N'
                THEN
                    IF cur_comm_rec.cnt = 1
                    THEN
                        BEGIN
                            SELECT mtran_client_polcy_no
                              INTO v_pol_no
                              FROM gin_master_transactions
                             WHERE mtran_no = cur_comm_rec.cop_dr_mtran_no;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                NULL;
                        END;
                    ELSE
                        v_pol_no := 'VARIOUS';
                    END IF;

                    BEGIN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || gin_mtran_no_seq.NEXTVAL)
                          INTO v_mtran_no
                          FROM DUAL;

                        INSERT INTO gin_master_transactions (
                                        mtran_no,
                                        mtran_doc_date,
                                        mtran_date,
                                        mtran_ref_no,
                                        mtran_other_ref,
                                        mtran_tran_type,
                                        mtran_dc,
                                        mtran_control_acc,
                                        mtran_client_type,
                                        mtran_client_code,
                                        mtran_amount,
                                        mtran_balance,
                                        mtran_authorised,
                                        mtran_net_amt,
                                        mtran_posting_date,
                                        mtran_ggt_tran_no,
                                        mtran_prp_code,
                                        mtran_btr_trans_code,
                                        mtran_origin,
                                        mtran_cur_code,
                                        mtran_cur_symbol,
                                        mtran_brn_code,
                                        mtran_brn_sht_desc,
                                        mtran_posted_by,
                                        mtran_whtx,
                                        mtran_client_polcy_no)
                                 VALUES (
                                     v_mtran_no,
                                     TRUNC (SYSDATE),
                                     TRUNC (SYSDATE),
                                     'COMMISSION',
                                     v_copdt_code,
                                     --cur_comm_rec.cop_code,
                                     'COM',
                                     'D',
                                     cur_comm_rec.agn_sht_desc,
                                     cur_comm_rec.act_type_id,
                                     cur_comm_rec.cop_agn_code, --acc sht desc
                                     ABS (cur_comm_rec.comm_amt),
                                     cur_comm_rec.net_comm,
                                     'Y',
                                     cur_comm_rec.net_comm,
                                     ---ABS(cur_comm_rec.COMM_AMT),
                                     TRUNC (SYSDATE),
                                     NULL,
                                     NULL,
                                     'COM',
                                     'U',
                                     cur_comm_rec.cop_cur_code,
                                     tqc_interfaces_pkg.currencysymbol (
                                         cur_comm_rec.cop_cur_code),
                                     cur_comm_rec.cop_brn_code,
                                     fms_interfaces_pkg.brh_name (
                                         cur_comm_rec.cop_brn_code,
                                         'S'),
                                     v_user,
                                     cur_comm_rec.whtax,
                                     v_pol_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR UPDATING SUBSIDIARY LEDGER RECORD...');
                    END;
                END IF;

                --raise_error('copdt_code='||v_copdt_code||'V_UPDATE = '||v_update||';'||cur_comm_rec.COP_AGN_CODE||';'||cur_comm_rec.COP_brn_CODE);
                IF NVL (v_update, 'N') = 'Y'
                THEN
                    FOR cur_com_dtls_rec
                        IN cur_comm_dtls (cur_comm_rec.cop_agn_code,
                                          cur_comm_rec.cop_brn_code)
                    LOOP
                        IF v_in_pyment = 'Y'
                        THEN
                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'Y',
                                       cop_authorize_date = TRUNC (SYSDATE),
                                       cop_copdt_code = v_copdt_code
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                            END;
                        ELSIF v_in_pyment = 'N'
                        THEN
                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'Y',
                                       cop_authorize_date = TRUNC (SYSDATE),
                                       cop_paid = 'Y',
                                       cop_paid_chq_no = 'OOS',
                                       cop_paid_chq_date = TRUNC (SYSDATE),
                                       cop_copdt_code = v_copdt_code
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                           'ERROR POST UPDATING PAYMENT VOUCHER...'
                                        || cur_com_dtls_rec.cop_code);
                            END;
                        END IF;
                    -- raise_error('V_UPDATE = '||v_update||';'||cur_com_dtls_rec.COP_CR_MTRAN_NO);
                    /* PREVENT AUTO ALLOCATION OF CREDIT ON COMMISSION TILL CHEQUE AUTH TIME
                    25062012
                    BEGIN
                    SELECT mtran_no, mtran_ref_no, NVL (mtran_balance, 0)
                    INTO v_cr_mtran_no, v_cr_ref_no, v_cr_bal
                    FROM gin_master_transactions
                    WHERE mtran_no = cur_com_dtls_rec.cop_cr_mtran_no;

                    v_cr_com := 0;
                    knock_off_transactions (v_cr_mtran_no,
                    v_cr_ref_no,
                    v_mtran_no,
                    'N',
                    TRUNC (SYSDATE),
                    v_cr_bal,
                    v_cr_com
                    );
                    EXCEPTION
                    WHEN OTHERS
                    THEN
                    raise_error
                    ('ERROR RECONCILLING TRANSACTION ON ACCOUNT..');
                    END;
                    */


                    END LOOP;

                    IF v_in_pyment = 'Y'
                    THEN
                        BEGIN
                            UPDATE gin_comm_pymt_dtls
                               SET copdt_authorized = 'Y',
                                   copdt_authorized_by = v_user,
                                   copdt_authorize_date = TRUNC (SYSDATE)
                             WHERE copdt_code = v_copdt_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR UPDATING CONSOLIDATED COMM TRANS ...');
                        END;
                    ELSIF v_in_pyment = 'N'
                    THEN
                        UPDATE gin_comm_pymt_dtls
                           SET copdt_authorized = 'Y',
                               copdt_authorized_by = v_user,
                               copdt_authorize_date = TRUNC (SYSDATE),
                               copdt_paid = 'Y',
                               copdt_paid_chq_date = TRUNC (SYSDATE),
                               copdt_paid_chq_no = 'OOS'
                         WHERE copdt_code = v_copdt_code;
                    END IF;
                END IF;
            -- IF v_in_pyment = 'N' THEN
            -- BEGIN
            -- UPDATE GIN_COMMISSION_PYMTS SET COP_PAID='Y',
            -- COP_PAID_CHQ_NO= 'OOS',
            -- COP_PAID_CHQ_DATE =TRUNC(SYSDATE)
            -- WHERE COP_CODE = cur_comm_rec.cop_code;
            -- EXCEPTION
            -- WHEN OTHERS THEN
            -- RAISE_ERROR('ERROR POST UPDATING PAYMENT VOUCHER...'||cur_comm_rec.cop_code);
            -- END;
            -- END IF;
            --raise_error('V_UPDATE = '||v_update||';'||cur_comm_rec.COP_AGN_CODE||';'||cur_comm_rec.COP_brn_CODE);
            END LOOP;

            BEGIN
                UPDATE gin_gis_transactions
                   SET ggt_trans_authorised = 'Y',
                       ggt_trans_authorised_by = v_user,
                       ggt_trans_authorise_date = TRUNC (SYSDATE)
                 WHERE ggt_trans_no = v_tran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR AUTHORISING COMM TRANS ...');
            END;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('ERROR POSTING COMM. RECORDS...');
        END;
    END;

    --PROCEDURE create_comm_details (v_tran_no IN NUMBER,
    -- v_user IN VARCHAR2) IS
    -- CURSOR comm IS
    -- SELECT COP_SCL_CODE, COP_ACT_TYPE,AGN_NAME,COP_AGN_CODE,COP_CUR_CODE, COP_BRN_CODE, COP_BRU_CODE,
    -- SUM(NVL(COP_COMM_AMT,0)) COP_COMM_AMT,SUM(NVL(COP_WHDTAX_AMT,0)) COP_WHDTAX_AMT,
    -- SUM(NVL(COP_OVRIDE_COMM_AMT,0)) OVRDE_COMM, SUM(NVL(COP_OVRIDE_WHDTAX_AMT,0)) OVRDE_WHTAX,
    -- SUM(NVL(COP_COMM_AMT,0)) + SUM(NVL(COP_WHDTAX_AMT,0)) COP_NET_COMM
    -- FROM GIN_COMMISSION_PYMTS,TQC_AGENCIES
    -- WHERE AGN_CODE = COP_AGN_CODE
    -- AND COP_TRANS_NO = v_tran_no
    -- AND NVL(COP_AUTHORIZED,'N') = 'N'
    -- AND NVL(COP_PAID,'N') = 'N'
    -- AND NVL(COP_CHECKED,'N') = 'Y'
    -- GROUP BY COP_AGN_CODE,COP_BRN_CODE, COP_BRU_CODE,COP_SCL_CODE,COP_CUR_CODE, COP_ACT_TYPE,AGN_NAME;
    -- BEGIN
    -- DELETE GIN_COMM_PYMT_DTLS WHERE COPDT_TRANS_NO = v_tran_no;
    -- FOR rec IN comm LOOP
    -- BEGIN
    -- INSERT INTO GIN_COMM_PYMT_DTLS(COPDT_CODE, COPDT_AGN_CODE, COPDT_DATE,
    -- COPDT_COMM_AMT,COPDT_PAID,COPDT_TRANS_NO, COPDT_BRN_CODE,
    -- COPDT_PREPARED_BY,COPDT_BRU_CODE, COPDT_WHDTAX_AMT,COPDT_DRCR, COPDT_NET_COMM,
    -- COPDT_OVRIDE_COMM_AMT,COPDT_OVRIDE_WHDTAX_AMT,COPDT_CUR_CODE,
    -- COPDT_SCL_CODE, COPDT_ACT_TYPE,COPDT_PAYEE)
    -- VALUES(TO_NUMBER(TO_CHAR(SYSDATE,'RRRR'))||GIN_COPDT_CODE_SEQ.NEXTVAL,rec.COP_AGN_CODE,TRUNC(SYSDATE),
    -- rec.COP_COMM_AMT,'N',v_tran_no,rec.COP_BRN_CODE,
    -- v_user,rec.COP_BRU_CODE,rec.COP_WHDTAX_AMT,DECODE(SIGN( rec.COP_COMM_AMT),1,'C'),rec.COP_NET_COMM,
    -- rec.OVRDE_COMM,rec.OVRDE_WHTAX,rec.COP_CUR_CODE,rec.COP_SCL_CODE, rec.COP_ACT_TYPE,rec.AGN_NAME);
    -- EXCEPTION
    -- WHEN OTHERS THEN
    -- RAISE_ERROR('Error creating commission voucher details....');
    -- END;
    -- END LOOP;
    -- END;
    --
    FUNCTION getpaidprem_batchno (v_pol_batch_no   IN NUMBER,
                                  v_value_type     IN VARCHAR2)
        RETURN NUMBER
    IS
        v_value   NUMBER;
    BEGIN
        SELECT getpaidprem (pol_batch_no,
                            pol_agnt_agent_code,
                            pol_prp_code,
                            v_value_type)
          INTO v_value
          FROM gin_policies
         WHERE pol_batch_no = v_pol_batch_no;

        RETURN (v_value);
    END;

    FUNCTION getpaidprem (v_pol_batch_no   IN NUMBER,
                          v_agn_code       IN NUMBER,
                          v_clnt_code      IN NUMBER,
                          v_value_type     IN VARCHAR2)
        RETURN NUMBER
    IS
        v_settled       gin_master_transactions.mtran_amount%TYPE;
        v_balance       gin_master_transactions.mtran_amount%TYPE;
        v_outs          gin_master_transactions.mtran_amount%TYPE;
        v_act_code      NUMBER;
        v_client_type   VARCHAR2 (5);
        v_client_code   NUMBER;
        v_amount        NUMBER;
    BEGIN
        IF v_agn_code = 0
        THEN
            v_client_type := 'D';
            v_client_code := v_clnt_code;
        ELSE
            v_client_code := v_agn_code;

            SELECT agn_act_code
              INTO v_act_code
              FROM tqc_agencies
             WHERE agn_code = v_agn_code;

            IF v_act_code IN (2, 9, 10                             /*, 16,32*/
                                      )
            THEN
                v_client_type := 'A';
            ELSIF v_act_code = 32
            THEN
                v_client_type := 'DI';
            ELSIF v_act_code = 16
            THEN
                v_client_type := 'IA';
            ELSIF v_act_code = 3
            THEN
                v_client_type := 'B';
            ELSIF v_act_code = 4
            THEN
                v_client_type := 'FI';
            ELSIF v_act_code = 5
            THEN
                v_client_type := 'I';
            ELSIF v_act_code = 6
            THEN
                v_client_type := 'R';
            ELSIF v_act_code = 7
            THEN
                v_client_type := 'FO';
            END IF;
        END IF;

        BEGIN
            SELECT mtran_settlement,
                   mtran_balance,
                   mtran_amount,
                   outs
              INTO v_settled,
                   v_balance,
                   v_amount,
                   v_outs
              FROM (SELECT SUM (mtran_settlement)                                mtran_settlement,
                           SUM (mtran_balance)                                   mtran_balance,
                           SUM (mtran_amount)                                    mtran_amount,
                           SUM (
                               mtran_balance - mtran_whtx - mtran_commission)    outs
                      FROM gin_master_transactions
                     WHERE     mtran_client_code = v_client_code
                           AND mtran_client_type = v_client_type
                           AND mtran_pol_batch_no = v_pol_batch_no
                           AND mtran_tran_type NOT IN ('SF', 'RC', 'CN'));
        --AND mtran_tran_type != 'SF';
        EXCEPTION
            WHEN OTHERS
            THEN
                v_settled := NULL;
                v_balance := NULL;
                v_outs := NULL;
        END;

        IF v_value_type = 'B'
        THEN
            RETURN v_balance;
        ELSIF v_value_type = 'G'
        THEN
            RETURN v_outs;
        ELSIF v_value_type = 'S'
        THEN
            RETURN v_settled;
        ELSIF v_value_type = 'A'
        THEN
            RETURN v_amount;
        ELSE
            -- IF v_balance=0 THEN
            -- RETURN v_amount-v_settled;
            -- ELSE
            RETURN v_balance;
        -- END IF;
        END IF;
    END;

    FUNCTION getpaidprem (v_drcr_no VARCHAR2)
        RETURN NUMBER
    IS
        v_prem_paid   gin_master_transactions.mtran_amount%TYPE;
    BEGIN
        SELECT NVL (
                   SUM (
                       DECODE (tmap_drcr,
                               'D', -ABS (NVL (tmap_amount, 0)),
                               ABS (NVL (tmap_amount, 0)))),
                   0)
          INTO v_prem_paid
          FROM gin_tran_mapping
         WHERE tmap_check_mtran_ref_no = v_drcr_no;

        RETURN v_prem_paid;
    END;

    FUNCTION getpaidprem (v_drcr_no VARCHAR2, v_set_bal VARCHAR2)
        RETURN NUMBER
    IS
        v_prem_paid   gin_master_transactions.mtran_amount%TYPE;
    BEGIN
        -- SELECT NVL(SUM(DECODE(TMAP_DRCR,'D',-ABS(NVL(TMAP_AMOUNT,0)),ABS(NVL(TMAP_AMOUNT,0)))),0)

        -- INTO v_prem_paid
        -- FROM GIN_TRAN_MAPPING
        -- WHERE TMAP_CHECK_MTRAN_REF_NO=v_drcr_no;
        SELECT SUM (
                   DECODE (NVL (v_set_bal, 'B'),
                           'B', mtran_balance,
                           'S', mtran_settlement,
                           mtran_amount))
          INTO v_prem_paid
          FROM gin_master_transactions
         WHERE mtran_ref_no = v_drcr_no AND mtran_dc = 'D';

        RETURN v_prem_paid;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN 0;
        WHEN OTHERS
        THEN
            raise_error (SQLERRM (SQLCODE) || ' v_drcr_no=== ' || v_drcr_no);
    END;

    PROCEDURE populate_balances
    IS
        CURSOR prds IS
              SELECT DISTINCT
                     mtran_client_code,
                     TO_DATE (
                         ADD_MONTHS (
                               LAST_DAY (SYSDATE)
                             - TO_NUMBER (TO_CHAR (LAST_DAY (SYSDATE), 'DD')),
                             0),
                         'DD/MM/RRRR')    dt         --GIN_SUB_LEDGER_BALANCES
                FROM gin_master_transactions                   --,TQC_AGENCIES
               WHERE mtran_client_type != 'D'
            --and mtran_client_code = 890
            --AND MTRAN_CONTROL_ACC IN('20/469','20/381','20/363')
            ORDER BY mtran_client_code;
    -- SELECT DISTINCT MTRAN_CLIENT_CODE,TO_DATE(ADD_MONTHS(LAST_DAY('01-JUL-2010')-TO_NUMBER(TO_CHAR(LAST_DAY('01-JUL-2010'),'DD')), 0),'DD/MM/RRRR') DT
    -- FROM GIN_MASTER_TRANSACTIONS
    -- WHERE MTRAN_CLIENT_TYPE != 'D'
    -- ORDER BY MTRAN_CLIENT_CODE;
    BEGIN
        FOR p IN prds
        LOOP
            gis_accounts_utilities.update_account_balance (
                p.mtran_client_code,
                TO_DATE (p.dt, 'DD/MM/RRRR'));
        END LOOP;
    END;

    PROCEDURE update_account_balance (v_agn_code NUMBER, v_date DATE)
    IS
        v_prev_mnth   NUMBER;
        v_prev_yr     NUMBER;
        v_bal         NUMBER;
        v_amnt        NUMBER;
        v_cnt         NUMBER;
        v_mnth        NUMBER;
        v_yr          NUMBER;

        CURSOR bals                      --(v_mnth1 IN NUMBER,v_yr1 IN NUMBER)
                    IS
              SELECT mtran_client_code,
                     mtran_client_type,
                     mtran_cur_code,
                     SUM (
                         DECODE (mtran_dc,
                                 'D', NVL (mtran_net_amt, 0),
                                 -ABS (NVL (mtran_net_amt, 0))))    net,
                       SUM (
                           DECODE (mtran_dc,
                                   'D', NVL (mtran_balance, 0),
                                   -ABS (NVL (mtran_balance, 0))))
                     + NVL (
                           gis_accounts_utilities.bal_bf (v_agn_code,
                                                          TO_DATE (v_date)),
                           0)                                       amnt
                FROM gin_master_transactions, tqc_agencies, gin_policies
               WHERE     mtran_pol_batch_no = pol_batch_no(+)
                     AND mtran_client_code = agn_code
                     AND mtran_tran_type != 'BAL'
                     AND mtran_client_code = v_agn_code                 --1382
                     AND mtran_client_type NOT IN ('D')
                     AND mtran_authorised = 'Y'
                     --AND TO_CHAR(MTRAN_DATE,'MM') = v_mnth1
                     --AND TO_CHAR(MTRAN_DATE,'RRRR') = v_yr1
                     AND mtran_date <= TO_DATE (v_date)
            GROUP BY mtran_client_code, mtran_cur_code, mtran_client_type;
    --order by 4,3;
    -- CURSOR curr_date IS SELECT TO_CHAR(MTRAN_DATE,'MM')mMONTH, TO_CHAR(MTRAN_DATE,'RRRR') yYEAR
    -- FROM GIN_MASTER_TRANSACTIONS
    -- WHERE MTRAN_CLIENT_TYPE != 'D'
    -- and mtran_client_code =v_agn_code
    -- AND mtran_date <= to_date(v_date)
    -- GROUP BY TO_CHAR(MTRAN_DATE,'MM'), TO_CHAR(MTRAN_DATE,'RRRR')
    -- ORDER BY TO_CHAR(MTRAN_DATE,'RRRR'),TO_CHAR(MTRAN_DATE,'MM');
    BEGIN
        SELECT TO_NUMBER (TO_CHAR (v_date, 'MM')),
               TO_NUMBER (TO_CHAR (v_date, 'RRRR'))
          INTO v_mnth, v_yr
          FROM DUAL;

        --for d in curr_date loop

        -- v_mnth := to_number(d.mMONTH);
        -- v_yr := to_number(d.yYEAR);
        IF NVL (v_mnth, 0) NOT BETWEEN 1 AND 12
        THEN
            raise_error ('MONTH NOT VALID');
        END IF;

        IF v_mnth = 1
        THEN
            v_prev_mnth := 12;
            v_prev_yr := v_yr - 1;
        ELSE
            v_prev_mnth := v_mnth - 1;
            v_prev_yr := v_yr;
        END IF;

        --FOR B IN BALS(to_number(d.mMONTH),to_number(d.yYEAR)) LOOP
        FOR b IN bals
        LOOP
            BEGIN
                SELECT sglb_balance, sglb_amount
                  INTO v_bal, v_amnt
                  FROM gin_sub_ledger_balances
                 WHERE     sglb_client_code = b.mtran_client_code
                       AND sglb_client_type = b.mtran_client_type
                       AND sglb_cur_code = b.mtran_cur_code
                       AND sglb_month = v_prev_mnth
                       AND sglb_year = v_prev_yr;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_bal := 0;
                    v_amnt := 0;
                WHEN OTHERS
                THEN
                    raise_error ('');
            END;

            BEGIN
                SELECT COUNT (1)
                  INTO v_cnt
                  FROM gin_sub_ledger_balances
                 WHERE     sglb_client_code = b.mtran_client_code
                       AND sglb_client_type = b.mtran_client_type
                       AND sglb_cur_code = b.mtran_cur_code
                       AND sglb_month = v_mnth
                       AND sglb_year = v_yr;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('');
            END;

            IF NVL (v_cnt, 0) = 0
            THEN
                -- raise_error('rttt1='||B.AMNT||';'||v_bal);
                BEGIN
                    INSERT INTO gin_sub_ledger_balances (sglb_code,
                                                         sglb_client_code,
                                                         sglb_client_type,
                                                         sglb_month,
                                                         sglb_year,
                                                         sglb_cur_code,
                                                         sglb_amount,
                                                         sglb_balance,
                                                         sglb_date)
                         VALUES (gin_sglb_code_seq.NEXTVAL,
                                 b.mtran_client_code,
                                 b.mtran_client_type,
                                 v_mnth,
                                 v_yr,
                                 b.mtran_cur_code,
                                 b.net,
                                 NVL (b.amnt, 0),
                                 v_date);                  -- + NVL(v_bal,0));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('');
                END;
            ELSE
                -- raise_error('rttt2='||B.AMNT||';'||v_bal);
                BEGIN
                    UPDATE gin_sub_ledger_balances
                       SET sglb_amount = b.net,
                           sglb_balance = NVL (b.amnt, 0),   -- + NVL(v_bal,0)
                           sglb_date = v_date
                     WHERE     sglb_client_code = b.mtran_client_code
                           AND sglb_client_type = b.mtran_client_type
                           AND sglb_cur_code = b.mtran_cur_code
                           AND sglb_month = v_mnth
                           AND sglb_year = v_yr;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('');
                END;
            END IF;

            BEGIN
                INSERT INTO gin_sub_ledger_balances (sglb_code,
                                                     sglb_client_code,
                                                     sglb_client_type,
                                                     sglb_month,
                                                     sglb_year,
                                                     sglb_cur_code,
                                                     sglb_amount,
                                                     sglb_balance,
                                                     sglb_date)
                    SELECT gin_sglb_code_seq.NEXTVAL,
                           sglb_client_code,
                           sglb_client_type,
                           v_mnth,
                           v_yr,
                           sglb_cur_code,
                           0,
                           sglb_balance,
                           sglb_date
                      FROM gin_sub_ledger_balances
                     WHERE     sglb_month = v_prev_mnth
                           AND sglb_year = v_prev_yr
                           AND (sglb_client_code,
                                sglb_client_type,
                                sglb_cur_code) NOT IN
                                   (SELECT sglb_client_code,
                                           sglb_client_type,
                                           sglb_cur_code
                                      FROM gin_sub_ledger_balances
                                     WHERE     sglb_month = v_mnth
                                           AND sglb_year = v_yr);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('');
            END;
        END LOOP;
    -- END LOOP;
    END;

    FUNCTION bal_bf (v_agn_code IN NUMBER, v_date IN DATE)
        RETURN NUMBER
    IS
        v_balance   NUMBER;
    BEGIN
        SELECT SUM (
                   DECODE (mtran_dc,
                           'D', NVL (mtran_balance, 0),
                           -ABS (NVL (mtran_balance, 0))))
          INTO v_balance
          FROM gin_master_transactions, tqc_agencies, gin_policies
         WHERE     mtran_pol_batch_no = pol_batch_no(+)
               AND mtran_client_code = agn_code
               AND mtran_authorised = 'Y'
               AND mtran_tran_type = 'BAL'
               AND mtran_client_code = v_agn_code
               AND mtran_client_type NOT IN ('D')
               AND mtran_date <= TO_DATE (v_date);

        RETURN v_balance;
    END;

    PROCEDURE post_ibnr (v_uirans_code IN NUMBER, v_user VARCHAR2)
    IS
        v_vchr_desc      VARCHAR2 (100);
        v_trans_no       NUMBER;
        v_grs_movement   NUMBER;
        v_mand_mvmnt     NUMBER;
        v_quota_mvmnt    NUMBER;
        v_fstsup_mvmnt   NUMBER;
        v_secsup_mvmnt   NUMBER;
        v_facre_mvmnt    NUMBER;
        v_facob_mvmnt    NUMBER;
        v_pool_mvmnt     NUMBER;
        v_cur_rate       gin_master_transactions.mtran_cur_rate%TYPE;
        v_rnd            NUMBER;
        v_bcur_rnd       NUMBER;
        v_trans_type     VARCHAR2 (15);
        v_trans_lvl      VARCHAR2 (15);

        CURSOR cur_trans IS
            SELECT uirans_year, uirans_month, uirans_authorized
              FROM gin_ibnr_transactions
             WHERE uirans_code = v_uirans_code;

        CURSOR cur_summary IS
            SELECT curr.*,
                   prev.ibnr_grs_ibnr_tot         previbnr_grs_ibnr_tot,
                   prev.ibnr_man_ibnr_tot         previbnr_man_ibnr_tot,
                   prev.ibnr_quota_ibnr_tot       previbnr_quota_ibnr_tot,
                   prev.ibnr_fstsup_ibnr_tot      previbnr_fstsup_ibnr_tot,
                   prev.ibnr_secsup_ibnr_tot      previbnr_secsup_ibnr_tot,
                   prev.ibnr_facre_ibnr_tot       previbnr_facre_ibnr_tot,
                   prev.ibnr_own_ibnr_tot         previbnr_own_ibnr_tot,
                   prev.ibnr_pool_ibnr_tot        previbnr_pool_ibnr_tot,
                   prev.ibnr_facre_obibnr_tot     previbnr_facre_obibnr_tot,
                   cur_code,
                   cur_symbol,
                   cur_rnd
              FROM gin_ibnr_summary  curr,
                   gin_ibnr_summary  prev,
                   tqc_currencies
             WHERE     curr.ibnr_cur_code = cur_code
                   AND NVL (curr.ibnr_prev_ibnr_code, -220000) =
                       prev.ibnr_code(+)
                   AND curr.ibnr_uirans_code = v_uirans_code;

        CURSOR acc_cur (v_scl_code NUMBER)
        IS
            SELECT trac_acc_no, trac_contra_acc
              FROM gin_transaction_types, gin_class_transactions
             WHERE     trnt_code = 'IBNR'
                   AND trnt_code = trac_trnt_code
                   AND trnt_application_lvl = 'U'
                   AND trac_scl_code = v_scl_code;

        v_auth_date      DATE := TO_DATE (SYSDATE, 'DD/MM/RRRR');
    BEGIN
        FOR cur_trans_rec IN cur_trans
        LOOP
            IF NVL (cur_trans_rec.uirans_authorized, 'N') = 'Y'
            THEN
                raise_error ('IBNR already authorized..');
            END IF;

            v_vchr_desc :=
                   'IBNR / '
                || cur_trans_rec.uirans_year
                || '/'
                || cur_trans_rec.uirans_month;

            BEGIN
                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || ggt_trans_no_seq.NEXTVAL)
                  INTO v_trans_no
                  FROM DUAL;

                INSERT INTO gin_gis_transactions (ggt_doc_ref,
                                                  ggt_trans_no,
                                                  ggt_btr_trans_code,
                                                  ggt_done_by,
                                                  ggt_done_date,
                                                  ggt_uw_clm_tran,
                                                  ggt_trans_date,
                                                  ggt_effective_date)
                     VALUES (v_vchr_desc,
                             v_trans_no,
                             'IBNR',
                             v_user,
                             TRUNC (SYSDATE),
                             'A',
                             TRUNC (SYSDATE),
                             TRUNC (SYSDATE));
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error creating claim transaction..');
            END;

            FOR dr_rec IN cur_summary
            LOOP
                v_cur_rate := dr_rec.ibnr_cur_rate;
                v_rnd := dr_rec.cur_rnd;

                BEGIN
                    v_grs_movement :=
                          NVL (dr_rec.ibnr_grs_ibnr_tot, 0)
                        - NVL (dr_rec.previbnr_grs_ibnr_tot, 0);
                    v_mand_mvmnt :=
                          NVL (dr_rec.ibnr_man_ibnr_tot, 0)
                        - NVL (dr_rec.previbnr_man_ibnr_tot, 0);
                    v_quota_mvmnt :=
                          NVL (dr_rec.ibnr_quota_ibnr_tot, 0)
                        - NVL (dr_rec.previbnr_quota_ibnr_tot, 0);
                    v_fstsup_mvmnt :=
                          NVL (dr_rec.ibnr_fstsup_ibnr_tot, 0)
                        - NVL (dr_rec.previbnr_fstsup_ibnr_tot, 0);
                    v_secsup_mvmnt :=
                          NVL (dr_rec.ibnr_secsup_ibnr_tot, 0)
                        - NVL (dr_rec.previbnr_secsup_ibnr_tot, 0);
                    v_facre_mvmnt :=
                          NVL (dr_rec.ibnr_facre_ibnr_tot, 0)
                        - NVL (dr_rec.previbnr_facre_ibnr_tot, 0);
                    v_facob_mvmnt :=
                          NVL (dr_rec.ibnr_facre_obibnr_tot, 0)
                        - NVL (dr_rec.previbnr_facre_obibnr_tot, 0);
                    v_pool_mvmnt :=
                          NVL (dr_rec.ibnr_pool_ibnr_tot, 0)
                        - NVL (dr_rec.previbnr_pool_ibnr_tot, 0);

                    IF NVL (v_grs_movement, 0) != 0
                    THEN
                        v_trans_type := 'IBNR';
                        v_trans_lvl := 'U';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.ibnr_scl_code,
                                            dr_rec.ibnr_brn_code,
                                            NVL (v_grs_movement, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_auth_date);
                    END IF;

                    IF NVL (v_mand_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'IBNR';
                        v_trans_lvl := 'MAN';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.ibnr_scl_code,
                                            dr_rec.ibnr_brn_code,
                                            NVL (v_mand_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_auth_date);
                    END IF;

                    IF NVL (v_quota_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'IBNR';
                        v_trans_lvl := 'QST';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.ibnr_scl_code,
                                            dr_rec.ibnr_brn_code,
                                            NVL (v_quota_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_auth_date);
                    END IF;

                    IF NVL (v_fstsup_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'IBNR';
                        v_trans_lvl := 'FSTSUP';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.ibnr_scl_code,
                                            dr_rec.ibnr_brn_code,
                                            NVL (v_fstsup_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_auth_date);
                    END IF;

                    IF NVL (v_secsup_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'IBNR';
                        v_trans_lvl := 'SECSUP';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.ibnr_scl_code,
                                            dr_rec.ibnr_brn_code,
                                            NVL (v_secsup_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_auth_date);
                    END IF;

                    IF NVL (v_facre_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'IBNR';
                        v_trans_lvl := 'FO';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.ibnr_scl_code,
                                            dr_rec.ibnr_brn_code,
                                            NVL (v_facre_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_auth_date);
                    END IF;

                    IF NVL (v_facob_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'IBNR';
                        v_trans_lvl := 'FO';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.ibnr_scl_code,
                                            dr_rec.ibnr_brn_code,
                                            NVL (v_facob_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_auth_date);
                    END IF;

                    IF NVL (v_pool_mvmnt, 0) != 0
                    THEN
                        v_trans_type := 'IBNR';
                        v_trans_lvl := 'POOL';
                        insert_into_gltran (v_trans_type,
                                            v_trans_lvl,
                                            dr_rec.ibnr_scl_code,
                                            dr_rec.ibnr_brn_code,
                                            NVL (v_pool_mvmnt, 0),
                                            v_user,
                                            dr_rec.cur_code,
                                            dr_rec.cur_symbol,
                                            v_cur_rate,
                                            v_trans_no,
                                            v_auth_date);
                    END IF;
                -- EXCEPTION
                -- WHEN OTHERS
                -- THEN
                -- raise_when_others ('Error inserting GIN GL ......');
                END;
            END LOOP;

            BEGIN
                --GIN_INTERFACES_PKG.Create_GL_Voucher(v_gl_trans_no,v_vchr_desc,v_user,NULL);
                gin_interfaces_pkg.create_gl_voucher (v_trans_no,
                                                      v_vchr_desc,
                                                      v_user,
                                                      NULL);

                UPDATE gin_ibnr_transactions
                   SET uirans_authorized_date = TRUNC (SYSDATE),
                       uirans_authorized_by = v_user,
                       uirans_authorized = 'Y'
                 WHERE uirans_code = v_uirans_code;

                UPDATE gin_gis_transactions
                   SET ggt_trans_authorised = 'Y',
                       ggt_trans_authorised_by = v_user,
                       ggt_trans_authorise_date = TRUNC (SYSDATE)
                 WHERE ggt_trans_no = v_trans_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_when_others ('Error Creating GL Voucher...');
                    ROLLBACK;
            END;
        END LOOP;
    END;

    FUNCTION get_policy_balances (v_policy_no IN VARCHAR2)
        RETURN NUMBER
    IS
        v_bal   NUMBER;
    BEGIN
        BEGIN
            SELECT SUM (NVL (mtran_balance, 0))
              INTO v_bal
              FROM gin_policies, gin_master_transactions
             WHERE     pol_batch_no = mtran_pol_batch_no
                   AND pol_policy_no = v_policy_no
                   AND mtran_tran_type NOT IN ('SF')
                   AND DECODE (pol_agnt_agent_code,
                               0, pol_prp_code,
                               pol_agnt_agent_code) =
                       mtran_client_code
                   AND DECODE (pol_agnt_agent_code, 0, 'D', 'A') =
                       DECODE (mtran_client_code, 'D', 'D', 'A');
        EXCEPTION
            WHEN OTHERS
            THEN
                v_bal := 0;
        END;

        RETURN (v_bal);
    END;

    FUNCTION get_pdr_balance (v_pol_batch_no IN NUMBER)
        RETURN NUMBER
    IS
        v_balance      NUMBER;
        v_tot_amount   NUMBER;
        v_rec_amount   NUMBER;
    BEGIN
        SELECT ABS (
                   SUM (
                       DECODE (mpm_drcr,
                               'C', -ABS (NVL (mpm_amount, 0)),
                               ABS (NVL (mpm_amount, 0)))))
          INTO v_rec_amount
          FROM gin_master_transactions, gin_master_prd_mapping
         WHERE     mtran_no = mpm_mtran_no
               AND mpm_pol_batch_no = v_pol_batch_no
               AND mtran_tran_type IN ('RC', 'CN');

        SELECT (NVL (pol_tot_endos_diff_amt, 0))
          INTO v_tot_amount
          FROM gin_policies
         WHERE pol_batch_no = v_pol_batch_no;

        v_balance := NVL (v_tot_amount, 0) - NVL (v_rec_amount, 0);
        RETURN v_balance;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN 0;
    END get_pdr_balance;

    FUNCTION get_pdr_receipt_amount (v_pol_batch_no IN NUMBER)
        RETURN NUMBER
    IS
        v_rec_amount   NUMBER;
    BEGIN
        SELECT ABS (
                   SUM (
                       DECODE (mpm_drcr,
                               'C', -ABS (NVL (mpm_amount, 0)),
                               ABS (NVL (mpm_amount, 0)))))
          INTO v_rec_amount
          FROM gin_master_transactions, gin_master_prd_mapping
         WHERE     mtran_no = mpm_mtran_no
               AND mpm_pol_batch_no = v_pol_batch_no
               AND mtran_tran_type IN ('RC', 'CN');

        RETURN v_rec_amount;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN 0;
    END get_pdr_receipt_amount;

    PROCEDURE allocate_pdr_rcpt_bak (v_mtran_no       IN NUMBER,
                                     v_pol_batch_no   IN NUMBER,
                                     v_amount         IN NUMBER)
    IS
        v_cnt     NUMBER;
        v_count   NUMBER;
    BEGIN
        IF v_pol_batch_no IS NULL
        THEN
            raise_error ('Policy number is not provided...');
        ELSIF NVL (v_amount, 0) = 0
        THEN
            raise_error ('No allocated amount...');
        END IF;

        BEGIN
            SELECT COUNT (0)
              INTO v_cnt
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_error ('Policy number not found....');
        END;

        BEGIN
            INSERT INTO gin_master_prd_mapping (mpm_code,
                                                mpm_pol_batch_no,
                                                mpm_mtran_no,
                                                mpm_amount,
                                                mpm_drcr,
                                                mpm_posting_date)
                 VALUES (mpm_code_seq.NEXTVAL,
                         v_pol_batch_no,
                         v_mtran_no,
                         v_amount,
                         'C',
                         SYSDATE);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error inserting pdr receipt allocation....');
        END;

        IF NVL (gis_accounts_utilities.get_pdr_balance (v_pol_batch_no), 0) =
           0
        THEN
            BEGIN
                SELECT COUNT (0)
                  INTO v_count
                  FROM gin_policy_exceptions
                 WHERE     gpe_pol_batch_no = v_pol_batch_no
                       AND NVL (gpe_authorised, 'N') = 'N'
                       AND gpe_gge_code = 'PDR';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
            END;

            IF NVL (v_count, 0) > 0
            THEN
                DELETE gin_policy_exceptions
                 WHERE     gpe_pol_batch_no = v_pol_batch_no
                       AND NVL (gpe_authorised, 'N') = 'N'
                       AND gpe_gge_code = 'PDR';
            END IF;
        END IF;
    END;

    PROCEDURE allocate_pdr_rcpt (v_mtran_no         IN NUMBER,
                                 v_pol_batch_no     IN NUMBER,
                                 v_amount           IN NUMBER,
                                 v_comm_inclusive   IN VARCHAR2 DEFAULT 'N')
    IS
        v_cnt                 NUMBER;
        v_count               NUMBER;
        x                     NUMBER := 0;
        v_tran_sign           NUMBER;
        v_org_type            VARCHAR2 (5) := tqc_parameters_pkg.get_org_type (37);
        v_prev_alloc_amt      NUMBER;
        v_pol_net_amnt        NUMBER;
        v_pol_comm            NUMBER;
        v_prem_amt            NUMBER;
        v_comm_amt            NUMBER;
        v_coin_flw_tot_comm   NUMBER;
        v_exhange_rate        NUMBER;
        v_rnd                 NUMBER;
        v_bcur_rnd            NUMBER;
        v_tot_pdr_rct_amt     NUMBER;
        v_param               VARCHAR2 (2);

        CURSOR cur_pol IS
            SELECT pol_exch_rate_fixed,
                   pol_cur_code,
                   pol_cur_rate,
                   pol_ipf_nof_instals,
                   pol_tot_endos_diff_amt,
                   pol_coinsurance,
                   pol_coinsure_leader,
                   pol_coin_leader_combined,
                   pol_coin_endos_prem,
                   pol_duties,
                   pol_wtht,
                   pol_tl,
                   pol_phfund,
                   pol_tot_tl,
                   pol_tot_phfund,
                   pol_extras,
                   pol_comm_endos_diff_amt
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;
    BEGIN
        IF v_pol_batch_no IS NULL
        THEN
            raise_error ('Policy number is not provided...');
        ELSIF NVL (v_amount, 0) = 0
        THEN
            raise_error ('No allocated amount...');
        END IF;

        FOR cur_pol_rec IN cur_pol
        LOOP
            IF NVL (cur_pol_rec.pol_exch_rate_fixed, 'N') = 'N'
            THEN
                v_exhange_rate := 1;
                v_exhange_rate :=
                    get_currexch_rate (cur_pol_rec.pol_cur_code,
                                       v_rnd,
                                       v_bcur_rnd);
            ELSE                                 -- TO TAKE CARE OF FIXED RATE
                v_exhange_rate :=
                    get_currexch_rate (cur_pol_rec.pol_cur_code,
                                       v_rnd,
                                       v_bcur_rnd);
                v_exhange_rate := cur_pol_rec.pol_cur_rate;
            END IF;

            IF NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0) < 0
            THEN
                v_tran_sign := -1;
            ELSE
                v_tran_sign := 1;
            END IF;

            IF     NVL (v_org_type, 'INS') = 'INS'
               AND (    NVL (cur_pol_rec.pol_coinsurance, 'N') = 'Y'
                    AND NVL (cur_pol_rec.pol_coinsure_leader, 'N') = 'Y'
                    AND NVL (cur_pol_rec.pol_coin_leader_combined, 'N') = 'Y')
            THEN
                BEGIN
                    SELECT SUM (NVL (coin_commission, 0))
                      INTO v_coin_flw_tot_comm
                      FROM gin_coinsurers
                     WHERE coin_pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;

                v_pol_net_amnt :=
                        v_tran_sign
                      * ABS (
                            ROUND (
                                ROUND (
                                      NVL (cur_pol_rec.pol_coin_endos_prem,
                                           0)
                                    + NVL (cur_pol_rec.pol_duties, 0)
                                    + NVL (cur_pol_rec.pol_tot_tl, 0)
                                    + NVL (cur_pol_rec.pol_tot_phfund, 0)
                                    + NVL (cur_pol_rec.pol_extras, 0),
                                    v_rnd),
                                v_rnd))
                    - (  v_tran_sign
                       * ROUND (
                             ABS (
                                   NVL (cur_pol_rec.pol_comm_endos_diff_amt,
                                        0)
                                 + NVL (v_coin_flw_tot_comm, 0)),
                             v_rnd));
                v_pol_comm :=
                    (  v_tran_sign
                     * ROUND (
                           ABS (
                                 NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0)
                               + NVL (v_coin_flw_tot_comm, 0)),
                           v_rnd));
            ELSE
                v_pol_net_amnt :=
                      ROUND (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0),
                             v_rnd)
                    + ROUND (NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0),
                             v_rnd)
                    + ROUND (NVL (cur_pol_rec.pol_wtht, 0), v_rnd)
                    + ROUND (NVL (cur_pol_rec.pol_tl, 0), v_rnd)
                    + ROUND (NVL (cur_pol_rec.pol_duties, 0), v_rnd)
                    + ROUND (NVL (cur_pol_rec.pol_extras, 0), v_rnd)
                    + ROUND (NVL (cur_pol_rec.pol_phfund, 0), v_rnd);
                v_pol_comm := NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0);
            END IF;
        END LOOP;

        IF x = 0
        THEN
            raise_error ('Policy number is not provided...');
        END IF;

        v_prev_alloc_amt := get_pdr_receipt_amount (v_pol_batch_no);
        v_tot_pdr_rct_amt := NVL (v_prev_alloc_amt, 0) + NVL (v_amount, 0);

        IF     v_tot_pdr_rct_amt > NVL (v_pol_net_amnt, 0)
           AND NVL (v_comm_inclusive, 'N') != 'Y'
        THEN
            raise_error (
                   'Allocated amount '
                || v_tot_pdr_rct_amt
                || ' is more than the provisional debit note amount '
                || NVL (v_pol_net_amnt, 0));
        ELSIF v_tot_pdr_rct_amt >
              NVL (v_pol_net_amnt, 0) + NVL (v_pol_comm, 0)
        THEN
            raise_error (
                     'Allocated amount '
                  || v_tot_pdr_rct_amt
                  || ' is more than the provisional debit note amount (inclusive of commission)'
                  || NVL (v_pol_net_amnt, 0)
                + NVL (v_pol_comm, 0));
        ELSIF NVL (v_comm_inclusive, 'N') = 'Y'
        THEN
            BEGIN
                SELECT gin_parameters_pkg.get_param_varchar (
                           'COMM_PAID_ON_FULL_DEBIT')
                  INTO v_param
                  FROM DUAL;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error fetching commission payment parameter...');
            END;

            IF NVL (v_param, 'N') = 'Y'
            THEN
                IF ABS (v_pol_net_amnt) > NVL (v_tot_pdr_rct_amt, 0)
                THEN
                    v_prem_amt := NVL (v_amount, 0);
                ELSE
                    v_prem_amt := v_pol_net_amnt - NVL (v_prev_alloc_amt, 0);
                    v_comm_amt := NVL (v_amount, 0) - NVL (v_prem_amt, 0);
                END IF;
            ELSIF NVL (v_param, 'N') = 'N'
            THEN
                IF ABS (v_pol_net_amnt) > NVL (v_tot_pdr_rct_amt, 0)
                THEN
                    v_comm_amt :=
                        ROUND (
                            (  (  NVL (v_amount, 0)
                                / (v_pol_comm + v_pol_net_amnt))
                             * v_pol_comm),
                            v_rnd);
                    v_prem_amt := NVL (v_amount, 0) - NVL (v_comm_amt, 0);
                ELSE
                    v_comm_amt :=
                        ROUND (
                            (  (  (v_pol_net_amnt - NVL (v_prev_alloc_amt, 0))
                                / (v_pol_comm + v_pol_net_amnt))
                             * v_pol_comm),
                            v_rnd);
                    v_prem_amt :=
                          (v_pol_net_amnt - NVL (v_prev_alloc_amt, 0))
                        - NVL (v_comm_amt, 0);
                END IF;
            END IF;
        ELSE
            v_prem_amt := NVL (v_amount, 0);
            v_comm_amt := 0;
        END IF;

        BEGIN
            INSERT INTO gin_master_prd_mapping (mpm_code,
                                                mpm_pol_batch_no,
                                                mpm_mtran_no,
                                                mpm_drcr,
                                                mpm_posting_date,
                                                mpm_amount,
                                                mpm_comm_amt)
                 VALUES (mpm_code_seq.NEXTVAL,
                         v_pol_batch_no,
                         v_mtran_no,
                         'C',
                         SYSDATE,
                         NVL (v_prem_amt, 0),
                         NVL (v_comm_amt, 0));
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error inserting pdr receipt allocation....');
        END;

        IF NVL (gis_accounts_utilities.get_pdr_balance (v_pol_batch_no), 0) =
           0
        THEN
            BEGIN
                SELECT COUNT (0)
                  INTO v_count
                  FROM gin_policy_exceptions
                 WHERE     gpe_pol_batch_no = v_pol_batch_no
                       AND NVL (gpe_authorised, 'N') = 'N'
                       AND gpe_gge_code = 'PDR';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
            END;

            IF NVL (v_count, 0) > 0
            THEN
                DELETE gin_policy_exceptions
                 WHERE     gpe_pol_batch_no = v_pol_batch_no
                       AND NVL (gpe_authorised, 'N') = 'N'
                       AND gpe_gge_code = 'PDR';
            END IF;
        END IF;
    END;

    PROCEDURE undo_pdr_rcpt (v_mtran_no IN NUMBER)
    IS
        CURSOR prd_map IS
            SELECT *
              FROM gin_master_prd_mapping
             WHERE mpm_mtran_no = v_mtran_no;
    BEGIN
        FOR p IN prd_map
        LOOP
            INSERT INTO gin_master_prd_mapping (mpm_code,
                                                mpm_pol_batch_no,
                                                mpm_mtran_no,
                                                mpm_amount,
                                                mpm_drcr,
                                                mpm_posting_date)
                 VALUES (mpm_code_seq.NEXTVAL,
                         p.mpm_pol_batch_no,
                         p.mpm_mtran_no,
                         p.mpm_amount,
                         'D',
                         SYSDATE);
        END LOOP;
    END;

    PROCEDURE undo_pa_rcpt (v_prev_mtran_no   IN NUMBER,
                            v_mtran_no        IN NUMBER,
                            v_polbatch_no     IN NUMBER)
    IS
        CURSOR pa_rct IS
            SELECT *
              FROM gin_prem_receipts
             WHERE prm_mtran_no = v_prev_mtran_no;

        v_prm_code         NUMBER;
        v_user             VARCHAR2 (30);
        v_new_batch_no     NUMBER;
        v_pol_batch_no     NUMBER;
        v_freq             VARCHAR2 (30);
        v_pol_pro_code     NUMBER;
        v_agn_code         NUMBER;
        v_installment_no   NUMBER;
        v_policy_no        VARCHAR2 (30);
        v_ref_no           VARCHAR2 (30);
        v_amt              NUMBER;
    BEGIN
        IF v_polbatch_no IS NULL
        THEN
            FOR p IN pa_rct
            LOOP
                BEGIN
                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                           || gin_prm_code_seq.NEXTVAL
                      INTO v_prm_code
                      FROM DUAL;

                    INSERT INTO gin_prem_receipts (prm_code,
                                                   prm_date,
                                                   prm_amt,
                                                   prm_pol_batch_no,
                                                   prm_pol_policy_no,
                                                   prm_receipt_no,
                                                   prm_receipt_date,
                                                   prm_done_by,
                                                   prm_production_date,
                                                   prm_source,
                                                   prm_pay_method,
                                                   prm_mtran_no,
                                                   prm_drcr)
                         VALUES (v_prm_code,
                                 SYSDATE,
                                 p.prm_amt,
                                 p.prm_pol_batch_no,
                                 p.prm_pol_policy_no,
                                 p.prm_receipt_no || '/CN',
                                 SYSDATE,
                                 v_user,
                                 SYSDATE,
                                 'RECEIPT',
                                 'C',
                                 v_mtran_no,
                                 'D');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error creating canc receipt ');
                END;

                BEGIN
                    SELECT mtran_pol_batch_no
                      INTO v_pol_batch_no
                      FROM gin_master_transactions
                     WHERE mtran_no = v_prev_mtran_no;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        NULL;
                    WHEN OTHERS
                    THEN
                        raise_error ('ERROR FETCHING POLICY BATCH');
                END;

                IF v_pol_batch_no IS NOT NULL
                THEN
                    BEGIN
                        SELECT NVL (pol_prepared_by, pol_checked_by)
                          INTO v_user
                          FROM gin_policies
                         WHERE pol_batch_no = v_pol_batch_no;
                    END;

                    gin_stp_pkg.create_contra_trans (v_pol_batch_no,
                                                     v_new_batch_no,
                                                     v_user,
                                                     TRUNC (SYSDATE));

                    UPDATE gin_master_transactions
                       SET mtran_pol_batch_no = v_new_batch_no
                     WHERE mtran_no = v_mtran_no;

                    BEGIN
                        gin_uw_author_proc.pol_auth_prc (v_new_batch_no,
                                                         v_user,
                                                         'Y',
                                                         'Y',
                                                         TRUNC (SYSDATE),
                                                         'Y',
                                                         'N');
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            NULL;        --raise_error ('Error..' || SQLERRM);
                    END;

                    SELECT pol_freq_of_payment,
                           pol_pro_code,
                           pol_agnt_agent_code,
                           pol_os_instlmt_no
                      INTO v_freq,
                           v_pol_pro_code,
                           v_agn_code,
                           v_installment_no
                      FROM gin_policies
                     WHERE pol_batch_no = p.prm_pol_batch_no;

                    BEGIN
                        gin_misc_pkg.contra_installment (p.prm_amt,
                                                         v_prm_code,
                                                         NULL,
                                                         p.prm_pol_batch_no,
                                                         v_installment_no,
                                                         v_freq,
                                                         v_pol_pro_code,
                                                         NULL,
                                                         -v_agn_code,
                                                         NULL,
                                                         NULL,
                                                         'Y',
                                                         'Y',
                                                         NULL,
                                                         'Y',
                                                         v_new_batch_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'UNABLE TO PROCESS DEBIT POSTING...');
                    END;

                    -- BEGIN
                    -- gin_misc_pkg.process_premium_receipts (v_pol_batch_no,
                    -- v_prm_code,
                    -- 'Y',
                    -- 'N',
                    -- NULL,
                    -- null,
                    -- P.prm_amt,
                    -- v_new_batch_no);
                    -- EXCEPTION
                    -- WHEN OTHERS
                    -- THEN
                    -- raise_error ('Error' || SQLERRM);
                    -- END;
                    BEGIN
                        gin_misc_cleanup_pkg.correct_insts (
                            p.prm_pol_batch_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR ' || SQLERRM);
                    END;

                    -- BEGIN
                    -- gin_misc_cleanup_pkg.active_endrs(P.prm_pol_policy_no);
                    -- EXCEPTION
                    -- WHEN OTHERS THEN
                    -- RAISE_ERROR('Error checking active endorsements...');
                    -- END;
                    BEGIN
                        auto_allocate_trans (v_new_batch_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            NULL;
                    END;
                END IF;
            END LOOP;
        ELSE
            BEGIN
                SELECT mtran_client_polcy_no, mtran_ref_no, mtran_amount
                  INTO v_policy_no, v_ref_no, v_amt
                  FROM gin_master_transactions
                 WHERE mtran_no = v_mtran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    raise_error ('ERROR FETCHING POLICY BATCH');
            END;

            BEGIN
                SELECT pol_policy_no
                  INTO v_policy_no
                  FROM gin_policies
                 WHERE pol_batch_no = v_polbatch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            BEGIN
                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                       || gin_prm_code_seq.NEXTVAL
                  INTO v_prm_code
                  FROM DUAL;

                INSERT INTO gin_prem_receipts (prm_code,
                                               prm_date,
                                               prm_amt,
                                               prm_pol_batch_no,
                                               prm_pol_policy_no,
                                               prm_receipt_no,
                                               prm_receipt_date,
                                               prm_done_by,
                                               prm_production_date,
                                               prm_source,
                                               prm_pay_method,
                                               prm_mtran_no,
                                               prm_drcr,
                                               prm_origin)
                     VALUES (v_prm_code,
                             SYSDATE,
                             v_amt,
                             v_polbatch_no,
                             v_policy_no,
                             v_ref_no,
                             SYSDATE,
                             v_user,
                             SYSDATE,
                             'RECEIPT',
                             'C',
                             v_mtran_no,
                             'D',
                             'L');
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error creating canc receipt ');
            END;

            BEGIN
                gin_misc_pkg.process_premium_receipts (v_polbatch_no,
                                                       v_prm_code,
                                                       'Y',
                                                       'N',
                                                       NULL,
                                                       NULL,
                                                       v_amt,
                                                       v_new_batch_no);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error' || v_user || SQLERRM);
            END;
        END IF;
    END;

    PROCEDURE auto_allocate_contra_new (v_batch_no       IN NUMBER,
                                        v_old_batch_no   IN NUMBER,
                                        v_prp_code       IN NUMBER,
                                        v_agn_code       IN NUMBER)
    IS
        v_dc             VARCHAR2 (5);
        v_mtran_no       NUMBER;
        v_mtran_ref      VARCHAR2 (25);
        v_bal            NUMBER;
        v_cr_mtran_no    NUMBER;
        v_cr_mtran_ref   VARCHAR2 (25);
        v_cr_bal         NUMBER;
        v_dr_mtran_no    NUMBER;
        v_dr_mtran_ref   VARCHAR2 (25);
        v_dr_bal         NUMBER;
        v_cr_com         NUMBER;
        v_client_type    VARCHAR2 (15);
        v_client_code    NUMBER;
        v_cr_sett        NUMBER;
        v_dr_sett        NUMBER;
        v_act_code       NUMBER;
        v_alloc_amount   NUMBER;
        vclienttype      VARCHAR2 (5);

        CURSOR old_trans (v_clnt_code IN NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_old_batch_no
                   AND mtran_client_code = v_clnt_code
                   AND mtran_tran_type NOT IN ('SF', 'PM');

        CURSOR contra_trans (v_clnt_code IN NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_client_code;
    BEGIN
        -- RETURN;
        IF tqc_parameters_pkg.get_org_type (37) != ('INS')
        THEN
            SELECT mtran_dc,
                   mtran_no,
                   mtran_ref_no,
                   mtran_balance
              INTO v_dc,
                   v_mtran_no,
                   v_mtran_ref,
                   v_bal
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_prp_code
                   AND mtran_client_type = 'D';

            IF v_dc = 'C'
            THEN
                v_cr_mtran_no := v_mtran_no;
                v_cr_mtran_ref := v_mtran_ref;
                v_cr_bal := v_bal;

                SELECT mtran_no,
                       mtran_ref_no,
                       mtran_balance,
                       mtran_settlement
                  INTO v_dr_mtran_no,
                       v_dr_mtran_ref,
                       v_dr_bal,
                       v_dr_sett
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_prp_code
                       AND mtran_client_type = 'D';

                v_alloc_amount := LEAST (ABS (v_dr_bal), ABS (v_cr_bal));

                IF NVL (v_dr_sett, 0) != 0
                THEN
                    undo_trans_allocation (v_dr_mtran_no);

                    SELECT mtran_no, mtran_ref_no, mtran_balance
                      INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                      FROM gin_master_transactions
                     WHERE mtran_no = v_dr_mtran_no;
                END IF;
            ELSE
                v_dr_mtran_no := v_mtran_no;
                v_dr_mtran_ref := v_mtran_ref;
                v_dr_bal := v_bal;
                v_alloc_amount := v_bal;

                SELECT mtran_no,
                       mtran_ref_no,
                       mtran_balance,
                       mtran_settlement
                  INTO v_cr_mtran_no,
                       v_cr_mtran_ref,
                       v_cr_bal,
                       v_cr_sett
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_prp_code
                       AND mtran_client_type = 'D';

                v_alloc_amount := LEAST (ABS (v_dr_bal), ABS (v_cr_bal));

                IF NVL (v_cr_sett, 0) != 0
                THEN
                    undo_trans_allocation (v_cr_mtran_no);

                    SELECT mtran_no, mtran_ref_no, mtran_balance
                      INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                      FROM gin_master_transactions
                     WHERE mtran_no = v_cr_mtran_no;
                END IF;
            END IF;

            -- RAISE_ERROR(abs(v_cr_bal)||'=='||abs(v_dr_bal)||'=='||v_alloc_amount);
            IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
            THEN
                gis_accounts_utilities.knock_off_transactions (
                    v_cr_mtran_no,
                    v_cr_mtran_ref,
                    v_dr_mtran_no,
                    'N',
                    TRUNC (SYSDATE),
                    v_cr_bal,
                    v_cr_com,
                    v_alloc_amount,
                    'N');
            END IF;

            SELECT mtran_dc,
                   mtran_no,
                   mtran_ref_no,
                   mtran_balance
              INTO v_dc,
                   v_mtran_no,
                   v_mtran_ref,
                   v_bal
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_agn_code
                   AND mtran_client_type = 'I';

            IF v_dc = 'C'
            THEN
                v_cr_mtran_no := v_mtran_no;
                v_cr_mtran_ref := v_mtran_ref;
                v_cr_bal := v_bal;

                SELECT mtran_no,
                       mtran_ref_no,
                       mtran_balance,
                       mtran_settlement
                  INTO v_dr_mtran_no,
                       v_dr_mtran_ref,
                       v_dr_bal,
                       v_dr_sett
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_agn_code
                       AND mtran_client_type = 'I';

                IF NVL (v_dr_sett, 0) != 0
                THEN
                    undo_trans_allocation (v_dr_mtran_no);

                    SELECT mtran_no, mtran_ref_no, mtran_balance
                      INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                      FROM gin_master_transactions
                     WHERE mtran_no = v_dr_mtran_no;
                END IF;
            ELSE
                v_dr_mtran_no := v_mtran_no;
                v_dr_mtran_ref := v_mtran_ref;
                v_dr_bal := v_bal;

                SELECT mtran_no,
                       mtran_ref_no,
                       mtran_balance,
                       mtran_settlement
                  INTO v_cr_mtran_no,
                       v_cr_mtran_ref,
                       v_cr_bal,
                       v_cr_sett
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_agn_code
                       AND mtran_client_type = 'I';

                IF NVL (v_dr_sett, 0) != 0
                THEN
                    undo_trans_allocation (v_cr_mtran_no);

                    SELECT mtran_no, mtran_ref_no, mtran_balance
                      INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                      FROM gin_master_transactions
                     WHERE mtran_no = v_cr_mtran_no;
                END IF;
            END IF;

            IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
            THEN
                gis_accounts_utilities.knock_off_transactions (
                    v_cr_mtran_no,
                    v_cr_mtran_ref,
                    v_dr_mtran_no,
                    'N',
                    TRUNC (SYSDATE),
                    v_cr_bal,
                    v_cr_com,
                    LEAST (ABS (v_cr_bal), ABS (v_dr_bal)),
                    'N');
            END IF;
        ELSE
            -- continue from here
            IF v_agn_code = 0
            THEN
                v_client_type := 'D';
                v_client_code := v_prp_code;
            ELSE
                v_client_code := v_agn_code;

                SELECT agn_act_code
                  INTO v_act_code
                  FROM tqc_agencies
                 WHERE agn_code = v_agn_code;

                IF v_act_code IN (2,
                                  9,
                                  10,
                                  16,
                                  32)
                THEN
                    v_client_type := 'A';

                    SELECT DECODE (v_act_code,
                                   2, 'A',
                                   9, 'BD',
                                   10, 'MK',
                                   16, 'IA',
                                   32, 'DI')
                      INTO vclienttype
                      FROM DUAL;
                ELSIF v_act_code = 3
                THEN
                    v_client_type := 'B';
                    vclienttype := 'B';
                ELSIF v_act_code = 4
                THEN
                    v_client_type := 'FI';
                    vclienttype := 'FI';
                END IF;
            END IF;

            --raise_error(v_batch_no||'='||v_client_code||'='||v_client_type||'='||vclienttype||'='||v_old_batch_no);
            --2012510118=20107827=A=IA=2012468815
            BEGIN
                SELECT mtran_dc,
                       mtran_no,
                       mtran_ref_no,
                       mtran_balance
                  INTO v_dc,
                       v_mtran_no,
                       v_mtran_ref,
                       v_bal
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_batch_no
                       AND mtran_client_code = v_client_code
                       AND (   mtran_client_type = v_client_type
                            OR mtran_client_type = vclienttype)
                       AND mtran_tran_type != 'SF';
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            -- raise_error ('v_bal ' || v_mtran_no);
            IF NVL (v_bal, 0) != 0
            THEN
                IF v_dc = 'C'
                THEN
                    v_cr_mtran_no := v_mtran_no;
                    v_cr_mtran_ref := v_mtran_ref;
                    v_cr_bal := v_bal;

                    BEGIN
                        SELECT mtran_no,
                               mtran_ref_no,
                               mtran_balance,
                               mtran_settlement
                          INTO v_dr_mtran_no,
                               v_dr_mtran_ref,
                               v_dr_bal,
                               v_dr_sett
                          FROM gin_master_transactions
                         WHERE     mtran_pol_batch_no = v_old_batch_no
                               AND mtran_client_code = v_client_code
                               AND NVL (mtran_balance, 0) != 0
                               AND (   mtran_client_type = v_client_type
                                    OR mtran_client_type = vclienttype)
                               AND mtran_tran_type NOT IN ('SF', 'RC', 'BNK');
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            v_dr_mtran_no := NULL;
                            v_dr_sett := 0;
                            v_dr_bal := 0;
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'v_old_batch_no '
                                || v_old_batch_no
                                || ' v_client_code '
                                || v_client_code
                                || ' vclienttype '
                                || vclienttype
                                || ' v_bal '
                                || v_bal
                                || 'v_client_type'
                                || v_client_type);
                    END;

                    IF NVL (v_dr_sett, 0) != 0
                    THEN
                        undo_trans_allocation (v_dr_mtran_no);

                        SELECT mtran_no, mtran_ref_no, mtran_balance
                          INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                          FROM gin_master_transactions
                         WHERE mtran_no = v_dr_mtran_no;
                    END IF;
                ELSE
                    v_dr_mtran_no := v_mtran_no;
                    v_dr_mtran_ref := v_mtran_ref;
                    v_dr_bal := v_bal;

                    BEGIN
                        SELECT mtran_no,
                               mtran_ref_no,
                               mtran_balance,
                               mtran_settlement
                          INTO v_cr_mtran_no,
                               v_cr_mtran_ref,
                               v_cr_bal,
                               v_cr_sett
                          FROM gin_master_transactions
                         WHERE     mtran_pol_batch_no = v_old_batch_no
                               AND mtran_client_code = v_client_code
                               AND (   mtran_client_type = v_client_type
                                    OR mtran_client_type = vclienttype)
                               AND mtran_tran_type != 'SF';
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            v_cr_mtran_no := NULL;
                            v_cr_sett := 0;
                            v_cr_bal := 0;
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'v_old_batch_no '
                                || v_old_batch_no
                                || ' v_client_code '
                                || v_client_code
                                || ' vclienttype '
                                || vclienttype
                                || ' v_bal '
                                || v_bal);
                    END;

                    IF NVL (v_cr_sett, 0) != 0
                    THEN
                        undo_trans_allocation (v_cr_mtran_no);

                        SELECT mtran_no, mtran_ref_no, mtran_balance
                          INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                          FROM gin_master_transactions
                         WHERE mtran_no = v_cr_mtran_no;
                    END IF;
                END IF;

                --RAISE_ERROR(v_cr_bal||'='||v_dr_bal);
                IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
                THEN
                    gis_accounts_utilities.knock_off_transactions (
                        v_cr_mtran_no,
                        v_cr_mtran_ref,
                        v_dr_mtran_no,
                        'N',
                        TRUNC (SYSDATE),
                        v_cr_bal,
                        v_cr_com,
                        LEAST (ABS (v_cr_bal), ABS (v_dr_bal)),
                        'N');
                END IF;
            END IF;
        END IF;
    -- RAISE_ERROR('HAPA');
    END;

    PROCEDURE auto_allocate_risk_contra_new (v_batch_no       IN NUMBER,
                                             v_old_batch_no   IN NUMBER,
                                             v_prp_code       IN NUMBER,
                                             v_agn_code       IN NUMBER)
    IS
        v_dc             VARCHAR2 (5);
        v_mtran_no       NUMBER;
        v_mtran_ref      VARCHAR2 (25);
        v_bal            NUMBER;
        v_cr_mtran_no    NUMBER;
        v_cr_mtran_ref   VARCHAR2 (25);
        v_cr_bal         NUMBER;
        v_dr_mtran_no    NUMBER;
        v_dr_mtran_ref   VARCHAR2 (25);
        v_dr_bal         NUMBER;
        v_cr_com         NUMBER;
        v_client_type    VARCHAR2 (15);
        v_client_code    NUMBER;
        v_cr_sett        NUMBER;
        v_dr_sett        NUMBER;
        v_act_code       NUMBER;
        v_alloc_amount   NUMBER;
        vclienttype      VARCHAR2 (5);

        CURSOR old_trans (v_clnt_code IN NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_old_batch_no
                   AND mtran_client_code = v_clnt_code
                   AND mtran_tran_type != 'SF';

        CURSOR contra_trans (v_clnt_code IN NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_client_code;

        CURSOR risk_trans IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_tran_type != 'SF'
                   AND mtran_pol_batch_no = v_old_batch_no
                   AND mtran_polin_code != NULL;
    BEGIN
        -- RETURN;
        IF tqc_parameters_pkg.get_org_type (37) != ('INS')
        THEN
            SELECT mtran_dc,
                   mtran_no,
                   mtran_ref_no,
                   mtran_balance
              INTO v_dc,
                   v_mtran_no,
                   v_mtran_ref,
                   v_bal
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_prp_code
                   AND mtran_client_type = 'D';

            IF v_dc = 'C'
            THEN
                v_cr_mtran_no := v_mtran_no;
                v_cr_mtran_ref := v_mtran_ref;
                v_cr_bal := v_bal;

                SELECT mtran_no,
                       mtran_ref_no,
                       mtran_balance,
                       mtran_settlement
                  INTO v_dr_mtran_no,
                       v_dr_mtran_ref,
                       v_dr_bal,
                       v_dr_sett
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_prp_code
                       AND mtran_client_type = 'D';

                v_alloc_amount := LEAST (ABS (v_dr_bal), ABS (v_cr_bal));

                IF NVL (v_dr_sett, 0) != 0
                THEN
                    undo_trans_allocation (v_dr_mtran_no);

                    SELECT mtran_no, mtran_ref_no, mtran_balance
                      INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                      FROM gin_master_transactions
                     WHERE mtran_no = v_dr_mtran_no;
                END IF;
            ELSE
                v_dr_mtran_no := v_mtran_no;
                v_dr_mtran_ref := v_mtran_ref;
                v_dr_bal := v_bal;
                v_alloc_amount := v_bal;

                SELECT mtran_no,
                       mtran_ref_no,
                       mtran_balance,
                       mtran_settlement
                  INTO v_cr_mtran_no,
                       v_cr_mtran_ref,
                       v_cr_bal,
                       v_cr_sett
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_prp_code
                       AND mtran_client_type = 'D';

                v_alloc_amount := LEAST (ABS (v_dr_bal), ABS (v_cr_bal));

                IF NVL (v_cr_sett, 0) != 0
                THEN
                    undo_trans_allocation (v_cr_mtran_no);

                    SELECT mtran_no, mtran_ref_no, mtran_balance
                      INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                      FROM gin_master_transactions
                     WHERE mtran_no = v_cr_mtran_no;
                END IF;
            END IF;

            -- RAISE_ERROR(abs(v_cr_bal)||'=='||abs(v_dr_bal)||'=='||v_alloc_amount);
            IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
            THEN
                gis_accounts_utilities.knock_off_transactions (
                    v_cr_mtran_no,
                    v_cr_mtran_ref,
                    v_dr_mtran_no,
                    'N',
                    TRUNC (SYSDATE),
                    v_cr_bal,
                    v_cr_com,
                    v_alloc_amount,
                    'N');
            END IF;

            SELECT mtran_dc,
                   mtran_no,
                   mtran_ref_no,
                   mtran_balance
              INTO v_dc,
                   v_mtran_no,
                   v_mtran_ref,
                   v_bal
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_agn_code
                   AND mtran_client_type = 'I';

            IF v_dc = 'C'
            THEN
                v_cr_mtran_no := v_mtran_no;
                v_cr_mtran_ref := v_mtran_ref;
                v_cr_bal := v_bal;

                SELECT mtran_no,
                       mtran_ref_no,
                       mtran_balance,
                       mtran_settlement
                  INTO v_dr_mtran_no,
                       v_dr_mtran_ref,
                       v_dr_bal,
                       v_dr_sett
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_agn_code
                       AND mtran_client_type = 'I';

                IF NVL (v_dr_sett, 0) != 0
                THEN
                    undo_trans_allocation (v_dr_mtran_no);

                    SELECT mtran_no, mtran_ref_no, mtran_balance
                      INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                      FROM gin_master_transactions
                     WHERE mtran_no = v_dr_mtran_no;
                END IF;
            ELSE
                v_dr_mtran_no := v_mtran_no;
                v_dr_mtran_ref := v_mtran_ref;
                v_dr_bal := v_bal;

                SELECT mtran_no,
                       mtran_ref_no,
                       mtran_balance,
                       mtran_settlement
                  INTO v_cr_mtran_no,
                       v_cr_mtran_ref,
                       v_cr_bal,
                       v_cr_sett
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_old_batch_no
                       AND mtran_client_code = v_agn_code
                       AND mtran_client_type = 'I';

                IF NVL (v_dr_sett, 0) != 0
                THEN
                    undo_trans_allocation (v_cr_mtran_no);

                    SELECT mtran_no, mtran_ref_no, mtran_balance
                      INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                      FROM gin_master_transactions
                     WHERE mtran_no = v_cr_mtran_no;
                END IF;
            END IF;

            IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
            THEN
                gis_accounts_utilities.knock_off_transactions (
                    v_cr_mtran_no,
                    v_cr_mtran_ref,
                    v_dr_mtran_no,
                    'N',
                    TRUNC (SYSDATE),
                    v_cr_bal,
                    v_cr_com,
                    LEAST (ABS (v_cr_bal), ABS (v_dr_bal)),
                    'N');
            END IF;
        ELSE
            -- continue from here
            IF v_agn_code = 0
            THEN
                v_client_type := 'D';
                v_client_code := v_prp_code;
            ELSE
                v_client_code := v_agn_code;

                SELECT agn_act_code
                  INTO v_act_code
                  FROM tqc_agencies
                 WHERE agn_code = v_agn_code;

                IF v_act_code IN (2,
                                  9,
                                  10,
                                  16,
                                  32)
                THEN
                    v_client_type := 'A';

                    SELECT DECODE (v_act_code,
                                   2, 'A',
                                   9, 'BD',
                                   10, 'MK',
                                   16, 'IA',
                                   32, 'DI')
                      INTO vclienttype
                      FROM DUAL;
                ELSIF v_act_code = 3
                THEN
                    v_client_type := 'B';
                    vclienttype := 'B';
                ELSIF v_act_code = 4
                THEN
                    v_client_type := 'FI';
                    vclienttype := 'FI';
                END IF;
            END IF;

            --raise_error(v_batch_no||'='||v_client_code||'='||v_client_type||'='||vclienttype||'='||v_old_batch_no);
            --2012510118=20107827=A=IA=2012468815
            FOR trans IN risk_trans
            LOOP
                BEGIN
                    SELECT mtran_dc,
                           mtran_no,
                           mtran_ref_no,
                           mtran_balance
                      INTO v_dc,
                           v_mtran_no,
                           v_mtran_ref,
                           v_bal
                      FROM gin_master_transactions
                     WHERE     mtran_pol_batch_no = v_batch_no
                           AND mtran_client_code = v_client_code
                           AND (   mtran_client_type = v_client_type
                                OR mtran_client_type = vclienttype)
                           AND mtran_tran_type != 'SF'
                           AND mtran_polin_code = trans.mtran_polin_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;

                raise_error ('v_bal ' || v_mtran_no);

                IF NVL (v_bal, 0) != 0
                THEN
                    IF v_dc = 'C'
                    THEN
                        v_cr_mtran_no := v_mtran_no;
                        v_cr_mtran_ref := v_mtran_ref;
                        v_cr_bal := v_bal;

                        BEGIN
                            SELECT mtran_no,
                                   mtran_ref_no,
                                   mtran_balance,
                                   mtran_settlement
                              INTO v_dr_mtran_no,
                                   v_dr_mtran_ref,
                                   v_dr_bal,
                                   v_dr_sett
                              FROM gin_master_transactions
                             WHERE     mtran_pol_batch_no = v_old_batch_no
                                   AND mtran_client_code = v_client_code
                                   AND (   mtran_client_type = v_client_type
                                        OR mtran_client_type = vclienttype)
                                   AND mtran_tran_type != 'SF'
                                   AND mtran_polin_code =
                                       trans.mtran_polin_code;
                        -- EXCEPTION
                        -- WHEN OTHERS THEN
                        -- RAISE_ERROR('v_old_batch_no '||v_old_batch_no||' v_client_code '||v_client_code||' vclienttype '||vclienttype||' v_bal '||v_bal);
                        END;

                        IF NVL (v_dr_sett, 0) != 0
                        THEN
                            undo_trans_allocation (v_dr_mtran_no);

                            SELECT mtran_no, mtran_ref_no, mtran_balance
                              INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                              FROM gin_master_transactions
                             WHERE     mtran_no = v_dr_mtran_no
                                   AND mtran_polin_code =
                                       trans.mtran_polin_code;
                        END IF;
                    ELSE
                        v_dr_mtran_no := v_mtran_no;
                        v_dr_mtran_ref := v_mtran_ref;
                        v_dr_bal := v_bal;

                        SELECT mtran_no,
                               mtran_ref_no,
                               mtran_balance,
                               mtran_settlement
                          INTO v_cr_mtran_no,
                               v_cr_mtran_ref,
                               v_cr_bal,
                               v_cr_sett
                          FROM gin_master_transactions
                         WHERE     mtran_pol_batch_no = v_old_batch_no
                               AND mtran_client_code = v_client_code
                               AND (   mtran_client_type = v_client_type
                                    OR mtran_client_type = vclienttype)
                               AND mtran_tran_type != 'SF'
                               AND mtran_polin_code = trans.mtran_polin_code;

                        IF NVL (v_cr_sett, 0) != 0
                        THEN
                            undo_trans_allocation (v_cr_mtran_no);

                            SELECT mtran_no, mtran_ref_no, mtran_balance
                              INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                              FROM gin_master_transactions
                             WHERE     mtran_no = v_cr_mtran_no
                                   AND mtran_polin_code =
                                       trans.mtran_polin_code;
                        END IF;
                    END IF;

                    --RAISE_ERROR(v_cr_bal||'='||v_dr_bal);
                    IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
                    THEN
                        gis_accounts_utilities.knock_off_transactions (
                            v_cr_mtran_no,
                            v_cr_mtran_ref,
                            v_dr_mtran_no,
                            'N',
                            TRUNC (SYSDATE),
                            v_cr_bal,
                            v_cr_com,
                            LEAST (ABS (v_cr_bal), ABS (v_dr_bal)),
                            'N');
                    END IF;
                END IF;
            END LOOP;
        END IF;
    -- RAISE_ERROR('HAPA');
    END;

    FUNCTION get_installment_number (v_pol_batch_no NUMBER)
        RETURN NUMBER
    IS
        v_installmnt_no   NUMBER;
    BEGIN
        --RAISE_ERROR('v_pol_batch_no'||v_pol_batch_no);
        SELECT MAX (ipu_install_period)
          INTO v_installmnt_no
          FROM gin_insured_property_unds
         WHERE ipu_pol_batch_no = v_pol_batch_no;

        RETURN v_installmnt_no;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN 1;
    END;

    FUNCTION get_debited_installmt_amnt (v_pol_batch_no NUMBER)
        RETURN NUMBER
    IS
        v_paid_prem   NUMBER;
    BEGIN
        SELECT SUM (ipu_paid_premium)
          INTO v_paid_prem
          FROM gin_insured_property_unds
         WHERE ipu_pol_batch_no = v_pol_batch_no;

        RETURN v_paid_prem;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN 0;
    END;

    FUNCTION get_policy_si (v_pol_batch_no NUMBER)
        RETURN NUMBER
    IS
        v_sum_ins   NUMBER;
    BEGIN
        --RAISE_ERROR('v_pol_batch_no'||v_pol_batch_no);
        SELECT pol_total_sum_insured
          INTO v_sum_ins
          FROM gin_policies
         WHERE pol_batch_no = v_pol_batch_no;

        RETURN v_sum_ins;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN 0;
    END;

    FUNCTION get_policy_coin_fee (v_pol_batch_no NUMBER)
        RETURN NUMBER
    IS
        v_coin_ins   NUMBER;
    BEGIN
        --RAISE_ERROR('v_pol_batch_no'||v_pol_batch_no);
        SELECT pol_coin_fee_amt
          INTO v_coin_ins
          FROM gin_policies
         WHERE pol_batch_no = v_pol_batch_no;

        RETURN v_coin_ins;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN 0;
    END;

    FUNCTION get_policy_cover_period (v_pol_batch_no NUMBER)
        RETURN VARCHAR2
    IS
        v_cover_period   VARCHAR2 (100);
    BEGIN
        --RAISE_ERROR('v_pol_batch_no'||v_pol_batch_no);
        SELECT    TO_CHAR (pol_wef_dt, 'DD/MM/RRRR')
               || ' - '
               || TO_CHAR (pol_wet_dt, 'DD/MM/RRRR')
          INTO v_cover_period
          FROM gin_policies
         WHERE pol_batch_no = v_pol_batch_no;

        RETURN v_cover_period;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN NULL;
    END;

    FUNCTION getpaidprem_rcpt_ref (v_pol_batch_no   IN NUMBER,
                                   v_agn_code       IN NUMBER,
                                   v_clnt_code      IN NUMBER,
                                   v_value_type     IN VARCHAR2)
        RETURN VARCHAR2
    IS
        v_act_code      NUMBER;
        v_client_type   VARCHAR2 (5);
        v_client_code   NUMBER;
        v_cnt           NUMBER;
        v_ref_no        VARCHAR2 (75);
    BEGIN
        IF v_agn_code = 0
        THEN
            v_client_type := 'D';
            v_client_code := v_clnt_code;
        ELSE
            v_client_code := v_agn_code;

            SELECT agn_act_code
              INTO v_act_code
              FROM tqc_agencies
             WHERE agn_code = v_agn_code;

            IF v_act_code IN (2,
                              9,
                              10,
                              16,
                              32)
            THEN
                v_client_type := 'A';
            ELSIF v_act_code = 3
            THEN
                v_client_type := 'B';
            ELSIF v_act_code = 4
            THEN
                v_client_type := 'FI';
            END IF;
        END IF;

        BEGIN
            SELECT COUNT (1), MAX (tmap_mtran_ref_no)
              INTO v_cnt, v_ref_no
              FROM (SELECT tmap_mtran_ref_no
                      FROM gin_master_transactions a, gin_tran_mapping
                     WHERE     mtran_dc = 'D'
                           AND mtran_no = tmap_check_mtran_no
                           AND mtran_client_code = v_client_code
                           AND mtran_client_type = v_client_type
                           AND mtran_pol_batch_no = v_pol_batch_no
                           AND mtran_tran_type != 'SF'
                    UNION
                    SELECT tmap_mtran_ref_no
                      FROM gin_master_transactions a, gin_tran_mapping
                     WHERE     mtran_dc = 'C'
                           AND mtran_no = tmap_mtran_no
                           AND mtran_client_code = v_client_code
                           AND mtran_client_type = v_client_type
                           AND mtran_pol_batch_no = v_pol_batch_no
                           AND mtran_tran_type != 'SF');
        EXCEPTION
            WHEN OTHERS
            THEN
                RETURN (NULL);
        END;

        IF v_cnt = 0
        THEN
            RETURN NULL;
        ELSIF v_cnt = 1
        THEN
            RETURN v_ref_no;
        ELSE
            RETURN ('VARIOUS');
        END IF;
    END;

    FUNCTION getmanualref (v_rct_no NUMBER)
        RETURN VARCHAR2
    IS
        v_rct_manual_ref   VARCHAR2 (200);
    BEGIN
        IF v_rct_no IS NOT NULL
        THEN
            BEGIN
                SELECT rct_cleared
                  INTO v_rct_manual_ref
                  FROM fms_receipts
                 WHERE rct_no = v_rct_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
            END;
        ELSE
            v_rct_manual_ref := NULL;
        END IF;

        RETURN v_rct_manual_ref;
    END getmanualref;

    -- PROCEDURE process_mdp_payments (v_user IN VARCHAR2, v_mtran_no IN NUMBER,v_premType IN VARCHAR2)
    -- IS
    -- --get payment transaction from gin_master_transactions
    -- CURSOR c_payment
    -- IS
    -- SELECT mtran_no, mtran_date, mtran_ref_no, mtran_other_ref,
    -- mtran_tran_type, mtran_dc, mtran_control_acc,
    -- mtran_client_type, mtran_client_code, MTRAN_AMOUNT amount,
    -- MTRAN_BALANCE BALANCE,
    -- mtran_pol_batch_no, mtran_narrations, mtran_prp_code,
    -- mtran_ggt_tran_no, mtran_posting_date, mtran_brn_code,
    -- mtran_brn_sht_desc, mtran_payee, mtran_alloc_inc_comm,
    -- mtran_alloc_mtran_no,mtran_cur_code,mtran_extras
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_mtran_no
    -- AND mtran_authorised = 'Y'
    -- AND mtran_btr_trans_code = nvl(v_premType,'MDP'); ---PAYMENT TRANSACTIONS FILTER

    -- v_org_code NUMBER;
    -- v_crt_acc_no VARCHAR2 (20);
    -- v_sys_code NUMBER;
    -- v_bct_code NUMBER;
    -- v_bct_brh_code NUMBER;
    -- v_chq_dtls_rec fms_cheques_pkg.type_rqn_dtls_table;
    -- v_prod_code NUMBER;
    -- v_trnt_prod_applicable VARCHAR2 (3);
    -- v_trnt_contra_gl_code VARCHAR2 (20);
    -- v_count NUMBER := 0;
    -- v_cont NUMBER := -1;
    -- v_cnt NUMBER := 0;
    -- v_gl_count NUMBER := 0;
    -- v_cur_code NUMBER;
    -- v_brh_code NUMBER;
    -- v_raised_by NUMBER;
    -- v_auth_by NUMBER;
    -- v_req_by NUMBER;
    -- v_trnt_code VARCHAR2 (10);
    -- v_gl_trans fms_vouchers_pkg.tgl_rec_type;
    -- v_gl_acc VARCHAR2 (20);
    -- v_gl_acc2 VARCHAR2 (20);
    -- v_vgl_no NUMBER;
    -- v_contra_gl_code VARCHAR2 (20);
    -- v_ppt_id NUMBER;
    -- v_narrative VARCHAR2 (100);
    -- v_drcr VARCHAR2 (2);
    -- v_trans_code NUMBER;
    -- v_agn_name VARCHAR (30);
    -- v_bank_code NUMBER;
    -- v_bank_branch_code NUMBER;
    -- v_ref NUMBER;
    -- v_ref2 NUMBER;
    -- v_ref_date DATE;
    -- v_payee VARCHAR2 (150);
    -- v_pay_method VARCHAR2 (5);
    -- v_payee_bank_acc_no NUMBER;
    -- v_payee_bank_branch_code NUMBER;
    -- v_tot_cnt NUMBER;
    -- v_user_code NUMBER;
    -- v_brh_name VARCHAR2 (150);
    -- v_trnt_gl_code VARCHAR2 (20);
    -- v_side VARCHAR2 (20);
    --
    -- BEGIN
    ---- RAISE_ERROR('v_mtran_no'||v_mtran_no);
    -- BEGIN
    -- SELECT COUNT (1)
    -- INTO v_tot_cnt
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_mtran_no
    -- AND mtran_authorised = 'Y'
    -- AND mtran_btr_trans_code = nvl(v_premType,'MDP');
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Unable to count payment records...');
    -- END;

    -- IF NVL (v_tot_cnt, 0) = 0
    -- THEN
    -- raise_error ('No payments to authorise..');
    -- END IF;

    -- BEGIN
    -- SELECT usr_code
    -- INTO v_user_code
    -- FROM tqc_users
    -- WHERE usr_username = v_user;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error fetching user code for current system user');
    -- END;

    -- FOR r IN c_payment
    -- LOOP
    -- v_org_code := fms_interfaces_pkg.get_org (r.mtran_brn_code);

    -- IF ABS (NVL(r.amount,0)) > 0
    -- THEN
    -- DBMS_OUTPUT.put_line ('r.amount==' || r.amount);
    -- v_crt_acc_no := fms_interfaces_pkg.sl_control_acc ('GIS', r.mtran_client_type);
    -- gin_interfaces_pkg.valid_acc (v_crt_acc_no, v_org_code, r.mtran_brn_code );
    -- DBMS_OUTPUT.put_line ('r.amount==' || r.mtran_ref_no);
    -- v_narrative := 'GIS '||nvl(v_premType,'MDP')||' Payment for ' || r.mtran_ref_no;
    -- v_drcr := r.mtran_dc;
    -- v_count := 0;
    -- v_count := v_count + 1;

    -- BEGIN
    -- fms_cheques_pkg.append_chq_trans (v_count,
    -- r.balance,
    -- nvl(v_premType,'MDP')||'_PAYMENT',
    -- v_crt_acc_no,
    -- v_org_code,
    -- r.mtran_brn_code,
    -- v_drcr,
    -- v_chq_dtls_rec
    -- );
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error appending chq trans for'||nvl(v_premType,'MDP')||'_PAYMENT'||'...');
    -- END;
    -- -----append a cheque transaction for tax amts(rein and prem taxes)
    --
    -- IF NVL (r.mtran_extras, 0) != 0 THEN
    -- v_count := v_count + 1;
    -- BEGIN
    -- gin_interfaces_pkg.get_gl_acct_code
    -- ('UT', --v_trnt_type IN VARCHAR2,
    -- NULL, --v_scl_code IN NUMBER ******************CHECK,
    -- 'U', -- v_app_lvl IN VARCHAR2,
    -- 'UT', -- v_btr_trans_code IN VARCHAR2,
    -- NULL,
    -- -- v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    -- v_trnt_code, -- v_trnt_code OUT VARCHAR2,
    -- v_trnt_gl_code, -- v_trnt_gl_code OUT VARCHAR2,
    -- v_trnt_contra_gl_code
    -- -- v_trnt_contra_gl_code OUT VARCHAR2
    -- );
    --
    -- SELECT DECODE(v_drcr,'D','C','D') INTO v_side FROM DUAL;
    --
    -- gin_interfaces_pkg.valid_acc (v_trnt_gl_code, v_org_code, r.mtran_brn_code );
    --
    -- fms_cheques_pkg.append_chq_trans (v_count,
    -- ABS( r.mtran_extras),
    -- nvl(v_premType,'MDP')||'_TAXES',
    -- v_trnt_gl_code,
    -- v_org_code,
    -- r.mtran_brn_code,
    -- v_side,
    -- v_chq_dtls_rec
    -- );
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error appending chq trans for '|| nvl(v_premType,'MDP')||'_TAXES'||'...');
    -- END;
    -- END IF;
    --
    --
    -- IF v_count != 0
    -- THEN
    -- v_sys_code := fms_interfaces_pkg.systemcode ('GIS');
    -- v_cur_code :=r.mtran_cur_code;
    -- fms_interfaces_pkg.trans_bct ('PYMT',
    -- v_sys_code,
    -- r.mtran_brn_code,
    -- v_cur_code,
    -- v_bank_code,
    -- v_bank_branch_code
    -- );
    -- v_auth_by := fms_interfaces_pkg.get_usercode (v_user);
    -- v_req_by := fms_interfaces_pkg.get_usercode (v_user);
    -- --v_agn_name := r.agn_name;
    -- v_brh_code := r.mtran_brn_code;
    -- DBMS_OUTPUT.put_line ('R.MTRAN_PAYEE==' || r.mtran_payee);

    -- BEGIN
    -- fms_cheques_pkg.create_reqn
    -- (v_sys_code, -- v_cqr_source,
    -- nvl(v_premType,'MDP')||'/' || v_mtran_no, -- v_cqr_ref, ref1
    -- NULL, -- v_cqr_ref2, OR ANY OTHER REF
    -- TRUNC (SYSDATE), -- v_cqr_ref_date,
    -- v_narrative, -- v_cqr_narrative,
    -- r.mtran_brn_code, -- v_cqr_brh_code,
    -- v_bank_branch_code, -- v_cqr_bct_brh_code,
    -- r.amount, -- v_cqr_amount,
    -- r.mtran_payee, -- v_cqr_payee,
    -- 'CHQ', -- v_cqr_pay_method,
    -- v_bank_code, -- v_cqr_pay_bnk_acc_no,
    -- v_bank_branch_code, -- v_cqr_pay_bnk_branch_code,
    -- v_cur_code, -- v_cqr_cur_code,
    -- v_bank_code, -- v_cqr_bct_code,
    -- v_auth_by, -- v_cqr_source_auth_by,
    -- TRUNC (SYSDATE), -- v_cqr_source_auth_dt,
    -- v_req_by, -- v_cqr_req_by,
    -- nvl(v_premType,'MDP'), -- v_cqr_pmt_type,
    -- v_chq_dtls_rec,
    -- v_mtran_no
    -- );
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('PAYMENT CREATE_CHQ_REQN...');
    -- END;

    -- DBMS_OUTPUT.put_line ('cheque created========');
    -- END IF;
    -- END IF;
    -- END LOOP;
    ---- EXCEPTION
    ---- WHEN OTHERS
    ---- THEN
    ---- raise_error ('Error posting GIS payment...' || SQLERRM);
    -- END process_mdp_payments;
    --/***************TO BE UPDATED IN TQ_GIS.GIS_ACCOUNTS_UTILITIES***************/
    --PROCEDURE process_mdp_payments (v_user IN VARCHAR2, v_mtran_no IN NUMBER,v_premType IN VARCHAR2, vpaymethod VARCHAR2)
    -- IS
    -- --get payment transaction from gin_master_transactions
    -- CURSOR c_payment
    -- IS
    -- SELECT mtran_no, mtran_date, mtran_ref_no, mtran_other_ref,
    -- mtran_tran_type, mtran_dc, mtran_control_acc,
    -- mtran_client_type, mtran_client_code, MTRAN_AMOUNT amount,
    -- MTRAN_BALANCE BALANCE,
    -- mtran_pol_batch_no, mtran_narrations, mtran_prp_code,
    -- mtran_ggt_tran_no, mtran_posting_date, mtran_brn_code,
    -- mtran_brn_sht_desc, mtran_payee, mtran_alloc_inc_comm,
    -- mtran_alloc_mtran_no,mtran_cur_code,mtran_extras
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_mtran_no
    -- AND mtran_authorised = 'Y'
    -- AND mtran_btr_trans_code = nvl(v_premType,'MDP'); ---PAYMENT TRANSACTIONS FILTER

    -- v_org_code NUMBER;
    -- v_crt_acc_no VARCHAR2 (20);
    -- v_sys_code NUMBER;
    -- v_bct_code NUMBER;
    -- v_bct_brh_code NUMBER;
    -- v_chq_dtls_rec fms_cheques_pkg.type_rqn_dtls_table;
    -- v_prod_code NUMBER;
    -- v_trnt_prod_applicable VARCHAR2 (3);
    -- v_trnt_contra_gl_code VARCHAR2 (20);
    -- v_count NUMBER := 0;
    -- v_cont NUMBER := -1;
    -- v_cnt NUMBER := 0;
    -- v_gl_count NUMBER := 0;
    -- v_cur_code NUMBER;
    -- v_brh_code NUMBER;
    -- v_raised_by NUMBER;
    -- v_auth_by NUMBER;
    -- v_req_by NUMBER;
    -- v_trnt_code VARCHAR2 (10);
    -- v_gl_trans fms_vouchers_pkg.tgl_rec_type;
    -- v_gl_acc VARCHAR2 (20);
    -- v_gl_acc2 VARCHAR2 (20);
    -- v_vgl_no NUMBER;
    -- v_contra_gl_code VARCHAR2 (20);
    -- v_ppt_id NUMBER;
    -- v_narrative VARCHAR2 (100);
    -- v_drcr VARCHAR2 (2);
    -- v_trans_code NUMBER;
    -- v_agn_name VARCHAR (30);
    -- v_bank_code NUMBER;
    -- v_bank_branch_code NUMBER;
    -- v_ref NUMBER;
    -- v_ref2 NUMBER;
    -- v_ref_date DATE;
    -- v_payee VARCHAR2 (150);
    -- v_pay_method VARCHAR2 (5);
    -- v_payee_bank_acc_no NUMBER;
    -- v_payee_bank_branch_code NUMBER;
    -- v_tot_cnt NUMBER;
    -- v_user_code NUMBER;
    -- v_brh_name VARCHAR2 (150);
    -- v_trnt_gl_code VARCHAR2 (20);
    -- v_side VARCHAR2 (20);
    -- v_rec_count_eft number :=0;
    -- v_payee_eft_dtls Fms_Cheques_Pkg.type_payee_eft_table;
    -- v_eft_enabled VARCHAR2 (1);
    -- v_bnk_account VARCHAR2 (30);
    -- v_bnk_bbr_code VARCHAR2 (30);
    -- v_bnk_bbr_pk NUMBER;

    -- BEGIN
    ---- RAISE_ERROR('v_mtran_no'||v_mtran_no);
    -- BEGIN
    -- SELECT COUNT (1)
    -- INTO v_tot_cnt
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_mtran_no
    -- AND mtran_authorised = 'Y'
    -- AND mtran_btr_trans_code = nvl(v_premType,'MDP');
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Unable to count payment records...');
    -- END;

    -- IF NVL (v_tot_cnt, 0) = 0
    -- THEN
    -- raise_error ('No payments to authorise..');
    -- END IF;

    -- BEGIN
    -- SELECT usr_code
    -- INTO v_user_code
    -- FROM tqc_users
    -- WHERE usr_username = v_user;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error fetching user code for current system user');
    -- END;

    -- FOR r IN c_payment
    -- LOOP
    -- v_org_code := fms_interfaces_pkg.get_org (r.mtran_brn_code);

    -- IF ABS (NVL(r.amount,0)) > 0
    -- THEN
    -- ----ADDED TO CATER FOR EFTS
    -- IF vpaymethod IN ('CHQ','CR')
    -- THEN
    -- DBMS_OUTPUT.put_line ('r.amount==' || r.amount);
    -- v_crt_acc_no := fms_interfaces_pkg.sl_control_acc ('GIS', r.mtran_client_type);
    -- gin_interfaces_pkg.valid_acc (v_crt_acc_no, v_org_code, r.mtran_brn_code );
    -- DBMS_OUTPUT.put_line ('r.amount==' || r.mtran_ref_no);
    -- v_narrative := 'GIS '||nvl(v_premType,'MDP')||' Payment for ' || r.mtran_ref_no;
    -- v_drcr := r.mtran_dc;
    -- v_count := 0;
    -- v_count := v_count + 1;

    -- BEGIN
    -- fms_cheques_pkg.append_chq_trans (v_count,
    -- r.balance,
    -- nvl(v_premType,'MDP')||'_PAYMENT',
    -- v_crt_acc_no,
    -- v_org_code,
    -- r.mtran_brn_code,
    -- v_drcr,
    -- v_chq_dtls_rec
    -- );
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error appending chq trans for'||nvl(v_premType,'MDP')||'_PAYMENT'||'...');
    -- END;
    -- -----append a cheque transaction for tax amts(rein and prem taxes)

    -- IF NVL (r.mtran_extras, 0) != 0 THEN
    -- v_count := v_count + 1;
    -- BEGIN
    -- gin_interfaces_pkg.get_gl_acct_code
    -- ('UT', --v_trnt_type IN VARCHAR2,
    -- NULL, --v_scl_code IN NUMBER ******************CHECK,
    -- 'U', -- v_app_lvl IN VARCHAR2,
    -- 'UT', -- v_btr_trans_code IN VARCHAR2,
    -- NULL,
    -- -- v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    -- v_trnt_code, -- v_trnt_code OUT VARCHAR2,
    -- v_trnt_gl_code, -- v_trnt_gl_code OUT VARCHAR2,
    -- v_trnt_contra_gl_code
    -- -- v_trnt_contra_gl_code OUT VARCHAR2
    -- );

    -- SELECT DECODE(v_drcr,'D','C','D') INTO v_side FROM DUAL;

    -- gin_interfaces_pkg.valid_acc (v_trnt_gl_code, v_org_code, r.mtran_brn_code );

    -- fms_cheques_pkg.append_chq_trans (v_count,
    -- ABS( r.mtran_extras),
    -- nvl(v_premType,'MDP')||'_TAXES',
    -- v_trnt_gl_code,
    -- v_org_code,
    -- r.mtran_brn_code,
    -- v_side,
    -- v_chq_dtls_rec
    -- );
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error appending chq trans for '|| nvl(v_premType,'MDP')||'_TAXES'||'...');
    -- END;
    -- END IF;


    -- IF v_count != 0
    -- THEN
    -- v_sys_code := fms_interfaces_pkg.systemcode ('GIS');
    -- v_cur_code :=r.mtran_cur_code;
    -- fms_interfaces_pkg.trans_bct ('PYMT',
    -- v_sys_code,
    -- r.mtran_brn_code,
    -- v_cur_code,
    -- v_bank_code,
    -- v_bank_branch_code
    -- );
    -- v_auth_by := fms_interfaces_pkg.get_usercode (v_user);
    -- v_req_by := fms_interfaces_pkg.get_usercode (v_user);
    -- --v_agn_name := r.agn_name;
    -- v_brh_code := r.mtran_brn_code;
    -- DBMS_OUTPUT.put_line ('R.MTRAN_PAYEE==' || r.mtran_payee);

    -- BEGIN
    -- ---added by olson to cater for EFTS

    -- fms_cheques_pkg.create_reqn
    -- (v_sys_code, -- v_cqr_source,
    -- nvl(v_premType,'MDP')||'/' || v_mtran_no, -- v_cqr_ref, ref1
    -- NULL, -- v_cqr_ref2, OR ANY OTHER REF
    -- TRUNC (SYSDATE), -- v_cqr_ref_date,
    -- v_narrative, -- v_cqr_narrative,
    -- r.mtran_brn_code, -- v_cqr_brh_code,
    -- v_bank_branch_code, -- v_cqr_bct_brh_code,
    -- r.amount, -- v_cqr_amount,
    -- r.mtran_payee, -- v_cqr_payee,
    -- 'CHQ', -- v_cqr_pay_method,
    -- v_bank_code, -- v_cqr_pay_bnk_acc_no,
    -- v_bank_branch_code, -- v_cqr_pay_bnk_branch_code,
    -- v_cur_code, -- v_cqr_cur_code,
    -- v_bank_code, -- v_cqr_bct_code,
    -- v_auth_by, -- v_cqr_source_auth_by,
    -- TRUNC (SYSDATE), -- v_cqr_source_auth_dt,
    -- v_req_by, -- v_cqr_req_by,
    -- nvl(v_premType,'MDP'), -- v_cqr_pmt_type,
    -- v_chq_dtls_rec,
    -- v_mtran_no
    -- );
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('PAYMENT CREATE_CHQ_REQN...');
    -- END;

    -- DBMS_OUTPUT.put_line ('cheque created========');
    -- END IF;

    -- ELSE IF v_pay_method IN ('EFT', 'RTGS') THEN

    -- IF gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code, 6) IS NOT NULL THEN
    -- v_eft_enabled := gin_interfaces_pkg.account_enabled ( gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code, 6));
    -- v_bnk_account := gin_interfaces_pkg.bnk_account (r.mtran_client_code, 6);
    -- v_bnk_bbr_code := tqc_interfaces_pkg.bank_ref(gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code, 6));
    -- v_bnk_bbr_pk:=gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code, 6);
    -- END IF;
    -- v_rec_count_eft := v_rec_count_eft + 1;
    -- Fms_Cheques_Pkg.append_eft_payees (
    -- v_rec_count_eft, --v_no NUMBER,
    -- v_mtran_no, --v_ref1 VARCHAR2,
    -- NVL ( r.amount , 0),--ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount NUMBER,
    -- r.mtran_payee, --v_narrative VARCHAR2,
    -- v_bnk_bbr_code, --v_ref_code,--v_bbr_ref_code VARCHAR2,
    -- v_bnk_account, --v_bnk_account VARCHAR2,
    -- r.mtran_ref_no, --v_ref2 VARCHAR2,
    -- v_payee_eft_dtls);

    -- Fms_Cheques_Pkg.append_chq_trans (v_rec_count_eft,
    -- NVL ( r.amount , 0),
    -- 'MDP PAYMENT AMT '||v_pay_method, --narrative,
    -- v_trnt_gl_code, -- crt_acc_number
    -- v_org_code, --crt_acc_org_code ,
    -- r.mtran_brn_code,
    -- 'D', --v_dr_cr,
    -- v_chq_dtls_rec,
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL
    -- );
    -- END IF;
    -- END IF;
    -- END IF;
    -- END LOOP;
    ---- EXCEPTION
    ---- WHEN OTHERS
    ---- THEN
    ---- raise_error ('Error posting GIS payment...' || SQLERRM);
    -- END process_mdp_payments;

    -- /****************END*******************/
    --PROCEDURE process_mdp_payments (v_user IN VARCHAR2, v_mtran_no IN NUMBER,v_premType IN VARCHAR2, vpaymethod IN VARCHAR2)
    -- IS
    -- --get payment transaction from gin_master_transactions
    -- CURSOR c_payment
    -- IS
    -- SELECT mtran_no, mtran_date, mtran_ref_no, mtran_other_ref,
    -- mtran_tran_type, mtran_dc, mtran_control_acc,
    -- mtran_client_type, mtran_client_code, MTRAN_AMOUNT amount,
    -- MTRAN_BALANCE BALANCE,mtran_net_amt,
    -- mtran_pol_batch_no, mtran_narrations, mtran_prp_code,
    -- mtran_ggt_tran_no, mtran_posting_date, mtran_brn_code,
    -- mtran_brn_sht_desc, mtran_payee, mtran_alloc_inc_comm,
    -- mtran_alloc_mtran_no,mtran_cur_code,mtran_extras
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_mtran_no
    -- AND mtran_authorised = 'P'
    -- AND mtran_btr_trans_code = nvl(v_premType,'MDP'); ---PAYMENT TRANSACTIONS FILTER

    -- v_org_code NUMBER;
    -- v_crt_acc_no VARCHAR2 (20);
    -- v_sys_code NUMBER;
    -- v_bct_code NUMBER;
    -- v_bct_brh_code NUMBER;
    -- v_chq_dtls_rec fms_cheques_pkg.type_rqn_dtls_table;
    -- v_prod_code NUMBER;
    -- v_trnt_prod_applicable VARCHAR2 (3);
    -- v_trnt_contra_gl_code VARCHAR2 (20);
    -- v_count NUMBER := 0;
    -- v_cont NUMBER := -1;
    -- v_cnt NUMBER := 0;
    -- v_gl_count NUMBER := 0;
    -- v_cur_code NUMBER;
    -- v_brh_code NUMBER;
    -- v_raised_by NUMBER;
    -- v_auth_by NUMBER;
    -- v_req_by NUMBER;
    -- v_trnt_code VARCHAR2 (10);
    -- v_gl_trans fms_vouchers_pkg.tgl_rec_type;
    -- v_gl_acc VARCHAR2 (20);
    -- v_gl_acc2 VARCHAR2 (20);
    -- v_vgl_no NUMBER;
    -- v_contra_gl_code VARCHAR2 (20);
    -- v_ppt_id NUMBER;
    -- v_narrative VARCHAR2 (100);
    -- v_drcr VARCHAR2 (2);
    -- v_trans_code NUMBER;
    -- v_agn_name VARCHAR (30);
    -- v_bank_code NUMBER;
    -- v_bank_branch_code NUMBER;
    -- v_ref NUMBER;
    -- v_ref2 NUMBER;
    -- v_ref_date DATE;
    -- v_payee VARCHAR2 (150);
    -- v_pay_method VARCHAR2 (5);
    -- v_payee_bank_acc_no NUMBER;
    -- v_payee_bank_branch_code NUMBER;
    -- v_tot_cnt NUMBER;
    -- v_user_code NUMBER;
    -- v_brh_name VARCHAR2 (150);
    -- v_trnt_gl_code VARCHAR2 (20);
    -- v_side VARCHAR2 (20);
    -- v_rec_count_eft number :=0;
    -- v_payee_eft_dtls Fms_Cheques_Pkg.type_payee_eft_table;
    -- v_eft_enabled VARCHAR2 (1);
    -- v_bnk_account VARCHAR2 (30);
    -- v_bnk_bbr_code VARCHAR2 (30);
    -- v_bnk_bbr_pk NUMBER;
    -- v_sl_rqn_dtls fms_cheques_pkg.type_sl_rqn_dtls_table;
    -- v_cqr_bnk_dtls fms_cheques_pkg.type_bnk_dtls_table;
    --
    -- BEGIN
    ---- RAISE_ERROR('vpaymethod='||vpaymethod||'v_premType='||v_premType||'v_mtran_no='||v_mtran_no);
    -- BEGIN
    -- SELECT COUNT (1)
    -- INTO v_tot_cnt
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_mtran_no
    -- AND mtran_authorised = 'P'
    -- AND mtran_btr_trans_code = nvl(v_premType,'MDP');
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Unable to count payment records...');
    -- END;

    -- IF NVL (v_tot_cnt, 0) = 0
    -- THEN
    -- raise_error ('No payments to authorise..');
    -- END IF;

    -- BEGIN
    -- SELECT usr_code
    -- INTO v_user_code
    -- FROM tqc_users
    -- WHERE usr_username = v_user;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error fetching user code for current system user');
    -- END;

    -- FOR r IN c_payment
    -- LOOP
    -- v_org_code := fms_interfaces_pkg.get_org (r.mtran_brn_code);

    -- IF ABS (NVL(r.amount,0)) > 0
    -- THEN
    -- ----ADDED TO CATER FOR EFTS
    -- v_sys_code := fms_interfaces_pkg.systemcode ('GIS');
    -- v_cur_code :=r.mtran_cur_code;
    -- begin
    -- fms_interfaces_pkg.trans_bct ('PYMT',
    -- v_sys_code,
    -- r.mtran_brn_code,
    -- v_cur_code,
    -- v_bank_code,
    -- v_bank_branch_code
    -- );
    ---- exception when others then
    ---- raise_error('ERROR GETTING BANK DETAILS...');
    -- END;
    --
    --
    -- DBMS_OUTPUT.put_line ('r.amount==' || r.amount);
    ---- raise_error('CLIENT TYPE=='||r.mtran_client_type);
    -- v_crt_acc_no := fms_interfaces_pkg.sl_control_acc ('GIS', r.mtran_client_type);
    --
    -- gin_interfaces_pkg.valid_acc (v_crt_acc_no, v_org_code, r.mtran_brn_code );
    -- DBMS_OUTPUT.put_line ('r.amount==' || r.mtran_ref_no);
    -- v_narrative := 'GIS '||nvl(v_premType,'MDP')||' Payment for ' || r.mtran_ref_no;
    -- v_drcr := r.mtran_dc;
    -- v_count := 0;
    -- v_count := v_count + 1;
    -- v_auth_by := fms_interfaces_pkg.get_usercode (v_user);
    -- v_req_by := fms_interfaces_pkg.get_usercode (v_user);
    --
    -- IF vpaymethod IN ('CHQ','CR')
    -- THEN
    -- BEGIN
    -- fms_cheques_pkg.append_chq_trans (v_count,
    -- r.balance,
    -- nvl(v_premType,'MDP')||'_PAYMENT',
    -- v_crt_acc_no,
    -- v_org_code,
    -- r.mtran_brn_code,
    -- v_drcr,
    -- v_chq_dtls_rec
    -- );
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error appending chq trans for'||nvl(v_premType,'MDP')||'_PAYMENT'||'...');
    -- END;
    -- -----append a cheque transaction for tax amts(rein and prem taxes)
    -- -- raise_error('ERROR=='||r.mtran_extras);
    -- IF NVL (r.mtran_extras, 0) != 0 THEN
    -- v_count := v_count + 1;
    -- BEGIN
    --
    -- gin_interfaces_pkg.get_gl_acct_code
    -- ('UT', --v_trnt_type IN VARCHAR2,
    -- NULL, --v_scl_code IN NUMBER ******************CHECK,
    -- 'U', -- v_app_lvl IN VARCHAR2,
    -- 'UT', -- v_btr_trans_code IN VARCHAR2,
    -- NULL,
    -- -- v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    -- v_trnt_code, -- v_trnt_code OUT VARCHAR2,
    -- v_trnt_gl_code, -- v_trnt_gl_code OUT VARCHAR2,
    -- v_trnt_contra_gl_code
    -- -- v_trnt_contra_gl_code OUT VARCHAR2
    -- );
    --
    -- SELECT DECODE(v_drcr,'D','C','D') INTO v_side FROM DUAL;
    ---- RAISE_ERROR('v_trnt_gl_code'||v_trnt_gl_code) ;
    -- gin_interfaces_pkg.valid_acc (v_trnt_gl_code, v_org_code, r.mtran_brn_code );
    --
    -- fms_cheques_pkg.append_chq_trans (v_count,
    -- ABS( r.mtran_extras),
    -- nvl(v_premType,'MDP')||'_TAXES',
    -- v_trnt_gl_code,
    -- v_org_code,
    -- r.mtran_brn_code,
    -- v_side,
    -- v_chq_dtls_rec
    -- );
    ---- EXCEPTION
    ---- WHEN OTHERS
    ---- THEN
    ---- raise_error ('Error appending chq trans for '|| nvl(v_premType,'MDP')||'_TAXES'||'...');
    -- END;
    -- END IF;
    --
    --
    -- IF v_count != 0
    -- THEN
    -- --v_agn_name := r.agn_name;
    -- v_brh_code := r.mtran_brn_code;
    -- DBMS_OUTPUT.put_line ('R.MTRAN_PAYEE==' || r.mtran_payee);

    -- BEGIN
    -- ---added by olson to cater for EFTS
    -- --raise_error('r.amount=='||r.BALANCE);
    -- fms_cheques_pkg.create_reqn
    -- (v_sys_code, -- v_cqr_source,
    -- nvl(v_premType,'MDP')||'/' || v_mtran_no, -- v_cqr_ref, ref1
    -- NULL, -- v_cqr_ref2, OR ANY OTHER REF
    -- TRUNC (SYSDATE), -- v_cqr_ref_date,
    -- v_narrative, -- v_cqr_narrative,
    -- r.mtran_brn_code, -- v_cqr_brh_code,
    -- v_bank_branch_code, -- v_cqr_bct_brh_code,
    -- --r.amount, -- v_cqr_amount,
    -- r.amount,
    -- r.mtran_payee, -- v_cqr_payee,
    -- 'CHQ', -- v_cqr_pay_method,
    -- v_bank_code, -- v_cqr_pay_bnk_acc_no,
    -- v_bank_branch_code, -- v_cqr_pay_bnk_branch_code,
    -- v_cur_code, -- v_cqr_cur_code,
    -- v_bank_code, -- v_cqr_bct_code,
    -- v_auth_by, -- v_cqr_source_auth_by,
    -- TRUNC (SYSDATE), -- v_cqr_source_auth_dt,
    -- v_req_by, -- v_cqr_req_by,
    -- nvl(v_premType,'MDP'), -- v_cqr_pmt_type,
    -- v_chq_dtls_rec,
    -- v_mtran_no,
    -- ---------------------------------------------------------------------------,
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- v_cqr_bnk_dtls,
    -- 'N',
    --
    -- ---------------------------------------------------------------
    -- NULL,
    -- NULL,
    -- NULL,
    -- 'N',
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- v_sl_rqn_dtls
    -- );
    ---- EXCEPTION
    ---- WHEN OTHERS
    ---- THEN
    ---- raise_error ('PAYMENT CREATE_CHQ_REQN...');
    -- END;

    -- DBMS_OUTPUT.put_line ('cheque created========');
    -- END IF;
    --
    -- ELSE IF vpaymethod IN ('EFT', 'RTGS') THEN
    --
    --
    -- IF gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code, 6) IS NOT NULL THEN
    -- v_eft_enabled := gin_interfaces_pkg.account_enabled ( gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code, 6));
    -- v_bnk_account := gin_interfaces_pkg.bnk_account (r.mtran_client_code, 6);
    -- v_bnk_bbr_code := tqc_interfaces_pkg.bank_ref(gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code, 6));
    -- v_bnk_bbr_pk:=gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code, 6);
    -- END IF;
    -- v_rec_count_eft := v_rec_count_eft + 1;
    -- BEGIN
    --
    -- Fms_Cheques_Pkg.append_eft_payees (
    -- v_rec_count_eft, --v_no NUMBER,
    -- v_mtran_no, --v_ref1 VARCHAR2,
    -- NVL ( r.amount , 0),--ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount NUMBER,
    -- r.mtran_payee, --v_narrative VARCHAR2,
    -- v_bnk_bbr_code, --v_ref_code,--v_bbr_ref_code VARCHAR2,
    -- v_bnk_account, --v_bnk_account VARCHAR2,
    -- r.mtran_ref_no, --v_ref2 VARCHAR2,
    -- v_payee_eft_dtls);
    ---- EXCEPTION
    ---- WHEN OTHERS
    ---- THEN
    ---- raise_error ('ERROR PAYMENT APPENDING EFT PAYMENT...');
    -- END;
    --
    -- BEGIN
    --
    -- --RAISE_ERROR('v_trnt_gl_code='||v_trnt_gl_code||'v_org_code='||v_org_code||'mtran_brn_code='||r.mtran_brn_code||'v_eft_enabled=='||v_eft_enabled||'v_bnk_bbr_pk='||v_bnk_bbr_pk);
    -- Fms_Cheques_Pkg.append_chq_trans (v_rec_count_eft,
    -- NVL ( r.amount , 0),
    -- 'MDP PAYMENT AMT '||vpaymethod, --narrative,
    -- v_crt_acc_no, -- crt_acc_number
    -- v_org_code, --crt_acc_org_code ,
    -- r.mtran_brn_code,
    -- 'D', --v_dr_cr,
    -- v_chq_dtls_rec,
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL
    -- );
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('ERROR PAYMENT APPENDING CHEQUE...');
    -- END;
    --
    -- BEGIN
    -- ---added by olson to cater for EFTS
    -- -- raise_error('v_bank_branch_code=='||v_bank_branch_code||'mtran_brn_code='||r.mtran_brn_code);
    -- fms_cheques_pkg.create_reqn
    -- (v_sys_code, -- v_cqr_source,
    -- nvl(v_premType,'MDP')||'/' || v_mtran_no, -- v_cqr_ref, ref1
    -- NULL, -- v_cqr_ref2, OR ANY OTHER REF
    -- TRUNC (SYSDATE), -- v_cqr_ref_date,
    -- v_narrative, -- v_cqr_narrative,
    -- r.mtran_brn_code, -- v_cqr_brh_code,
    -- v_bank_branch_code, -- v_cqr_bct_brh_code,
    -- --r.amount, -- v_cqr_amount,
    -- r.amount,
    -- r.mtran_payee, -- v_cqr_payee,
    -- 'EFT', -- v_cqr_pay_method,
    -- v_bank_code, -- v_cqr_pay_bnk_acc_no,
    -- v_bank_branch_code, -- v_cqr_pay_bnk_branch_code,
    -- v_cur_code, -- v_cqr_cur_code,
    -- v_bank_code, -- v_cqr_bct_code,
    -- v_auth_by, -- v_cqr_source_auth_by,
    -- TRUNC (SYSDATE), -- v_cqr_source_auth_dt,
    -- v_req_by, -- v_cqr_req_by,
    -- nvl(v_premType,'MDP'), -- v_cqr_pmt_type,
    -- v_chq_dtls_rec,
    -- --v_mtran_no
    -- -------------------------------------------------------------------
    -- v_payee_eft_dtls,
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- v_bank_code, --v_bnk_bbr_code,
    -- v_bnk_account,
    -- NULL,
    -- 'N',
    --
    -- ---------------------------------------------------------------
    -- NULL,
    -- NULL,
    -- NULL,
    -- 'N',
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- v_sl_rqn_dtls
    -- );
    --
    --
    ---- EXCEPTION
    ---- WHEN OTHERS
    ---- THEN
    ---- raise_error ('PAYMENT CREATE_CHQ_REQN...');
    -- END;

    -- DBMS_OUTPUT.put_line ('cheque created========');
    -- END IF;
    -- END IF;
    -- END IF;
    -- END LOOP;
    ---- EXCEPTION
    ---- WHEN OTHERS
    ---- THEN
    ---- raise_error ('Error posting GIS payment...' || SQLERRM);
    -- END process_mdp_payments;

    --   PROCEDURE process_mdp_payments (v_user       IN VARCHAR2,
    --                                   v_mtran_no   IN NUMBER,
    --                                   v_premType   IN VARCHAR2,
    --                                   vpaymethod   IN VARCHAR2)
    --   IS
    --      --get payment transaction from gin_master_transactions
    --      CURSOR c_payment
    --      IS
    --         SELECT mtran_no,
    --                mtran_date,
    --                mtran_ref_no,
    --                mtran_other_ref,
    --                mtran_tran_type,
    --                mtran_dc,
    --                mtran_control_acc,
    --                mtran_client_type,
    --                mtran_client_code,
    --                MTRAN_AMOUNT amount,
    --                MTRAN_BALANCE BALANCE,
    --                mtran_net_amt,
    --                mtran_pol_batch_no,
    --                mtran_narrations,
    --                mtran_prp_code,
    --                mtran_ggt_tran_no,
    --                mtran_posting_date,
    --                mtran_brn_code,
    --                mtran_brn_sht_desc,
    --                mtran_payee,
    --                mtran_alloc_inc_comm,
    --                mtran_alloc_mtran_no,
    --                mtran_cur_code,
    --                mtran_extras,
    --                mtran_cur_rate,
    --                xppd_gl_account
    --           FROM gin_master_transactions, gin_xol_prem_payment_dtls
    --          WHERE     mtran_no = v_mtran_no
    --                AND mtran_authorised = 'P'
    --                AND REGEXP_REPLACE (mtran_ref_no, '[^0-9]') = xppd_code
    --                AND mtran_client_code = xppd_agnt_agent_code
    --                AND mtran_btr_trans_code = NVL (v_premType, 'MDP'); ---PAYMENT TRANSACTIONS FILTER
    --
    --      v_org_code                 NUMBER;
    --      v_crt_acc_no               VARCHAR2 (20);
    --      v_sys_code                 NUMBER;
    --      v_bct_code                 NUMBER;
    --      v_bct_brh_code             NUMBER;
    --      v_chq_dtls_rec             fms_cheques_pkg.type_rqn_dtls_table;
    --      v_prod_code                NUMBER;
    --      v_trnt_prod_applicable     VARCHAR2 (3);
    --      v_trnt_contra_gl_code      VARCHAR2 (20);
    --      v_count                    NUMBER := 0;
    --      v_cont                     NUMBER := -1;
    --      v_cnt                      NUMBER := 0;
    --      v_gl_count                 NUMBER := 0;
    --      v_cur_code                 NUMBER;
    --      v_brh_code                 NUMBER;
    --      v_raised_by                NUMBER;
    --      v_auth_by                  NUMBER;
    --      v_req_by                   NUMBER;
    --      v_trnt_code                VARCHAR2 (10);
    --      v_gl_trans                 fms_vouchers_pkg.tgl_rec_type;
    --      v_gl_acc                   VARCHAR2 (20);
    --      v_gl_acc2                  VARCHAR2 (20);
    --      v_vgl_no                   NUMBER;
    --      v_contra_gl_code           VARCHAR2 (20);
    --      v_ppt_id                   NUMBER;
    --      v_narrative                VARCHAR2 (100);
    --      v_drcr                     VARCHAR2 (2);
    --      v_trans_code               NUMBER;
    --      v_agn_name                 VARCHAR (30);
    --      v_bank_code                NUMBER;
    --      v_bank_branch_code         NUMBER;
    --      v_ref                      NUMBER;
    --      v_ref2                     NUMBER;
    --      v_ref_date                 DATE;
    --      v_payee                    VARCHAR2 (150);
    --      v_pay_method               VARCHAR2 (5);
    --      v_payee_bank_acc_no        NUMBER;
    --      v_payee_bank_branch_code   NUMBER;
    --      v_tot_cnt                  NUMBER;
    --      v_user_code                NUMBER;
    --      v_brh_name                 VARCHAR2 (150);
    --      v_trnt_gl_code             VARCHAR2 (20);
    --      v_side                     VARCHAR2 (20);
    --      v_rec_count_eft            NUMBER := 0;
    --      v_payee_eft_dtls           Fms_Cheques_Pkg.type_payee_eft_table;
    --      v_eft_enabled              VARCHAR2 (1);
    --      v_bnk_account              VARCHAR2 (30);
    --      v_bnk_bbr_code             VARCHAR2 (30);
    --      v_bnk_bbr_pk               NUMBER;
    --      v_sl_rqn_dtls              fms_cheques_pkg.type_sl_rqn_dtls_table;
    --      v_cqr_bnk_dtls             fms_cheques_pkg.type_bnk_dtls_table;
    --   BEGIN
    --      BEGIN
    --         SELECT COUNT (1)
    --           INTO v_tot_cnt
    --           FROM gin_master_transactions
    --          WHERE     mtran_no = v_mtran_no
    --                AND mtran_authorised = 'P'
    --                AND mtran_btr_trans_code = NVL (v_premType, 'MDP');
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Unable to count payment records...');
    --      END;
    --
    --      IF NVL (v_tot_cnt, 0) = 0
    --      THEN
    --         raise_error ('No payments to authorise..');
    --      END IF;
    --
    --      BEGIN
    --         SELECT usr_code
    --           INTO v_user_code
    --           FROM tqc_users
    --          WHERE usr_username = v_user;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching user code for current system user');
    --      END;
    --
    --      FOR r IN c_payment
    --      LOOP
    --         --RAISE_ERROR('vpaymethod='||vpaymethod||'v_premType='||v_premType||'v_mtran_no='||v_mtran_no);
    --         v_org_code := fms_interfaces_pkg.get_org (r.mtran_brn_code);
    --
    --         IF ABS (NVL (r.amount, 0)) > 0
    --         THEN
    --            ----ADDED TO CATER FOR EFTS
    --            v_sys_code := fms_interfaces_pkg.systemcode ('GIS');
    --            v_cur_code := r.mtran_cur_code;
    --
    --            BEGIN
    --               fms_interfaces_pkg.trans_bct ('PYMT',
    --                                             v_sys_code,
    --                                             r.mtran_brn_code,
    --                                             v_cur_code,
    --                                             v_bank_code,
    --                                             v_bank_branch_code,
    --                                             vpaymethod);
    --            -- exception when others then
    --            -- raise_error('ERROR GETTING BANK DETAILS...');
    --            END;
    --
    --
    --            DBMS_OUTPUT.put_line ('r.amount==' || r.amount);
    --
    --            -- raise_error('CLIENT TYPE=='||r.mtran_client_type);
    --            IF r.xppd_gl_account IS NOT NULL
    --            THEN
    --               v_crt_acc_no := r.xppd_gl_account;
    --            ELSE
    --               RAISE_ERROR ('Error fetching gl for participant...');
    --            END IF;
    --
    --            -- v_crt_acc_no := fms_interfaces_pkg.sl_control_acc ('GIS', r.mtran_client_type);
    --
    --            gin_interfaces_pkg.valid_acc (v_crt_acc_no,
    --                                          v_org_code,
    --                                          r.mtran_brn_code);
    --            DBMS_OUTPUT.put_line ('r.amount==' || r.mtran_ref_no);
    --            -- v_narrative := 'GIS '||nvl(v_premType,'MDP')||' Payment for ' || r.mtran_ref_no;
    --            v_narrative := r.mtran_narrations;
    --            v_drcr := r.mtran_dc;
    --            v_count := 0;
    --            v_count := v_count + 1;
    --            v_auth_by := fms_interfaces_pkg.get_usercode (v_user);
    --            v_req_by := fms_interfaces_pkg.get_usercode (v_user);
    --
    --            IF vpaymethod IN ('CHQ', 'CR')
    --            THEN
    --               BEGIN
    --                  fms_cheques_pkg.append_chq_trans (
    --                     v_count,
    --                     r.balance,
    --                     NVL (v_premType, 'MDP') || '_PAYMENT',
    --                     v_crt_acc_no,
    --                     v_org_code,
    --                     r.mtran_brn_code,
    --                     v_drcr,
    --                     v_chq_dtls_rec);
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (
    --                           'Error appending chq trans for'
    --                        || NVL (v_premType, 'MDP')
    --                        || '_PAYMENT'
    --                        || '...');
    --               END;
    --
    --               -----append a cheque transaction for tax amts(rein and prem taxes)
    --               -- raise_error('ERROR=='||r.mtran_extras);
    --               IF NVL (r.mtran_extras, 0) != 0
    --               THEN
    --                  v_count := v_count + 1;
    --
    --                  BEGIN
    --                     gin_interfaces_pkg.get_gl_acct_code (
    --                        'WTHTX5',                   --v_trnt_type IN VARCHAR2,
    --                        NULL,  --v_scl_code IN NUMBER ******************CHECK,
    --                        'U',                         -- v_app_lvl IN VARCHAR2,
    --                        'UT ',                -- v_btr_trans_code IN VARCHAR2,
    --                        NULL,
    --                        -- v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                        v_trnt_code,              -- v_trnt_code OUT VARCHAR2,
    --                        v_trnt_gl_code,        -- v_trnt_gl_code OUT VARCHAR2,
    --                        v_trnt_contra_gl_code -- v_trnt_contra_gl_code OUT VARCHAR2
    --                                             );
    --
    --                     SELECT DECODE (v_drcr, 'D', 'C', 'D')
    --                       INTO v_side
    --                       FROM DUAL;
    --
    --                     -- RAISE_ERROR('v_trnt_gl_code'||v_trnt_gl_code) ;
    --                     gin_interfaces_pkg.valid_acc (v_trnt_gl_code,
    --                                                   v_org_code,
    --                                                   r.mtran_brn_code);
    --
    --                     fms_cheques_pkg.append_chq_trans (
    --                        v_count,
    --                        ABS (r.mtran_extras),
    --                        NVL (v_premType, 'MDP') || '_TAXES',
    --                        v_trnt_gl_code,
    --                        v_org_code,
    --                        r.mtran_brn_code,
    --                        v_side,
    --                        v_chq_dtls_rec);
    --                  -- EXCEPTION
    --                  -- WHEN OTHERS
    --                  -- THEN
    --                  -- raise_error ('Error appending chq trans for '|| nvl(v_premType,'MDP')||'_TAXES'||'...');
    --                  END;
    --               END IF;
    --
    --
    --               IF v_count != 0
    --               THEN
    --                  --v_agn_name := r.agn_name;
    --                  v_brh_code := r.mtran_brn_code;
    --                  DBMS_OUTPUT.put_line ('R.MTRAN_PAYEE==' || r.mtran_payee);
    --
    --                  BEGIN
    --                     ---added by olson to cater for EFTS
    --                     --raise_error('r.amount=='||r.BALANCE);
    --                     FMS_INTERFACES_PKG.create_Chq_reqn (
    --                        v_sys_code,                           -- v_cqr_source,
    --                        NVL (v_premType, 'MDP') || '/' || v_mtran_no, -- v_cqr_ref, ref1
    --                        NULL,                  -- v_cqr_ref2, OR ANY OTHER REF
    --                        TRUNC (SYSDATE),                    -- v_cqr_ref_date,
    --                        v_narrative,                       -- v_cqr_narrative,
    --                        r.mtran_brn_code,                   -- v_cqr_brh_code,
    --                        v_bank_branch_code,             -- v_cqr_bct_brh_code,
    --                        r.amount,
    --                        r.mtran_payee,                         -- v_cqr_payee,
    --                        'CHQ',                            -- v_cqr_pay_method,
    --                        v_cur_code,                         -- v_cqr_cur_code,
    --                        r.mtran_cur_rate,                         --v_cur_rate
    --                        v_bank_code,                        -- v_cqr_bct_code,
    --                        v_auth_by,                    -- v_cqr_source_auth_by,
    --                        TRUNC (SYSDATE),              -- v_cqr_source_auth_dt,
    --                        v_req_by,                             -- v_cqr_req_by,
    --                        NVL (v_premType, 'MDP'),            -- v_cqr_pmt_type,
    --                        v_chq_dtls_rec,
    --                        v_mtran_no,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL);
    --                  -- EXCEPTION
    --                  -- WHEN OTHERS
    --                  -- THEN
    --                  -- raise_error ('PAYMENT CREATE_CHQ_REQN...');
    --                  END;
    --
    --                  DBMS_OUTPUT.put_line ('cheque created========');
    --               END IF;
    --            ELSE
    --               IF vpaymethod IN ('EFT', 'RTGS')
    --               THEN
    --                  IF gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code, 6)
    --                        IS NOT NULL
    --                  THEN
    --                     v_eft_enabled :=
    --                        gin_interfaces_pkg.account_enabled (
    --                           gin_interfaces_pkg.bnk_bbr_code (
    --                              r.mtran_client_code,
    --                              6));
    --                     v_bnk_account :=
    --                        gin_interfaces_pkg.bnk_account (r.mtran_client_code,
    --                                                        6);
    --                     v_bnk_bbr_code :=
    --                        tqc_interfaces_pkg.bank_ref (
    --                           gin_interfaces_pkg.bnk_bbr_code (
    --                              r.mtran_client_code,
    --                              6));
    --                     v_bnk_bbr_pk :=
    --                        gin_interfaces_pkg.bnk_bbr_code (r.mtran_client_code,
    --                                                         6);
    --                  END IF;
    --
    --                  --RAISE_ERROR('v_bnk_account'||v_bnk_account);
    --                  v_rec_count_eft := v_rec_count_eft + 1;
    --
    --                  BEGIN
    --                     Fms_Cheques_Pkg.append_eft_payees (v_rec_count_eft, --v_no NUMBER,
    --                                                        v_mtran_no, --v_ref1 VARCHAR2,
    --                                                        NVL (r.amount, 0), --ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount NUMBER,
    --                                                        r.mtran_payee, --v_narrative VARCHAR2,
    --                                                        v_bnk_bbr_code, --v_ref_code,--v_bbr_ref_code VARCHAR2,
    --                                                        v_bnk_account, --v_bnk_account VARCHAR2,
    --                                                        r.mtran_ref_no, --v_ref2 VARCHAR2,
    --                                                        v_payee_eft_dtls);
    --                  -- EXCEPTION
    --                  -- WHEN OTHERS
    --                  -- THEN
    --                  -- raise_error ('ERROR PAYMENT APPENDING EFT PAYMENT...');
    --                  END;
    --
    --                  BEGIN
    --                     --RAISE_ERROR('v_trnt_gl_code='||v_trnt_gl_code||'v_org_code='||v_org_code||'mtran_brn_code='||r.mtran_brn_code||'v_eft_enabled=='||v_eft_enabled||'v_bnk_bbr_pk='||v_bnk_bbr_pk);
    --                     Fms_Cheques_Pkg.append_chq_trans (
    --                        v_rec_count_eft,
    --                        NVL (r.amount, 0),
    --                        'MDP PAYMENT AMT ' || vpaymethod,         --narrative,
    --                        v_crt_acc_no,                        -- crt_acc_number
    --                        v_org_code,                       --crt_acc_org_code ,
    --                        r.mtran_brn_code,
    --                        'D',                                        --v_dr_cr,
    --                        v_chq_dtls_rec,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL);
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('ERROR PAYMENT APPENDING CHEQUE...');
    --                  END;
    --
    --                  BEGIN
    --                     ---added by olson to cater for EFTS
    --                     --raise_error('v_bank_branch_code=='||v_bank_branch_code||'mtran_brn_code='||r.mtran_brn_code||' v_bnk_account '||v_bnk_account);
    --                     FMS_INTERFACES_PKG.create_EftRtgs_reqn (
    --                        v_sys_code,                           -- v_cqr_source,
    --                        NVL (v_premType, 'MDP') || '/' || v_mtran_no, -- v_cqr_ref, ref1
    --                        NULL,                  -- v_cqr_ref2, OR ANY OTHER REF
    --                        TRUNC (SYSDATE),                    -- v_cqr_ref_date,
    --                        v_narrative,                       -- v_cqr_narrative,
    --                        r.mtran_brn_code,                   -- v_cqr_brh_code,
    --                        v_bank_branch_code,             -- v_cqr_bct_brh_code,
    --                        r.amount,
    --                        r.mtran_payee,                         -- v_cqr_payee,
    --                        'EFT',                            -- v_cqr_pay_method,
    --                        v_cur_code,                         -- v_cqr_cur_code,
    --                        r.mtran_cur_rate,                         --v_cur_rate
    --                        v_bank_code,                        -- v_cqr_bct_code,
    --                        v_auth_by,                    -- v_cqr_source_auth_by,
    --                        TRUNC (SYSDATE),              -- v_cqr_source_auth_dt,
    --                        v_req_by,                             -- v_cqr_req_by,
    --                        NVL (v_premType, 'MDP'),            -- v_cqr_pmt_type,
    --                        v_bank_branch_code,      -- v_cqr_pay_bnk_branch_code,
    --                        v_bnk_account,
    --                        v_chq_dtls_rec,
    --                        v_payee_eft_dtls,
    --                        v_bank_code,                        -- v_cqr_bct_code,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL,
    --                        NULL);
    --                  -- EXCEPTION
    --                  -- WHEN OTHERS
    --                  -- THEN
    --                  -- raise_error ('PAYMENT CREATE_CHQ_REQN...');
    --                  END;
    --
    --                  DBMS_OUTPUT.put_line ('cheque created========');
    --               END IF;
    --            END IF;
    --         END IF;
    --      END LOOP;
    --   -- RAISE_ERROR('AUTHROIZE HERE');
    --   -- EXCEPTION
    --   -- WHEN OTHERS
    --   -- THEN
    --   -- raise_error ('Error posting GIS payment...' || SQLERRM);
    --   END process_mdp_payments;
    PROCEDURE process_mdp_payments (v_user       IN VARCHAR2,
                                    v_mtran_no   IN NUMBER,
                                    v_premType   IN VARCHAR2,
                                    vpaymethod   IN VARCHAR2)
    IS
        --get payment transaction from gin_master_transactions
        CURSOR c_payment IS
            SELECT mtran_no,
                   mtran_date,
                   mtran_ref_no,
                   mtran_other_ref,
                   mtran_tran_type,
                   mtran_dc,
                   mtran_control_acc,
                   mtran_client_type,
                   mtran_client_code,
                   MTRAN_AMOUNT                     amount,
                   MTRAN_BALANCE                    BALANCE,
                   mtran_net_amt,
                   mtran_pol_batch_no,
                   mtran_narrations,
                   mtran_prp_code,
                   mtran_ggt_tran_no,
                   mtran_posting_date,
                   mtran_brn_code,
                   mtran_brn_sht_desc,
                   mtran_payee,
                   mtran_alloc_inc_comm,
                   mtran_alloc_mtran_no,
                   mtran_cur_code,
                   mtran_extras,
                   mtran_cur_rate,
                   xppd_gl_account,
                   mtran_payee_bbr_code,
                   mtran_pyment_mode,
                   mtran_payee_account,
                   mtran_payee_swift_code,
                   mtran_whtx,
                   ABS (NVL (mtran_balance, 0))     /*-ABS(NVL(mtran_extras,0))*/
                                                    gross_amount
              FROM gin_master_transactions, gin_xol_prem_payment_dtls
             WHERE     mtran_no = v_mtran_no
                   AND mtran_authorised = 'P'
                   AND REGEXP_REPLACE (mtran_ref_no, '[^0-9]') = xppd_code
                   AND mtran_client_code = xppd_agnt_agent_code
                   AND mtran_btr_trans_code = NVL (v_premType, 'MDP'); ---PAYMENT TRANSACTIONS FILTER

        v_org_code                 NUMBER;
        v_crt_acc_no               VARCHAR2 (20);
        v_sys_code                 NUMBER;
        v_bct_code                 NUMBER;
        v_bct_brh_code             NUMBER;
        v_chq_dtls_rec             fms_cheques_pkg.type_rqn_dtls_table;
        v_prod_code                NUMBER;
        v_trnt_prod_applicable     VARCHAR2 (3);
        v_trnt_contra_gl_code      VARCHAR2 (20);
        v_count                    NUMBER := 0;
        v_cont                     NUMBER := -1;
        v_cnt                      NUMBER := 0;
        v_gl_count                 NUMBER := 0;
        v_cur_code                 NUMBER;
        v_brh_code                 NUMBER;
        v_raised_by                NUMBER;
        v_auth_by                  NUMBER;
        v_req_by                   NUMBER;
        v_trnt_code                VARCHAR2 (10);
        v_gl_trans                 fms_vouchers_pkg.tgl_rec_type;
        v_gl_acc                   VARCHAR2 (20);
        v_gl_acc2                  VARCHAR2 (20);
        v_vgl_no                   NUMBER;
        v_contra_gl_code           VARCHAR2 (20);
        v_ppt_id                   NUMBER;
        v_narrative                VARCHAR2 (100);
        v_drcr                     VARCHAR2 (2);
        v_trans_code               NUMBER;
        v_agn_name                 VARCHAR (30);
        v_bank_code                NUMBER;
        v_bank_branch_code         NUMBER;
        v_ref                      NUMBER;
        v_ref2                     NUMBER;
        v_ref_date                 DATE;
        v_payee                    VARCHAR2 (150);
        v_pay_method               VARCHAR2 (5);
        v_payee_bank_acc_no        NUMBER;
        v_payee_bank_branch_code   NUMBER;
        v_tot_cnt                  NUMBER;
        v_user_code                NUMBER;
        v_brh_name                 VARCHAR2 (150);
        v_trnt_gl_code             VARCHAR2 (20);
        v_side                     VARCHAR2 (20);
        v_rec_count_eft            NUMBER := 0;
        v_payee_eft_dtls           Fms_Cheques_Pkg.type_payee_eft_table;
        v_eft_enabled              VARCHAR2 (1);
        v_bnk_account              VARCHAR2 (30);
        v_bnk_bbr_code             VARCHAR2 (30);
        v_bnk_bbr_pk               NUMBER;
        v_sl_rqn_dtls              fms_cheques_pkg.type_sl_rqn_dtls_table;
        v_cqr_bnk_dtls             fms_cheques_pkg.type_bnk_dtls_table;
        v_mtran_ggt_tran_no        NUMBER;
    BEGIN
        BEGIN
            SELECT COUNT (1)
              INTO v_tot_cnt
              FROM gin_master_transactions
             WHERE     mtran_no = v_mtran_no
                   AND mtran_authorised = 'P'
                   AND mtran_btr_trans_code = NVL (v_premType, 'MDP');
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Unable to count payment records...');
        END;
--        RAISE_ERROR('GIS_ACCOUNTS_UTILITIES::LN 11821::v_mtran_no = '||v_mtran_no
--        ||'& v_premType = '||v_premType
--        ||'& v_tot_cnt = '||v_tot_cnt);

        IF NVL (v_tot_cnt, 0) = 0
        THEN
            raise_error ('No payments to authorise..');
        END IF;

        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = v_user;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching user code for current system user');
        END;

        BEGIN
            SELECT mtran_ggt_tran_no
              INTO v_mtran_ggt_tran_no
              FROM gin_master_transactions
             WHERE     mtran_no = v_mtran_no
                   AND mtran_authorised = 'P'
                   AND mtran_btr_trans_code = NVL (v_premType, 'MDP');
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching the unique code for the layer...');
        END;

        --      raise_error('v_user=> '||v_user||' v_mtran_ggt_tran_no=>'||v_mtran_ggt_tran_no);


        FOR r IN c_payment
        LOOP
            --         RAISE_ERROR('r.mtran_ggt_tran_no=> '||r.mtran_ggt_tran_no);
            v_org_code := fms_interfaces_pkg.get_org (r.mtran_brn_code);

            IF ABS (NVL (r.amount, 0)) > 0
            THEN
                ----ADDED TO CATER FOR EFTS
                v_sys_code := fms_interfaces_pkg.systemcode ('GIS');
                v_cur_code := r.mtran_cur_code;

                BEGIN
                    fms_interfaces_pkg.trans_bct ('PYMT',
                                                  v_sys_code,
                                                  r.mtran_brn_code,
                                                  v_cur_code,
                                                  v_bank_code,
                                                  v_bank_branch_code,
                                                  vpaymethod);
                -- exception when others then
                -- raise_error('ERROR GETTING BANK DETAILS...');
                END;


                DBMS_OUTPUT.put_line ('r.amount==' || r.amount);

                -- raise_error('CLIENT TYPE=='||r.mtran_client_type);
                IF r.xppd_gl_account IS NOT NULL
                THEN
                    v_crt_acc_no := r.xppd_gl_account;
                ELSE
                    RAISE_ERROR ('Error fetching gl for participant...');
                END IF;

                -- v_crt_acc_no := fms_interfaces_pkg.sl_control_acc ('GIS', r.mtran_client_type);

                gin_interfaces_pkg.valid_acc (v_crt_acc_no,
                                              v_org_code,
                                              r.mtran_brn_code);
                DBMS_OUTPUT.put_line ('r.amount==' || r.mtran_ref_no);
                -- v_narrative := 'GIS '||nvl(v_premType,'MDP')||' Payment for ' || r.mtran_ref_no;
                v_narrative := r.mtran_narrations;
                v_drcr := r.mtran_dc;
                v_count := 0;
                v_count := v_count + 1;
                v_auth_by := fms_interfaces_pkg.get_usercode (v_user);
                v_req_by := fms_interfaces_pkg.get_usercode (v_user);

                IF vpaymethod IN ('CHQ', 'CR')
                THEN
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_count,
                            r.balance,
                            NVL (v_premType, 'MDP') || '_PAYMENT',
                            v_crt_acc_no,
                            v_org_code,
                            r.mtran_brn_code,
                            v_drcr,
                            v_chq_dtls_rec);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error appending chq trans for'
                                || NVL (v_premType, 'MDP')
                                || '_PAYMENT'
                                || '...');
                    END;

                    -----append a cheque transaction for tax amts(rein and prem taxes)
                    -- raise_error('ERROR=='||r.mtran_extras);
                    IF NVL (r.mtran_whtx, 0) != 0
                    THEN
                        v_count := v_count + 1;

                        BEGIN
                            gin_interfaces_pkg.get_gl_acct_code (
                                'WTHTX5',           --v_trnt_type IN VARCHAR2,
                                NULL, --v_scl_code IN NUMBER ******************CHECK,
                                'FSTSUP',                 -- v_app_lvl IN VARCHAR2,
                                'UC',         -- v_btr_trans_code IN VARCHAR2,
                                NULL,
                                -- v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                v_trnt_code,      -- v_trnt_code OUT VARCHAR2,
                                v_trnt_gl_code, -- v_trnt_gl_code OUT VARCHAR2,
                                v_trnt_contra_gl_code-- v_trnt_contra_gl_code OUT VARCHAR2
                                                     );

                            gin_interfaces_pkg.valid_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          r.mtran_brn_code);
                            fms_cheques_pkg.append_chq_trans (
                                v_count,
                                ABS (r.mtran_whtx),
                                v_premType                      ---v_tran_type
                                           || '_WHTX',
                                v_trnt_gl_code,
                                v_org_code,
                                r.mtran_brn_code,
                                'C',
                                v_chq_dtls_rec);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                       'Error appending chq trans for '
                                    || NVL (v_premType, 'MDP')
                                    || 'WTHTX'
                                    || '...');
                        END;
                    
                    END IF;

                    IF NVL (r.mtran_extras, 0) != 0
                    THEN
                        v_count := v_count + 1;

                        BEGIN
                            gin_interfaces_pkg.get_gl_acct_code (
                                'WTHTX5',           --v_trnt_type IN VARCHAR2,
                                NULL, --v_scl_code IN NUMBER ******************CHECK,
                                'U',                 -- v_app_lvl IN VARCHAR2,
                                'UT ',        -- v_btr_trans_code IN VARCHAR2,
                                NULL,
                                -- v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                v_trnt_code,      -- v_trnt_code OUT VARCHAR2,
                                v_trnt_gl_code, -- v_trnt_gl_code OUT VARCHAR2,
                                v_trnt_contra_gl_code -- v_trnt_contra_gl_code OUT VARCHAR2
                                                     );

                            SELECT DECODE (v_drcr, 'D', 'C', 'D')
                              INTO v_side
                              FROM DUAL;

                            -- RAISE_ERROR('v_trnt_gl_code'||v_trnt_gl_code) ;
                            gin_interfaces_pkg.valid_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          r.mtran_brn_code);

                            fms_cheques_pkg.append_chq_trans (
                                v_count,
                                ABS (r.mtran_extras),
                                NVL (v_premType, 'MDP') || '_TAXES',
                                v_trnt_gl_code,
                                v_org_code,
                                r.mtran_brn_code,
                                v_side,
                                v_chq_dtls_rec);
                        -- EXCEPTION
                        -- WHEN OTHERS
                        -- THEN
                        -- raise_error ('Error appending chq trans for '|| nvl(v_premType,'MDP')||'_TAXES'||'...');
                        END;
                    END IF;


                    IF v_count != 0
                    THEN
                        --v_agn_name := r.agn_name;
                        v_brh_code := r.mtran_brn_code;
                        DBMS_OUTPUT.put_line (
                            'R.MTRAN_PAYEE==' || r.mtran_payee);

                        BEGIN
                            ---added by olson to cater for EFTS
                            --                     raise_error('r.amount== '||r.amount||' r.mtran_ggt_tran_no== '||r.mtran_ggt_tran_no);
                            FMS_INTERFACES_PKG.create_Chq_reqn (
                                v_sys_code,                   -- v_cqr_source,
                                NVL (v_premType, 'MDP') || '/' || v_mtran_no, -- v_cqr_ref, ref1
                                NULL,          -- v_cqr_ref2, OR ANY OTHER REF
                                TRUNC (SYSDATE),            -- v_cqr_ref_date,
                                v_narrative,               -- v_cqr_narrative,
                                r.mtran_brn_code,           -- v_cqr_brh_code,
                                v_bank_branch_code,     -- v_cqr_bct_brh_code,
                                r.amount,
                                r.mtran_payee,                 -- v_cqr_payee,
                                'CHQ',                    -- v_cqr_pay_method,
                                v_cur_code,                 -- v_cqr_cur_code,
                                r.mtran_cur_rate,                 --v_cur_rate
                                v_bank_code,                -- v_cqr_bct_code,
                                v_auth_by,            -- v_cqr_source_auth_by,
                                TRUNC (SYSDATE),      -- v_cqr_source_auth_dt,
                                v_req_by,                     -- v_cqr_req_by,
                                NVL (v_premType, 'MDP'),    -- v_cqr_pmt_type,
                                v_chq_dtls_rec,
                                v_mtran_no,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                r.mtran_ggt_tran_no);
                        -- EXCEPTION
                        -- WHEN OTHERS
                        -- THEN
                        -- raise_error ('PAYMENT CREATE_CHQ_REQN...');
                        END;

                        DBMS_OUTPUT.put_line ('cheque created========');
                    END IF;
                ELSE
                    IF vpaymethod IN ('EFT', 'RTGS')
                    THEN
                        IF gin_interfaces_pkg.bnk_bbr_code (
                               r.mtran_client_code,
                               6)
                               IS NOT NULL
                        THEN
                            v_eft_enabled :=
                                gin_interfaces_pkg.account_enabled (
                                    gin_interfaces_pkg.bnk_bbr_code (
                                        r.mtran_client_code,
                                        6));
                            v_bnk_account :=
                                gin_interfaces_pkg.bnk_account (
                                    r.mtran_client_code,
                                    6);
                            v_bnk_bbr_code :=
                                tqc_interfaces_pkg.bank_ref (
                                    gin_interfaces_pkg.bnk_bbr_code (
                                        r.mtran_client_code,
                                        6));
                            v_bnk_bbr_pk :=
                                gin_interfaces_pkg.bnk_bbr_code (
                                    r.mtran_client_code,
                                    6);
                        END IF;

                        --RAISE_ERROR('v_bnk_account'||v_bnk_account);
                        v_rec_count_eft := v_rec_count_eft + 1;

                        BEGIN
                            Fms_Cheques_Pkg.append_eft_payees (
                                v_rec_count_eft,                --v_no NUMBER,
                                v_mtran_no,                 --v_ref1 VARCHAR2,
                                NVL (r.amount, 0), --ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount NUMBER,
                                r.mtran_payee,         --v_narrative VARCHAR2,
                                v_bnk_bbr_code, --v_ref_code,--v_bbr_ref_code VARCHAR2,
                                v_bnk_account,       --v_bnk_account VARCHAR2,
                                r.mtran_ref_no,             --v_ref2 VARCHAR2,
                                v_payee_eft_dtls);
                        -- EXCEPTION
                        -- WHEN OTHERS
                        -- THEN
                        -- raise_error ('ERROR PAYMENT APPENDING EFT PAYMENT...');
                        END;

                        BEGIN
                            --RAISE_ERROR('v_trnt_gl_code='||v_trnt_gl_code||'v_org_code='||v_org_code||'mtran_brn_code='||r.mtran_brn_code||'v_eft_enabled=='||v_eft_enabled||'v_bnk_bbr_pk='||v_bnk_bbr_pk);
                            Fms_Cheques_Pkg.append_chq_trans (
                                v_rec_count_eft,
                                NVL (r.amount, 0),
                                'MDP PAYMENT AMT ' || vpaymethod, --narrative,
                                v_crt_acc_no,                -- crt_acc_number
                                v_org_code,               --crt_acc_org_code ,
                                r.mtran_brn_code,
                                'D',                                --v_dr_cr,
                                v_chq_dtls_rec,
                                NULL,
                                NULL,
                                NULL,
                                NULL);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR PAYMENT APPENDING CHEQUE...');
                        END;

                        BEGIN
                            ---added by olson to cater for EFTS
                            --raise_error('v_bank_branch_code=='||v_bank_branch_code||'mtran_brn_code='||r.mtran_brn_code||' v_bnk_account '||v_bnk_account);
                            FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                                v_sys_code,                   -- v_cqr_source,
                                NVL (v_premType, 'MDP') || '/' || v_mtran_no, -- v_cqr_ref, ref1
                                NULL,          -- v_cqr_ref2, OR ANY OTHER REF
                                TRUNC (SYSDATE),            -- v_cqr_ref_date,
                                v_narrative,               -- v_cqr_narrative,
                                r.mtran_brn_code,           -- v_cqr_brh_code,
                                v_bank_branch_code,     -- v_cqr_bct_brh_code,
                                r.amount,
                                r.mtran_payee,                 -- v_cqr_payee,
                                'EFT',                    -- v_cqr_pay_method,
                                v_cur_code,                 -- v_cqr_cur_code,
                                r.mtran_cur_rate,                 --v_cur_rate
                                v_bank_code,                -- v_cqr_bct_code,
                                v_auth_by,            -- v_cqr_source_auth_by,
                                TRUNC (SYSDATE),      -- v_cqr_source_auth_dt,
                                v_req_by,                     -- v_cqr_req_by,
                                NVL (v_premType, 'MDP'),    -- v_cqr_pmt_type,
                                v_bank_branch_code, -- v_cqr_pay_bnk_branch_code,
                                v_bnk_account,
                                v_chq_dtls_rec,
                                v_payee_eft_dtls,
                                v_bank_code,                -- v_cqr_bct_code,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                r.mtran_ggt_tran_no,
                                NULL);
                        -- EXCEPTION
                        -- WHEN OTHERS
                        -- THEN
                        -- raise_error ('PAYMENT CREATE_CHQ_REQN...');
                        END;

                        DBMS_OUTPUT.put_line ('cheque created========');
                    END IF;
                END IF;
            END IF;
        END LOOP;

        BEGIN
            FMS_CHEQUES_PKG.process_auto_payments (v_mtran_ggt_tran_no,
                                                   v_user_code);
        END;
    -- RAISE_ERROR('AUTHROIZE HERE');
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error posting GIS payment...' || SQLERRM);
    END process_mdp_payments;

    FUNCTION getbalance (v_agn_code IN NUMBER, v_date IN VARCHAR2)
        RETURN NUMBER
    IS
        v_balance            NUMBER;
        v_mtran_no           NUMBER;
        v_transaction_amt    NUMBER;
        v_tmap_mtran_no      NUMBER;
        v_mtran_settlement   NUMBER;
        v_tl                 NUMBER;
        v_phfund             NUMBER;
        v_sd                 NUMBER;
        v_comm               NUMBER;
        v_wthx               NUMBER;
        v_start_date         DATE;
        v_health             NUMBER;
        v_road_safety        NUMBER;
        v_motor_tax          NUMBER;
        v_certchg            NUMBER;
        v_comm_levy          NUMBER;
        v_balances           NUMBER;
    BEGIN
        --RAISE_ERROR('v_agn_code'||v_agn_code);
        v_start_date := TO_DATE (v_date, 'DD/MM/YYYY');

        --RAISE_ERROR('v_start_date'||v_start_date);
        SELECT SUM (
                   DECODE (mtran_dc,
                           'D', NVL (mtran_amount, 0),
                           -ABS (NVL (mtran_amount, 0)))),
               SUM (NVL (mtran_settlement, 0)),
               SUM (NVL (mtran_tl, 0)),
               SUM (NVL (mtran_sd, 0)),
               SUM (NVL (mtran_phfund, 0)),
               SUM (NVL (mtran_commission, 0)),
               SUM (NVL (mtran_whtx, 0)),
               SUM (NVL (mtran_health, 0)),
               SUM (NVL (mtran_road_safety, 0)),
               SUM (NVL (mtran_motor_levy, 0)),
               SUM (NVL (mtran_certchg, 0)),
               SUM (NVL (mtran_comm_levy_amt, 0)),
               SUM (NVL (MTRAN_BALANCE, 0))
          INTO v_transaction_amt,
               v_mtran_settlement,
               v_tl,
               v_sd,
               v_phfund,
               v_comm,
               v_wthx,
               v_health,
               v_road_safety,
               v_motor_tax,
               v_certchg,
               v_comm_levy,
               v_balances
          FROM gin_master_transactions, tqc_agencies, gin_policies
         WHERE     mtran_pol_batch_no = pol_batch_no(+)
               AND mtran_client_code = agn_code
               AND mtran_client_code = v_agn_code
               AND mtran_client_type NOT IN ('D')
               AND mtran_date >= v_start_date;

        v_balance := v_balances;
        -- NVL (v_transaction_amt,
        -- 0
        -- + NVL (v_tl, 0)
        -- + NVL (v_comm, 0)
        -- + NVL (v_wthx, 0)
        -- + NVL (v_sd, 0)
        -- + NVL (v_phfund, 0)
        -- + NVL (v_health, 0)
        -- + NVL (v_road_safety, 0)
        -- + NVL (v_motor_tax, 0)
        -- + NVL (v_certchg, 0)
        -- )
        -- - NVL (v_mtran_settlement, 0); COMMENTED BY BASIL
        RETURN v_balance;
    END;

    PROCEDURE auto_authorise_transmittal (v_pol_batch_no NUMBER)
    IS
        v_status   VARCHAR2 (100);
        vuser      VARCHAR2 (30);
        v_user     VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
    BEGIN
        BEGIN
            DELETE FROM gin_master_transactions
                  WHERE     mtran_pol_batch_no = v_pol_batch_no
                        AND mtran_other_ref1 = 'TRANSMITTAL';
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error deleting policy transamittal transactions...');
        END;

        BEGIN
              SELECT tt_auth_by
                INTO vuser
                FROM gin_transmital_trans
               WHERE ROWNUM = 1 AND tt_pol_batch_no = v_pol_batch_no
            ORDER BY tt_auth_date DESC;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                vuser := v_user;
            WHEN OTHERS
            THEN
                raise_error ('Error selecting transamittal user...');
        END;

        IF gis_ri_procedures.pol_risks_within_capacity (v_pol_batch_no) = 'Y'
        THEN
            gin_uw_author_proc.pol_auth_prc (v_pol_batch_no,
                                             vuser,
                                             'N',
                                             'N',
                                             SYSDATE,
                                             'N');
            gin_uw_author_proc.auto_auth_reinsurance (v_pol_batch_no,
                                                      vuser,
                                                      v_status,
                                                      'Y',
                                                      'N');
        ELSE
            gin_uw_author_proc.pol_auth_prc (v_pol_batch_no,
                                             vuser,
                                             'Y',
                                             'Y',
                                             SYSDATE,
                                             'N');
        END IF;

        gis_utilities.close_tickets ('P', v_pol_batch_no);
    END;

    PROCEDURE auto_auth_transactions (v_pol_batch_no   IN NUMBER,
                                      v_mtran_ref_no   IN VARCHAR2,
                                      v_mtran_no       IN NUMBER,
                                      v_rct_amt        IN NUMBER,
                                      v_freq           IN VARCHAR2,
                                      v_rct_type       IN VARCHAR2,
                                      v_imp_code       IN NUMBER)
    IS
        v_trans_count             NUMBER;
        v_interface_type          VARCHAR2 (20);
        vuser                     VARCHAR2 (30);
        v_prm_code                NUMBER;
        v_bal_amt                 NUMBER;
        v_cr_bal                  NUMBER;
        v_cr_com                  NUMBER;
        v_policy_no               VARCHAR2 (30);
        v_new_batch_no            NUMBER;
        v_mtran_dr_no             NUMBER;
        v_user                    VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
        v_pol_authosrised         VARCHAR2 (30);
        v_com_inclusive           VARCHAR2 (1);
        v_rights                  VARCHAR2 (1);
        v_policy_status           VARCHAR2 (30);
        v_prs_sht_desc            VARCHAR2 (30);
        v_prs_sht_desc_area       VARCHAR2 (30);
        v_prs_sht_desc_sub_area   VARCHAR2 (30);
        v_exp_count               NUMBER := 0;
    BEGIN
        BEGIN
            SELECT pol_policy_no,
                   NVL (pol_checked_by, pol_prepared_by),
                   pol_authosrised,
                   pol_policy_status
              INTO v_policy_no,
                   vuser,
                   v_pol_authosrised,
                   v_policy_status
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error Fetching Policy No =' || vuser);
        END;

        --raise_error('v_policy_no='||v_policy_no||';'||v_pol_batch_no);
        IF v_policy_status = 'ME'
        THEN
            v_prs_sht_desc := 'UWRC';
            v_prs_sht_desc_area := 'RCUW';
            v_prs_sht_desc_sub_area := 'RCAU';
        ELSIF v_policy_status = 'NB'
        THEN
            v_prs_sht_desc := 'UWNB';
            v_prs_sht_desc_area := 'NBUW';
            v_prs_sht_desc_sub_area := 'NBAU';
        ELSIF v_policy_status = 'RN'
        THEN
            v_prs_sht_desc := 'UWRN';
            v_prs_sht_desc_area := 'RNUW';
            v_prs_sht_desc_sub_area := 'RNAU';
        END IF;

        IF vuser LIKE 'GIS'
        THEN
            vuser := 'KAMAUCN';
        END IF;

        v_rights :=
            tqc_interfaces_pkg.check_user_rights (vuser,
                                                  37,
                                                  v_prs_sht_desc,
                                                  v_prs_sht_desc_area,
                                                  v_prs_sht_desc_sub_area,
                                                  v_rct_amt,
                                                  'D');

        IF NVL (v_pol_authosrised, 'N') != 'R' AND NVL (v_rights, 'N') = 'Y'
        THEN
            BEGIN
                SELECT COUNT (0)
                  INTO v_exp_count
                  FROM gin_policy_exceptions
                 WHERE     gpe_pol_batch_no = v_pol_batch_no
                       AND NVL (gpe_authorised, 'N') != 'Y';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_exp_count := 0;
            END;

            -- -- raise_error ('Error Fetching Policy No ='||v_rights||';'||v_prs_sht_desc||';'||v_prs_sht_desc_area||';'||v_prs_sht_desc_sub_area||';'||v_pol_authosrised||';'||v_exp_count);
            IF NVL (v_exp_count, 0) = 0
            THEN
                BEGIN
                    UPDATE gin_policies
                       SET pol_reinsured = 'Y'
                     WHERE pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error :- Unable to update policy authorization...');
                END;

                BEGIN
                    UPDATE gin_gis_transactions
                       SET ggt_sch_status = 'A',
                           ggt_sch_auth_by = vuser,
                           ggt_sch_status_dt = TRUNC (SYSDATE)
                     WHERE     ggt_pol_batch_no = v_pol_batch_no
                           AND ggt_uw_clm_tran = 'U';
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error :- Unable to update transaction authorization details...');
                END;
            END IF;
        END IF;

        BEGIN
            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                   || gin_prm_code_seq.NEXTVAL
              INTO v_prm_code
              FROM DUAL;

            INSERT INTO gin_prem_receipts (prm_code,
                                           prm_date,
                                           prm_amt,
                                           prm_pol_batch_no,
                                           prm_pol_policy_no,
                                           prm_receipt_no,
                                           prm_receipt_date,
                                           prm_done_by,
                                           prm_production_date,
                                           prm_source,
                                           prm_pay_method,
                                           prm_mtran_no,
                                           prm_origin,
                                           prm_imp_code)
                     VALUES (
                         v_prm_code,
                         SYSDATE,
                         v_rct_amt,
                         v_pol_batch_no,
                         v_policy_no,
                         v_mtran_ref_no,
                         SYSDATE,
                         v_user,
                         SYSDATE,
                         DECODE (v_rct_type,
                                 'L', 'NEW LOADING INTERFACE RECEIPT',
                                 'B', 'BARCODE RECEIPT',
                                 'M', 'M-PESA RECEIPT',
                                 'RECEIPT'),
                         'C',
                         v_mtran_no,
                         v_rct_type,
                         v_imp_code);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error creating receipt for policy ');
        END;

        -- RAISE_ERROR(v_exp_count||';'||v_rights);
        IF    (    NVL (v_rights, 'N') = 'Y'
               AND NVL (v_exp_count, 0) = 0
               AND NVL (v_pol_authosrised, 'N') != 'N')
           OR v_rct_type = 'L'
        THEN
            BEGIN
                gin_misc_pkg.process_premium_receipts (v_pol_batch_no,
                                                       v_prm_code,
                                                       NULL,            --'Y',
                                                       NULL,            --'N',
                                                       NULL,
                                                       NULL,
                                                       v_bal_amt,
                                                       v_new_batch_no);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error' || v_user || SQLERRM);
            END;

            BEGIN
                UPDATE gin_master_transactions
                   SET mtran_pol_batch_no = v_new_batch_no
                 WHERE mtran_no = v_mtran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            BEGIN
                SELECT mtran_no,
                       DECODE (NVL (mtran_commission, 0), 0, 'N', 'Y')
                  INTO v_mtran_dr_no, v_com_inclusive
                  FROM gin_master_transactions
                 WHERE     mtran_pol_batch_no = v_new_batch_no
                       AND mtran_dc = 'D'
                       AND mtran_balance > 0
                       AND mtran_client_type IN ('D',
                                                 'A',
                                                 'B',
                                                 'FI');
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                --RAISE_ERROR ('BATCH NO ----' || v_new_batch_no); --NULL;
                WHEN OTHERS
                THEN
                    raise_error ('ERROR FETCHING POLICY DEBIT...');
            END;

            auto_allocate_trans (v_new_batch_no);
            --RAISE_ERROR('v_new_batch_no='||v_new_batch_no||';'||v_mtran_dr_no);
            -- IF v_mtran_dr_no IS NULL
            -- THEN
            -- v_cr_bal := v_rct_amt;
            -- gis_accounts_utilities.knock_off_transactions (v_mtran_no,
            -- v_mtran_ref_no,
            -- v_mtran_dr_no,
            -- v_com_inclusive,
            -- TRUNC (SYSDATE),
            -- v_cr_bal,
            -- v_cr_com,
            -- v_rct_amt
            -- );
            -- END IF;
            gis_utilities.close_tickets ('P', v_pol_batch_no);
        --END IF;
        END IF;
    -- RAISE_ERROR('END');
    END;

    FUNCTION getbalance (v_agn_code IN NUMBER)
        RETURN NUMBER
    IS
        v_balance            NUMBER;
        v_mtran_no           NUMBER;
        v_transaction_amt    NUMBER;
        v_tmap_mtran_no      NUMBER;
        v_mtran_settlement   NUMBER;
        v_tl                 NUMBER;
        v_phfund             NUMBER;
        v_sd                 NUMBER;
        v_comm               NUMBER;
        v_wthx               NUMBER;
        v_health             NUMBER;
        v_road_safety        NUMBER;
        v_motor_tax          NUMBER;
        v_certchg            NUMBER;
        v_comm_levy          NUMBER;
    BEGIN
        SELECT SUM (
                   DECODE (mtran_dc,
                           'D', NVL (mtran_amount, 0),
                           -ABS (NVL (mtran_amount, 0)))),
               SUM (NVL (mtran_settlement, 0)),
               SUM (NVL (mtran_tl, 0)),
               SUM (NVL (mtran_sd, 0)),
               SUM (NVL (mtran_phfund, 0)),
               SUM (NVL (mtran_commission, 0)),
               SUM (NVL (mtran_whtx, 0)),
               SUM (NVL (mtran_health, 0)),
               SUM (NVL (mtran_road_safety, 0)),
               SUM (NVL (mtran_motor_levy, 0)),
               SUM (NVL (mtran_certchg, 0)),
               SUM (NVL (mtran_comm_levy_amt, 0))
          INTO v_transaction_amt,
               v_mtran_settlement,
               v_tl,
               v_sd,
               v_phfund,
               v_comm,
               v_wthx,
               v_health,
               v_road_safety,
               v_motor_tax,
               v_certchg,
               v_comm_levy
          FROM gin_master_transactions, tqc_agencies, gin_policies
         WHERE     mtran_pol_batch_no = pol_batch_no(+)
               AND mtran_client_code = agn_code
               AND mtran_client_code = v_agn_code
               AND mtran_client_type NOT IN ('D');

        -- AND TO_DATE(mtran_date,'DD/MM/YYYY') >= v_start_date;
        v_balance :=
              NVL (
                  v_transaction_amt,
                    0
                  + NVL (v_tl, 0)
                  + NVL (v_comm, 0)
                  + NVL (v_wthx, 0)
                  + NVL (v_comm_levy, 0)
                  + NVL (v_sd, 0)
                  + NVL (v_phfund, 0)
                  + NVL (v_health, 0)
                  + NVL (v_road_safety, 0)
                  + NVL (v_motor_tax, 0)
                  + NVL (v_certchg, 0))
            - NVL (v_mtran_settlement, 0);
        RETURN v_balance;
    END;

    FUNCTION get_policy_wet (v_pol_batch_no NUMBER)
        RETURN DATE
    IS
        v_wet   DATE;
    BEGIN
        --RAISE_ERROR('v_pol_batch_no'||v_pol_batch_no);
        SELECT pol_wet_dt
          INTO v_wet
          FROM gin_policies
         WHERE pol_batch_no = v_pol_batch_no;

        RETURN v_wet;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN NULL;
    END;

    PROCEDURE auto_allocate_trans (v_batch_no IN NUMBER)
    IS
        v_dc             VARCHAR2 (5);
        v_mtran_no       NUMBER;
        v_mtran_ref      VARCHAR2 (25);
        v_bal            NUMBER;
        v_cr_mtran_no    NUMBER;
        v_cr_mtran_ref   VARCHAR2 (25);
        v_cr_bal         NUMBER;
        v_dr_mtran_no    NUMBER;
        v_dr_mtran_ref   VARCHAR2 (25);
        v_dr_bal         NUMBER;
        v_cr_com         NUMBER;

        CURSOR rec_trans IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_tran_type = 'RC'
                   AND NVL (mtran_balance, 0) <> 0;

        CURSOR dbt_trans (v_client_code IN NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_client_code = v_client_code
                   AND mtran_tran_type != 'RC'
                   AND mtran_dc = 'D';
    BEGIN
        FOR rec_trans_cur IN rec_trans
        LOOP
            FOR dbt_trans_cur IN dbt_trans (rec_trans_cur.mtran_client_code)
            LOOP
                BEGIN                                         -- wrong concept
                    SELECT mtran_dc,
                           mtran_no,
                           mtran_ref_no,
                           mtran_balance
                      INTO v_dc,
                           v_mtran_no,
                           v_mtran_ref,
                           v_bal
                      FROM gin_master_transactions
                     WHERE     mtran_pol_batch_no = v_batch_no
                           AND mtran_no = dbt_trans_cur.mtran_no
                           AND mtran_client_code =
                               rec_trans_cur.mtran_client_code;
                EXCEPTION
                    WHEN TOO_MANY_ROWS
                    THEN
                        raise_error (
                               'Too many rows Fetched ...'
                            || dbt_trans_cur.mtran_pol_batch_no
                            || ' - '
                            || SQLERRM (SQLCODE));
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error Retrieving Records ...'
                            || dbt_trans_cur.mtran_pol_batch_no
                            || ' - '
                            || SQLERRM (SQLCODE));
                END;

                IF v_dc = 'C'
                THEN
                    v_cr_mtran_no := v_mtran_no;
                    v_cr_mtran_ref := v_mtran_ref;
                    v_cr_bal := v_bal;

                    BEGIN                                     -- wrong concept
                        SELECT mtran_no, mtran_ref_no, mtran_balance
                          INTO v_dr_mtran_no, v_dr_mtran_ref, v_dr_bal
                          FROM gin_master_transactions
                         WHERE     mtran_pol_batch_no = v_batch_no
                               AND mtran_no = dbt_trans_cur.mtran_no
                               AND mtran_client_code =
                                   rec_trans_cur.mtran_client_code;
                    EXCEPTION
                        WHEN TOO_MANY_ROWS
                        THEN
                            raise_error (
                                   'Too many rows Fetched ...'
                                || rec_trans_cur.mtran_pol_batch_no
                                || ' - '
                                || SQLERRM (SQLCODE));
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error Retrieving Records ...'
                                || rec_trans_cur.mtran_pol_batch_no
                                || ' - '
                                || SQLERRM (SQLCODE));
                    END;
                ELSE
                    v_dr_mtran_no := v_mtran_no;
                    v_dr_mtran_ref := v_mtran_ref;
                    v_dr_bal := v_bal;

                    BEGIN                                     -- wrong concept
                        SELECT mtran_no, mtran_ref_no, mtran_balance
                          INTO v_cr_mtran_no, v_cr_mtran_ref, v_cr_bal
                          FROM gin_master_transactions
                         WHERE     mtran_pol_batch_no = v_batch_no
                               AND mtran_no = rec_trans_cur.mtran_no
                               AND mtran_client_code =
                                   rec_trans_cur.mtran_client_code;
                    EXCEPTION
                        WHEN TOO_MANY_ROWS
                        THEN
                            raise_error (
                                   'Too many rows Fetched ...'
                                || rec_trans_cur.mtran_pol_batch_no
                                || ' - '
                                || SQLERRM (SQLCODE));
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error Retrieving Records ...'
                                || rec_trans_cur.mtran_pol_batch_no
                                || ' - '
                                || SQLERRM (SQLCODE));
                    END;
                END IF;

                IF ABS (NVL (v_cr_bal, 0)) = ABS (NVL (v_dr_bal, 0))
                THEN
                    gis_accounts_utilities.knock_off_transactions (
                        v_cr_mtran_no,
                        v_cr_mtran_ref,
                        v_dr_mtran_no,
                        'Y',
                        TRUNC (SYSDATE),
                        v_cr_bal,
                        v_cr_com,
                        v_dr_bal,
                        'Y');
                ELSIF ABS (NVL (v_cr_bal, 0)) > ABS (NVL (v_dr_bal, 0))
                THEN
                    -- UNDO THE ALLOCATIONS FIRST
                    gis_accounts_utilities.undo_trans_allocation (
                        v_dr_mtran_no);
                    -- THE ALLOCATE THE CONTRA
                    gis_accounts_utilities.knock_off_transactions (
                        v_cr_mtran_no,
                        v_cr_mtran_ref,
                        v_dr_mtran_no,
                        'Y',
                        TRUNC (SYSDATE),
                        v_cr_bal,
                        v_cr_com,
                        v_dr_bal,
                        'Y');
                END IF;
            END LOOP;
        END LOOP;
    END;

    PROCEDURE auth_withtp_pymnts (v_date_from     IN DATE,
                                  v_date_to       IN DATE,
                                  v_post_option   IN VARCHAR2,
                                  v_spr_code      IN VARCHAR2)
    IS
        v_user            VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        v_user_code       NUMBER;
        v_date            DATE := TRUNC (SYSDATE);
        v_withtpdt_code   NUMBER;
        v_cnt             NUMBER := 0;
        v_tot_cnt         NUMBER := 0;
        v_whtx_amt        NUMBER;
        v_totfee          NUMBER;
        v_chk_code        NUMBER;
        v_tot_fee         NUMBER;
        v_wthtp_code      NUMBER;

        CURSOR cur_withtp IS
              SELECT withtp_apco_cor_code,
                     withtp_cur_code,
                     spr_name                            spr_name,
                     spr_name                            agn_payee,
                     SUM (NVL (withtp_amt, 0))           withtp_amt,
                     SUM (NVL (withtp_gross_amt, 0))     withtp_gross_amt,
                     SUM (NVL (cpv_amount, 0))           cpv_amount,
                     SUM (NVL (taxableamnt, 0))          taxableamnt
                FROM gin_clm_wthtax_pymts,
                     gin_clm_payment_vouchers,
                     tqc_service_providers,
                     (  SELECT cpdt_cpv_voucher_no,
                               SUM (NVL (cpdt_amnt_incl_vat, 0))     taxableamnt
                          FROM gin_clm_pymnt_details
                      GROUP BY cpdt_cpv_voucher_no)
               WHERE     withtp_apco_cor_code = spr_code
                     AND cpv_voucher_no = cpdt_cpv_voucher_no
                     AND NVL (withtp_authorized, 'N') != 'Y'
                     AND NVL (withtp_paid, 'N') != 'Y'
                     AND NVL (withtp_checked, 'N') = 'Y'
                     AND cpv_voucher_no = withtp_voucher_no
                     AND withtp_apco_cor_code = cpv_apco_cor_code
                     AND withtp_apco_cor_code = v_spr_code
                     AND withtp_date BETWEEN NVL (v_date_from, withtp_date)
                                         AND NVL (v_date_to, withtp_date)
            GROUP BY withtp_apco_cor_code, spr_name, withtp_cur_code;

        CURSOR cur_withtp_dtls (v_spr_code IN NUMBER)
        IS
            SELECT withtp_code,
                   withtp_apco_cor_code,
                   spr_name,
                   withtp_voucher_no
              FROM gin_clm_wthtax_pymts, tqc_service_providers
             WHERE     withtp_apco_cor_code = spr_code
                   AND NVL (withtp_authorized, 'N') != 'Y'
                   AND NVL (withtp_paid, 'N') != 'Y'
                   AND NVL (withtp_checked, 'N') = 'Y'
                   AND withtp_apco_cor_code = v_spr_code
                   AND withtp_date BETWEEN NVL (v_date_from, withtp_date)
                                       AND NVL (v_date_to, withtp_date);
    BEGIN
        --RAISE_ERROR('v_spr_code '||v_spr_code);
        BEGIN
            SELECT COUNT (1)
              INTO v_tot_cnt
              FROM gin_clm_wthtax_pymts
             WHERE     NVL (withtp_authorized, 'N') != 'Y'
                   AND NVL (withtp_paid, 'N') != 'Y'
                   AND NVL (withtp_checked, 'N') = 'Y'
                   AND withtp_date BETWEEN NVL (v_date_from, withtp_date)
                                       AND NVL (v_date_to, withtp_date);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('UNABLE TO COUNT RECORDS...');
        END;

        IF NVL (v_tot_cnt, 0) = 0
        THEN
            raise_error ('NO withholdingtax PAYMENTS TO AUTHORISE..');
        END IF;

        --raise_error ('v_tot_cnt '||v_tot_cnt);
        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'WTHTAX_PYMT_AMOUNT')
              INTO v_whtx_amt
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_error ('parameter WTHTAX_PYMT_AMOUNT not defined');
            WHEN OTHERS
            THEN
                raise_error (
                    'Consolidation minimum withholding tax not specified');
        END;

        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = v_user;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                       'ERROR FETCHING CURRENT SYSTEM USER <'
                    || v_user
                    || '>.......');
        END;

        BEGIN
            FOR cur_withtp_rec IN cur_withtp
            LOOP
                -- RAISE_eRROR(cur_withtp_rec.cpv_amount||'='||v_whtx_amt||'='||v_cnt);
                IF NVL (cur_withtp_rec.taxableamnt, 0) < NVL (v_whtx_amt, 0)
                THEN
                    BEGIN
                        SELECT gin_withtp_code_seq.NEXTVAL
                          INTO v_wthtp_code
                          FROM DUAL;

                        INSERT INTO gin_clm_wthtax_pymts_dtls (
                                        withtp_code,
                                        withtp_apco_cor_code,
                                        withtp_date,
                                        withtp_amt,
                                        withtp_checked,
                                        withtp_cur_code,
                                        withtp_tot_amt,
                                        withtp_fee_amt)
                             VALUES (v_wthtp_code,
                                     cur_withtp_rec.withtp_apco_cor_code,
                                     TRUNC (SYSDATE),
                                     cur_withtp_rec.withtp_amt,
                                     'Y',
                                     cur_withtp_rec.withtp_cur_code,
                                     cur_withtp_rec.withtp_gross_amt,
                                     cur_withtp_rec.withtp_amt);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error creating wthtax voucher details....');
                    END;

                    v_cnt := NVL (v_cnt, 0) + 1;

                    BEGIN
                        NULL;
                    -- raise_error(cur_withtp_rec.withtp_code||'='||v_user||'='||v_post_option);
                    -- gin_interfaces_pkg.prc_wthtax_pymt
                    -- (v_wthtp_code,
                    -- v_user,
                    -- v_post_option
                    -- );
                    END;

                    v_cnt := NVL (v_cnt, 0) + 1;

                    FOR cur_withtp_dtls_rec
                        IN cur_withtp_dtls (
                               cur_withtp_rec.withtp_apco_cor_code)
                    LOOP
                        BEGIN
                            UPDATE gin_clm_wthtax_pymts
                               SET withtp_authorized = 'Y',
                                   withtp_paid = 'Y',
                                   withtp_authorized_by = v_user,
                                   withtp_authorize_date = TRUNC (SYSDATE)
                             WHERE withtp_code =
                                   cur_withtp_dtls_rec.withtp_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR UPDATING WTHTAX PAYMENT VOUCHER NO. ...');
                        END;
                    END LOOP;

                    BEGIN
                        UPDATE gin_clm_wthtax_pymts_dtls
                           SET withtp_authorized = 'Y',
                               withtp_authorized_by = v_user,
                               withtp_authorize_date = TRUNC (SYSDATE),
                               withtp_paid = 'Y'
                         WHERE withtp_code = v_wthtp_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR UPDATING CONSOLIDATED WHTX TRANS ...');
                    END;
                ELSE
                    FOR cur_withtp_dtls_rec
                        IN cur_withtp_dtls (
                               cur_withtp_rec.withtp_apco_cor_code)
                    LOOP
                        BEGIN
                            UPDATE gin_clm_wthtax_pymts
                               SET withtp_authorized = 'Y',
                                   withtp_paid = 'L',
                                   --L -means will not be paid less that set amount
                                   withtp_authorized_by = v_user,
                                   withtp_authorize_date = TRUNC (SYSDATE)
                             WHERE withtp_code =
                                   cur_withtp_dtls_rec.withtp_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR UPDATING WTHTAX PAYMENT VOUCHER NO. ...');
                        END;
                    END LOOP;
                END IF;
            END LOOP;
        --raise_error ('ERROR POSTING withholdingtax. RECORDS...');
        -- EXCEPTION
        -- WHEN OTHERS
        -- THEN
        -- raise_error ('ERROR POSTING withholdingtax. RECORDS...');
        END;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('ERROR POSTING withholdingtax. RECORDS...');
    END;

    FUNCTION get_policy_loss_ratio (v_policy         IN VARCHAR,
                                    v_pol_batch_no   IN NUMBER,
                                    v_type           IN VARCHAR)
        RETURN NUMBER
    IS
        v_claim_cnt       NUMBER;
        v_total_reserve   NUMBER;
        v_loss_ratio      NUMBER;
        v_sum_insured     NUMBER;
        v_gross_prem      NUMBER;
        v_uw_yr           NUMBER;
        v_policy_no       VARCHAR2 (30);
    BEGIN
        IF v_type = 'UW'
        THEN
            BEGIN
                SELECT DISTINCT NVL (pol_total_sum_insured, 1),
                                pol_uw_year,
                                pol_policy_no,
                                pol_total_gp
                  INTO v_sum_insured,
                       v_uw_yr,
                       v_policy_no,
                       v_gross_prem
                  FROM tqc_clients, gin_policies
                 WHERE     clnt_code = pol_prp_code
                       AND pol_batch_no = v_pol_batch_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_application_error (
                        -20001,
                           'Unable to check Client details ..'
                        || SQLERRM (SQLCODE));
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'Unable to check Client details ..'
                        || SQLERRM (SQLCODE));
            END;

            BEGIN
                  SELECT COUNT (*), SUM (NVL (clmrev_amt, 0)) total_reserve
                    INTO v_claim_cnt, v_total_reserve
                    FROM gin_claim_revisions, gin_claim_master_bookings
                   WHERE     clmrev_cmb_claim_no = cmb_claim_no
                         AND cmb_pol_policy_no = v_policy_no
                         AND cmb_uw_year = v_uw_yr
                         AND NVL (clmrev_authorised, 'N') = 'Y'
                GROUP BY cmb_pol_policy_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_total_reserve := 0;
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'Unable to retrieving claims Reserve ..'
                        || SQLERRM (SQLCODE));
            END;

            IF v_total_reserve > 0
            THEN
                IF v_gross_prem = 0
                THEN
                    v_loss_ratio := ROUND (v_total_reserve / 1 * 100, 2);
                ELSE
                    v_loss_ratio :=
                        ROUND (v_total_reserve / v_gross_prem * 100, 2);
                END IF;
            ELSE
                v_loss_ratio := 0;
            END IF;
        ELSE
            BEGIN
                  SELECT DISTINCT
                         SUM (NVL (pol_total_sum_insured, 1)),
                         pol_policy_no,
                         pol_total_gp
                    INTO v_sum_insured, v_policy_no, v_gross_prem
                    FROM tqc_clients, gin_policies
                   WHERE clnt_code = pol_prp_code AND pol_policy_no = v_policy
                GROUP BY pol_policy_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_application_error (
                        -20001,
                           'Unable to check Client details ..'
                        || SQLERRM (SQLCODE));
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'Unable to check Client details ..'
                        || SQLERRM (SQLCODE));
            END;

            BEGIN
                SELECT COUNT (*), SUM (NVL (clmrev_amt, 0)) total_reserve
                  INTO v_claim_cnt, v_total_reserve
                  FROM gin_claim_revisions, gin_claim_master_bookings
                 WHERE     clmrev_cmb_claim_no = cmb_claim_no
                       AND cmb_pol_policy_no = v_policy
                       AND NVL (clmrev_authorised, 'N') = 'Y';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_total_reserve := 0;
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'Unable to retrieving claims Reserve ..'
                        || SQLERRM (SQLCODE));
            END;

            IF v_total_reserve > 0
            THEN
                IF v_gross_prem = 0
                THEN
                    v_loss_ratio := ROUND (v_total_reserve / 1 * 100, 2);
                ELSE
                    v_loss_ratio :=
                        ROUND (v_total_reserve / v_gross_prem * 100, 2);
                END IF;
            ELSE
                v_loss_ratio := 0;
            END IF;
        END IF;

        RETURN (v_loss_ratio);
    END;

    PROCEDURE allocate_deposit_prem (v_rde_code       IN NUMBER,
                                     v_mtran_dr_no    IN NUMBER,
                                     v_alloc_amt      IN NUMBER,
                                     v_pol_batch_no   IN NUMBER)
    IS
        v_rcpt_amt               NUMBER;
        v_allocd_amt             NUMBER;
        v_balance                NUMBER;
        v_ggt_trans_no           NUMBER;
        v_user_name              VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        v_rnd                    NUMBER;
        v_bcur_rnd               NUMBER;
        v_cur_rate               NUMBER;
        v_mtran_no               NUMBER;
        v_policy_no              VARCHAR2 (30);
        v_clnt_sht_desc          VARCHAR2 (30);
        v_cr_com                 NUMBER;
        v_cr_bal                 NUMBER;
        v_com_inclusive          VARCHAR2 (1);
        v_agnt_code              NUMBER;
        v_transfer_client_type   VARCHAR2 (5);
        v_client_code            NUMBER;
        v_client_type            VARCHAR2 (5);
        v_tran_sign              NUMBER;
        v_VAT_inclusive          VARCHAR2 (1);

        CURSOR deposit IS
            SELECT *
              FROM gin_receipt_deposits
             WHERE rde_code = v_rde_code AND NVL (rde_cancelled, 'N') = 'N';
    BEGIN
        /*procedure to allocated deposited amount to debit*/
        BEGIN
            SELECT rde_amount, rde_allocated_amt, rde_balance
              INTO v_rcpt_amt, v_allocd_amt, v_balance
              FROM gin_receipt_deposits
             WHERE rde_code = v_rde_code AND NVL (rde_cancelled, 'N') = 'N';
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error fetching deposit details...');
        END;

        IF NVL (v_allocd_amt, 0) + NVL (v_balance, 0) != NVL (v_rcpt_amt, 0)
        THEN
            raise_error ('The deposit amount does not add up. ');
        ELSIF NVL (v_balance, 0) >= NVL (v_alloc_amt, 0)
        THEN
            --create the equivalent receipt amount to master
            --allocate by reducing the deposit amount and knock off the debit against the credit created
            FOR d IN deposit
            LOOP
                BEGIN
                    SELECT pol_policy_no, clnt_sht_desc, pol_agnt_agent_code
                      INTO v_policy_no, v_clnt_sht_desc, v_agnt_code
                      FROM gin_policies, tqc_clients
                     WHERE     pol_prp_code = clnt_code
                           AND pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error fetching policy details...');
                END;

                IF v_agnt_code != 0
                THEN
                    BEGIN
                        SELECT agn_sht_desc, act_type_id
                          INTO v_clnt_sht_desc, v_transfer_client_type
                          FROM tqc_agencies, tqc_account_types
                         WHERE     agn_code = v_agnt_code
                               AND act_code = agn_act_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR FETCHING ACC DETAILS...');
                    END;
                END IF;

                SELECT DECODE (v_agnt_code, 0, d.rde_clnt_code, v_agnt_code)
                  INTO v_client_code
                  FROM DUAL;

                SELECT ggt_trans_no_seq.NEXTVAL INTO v_ggt_trans_no FROM DUAL;

                INSERT INTO gin_gis_transactions (ggt_trans_no,
                                                  ggt_btr_trans_code,
                                                  ggt_done_by,
                                                  ggt_done_date,
                                                  ggt_uw_clm_tran,
                                                  ggt_trans_date,
                                                  ggt_effective_date)
                     VALUES (v_ggt_trans_no,
                             'JV',
                             v_user_name,
                             TRUNC (SYSDATE),
                             'A',
                             TRUNC (SYSDATE),
                             TRUNC (SYSDATE));

                v_cur_rate :=
                    get_currexch_rate (d.rde_cur_code, v_rnd, v_bcur_rnd);

                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || gin_mtran_no_seq.NEXTVAL)
                  INTO v_mtran_no
                  FROM DUAL;

                INSERT INTO gin_master_transactions (mtran_no,
                                                     mtran_doc_date,
                                                     mtran_date,
                                                     mtran_ref_no,
                                                     mtran_other_ref,
                                                     mtran_tran_type,
                                                     mtran_dc,
                                                     mtran_control_acc,
                                                     mtran_client_type,
                                                     mtran_client_code,
                                                     mtran_amount,
                                                     mtran_balance,
                                                     mtran_authorised,
                                                     mtran_net_amt,
                                                     mtran_posting_date,
                                                     mtran_ggt_tran_no,
                                                     mtran_prp_code,
                                                     mtran_btr_trans_code,
                                                     mtran_origin,
                                                     mtran_cur_code,
                                                     mtran_cur_symbol,
                                                     mtran_brn_code,
                                                     mtran_brn_sht_desc,
                                                     mtran_posted_by,
                                                     mtran_cur_rate,
                                                     mtran_client_polcy_no,
                                                     mtran_narrations,
                                                     mtran_rct_code,
                                                     mtran_rct_paymt_mode,
                                                     mtran_rct_paymt_memo,
                                                     mtran_agn_discount,
                                                     mtran_pol_batch_no,
                                                     mtran_other_ref1)
                         VALUES (
                             v_mtran_no,
                             d.rde_captured_date,
                             TRUNC (SYSDATE),
                             d.rde_receipt_no,
                             NULL,
                             'RC-JV',
                             d.rde_drcr,
                             v_clnt_sht_desc,
                             'D',
                             v_client_code,                     --acc sht desc
                             -v_alloc_amt,
                             -v_alloc_amt,
                             'Y',
                             -v_alloc_amt,
                             d.rde_captured_date,
                             v_ggt_trans_no,
                             NULL,
                             'JV',
                             'U',
                             d.rde_cur_code,
                             tqc_interfaces_pkg.currencysymbol (
                                 d.rde_cur_code),
                             d.rde_brh_code,
                             fms_interfaces_pkg.brh_name (d.rde_brh_code,
                                                          'S'),
                             tqc_interfaces_pkg.username (d.rde_captured_by),
                             v_cur_rate,
                             v_policy_no,
                             d.rde_remarks,
                             d.rde_rct_no,
                             NULL,
                             NULL,
                             NULL,
                             v_pol_batch_no,
                             NULL);

                IF v_agnt_code != 0
                THEN
                    v_com_inclusive := 'N';
                ELSE
                    v_com_inclusive := 'Y';
                    v_VAT_inclusive := 'Y';
                    v_client_type := 'D';
                    v_tran_sign := 1;

                    -- move the credit from the direct debtor acc to the right debtors acc
                    BEGIN
                        INSERT INTO gin_gl_transactions (
                                        gltran_no,
                                        gltran_auth_date,
                                        gltran_dc,
                                        gltran_trnt_code,
                                        gltran_amount,
                                        gltran_amount_bcur,
                                        gltran_gltran_acc,
                                        gltran_contra_acc,
                                        gltran_usrname,
                                        gltran_tran_no,
                                        gltran_pol_policy_no,
                                        gltran_u_c_trans,
                                        gltran_claim_no,
                                        gltran_cur_code,
                                        gltran_cur_symbol,
                                        gltran_cur_rate,
                                        gltran_scl_code,
                                        gltran_pro_code,
                                        gltran_btr_trans_code,
                                        gltran_level,
                                        gltran_brn_code)
                                 VALUES (
                                        TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                                     || gin_gltran_no_seq.NEXTVAL,
                                     TRUNC (SYSDATE),
                                     DECODE (v_tran_sign, 1, 'D', 'C'),
                                     'JV',
                                     NVL (v_alloc_amt, 0),
                                     NVL (v_alloc_amt, 0) / v_cur_rate,
                                     DECODE (
                                         gin_interfaces_pkg.interface_enabled (
                                             'UW_TRANS'),
                                         'Y', gin_interfaces_pkg.sl_control_acc (
                                                  'GIS',
                                                  v_client_type)),
                                     DECODE (
                                         gin_interfaces_pkg.interface_enabled (
                                             'UW_TRANS'),
                                         'Y', gin_interfaces_pkg.sl_control_acc (
                                                  'GIS',
                                                  v_transfer_client_type)),
                                     v_user_name,
                                     v_ggt_trans_no,
                                     NULL,
                                     'U',
                                     NULL,
                                     d.rde_cur_code,
                                     tqc_interfaces_pkg.currencysymbol (
                                         d.rde_cur_code),
                                     v_cur_rate,
                                     NULL,
                                     NULL,
                                     'JV',
                                     'U',
                                     d.rde_brh_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('Unable to post JVS to the GL');
                    END;

                    BEGIN
                        gin_interfaces_pkg.create_gl_voucher (
                            v_ggt_trans_no,
                            'JV NO. ' || d.rde_receipt_no,
                            v_user_name,
                            v_client_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error Creating GL Voucher for JVS...'
                                || SQLERRM);
                    END;
                END IF;

                gis_accounts_utilities.knock_off_transactions (
                    v_mtran_no,
                    d.rde_receipt_no,
                    v_mtran_dr_no,
                    v_com_inclusive,
                    TRUNC (SYSDATE),
                    v_cr_bal,
                    v_cr_com,
                    v_alloc_amt,
                    v_vat_inclusive);

                BEGIN
                    UPDATE gin_receipt_deposits
                       SET rde_allocated_amt =
                                 NVL (rde_allocated_amt, 0)
                               + NVL (v_alloc_amt, 0),
                           rde_balance =
                               NVL (rde_balance, 0) + NVL (v_alloc_amt, 0)
                     WHERE rde_code = d.rde_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error updating deposits...');
                END;
            END LOOP;
        ELSE
            NULL;
        END IF;
    END;

    FUNCTION trans_balance (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_bal   NUMBER;
    BEGIN
        BEGIN
            SELECT (  (  NVL (mtran_net_amt, 0)
                       + ABS (
                             (NVL (mtran_commission, 0) + NVL (mtran_whtx, 0))))
                    - (  (  ABS (NVL (mtran_comm_payable, 0))
                          - NVL (mtran_whtx_payable, 0))
                       + NVL (mtran_settlement, 0)))
              INTO v_bal
              FROM gin_master_transactions
             WHERE mtran_no = v_mtran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_bal := 0;
        END;

        RETURN v_bal;
    END;

    PROCEDURE auth_tax_remmitance (v_vap_code     NUMBER,
                                   v_user_name    VARCHAR2,
                                   v_spr_code     NUMBER,
                                   v_pay_method   VARCHAR2 DEFAULT 'CHQ',
                                   v_type         VARCHAR2)
    IS
    BEGIN
        UPDATE gin_tax_remmittance
           SET vap_authorized = 'Y',
               vap_authorized_by = v_user_name,
               vap_authorize_date = SYSDATE
         WHERE vap_code = v_vap_code;

        gin_interfaces_pkg.process_tax_pyments (v_vap_code,
                                                v_user_name,
                                                v_spr_code,
                                                v_pay_method,
                                                v_type);
    END;

    FUNCTION get_pol_trans_balance (v_pol_batch_no IN NUMBER)
        RETURN NUMBER
    IS
        v_bal   NUMBER;
    BEGIN
        BEGIN
            SELECT (  (  NVL (mtran_net_amt, 0)
                       + ABS (
                             (NVL (mtran_commission, 0) + NVL (mtran_whtx, 0))))
                    - (  (  ABS (NVL (mtran_comm_payable, 0))
                          - NVL (mtran_whtx_payable, 0))
                       + NVL (mtran_settlement, 0)))
              INTO v_bal
              FROM gin_master_transactions
             WHERE mtran_pol_batch_no = v_pol_batch_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_bal := 0;
        END;

        RETURN v_bal;
    END;

    PROCEDURE auto_allocate_old_trans (v_clientcode   NUMBER,
                                       v_clienttype   VARCHAR2,
                                       v_date         DATE)
    IS
        CURSOR cr IS
              SELECT cr.mtran_no                   crno,
                     cr.mtran_client_code          crclntcode,
                     cr.mtran_client_type          crclntype,
                     NVL (cr.mtran_balance, 0)     crbal,
                     cr.mtran_date                 crdate,
                     mtran_ref_no                  crrefno
                FROM gin_master_transactions cr
               WHERE     NVL (cr.mtran_authorised, 'N') = 'Y'
                     AND cr.mtran_dc = 'C'
                     AND NVL (cr.mtran_balance, 0) != 0
                     AND TRUNC (cr.mtran_date) <= v_date
                     AND cr.mtran_client_code = v_clientcode
                     AND cr.mtran_client_type = v_clienttype
                     AND (cr.mtran_client_code, cr.mtran_client_type) IN
                             (  SELECT b.mtran_client_code, b.mtran_client_type
                                  FROM gin_master_transactions b
                                 WHERE     TRUNC (b.mtran_date) <= v_date
                                       AND b.mtran_client_code =
                                           cr.mtran_client_code
                                       AND b.mtran_client_type =
                                           cr.mtran_client_type
                              GROUP BY b.mtran_client_type, b.mtran_client_code
                                HAVING SUM (NVL (b.mtran_balance, 0)) = 0)
            ORDER BY mtran_date;

        CURSOR dr (v_client_code NUMBER, v_client_type VARCHAR2)
        IS
              SELECT mtran_no              drno,
                     mtran_ref_no          drrefno,
                     mtran_balance         drbal,
                     mtran_date,
                     mtran_client_code     drclntcode,
                     mtran_client_type     drclntype
                FROM gin_master_transactions
               WHERE     NVL (mtran_authorised, 'N') = 'Y'
                     AND mtran_dc = 'D'
                     AND TRUNC (mtran_date) <= v_date
                     AND mtran_client_type = v_client_type
                     AND mtran_client_code = v_client_code
                     AND NVL (mtran_balance, 0) != 0
            ORDER BY mtran_date;

        v_diff     NUMBER;
        v_alloc    NUMBER;
        v_cr_com   NUMBER := 0;
    BEGIN
        FOR c IN cr
        LOOP
            v_diff := ABS (c.crbal);

            FOR t IN dr (c.crclntcode, c.crclntype)
            LOOP
                IF ABS (t.drbal) > v_diff
                THEN
                    v_alloc := v_diff;
                ELSE
                    v_alloc := ABS (t.drbal);
                END IF;

                v_diff := NVL (v_diff, 0) - v_alloc;

                IF NVL (v_alloc, 0) != 0
                THEN
                    gis_accounts_utilities.knock_off_transactions (c.crno,
                                                                   c.crrefno,
                                                                   t.drno,
                                                                   'N',
                                                                   v_date,
                                                                   c.crbal,
                                                                   v_cr_com,
                                                                   t.drbal,
                                                                   'N');
                END IF;
            END LOOP;
        END LOOP;
    END;

    FUNCTION get_policy_taxes (v_batch_no IN NUMBER)
        RETURN NUMBER
    IS
        v_taxes   NUMBER;
    BEGIN
        SELECT   NVL (mtran_tl, 0)
               + NVL (mtran_phfund, 0)
               + NVL (mtran_sd, 0)
               + NVL (mtran_extras, 0)
               + NVL (mtran_road_safety, 0)
               + NVL (mtran_health, 0)
               + NVL (mtran_certchg, 0)
               + NVL (mtran_motor_levy, 0)
               + NVL (mtran_client_vat_amt, 0)
          INTO v_taxes
          FROM gin_master_transactions
         WHERE     mtran_pol_batch_no = v_batch_no
               AND mtran_dc = 'D'
               AND NVL (mtran_authorised, 'N') = 'Y';

        RETURN (v_taxes);
    END;

    FUNCTION getpaidprem2 (v_pol_batch_no   IN NUMBER,
                           v_agn_code       IN NUMBER,
                           v_clnt_code      IN NUMBER,
                           v_value_type     IN VARCHAR2)
        RETURN NUMBER
    IS
        v_settled       gin_master_transactions.mtran_amount%TYPE;
        v_balance       gin_master_transactions.mtran_amount%TYPE;
        v_act_code      NUMBER;
        v_client_type   VARCHAR2 (5);
        v_client_code   NUMBER;
    BEGIN
        IF v_agn_code = 0
        THEN
            v_client_type := 'D';
            v_client_code := v_clnt_code;

            BEGIN
                SELECT mtran_settlement, mtran_balance
                  INTO v_settled, v_balance
                  FROM gin_master_transactions
                 WHERE     mtran_client_code = v_client_code
                       AND mtran_client_type = v_client_type
                       AND mtran_pol_batch_no = v_pol_batch_no;
            -- AND mtran_tran_type != 'SF';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_settled := NULL;
                    v_balance := NULL;
            END;
        ELSE
            v_client_code := v_agn_code;

            SELECT agn_act_code
              INTO v_act_code
              FROM tqc_agencies
             WHERE agn_code = v_agn_code;

            IF v_act_code IN (2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              16,
                              32,
                              25)
            THEN
                BEGIN
                    SELECT mtran_settlement, mtran_balance
                      INTO v_settled, v_balance
                      FROM gin_master_transactions
                     WHERE     mtran_client_code = v_client_code
                           AND mtran_client_type NOT IN ('D', 'R')
                           AND mtran_pol_batch_no = v_pol_batch_no;
                -- AND mtran_tran_type != 'SF';
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        v_settled := NULL;
                        v_balance := NULL;
                END;
            END IF;
        END IF;

        IF v_value_type = 'B'
        THEN
            RETURN v_balance;
        ELSE
            RETURN v_settled;
        END IF;
    END;

    FUNCTION get_pol_taxes (v_pol_batch_no   IN NUMBER,
                            v_value_type     IN VARCHAR2)
        RETURN NUMBER
    IS
        v_taxes         gin_master_transactions.mtran_amount%TYPE;
        v_sticker_fee   gin_master_transactions.mtran_amount%TYPE;
    BEGIN
        SELECT SUM (NVL (ptx_amount, 0)),
               SUM (
                   DECODE (ptx_trac_trnt_code,
                           'CERTCHG', NVL (ptx_amount, 0)))
          INTO v_taxes, v_sticker_fee
          FROM gin_policy_taxes, gin_transaction_types
         WHERE     ptx_pol_batch_no = v_pol_batch_no
               AND trnt_code = ptx_trac_trnt_code;

        IF v_value_type = 'T'
        THEN
            RETURN v_taxes;
        ELSE
            IF v_value_type = 'S'
            THEN
                RETURN v_sticker_fee;
            END IF;
        END IF;
    END;

    PROCEDURE clean_clnt_allocs (v_clnt_code     IN NUMBER,
                                 v_client_type   IN VARCHAR2)
    IS
        CURSOR tmap IS
              SELECT tmap_amount             alloc,
                     tmap_drcr               dc,
                     tmap_code               tmap,
                     cr.mtran_no             crno,
                     cr.mtran_dc             crdc,
                     cr.mtran_net_amt        crnet,
                     cr.mtran_settlement     crset,
                     cr.mtran_balance        crbal,
                     dr.mtran_no             drno,
                     dr.mtran_dc             drdc,
                     dr.mtran_net_amt        drnet,
                     dr.mtran_settlement     drset,
                     dr.mtran_balance        drbal
                FROM gin_tran_mapping,
                     gin_master_transactions cr,
                     gin_master_transactions dr
               WHERE     tmap_mtran_no = cr.mtran_no
                     AND tmap_check_mtran_no = dr.mtran_no
                     AND (   (    dr.mtran_client_code = v_clnt_code
                              AND dr.mtran_client_type = v_client_type)
                          OR (    cr.mtran_client_code = v_clnt_code
                              AND cr.mtran_client_type = v_client_type))
            ORDER BY tmap_code;
    BEGIN
        UPDATE gin_master_transactions
           SET mtran_settlement = 0, mtran_balance = mtran_net_amt
         WHERE     mtran_client_code = v_clnt_code
               AND mtran_client_type = v_client_type
               AND NVL (mtran_authorised, 'N') = 'Y';

        FOR t IN tmap
        LOOP
            gis_accounts_utilities.clean_allocations (t.tmap);
        END LOOP;
    END;

    PROCEDURE clean_allocations (v_tmap_code IN NUMBER)
    IS
        CURSOR tmap IS
              SELECT *
                FROM gin_tran_mapping
               WHERE tmap_code = v_tmap_code AND NVL (tmap_amount, 0) != 0
            ORDER BY tmap_code;

        v_undo         VARCHAR2 (1);
        v_settle_amt   NUMBER;
        v_bal1         NUMBER;
        v_bal2         NUMBER;
        v_sett1        NUMBER;
        v_sett2        NUMBER;
        v_auth1        VARCHAR2 (2);
        v_auth2        VARCHAR2 (2);
        v_cr_dc        VARCHAR2 (2);
        v_dr_dc        VARCHAR2 (2);
    BEGIN
        FOR t IN tmap
        LOOP
            v_settle_amt := t.tmap_amount;

            IF t.tmap_drcr = 'C'
            THEN
                v_undo := 'N';
            ELSE
                v_undo := 'Y';
            END IF;

            SELECT NVL (mtran_balance, 0),
                   NVL (mtran_settlement, 0),
                   NVL (mtran_authorised, 'N'),
                   mtran_dc
              INTO v_bal1,
                   v_sett1,
                   v_auth1,
                   v_cr_dc
              FROM gin_master_transactions
             WHERE mtran_no = t.tmap_mtran_no;

            SELECT NVL (mtran_balance, 0),
                   NVL (mtran_settlement, 0),
                   NVL (mtran_authorised, 'N'),
                   mtran_dc
              INTO v_bal2,
                   v_sett2,
                   v_auth2,
                   v_dr_dc
              FROM gin_master_transactions
             WHERE mtran_no = t.tmap_check_mtran_no;

            --dbms_output.put_line(v_dc1||'='||v_dc2||'='||v_auth1||'='||v_auth2);
            IF     v_cr_dc != v_dr_dc
               AND v_auth1 = 'Y'
               AND v_auth2 = 'Y'
               AND v_cr_dc = 'C'
               AND v_dr_dc = 'D'
            THEN
                IF v_undo = 'N'
                THEN
                    v_settle_amt :=
                        LEAST (ABS (v_bal1),
                               ABS (v_bal2),
                               ABS (v_settle_amt));
                ELSE
                    v_settle_amt :=
                        LEAST (ABS (v_sett1),
                               ABS (v_sett2),
                               ABS (v_settle_amt));
                END IF;
            ELSE
                v_settle_amt := 0;
            END IF;

            DBMS_OUTPUT.put_line ('v_settle_amt=' || v_settle_amt);

            UPDATE gin_master_transactions
               SET mtran_balance =
                         NVL (mtran_balance, 0)
                       - (  DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
                          * ABS (NVL (v_settle_amt, 0))
                          * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
                   mtran_settlement =
                         NVL (mtran_settlement, 0)
                       + (  DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
                          * ABS (NVL (v_settle_amt, 0))
                          * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1)))
             WHERE mtran_no = t.tmap_mtran_no;

            -- dbms_output.put_line(2222);
            UPDATE gin_master_transactions
               SET mtran_balance =
                         NVL (mtran_balance, 0)
                       - (  DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
                          * ABS (NVL (v_settle_amt, 0))
                          * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1))),
                   mtran_settlement =
                         NVL (mtran_settlement, 0)
                       + (  DECODE (SIGN (NVL (mtran_net_amt, 0)), -1, -1, 1)
                          * ABS (NVL (v_settle_amt, 0))
                          * (DECODE (NVL (v_undo, 'N'), 'Y', -1, 1)))
             WHERE mtran_no = t.tmap_check_mtran_no;

            -- dbms_output.put_line(3333);
            IF ABS (NVL (v_settle_amt, 0)) != ABS (NVL (t.tmap_amount, 0))
            THEN
                IF NVL (t.tmap_amount_b4_cleaning, 0) = 0
                THEN
                    UPDATE gin_tran_mapping
                       SET tmap_amount = v_settle_amt,
                           tmap_amount_b4_cleaning = t.tmap_amount
                     WHERE tmap_code = t.tmap_code;
                ELSE
                    UPDATE gin_tran_mapping
                       SET tmap_amount = v_settle_amt
                     WHERE tmap_code = t.tmap_code;
                END IF;
            END IF;
        END LOOP;
    END;

    /* COMMENTED BY KARANI ON 19/09/2016 FOR CONSOLIDATION
    FUNCTION update_commission (
     v_cr_mtran_no IN NUMBER,
     v_cr_ref_no IN VARCHAR2,
     v_dr_mtran_no IN NUMBER,
     v_dr_ref_no IN VARCHAR2,
     v_comm_amt IN NUMBER,
     v_brn_code IN NUMBER,
     v_agnt_code IN NUMBER,
     v_cur_code IN NUMBER,
     v_include_comm IN VARCHAR2 DEFAULT 'Y',
     v_include_vat IN VARCHAR2 DEFAULT 'Y'
     )
     RETURN NUMBER
     IS
     v_mtran_no NUMBER;
     v_user VARCHAR2 (25);
     v_cop_code NUMBER;
     v_act_wthtx NUMBER := 0;
     v_gross_comm NUMBER;
     v_net_comm NUMBER;
     v_whtx NUMBER;
     v_pol_pro_code NUMBER;
     v_pmod_code NUMBER;
     v_act_type VARCHAR2 (3);
     v_client_type VARCHAR2 (3);
     v_mkt_agn_code tqc_agencies.agn_code%TYPE;
     v_pol_batch_no gin_policies.pol_batch_no%TYPE;
     v_pol_wthtx_appl VARCHAR2 (1);
     v_pmod_sht_desc tqc_payment_modes.pmod_sht_desc%TYPE;
     v_instal_comm NUMBER;
     v_instal_net NUMBER;
     v_instal_wht NUMBER;
     v_comm_diff NUMBER;
     v_commission NUMBER;
     v_comm_payable NUMBER;
     v_comm_paid NUMBER;
     v_comm_pyts NUMBER;
     v_rnd NUMBER;
     v_vat_rate NUMBER;
     v_vat_amt NUMBER;
     v_dr_mtran_whtx NUMBER;
     v_maxcomm_amt NUMBER;
     v_dr_net_comm NUMBER;

     CURSOR dr_installments
     IS
     SELECT *
     FROM gin_pol_trans_installs
     WHERE ptins_mtran_no = v_dr_mtran_no
     ORDER BY ptins_install_no;
     BEGIN
     --DBMS_OUTPUT.PUT_LINE(121212);
     --RAISE_ERROR('LEVEL 2'||6666);
     BEGIN
     SELECT mtran_client_type, mtran_pol_batch_no, mtran_pmod_code,
     mtran_pro_code, mtran_commission, mtran_comm_payable,
     mtran_comm_paid, mtran_whtx
     INTO v_client_type, v_pol_batch_no, v_pmod_code,
     v_pol_pro_code, v_commission, v_comm_payable,
     v_comm_paid, v_dr_mtran_whtx
     FROM gin_master_transactions
     WHERE mtran_no = v_dr_mtran_no;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error determining account type...');
     END;

     --IF
     v_pol_wthtx_appl :=
     gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');

     IF NVL (v_client_type, 'X') <> 'D'
     THEN
     IF v_pol_wthtx_appl = 'Y'
     THEN
     BEGIN
     SELECT act_wthtx_rate, act_type_sht_desc, act_vat_rate
     INTO v_act_wthtx, v_act_type, v_vat_rate
     FROM tqc_account_types, tqc_agencies
     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ( 'Error 1 getting withholding tax rate...here'
     || v_agnt_code
     );
     END;
     ELSE
     BEGIN
     SELECT act_type_sht_desc, act_vat_rate
     INTO v_act_type, v_vat_rate
     FROM tqc_account_types, tqc_agencies
     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;

     v_act_wthtx := 0;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error getting withholding tax rate...');
     END;
     END IF;
     ELSE
     BEGIN
     SELECT pol_mktr_agn_code
     INTO v_mkt_agn_code
     FROM gin_policies
     WHERE pol_batch_no = v_pol_batch_no;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error getting marketer attached...');
     END;

     BEGIN
     SELECT act_wthtx_rate, act_type_sht_desc
     INTO v_act_wthtx, v_act_type
     FROM tqc_account_types, tqc_agencies
     WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error getting withholding tax rate...');
     END;
     END IF;

     BEGIN
     SELECT param_value
     INTO v_rnd
     FROM gin_parameters
     WHERE param_name = 'OVERRIDE_COMM_RNDOFF'
     AND param_status = 'ACTIVE';
     EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     BEGIN
     SELECT cur_rnd
     INTO v_rnd
     FROM tqc_currencies
     WHERE cur_code = v_cur_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_when_others ('Error selecting rounding factor');
     END;
     WHEN OTHERS
     THEN
     raise_error
     ('Error fetching override commission rounding parameter...');
     END;

     v_dr_net_comm :=
     ABS (NVL (v_commission, 0))
     - ABS (NVL (v_dr_mtran_whtx, 0));

     IF ABS (NVL (v_comm_amt, 0)) > ABS (NVL (v_dr_net_comm, 0))
     THEN
     v_maxcomm_amt := v_dr_net_comm;
     ELSE
     v_maxcomm_amt := v_comm_amt;
     END IF;

     --v_gross_comm := v_comm_amt;
     --v_whtx := v_act_wthtx/(100+v_act_wthtx) * v_comm_amt ;
     --v_net_comm := v_gross_comm - v_whtx;
     --IF NVL(v_due_vat_amt,0) =0 TH(NVL(v_commission,0))+(NVL(v_dr_mtran_whtx,0)EN
     IF NVL (v_act_wthtx, 0) != 0
     THEN
     --v_gross_comm :=ROUND (100 / (100 - NVL (v_act_wthtx, 0)) * NVL (v_comm_amt, 0),v_rnd); to remove round off
     -- v_gross_comm :=ROUND (100 / (100 - NVL (v_act_wthtx, 0)) * NVL (v_comm_amt, 0));
     v_gross_comm :=
     ROUND (100 / (100 - NVL (v_act_wthtx, 0))
     * NVL (v_maxcomm_amt, 0));
     -- RAISE_ERROR(v_act_wthtx||'='||v_comm_amt||'='||v_gross_comm||'='||v_rnd);
     -- v_whtx := v_gross_comm - v_comm_amt;
     v_whtx := v_gross_comm - v_maxcomm_amt;
     ELSE
     --v_gross_comm := v_comm_amt;
     v_gross_comm := v_maxcomm_amt;
     v_whtx := 0;
     END IF;

     IF NVL (v_vat_rate, 0) != 0
     THEN
     v_vat_amt :=
     ROUND (NVL (v_vat_rate, 0) / 100 * NVL (v_maxcomm_amt, 0),
     v_rnd);
     END IF;

     --v_net_comm := v_comm_amt;
     -- v_net_comm := NVL (v_comm_amt, 0) - NVL (v_whtx, 0) + NVL(v_vat_amt,0);
     v_net_comm :=
     NVL (v_maxcomm_amt, 0) - NVL (v_whtx, 0)
     + NVL (v_vat_amt, 0);

     ---- RAISE_ERROR('v_gross_comm='||v_gross_comm||' v_whtx ='|| v_whtx ||'v_net_comm='||v_net_comm);
     -- ||' v_vat_amt='|| v_vat_amt);
     BEGIN
     SELECT SUM (NVL (cop_comm_amt, 0))
     INTO v_comm_pyts
     FROM gin_commission_pymts
     WHERE cop_dr_mtran_no = v_dr_mtran_no
     AND NVL (cop_withdrawn, 'N') = 'N';
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error determining commission paid on debit note...');
     END;

     IF ROUND (NVL (v_gross_comm, 0), v_rnd)
     - ROUND (ABS (v_commission), v_rnd) > 1
     THEN
     raise_error
     ( 'Total commission allocated '
     || NVL (v_comm_pyts, 0)
     || 'is greater than commission on debit note: v_commission'
     || ROUND (ABS (v_commission), v_rnd)
     );
     END IF;

     IF v_pmod_code IS NOT NULL
     THEN
     BEGIN
     SELECT pmod_sht_desc
     INTO v_pmod_sht_desc
     FROM tqc_payment_modes
     WHERE pmod_code = v_pmod_code;
     EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     v_pmod_sht_desc := NULL;
     WHEN OTHERS
     THEN
     raise_error ('Error getting payment method..');
     END;
     ELSE
     v_pmod_sht_desc := NULL;
     END IF;

     -- RAISE_ERROR(v_gross_comm);
     IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
     THEN
     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || gin_cop_code_seq.NEXTVAL
     )
     INTO v_cop_code
     FROM DUAL;

     INSERT INTO gin_commission_pymts
     (cop_code, cop_agn_code, cop_date, cop_dr_ref_no,
     cop_cr_ref_no, cop_comm_amt, cop_whdtax_amt,
     cop_ovride_comm_amt, cop_ovride_whdtax_amt,
     cop_agn_unit_mgr, cop_paid, cop_paid_chq_date,
     cop_paid_chq_no, cop_paid_vchr_no, cop_trans_no,
     cop_brn_code, cop_bru_code, cop_prepared_by,
     cop_cr_mtran_no, cop_dr_mtran_no, cop_whtx_rate,
     cop_net_comm, cop_cur_code, cop_scl_code, cop_act_type,
     cop_vat
     )
     VALUES (v_cop_code, v_agnt_code, TRUNC (SYSDATE), v_dr_ref_no,
     v_cr_ref_no, v_gross_comm, -v_whtx,
     NULL, NULL,
     NULL, 'N', NULL,
     NULL, NULL, NULL,
     v_brn_code, NULL, v_user,
     v_cr_mtran_no, v_dr_mtran_no, v_act_wthtx,
     v_net_comm, v_cur_code, v_pol_pro_code, v_act_type,
     v_vat_amt
     );
     ELSE
     v_comm_diff := v_gross_comm;

     -- RAISE_ERROR('v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     FOR install_recs IN dr_installments
     LOOP
     IF ( ABS (NVL (install_recs.ptins_comm_amt, 0))
     - ABS (NVL (install_recs.ptins_comm_paid, 0))
     ) <= 0
     THEN
     v_instal_comm := 0;
     v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
     -- RAISE_ERROR('1v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     ELSIF v_comm_diff >=
     ( ABS (NVL (install_recs.ptins_comm_amt, 0))
     - ABS (NVL (install_recs.ptins_comm_paid, 0))
     )
     THEN
     v_instal_comm :=
     ( ABS (NVL (install_recs.ptins_comm_amt, 0))
     - ABS (NVL (install_recs.ptins_comm_paid, 0))
     );
     v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
     -- RAISE_ERROR('2v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     ELSE
     v_instal_comm := v_comm_diff;
     v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
     -- RAISE_ERROR('3v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     END IF;

     -- RAISE_ERROR('4v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     IF NVL (v_instal_comm, 0) > 0
     THEN
     v_instal_net := v_instal_comm / v_gross_comm * v_net_comm;
     v_instal_wht := v_instal_comm / v_gross_comm * v_whtx;

     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || gin_cop_code_seq.NEXTVAL
     )
     INTO v_cop_code
     FROM DUAL;

    --DBMS_OUTPUT.PUT_LINE('5v_instal_net='||v_instal_net||' v_instal_comm='||v_instal_comm||' v_instal_wht='||v_instal_wht);
     INSERT INTO gin_commission_pymts
     (cop_code, cop_agn_code, cop_date,
     cop_dr_ref_no, cop_cr_ref_no, cop_comm_amt,
     cop_whdtax_amt, cop_ovride_comm_amt,
     cop_ovride_whdtax_amt, cop_agn_unit_mgr,
     cop_paid, cop_paid_chq_date, cop_paid_chq_no,
     cop_paid_vchr_no, cop_trans_no, cop_brn_code,
     cop_bru_code, cop_prepared_by, cop_cr_mtran_no,
     cop_dr_mtran_no, cop_whtx_rate, cop_net_comm,
     cop_cur_code, cop_scl_code, cop_act_type,
     cop_ptins_code, cop_vat
     )
     VALUES (v_cop_code, v_agnt_code, TRUNC (SYSDATE),
     v_dr_ref_no, v_cr_ref_no, v_instal_comm,
     -v_instal_wht, NULL,
     NULL, NULL,
     'N', NULL, NULL,
     NULL, NULL, v_brn_code,
     NULL, v_user, v_cr_mtran_no,
     v_dr_mtran_no, v_act_wthtx, v_instal_net,
     v_cur_code, v_pol_pro_code, v_act_type,
     install_recs.ptins_code, v_vat_amt
     );

     UPDATE gin_pol_trans_installs
     SET ptins_comm_paid =
     NVL (ptins_comm_paid, 0)
     + NVL (v_instal_comm, 0),
     ptins_cr_mtran_no = v_cr_mtran_no
     WHERE ptins_code = install_recs.ptins_code;
     END IF;

     EXIT WHEN v_comm_diff < 0;
     END LOOP;

     IF NVL (v_comm_diff, 0) != 0
     THEN
     raise_error
     ('Error on commission installments computation. Amount not fully allocated.'
     );
     END IF;
     END IF;

     IF NVL(v_include_comm,'Y') = 'Y' THEN
     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
    --v_gross_comm, -- SHOULD WE UPDATE THE NET COMMISSION OR GROSS COMMISSION. FIND OUT
     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_dr_mtran_no;

     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
     --v_gross_comm, -- SHOULD WE UPDATE GROSS COMMISSION. FIND OUT
     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_cr_mtran_no;
     ELSIF NVL(v_include_comm,'Y') = 'N' AND NVL(v_include_vat,'Y') = 'N' THEN
     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
     mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,

     mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
     mtran_vat_paid =
     NVL (mtran_vat_paid, 0)
     + NVL (v_vat_amt, 0),

     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_dr_mtran_no;

     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
     mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,

     mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
     mtran_vat_paid =
     NVL (mtran_vat_paid, 0)
     + NVL (v_vat_amt, 0),

     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_cr_mtran_no;
     ELSIF NVL(v_include_comm,'Y') = 'N' AND NVL(v_include_vat,'Y') = 'Y' THEN
     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
     mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,

     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_dr_mtran_no;

     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
     mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,

     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_cr_mtran_no;
     END IF;

     RETURN (v_gross_comm);
     --UPDATE GIN_MASTER_TRANSACTIONS SET
     --MTRAN_BALANCE =
     END;

     FUNCTION update_commission (
     v_cr_mtran_no IN NUMBER,
     v_cr_ref_no IN VARCHAR2,
     v_dr_mtran_no IN NUMBER,
     v_dr_ref_no IN VARCHAR2,
     v_due_comm_amt IN NUMBER,
     v_due_vat_amt IN NUMBER,
     v_amt_available IN NUMBER,
     v_brn_code IN NUMBER,
     v_agnt_code IN NUMBER,
     v_cur_code IN NUMBER,
     v_include_comm IN VARCHAR2 DEFAULT 'Y',
     v_include_vat IN VARCHAR2 DEFAULT 'Y'
     )
     RETURN NUMBER
     IS
     v_mtran_no NUMBER;
     v_user VARCHAR2 (25);
     v_cop_code NUMBER;
     v_act_wthtx NUMBER := 0;
     v_gross_comm NUMBER;
     v_net_comm NUMBER;
     v_whtx NUMBER;
     v_pol_pro_code NUMBER;
     v_rnd NUMBER;
     v_over_rnd NUMBER;
     v_client_type VARCHAR2 (3);
     v_act_type VARCHAR2 (3);
     v_pmod_sht_desc tqc_payment_modes.pmod_sht_desc%TYPE;
     v_pmod_code NUMBER;
     v_instal_comm NUMBER;
     v_instal_net NUMBER;
     v_instal_wht NUMBER;
     v_comm_diff NUMBER;
     v_commission NUMBER;
     v_comm_payable NUMBER;
     v_comm_paid NUMBER;
     v_comm_pyts NUMBER;
     v_mkt_agn_code tqc_agencies.agn_code%TYPE;
     v_pol_batch_no gin_policies.pol_batch_no%TYPE;
     v_pol_wthtx_appl VARCHAR2 (1);
     v_comm_amt NUMBER;
     v_vat_amt NUMBER;

     CURSOR dr_installments
     IS
     SELECT *
     FROM gin_pol_trans_installs
     WHERE ptins_mtran_no = v_dr_mtran_no
     ORDER BY ptins_install_no;
     BEGIN
     BEGIN
     SELECT mtran_client_type, mtran_pol_batch_no, mtran_pmod_code,
     mtran_pro_code, mtran_commission, mtran_comm_payable,
     mtran_comm_paid
     INTO v_client_type, v_pol_batch_no, v_pmod_code,
     v_pol_pro_code, v_commission, v_comm_payable,
     v_comm_paid
     FROM gin_master_transactions
     WHERE mtran_no = v_dr_mtran_no;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error determining account type...');
     END;

     IF v_pol_pro_code IS NULL AND v_pol_batch_no IS NOT NULL
     THEN
     SELECT pol_pro_code
     INTO v_pol_pro_code
     FROM gin_policies
     WHERE pol_batch_no = v_pol_batch_no;
     END IF;

     --RAISE_ERROR('MERCY IS HERE');
     --IF
     -- raise_error('nnnnnnn V_agnt_code '||V_agnt_code);
     -- SELECT ACT_WTHTX_RATE,ACT_TYPE_SHT_DESC
     -- INTO v_act_wthtx,v_act_type
     -- FROM tqc_account_types
     -- WHERE ACT_CODE = V_agnt_code;
     v_pol_wthtx_appl :=
     gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');

    --raise_error('v_client_type'||v_client_type);
     IF NVL (v_client_type, 'X') <> 'D'
     THEN
     IF v_pol_wthtx_appl = 'Y'
     THEN
     BEGIN
     SELECT act_wthtx_rate, act_type_sht_desc
     INTO v_act_wthtx, v_act_type
     FROM tqc_account_types, tqc_agencies
     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error getting withholding tax rate...');
     END;
     ELSE
     BEGIN
     SELECT act_type_sht_desc
     INTO v_act_type
     FROM tqc_account_types, tqc_agencies
     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;

     v_act_wthtx := 0;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error getting withholding tax rate...');
     END;
     END IF;
     ELSE
     BEGIN
     SELECT pol_mktr_agn_code
     INTO v_mkt_agn_code
     FROM gin_policies
     WHERE pol_batch_no = v_pol_batch_no;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error getting marketer attached...');
     END;

     IF NVL (v_client_type, 'X') <> 'D'
     THEN
     BEGIN
     SELECT act_wthtx_rate, act_type_sht_desc
     INTO v_act_wthtx, v_act_type
     FROM tqc_account_types, tqc_agencies
     WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ( 'Error getting withholding tax rate...'
     || v_act_wthtx
     || 'v_act_type'
     || v_act_type
     );
     END;
     END IF;
     END IF;

     BEGIN
     SELECT param_value
     INTO v_rnd
     FROM gin_parameters
     WHERE param_name = 'OVERRIDE_COMM_RNDOFF'
     AND param_status = 'ACTIVE';
     EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     BEGIN
     SELECT cur_rnd
     INTO v_rnd
     FROM tqc_currencies
     WHERE cur_code = v_cur_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_when_others ('Error selecting rounding factor');
     END;
     WHEN OTHERS
     THEN
     raise_error
     ('Error fetching override commission rounding parameter...');
     END;

     --v_gross_comm := v_comm_amt;
     --v_whtx := v_act_wthtx/(100+v_act_wthtx) * v_comm_amt ;
     --v_net_comm := v_gross_comm - v_whtx;
     --v_act_wthtx := 5;
     IF NVL (v_client_type, 'X') <> 'D'
     THEN
     IF NVL (v_due_vat_amt, 0) != 0
     THEN
     IF NVL (v_act_wthtx, 0) != 0
     THEN
     v_gross_comm :=
     ROUND ( 100
     / (100 - NVL (v_act_wthtx, 0))
     * NVL (v_amt_available, 0),
     v_rnd
     );
     ELSE
     v_gross_comm := v_amt_available;
     END IF;

     v_net_comm := v_amt_available;
     v_whtx :=
     ROUND (NVL (v_gross_comm, 0), v_rnd)
     - ROUND (NVL (v_net_comm, 0), v_rnd);

     IF v_gross_comm > v_due_comm_amt
     THEN
     v_gross_comm := v_due_comm_amt;
     v_whtx :=
     ROUND (NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
     v_net_comm := NVL (v_gross_comm, 0) - NVL (v_whtx, 0);
     END IF;
     ELSE
     IF NVL (v_act_wthtx, 0) != 0
     THEN
     v_whtx :=
     ROUND ( NVL (v_act_wthtx, 0)
     / (100)
     * NVL (v_due_comm_amt, 0));
     END IF;
     IF NVL(v_due_comm_amt,0)!=0 THEN ---Masinde Intermediary where commssion is not allowed
     --raise_Error(' v_due_comm_amt '||v_due_comm_amt);
     v_gross_comm :=
     ROUND ( NVL (v_due_comm_amt, 0)
     / ( NVL (v_due_vat_amt, 0)
     + NVL (v_due_comm_amt, 0)
     - NVL (v_whtx, 0)
     )
     * v_amt_available,
     v_rnd
     );
     --Raise_error('v_gross_comm'||v_gross_comm||'v_amt_available'||v_amt_available);
     v_vat_amt :=
     ROUND ( NVL (v_due_vat_amt, 0)
     / ( NVL (v_due_vat_amt, 0)
     + NVL (v_due_comm_amt, 0)
     - NVL (v_whtx, 0)
     )
     * NVL (v_amt_available, 0),
     v_rnd
     );
     v_whtx :=
     ROUND ( NVL (v_whtx, 0)
     / ( NVL (v_due_vat_amt, 0)
     + NVL (v_due_comm_amt, 0)
     - NVL (v_whtx, 0)
     )
     * NVL (v_amt_available, 0),
     v_rnd
     );
     DBMS_OUTPUT.put_line ( 'v_comm_amt='
     || v_comm_amt
     || 'v_amt_available='
     || v_amt_available
     || 'v_due_vat_amt='
     || v_due_vat_amt
     || 'v_due_comm_amt='
     || v_due_comm_amt
     || 'v_vat_amt='
     || v_vat_amt
     || 'v_whtx='
     || v_whtx
     );
     v_net_comm :=
     ROUND ( NVL (v_gross_comm, 0)
     - NVL (v_whtx, 0)
     + NVL (v_vat_amt, 0),
     v_rnd
     );
     DBMS_OUTPUT.put_line ( 'v_due_comm_amt='
     || v_due_comm_amt
     || 'v_gross_comm='
     || v_gross_comm
     );

     IF v_gross_comm > v_due_comm_amt
     THEN
     v_gross_comm := v_due_comm_amt;
     v_whtx :=
     ROUND (NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
     v_vat_amt := v_due_vat_amt;
     v_net_comm :=
     NVL (v_gross_comm, 0) - NVL (v_whtx, 0)
     + NVL (v_vat_amt, 0);

     IF v_net_comm > v_amt_available
     THEN
     raise_error ('RRR');
     END IF;
     END IF;
     END IF;
     END IF;

     -- raise_Error('v_gross_comm='||v_gross_comm);
     IF v_pol_batch_no IS NULL
     THEN
     BEGIN
     SELECT pol_pmod_code
     INTO v_pmod_code
     FROM gin_policies
     WHERE pol_batch_no = v_pol_batch_no;
     EXCEPTION
     WHEN OTHERS
     THEN
     NULL;
     END;
     END IF;

     IF v_pmod_code IS NOT NULL
     THEN
     BEGIN
     SELECT pmod_sht_desc
     INTO v_pmod_sht_desc
     FROM tqc_payment_modes
     WHERE pmod_code = v_pmod_code;
     EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     v_pmod_sht_desc := NULL;
     WHEN OTHERS
     THEN
     raise_error ('Error getting payment method..');
     END;
     ELSE
     v_pmod_sht_desc := NULL;
     END IF;

    -- IF V_pmod_code IS NOT NULL THEN RAISE_ERROR('NVL(v_pmod_sht_desc ??? === '|| v_pmod_sht_desc);
     IF NVL(v_gross_comm,0)!=0 THEN
     IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
     THEN
     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || gin_cop_code_seq.NEXTVAL
     )
     INTO v_cop_code
     FROM DUAL;

     INSERT INTO gin_commission_pymts
     (cop_code,
     cop_agn_code,
     cop_date, cop_dr_ref_no, cop_cr_ref_no,
     cop_comm_amt, cop_whdtax_amt, cop_ovride_comm_amt,
     cop_ovride_whdtax_amt, cop_agn_unit_mgr, cop_paid,
     cop_paid_chq_date, cop_paid_chq_no,
     cop_paid_vchr_no, cop_trans_no, cop_brn_code,
     cop_bru_code, cop_prepared_by, cop_cr_mtran_no,
     cop_dr_mtran_no, cop_whtx_rate, cop_net_comm,
     cop_cur_code, cop_scl_code, cop_act_type
     )
     VALUES (v_cop_code,
     DECODE (v_client_type,
     'D', v_mkt_agn_code,
     v_agnt_code
     ),
     TRUNC (SYSDATE), v_dr_ref_no, v_cr_ref_no,
     v_gross_comm, -v_whtx, NULL,
     NULL, NULL, 'N',
     NULL, NULL,
     NULL, NULL, v_brn_code,
     NULL, v_user, v_cr_mtran_no,
     v_dr_mtran_no, v_act_wthtx, v_net_comm,
     v_cur_code, v_pol_pro_code, v_act_type
     );
     ELSE
     v_comm_diff := v_gross_comm;

     -- RAISE_ERROR('v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     FOR install_recs IN dr_installments
     LOOP
     IF ( ABS (NVL (install_recs.ptins_comm_amt, 0))
     - ABS (NVL (install_recs.ptins_comm_paid, 0))
     ) <= 0
     THEN
     v_instal_comm := 0;
     v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
     -- RAISE_ERROR('1v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     ELSIF v_comm_diff >=
     ( ABS (NVL (install_recs.ptins_comm_amt, 0))
     - ABS (NVL (install_recs.ptins_comm_paid, 0))
     )
     THEN
     v_instal_comm :=
     ( ABS (NVL (install_recs.ptins_comm_amt, 0))
     - ABS (NVL (install_recs.ptins_comm_paid, 0))
     );
     v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
     -- RAISE_ERROR('2v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     ELSE
     v_instal_comm := v_comm_diff;
     v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
     -- RAISE_ERROR('3v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     END IF;

     -- RAISE_ERROR('4v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
     IF NVL (v_instal_comm, 0) > 0
     THEN
     v_instal_net :=
     ROUND (v_instal_comm / v_gross_comm * v_net_comm);
     v_instal_wht :=
     ROUND (v_instal_comm / v_gross_comm * v_whtx);

     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || gin_cop_code_seq.NEXTVAL
     )
     INTO v_cop_code
     FROM DUAL;

    --DBMS_OUTPUT.PUT_LINE('5v_instal_net='||v_instal_net||' v_instal_comm='||v_instal_comm||' v_instal_wht='||v_instal_wht);
     INSERT INTO gin_commission_pymts
     (cop_code, cop_agn_code, cop_date,
     cop_dr_ref_no, cop_cr_ref_no, cop_comm_amt,
     cop_whdtax_amt, cop_ovride_comm_amt,
     cop_ovride_whdtax_amt, cop_agn_unit_mgr,
     cop_paid, cop_paid_chq_date, cop_paid_chq_no,
     cop_paid_vchr_no, cop_trans_no, cop_brn_code,
     cop_bru_code, cop_prepared_by,
     cop_cr_mtran_no, cop_dr_mtran_no,
     cop_whtx_rate, cop_net_comm, cop_cur_code,
     cop_scl_code, cop_act_type,
     cop_ptins_code
     )
     VALUES (v_cop_code, v_agnt_code, TRUNC (SYSDATE),
     v_dr_ref_no, v_cr_ref_no, v_instal_comm,
     -v_instal_wht, NULL,
     NULL, NULL,
     'N', NULL, NULL,
     NULL, NULL, v_brn_code,
     NULL, v_user,
     v_cr_mtran_no, v_dr_mtran_no,
     v_act_wthtx, v_instal_net, v_cur_code,
     v_pol_pro_code, v_act_type,
     install_recs.ptins_code
     );

     UPDATE gin_pol_trans_installs
     SET ptins_comm_paid =
     NVL (ptins_comm_paid, 0)
     + NVL (v_instal_comm, 0),
     ptins_cr_mtran_no = v_cr_mtran_no
     WHERE ptins_code = install_recs.ptins_code;
     END IF;

     EXIT WHEN v_comm_diff < 0;
     END LOOP;

     IF NVL (v_comm_diff, 0) > 1
     THEN
     raise_error
     ( 'Error on commission installments computation. Amount not fully allocated.='
     || v_comm_diff
     );
     END IF;
     END IF;
     END IF;
     IF NVL(v_include_comm,'Y') = 'Y' THEN
     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
    --v_gross_comm, -- SHOULD WE UPDATE THE NET COMMISSION OR GROSS COMMISSION. FIND OUT
     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_dr_mtran_no;

     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
     --v_gross_comm, -- SHOULD WE UPDATE GROSS COMMISSION. FIND OUT
     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_cr_mtran_no;

     ELSIF NVL(v_include_comm,'Y') = 'N' AND NVL(v_include_vat,'Y') = 'N' THEN
     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
     mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,

     mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
     mtran_vat_paid =
     NVL (mtran_vat_paid, 0)
     + NVL (v_vat_amt, 0),

     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_dr_mtran_no;

     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
     mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,

     mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
     mtran_vat_paid =
     NVL (mtran_vat_paid, 0)
     + NVL (v_vat_amt, 0),

     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_cr_mtran_no;
     ELSIF NVL(v_include_comm,'Y') = 'N' AND NVL(v_include_vat,'Y') = 'Y' THEN
     UPDATE gin_master_transactions
     SET mtran_comm_payable = NVL (mtran_comm_payable, 0) + v_gross_comm,
     mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,

     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_dr_mtran_no;

     UPDATE gin_master_transactions
     SET mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,

     mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
     mtran_vat_payable =
     NVL (mtran_vat_payable, 0)
     + NVL (v_vat_amt, 0)
     WHERE mtran_no = v_cr_mtran_no;

     END IF;

     END IF;

     RETURN (v_gross_comm);

     END;
    */



    -- FUNCTION update_commission (v_cr_mtran_no IN NUMBER,
    -- v_cr_ref_no IN VARCHAR2,
    -- v_dr_mtran_no IN NUMBER,
    -- v_dr_ref_no IN VARCHAR2,
    -- v_comm_amt IN NUMBER,
    -- v_brn_code IN NUMBER,
    -- v_agnt_code IN NUMBER,
    -- v_cur_code IN NUMBER,
    -- v_include_comm IN VARCHAR2 DEFAULT 'Y',
    -- v_include_vat IN VARCHAR2 DEFAULT 'Y',
    -- v_comm_type IN VARCHAR2 DEFAULT 'COM')
    -- RETURN NUMBER
    -- IS
    -- v_mtran_no NUMBER;
    -- v_user VARCHAR2 (25);
    -- v_cop_code NUMBER;
    -- v_act_wthtx NUMBER := 0;
    -- v_gross_comm NUMBER;
    -- v_net_comm NUMBER;
    -- v_whtx NUMBER;
    -- v_pol_pro_code NUMBER;
    -- v_pmod_code NUMBER;
    -- v_act_type VARCHAR2 (3);
    -- v_client_type VARCHAR2 (3);
    -- v_mkt_agn_code tqc_agencies.agn_code%TYPE;
    -- v_pol_batch_no gin_policies.pol_batch_no%TYPE;
    -- v_pol_wthtx_appl VARCHAR2 (1);
    -- v_pmod_sht_desc tqc_payment_modes.pmod_sht_desc%TYPE;
    -- v_instal_comm NUMBER;
    -- v_instal_net NUMBER;
    -- v_instal_wht NUMBER;
    -- v_comm_diff NUMBER;
    -- v_commission NUMBER;
    -- v_comm_payable NUMBER;
    -- v_comm_paid NUMBER;
    -- v_comm_pyts NUMBER;
    -- v_rnd NUMBER;
    -- v_vat_rate NUMBER;
    -- v_vat_amt NUMBER;
    -- v_dr_mtran_whtx NUMBER;
    -- v_maxcomm_amt NUMBER;
    -- v_dr_net_comm NUMBER;
    -- v_dr_net_lta NUMBER;
    -- v_maxlta_amt NUMBER;
    -- v_mtran_lta_amt NUMBER;
    -- v_mtran_lta_payable NUMBER;
    -- v_mtran_lta_paid NUMBER;
    -- v_mtran_lta_whtx NUMBER;
    -- v_act_lta_whtx_rate NUMBER;
    -- v_lta_whtx NUMBER;
    -- v_gross_lta NUMBER;
    -- v_net_lta NUMBER;
    -- v_lta_diff NUMBER;
    -- v_aggregate_claws_gross NUMBER;
    -- v_aggregate_claws_whtax NUMBER;
    -- v_aggregate_claws_net NUMBER;
    -- v_user_name VARCHAR2(50):= pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
    --
    -- CURSOR dr_installments
    -- IS
    -- SELECT *
    -- FROM gin_pol_trans_installs
    -- WHERE ptins_mtran_no = v_dr_mtran_no
    -- ORDER BY ptins_install_no;
    -- BEGIN
    -- --DBMS_OUTPUT.PUT_LINE(121212);
    -- --RAISE_ERROR('LEVEL 2'||6666);
    -- BEGIN
    -- SELECT mtran_client_type,
    -- mtran_pol_batch_no,
    -- mtran_pmod_code,
    -- mtran_pro_code,
    -- mtran_commission,
    -- mtran_comm_payable,
    -- mtran_comm_paid,
    -- mtran_whtx,
    -- mtran_lta_amt,
    -- mtran_lta_payable,
    -- mtran_lta_paid,
    -- mtran_lta_whtx
    -- INTO v_client_type,
    -- v_pol_batch_no,
    -- v_pmod_code,
    -- v_pol_pro_code,
    -- v_commission,
    -- v_comm_payable,
    -- v_comm_paid,
    -- v_dr_mtran_whtx,
    -- v_mtran_lta_amt,
    -- v_mtran_lta_payable,
    -- v_mtran_lta_paid,
    -- v_mtran_lta_whtx
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_dr_mtran_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error determining account type...');
    -- END;
    --
    -- ----GET unutilized COMMISSION CLAWBACKS
    -- ----credit functionality updates
    -- IF NVL (v_include_comm, 'Y') = 'Y'
    -- THEN
    --
    --
    -- begin
    -- select sum(nvl(abs(coc_comm_amt),0)),sum(nvl(abs(coc_whdtax_amt),0)),sum(nvl(abs(coc_comm_amt),0)-nvl(abs(coc_whdtax_amt),0))
    -- into v_aggregate_claws_gross,v_aggregate_claws_whtax,v_aggregate_claws_net
    -- from gin_commission_clawbacks
    -- where coc_dr_mtran_no=v_dr_mtran_no
    -- and NVL(coc_utilized,'N')='N'
    -- and NVL(coc_paid,'N')='N'
    -- and NVL(coc_authorized,'N')='N';
    -- exception when others then
    -- v_aggregate_claws_gross:=0;
    -- v_aggregate_claws_whtax:=0;
    -- v_aggregate_claws_net:=0;
    --
    -- end;
    --
    -- ELSE
    -- v_aggregate_claws_gross:=0;
    -- v_aggregate_claws_whtax:=0;
    -- v_aggregate_claws_net:=0;
    -- END IF;
    --
    -- --IF
    -- v_pol_wthtx_appl :=
    -- gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');
    --
    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    -- IF v_pol_wthtx_appl = 'Y'
    -- THEN
    -- BEGIN
    -- SELECT act_wthtx_rate,
    -- act_type_sht_desc,
    -- act_vat_rate,
    -- act_lta_whtx_rate
    -- INTO v_act_wthtx,
    -- v_act_type,
    -- v_vat_rate,
    -- v_act_lta_whtx_rate
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error (
    -- 'Error 1 getting withholding tax rate...here'
    -- || v_agnt_code);
    -- END;
    -- ELSE
    -- BEGIN
    -- SELECT act_type_sht_desc, act_vat_rate
    -- INTO v_act_type, v_vat_rate
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    --
    -- v_act_wthtx := 0;
    -- v_act_lta_whtx_rate := 0;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting withholding tax rate...');
    -- END;
    -- END IF;
    -- ELSE
    -- BEGIN
    -- SELECT pol_mktr_agn_code
    -- INTO v_mkt_agn_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting marketer attached...');
    -- END;
    --
    -- BEGIN
    -- SELECT act_wthtx_rate, act_type_sht_desc, act_lta_whtx_rate
    -- INTO v_act_wthtx, v_act_type, v_act_lta_whtx_rate
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting withholding tax rate...');
    -- END;
    -- END IF;
    --
    -- BEGIN
    -- SELECT param_value
    -- INTO v_rnd
    -- FROM gin_parameters
    -- WHERE param_name = 'OVERRIDE_COMM_RNDOFF'
    -- AND param_status = 'ACTIVE';
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- BEGIN
    -- SELECT cur_rnd
    -- INTO v_rnd
    -- FROM tqc_currencies
    -- WHERE cur_code = v_cur_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_when_others ('Error selecting rounding factor');
    -- END;
    -- WHEN OTHERS
    -- THEN
    -- raise_error (
    -- 'Error fetching override commission rounding parameter...');
    -- END;
    --
    -- IF NVL (v_comm_type, 'COM') = 'COM'
    -- -- COMMISION TYPE IS COMMISION
    -- THEN
    -- v_dr_net_comm :=
    -- ABS (NVL (v_commission, 0)) - ABS (NVL (v_dr_mtran_whtx, 0));
    --
    -- IF ABS (NVL (v_comm_amt, 0)) > ABS (NVL (v_dr_net_comm, 0))
    -- THEN
    -- v_maxcomm_amt := v_dr_net_comm;
    -- ELSE
    -- v_maxcomm_amt := v_comm_amt;
    -- END IF;
    -- ELSE
    -- --COMMISSION TYPE IS ADM SO LETS CALCULATE THE ADMIN FEE
    -- v_dr_net_lta :=
    -- ABS (NVL (v_mtran_lta_amt, 0)) - ABS (NVL (v_mtran_lta_whtx, 0));
    --
    -- IF ABS (NVL (v_comm_amt, 0)) > ABS (NVL (v_dr_net_lta, 0))
    -- THEN
    -- v_maxlta_amt := v_dr_net_lta;
    -- ELSE
    -- v_maxlta_amt := v_comm_amt;
    -- END IF;
    -- END IF;
    --
    -- IF v_comm_type = 'COM'
    -- THEN
    -- IF NVL (v_act_wthtx, 0) != 0
    -- THEN
    -- v_gross_comm :=
    -- ROUND (
    -- 100 / (100 - NVL (v_act_wthtx, 0)) * NVL (v_maxcomm_amt, 0));
    -- v_whtx := v_gross_comm - v_maxcomm_amt;
    -- ELSE
    -- v_gross_comm := v_maxcomm_amt;
    -- v_whtx := 0;
    -- END IF;
    -- ELSIF v_comm_type = 'ADM'
    -- THEN
    -- IF NVL (v_act_lta_whtx_rate, 0) != 0
    -- THEN
    -- v_gross_lta :=
    -- ROUND (
    -- 100
    -- / (100 - NVL (v_act_lta_whtx_rate, 0))
    -- * NVL (v_maxlta_amt, 0));
    -- v_lta_whtx := v_gross_lta - v_maxlta_amt;
    -- ELSE
    -- v_gross_lta := v_maxlta_amt;
    -- v_lta_whtx := 0;
    -- END IF;
    -- END IF;
    --
    -- IF NVL (v_vat_rate, 0) != 0 AND v_comm_type = 'COM'
    -- THEN
    -- v_vat_amt :=
    -- ROUND (NVL (v_vat_rate, 0) / 100 * NVL (v_maxcomm_amt, 0), v_rnd);
    -- ELSE
    -- v_vat_amt := 0;
    -- END IF;
    --
    -- IF v_comm_type = 'COM'
    -- THEN
    -- v_net_comm :=
    -- NVL (v_maxcomm_amt, 0) - NVL (v_whtx, 0) + NVL (v_vat_amt, 0);
    -- ELSE
    -- v_net_lta := NVL (v_maxlta_amt, 0) - NVL (v_lta_whtx, 0);
    -- END IF;
    --
    -- --RAISE_ERROR('v_gross_comm='||v_gross_comm||' v_whtx ='|| v_whtx ||'v_net_comm='||v_net_comm
    -- -- ||' v_vat_amt='|| v_vat_amt);
    -- BEGIN
    -- SELECT SUM (NVL (cop_comm_amt, 0))
    -- INTO v_comm_pyts
    -- FROM gin_commission_pymts
    -- WHERE cop_dr_mtran_no = v_dr_mtran_no
    -- AND NVL (cop_withdrawn, 'N') = 'N';
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error (
    -- 'Error determining commission paid on debit note...');
    -- END;
    --
    -- IF ROUND (NVL (v_gross_comm, 0), v_rnd)
    -- - ROUND (ABS (v_commission), v_rnd) > 1
    -- AND NVL (v_comm_type, 'COM') = 'COM'
    -- THEN
    -- raise_error (
    -- 'Total commission allocated '
    -- || NVL (v_comm_pyts, 0)
    -- || 'is greater than commission on debit note: v_commission'
    -- || ROUND (ABS (v_commission), v_rnd));
    -- ELSIF ROUND (NVL (v_gross_lta, 0), v_rnd)
    -- - ROUND (ABS (v_mtran_lta_amt), v_rnd) > 1
    -- AND NVL (v_comm_type, 'COM') = 'COM'
    -- THEN
    -- raise_error (
    -- 'Total admin fee allocated '
    -- || NVL (v_comm_pyts, 0)
    -- || 'is greater than admin fee on debit note: v_mtran_lta_amt'
    -- || ROUND (ABS (v_mtran_lta_amt), v_rnd));
    -- END IF;
    --
    -- IF v_pmod_code IS NOT NULL
    -- THEN
    -- BEGIN
    -- SELECT pmod_sht_desc
    -- INTO v_pmod_sht_desc
    -- FROM tqc_payment_modes
    -- WHERE pmod_code = v_pmod_code;
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- v_pmod_sht_desc := NULL;
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting payment method..');
    -- END;
    -- ELSE
    -- v_pmod_sht_desc := NULL;
    -- END IF;
    --
    -- -- RAISE_ERROR(v_gross_comm);
    -- IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
    -- THEN
    -- SELECT TO_NUMBER (
    -- TO_CHAR (SYSDATE, 'YYYY') || gin_cop_code_seq.NEXTVAL)
    -- INTO v_cop_code
    -- FROM DUAL;
    --
    -- ---cater for commission clawbacks
    -- v_gross_comm:= sign(v_gross_comm)*(abs(v_gross_comm)-abs(v_aggregate_claws_gross));
    -- v_net_comm:= sign(v_net_comm)* (abs(v_net_comm)-abs(v_aggregate_claws_net));
    -- v_whtx:= sign(v_whtx)*(abs(v_whtx)-abs(v_aggregate_claws_whtax));
    --
    -- IF NVL (v_comm_type, 'COM') = 'COM'
    -- THEN
    -- INSERT INTO gin_commission_pymts (cop_code,
    -- cop_agn_code,
    -- cop_date,
    -- cop_dr_ref_no,
    -- cop_cr_ref_no,
    -- cop_comm_amt,
    -- cop_whdtax_amt,
    -- cop_ovride_comm_amt,
    -- cop_ovride_whdtax_amt,
    -- cop_agn_unit_mgr,
    -- cop_paid,
    -- cop_paid_chq_date,
    -- cop_paid_chq_no,
    -- cop_paid_vchr_no,
    -- cop_trans_no,
    -- cop_brn_code,
    -- cop_bru_code,
    -- cop_prepared_by,
    -- cop_cr_mtran_no,
    -- cop_dr_mtran_no,
    -- cop_whtx_rate,
    -- cop_net_comm,
    -- cop_cur_code,
    -- cop_scl_code,
    -- cop_act_type,
    -- cop_vat,
    -- cop_type)
    -- VALUES (v_cop_code,
    -- v_agnt_code,
    -- TRUNC (SYSDATE),
    -- v_dr_ref_no,
    -- v_cr_ref_no,
    -- v_gross_comm,
    -- -v_whtx,
    -- NULL,
    -- NULL,
    -- NULL,
    -- 'N',
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- v_brn_code,
    -- NULL,
    -- v_user,
    -- v_cr_mtran_no,
    -- v_dr_mtran_no,
    -- v_act_wthtx,
    -- v_net_comm,
    -- v_cur_code,
    -- v_pol_pro_code,
    -- v_act_type,
    -- v_vat_amt,
    -- v_comm_type);
    -- ---utilize UW credit clawbacks
    -- GIN_ACCOUNTS_PKG.update_commission_clawbacks(v_cr_mtran_no,v_dr_mtran_no,v_cop_code);
    -- ELSIF NVL (v_comm_type, 'COM') = 'ADM'
    -- THEN
    -- INSERT INTO gin_commission_pymts (cop_code,
    -- cop_agn_code,
    -- cop_date,
    -- cop_dr_ref_no,
    -- cop_cr_ref_no,
    -- cop_comm_amt,
    -- cop_whdtax_amt,
    -- cop_ovride_comm_amt,
    -- cop_ovride_whdtax_amt,
    -- cop_agn_unit_mgr,
    -- cop_paid,
    -- cop_paid_chq_date,
    -- cop_paid_chq_no,
    -- cop_paid_vchr_no,
    -- cop_trans_no,
    -- cop_brn_code,
    -- cop_bru_code,
    -- cop_prepared_by,
    -- cop_cr_mtran_no,
    -- cop_dr_mtran_no,
    -- cop_whtx_rate,
    -- cop_net_comm,
    -- cop_cur_code,
    -- cop_scl_code,
    -- cop_act_type,
    -- cop_vat,
    -- cop_type)
    -- VALUES (v_cop_code,
    -- v_agnt_code,
    -- TRUNC (SYSDATE),
    -- v_dr_ref_no,
    -- v_cr_ref_no,
    -- v_gross_lta,
    -- -v_lta_whtx,
    -- NULL,
    -- NULL,
    -- NULL,
    -- 'N',
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- v_brn_code,
    -- NULL,
    -- v_user,
    -- v_cr_mtran_no,
    -- v_dr_mtran_no,
    -- v_act_lta_whtx_rate,
    -- v_net_lta,
    -- v_cur_code,
    -- v_pol_pro_code,
    -- v_act_type,
    -- v_vat_amt,
    -- v_comm_type);
    -- END IF;
    -- ELSE
    -- v_comm_diff := v_gross_comm;
    -- v_lta_diff := v_gross_lta;
    --
    -- FOR install_recs IN dr_installments
    -- LOOP
    -- IF (ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0))) <= 0
    -- THEN
    -- v_instal_comm := 0;
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- ELSIF v_comm_diff >=
    -- (ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0)))
    -- THEN
    -- v_instal_comm :=
    -- (ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0)));
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- ELSE
    -- v_instal_comm := v_comm_diff;
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- END IF;
    --
    -- IF NVL (v_instal_comm, 0) > 0
    -- AND NVL (v_comm_type, 'COM') = 'COM'
    -- THEN
    -- v_instal_net := v_instal_comm / v_gross_comm * v_net_comm;
    -- v_instal_wht := v_instal_comm / v_gross_comm * v_whtx;
    --
    -- SELECT TO_NUMBER (
    -- TO_CHAR (SYSDATE, 'YYYY')
    -- || gin_cop_code_seq.NEXTVAL)
    -- INTO v_cop_code
    -- FROM DUAL;
    --
    -- ---cater for commission clawbacks
    -- v_gross_comm:= sign(v_gross_comm)*(abs(v_gross_comm)-abs(v_aggregate_claws_gross));
    -- v_net_comm:= sign(v_net_comm)* (abs(v_net_comm)-abs(v_aggregate_claws_net));
    -- v_whtx:= sign(v_whtx)*abs(v_whtx)-(abs(v_aggregate_claws_whtax));
    --
    --
    -- INSERT INTO gin_commission_pymts (cop_code,
    -- cop_agn_code,
    -- cop_date,
    -- cop_dr_ref_no,
    -- cop_cr_ref_no,
    -- cop_comm_amt,
    -- cop_whdtax_amt,
    -- cop_ovride_comm_amt,
    -- cop_ovride_whdtax_amt,
    -- cop_agn_unit_mgr,
    -- cop_paid,
    -- cop_paid_chq_date,
    -- cop_paid_chq_no,
    -- cop_paid_vchr_no,
    -- cop_trans_no,
    -- cop_brn_code,
    -- cop_bru_code,
    -- cop_prepared_by,
    -- cop_cr_mtran_no,
    -- cop_dr_mtran_no,
    -- cop_whtx_rate,
    -- cop_net_comm,
    -- cop_cur_code,
    -- cop_scl_code,
    -- cop_act_type,
    -- cop_ptins_code,
    -- cop_vat,
    -- cop_type)
    -- VALUES (v_cop_code,
    -- v_agnt_code,
    -- TRUNC (SYSDATE),
    -- v_dr_ref_no,
    -- v_cr_ref_no,
    -- v_instal_comm,
    -- -v_instal_wht,
    -- NULL,
    -- NULL,
    -- NULL,
    -- 'N',
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- v_brn_code,
    -- NULL,
    -- v_user,
    -- v_cr_mtran_no,
    -- v_dr_mtran_no,
    -- v_act_wthtx,
    -- v_instal_net,
    -- v_cur_code,
    -- v_pol_pro_code,
    -- v_act_type,
    -- install_recs.ptins_code,
    -- v_vat_amt,
    -- v_comm_type);
    --
    -- UPDATE gin_pol_trans_installs
    -- SET ptins_comm_paid =
    -- NVL (ptins_comm_paid, 0) + NVL (v_instal_comm, 0),
    -- ptins_cr_mtran_no = v_cr_mtran_no
    -- WHERE ptins_code = install_recs.ptins_code;
    -- -- THIS HAS NOT BEEN HANDLED FOR ADMIN FEE
    -- ---utilize UW credit clawbacks
    -- GIN_ACCOUNTS_PKG.update_commission_clawbacks(v_cr_mtran_no,v_dr_mtran_no,v_cop_code);
    -- END IF;
    --
    -- EXIT WHEN v_comm_diff < 0;
    -- END LOOP;
    --
    -- IF NVL (v_comm_diff, 0) != 0
    -- THEN
    -- raise_error (
    -- 'Error on commission installments computation. Amount not fully allocated.');
    -- END IF;
    -- END IF;
    --
    -- --MTRAN_LTA_AMT,MTRAN_LTA_PAYABLE,
    -- -- MTRAN_LTA_PAID, MTRAN_LTA_WHTX
    ----RAISE_ERROR(v_include_comm||';'||v_gross_comm||';'||v_dr_mtran_no||';'||v_cr_mtran_no);20153941962;20154072854
    -- IF NVL (v_include_comm, 'Y') = 'Y'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + NVL (v_gross_comm, 0),
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + NVL (v_whtx, 0) ,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    -- mtran_lta_payable = NVL (mtran_lta_payable, 0) + NVL (v_gross_lta, 0) ,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0) + NVL (v_lta_whtx, 0)
    -- WHERE mtran_no = v_dr_mtran_no;
    -- -- delete allocation trecord in gin_temp_debit_values
    -- DELETE from gin_temp_debit_values
    -- WHERE TEMP_MTRAN_NO = v_dr_mtran_no;
    -- DELETE from GIN_TEMP_ALLOC_VALUES
    -- WHERE TEM_TRANSNO = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + NVL (v_gross_comm, 0) ,
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + NVL (v_whtx, 0) ,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    -- mtran_lta_payable = NVL (mtran_lta_payable, 0) + NVL (v_gross_lta, 0) ,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0) + NVL (v_lta_whtx, 0)
    -- WHERE mtran_no = v_cr_mtran_no;
    --
    -- ----UTILIZE COMMISSION CLAWBACKS
    -- IF NVL(v_aggregate_claws_gross,0)!=0 THEN
    -- IF v_user_name IS NULL THEN
    -- raise_error('Error getting user details....Reconnect Session');
    -- END IF;
    --
    -- GIN_UW_CREDITS_PKG.utilizeCommclawback(v_dr_mtran_no,v_cr_mtran_no,v_user_name);
    --
    -- END IF;
    --
    -- ELSIF NVL (v_include_comm, 'Y') = 'N'
    -- AND NVL (v_include_vat, 'Y') = 'N'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    -- mtran_vat_paid = NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    -- mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_lta,
    -- mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
    -- mtran_lta_whtx_paid =
    -- NVL (mtran_lta_whtx_paid, 0) + v_lta_whtx,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
    -- WHERE mtran_no = v_dr_mtran_no;
    -- -- delete allocation trecord in gin_temp_debit_values
    -- DELETE from gin_temp_debit_values
    -- WHERE TEMP_MTRAN_NO = v_dr_mtran_no;
    -- DELETE from GIN_TEMP_ALLOC_VALUES
    -- WHERE TEM_TRANSNO = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    -- mtran_vat_paid = NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    -- mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_lta,
    -- mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
    -- mtran_lta_whtx_paid =
    -- NVL (mtran_lta_whtx_paid, 0) + v_lta_whtx,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
    -- WHERE mtran_no = v_cr_mtran_no;
    -- ELSIF NVL (v_include_comm, 'Y') = 'N'
    -- AND NVL (v_include_vat, 'Y') = 'Y'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    -- mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_lta,
    -- mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
    -- WHERE mtran_no = v_dr_mtran_no;
    -- -- delete allocation trecord in gin_temp_debit_values
    -- DELETE from gin_temp_debit_values
    -- WHERE TEMP_MTRAN_NO = v_dr_mtran_no;
    --
    -- DELETE from GIN_TEMP_ALLOC_VALUES
    -- WHERE TEM_TRANSNO = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    -- mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_lta,
    -- mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
    -- WHERE mtran_no = v_cr_mtran_no;
    -- END IF;
    --
    -- IF v_comm_type = 'COM'
    -- THEN
    -- RETURN (v_gross_comm);
    -- ELSE
    -- RETURN (v_gross_lta);
    -- END IF;
    -- --UPDATE GIN_MASTER_TRANSACTIONS SET
    -- --MTRAN_BALANCE =
    -- END;
    --   FUNCTION update_commission (v_cr_mtran_no    IN NUMBER,---commented out on 24th April 2019 ---sorting out difference in net commission computed differences----
    --                               v_cr_ref_no      IN VARCHAR2,
    --                               v_dr_mtran_no    IN NUMBER,
    --                               v_dr_ref_no      IN VARCHAR2,
    --                               v_comm_amt       IN NUMBER,
    --                               v_brn_code       IN NUMBER,
    --                               v_agnt_code      IN NUMBER,
    --                               v_cur_code       IN NUMBER,
    --                               v_include_comm   IN VARCHAR2 DEFAULT 'Y',
    --                               v_include_vat    IN VARCHAR2 DEFAULT 'Y',
    --                               v_comm_type      IN VARCHAR2 DEFAULT 'COM')
    --      RETURN NUMBER
    --   IS
    --      v_mtran_no                NUMBER;
    --      v_user                    VARCHAR2 (25);
    --      v_cop_code                NUMBER;
    --      v_act_wthtx               NUMBER := 0;
    --      v_gross_comm              NUMBER;
    --      v_net_comm                NUMBER;
    --      v_whtx                    NUMBER;
    --      v_pol_pro_code            NUMBER;
    --      v_pmod_code               NUMBER;
    --      v_act_type                VARCHAR2 (3);
    --      v_client_type             VARCHAR2 (3);
    --      v_mkt_agn_code            tqc_agencies.agn_code%TYPE;
    --      v_pol_batch_no            gin_policies.pol_batch_no%TYPE;
    --      v_pol_wthtx_appl          VARCHAR2 (1);
    --      v_pmod_sht_desc           tqc_payment_modes.pmod_sht_desc%TYPE;
    --      v_instal_comm             NUMBER;
    --      v_instal_net              NUMBER;
    --      v_instal_wht              NUMBER;
    --      v_comm_diff               NUMBER;
    --      v_commission              NUMBER;
    --      v_comm_payable            NUMBER;
    --      v_comm_paid               NUMBER;
    --      v_comm_pyts               NUMBER;
    --      v_rnd                     NUMBER;
    --      v_vat_rate                NUMBER;
    --      v_vat_amt                 NUMBER;
    --      v_dr_mtran_whtx           NUMBER;
    --      v_maxcomm_amt             NUMBER;
    --      v_dr_net_comm             NUMBER;
    --      v_dr_net_lta              NUMBER;
    --      v_maxlta_amt              NUMBER;
    --      v_mtran_lta_amt           NUMBER;
    --      v_mtran_lta_payable       NUMBER;
    --      v_mtran_lta_paid          NUMBER;
    --      v_mtran_lta_whtx          NUMBER;
    --      v_act_lta_whtx_rate       NUMBER;
    --      v_lta_whtx                NUMBER;
    --      v_gross_lta               NUMBER;
    --      v_net_lta                 NUMBER;
    --      v_lta_diff                NUMBER;
    --      v_aggregate_claws_gross   NUMBER;
    --      v_aggregate_claws_whtax   NUMBER;
    --      v_aggregate_claws_net     NUMBER;
    --      v_user_name               VARCHAR2 (50)
    --         := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
    --
    --      CURSOR dr_installments
    --      IS
    --           SELECT *
    --             FROM gin_pol_trans_installs
    --            WHERE ptins_mtran_no = v_dr_mtran_no
    --         ORDER BY ptins_install_no;
    --   BEGIN
    --      -- RAISE_ERROR('ERROR....');
    --      --DBMS_OUTPUT.PUT_LINE(121212);
    --      -- RAISE_ERROR('LEVEL 2'||6666);
    --      BEGIN
    --         SELECT mtran_client_type,
    --                mtran_pol_batch_no,
    --                mtran_pmod_code,
    --                mtran_pro_code,
    --                mtran_commission,
    --                mtran_comm_payable,
    --                mtran_comm_paid,
    --                mtran_whtx,
    --                mtran_lta_amt,
    --                mtran_lta_payable,
    --                mtran_lta_paid,
    --                mtran_lta_whtx
    --           INTO v_client_type,
    --                v_pol_batch_no,
    --                v_pmod_code,
    --                v_pol_pro_code,
    --                v_commission,
    --                v_comm_payable,
    --                v_comm_paid,
    --                v_dr_mtran_whtx,
    --                v_mtran_lta_amt,
    --                v_mtran_lta_payable,
    --                v_mtran_lta_paid,
    --                v_mtran_lta_whtx
    --           FROM gin_master_transactions
    --          WHERE mtran_no = v_dr_mtran_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error determining account type...');
    --      END;
    --
    --      ----GET unutilized COMMISSION CLAWBACKS
    --      ----credit functionality updates
    --      IF NVL (v_include_comm, 'Y') = 'Y'
    --      THEN
    --         BEGIN
    --            SELECT SUM (NVL (ABS (coc_comm_amt), 0)),
    --                   SUM (NVL (ABS (coc_whdtax_amt), 0)),
    --                   SUM (
    --                        NVL (ABS (coc_comm_amt), 0)
    --                      - NVL (ABS (coc_whdtax_amt), 0))
    --              INTO v_aggregate_claws_gross,
    --                   v_aggregate_claws_whtax,
    --                   v_aggregate_claws_net
    --              FROM gin_commission_clawbacks
    --             WHERE     coc_dr_mtran_no = v_dr_mtran_no
    --                   AND NVL (coc_utilized, 'N') = 'N'
    --                   AND NVL (coc_paid, 'N') = 'N'
    --                   AND NVL (coc_authorized, 'N') = 'N'
    --                   AND NVL (coc_withdrawn, 'N') != 'Y';
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               v_aggregate_claws_gross := 0;
    --               v_aggregate_claws_whtax := 0;
    --               v_aggregate_claws_net := 0;
    --         END;
    --      ELSE
    --         v_aggregate_claws_gross := 0;
    --         v_aggregate_claws_whtax := 0;
    --         v_aggregate_claws_net := 0;
    --      END IF;
    --
    --      --IF
    --      v_pol_wthtx_appl :=
    --         gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');
    --
    --      IF NVL (v_client_type, 'X') <> 'D'
    --      THEN
    --         IF v_pol_wthtx_appl = 'Y'
    --         THEN
    --            BEGIN
    --               SELECT act_wthtx_rate,
    --                      act_type_sht_desc,
    --                      act_vat_rate,
    --                      act_lta_whtx_rate
    --                 INTO v_act_wthtx,
    --                      v_act_type,
    --                      v_vat_rate,
    --                      v_act_lta_whtx_rate
    --                 FROM tqc_account_types, tqc_agencies
    --                WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (
    --                        'Error 1 getting withholding tax rate...here'
    --                     || v_agnt_code);
    --            END;
    --         ELSE
    --            BEGIN
    --               SELECT act_type_sht_desc, act_vat_rate
    --                 INTO v_act_type, v_vat_rate
    --                 FROM tqc_account_types, tqc_agencies
    --                WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    --
    --               v_act_wthtx := 0;
    --               v_act_lta_whtx_rate := 0;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error getting withholding tax rate...');
    --            END;
    --         END IF;
    --      ELSE
    --         BEGIN
    --            SELECT pol_mktr_agn_code
    --              INTO v_mkt_agn_code
    --              FROM gin_policies
    --             WHERE pol_batch_no = v_pol_batch_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error getting marketer attached...');
    --         END;
    --
    --         BEGIN
    --            SELECT act_wthtx_rate, act_type_sht_desc, act_lta_whtx_rate
    --              INTO v_act_wthtx, v_act_type, v_act_lta_whtx_rate
    --              FROM tqc_account_types, tqc_agencies
    --             WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error getting withholding tax rate...');
    --         END;
    --      END IF;
    --
    --      BEGIN
    --         SELECT param_value
    --           INTO v_rnd
    --           FROM gin_parameters
    --          WHERE     param_name = 'OVERRIDE_COMM_RNDOFF'
    --                AND param_status = 'ACTIVE';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            BEGIN
    --               SELECT cur_rnd
    --                 INTO v_rnd
    --                 FROM tqc_currencies
    --                WHERE cur_code = v_cur_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others ('Error selecting rounding factor');
    --            END;
    --         WHEN OTHERS
    --         THEN
    --            raise_error (
    --               'Error fetching override commission rounding parameter...');
    --      END;
    --
    --      IF NVL (v_comm_type, 'COM') = 'COM'
    --      -- COMMISION TYPE IS COMMISION
    --      THEN
    --         v_dr_net_comm :=
    --            ABS (NVL (v_commission, 0)) - ABS (NVL (v_dr_mtran_whtx, 0));
    --
    --         IF ABS (NVL (v_comm_amt, 0)) > ABS (NVL (v_dr_net_comm, 0))
    --         THEN
    --            v_maxcomm_amt := v_dr_net_comm;
    --         ELSE
    --            v_maxcomm_amt := v_comm_amt;
    --         END IF;
    --      ELSE
    --         --COMMISSION TYPE IS ADM SO LETS CALCULATE THE ADMIN FEE
    --         v_dr_net_lta :=
    --            ABS (NVL (v_mtran_lta_amt, 0)) - ABS (NVL (v_mtran_lta_whtx, 0));
    --
    --         IF ABS (NVL (v_comm_amt, 0)) > ABS (NVL (v_dr_net_lta, 0))
    --         THEN
    --            v_maxlta_amt := v_dr_net_lta;
    --         ELSE
    --            v_maxlta_amt := v_comm_amt;
    --         END IF;
    --      END IF;
    --
    --      IF v_comm_type = 'COM'
    --      THEN
    --         IF NVL (v_act_wthtx, 0) != 0
    --         THEN
    --            v_gross_comm :=
    --               ROUND (
    --                  100 / (100 - NVL (v_act_wthtx, 0)) * NVL (v_maxcomm_amt, 0));
    --            v_whtx := v_gross_comm - v_maxcomm_amt;
    --         ELSE
    --            v_gross_comm := v_maxcomm_amt;
    --            v_whtx := 0;
    --         END IF;
    --      ELSIF v_comm_type = 'ADM'
    --      THEN
    --         IF NVL (v_act_lta_whtx_rate, 0) != 0
    --         THEN
    --            v_gross_lta :=
    --               ROUND (
    --                    100
    --                  / (100 - NVL (v_act_lta_whtx_rate, 0))
    --                  * NVL (v_maxlta_amt, 0));
    --            v_lta_whtx := v_gross_lta - v_maxlta_amt;
    --         ELSE
    --            v_gross_lta := v_maxlta_amt;
    --            v_lta_whtx := 0;
    --         END IF;
    --      END IF;
    --
    --      IF NVL (v_vat_rate, 0) != 0 AND v_comm_type = 'COM'
    --      THEN
    --         v_vat_amt :=
    --            ROUND (NVL (v_vat_rate, 0) / 100 * NVL (v_maxcomm_amt, 0), v_rnd);
    --      ELSE
    --         v_vat_amt := 0;
    --      END IF;
    --
    --      IF v_comm_type = 'COM'
    --      THEN
    --         v_net_comm :=
    --            NVL (v_maxcomm_amt, 0) - NVL (v_whtx, 0) + NVL (v_vat_amt, 0);
    --      ELSE
    --         v_net_lta := NVL (v_maxlta_amt, 0) - NVL (v_lta_whtx, 0);
    --      END IF;
    --
    --      --RAISE_ERROR('v_gross_comm='||v_gross_comm||' v_whtx ='|| v_whtx ||'v_net_comm='||v_net_comm
    --      -- ||' v_vat_amt='|| v_vat_amt);
    --      BEGIN
    --         SELECT SUM (NVL (cop_comm_amt, 0))
    --           INTO v_comm_pyts
    --           FROM gin_commission_pymts
    --          WHERE     cop_dr_mtran_no = v_dr_mtran_no
    --                AND NVL (cop_withdrawn, 'N') = 'N';
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error (
    --               'Error determining commission paid on debit note...');
    --      END;
    --
    --      IF       ROUND (NVL (v_gross_comm, 0), v_rnd)
    --             - ROUND (ABS (v_commission), v_rnd) > 1
    --         AND NVL (v_comm_type, 'COM') = 'COM'
    --      THEN
    --         raise_error (
    --               'Total commission allocated '
    --            || NVL (v_comm_pyts, 0)
    --            || 'is greater than commission on debit note: v_commission'
    --            || ROUND (ABS (v_commission), v_rnd));
    --      ELSIF       ROUND (NVL (v_gross_lta, 0), v_rnd)
    --                - ROUND (ABS (v_mtran_lta_amt), v_rnd) > 1
    --            AND NVL (v_comm_type, 'COM') = 'COM'
    --      THEN
    --         raise_error (
    --               'Total admin fee allocated '
    --            || NVL (v_comm_pyts, 0)
    --            || 'is greater than admin fee on debit note: v_mtran_lta_amt'
    --            || ROUND (ABS (v_mtran_lta_amt), v_rnd));
    --      END IF;
    --
    --      IF v_pmod_code IS NOT NULL
    --      THEN
    --         BEGIN
    --            SELECT pmod_sht_desc
    --              INTO v_pmod_sht_desc
    --              FROM tqc_payment_modes
    --             WHERE pmod_code = v_pmod_code;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               v_pmod_sht_desc := NULL;
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error getting payment method..');
    --         END;
    --      ELSE
    --         v_pmod_sht_desc := NULL;
    --      END IF;
    --
    --      -- RAISE_ERROR(v_gross_comm);
    --      IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
    --      THEN
    --         SELECT TO_NUMBER (
    --                   TO_CHAR (SYSDATE, 'YYYY') || gin_cop_code_seq.NEXTVAL)
    --           INTO v_cop_code
    --           FROM DUAL;
    --
    --         ---cater for commission clawbacks
    --         v_gross_comm :=
    --              SIGN (NVL (v_gross_comm, 0))
    --            * (  ABS (NVL (v_gross_comm, 0))
    --               - ABS (NVL (v_aggregate_claws_gross, 0)));
    --         v_net_comm :=
    --              SIGN (NVL (v_net_comm, 0))
    --            * (  ABS (NVL (v_net_comm, 0))
    --               - ABS (NVL (v_aggregate_claws_net, 0)));
    --         v_whtx :=
    --              SIGN (NVL (v_whtx, 0))
    --            * (ABS (NVL (v_whtx, 0)) - ABS (NVL (v_aggregate_claws_whtax, 0)));
    --
    --         IF NVL (v_comm_type, 'COM') = 'COM'
    --         THEN
    --            INSERT INTO gin_commission_pymts (cop_code,
    --                                              cop_agn_code,
    --                                              cop_date,
    --                                              cop_dr_ref_no,
    --                                              cop_cr_ref_no,
    --                                              cop_comm_amt,
    --                                              cop_whdtax_amt,
    --                                              cop_ovride_comm_amt,
    --                                              cop_ovride_whdtax_amt,
    --                                              cop_agn_unit_mgr,
    --                                              cop_paid,
    --                                              cop_paid_chq_date,
    --                                              cop_paid_chq_no,
    --                                              cop_paid_vchr_no,
    --                                              cop_trans_no,
    --                                              cop_brn_code,
    --                                              cop_bru_code,
    --                                              cop_prepared_by,
    --                                              cop_cr_mtran_no,
    --                                              cop_dr_mtran_no,
    --                                              cop_whtx_rate,
    --                                              cop_net_comm,
    --                                              cop_cur_code,
    --                                              cop_scl_code,
    --                                              cop_act_type,
    --                                              cop_vat,
    --                                              cop_type)
    --                 VALUES (v_cop_code,
    --                         v_agnt_code,
    --                         TRUNC (SYSDATE),
    --                         v_dr_ref_no,
    --                         v_cr_ref_no,
    --                         v_gross_comm,
    --                         -v_whtx,
    --                         NULL,
    --                         NULL,
    --                         NULL,
    --                         'N',
    --                         NULL,
    --                         NULL,
    --                         NULL,
    --                         NULL,
    --                         v_brn_code,
    --                         NULL,
    --                         v_user,
    --                         v_cr_mtran_no,
    --                         v_dr_mtran_no,
    --                         v_act_wthtx,
    --                         v_net_comm,
    --                         v_cur_code,
    --                         v_pol_pro_code,
    --                         v_act_type,
    --                         v_vat_amt,
    --                         v_comm_type);
    --
    --            ---utilize UW credit clawbacks
    --            GIN_ACCOUNTS_PKG.update_commission_clawbacks (v_cr_mtran_no,
    --                                                          v_dr_mtran_no,
    --                                                          v_cop_code);
    --         ELSIF NVL (v_comm_type, 'COM') = 'ADM'
    --         THEN
    --            INSERT INTO gin_commission_pymts (cop_code,
    --                                              cop_agn_code,
    --                                              cop_date,
    --                                              cop_dr_ref_no,
    --                                              cop_cr_ref_no,
    --                                              cop_comm_amt,
    --                                              cop_whdtax_amt,
    --                                              cop_ovride_comm_amt,
    --                                              cop_ovride_whdtax_amt,
    --                                              cop_agn_unit_mgr,
    --                                              cop_paid,
    --                                              cop_paid_chq_date,
    --                                              cop_paid_chq_no,
    --                                              cop_paid_vchr_no,
    --                                              cop_trans_no,
    --                                              cop_brn_code,
    --                                              cop_bru_code,
    --                                              cop_prepared_by,
    --                                              cop_cr_mtran_no,
    --                                              cop_dr_mtran_no,
    --                                              cop_whtx_rate,
    --                                              cop_net_comm,
    --                                              cop_cur_code,
    --                                              cop_scl_code,
    --                                              cop_act_type,
    --                                              cop_vat,
    --                                              cop_type)
    --                 VALUES (v_cop_code,
    --                         v_agnt_code,
    --                         TRUNC (SYSDATE),
    --                         v_dr_ref_no,
    --                         v_cr_ref_no,
    --                         v_gross_lta,
    --                         -v_lta_whtx,
    --                         NULL,
    --                         NULL,
    --                         NULL,
    --                         'N',
    --                         NULL,
    --                         NULL,
    --                         NULL,
    --                         NULL,
    --                         v_brn_code,
    --                         NULL,
    --                         v_user,
    --                         v_cr_mtran_no,
    --                         v_dr_mtran_no,
    --                         v_act_lta_whtx_rate,
    --                         v_net_lta,
    --                         v_cur_code,
    --                         v_pol_pro_code,
    --                         v_act_type,
    --                         v_vat_amt,
    --                         v_comm_type);
    --         END IF;
    --      ELSE
    --         v_comm_diff := v_gross_comm;
    --         v_lta_diff := v_gross_lta;
    --
    --         FOR install_recs IN dr_installments
    --         LOOP
    --            IF (  ABS (NVL (install_recs.ptins_comm_amt, 0))
    --                - ABS (NVL (install_recs.ptins_comm_paid, 0))) <= 0
    --            THEN
    --               v_instal_comm := 0;
    --               v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    --            ELSIF v_comm_diff >=
    --                     (  ABS (NVL (install_recs.ptins_comm_amt, 0))
    --                      - ABS (NVL (install_recs.ptins_comm_paid, 0)))
    --            THEN
    --               v_instal_comm :=
    --                  (  ABS (NVL (install_recs.ptins_comm_amt, 0))
    --                   - ABS (NVL (install_recs.ptins_comm_paid, 0)));
    --               v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    --            ELSE
    --               v_instal_comm := v_comm_diff;
    --               v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    --            END IF;
    --
    --            IF     NVL (v_instal_comm, 0) > 0
    --               AND NVL (v_comm_type, 'COM') = 'COM'
    --            THEN
    --               v_instal_net := v_instal_comm / v_gross_comm * v_net_comm;
    --               v_instal_wht := v_instal_comm / v_gross_comm * v_whtx;
    --
    --               SELECT TO_NUMBER (
    --                            TO_CHAR (SYSDATE, 'YYYY')
    --                         || gin_cop_code_seq.NEXTVAL)
    --                 INTO v_cop_code
    --                 FROM DUAL;
    --
    --               ---cater for commission clawbacks
    --               v_gross_comm :=
    --                    SIGN (v_gross_comm)
    --                  * (ABS (v_gross_comm) - ABS (v_aggregate_claws_gross));
    --               v_net_comm :=
    --                    SIGN (v_net_comm)
    --                  * (ABS (v_net_comm) - ABS (v_aggregate_claws_net));
    --               v_whtx :=
    --                    SIGN (v_whtx) * ABS (v_whtx)
    --                  - (ABS (v_aggregate_claws_whtax));
    --
    --
    --               INSERT INTO gin_commission_pymts (cop_code,
    --                                                 cop_agn_code,
    --                                                 cop_date,
    --                                                 cop_dr_ref_no,
    --                                                 cop_cr_ref_no,
    --                                                 cop_comm_amt,
    --                                                 cop_whdtax_amt,
    --                                                 cop_ovride_comm_amt,
    --                                                 cop_ovride_whdtax_amt,
    --                                                 cop_agn_unit_mgr,
    --                                                 cop_paid,
    --                                                 cop_paid_chq_date,
    --                                                 cop_paid_chq_no,
    --                                                 cop_paid_vchr_no,
    --                                                 cop_trans_no,
    --                                                 cop_brn_code,
    --                                                 cop_bru_code,
    --                                                 cop_prepared_by,
    --                                                 cop_cr_mtran_no,
    --                                                 cop_dr_mtran_no,
    --                                                 cop_whtx_rate,
    --                                                 cop_net_comm,
    --                                                 cop_cur_code,
    --                                                 cop_scl_code,
    --                                                 cop_act_type,
    --                                                 cop_ptins_code,
    --                                                 cop_vat,
    --                                                 cop_type)
    --                    VALUES (v_cop_code,
    --                            v_agnt_code,
    --                            TRUNC (SYSDATE),
    --                            v_dr_ref_no,
    --                            v_cr_ref_no,
    --                            v_instal_comm,
    --                            -v_instal_wht,
    --                            NULL,
    --                            NULL,
    --                            NULL,
    --                            'N',
    --                            NULL,
    --                            NULL,
    --                            NULL,
    --                            NULL,
    --                            v_brn_code,
    --                            NULL,
    --                            v_user,
    --                            v_cr_mtran_no,
    --                            v_dr_mtran_no,
    --                            v_act_wthtx,
    --                            v_instal_net,
    --                            v_cur_code,
    --                            v_pol_pro_code,
    --                            v_act_type,
    --                            install_recs.ptins_code,
    --                            v_vat_amt,
    --                            v_comm_type);
    --
    --               UPDATE gin_pol_trans_installs
    --                  SET ptins_comm_paid =
    --                         NVL (ptins_comm_paid, 0) + NVL (v_instal_comm, 0),
    --                      ptins_cr_mtran_no = v_cr_mtran_no
    --                WHERE ptins_code = install_recs.ptins_code;
    --
    --               -- THIS HAS NOT BEEN HANDLED FOR ADMIN FEE
    --               ---utilize UW credit clawbacks
    --               GIN_ACCOUNTS_PKG.update_commission_clawbacks (v_cr_mtran_no,
    --                                                             v_dr_mtran_no,
    --                                                             v_cop_code);
    --            END IF;
    --
    --            EXIT WHEN v_comm_diff < 0;
    --         END LOOP;
    --
    --         IF NVL (v_comm_diff, 0) != 0
    --         THEN
    --            raise_error (
    --               'Error on commission installments computation. Amount not fully allocated.');
    --         END IF;
    --      END IF;
    --
    --      --MTRAN_LTA_AMT,MTRAN_LTA_PAYABLE,
    --      -- MTRAN_LTA_PAID, MTRAN_LTA_WHTX
    --      --RAISE_ERROR(v_include_comm||';'||v_gross_comm||';'||v_dr_mtran_no||';'||v_cr_mtran_no);20153941962;20154072854
    --      IF NVL (v_include_comm, 'Y') = 'Y'
    --      THEN
    --         UPDATE gin_master_transactions
    --            SET mtran_comm_payable =
    --                   NVL (mtran_comm_payable, 0) + NVL (v_gross_comm, 0),
    --                mtran_whtx_payable =
    --                   NVL (mtran_whtx_payable, 0) + NVL (v_whtx, 0),
    --                mtran_vat_payable =
    --                   NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    --                mtran_lta_payable =
    --                   NVL (mtran_lta_payable, 0) + NVL (v_gross_lta, 0),
    --                mtran_lta_whtx_payable =
    --                   NVL (mtran_lta_whtx_payable, 0) + NVL (v_lta_whtx, 0)
    --          WHERE mtran_no = v_dr_mtran_no;
    --
    --         -- delete allocation trecord in gin_temp_debit_values
    --         DELETE FROM gin_temp_debit_values
    --               WHERE TEMP_MTRAN_NO = v_dr_mtran_no;
    --
    --         DELETE FROM GIN_TEMP_ALLOC_VALUES
    --               WHERE TEM_TRANSNO = v_dr_mtran_no;
    --
    --         UPDATE gin_master_transactions
    --            SET mtran_comm_payable =
    --                   NVL (mtran_comm_payable, 0) + NVL (v_gross_comm, 0),
    --                mtran_whtx_payable =
    --                   NVL (mtran_whtx_payable, 0) + NVL (v_whtx, 0),
    --                mtran_vat_payable =
    --                   NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    --                mtran_lta_payable =
    --                   NVL (mtran_lta_payable, 0) + NVL (v_gross_lta, 0),
    --                mtran_lta_whtx_payable =
    --                   NVL (mtran_lta_whtx_payable, 0) + NVL (v_lta_whtx, 0)
    --          WHERE mtran_no = v_cr_mtran_no;
    --
    --         ----UTILIZE COMMISSION CLAWBACKS
    --         IF NVL (v_aggregate_claws_gross, 0) != 0
    --         THEN
    --            IF v_user_name IS NULL
    --            THEN
    --               raise_error (
    --                  'Error getting user details....Reconnect Session');
    --            END IF;
    --
    --            GIN_UW_CREDITS_PKG.utilizeCommclawback (v_dr_mtran_no,
    --                                                    v_cr_mtran_no,
    --                                                    v_user_name);
    --         END IF;
    --      ELSIF     NVL (v_include_comm, 'Y') = 'N'
    --            AND NVL (v_include_vat, 'Y') = 'N'
    --      THEN
    --         UPDATE gin_master_transactions
    --            SET mtran_comm_payable =
    --                   NVL (mtran_comm_payable, 0) + v_gross_comm,
    --                mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    --                mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    --                mtran_vat_paid = NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    --                mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                mtran_vat_payable =
    --                   NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    --                mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_lta,
    --                mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
    --                mtran_lta_whtx_paid =
    --                   NVL (mtran_lta_whtx_paid, 0) + v_lta_whtx,
    --                mtran_lta_whtx_payable =
    --                   NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
    --          WHERE mtran_no = v_dr_mtran_no;
    --
    --         -- delete allocation trecord in gin_temp_debit_values
    --         DELETE FROM gin_temp_debit_values
    --               WHERE TEMP_MTRAN_NO = v_dr_mtran_no;
    --
    --         DELETE FROM GIN_TEMP_ALLOC_VALUES
    --               WHERE TEM_TRANSNO = v_dr_mtran_no;
    --
    --         UPDATE gin_master_transactions
    --            SET mtran_comm_payable =
    --                   NVL (mtran_comm_payable, 0) + v_gross_comm,
    --                mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    --                mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    --                mtran_vat_paid = NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    --                mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                mtran_vat_payable =
    --                   NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    --                mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_lta,
    --                mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
    --                mtran_lta_whtx_paid =
    --                   NVL (mtran_lta_whtx_paid, 0) + v_lta_whtx,
    --                mtran_lta_whtx_payable =
    --                   NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
    --          WHERE mtran_no = v_cr_mtran_no;
    --      ELSIF     NVL (v_include_comm, 'Y') = 'N'
    --            AND NVL (v_include_vat, 'Y') = 'Y'
    --      THEN
    --         UPDATE gin_master_transactions
    --            SET mtran_comm_payable =
    --                   NVL (mtran_comm_payable, 0) + v_gross_comm,
    --                mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    --                mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                mtran_vat_payable =
    --                   NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    --                mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_lta,
    --                mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
    --                mtran_lta_whtx_payable =
    --                   NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
    --          WHERE mtran_no = v_dr_mtran_no;
    --
    --         -- delete allocation trecord in gin_temp_debit_values
    --         DELETE FROM gin_temp_debit_values
    --               WHERE TEMP_MTRAN_NO = v_dr_mtran_no;
    --
    --         DELETE FROM GIN_TEMP_ALLOC_VALUES
    --               WHERE TEM_TRANSNO = v_dr_mtran_no;
    --
    --         UPDATE gin_master_transactions
    --            SET mtran_comm_payable =
    --                   NVL (mtran_comm_payable, 0) + v_gross_comm,
    --                mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    --                mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                mtran_vat_payable =
    --                   NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
    --                mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_lta,
    --                mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
    --                mtran_lta_whtx_payable =
    --                   NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
    --          WHERE mtran_no = v_cr_mtran_no;
    --      END IF;
    --
    --      IF v_comm_type = 'COM'
    --      THEN
    --         RETURN (v_gross_comm);
    --      ELSE
    --         RETURN (v_gross_lta);
    --      END IF;
    --   --UPDATE GIN_MASTER_TRANSACTIONS SET
    --   --MTRAN_BALANCE =
    --   END;
    FUNCTION update_commission (v_cr_mtran_no    IN NUMBER,
                                v_cr_ref_no      IN VARCHAR2,
                                v_dr_mtran_no    IN NUMBER,
                                v_dr_ref_no      IN VARCHAR2,
                                v_comm_amt       IN NUMBER,
                                v_brn_code       IN NUMBER,
                                v_agnt_code      IN NUMBER,
                                v_cur_code       IN NUMBER,
                                v_include_comm   IN VARCHAR2 DEFAULT 'Y',
                                v_include_vat    IN VARCHAR2 DEFAULT 'Y',
                                v_comm_type      IN VARCHAR2 DEFAULT 'COM')
        RETURN NUMBER
    IS
        v_mtran_no                NUMBER;
        v_user                    VARCHAR2 (25);
        v_cop_code                NUMBER;
        v_act_wthtx               NUMBER := 0;
        v_gross_comm              NUMBER;
        v_net_comm                NUMBER;
        v_whtx                    NUMBER;
        v_pol_pro_code            NUMBER;
        v_pmod_code               NUMBER;
        v_act_type                VARCHAR2 (3);
        v_client_type             VARCHAR2 (3);
        v_mkt_agn_code            tqc_agencies.agn_code%TYPE;
        v_pol_batch_no            gin_policies.pol_batch_no%TYPE;
        v_pol_wthtx_appl          VARCHAR2 (1);
        v_pmod_sht_desc           tqc_payment_modes.pmod_sht_desc%TYPE;
        v_instal_comm             NUMBER;
        v_instal_net              NUMBER;
        v_instal_wht              NUMBER;
        v_comm_diff               NUMBER;
        v_commission              NUMBER;
        v_comm_payable            NUMBER;
        v_comm_paid               NUMBER;
        v_comm_pyts               NUMBER;
        v_rnd                     NUMBER;
        v_vat_rate                NUMBER;
        v_vat_amt                 NUMBER;
        v_dr_mtran_whtx           NUMBER;
        v_maxcomm_amt             NUMBER;
        v_dr_net_comm             NUMBER;
        v_dr_net_lta              NUMBER;
        v_maxlta_amt              NUMBER;
        v_mtran_lta_amt           NUMBER;
        v_mtran_lta_payable       NUMBER;
        v_mtran_lta_paid          NUMBER;
        v_mtran_lta_whtx          NUMBER;
        v_act_lta_whtx_rate       NUMBER;
        v_lta_whtx                NUMBER;
        v_gross_lta               NUMBER;
        v_net_lta                 NUMBER;
        v_lta_diff                NUMBER;
        v_aggregate_claws_gross   NUMBER;
        v_aggregate_claws_whtax   NUMBER;
        v_aggregate_claws_net     NUMBER;
        v_user_name               VARCHAR2 (50)
            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');

        CURSOR dr_installments IS
              SELECT *
                FROM gin_pol_trans_installs
               WHERE ptins_mtran_no = v_dr_mtran_no
            ORDER BY ptins_install_no;
    BEGIN
        -- RAISE_ERROR('ERROR....');
        --DBMS_OUTPUT.PUT_LINE(121212);
        -- RAISE_ERROR('LEVEL 2'||6666);
        BEGIN
            SELECT mtran_client_type,
                   mtran_pol_batch_no,
                   mtran_pmod_code,
                   mtran_pro_code,
                   mtran_commission,
                   mtran_comm_payable,
                   mtran_comm_paid,
                   mtran_whtx,
                   mtran_lta_amt,
                   mtran_lta_payable,
                   mtran_lta_paid,
                   mtran_lta_whtx
              INTO v_client_type,
                   v_pol_batch_no,
                   v_pmod_code,
                   v_pol_pro_code,
                   v_commission,
                   v_comm_payable,
                   v_comm_paid,
                   v_dr_mtran_whtx,
                   v_mtran_lta_amt,
                   v_mtran_lta_payable,
                   v_mtran_lta_paid,
                   v_mtran_lta_whtx
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error determining account type...');
        END;

        ----GET unutilized COMMISSION CLAWBACKS
        ----credit functionality updates
        IF NVL (v_include_comm, 'Y') = 'Y'
        THEN
            BEGIN
                SELECT SUM (NVL (ABS (coc_comm_amt), 0)),
                       SUM (NVL (ABS (coc_whdtax_amt), 0)),
                       SUM (
                             NVL (ABS (coc_comm_amt), 0)
                           - NVL (ABS (coc_whdtax_amt), 0))
                  INTO v_aggregate_claws_gross,
                       v_aggregate_claws_whtax,
                       v_aggregate_claws_net
                  FROM gin_commission_clawbacks
                 WHERE     coc_dr_mtran_no = v_dr_mtran_no
                       AND NVL (coc_utilized, 'N') = 'N'
                       AND NVL (coc_paid, 'N') = 'N'
                       AND NVL (coc_authorized, 'N') = 'N'
                       AND NVL (coc_withdrawn, 'N') != 'Y';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_aggregate_claws_gross := 0;
                    v_aggregate_claws_whtax := 0;
                    v_aggregate_claws_net := 0;
            END;
        ELSE
            v_aggregate_claws_gross := 0;
            v_aggregate_claws_whtax := 0;
            v_aggregate_claws_net := 0;
        END IF;

        --IF
        v_pol_wthtx_appl :=
            gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');

        IF NVL (v_client_type, 'X') <> 'D'
        THEN
            IF v_pol_wthtx_appl = 'Y'
            THEN
                BEGIN
                    SELECT act_wthtx_rate,
                           act_type_sht_desc,
                           act_vat_rate,
                           act_lta_whtx_rate
                      INTO v_act_wthtx,
                           v_act_type,
                           v_vat_rate,
                           v_act_lta_whtx_rate
                      FROM tqc_account_types, tqc_agencies
                     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error 1 getting withholding tax rate...here'
                            || v_agnt_code);
                END;
            ELSE
                BEGIN
                    SELECT act_type_sht_desc, act_vat_rate
                      INTO v_act_type, v_vat_rate
                      FROM tqc_account_types, tqc_agencies
                     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;

                    v_act_wthtx := 0;
                    v_act_lta_whtx_rate := 0;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error getting withholding tax rate...');
                END;
            END IF;
        ELSE
            BEGIN
                SELECT pol_mktr_agn_code
                  INTO v_mkt_agn_code
                  FROM gin_policies
                 WHERE pol_batch_no = v_pol_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error getting marketer attached...');
            END;

            BEGIN
                SELECT act_wthtx_rate, act_type_sht_desc, act_lta_whtx_rate
                  INTO v_act_wthtx, v_act_type, v_act_lta_whtx_rate
                  FROM tqc_account_types, tqc_agencies
                 WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error getting withholding tax rate...');
            END;
        END IF;

        BEGIN
            SELECT param_value
              INTO v_rnd
              FROM gin_parameters
             WHERE     param_name = 'OVERRIDE_COMM_RNDOFF'
                   AND param_status = 'ACTIVE';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                BEGIN
                    SELECT cur_rnd
                      INTO v_rnd
                      FROM tqc_currencies
                     WHERE cur_code = v_cur_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others ('Error selecting rounding factor');
                END;
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching override commission rounding parameter...');
        END;


        IF NVL (v_comm_type, 'COM') = 'COM'
        -- COMMISION TYPE IS COMMISION
        THEN
            v_dr_net_comm :=
                ABS (NVL (v_commission, 0)) - ABS (NVL (v_dr_mtran_whtx, 0));

            --RAISE_ERROR('v_comm_amt='||v_comm_amt||'v_dr_net_comm='||v_dr_net_comm);
            IF ABS (NVL (v_comm_amt, 0)) > ABS (NVL (v_dr_net_comm, 0))
            THEN
                v_maxcomm_amt := v_dr_net_comm;
            ELSE
                v_maxcomm_amt := v_comm_amt;
            END IF;
        ELSE
            --COMMISSION TYPE IS ADM SO LETS CALCULATE THE ADMIN FEE
            v_dr_net_lta :=
                  ABS (NVL (v_mtran_lta_amt, 0))
                - ABS (NVL (v_mtran_lta_whtx, 0));

            IF ABS (NVL (v_comm_amt, 0)) > ABS (NVL (v_dr_net_lta, 0))
            THEN
                v_maxlta_amt := v_dr_net_lta;
            ELSE
                v_maxlta_amt := v_comm_amt;
            END IF;
        END IF;

        IF v_comm_type = 'COM'
        THEN
            IF NVL (v_act_wthtx, 0) != 0
            THEN
                v_gross_comm :=
                    ROUND (
                          100
                        / (100 - NVL (v_act_wthtx, 0))
                        * NVL (v_maxcomm_amt, 0));
                v_whtx := v_gross_comm - v_maxcomm_amt;
            -- RAISE_ERROR('v_gross_comm='||v_gross_comm||'v_commission='||v_commission||'v_dr_mtran_whtx='||v_dr_mtran_whtx||'v_act_wthtx='||v_act_wthtx||'v_maxcomm_amt='||v_maxcomm_amt);
            ELSE
                v_gross_comm := v_maxcomm_amt;
                v_whtx := 0;
            END IF;
        ELSIF v_comm_type = 'ADM'
        THEN
            IF NVL (v_act_lta_whtx_rate, 0) != 0
            THEN
                v_gross_lta :=
                    ROUND (
                          100
                        / (100 - NVL (v_act_lta_whtx_rate, 0))
                        * NVL (v_maxlta_amt, 0));
                v_lta_whtx := v_gross_lta - v_maxlta_amt;
            ELSE
                v_gross_lta := v_maxlta_amt;
                v_lta_whtx := 0;
            END IF;
        END IF;

        IF NVL (v_vat_rate, 0) != 0 AND v_comm_type = 'COM'
        THEN
            v_vat_amt :=
                ROUND (NVL (v_vat_rate, 0) / 100 * NVL (v_maxcomm_amt, 0),
                       v_rnd);
        ELSE
            v_vat_amt := 0;
        END IF;

        IF v_comm_type = 'COM'
        THEN
            v_net_comm := NVL (v_maxcomm_amt, 0) --- NVL (v_whtx, 0)
                                                 + NVL (v_vat_amt, 0);
        ELSE
            v_net_lta := NVL (v_maxlta_amt, 0) - NVL (v_lta_whtx, 0);
        END IF;

        --RAISE_ERROR('v_gross_comm='||v_gross_comm||' v_whtx ='|| v_whtx ||'v_net_comm='||v_net_comm
        -- ||' v_vat_amt='|| v_vat_amt);
        BEGIN
            SELECT SUM (NVL (cop_comm_amt, 0))
              INTO v_comm_pyts
              FROM gin_commission_pymts
             WHERE     cop_dr_mtran_no = v_dr_mtran_no
                   AND NVL (cop_withdrawn, 'N') = 'N';
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error determining commission paid on debit note...');
        END;

        IF       ROUND (NVL (v_gross_comm, 0), v_rnd)
               - ROUND (ABS (v_commission), v_rnd) >
               1
           AND NVL (v_comm_type, 'COM') = 'COM'
        THEN
            raise_error (
                   'Total commission allocated '
                || NVL (v_comm_pyts, 0)
                || 'is greater than commission on debit note: v_commission'
                || ROUND (ABS (v_commission), v_rnd));
        ELSIF       ROUND (NVL (v_gross_lta, 0), v_rnd)
                  - ROUND (ABS (v_mtran_lta_amt), v_rnd) >
                  1
              AND NVL (v_comm_type, 'COM') = 'COM'
        THEN
            raise_error (
                   'Total admin fee allocated '
                || NVL (v_comm_pyts, 0)
                || 'is greater than admin fee on debit note: v_mtran_lta_amt'
                || ROUND (ABS (v_mtran_lta_amt), v_rnd));
        END IF;

        IF v_pmod_code IS NOT NULL
        THEN
            BEGIN
                SELECT pmod_sht_desc
                  INTO v_pmod_sht_desc
                  FROM tqc_payment_modes
                 WHERE pmod_code = v_pmod_code;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_pmod_sht_desc := NULL;
                WHEN OTHERS
                THEN
                    raise_error ('Error getting payment method..');
            END;
        ELSE
            v_pmod_sht_desc := NULL;
        END IF;

        -- RAISE_ERROR(v_gross_comm);
        IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
        THEN
            SELECT TO_NUMBER (
                       TO_CHAR (SYSDATE, 'YYYY') || gin_cop_code_seq.NEXTVAL)
              INTO v_cop_code
              FROM DUAL;


            -- raise_error('v_gross_comm='||v_gross_comm||'v_aggregate_claws_gross='||v_aggregate_claws_gross);
            ---cater for commission clawbacks
            ----include claw backs
            v_gross_comm :=
                  SIGN (NVL (v_gross_comm, 0))
                * (  ABS (NVL (v_gross_comm, 0))
                   - ABS (NVL (v_aggregate_claws_gross, 0)));
            v_net_comm :=
                  SIGN (NVL (v_net_comm, 0))
                * (  ABS (NVL (v_net_comm, 0))
                   - ABS (NVL (v_aggregate_claws_net, 0)));
            v_whtx :=
                  SIGN (NVL (v_whtx, 0))
                * (  ABS (NVL (v_whtx, 0))
                   - ABS (NVL (v_aggregate_claws_whtax, 0)));

            IF NVL (v_comm_type, 'COM') = 'COM'
            THEN
                INSERT INTO gin_commission_pymts (cop_code,
                                                  cop_agn_code,
                                                  cop_date,
                                                  cop_dr_ref_no,
                                                  cop_cr_ref_no,
                                                  cop_comm_amt,
                                                  cop_whdtax_amt,
                                                  cop_ovride_comm_amt,
                                                  cop_ovride_whdtax_amt,
                                                  cop_agn_unit_mgr,
                                                  cop_paid,
                                                  cop_paid_chq_date,
                                                  cop_paid_chq_no,
                                                  cop_paid_vchr_no,
                                                  cop_trans_no,
                                                  cop_brn_code,
                                                  cop_bru_code,
                                                  cop_prepared_by,
                                                  cop_cr_mtran_no,
                                                  cop_dr_mtran_no,
                                                  cop_whtx_rate,
                                                  cop_net_comm,
                                                  cop_cur_code,
                                                  cop_scl_code,
                                                  cop_act_type,
                                                  cop_vat,
                                                  cop_type)
                     VALUES (v_cop_code,
                             v_agnt_code,
                             TRUNC (SYSDATE),
                             v_dr_ref_no,
                             v_cr_ref_no,
                             v_gross_comm,
                             -v_whtx,
                             NULL,
                             NULL,
                             NULL,
                             'N',
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             v_brn_code,
                             NULL,
                             v_user,
                             v_cr_mtran_no,
                             v_dr_mtran_no,
                             v_act_wthtx,
                             v_net_comm,
                             v_cur_code,
                             v_pol_pro_code,
                             v_act_type,
                             v_vat_amt,
                             v_comm_type);

                ---utilize UW credit clawbacks
                GIN_ACCOUNTS_PKG.update_commission_clawbacks (v_cr_mtran_no,
                                                              v_dr_mtran_no,
                                                              v_cop_code);
            ELSIF NVL (v_comm_type, 'COM') = 'ADM'
            THEN
                INSERT INTO gin_commission_pymts (cop_code,
                                                  cop_agn_code,
                                                  cop_date,
                                                  cop_dr_ref_no,
                                                  cop_cr_ref_no,
                                                  cop_comm_amt,
                                                  cop_whdtax_amt,
                                                  cop_ovride_comm_amt,
                                                  cop_ovride_whdtax_amt,
                                                  cop_agn_unit_mgr,
                                                  cop_paid,
                                                  cop_paid_chq_date,
                                                  cop_paid_chq_no,
                                                  cop_paid_vchr_no,
                                                  cop_trans_no,
                                                  cop_brn_code,
                                                  cop_bru_code,
                                                  cop_prepared_by,
                                                  cop_cr_mtran_no,
                                                  cop_dr_mtran_no,
                                                  cop_whtx_rate,
                                                  cop_net_comm,
                                                  cop_cur_code,
                                                  cop_scl_code,
                                                  cop_act_type,
                                                  cop_vat,
                                                  cop_type)
                     VALUES (v_cop_code,
                             v_agnt_code,
                             TRUNC (SYSDATE),
                             v_dr_ref_no,
                             v_cr_ref_no,
                             v_gross_lta,
                             -v_lta_whtx,
                             NULL,
                             NULL,
                             NULL,
                             'N',
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             v_brn_code,
                             NULL,
                             v_user,
                             v_cr_mtran_no,
                             v_dr_mtran_no,
                             v_act_lta_whtx_rate,
                             v_net_lta,
                             v_cur_code,
                             v_pol_pro_code,
                             v_act_type,
                             v_vat_amt,
                             v_comm_type);
            END IF;
        ELSE
            v_comm_diff := v_gross_comm;
            v_lta_diff := v_gross_lta;

            FOR install_recs IN dr_installments
            LOOP
                IF (  ABS (NVL (install_recs.ptins_comm_amt, 0))
                    - ABS (NVL (install_recs.ptins_comm_paid, 0))) <=
                   0
                THEN
                    v_instal_comm := 0;
                    v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
                ELSIF v_comm_diff >=
                      (  ABS (NVL (install_recs.ptins_comm_amt, 0))
                       - ABS (NVL (install_recs.ptins_comm_paid, 0)))
                THEN
                    v_instal_comm :=
                        (  ABS (NVL (install_recs.ptins_comm_amt, 0))
                         - ABS (NVL (install_recs.ptins_comm_paid, 0)));
                    v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
                ELSE
                    v_instal_comm := v_comm_diff;
                    v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
                END IF;

                IF     NVL (v_instal_comm, 0) > 0
                   AND NVL (v_comm_type, 'COM') = 'COM'
                THEN
                    v_instal_net := v_instal_comm / v_gross_comm * v_net_comm;
                    v_instal_wht := v_instal_comm / v_gross_comm * v_whtx;

                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_cop_code_seq.NEXTVAL)
                      INTO v_cop_code
                      FROM DUAL;

                    ---cater for commission clawbacks
                    ----include claw backs
                    v_gross_comm :=
                          SIGN (NVL (v_gross_comm, 0))
                        * (  ABS (NVL (v_gross_comm, 0))
                           - ABS (NVL (v_aggregate_claws_gross, 0)));
                    v_net_comm :=
                          SIGN (NVL (v_net_comm, 0))
                        * (  ABS (NVL (v_net_comm, 0))
                           - ABS (NVL (v_aggregate_claws_net, 0)));
                    v_whtx :=
                          SIGN (NVL (v_whtx, 0))
                        * (  ABS (NVL (v_whtx, 0))
                           - ABS (NVL (v_aggregate_claws_whtax, 0)));


                    INSERT INTO gin_commission_pymts (cop_code,
                                                      cop_agn_code,
                                                      cop_date,
                                                      cop_dr_ref_no,
                                                      cop_cr_ref_no,
                                                      cop_comm_amt,
                                                      cop_whdtax_amt,
                                                      cop_ovride_comm_amt,
                                                      cop_ovride_whdtax_amt,
                                                      cop_agn_unit_mgr,
                                                      cop_paid,
                                                      cop_paid_chq_date,
                                                      cop_paid_chq_no,
                                                      cop_paid_vchr_no,
                                                      cop_trans_no,
                                                      cop_brn_code,
                                                      cop_bru_code,
                                                      cop_prepared_by,
                                                      cop_cr_mtran_no,
                                                      cop_dr_mtran_no,
                                                      cop_whtx_rate,
                                                      cop_net_comm,
                                                      cop_cur_code,
                                                      cop_scl_code,
                                                      cop_act_type,
                                                      cop_ptins_code,
                                                      cop_vat,
                                                      cop_type)
                         VALUES (v_cop_code,
                                 v_agnt_code,
                                 TRUNC (SYSDATE),
                                 v_dr_ref_no,
                                 v_cr_ref_no,
                                 v_instal_comm,
                                 -v_instal_wht,
                                 NULL,
                                 NULL,
                                 NULL,
                                 'N',
                                 NULL,
                                 NULL,
                                 NULL,
                                 NULL,
                                 v_brn_code,
                                 NULL,
                                 v_user,
                                 v_cr_mtran_no,
                                 v_dr_mtran_no,
                                 v_act_wthtx,
                                 v_instal_net,
                                 v_cur_code,
                                 v_pol_pro_code,
                                 v_act_type,
                                 install_recs.ptins_code,
                                 v_vat_amt,
                                 v_comm_type);

                    UPDATE gin_pol_trans_installs
                       SET ptins_comm_paid =
                                 NVL (ptins_comm_paid, 0)
                               + NVL (v_instal_comm, 0),
                           ptins_cr_mtran_no = v_cr_mtran_no
                     WHERE ptins_code = install_recs.ptins_code;

                    -- THIS HAS NOT BEEN HANDLED FOR ADMIN FEE
                    ---utilize UW credit clawbacks
                    GIN_ACCOUNTS_PKG.update_commission_clawbacks (
                        v_cr_mtran_no,
                        v_dr_mtran_no,
                        v_cop_code);
                END IF;

                EXIT WHEN v_comm_diff < 0;
            END LOOP;

            IF NVL (v_comm_diff, 0) != 0
            THEN
                raise_error (
                    'Error on commission installments computation. Amount not fully allocated.');
            END IF;
        END IF;

        --MTRAN_LTA_AMT,MTRAN_LTA_PAYABLE,
        -- MTRAN_LTA_PAID, MTRAN_LTA_WHTX
        --RAISE_ERROR(v_include_comm||';'||v_gross_comm||';'||v_dr_mtran_no||';'||v_cr_mtran_no);20153941962;20154072854
        IF NVL (v_include_comm, 'Y') = 'Y'
        THEN
            UPDATE gin_master_transactions
               SET mtran_comm_payable =
                       NVL (mtran_comm_payable, 0) + NVL (v_gross_comm, 0),
                   mtran_whtx_payable =
                       NVL (mtran_whtx_payable, 0) + NVL (v_whtx, 0),
                   mtran_vat_payable =
                       NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
                   mtran_lta_payable =
                       NVL (mtran_lta_payable, 0) + NVL (v_gross_lta, 0),
                   mtran_lta_whtx_payable =
                       NVL (mtran_lta_whtx_payable, 0) + NVL (v_lta_whtx, 0)
             WHERE mtran_no = v_dr_mtran_no;

            -- delete allocation trecord in gin_temp_debit_values
            DELETE FROM gin_temp_debit_values
                  WHERE TEMP_MTRAN_NO = v_dr_mtran_no;

            DELETE FROM GIN_TEMP_ALLOC_VALUES
                  WHERE TEM_TRANSNO = v_dr_mtran_no;

            UPDATE gin_master_transactions
               SET mtran_comm_payable =
                       NVL (mtran_comm_payable, 0) + NVL (v_gross_comm, 0),
                   mtran_whtx_payable =
                       NVL (mtran_whtx_payable, 0) + NVL (v_whtx, 0),
                   mtran_vat_payable =
                       NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
                   mtran_lta_payable =
                       NVL (mtran_lta_payable, 0) + NVL (v_gross_lta, 0),
                   mtran_lta_whtx_payable =
                       NVL (mtran_lta_whtx_payable, 0) + NVL (v_lta_whtx, 0)
             WHERE mtran_no = v_cr_mtran_no;

            ----UTILIZE COMMISSION CLAWBACKS
            IF NVL (v_aggregate_claws_gross, 0) != 0
            THEN
                IF v_user_name IS NULL
                THEN
                    raise_error (
                        'Error getting user details....Reconnect Session');
                END IF;

                GIN_UW_CREDITS_PKG.utilizeCommclawback (v_dr_mtran_no,
                                                        v_cr_mtran_no,
                                                        v_user_name);
            END IF;
        ELSIF     NVL (v_include_comm, 'Y') = 'N'
              AND NVL (v_include_vat, 'Y') = 'N'
        THEN
            UPDATE gin_master_transactions
               SET mtran_comm_payable =
                       NVL (mtran_comm_payable, 0) + v_gross_comm,
                   mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
                   mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
                   mtran_vat_paid =
                       NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
                   mtran_vat_payable =
                       NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
                   mtran_lta_payable =
                       NVL (mtran_lta_payable, 0) + v_gross_lta,
                   mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
                   mtran_lta_whtx_paid =
                       NVL (mtran_lta_whtx_paid, 0) + v_lta_whtx,
                   mtran_lta_whtx_payable =
                       NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
             WHERE mtran_no = v_dr_mtran_no;

            -- delete allocation trecord in gin_temp_debit_values
            DELETE FROM gin_temp_debit_values
                  WHERE TEMP_MTRAN_NO = v_dr_mtran_no;

            DELETE FROM GIN_TEMP_ALLOC_VALUES
                  WHERE TEM_TRANSNO = v_dr_mtran_no;

            UPDATE gin_master_transactions
               SET mtran_comm_payable =
                       NVL (mtran_comm_payable, 0) + v_gross_comm,
                   mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
                   mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
                   mtran_vat_paid =
                       NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
                   mtran_vat_payable =
                       NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
                   mtran_lta_payable =
                       NVL (mtran_lta_payable, 0) + v_gross_lta,
                   mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
                   mtran_lta_whtx_paid =
                       NVL (mtran_lta_whtx_paid, 0) + v_lta_whtx,
                   mtran_lta_whtx_payable =
                       NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
             WHERE mtran_no = v_cr_mtran_no;
        ELSIF     NVL (v_include_comm, 'Y') = 'N'
              AND NVL (v_include_vat, 'Y') = 'Y'
        THEN
            UPDATE gin_master_transactions
               SET mtran_comm_payable =
                       NVL (mtran_comm_payable, 0) + v_gross_comm,
                   mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
                   mtran_vat_payable =
                       NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
                   mtran_lta_payable =
                       NVL (mtran_lta_payable, 0) + v_gross_lta,
                   mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
                   mtran_lta_whtx_payable =
                       NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
             WHERE mtran_no = v_dr_mtran_no;

            -- delete allocation trecord in gin_temp_debit_values
            DELETE FROM gin_temp_debit_values
                  WHERE TEMP_MTRAN_NO = v_dr_mtran_no;

            DELETE FROM GIN_TEMP_ALLOC_VALUES
                  WHERE TEM_TRANSNO = v_dr_mtran_no;

            UPDATE gin_master_transactions
               SET mtran_comm_payable =
                       NVL (mtran_comm_payable, 0) + v_gross_comm,
                   mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
                   mtran_vat_payable =
                       NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0),
                   mtran_lta_payable =
                       NVL (mtran_lta_payable, 0) + v_gross_lta,
                   mtran_lta_paid = NVL (mtran_lta_paid, 0) + v_gross_lta,
                   mtran_lta_whtx_payable =
                       NVL (mtran_lta_whtx_payable, 0) + v_lta_whtx
             WHERE mtran_no = v_cr_mtran_no;
        END IF;

        IF v_comm_type = 'COM'
        THEN
            RETURN (v_gross_comm);
        ELSE
            RETURN (v_gross_lta);
        END IF;
    --UPDATE GIN_MASTER_TRANSACTIONS SET
    --MTRAN_BALANCE =
    END;


    -- FUNCTION update_commission (v_cr_mtran_no IN NUMBER,
    -- v_cr_ref_no IN VARCHAR2,
    -- v_dr_mtran_no IN NUMBER,
    -- v_dr_ref_no IN VARCHAR2,
    -- v_due_comm_amt IN NUMBER,
    -- v_due_vat_amt IN NUMBER,
    -- v_amt_available IN NUMBER,
    -- v_brn_code IN NUMBER,
    -- v_agnt_code IN NUMBER,
    -- v_cur_code IN NUMBER,
    -- v_include_comm IN VARCHAR2 DEFAULT 'Y',
    -- v_include_vat IN VARCHAR2 DEFAULT 'Y',
    -- v_comm_type IN VARCHAR2 DEFAULT 'COM')
    -- RETURN NUMBER
    -- IS
    -- v_mtran_no NUMBER;
    -- v_user VARCHAR2 (25);
    -- v_cop_code NUMBER;
    -- v_act_wthtx NUMBER := 0;
    -- v_gross_comm NUMBER;
    -- v_net_comm NUMBER;
    -- v_whtx NUMBER;
    -- v_pol_pro_code NUMBER;
    -- v_rnd NUMBER;
    -- v_over_rnd NUMBER;
    -- v_client_type VARCHAR2 (3);
    -- v_act_type VARCHAR2 (3);
    -- v_pmod_sht_desc tqc_payment_modes.pmod_sht_desc%TYPE;
    -- v_pmod_code NUMBER;
    -- v_instal_comm NUMBER;
    -- v_instal_net NUMBER;
    -- v_instal_wht NUMBER;
    -- v_comm_diff NUMBER;
    -- v_commission NUMBER;
    -- v_comm_payable NUMBER;
    -- v_comm_paid NUMBER;
    -- v_comm_pyts NUMBER;
    -- v_mkt_agn_code tqc_agencies.agn_code%TYPE;
    -- v_pol_batch_no gin_policies.pol_batch_no%TYPE;
    -- v_pol_wthtx_appl VARCHAR2 (1);
    -- v_comm_amt NUMBER;
    -- v_vat_amt NUMBER;
    -- v_agn_whtax_applicable VARCHAR2 (1) := 'N';
    -- v_aggregate_claws_gross NUMBER;
    -- v_aggregate_claws_whtax NUMBER;
    -- v_aggregate_claws_net NUMBER;
    -- v_user_name VARCHAR2(50):= pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
    --
    -- CURSOR dr_installments
    -- IS
    -- SELECT *
    -- FROM gin_pol_trans_installs
    -- WHERE ptins_mtran_no = v_dr_mtran_no
    -- ORDER BY ptins_install_no;
    -- BEGIN
    -- BEGIN
    -- SELECT mtran_client_type,
    -- mtran_pol_batch_no,
    -- mtran_pmod_code,
    -- mtran_pro_code,
    -- mtran_commission,
    -- mtran_comm_payable,
    -- mtran_comm_paid
    -- INTO v_client_type,
    -- v_pol_batch_no,
    -- v_pmod_code,
    -- v_pol_pro_code,
    -- v_commission,
    -- v_comm_payable,
    -- v_comm_paid
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_dr_mtran_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error determining account type...');
    -- END;
    --
    -- IF v_pol_pro_code IS NULL AND v_pol_batch_no IS NOT NULL
    -- THEN
    -- SELECT pol_pro_code
    -- INTO v_pol_pro_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- END IF;
    --
    -- --RAISE_ERROR('MERCY IS HERE');
    -- --IF
    -- -- raise_error('nnnnnnn V_agnt_code '||V_agnt_code);
    -- -- SELECT ACT_WTHTX_RATE,ACT_TYPE_SHT_DESC
    -- -- INTO v_act_wthtx,v_act_type
    -- -- FROM tqc_account_types
    -- -- WHERE ACT_CODE = V_agnt_code;
    --
    --
    -- ----GET unutilized COMMISSION CLAWBACKS
    -- ----credit refunds functionality
    -- IF NVL (v_include_comm, 'Y') = 'Y'
    -- THEN
    --
    -- begin
    -- select sum(nvl(abs(coc_comm_amt),0)),sum(nvl(abs(coc_whdtax_amt),0)),sum(nvl(abs(coc_comm_amt),0)-nvl(abs(coc_whdtax_amt),0))
    -- into v_aggregate_claws_gross,v_aggregate_claws_whtax,v_aggregate_claws_net
    -- from gin_commission_clawbacks
    -- where coc_dr_mtran_no=v_dr_mtran_no
    -- and NVL(coc_utilized,'N')='N'
    -- and NVL(coc_paid,'N')='N'
    -- and NVL(coc_authorized,'N')='N';
    -- exception when others then
    -- v_aggregate_claws_gross:=0;
    -- v_aggregate_claws_whtax:=0;
    -- v_aggregate_claws_net:=0;
    --
    -- end;
    --
    -- ELSE
    -- v_aggregate_claws_gross:=0;
    -- v_aggregate_claws_whtax:=0;
    -- v_aggregate_claws_net:=0;
    -- END IF;
    --
    -- v_pol_wthtx_appl :=
    -- gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');
    --
    -- --raise_error('v_client_type'||v_client_type);
    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    -- IF v_pol_wthtx_appl = 'Y'
    -- THEN
    -- BEGIN
    -- SELECT DECODE (v_comm_type,
    -- 'COM', act_wthtx_rate,
    -- 'ADM', act_lta_whtx_rate),
    -- act_type_sht_desc
    -- INTO v_act_wthtx, v_act_type
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting withholding tax rate...');
    -- END;
    -- ELSE
    -- BEGIN
    -- SELECT act_type_sht_desc
    -- INTO v_act_type
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    --
    -- v_act_wthtx := 0;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting withholding tax rate...');
    -- END;
    -- END IF;
    -- ELSE
    -- BEGIN
    -- SELECT pol_mktr_agn_code
    -- INTO v_mkt_agn_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting marketer attached...');
    -- END;
    --
    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    -- BEGIN
    -- SELECT DECODE (v_comm_type,
    -- 'COM', act_wthtx_rate,
    -- 'ADM', act_lta_whtx_rate),
    -- act_type_sht_desc, NVL(agn_whtax_applicable, 'N') agn_whtax_applicable
    -- INTO v_act_wthtx, v_act_type, v_agn_whtax_applicable
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error (
    -- 'Error getting withholding tax rate...'
    -- || v_act_wthtx
    -- || 'v_act_type'
    -- || v_act_type);
    -- END;
    -- END IF;
    -- END IF;
    --
    -- BEGIN
    -- SELECT param_value
    -- INTO v_rnd
    -- FROM gin_parameters
    -- WHERE param_name = 'OVERRIDE_COMM_RNDOFF'
    -- AND param_status = 'ACTIVE';
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- BEGIN
    -- SELECT cur_rnd
    -- INTO v_rnd
    -- FROM tqc_currencies
    -- WHERE cur_code = v_cur_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_when_others ('Error selecting rounding factor');
    -- END;
    -- WHEN OTHERS
    -- THEN
    -- raise_error (
    -- 'Error fetching override commission rounding parameter...');
    -- END;
    --
    -- --v_gross_comm := v_comm_amt;
    -- --v_whtx := v_act_wthtx/(100+v_act_wthtx) * v_comm_amt ;
    -- --v_net_comm := v_gross_comm - v_whtx;
    -- --v_act_wthtx := 5;
    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    -- IF NVL (v_due_vat_amt, 0) != 0
    -- THEN
    -- IF NVL (v_act_wthtx, 0) != 0
    -- THEN
    -- /*v_gross_comm :=
    -- ROUND (
    -- 100
    -- / (100 - NVL (v_act_wthtx, 0))
    -- * NVL (v_amt_available, 0),
    -- v_rnd);*/
    -- IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
    -- THEN
    -- v_gross_comm :=
    -- ROUND (( 100
    -- / (100 - NVL (v_act_wthtx, 0))
    -- * NVL (v_amt_available, 0)
    -- ),
    -- v_rnd
    -- );
    -- ELSE
    -- v_act_wthtx := 0;
    -- v_gross_comm :=
    -- ROUND (( 100
    -- / (100 - NVL (v_act_wthtx, 0))
    -- * NVL (v_amt_available, 0)
    -- ),
    -- v_rnd
    -- );
    -- END IF;
    --
    -- v_whtx := v_gross_comm - v_amt_available;
    -- ELSE
    -- v_gross_comm := v_amt_available;
    -- v_whtx := 0;
    -- END IF;
    --
    -- v_net_comm := v_amt_available;
    -- IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
    -- THEN
    -- v_whtx :=
    -- ROUND (NVL (v_gross_comm, 0), v_rnd)
    -- - ROUND (NVL (v_net_comm, 0), v_rnd);
    -- ELSE
    -- v_whtx := 0;
    -- END IF;
    --
    -- IF v_gross_comm > v_due_comm_amt
    -- THEN
    -- v_gross_comm := v_due_comm_amt;
    --
    -- IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
    -- THEN
    -- v_whtx :=
    -- ROUND (NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
    -- ELSE
    -- v_whtx := 0;
    -- END IF;
    -- v_net_comm := NVL (v_gross_comm, 0) - NVL (v_whtx, 0);
    -- END IF;
    -- ELSE
    -- IF NVL (v_act_wthtx, 0) != 0
    -- THEN
    -- IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
    -- THEN
    -- v_whtx :=
    -- ROUND (
    -- NVL (v_act_wthtx, 0) / (100) * NVL (v_due_comm_amt, 0));
    -- ELSE
    -- v_whtx := 0;
    -- END IF;
    -- END IF;
    --
    -- IF NVL (v_due_comm_amt, 0) != 0
    -- THEN ---Masinde Intermediary where commssion is not allowed
    -- --raise_Error(' v_due_comm_amt '||v_due_comm_amt);
    -- v_gross_comm :=
    -- ROUND (
    -- NVL (v_due_comm_amt, 0)
    -- / ( NVL (v_due_vat_amt, 0)
    -- + NVL (v_due_comm_amt, 0)
    -- - NVL (v_whtx, 0))
    -- * v_amt_available,
    -- v_rnd);
    -- --Raise_error('v_gross_comm'||v_gross_comm||'v_amt_available'||v_amt_available);
    -- v_vat_amt :=
    -- ROUND (
    -- NVL (v_due_vat_amt, 0)
    -- / ( NVL (v_due_vat_amt, 0)
    -- + NVL (v_due_comm_amt, 0)
    -- - NVL (v_whtx, 0))
    -- * NVL (v_amt_available, 0),
    -- v_rnd);
    -- v_whtx :=
    -- ROUND (
    -- NVL (v_whtx, 0)
    -- / ( NVL (v_due_vat_amt, 0)
    -- + NVL (v_due_comm_amt, 0)
    -- - NVL (v_whtx, 0))
    -- * NVL (v_amt_available, 0),
    -- v_rnd);
    -- DBMS_OUTPUT.put_line (
    -- 'v_comm_amt='
    -- || v_comm_amt
    -- || 'v_amt_available='
    -- || v_amt_available
    -- || 'v_due_vat_amt='
    -- || v_due_vat_amt
    -- || 'v_due_comm_amt='
    -- || v_due_comm_amt
    -- || 'v_vat_amt='
    -- || v_vat_amt
    -- || 'v_whtx='
    -- || v_whtx);
    -- v_net_comm :=
    -- ROUND (
    -- NVL (v_gross_comm, 0)
    -- - NVL (v_whtx, 0)
    -- + NVL (v_vat_amt, 0),
    -- v_rnd);
    -- DBMS_OUTPUT.put_line (
    -- 'v_due_comm_amt='
    -- || v_due_comm_amt
    -- || 'v_gross_comm='
    -- || v_gross_comm);
    --
    -- IF v_gross_comm > v_due_comm_amt
    -- THEN
    -- v_gross_comm := v_due_comm_amt;
    -- v_whtx :=
    -- ROUND (
    -- NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
    -- v_vat_amt := v_due_vat_amt;
    -- v_net_comm :=
    -- NVL (v_gross_comm, 0)
    -- - NVL (v_whtx, 0)
    -- + NVL (v_vat_amt, 0);
    --
    -- IF v_net_comm > v_amt_available
    -- THEN
    -- raise_error ('RRR');
    -- END IF;
    -- END IF;
    -- END IF;
    -- END IF;
    --
    -- -- raise_Error('v_gross_comm='||v_gross_comm);
    -- IF v_pol_batch_no IS NULL
    -- THEN
    -- BEGIN
    -- SELECT pol_pmod_code
    -- INTO v_pmod_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- NULL;
    -- END;
    -- END IF;
    --
    -- IF v_pmod_code IS NOT NULL
    -- THEN
    -- BEGIN
    -- SELECT pmod_sht_desc
    -- INTO v_pmod_sht_desc
    -- FROM tqc_payment_modes
    -- WHERE pmod_code = v_pmod_code;
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- v_pmod_sht_desc := NULL;
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting payment method..');
    -- END;
    -- ELSE
    -- v_pmod_sht_desc := NULL;
    -- END IF;
    --
    -- -- IF V_pmod_code IS NOT NULL THEN RAISE_ERROR('NVL(v_pmod_sht_desc ??? === '|| v_pmod_sht_desc);
    -- IF NVL (v_gross_comm, 0) != 0
    -- THEN
    -- IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
    -- THEN
    -- SELECT TO_NUMBER (
    -- TO_CHAR (SYSDATE, 'YYYY')
    -- || gin_cop_code_seq.NEXTVAL)
    -- INTO v_cop_code
    -- FROM DUAL;
    --
    -- ---include clawbacks
    -- v_gross_comm:= sign(v_gross_comm)*abs(v_gross_comm)-abs(v_aggregate_claws_gross);
    -- v_net_comm:= sign(v_net_comm)* abs(v_net_comm)-abs(v_aggregate_claws_net);
    -- v_whtx:= sign(v_whtx)*abs(v_whtx)-abs(v_aggregate_claws_whtax);
    --
    -- INSERT INTO gin_commission_pymts (cop_code,
    -- cop_agn_code,
    -- cop_date,
    -- cop_dr_ref_no,
    -- cop_cr_ref_no,
    -- cop_comm_amt,
    -- cop_whdtax_amt,
    -- cop_ovride_comm_amt,
    -- cop_ovride_whdtax_amt,
    -- cop_agn_unit_mgr,
    -- cop_paid,
    -- cop_paid_chq_date,
    -- cop_paid_chq_no,
    -- cop_paid_vchr_no,
    -- cop_trans_no,
    -- cop_brn_code,
    -- cop_bru_code,
    -- cop_prepared_by,
    -- cop_cr_mtran_no,
    -- cop_dr_mtran_no,
    -- cop_whtx_rate,
    -- cop_net_comm,
    -- cop_cur_code,
    -- cop_scl_code,
    -- cop_act_type,
    -- cop_type)
    -- VALUES (
    -- v_cop_code,
    -- DECODE (v_client_type,
    -- 'D', v_mkt_agn_code,
    -- v_agnt_code),
    -- TRUNC (SYSDATE),
    -- v_dr_ref_no,
    -- v_cr_ref_no,
    -- v_gross_comm,
    -- -v_whtx,
    -- NULL,
    -- NULL,
    -- NULL,
    -- 'N',
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- v_brn_code,
    -- NULL,
    -- v_user,
    -- v_cr_mtran_no,
    -- v_dr_mtran_no,
    -- v_act_wthtx,
    -- v_net_comm,
    -- v_cur_code,
    -- v_pol_pro_code,
    -- v_act_type,
    -- v_comm_type);
    --
    -- ---utilize UW credit clawbacks
    -- GIN_ACCOUNTS_PKG.update_commission_clawbacks(v_cr_mtran_no,v_dr_mtran_no,v_cop_code);
    -- ELSE
    -- v_comm_diff := v_gross_comm;
    --
    -- -- RAISE_ERROR('v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- FOR install_recs IN dr_installments
    -- LOOP
    -- IF (ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0))) <= 0
    -- THEN
    -- v_instal_comm := 0;
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- -- RAISE_ERROR('1v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- ELSIF v_comm_diff >=
    -- (ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0)))
    -- THEN
    -- v_instal_comm :=
    -- (ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0)));
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- -- RAISE_ERROR('2v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- ELSE
    -- v_instal_comm := v_comm_diff;
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- -- RAISE_ERROR('3v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- END IF;
    --
    -- -- RAISE_ERROR('4v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- IF NVL (v_instal_comm, 0) > 0
    -- THEN
    -- v_instal_net :=
    -- ROUND (v_instal_comm / v_gross_comm * v_net_comm);
    -- v_instal_wht :=
    -- ROUND (v_instal_comm / v_gross_comm * v_whtx);
    --
    -- SELECT TO_NUMBER (
    -- TO_CHAR (SYSDATE, 'YYYY')
    -- || gin_cop_code_seq.NEXTVAL)
    -- INTO v_cop_code
    -- FROM DUAL;
    --
    -- ---include clawbacks
    -- v_gross_comm:= sign(v_gross_comm)*abs(v_gross_comm)-abs(v_aggregate_claws_gross);
    -- v_net_comm:= sign(v_net_comm)* abs(v_net_comm)-abs(v_aggregate_claws_net);
    -- v_whtx:= sign(v_whtx)*abs(v_whtx)-abs(v_aggregate_claws_whtax);
    --
    -- --DBMS_OUTPUT.PUT_LINE('5v_instal_net='||v_instal_net||' v_instal_comm='||v_instal_comm||' v_instal_wht='||v_instal_wht);
    -- INSERT INTO gin_commission_pymts (cop_code,
    -- cop_agn_code,
    -- cop_date,
    -- cop_dr_ref_no,
    -- cop_cr_ref_no,
    -- cop_comm_amt,
    -- cop_whdtax_amt,
    -- cop_ovride_comm_amt,
    -- cop_ovride_whdtax_amt,
    -- cop_agn_unit_mgr,
    -- cop_paid,
    -- cop_paid_chq_date,
    -- cop_paid_chq_no,
    -- cop_paid_vchr_no,
    -- cop_trans_no,
    -- cop_brn_code,
    -- cop_bru_code,
    -- cop_prepared_by,
    -- cop_cr_mtran_no,
    -- cop_dr_mtran_no,
    -- cop_whtx_rate,
    -- cop_net_comm,
    -- cop_cur_code,
    -- cop_scl_code,
    -- cop_act_type,
    -- cop_ptins_code,
    -- cop_type)
    -- VALUES (v_cop_code,
    -- v_agnt_code,
    -- TRUNC (SYSDATE),
    -- v_dr_ref_no,
    -- v_cr_ref_no,
    -- v_instal_comm,
    -- -v_instal_wht,
    -- NULL,
    -- NULL,
    -- NULL,
    -- 'N',
    -- NULL,
    -- NULL,
    -- NULL,
    -- NULL,
    -- v_brn_code,
    -- NULL,
    -- v_user,
    -- v_cr_mtran_no,
    -- v_dr_mtran_no,
    -- v_act_wthtx,
    -- v_instal_net,
    -- v_cur_code,
    -- v_pol_pro_code,
    -- v_act_type,
    -- install_recs.ptins_code,
    -- v_comm_type);
    --
    -- UPDATE gin_pol_trans_installs
    -- SET ptins_comm_paid =
    -- NVL (ptins_comm_paid, 0)
    -- + NVL (v_instal_comm, 0),
    -- ptins_cr_mtran_no = v_cr_mtran_no
    -- WHERE ptins_code = install_recs.ptins_code;
    --
    -- ---utilize UW credit clawbacks
    -- GIN_ACCOUNTS_PKG.update_commission_clawbacks(v_cr_mtran_no,v_dr_mtran_no,v_cop_code);
    -- END IF;
    --
    -- EXIT WHEN v_comm_diff < 0;
    -- END LOOP;
    --
    -- IF NVL (v_comm_diff, 0) > 1
    -- THEN
    -- raise_error (
    -- 'Error on commission installments computation. Amount not fully allocated.='
    -- || v_comm_diff);
    -- END IF;
    -- END IF;
    -- END IF;
    ----RAISE_ERROR('v_whtx '||v_whtx);
    -- IF NVL (v_include_comm, 'Y') = 'Y'
    -- AND NVL (v_comm_type, 'COM') = 'COM'
    -- THEN
    -- --RAISE_ERROR('v_whtx '||v_whtx);
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + v_gross_comm,
    -- --v_gross_comm, -- SHOULD WE UPDATE THE NET COMMISSION OR GROSS COMMISSION. FIND OUT
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + v_gross_comm,
    -- --v_gross_comm, -- SHOULD WE UPDATE GROSS COMMISSION. FIND OUT
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_cr_mtran_no;
    --
    --
    -- ----UTILIZE COMMISSION CLAWBACKS
    -- IF NVL(v_aggregate_claws_gross,0)!=0 THEN
    -- IF v_user_name IS NULL THEN
    -- raise_error('Error getting user details....Reconnect Session');
    -- END IF;
    --
    -- GIN_UW_CREDITS_PKG.utilizeCommclawback(v_dr_mtran_no,v_cr_mtran_no,v_user_name);
    --
    -- END IF;
    --
    -- ELSIF NVL (v_include_comm, 'Y') = 'N'
    -- AND NVL (v_include_vat, 'Y') = 'N'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    -- mtran_vat_paid =
    -- NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    -- mtran_vat_paid =
    -- NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_cr_mtran_no;
    -- ELSIF NVL (v_include_comm, 'Y') = 'N'
    -- AND NVL (v_include_vat, 'Y') = 'Y'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable =
    -- NVL (mtran_comm_payable, 0) + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_cr_mtran_no;
    -- END IF;
    --
    -- IF NVL (v_comm_type, 'COM') = 'ADM'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_lta_payable =
    -- NVL (mtran_lta_payable, 0) + v_gross_comm,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0) + v_whtx
    -- WHERE mtran_no = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_lta_payable =
    -- NVL (mtran_lta_payable, 0) + v_gross_comm,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0) + v_whtx
    -- WHERE mtran_no = v_cr_mtran_no;
    -- END IF;
    -- END IF;
    --
    -- RETURN (v_net_comm); -- (v_gross_comm);
    -- END;

    --FUNCTION update_commission (
    -- v_cr_mtran_no IN NUMBER,
    -- v_cr_ref_no IN VARCHAR2,
    -- v_dr_mtran_no IN NUMBER,
    -- v_dr_ref_no IN VARCHAR2,
    -- v_due_comm_amt IN NUMBER,
    -- v_due_vat_amt IN NUMBER,
    -- v_amt_available IN NUMBER,
    -- v_brn_code IN NUMBER,
    -- v_agnt_code IN NUMBER,
    -- v_cur_code IN NUMBER,
    -- v_include_comm IN VARCHAR2 DEFAULT 'Y',
    -- v_include_vat IN VARCHAR2 DEFAULT 'Y',
    -- v_comm_type IN VARCHAR2 DEFAULT 'COM'
    --)
    -- RETURN NUMBER
    --IS
    -- v_mtran_no NUMBER;
    -- v_user VARCHAR2 (25);
    -- v_cop_code NUMBER;
    -- v_act_wthtx NUMBER := 0;
    -- v_gross_comm NUMBER;
    -- v_net_comm NUMBER;
    -- v_whtx NUMBER;
    -- v_pol_pro_code NUMBER;
    -- v_rnd NUMBER;
    -- v_over_rnd NUMBER;
    -- v_client_type VARCHAR2 (3);
    -- v_act_type VARCHAR2 (3);
    -- v_pmod_sht_desc tqc_payment_modes.pmod_sht_desc%TYPE;
    -- v_pmod_code NUMBER;
    -- v_instal_comm NUMBER;
    -- v_instal_net NUMBER;
    -- v_instal_wht NUMBER;
    -- v_comm_diff NUMBER;
    -- v_commission NUMBER;
    -- v_comm_payable NUMBER;
    -- v_comm_paid NUMBER;
    -- v_comm_pyts NUMBER;
    -- v_mkt_agn_code tqc_agencies.agn_code%TYPE;
    -- v_pol_batch_no gin_policies.pol_batch_no%TYPE;
    -- v_pol_wthtx_appl VARCHAR2 (1);
    -- v_comm_amt NUMBER;
    -- v_vat_amt NUMBER;
    -- v_agn_whtax_applicable VARCHAR2 (1) := 'N';
    -- v_aggregate_claws_gross NUMBER;
    -- v_aggregate_claws_whtax NUMBER;
    -- v_aggregate_claws_net NUMBER;
    -- v_user_name VARCHAR2 (50)
    -- := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');

    -- CURSOR dr_installments
    -- IS
    -- SELECT *
    -- FROM gin_pol_trans_installs
    -- WHERE ptins_mtran_no = v_dr_mtran_no
    -- ORDER BY ptins_install_no;
    --BEGIN
    ---- raise_error('v_aggregate_claws_gross11='||v_aggregate_claws_gross||'v_aggregate_claws_whtax='||v_aggregate_claws_whtax||'v_aggregate_claws_net='||v_aggregate_claws_net);
    -- BEGIN
    -- SELECT mtran_client_type, mtran_pol_batch_no, mtran_pmod_code,
    -- mtran_pro_code, mtran_commission, mtran_comm_payable,
    -- mtran_comm_paid
    -- INTO v_client_type, v_pol_batch_no, v_pmod_code,
    -- v_pol_pro_code, v_commission, v_comm_payable,
    -- v_comm_paid
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_dr_mtran_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error determining account type...');
    -- END;

    -- IF v_pol_pro_code IS NULL AND v_pol_batch_no IS NOT NULL
    -- THEN
    -- SELECT pol_pro_code
    -- INTO v_pol_pro_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- END IF;

    -- --RAISE_ERROR('MERCY IS HERE');
    -- --IF
    -- -- raise_error('nnnnnnn V_agnt_code '||V_agnt_code);
    -- -- SELECT ACT_WTHTX_RATE,ACT_TYPE_SHT_DESC
    -- -- INTO v_act_wthtx,v_act_type
    -- -- FROM tqc_account_types
    -- -- WHERE ACT_CODE = V_agnt_code;
    ---- raise_error( v_due_comm_amt||';'||v_due_vat_amt||';'||
    ---- v_amt_available );

    -- ----GET unutilized COMMISSION CLAWBACKS
    -- ----credit refunds functionality
    -- IF NVL (v_include_comm, 'Y') = 'Y'
    -- THEN
    -- BEGIN
    -- SELECT SUM (NVL (ABS (coc_comm_amt), 0)),
    -- SUM (NVL (ABS (coc_whdtax_amt), 0)),
    -- SUM ( NVL (ABS (coc_comm_amt), 0)
    -- - NVL (ABS (coc_whdtax_amt), 0)
    -- )
    -- INTO v_aggregate_claws_gross,
    -- v_aggregate_claws_whtax,
    -- v_aggregate_claws_net
    -- FROM gin_commission_clawbacks
    -- WHERE coc_dr_mtran_no = v_dr_mtran_no
    -- AND NVL (coc_utilized, 'N') = 'N'
    -- AND NVL (coc_paid, 'N') = 'N'
    -- AND NVL (coc_authorized, 'N') = 'N';
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- v_aggregate_claws_gross := 0;
    -- v_aggregate_claws_whtax := 0;
    -- v_aggregate_claws_net := 0;
    -- END;
    -- ELSE
    -- v_aggregate_claws_gross := 0;
    -- v_aggregate_claws_whtax := 0;
    -- v_aggregate_claws_net := 0;
    -- END IF;

    -- --raise_error('v_aggregate_claws_gross='||v_aggregate_claws_gross||'v_aggregate_claws_whtax='||v_aggregate_claws_whtax||'v_aggregate_claws_net='||v_aggregate_claws_net);
    -- v_pol_wthtx_appl :=
    -- gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');

    --
    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    -- IF v_pol_wthtx_appl = 'Y'
    -- THEN
    -- BEGIN
    -- SELECT DECODE (v_comm_type,
    -- 'COM', act_wthtx_rate,
    -- 'ADM', act_lta_whtx_rate
    -- ),
    -- act_type_sht_desc
    -- INTO v_act_wthtx,
    -- v_act_type
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting withholding tax rate...');
    -- END;
    --
    --
    --
    -- ELSE
    -- BEGIN
    -- SELECT act_type_sht_desc
    -- INTO v_act_type
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_agnt_code;

    -- v_act_wthtx := 0;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting withholding tax rate...');
    -- END;
    -- END IF;
    -- ELSE
    -- BEGIN
    -- SELECT pol_mktr_agn_code
    -- INTO v_mkt_agn_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting marketer attached...');
    -- END;

    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    -- BEGIN
    -- SELECT DECODE (v_comm_type,
    -- 'COM', act_wthtx_rate,
    -- 'ADM', act_lta_whtx_rate
    -- ),
    -- act_type_sht_desc,
    -- NVL (agn_whtax_applicable, 'N') agn_whtax_applicable
    -- INTO v_act_wthtx,
    -- v_act_type,
    -- v_agn_whtax_applicable
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ( 'Error getting withholding tax rate...'
    -- || v_act_wthtx
    -- || 'v_act_type'
    -- || v_act_type
    -- );
    -- END;
    -- END IF;
    -- END IF;

    -- BEGIN
    -- SELECT param_value
    -- INTO v_rnd
    -- FROM gin_parameters
    -- WHERE param_name = 'OVERRIDE_COMM_RNDOFF' AND param_status = 'ACTIVE';
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- BEGIN
    -- SELECT cur_rnd
    -- INTO v_rnd
    -- FROM tqc_currencies
    -- WHERE cur_code = v_cur_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_when_others ('Error selecting rounding factor');
    -- END;
    -- WHEN OTHERS
    -- THEN
    -- raise_error
    -- ('Error fetching override commission rounding parameter...');
    -- END;

    -- --v_gross_comm := v_comm_amt;
    -- --v_whtx := v_act_wthtx/(100+v_act_wthtx) * v_comm_amt ;
    -- --v_net_comm := v_gross_comm - v_whtx;
    -- --v_act_wthtx := 5;
    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    --
    -- IF NVL (v_due_vat_amt, 0) != 0
    -- THEN
    -- IF NVL (v_act_wthtx, 0) != 0
    -- THEN
    -- /*v_gross_comm :=
    -- ROUND (
    -- 100
    -- / (100 - NVL (v_act_wthtx, 0))
    -- * NVL (v_amt_available, 0),
    -- v_rnd);*/
    --
    -- IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
    -- THEN
    -- v_gross_comm :=
    -- ROUND (( 100
    -- / (100 - NVL (v_act_wthtx, 0))
    -- * NVL (v_amt_available, 0)
    -- ),
    -- v_rnd
    -- );
    -- ELSE
    -- v_act_wthtx := 0;
    -- v_gross_comm :=
    -- ROUND (( 100
    -- / (100 - NVL (v_act_wthtx, 0))
    -- * NVL (v_amt_available, 0)
    -- ),
    -- v_rnd
    -- );
    -- END IF;

    -- v_whtx := v_gross_comm - v_amt_available;
    -- ELSE
    -- v_gross_comm := v_amt_available;
    -- v_whtx := 0;
    -- END IF;

    -- v_net_comm := v_amt_available;

    -- IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
    -- THEN
    -- v_whtx :=
    -- ROUND (NVL (v_gross_comm, 0), v_rnd)
    -- - ROUND (NVL (v_net_comm, 0), v_rnd);
    -- ELSE
    -- v_whtx := 0;
    -- END IF;

    -- IF v_gross_comm > v_due_comm_amt
    -- THEN
    -- v_gross_comm := v_due_comm_amt;

    -- IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
    -- THEN
    -- v_whtx :=
    -- ROUND (NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
    -- ELSE
    -- v_whtx := 0;
    -- END IF;

    -- v_net_comm := NVL (v_gross_comm, 0) - NVL (v_whtx, 0);
    -- END IF;
    -- ELSE
    ---- RAISE_ERROR('v_agn_whtax_applicable='||v_agn_whtax_applicable);
    -- IF NVL (v_act_wthtx, 0) != 0
    -- THEN
    ---- IF NVL (v_agn_whtax_applicable, 'N') = 'Y'
    ---- THEN
    ---- v_whtx :=
    ---- ROUND ( NVL (v_act_wthtx, 0)
    ---- / (100)
    ---- * NVL (v_due_comm_amt, 0));
    ---- ELSE
    ---- v_whtx := 0;
    ---- END IF;
    --
    -- IF NVL (v_act_wthtx, 0) != 0
    -- THEN
    -- v_whtx :=
    -- ROUND (
    -- NVL (v_act_wthtx, 0) / (100) * NVL (v_due_comm_amt, 0));
    -- END IF;
    -- END IF;

    -- IF NVL (v_due_comm_amt, 0) != 0
    -- THEN ---Masinde Intermediary where commssion is not allowed
    -- --raise_Error(' v_due_comm_amt '||v_due_comm_amt);
    -- v_gross_comm :=
    -- ROUND ( NVL (v_due_comm_amt, 0)
    -- / ( NVL (v_due_vat_amt, 0)
    -- + NVL (v_due_comm_amt, 0)
    -- - NVL (v_whtx, 0)
    -- )
    -- * v_amt_available,
    -- v_rnd
    -- );
    -- --Raise_error('v_gross_comm'||v_gross_comm||'v_amt_available'||v_amt_available);
    -- v_vat_amt :=
    -- ROUND ( NVL (v_due_vat_amt, 0)
    -- / ( NVL (v_due_vat_amt, 0)
    -- + NVL (v_due_comm_amt, 0)
    -- - NVL (v_whtx, 0)
    -- )
    -- * NVL (v_amt_available, 0),
    -- v_rnd
    -- );
    -- v_whtx :=
    -- ROUND ( NVL (v_whtx, 0)
    -- / ( NVL (v_due_vat_amt, 0)
    -- + NVL (v_due_comm_amt, 0)
    -- - NVL (v_whtx, 0)
    -- )
    -- * NVL (v_amt_available, 0),
    -- v_rnd
    -- );
    -- DBMS_OUTPUT.put_line ( 'v_comm_amt='
    -- || v_comm_amt
    -- || 'v_amt_available='
    -- || v_amt_available
    -- || 'v_due_vat_amt='
    -- || v_due_vat_amt
    -- || 'v_due_comm_amt='
    -- || v_due_comm_amt
    -- || 'v_vat_amt='
    -- || v_vat_amt
    -- || 'v_whtx='
    -- || v_whtx
    -- );
    -- v_net_comm :=
    -- ROUND ( NVL (v_gross_comm, 0)
    -- - NVL (v_whtx, 0)
    -- + NVL (v_vat_amt, 0),
    -- v_rnd
    -- );
    -- DBMS_OUTPUT.put_line ( 'v_due_comm_amt='
    -- || v_due_comm_amt
    -- || 'v_gross_comm='
    -- || v_gross_comm
    -- );

    -- IF v_gross_comm > v_due_comm_amt
    -- THEN
    -- v_gross_comm := v_due_comm_amt;
    -- v_whtx :=
    -- ROUND (NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
    -- v_vat_amt := v_due_vat_amt;
    -- v_net_comm :=
    -- NVL (v_gross_comm, 0) - NVL (v_whtx, 0)
    -- + NVL (v_vat_amt, 0);

    -- IF v_net_comm > v_amt_available
    -- THEN
    -- raise_error ('RRR');
    -- END IF;
    -- END IF;
    -- END IF;
    -- END IF;

    ---- raise_Error('v_gross_comm='||v_gross_comm);
    -- IF v_pol_batch_no IS NULL
    -- THEN
    -- BEGIN
    -- SELECT pol_pmod_code
    -- INTO v_pmod_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- NULL;
    -- END;
    -- END IF;

    -- IF v_pmod_code IS NOT NULL
    -- THEN
    -- BEGIN
    -- SELECT pmod_sht_desc
    -- INTO v_pmod_sht_desc
    -- FROM tqc_payment_modes
    -- WHERE pmod_code = v_pmod_code;
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- v_pmod_sht_desc := NULL;
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting payment method..');
    -- END;
    -- ELSE
    -- v_pmod_sht_desc := NULL;
    -- END IF;

    -- -- IF V_pmod_code IS NOT NULL THEN RAISE_ERROR('NVL(v_pmod_sht_desc ??? === '|| v_pmod_sht_desc);
    -- IF NVL (v_gross_comm, 0) != 0
    -- THEN
    -- IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
    -- THEN
    -- SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
    -- || gin_cop_code_seq.NEXTVAL
    -- )
    -- INTO v_cop_code
    -- FROM DUAL;

    -- ---include clawbacks
    -- v_gross_comm :=
    -- SIGN (NVL (v_gross_comm, 0)) * ABS (NVL (v_gross_comm, 0))
    -- - ABS (NVL (v_aggregate_claws_gross, 0));
    -- v_net_comm :=
    -- SIGN (NVL (v_net_comm, 0)) * ABS (NVL (v_net_comm, 0))
    -- - ABS (NVL (v_aggregate_claws_net, 0));
    -- v_whtx :=
    -- SIGN (NVL (v_whtx, 0)) * ABS (NVL (v_whtx, 0))
    -- - ABS (NVL (v_aggregate_claws_whtax, 0));

    ----raise_error(v_gross_comm||';'||v_net_comm||';'||v_whtx);
    -- INSERT INTO gin_commission_pymts
    -- (cop_code,
    -- cop_agn_code,
    -- cop_date, cop_dr_ref_no, cop_cr_ref_no,
    -- cop_comm_amt, cop_whdtax_amt, cop_ovride_comm_amt,
    -- cop_ovride_whdtax_amt, cop_agn_unit_mgr, cop_paid,
    -- cop_paid_chq_date, cop_paid_chq_no,
    -- cop_paid_vchr_no, cop_trans_no, cop_brn_code,
    -- cop_bru_code, cop_prepared_by, cop_cr_mtran_no,
    -- cop_dr_mtran_no, cop_whtx_rate, cop_net_comm,
    -- cop_cur_code, cop_scl_code, cop_act_type, cop_type
    -- )
    -- VALUES (v_cop_code,
    -- DECODE (v_client_type,
    -- 'D', v_mkt_agn_code,
    -- v_agnt_code
    -- ),
    -- TRUNC (SYSDATE), v_dr_ref_no, v_cr_ref_no,
    -- v_gross_comm, -v_whtx, NULL,
    -- NULL, NULL, 'N',
    -- NULL, NULL,
    -- NULL, NULL, v_brn_code,
    -- NULL, v_user, v_cr_mtran_no,
    -- v_dr_mtran_no, v_act_wthtx, v_net_comm,
    -- v_cur_code, v_pol_pro_code, v_act_type, v_comm_type
    -- );

    -- ---utilize UW credit clawbacks
    -- gin_accounts_pkg.update_commission_clawbacks (v_cr_mtran_no,
    -- v_dr_mtran_no,
    -- v_cop_code
    -- );
    -- ELSE
    -- v_comm_diff := v_gross_comm;

    -- -- RAISE_ERROR('v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- FOR install_recs IN dr_installments
    -- LOOP
    -- IF ( ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0))
    -- ) <= 0
    -- THEN
    -- v_instal_comm := 0;
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- -- RAISE_ERROR('1v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- ELSIF v_comm_diff >=
    -- ( ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0))
    -- )
    -- THEN
    -- v_instal_comm :=
    -- ( ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0))
    -- );
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- -- RAISE_ERROR('2v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- ELSE
    -- v_instal_comm := v_comm_diff;
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- -- RAISE_ERROR('3v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- END IF;

    -- -- RAISE_ERROR('4v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- IF NVL (v_instal_comm, 0) > 0
    -- THEN
    -- v_instal_net :=
    -- ROUND (v_instal_comm / v_gross_comm * v_net_comm);
    -- v_instal_wht :=
    -- ROUND (v_instal_comm / v_gross_comm * v_whtx);

    -- SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
    -- || gin_cop_code_seq.NEXTVAL
    -- )
    -- INTO v_cop_code
    -- FROM DUAL;

    -- ---include clawbacks
    -- v_gross_comm :=
    -- SIGN (v_gross_comm) * ABS (v_gross_comm)
    -- - ABS (v_aggregate_claws_gross);
    -- v_net_comm :=
    -- SIGN (v_net_comm) * ABS (v_net_comm)
    -- - ABS (v_aggregate_claws_net);
    -- v_whtx :=
    -- SIGN (v_whtx) * ABS (v_whtx)
    -- - ABS (v_aggregate_claws_whtax);

    -- --DBMS_OUTPUT.PUT_LINE('5v_instal_net='||v_instal_net||' v_instal_comm='||v_instal_comm||' v_instal_wht='||v_instal_wht);
    -- INSERT INTO gin_commission_pymts
    -- (cop_code, cop_agn_code, cop_date,
    -- cop_dr_ref_no, cop_cr_ref_no, cop_comm_amt,
    -- cop_whdtax_amt, cop_ovride_comm_amt,
    -- cop_ovride_whdtax_amt, cop_agn_unit_mgr,
    -- cop_paid, cop_paid_chq_date, cop_paid_chq_no,
    -- cop_paid_vchr_no, cop_trans_no, cop_brn_code,
    -- cop_bru_code, cop_prepared_by,
    -- cop_cr_mtran_no, cop_dr_mtran_no,
    -- cop_whtx_rate, cop_net_comm, cop_cur_code,
    -- cop_scl_code, cop_act_type,
    -- cop_ptins_code, cop_type
    -- )
    -- VALUES (v_cop_code, v_agnt_code, TRUNC (SYSDATE),
    -- v_dr_ref_no, v_cr_ref_no, v_instal_comm,
    -- -v_instal_wht, NULL,
    -- NULL, NULL,
    -- 'N', NULL, NULL,
    -- NULL, NULL, v_brn_code,
    -- NULL, v_user,
    -- v_cr_mtran_no, v_dr_mtran_no,
    -- v_act_wthtx, v_instal_net, v_cur_code,
    -- v_pol_pro_code, v_act_type,
    -- install_recs.ptins_code, v_comm_type
    -- );

    -- UPDATE gin_pol_trans_installs
    -- SET ptins_comm_paid =
    -- NVL (ptins_comm_paid, 0)
    -- + NVL (v_instal_comm, 0),
    -- ptins_cr_mtran_no = v_cr_mtran_no
    -- WHERE ptins_code = install_recs.ptins_code;

    -- ---utilize UW credit clawbacks
    -- gin_accounts_pkg.update_commission_clawbacks (v_cr_mtran_no,
    -- v_dr_mtran_no,
    -- v_cop_code
    -- );
    -- END IF;

    -- EXIT WHEN v_comm_diff < 0;
    -- END LOOP;

    -- IF NVL (v_comm_diff, 0) > 1
    -- THEN
    -- raise_error
    -- ( 'Error on commission installments computation. Amount not fully allocated.='
    -- || v_comm_diff
    -- );
    -- END IF;
    -- END IF;
    -- END IF;

    ----RAISE_ERROR('v_whtx '||v_whtx);
    -- IF NVL (v_include_comm, 'Y') = 'Y' AND NVL (v_comm_type, 'COM') = 'COM'
    -- THEN
    -- --RAISE_ERROR('v_whtx '||v_whtx);
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- --v_gross_comm, -- SHOULD WE UPDATE THE NET COMMISSION OR GROSS COMMISSION. FIND OUT
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_dr_mtran_no;

    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- --v_gross_comm, -- SHOULD WE UPDATE GROSS COMMISSION. FIND OUT
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_cr_mtran_no;

    -- ----UTILIZE COMMISSION CLAWBACKS
    -- IF NVL (v_aggregate_claws_gross, 0) != 0
    -- THEN
    -- IF v_user_name IS NULL
    -- THEN
    -- raise_error ('Error getting user details....Reconnect Session');
    -- END IF;

    -- gin_uw_credits_pkg.utilizecommclawback (v_dr_mtran_no,
    -- v_cr_mtran_no,
    -- v_user_name
    -- );
    -- END IF;
    -- ELSIF NVL (v_include_comm, 'Y') = 'N' AND NVL (v_include_vat, 'Y') = 'N'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    -- mtran_vat_paid = NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_dr_mtran_no;

    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    -- mtran_vat_paid = NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_cr_mtran_no;
    -- ELSIF NVL (v_include_comm, 'Y') = 'N' AND NVL (v_include_vat, 'Y') = 'Y'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_dr_mtran_no;

    -- UPDATE gin_master_transactions
    -- SET mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_cr_mtran_no;
    -- END IF;

    -- IF NVL (v_comm_type, 'COM') = 'ADM'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_comm,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0)
    -- + v_whtx
    -- WHERE mtran_no = v_dr_mtran_no;

    -- UPDATE gin_master_transactions
    -- SET mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_comm,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0)
    -- + v_whtx
    -- WHERE mtran_no = v_cr_mtran_no;
    -- END IF;
    -- END IF;

    -- raise_error ('ERROR....');
    -- RETURN (v_net_comm); -- (v_gross_comm);
    --END;

    --FUNCTION update_commission (-----commented out on 1st feb 2019---error saving receipt---error getting user details
    -- v_cr_mtran_no IN NUMBER,
    -- v_cr_ref_no IN VARCHAR2,
    -- v_dr_mtran_no IN NUMBER,
    -- v_dr_ref_no IN VARCHAR2,
    -- v_due_comm_amt IN NUMBER,
    -- v_due_vat_amt IN NUMBER,
    -- v_amt_available IN NUMBER,
    -- v_brn_code IN NUMBER,
    -- v_agnt_code IN NUMBER,
    -- v_cur_code IN NUMBER,
    -- v_include_comm IN VARCHAR2 DEFAULT 'Y',
    -- v_include_vat IN VARCHAR2 DEFAULT 'Y',
    -- v_comm_type IN VARCHAR2 DEFAULT 'COM'
    --)
    -- RETURN NUMBER
    --IS
    -- v_mtran_no NUMBER;
    -- v_user VARCHAR2 (25);
    -- v_cop_code NUMBER;
    -- v_act_wthtx NUMBER := 0;
    -- v_gross_comm NUMBER;
    -- v_net_comm NUMBER;
    -- v_whtx NUMBER;
    -- v_pol_pro_code NUMBER;
    -- v_rnd NUMBER;
    -- v_over_rnd NUMBER;
    -- v_client_type VARCHAR2 (3);
    -- v_act_type VARCHAR2 (3);
    -- v_pmod_sht_desc tqc_payment_modes.pmod_sht_desc%TYPE;
    -- v_pmod_code NUMBER;
    -- v_instal_comm NUMBER;
    -- v_instal_net NUMBER;
    -- v_instal_wht NUMBER;
    -- v_comm_diff NUMBER;
    -- v_commission NUMBER;
    -- v_comm_payable NUMBER;
    -- v_comm_paid NUMBER;
    -- v_comm_pyts NUMBER;
    -- v_mkt_agn_code tqc_agencies.agn_code%TYPE;
    -- v_pol_batch_no gin_policies.pol_batch_no%TYPE;
    -- v_pol_wthtx_appl VARCHAR2 (1);
    -- v_comm_amt NUMBER;
    -- v_vat_amt NUMBER;
    -- v_agn_whtax_applicable VARCHAR2 (1) := 'N';
    -- v_aggregate_claws_gross NUMBER;
    -- v_aggregate_claws_whtax NUMBER;
    -- v_aggregate_claws_net NUMBER;
    -- v_user_name VARCHAR2(50):= pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
    --
    -- CURSOR dr_installments
    -- IS
    -- SELECT *
    -- FROM gin_pol_trans_installs
    -- WHERE ptins_mtran_no = v_dr_mtran_no
    -- ORDER BY ptins_install_no;
    --BEGIN
    -- BEGIN
    -- SELECT mtran_client_type, mtran_pol_batch_no, mtran_pmod_code,
    -- mtran_pro_code, mtran_commission, mtran_comm_payable,
    -- mtran_comm_paid
    -- INTO v_client_type, v_pol_batch_no, v_pmod_code,
    -- v_pol_pro_code, v_commission, v_comm_payable,
    -- v_comm_paid
    -- FROM gin_master_transactions
    -- WHERE mtran_no = v_dr_mtran_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error determining account type...');
    -- END;
    --
    -- IF v_pol_pro_code IS NULL AND v_pol_batch_no IS NOT NULL
    -- THEN
    -- SELECT pol_pro_code
    -- INTO v_pol_pro_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- END IF;
    --
    -- --RAISE_ERROR('MERCY IS HERE');
    -- --IF
    -- -- raise_error('nnnnnnn V_agnt_code '||V_agnt_code);
    -- -- SELECT ACT_WTHTX_RATE,ACT_TYPE_SHT_DESC
    -- -- INTO v_act_wthtx,v_act_type
    -- -- FROM tqc_account_types
    -- -- WHERE ACT_CODE = V_agnt_code;
    -- v_pol_wthtx_appl :=
    -- gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');
    --
    -- --raise_error('v_client_type'||v_client_type);
    --
    -- IF NVL (v_include_comm, 'Y') = 'Y'
    -- THEN
    --
    -- begin
    -- select sum(nvl(abs(coc_comm_amt),0)),sum(nvl(abs(coc_whdtax_amt),0)),sum(nvl(abs(coc_comm_amt),0)-nvl(abs(coc_whdtax_amt),0))
    -- into v_aggregate_claws_gross,v_aggregate_claws_whtax,v_aggregate_claws_net
    -- from gin_commission_clawbacks
    -- where coc_dr_mtran_no=v_dr_mtran_no
    -- and NVL(coc_utilized,'N')='N'
    -- and NVL(coc_paid,'N')='N'
    -- and NVL(coc_authorized,'N')='N';
    -- exception when others then
    -- v_aggregate_claws_gross:=0;
    -- v_aggregate_claws_whtax:=0;
    -- v_aggregate_claws_net:=0;
    --
    -- end;
    --
    -- ELSE
    -- v_aggregate_claws_gross:=0;
    -- v_aggregate_claws_whtax:=0;
    -- v_aggregate_claws_net:=0;
    -- END IF;
    --
    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    -- IF v_pol_wthtx_appl = 'Y'
    -- THEN
    -- BEGIN
    -- SELECT DECODE (v_comm_type,
    -- 'COM', act_wthtx_rate,
    -- 'ADM', act_lta_whtx_rate
    -- ),
    -- act_type_sht_desc
    -- INTO v_act_wthtx,
    -- v_act_type
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting withholding tax rate...');
    -- END;
    -- ELSE
    -- BEGIN
    -- SELECT act_type_sht_desc
    -- INTO v_act_type
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    --
    -- v_act_wthtx := 0;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting withholding tax rate...');
    -- END;
    -- END IF;
    -- ELSE
    -- BEGIN
    -- SELECT pol_mktr_agn_code
    -- INTO v_mkt_agn_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting marketer attached...');
    -- END;
    --
    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    -- BEGIN
    -- SELECT DECODE (v_comm_type,
    -- 'COM', act_wthtx_rate,
    -- 'ADM', act_lta_whtx_rate
    -- ),
    -- act_type_sht_desc
    -- INTO v_act_wthtx,
    -- v_act_type
    -- FROM tqc_account_types, tqc_agencies
    -- WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ( 'Error getting withholding tax rate...'
    -- || v_act_wthtx
    -- || 'v_act_type'
    -- || v_act_type
    -- );
    -- END;
    -- END IF;
    -- END IF;
    --
    -- BEGIN
    -- SELECT param_value
    -- INTO v_rnd
    -- FROM gin_parameters
    -- WHERE param_name = 'OVERRIDE_COMM_RNDOFF' AND param_status = 'ACTIVE';
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- BEGIN
    -- SELECT cur_rnd
    -- INTO v_rnd
    -- FROM tqc_currencies
    -- WHERE cur_code = v_cur_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_when_others ('Error selecting rounding factor');
    -- END;
    -- WHEN OTHERS
    -- THEN
    -- raise_error
    -- ('Error fetching override commission rounding parameter...');
    -- END;
    --
    -- --v_gross_comm := v_comm_amt;
    -- --v_whtx := v_act_wthtx/(100+v_act_wthtx) * v_comm_amt ;
    -- --v_net_comm := v_gross_comm - v_whtx;
    -- --v_act_wthtx := 5;
    -- IF NVL (v_client_type, 'X') <> 'D'
    -- THEN
    -- IF NVL (v_due_vat_amt, 0) != 0
    -- THEN
    -- IF NVL (v_act_wthtx, 0) != 0
    -- THEN
    -- v_gross_comm :=
    -- ROUND ( 100
    -- / (100 - NVL (v_act_wthtx, 0))
    -- * NVL (v_amt_available, 0),
    -- v_rnd
    -- );
    -- ELSE
    -- v_gross_comm := v_amt_available;
    -- END IF;
    --
    -- v_net_comm := v_amt_available;
    -- v_whtx :=
    -- ROUND (NVL (v_gross_comm, 0), v_rnd)
    -- - ROUND (NVL (v_net_comm, 0), v_rnd);
    --
    -- IF v_gross_comm > v_due_comm_amt
    -- THEN
    -- v_gross_comm := v_due_comm_amt;
    -- v_whtx :=
    -- ROUND (NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
    -- v_net_comm := NVL (v_gross_comm, 0) - NVL (v_whtx, 0);
    -- END IF;
    -- ELSE
    -- IF NVL (v_act_wthtx, 0) != 0
    -- THEN
    -- v_whtx :=
    -- ROUND (NVL (v_act_wthtx, 0) / (100)
    -- * NVL (v_due_comm_amt, 0));
    -- END IF;
    --
    -- IF NVL (v_due_comm_amt, 0) != 0
    -- THEN ---Masinde Intermediary where commssion is not allowed
    -- --raise_Error(' v_due_comm_amt '||v_due_comm_amt);
    -- v_gross_comm :=
    -- ROUND ( NVL (v_due_comm_amt, 0)
    -- / ( NVL (v_due_vat_amt, 0)
    -- + NVL (v_due_comm_amt, 0)
    -- - NVL (v_whtx, 0)
    -- )
    -- * v_amt_available,
    -- v_rnd
    -- );
    -- --Raise_error('v_gross_comm'||v_gross_comm||'v_amt_available'||v_amt_available);
    -- v_vat_amt :=
    -- ROUND ( NVL (v_due_vat_amt, 0)
    -- / ( NVL (v_due_vat_amt, 0)
    -- + NVL (v_due_comm_amt, 0)
    -- - NVL (v_whtx, 0)
    -- )
    -- * NVL (v_amt_available, 0),
    -- v_rnd
    -- );
    -- v_whtx :=
    -- ROUND ( NVL (v_whtx, 0)
    -- / ( NVL (v_due_vat_amt, 0)
    -- + NVL (v_due_comm_amt, 0)
    -- - NVL (v_whtx, 0)
    -- )
    -- * NVL (v_amt_available, 0),
    -- v_rnd
    -- );
    -- DBMS_OUTPUT.put_line ( 'v_comm_amt='
    -- || v_comm_amt
    -- || 'v_amt_available='
    -- || v_amt_available
    -- || 'v_due_vat_amt='
    -- || v_due_vat_amt
    -- || 'v_due_comm_amt='
    -- || v_due_comm_amt
    -- || 'v_vat_amt='
    -- || v_vat_amt
    -- || 'v_whtx='
    -- || v_whtx
    -- );
    -- v_net_comm :=
    -- ROUND ( NVL (v_gross_comm, 0)
    -- - NVL (v_whtx, 0)
    -- + NVL (v_vat_amt, 0),
    -- v_rnd
    -- );
    -- DBMS_OUTPUT.put_line ( 'v_due_comm_amt='
    -- || v_due_comm_amt
    -- || 'v_gross_comm='
    -- || v_gross_comm
    -- );
    --
    -- IF v_gross_comm > v_due_comm_amt
    -- THEN
    -- v_gross_comm := v_due_comm_amt;
    -- v_whtx :=
    -- ROUND (NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
    -- v_vat_amt := v_due_vat_amt;
    -- v_net_comm :=
    -- NVL (v_gross_comm, 0) - NVL (v_whtx, 0)
    -- + NVL (v_vat_amt, 0);
    --
    -- IF v_net_comm > v_amt_available
    -- THEN
    -- raise_error ('RRR');
    -- END IF;
    -- END IF;
    -- END IF;
    -- END IF;
    --
    -- -- raise_Error('v_gross_comm='||v_gross_comm);
    -- IF v_pol_batch_no IS NULL
    -- THEN
    -- BEGIN
    -- SELECT pol_pmod_code
    -- INTO v_pmod_code
    -- FROM gin_policies
    -- WHERE pol_batch_no = v_pol_batch_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- NULL;
    -- END;
    -- END IF;
    --
    -- IF v_pmod_code IS NOT NULL
    -- THEN
    -- BEGIN
    -- SELECT pmod_sht_desc
    -- INTO v_pmod_sht_desc
    -- FROM tqc_payment_modes
    -- WHERE pmod_code = v_pmod_code;
    -- EXCEPTION
    -- WHEN NO_DATA_FOUND
    -- THEN
    -- v_pmod_sht_desc := NULL;
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('Error getting payment method..');
    -- END;
    -- ELSE
    -- v_pmod_sht_desc := NULL;
    -- END IF;
    --
    -- -- IF V_pmod_code IS NOT NULL THEN RAISE_ERROR('NVL(v_pmod_sht_desc ??? === '|| v_pmod_sht_desc);
    -- IF NVL (v_gross_comm, 0) != 0
    -- THEN
    -- IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
    -- THEN
    -- SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
    -- || gin_cop_code_seq.NEXTVAL
    -- )
    -- INTO v_cop_code
    -- FROM DUAL;
    --
    -- ---include clawbacks
    -- v_gross_comm:= sign(v_gross_comm)*abs(nvl(v_gross_comm,0))-abs(nvl(v_aggregate_claws_gross,0));
    -- v_net_comm:= sign(v_net_comm)* abs(nvl(v_net_comm,0))-abs(nvl(v_aggregate_claws_net,0));
    -- v_whtx:= sign(v_whtx)*abs(nvl(v_whtx,0))-abs(nvl(v_aggregate_claws_whtax,0));
    --
    ---- raise_Error('v_gross_comm='||v_gross_comm||'v_net_comm='||v_net_comm||'v_whtx'||v_whtx);
    --
    -- INSERT INTO gin_commission_pymts
    -- (cop_code,
    -- cop_agn_code,
    -- cop_date, cop_dr_ref_no, cop_cr_ref_no,
    -- cop_comm_amt, cop_whdtax_amt, cop_ovride_comm_amt,
    -- cop_ovride_whdtax_amt, cop_agn_unit_mgr, cop_paid,
    -- cop_paid_chq_date, cop_paid_chq_no,
    -- cop_paid_vchr_no, cop_trans_no, cop_brn_code,
    -- cop_bru_code, cop_prepared_by, cop_cr_mtran_no,
    -- cop_dr_mtran_no, cop_whtx_rate, cop_net_comm,
    -- cop_cur_code, cop_scl_code, cop_act_type, cop_type
    -- )
    -- VALUES (v_cop_code,
    -- DECODE (v_client_type,
    -- 'D', v_mkt_agn_code,
    -- v_agnt_code
    -- ),
    -- TRUNC (SYSDATE), v_dr_ref_no, v_cr_ref_no,
    -- v_gross_comm, -v_whtx, NULL,
    -- NULL, NULL, 'N',
    -- NULL, NULL,
    -- NULL, NULL, v_brn_code,
    -- NULL, v_user, v_cr_mtran_no,
    -- v_dr_mtran_no, v_act_wthtx, v_net_comm,
    -- v_cur_code, v_pol_pro_code, v_act_type, v_comm_type
    -- );
    -- ---utilize UW credit clawbacks
    -- GIN_ACCOUNTS_PKG.update_commission_clawbacks(v_cr_mtran_no,v_dr_mtran_no,v_cop_code);
    -- ELSE
    -- v_comm_diff := v_gross_comm;
    --
    -- -- RAISE_ERROR('v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- FOR install_recs IN dr_installments
    -- LOOP
    -- IF ( ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0))
    -- ) <= 0
    -- THEN
    -- v_instal_comm := 0;
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- -- RAISE_ERROR('1v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- ELSIF v_comm_diff >=
    -- ( ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0))
    -- )
    -- THEN
    -- v_instal_comm :=
    -- ( ABS (NVL (install_recs.ptins_comm_amt, 0))
    -- - ABS (NVL (install_recs.ptins_comm_paid, 0))
    -- );
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- -- RAISE_ERROR('2v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- ELSE
    -- v_instal_comm := v_comm_diff;
    -- v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    -- -- RAISE_ERROR('3v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- END IF;
    --
    -- -- RAISE_ERROR('4v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    -- IF NVL (v_instal_comm, 0) > 0
    -- THEN
    -- v_instal_net :=
    -- ROUND (v_instal_comm / v_gross_comm * v_net_comm);
    -- v_instal_wht :=
    -- ROUND (v_instal_comm / v_gross_comm * v_whtx);
    --
    -- SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
    -- || gin_cop_code_seq.NEXTVAL
    -- )
    -- INTO v_cop_code
    -- FROM DUAL;
    --
    -- v_gross_comm:= sign(v_gross_comm)*abs(nvl(v_gross_comm,0))-abs(nvl(v_aggregate_claws_gross,0));
    -- v_net_comm:= sign(v_net_comm)* abs(nvl(v_net_comm,0))-abs(nvl(v_aggregate_claws_net,0));
    -- v_whtx:= sign(v_whtx)*abs(nvl(v_whtx,0))-abs(nvl(v_aggregate_claws_whtax,0));
    --
    -- --DBMS_OUTPUT.PUT_LINE('5v_instal_net='||v_instal_net||' v_instal_comm='||v_instal_comm||' v_instal_wht='||v_instal_wht);
    -- INSERT INTO gin_commission_pymts
    -- (cop_code, cop_agn_code, cop_date,
    -- cop_dr_ref_no, cop_cr_ref_no, cop_comm_amt,
    -- cop_whdtax_amt, cop_ovride_comm_amt,
    -- cop_ovride_whdtax_amt, cop_agn_unit_mgr,
    -- cop_paid, cop_paid_chq_date, cop_paid_chq_no,
    -- cop_paid_vchr_no, cop_trans_no, cop_brn_code,
    -- cop_bru_code, cop_prepared_by,
    -- cop_cr_mtran_no, cop_dr_mtran_no,
    -- cop_whtx_rate, cop_net_comm, cop_cur_code,
    -- cop_scl_code, cop_act_type,
    -- cop_ptins_code, cop_type
    -- )
    -- VALUES (v_cop_code, v_agnt_code, TRUNC (SYSDATE),
    -- v_dr_ref_no, v_cr_ref_no, v_instal_comm,
    -- -v_instal_wht, NULL,
    -- NULL, NULL,
    -- 'N', NULL, NULL,
    -- NULL, NULL, v_brn_code,
    -- NULL, v_user,
    -- v_cr_mtran_no, v_dr_mtran_no,
    -- v_act_wthtx, v_instal_net, v_cur_code,
    -- v_pol_pro_code, v_act_type,
    -- install_recs.ptins_code, v_comm_type
    -- );
    --
    -- UPDATE gin_pol_trans_installs
    -- SET ptins_comm_paid =
    -- NVL (ptins_comm_paid, 0)
    -- + NVL (v_instal_comm, 0),
    -- ptins_cr_mtran_no = v_cr_mtran_no
    -- WHERE ptins_code = install_recs.ptins_code;
    -- ---utilize UW credit clawbacks
    -- GIN_ACCOUNTS_PKG.update_commission_clawbacks(v_cr_mtran_no,v_dr_mtran_no,v_cop_code);
    -- END IF;
    --
    -- EXIT WHEN v_comm_diff < 0;
    -- END LOOP;
    --
    -- IF NVL (v_comm_diff, 0) > 1
    -- THEN
    -- raise_error
    -- ( 'Error on commission installments computation. Amount not fully allocated.='
    -- || v_comm_diff
    -- );
    -- END IF;
    -- END IF;
    -- END IF;
    --
    -- IF NVL (v_include_comm, 'Y') = 'Y' AND NVL (v_comm_type, 'COM') = 'COM'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- --v_gross_comm, -- SHOULD WE UPDATE THE NET COMMISSION OR GROSS COMMISSION. FIND OUT
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- --v_gross_comm, -- SHOULD WE UPDATE GROSS COMMISSION. FIND OUT
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_cr_mtran_no;
    --
    --
    -- ----UTILIZE COMMISSION CLAWBACKS
    -- IF NVL(v_aggregate_claws_gross,0)!=0 THEN
    -- IF v_user_name IS NULL THEN
    -- raise_error('Error getting user details....Reconnect Session');
    -- END IF;
    --
    -- GIN_UW_CREDITS_PKG.utilizeCommclawback(v_dr_mtran_no,v_cr_mtran_no,v_user_name);
    --
    -- END IF;
    -- ELSIF NVL (v_include_comm, 'Y') = 'N' AND NVL (v_include_vat, 'Y') = 'N'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    -- mtran_vat_paid = NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    -- mtran_vat_paid = NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_cr_mtran_no;
    -- ELSIF NVL (v_include_comm, 'Y') = 'N' AND NVL (v_include_vat, 'Y') = 'Y'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_payable = NVL (mtran_comm_payable, 0)
    -- + v_gross_comm,
    -- mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    -- mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    -- mtran_vat_payable =
    -- NVL (mtran_vat_payable, 0)
    -- + NVL (v_vat_amt, 0)
    -- WHERE mtran_no = v_cr_mtran_no;
    -- END IF;
    --
    -- IF NVL (v_comm_type, 'COM') = 'ADM'
    -- THEN
    -- UPDATE gin_master_transactions
    -- SET mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_comm,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0)
    -- + v_whtx
    -- WHERE mtran_no = v_dr_mtran_no;
    --
    -- UPDATE gin_master_transactions
    -- SET mtran_lta_payable = NVL (mtran_lta_payable, 0) + v_gross_comm,
    -- mtran_lta_whtx_payable =
    -- NVL (mtran_lta_whtx_payable, 0)
    -- + v_whtx
    -- WHERE mtran_no = v_cr_mtran_no;
    -- END IF;
    -- END IF;
    --
    -- RETURN (v_net_comm); -- (v_gross_comm);
    --END;
    --   FUNCTION update_commission (v_cr_mtran_no     IN NUMBER,----commented out on 24th April 2019---net commissions differences/rounding off and withholding tax doubling
    --                               v_cr_ref_no       IN VARCHAR2,
    --                               v_dr_mtran_no     IN NUMBER,
    --                               v_dr_ref_no       IN VARCHAR2,
    --                               v_due_comm_amt    IN NUMBER,
    --                               v_due_vat_amt     IN NUMBER,
    --                               v_amt_available   IN NUMBER,
    --                               v_brn_code        IN NUMBER,
    --                               v_agnt_code       IN NUMBER,
    --                               v_cur_code        IN NUMBER,
    --                               v_include_comm    IN VARCHAR2 DEFAULT 'Y',
    --                               v_include_vat     IN VARCHAR2 DEFAULT 'Y',
    --                               v_comm_type       IN VARCHAR2 DEFAULT 'COM',
    --                               v_usr             IN VARCHAR2 DEFAULT NULL)
    --      RETURN NUMBER
    --   IS
    --      v_mtran_no                NUMBER;
    --      v_user                    VARCHAR2 (25);
    --      v_cop_code                NUMBER;
    --      v_act_wthtx               NUMBER := 0;
    --      v_gross_comm              NUMBER;
    --      v_net_comm                NUMBER;
    --      v_whtx                    NUMBER;
    --      v_pol_pro_code            NUMBER;
    --      v_rnd                     NUMBER;
    --      v_over_rnd                NUMBER;
    --      v_client_type             VARCHAR2 (3);
    --      v_act_type                VARCHAR2 (3);
    --      v_pmod_sht_desc           tqc_payment_modes.pmod_sht_desc%TYPE;
    --      v_pmod_code               NUMBER;
    --      v_instal_comm             NUMBER;
    --      v_instal_net              NUMBER;
    --      v_instal_wht              NUMBER;
    --      v_comm_diff               NUMBER;
    --      v_commission              NUMBER;
    --      v_comm_payable            NUMBER;
    --      v_comm_paid               NUMBER;
    --      v_comm_pyts               NUMBER;
    --      v_mkt_agn_code            tqc_agencies.agn_code%TYPE;
    --      v_pol_batch_no            gin_policies.pol_batch_no%TYPE;
    --      v_pol_wthtx_appl          VARCHAR2 (1);
    --      v_comm_amt                NUMBER;
    --      v_vat_amt                 NUMBER;
    --      v_agn_whtax_applicable    VARCHAR2 (1) := 'N';
    --      v_aggregate_claws_gross   NUMBER;
    --      v_aggregate_claws_whtax   NUMBER;
    --      v_aggregate_claws_net     NUMBER;
    --      v_user_name               VARCHAR2 (50)
    --         := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
    --
    --      CURSOR dr_installments
    --      IS
    --           SELECT *
    --             FROM gin_pol_trans_installs
    --            WHERE ptins_mtran_no = v_dr_mtran_no
    --         ORDER BY ptins_install_no;
    --   BEGIN
    --      v_user_name := NVL (v_usr, v_user_name);
    --
    --      --raise_error('v_user_name======='||v_user_name||v_user_name||v_user_name||v_user_name||v_user_name);
    --      BEGIN
    --         SELECT mtran_client_type,
    --                mtran_pol_batch_no,
    --                mtran_pmod_code,
    --                mtran_pro_code,
    --                mtran_commission,
    --                mtran_comm_payable,
    --                mtran_comm_paid
    --           INTO v_client_type,
    --                v_pol_batch_no,
    --                v_pmod_code,
    --                v_pol_pro_code,
    --                v_commission,
    --                v_comm_payable,
    --                v_comm_paid
    --           FROM gin_master_transactions
    --          WHERE mtran_no = v_dr_mtran_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error determining account type...');
    --      END;
    --
    --      IF v_pol_pro_code IS NULL AND v_pol_batch_no IS NOT NULL
    --      THEN
    --         SELECT pol_pro_code
    --           INTO v_pol_pro_code
    --           FROM gin_policies
    --          WHERE pol_batch_no = v_pol_batch_no;
    --      END IF;
    --
    --      --RAISE_ERROR('MERCY IS HERE');
    --      --IF
    --      -- raise_error('nnnnnnn V_agnt_code '||V_agnt_code);
    --      -- SELECT ACT_WTHTX_RATE,ACT_TYPE_SHT_DESC
    --      -- INTO v_act_wthtx,v_act_type
    --      -- FROM tqc_account_types
    --      -- WHERE ACT_CODE = V_agnt_code;
    --      v_pol_wthtx_appl :=
    --         gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');
    --
    --      --raise_error('v_client_type'||v_client_type);
    --      IF NVL (v_include_comm, 'Y') = 'Y'
    --      THEN
    --         BEGIN
    --            SELECT SUM (NVL (ABS (coc_comm_amt), 0)),
    --                   SUM (NVL (ABS (coc_whdtax_amt), 0)),
    --                   SUM (
    --                        NVL (ABS (coc_comm_amt), 0)
    --                      - NVL (ABS (coc_whdtax_amt), 0))
    --              INTO v_aggregate_claws_gross,
    --                   v_aggregate_claws_whtax,
    --                   v_aggregate_claws_net
    --              FROM gin_commission_clawbacks
    --             WHERE     coc_dr_mtran_no = v_dr_mtran_no
    --                   AND NVL (coc_utilized, 'N') = 'N'
    --                   AND NVL (coc_paid, 'N') = 'N'
    --                   AND NVL (coc_authorized, 'N') = 'N'
    --                   AND NVL (coc_withdrawn, 'N') != 'Y';
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               v_aggregate_claws_gross := 0;
    --               v_aggregate_claws_whtax := 0;
    --               v_aggregate_claws_net := 0;
    --         END;
    --      ELSE
    --         v_aggregate_claws_gross := 0;
    --         v_aggregate_claws_whtax := 0;
    --         v_aggregate_claws_net := 0;
    --      END IF;
    --
    --      IF NVL (v_client_type, 'X') <> 'D'
    --      THEN
    --         IF v_pol_wthtx_appl = 'Y'
    --         THEN
    --            BEGIN
    --               SELECT DECODE (v_comm_type,
    --                              'COM', act_wthtx_rate,
    --                              'ADM', act_lta_whtx_rate),
    --                      act_type_sht_desc
    --                 INTO v_act_wthtx, v_act_type
    --                 FROM tqc_account_types, tqc_agencies
    --                WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error getting withholding tax rate...');
    --            END;
    --         ELSE
    --            BEGIN
    --               SELECT act_type_sht_desc
    --                 INTO v_act_type
    --                 FROM tqc_account_types, tqc_agencies
    --                WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
    --
    --               v_act_wthtx := 0;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error getting withholding tax rate...');
    --            END;
    --         END IF;
    --      ELSE
    --         BEGIN
    --            SELECT pol_mktr_agn_code
    --              INTO v_mkt_agn_code
    --              FROM gin_policies
    --             WHERE pol_batch_no = v_pol_batch_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error getting marketer attached...');
    --         END;
    --
    --         IF NVL (v_client_type, 'X') <> 'D'
    --         THEN
    --            BEGIN
    --               SELECT DECODE (v_comm_type,
    --                              'COM', act_wthtx_rate,
    --                              'ADM', act_lta_whtx_rate),
    --                      act_type_sht_desc
    --                 INTO v_act_wthtx, v_act_type
    --                 FROM tqc_account_types, tqc_agencies
    --                WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (
    --                        'Error getting withholding tax rate...'
    --                     || v_act_wthtx
    --                     || 'v_act_type'
    --                     || v_act_type);
    --            END;
    --         END IF;
    --      END IF;
    --
    --      BEGIN
    --         SELECT param_value
    --           INTO v_rnd
    --           FROM gin_parameters
    --          WHERE     param_name = 'OVERRIDE_COMM_RNDOFF'
    --                AND param_status = 'ACTIVE';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            BEGIN
    --               SELECT cur_rnd
    --                 INTO v_rnd
    --                 FROM tqc_currencies
    --                WHERE cur_code = v_cur_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others ('Error selecting rounding factor');
    --            END;
    --         WHEN OTHERS
    --         THEN
    --            raise_error (
    --               'Error fetching override commission rounding parameter...');
    --      END;
    --
    --      --v_gross_comm := v_comm_amt;
    --      --v_whtx := v_act_wthtx/(100+v_act_wthtx) * v_comm_amt ;
    --      --v_net_comm := v_gross_comm - v_whtx;
    --      --v_act_wthtx := 5;
    --      IF NVL (v_client_type, 'X') <> 'D'
    --      THEN
    --         IF NVL (v_due_vat_amt, 0) != 0
    --         THEN
    --            IF NVL (v_act_wthtx, 0) != 0
    --            THEN
    --               v_gross_comm :=
    --                  ROUND (
    --                       100
    --                     / (100 - NVL (v_act_wthtx, 0))
    --                     * NVL (v_amt_available, 0),
    --                     v_rnd);
    --            ELSE
    --               v_gross_comm := v_amt_available;
    --            END IF;
    --
    --            v_net_comm := v_amt_available;
    --            v_whtx :=
    --                 ROUND (NVL (v_gross_comm, 0), v_rnd)
    --               - ROUND (NVL (v_net_comm, 0), v_rnd);
    --
    --            IF v_gross_comm > v_due_comm_amt
    --            THEN
    --               v_gross_comm := v_due_comm_amt;
    --               v_whtx :=
    --                  ROUND (NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
    --               v_net_comm := NVL (v_gross_comm, 0) - NVL (v_whtx, 0);
    --            END IF;
    --         ELSE
    --            IF NVL (v_act_wthtx, 0) != 0
    --            THEN
    --               v_whtx :=
    --                  ROUND (
    --                     NVL (v_act_wthtx, 0) / (100) * NVL (v_due_comm_amt, 0));
    --            END IF;
    --
    --            IF NVL (v_due_comm_amt, 0) != 0
    --            THEN        ---Masinde Intermediary where commssion is not allowed
    --               --raise_Error(' v_due_comm_amt '||v_due_comm_amt);
    --               v_gross_comm :=
    --                  ROUND (
    --                       NVL (v_due_comm_amt, 0)
    --                     / (  NVL (v_due_vat_amt, 0)
    --                        + NVL (v_due_comm_amt, 0)
    --                        - NVL (v_whtx, 0))
    --                     * v_amt_available,
    --                     v_rnd);
    --               --Raise_error('v_gross_comm'||v_gross_comm||'v_amt_available'||v_amt_available);
    --               v_vat_amt :=
    --                  ROUND (
    --                       NVL (v_due_vat_amt, 0)
    --                     / (  NVL (v_due_vat_amt, 0)
    --                        + NVL (v_due_comm_amt, 0)
    --                        - NVL (v_whtx, 0))
    --                     * NVL (v_amt_available, 0),
    --                     v_rnd);
    --               v_whtx :=
    --                  ROUND (
    --                       NVL (v_whtx, 0)
    --                     / (  NVL (v_due_vat_amt, 0)
    --                        + NVL (v_due_comm_amt, 0)
    --                        - NVL (v_whtx, 0))
    --                     * NVL (v_amt_available, 0),
    --                     v_rnd);
    --               DBMS_OUTPUT.put_line (
    --                     'v_comm_amt='
    --                  || v_comm_amt
    --                  || 'v_amt_available='
    --                  || v_amt_available
    --                  || 'v_due_vat_amt='
    --                  || v_due_vat_amt
    --                  || 'v_due_comm_amt='
    --                  || v_due_comm_amt
    --                  || 'v_vat_amt='
    --                  || v_vat_amt
    --                  || 'v_whtx='
    --                  || v_whtx);
    --               v_net_comm :=
    --                  ROUND (
    --                       NVL (v_gross_comm, 0)
    --                     - NVL (v_whtx, 0)
    --                     + NVL (v_vat_amt, 0),
    --                     v_rnd);
    --               DBMS_OUTPUT.put_line (
    --                     'v_due_comm_amt='
    --                  || v_due_comm_amt
    --                  || 'v_gross_comm='
    --                  || v_gross_comm);
    --
    --               IF v_gross_comm > v_due_comm_amt
    --               THEN
    --                  v_gross_comm := v_due_comm_amt;
    --                  v_whtx :=
    --                     ROUND (
    --                        NVL (v_act_wthtx, 0) / 100 * NVL (v_gross_comm, 0));
    --                  v_vat_amt := v_due_vat_amt;
    --                  v_net_comm :=
    --                       NVL (v_gross_comm, 0)
    --                     - NVL (v_whtx, 0)
    --                     + NVL (v_vat_amt, 0);
    --
    --                  IF v_net_comm > v_amt_available
    --                  THEN
    --                     raise_error ('RRR');
    --                  END IF;
    --               END IF;
    --            END IF;
    --         END IF;
    --
    --         -- raise_Error('v_gross_comm='||v_gross_comm);
    --         IF v_pol_batch_no IS NULL
    --         THEN
    --            BEGIN
    --               SELECT pol_pmod_code
    --                 INTO v_pmod_code
    --                 FROM gin_policies
    --                WHERE pol_batch_no = v_pol_batch_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  NULL;
    --            END;
    --         END IF;
    --
    --         IF v_pmod_code IS NOT NULL
    --         THEN
    --            BEGIN
    --               SELECT pmod_sht_desc
    --                 INTO v_pmod_sht_desc
    --                 FROM tqc_payment_modes
    --                WHERE pmod_code = v_pmod_code;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_pmod_sht_desc := NULL;
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error getting payment method..');
    --            END;
    --         ELSE
    --            v_pmod_sht_desc := NULL;
    --         END IF;
    --
    --         -- IF V_pmod_code IS NOT NULL THEN RAISE_ERROR('NVL(v_pmod_sht_desc ??? === '|| v_pmod_sht_desc);
    --         IF NVL (v_gross_comm, 0) != 0
    --         THEN
    --            IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
    --            THEN
    --               SELECT TO_NUMBER (
    --                            TO_CHAR (SYSDATE, 'YYYY')
    --                         || gin_cop_code_seq.NEXTVAL)
    --                 INTO v_cop_code
    --                 FROM DUAL;
    --
    --               ---include clawbacks
    --               v_gross_comm :=
    --                    SIGN (v_gross_comm) * ABS (NVL (v_gross_comm, 0))
    --                  - ABS (NVL (v_aggregate_claws_gross, 0));
    --               v_net_comm :=
    --                    SIGN (v_net_comm) * ABS (NVL (v_net_comm, 0))
    --                  - ABS (NVL (v_aggregate_claws_net, 0));
    --               v_whtx :=
    --                    SIGN (v_whtx) * ABS (NVL (v_whtx, 0))
    --                  - ABS (NVL (v_aggregate_claws_whtax, 0));
    --
    --               -- raise_Error('v_gross_comm='||v_gross_comm||'v_net_comm='||v_net_comm||'v_whtx'||v_whtx);
    --               INSERT INTO gin_commission_pymts (cop_code,
    --                                                 cop_agn_code,
    --                                                 cop_date,
    --                                                 cop_dr_ref_no,
    --                                                 cop_cr_ref_no,
    --                                                 cop_comm_amt,
    --                                                 cop_whdtax_amt,
    --                                                 cop_ovride_comm_amt,
    --                                                 cop_ovride_whdtax_amt,
    --                                                 cop_agn_unit_mgr,
    --                                                 cop_paid,
    --                                                 cop_paid_chq_date,
    --                                                 cop_paid_chq_no,
    --                                                 cop_paid_vchr_no,
    --                                                 cop_trans_no,
    --                                                 cop_brn_code,
    --                                                 cop_bru_code,
    --                                                 cop_prepared_by,
    --                                                 cop_cr_mtran_no,
    --                                                 cop_dr_mtran_no,
    --                                                 cop_whtx_rate,
    --                                                 cop_net_comm,
    --                                                 cop_cur_code,
    --                                                 cop_scl_code,
    --                                                 cop_act_type,
    --                                                 cop_type)
    --                       VALUES (
    --                                 v_cop_code,
    --                                 DECODE (v_client_type,
    --                                         'D', v_mkt_agn_code,
    --                                         v_agnt_code),
    --                                 TRUNC (SYSDATE),
    --                                 v_dr_ref_no,
    --                                 v_cr_ref_no,
    --                                 v_gross_comm,
    --                                 -v_whtx,
    --                                 NULL,
    --                                 NULL,
    --                                 NULL,
    --                                 'N',
    --                                 NULL,
    --                                 NULL,
    --                                 NULL,
    --                                 NULL,
    --                                 v_brn_code,
    --                                 NULL,
    --                                 v_user,
    --                                 v_cr_mtran_no,
    --                                 v_dr_mtran_no,
    --                                 v_act_wthtx,
    --                                 v_net_comm,
    --                                 v_cur_code,
    --                                 v_pol_pro_code,
    --                                 v_act_type,
    --                                 v_comm_type);
    --
    --               ---utilize UW credit clawbacks
    --               gin_accounts_pkg.update_commission_clawbacks (v_cr_mtran_no,
    --                                                             v_dr_mtran_no,
    --                                                             v_cop_code);
    --            ELSE
    --               v_comm_diff := v_gross_comm;
    --
    --               -- RAISE_ERROR('v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    --               FOR install_recs IN dr_installments
    --               LOOP
    --                  IF (  ABS (NVL (install_recs.ptins_comm_amt, 0))
    --                      - ABS (NVL (install_recs.ptins_comm_paid, 0))) <= 0
    --                  THEN
    --                     v_instal_comm := 0;
    --                     v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    --                  -- RAISE_ERROR('1v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    --                  ELSIF v_comm_diff >=
    --                           (  ABS (NVL (install_recs.ptins_comm_amt, 0))
    --                            - ABS (NVL (install_recs.ptins_comm_paid, 0)))
    --                  THEN
    --                     v_instal_comm :=
    --                        (  ABS (NVL (install_recs.ptins_comm_amt, 0))
    --                         - ABS (NVL (install_recs.ptins_comm_paid, 0)));
    --                     v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    --                  -- RAISE_ERROR('2v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    --                  ELSE
    --                     v_instal_comm := v_comm_diff;
    --                     v_comm_diff := v_comm_diff - NVL (v_instal_comm, 0);
    --                  -- RAISE_ERROR('3v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    --                  END IF;
    --
    --                  -- RAISE_ERROR('4v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
    --                  IF NVL (v_instal_comm, 0) > 0
    --                  THEN
    --                     v_instal_net :=
    --                        ROUND (v_instal_comm / v_gross_comm * v_net_comm);
    --                     v_instal_wht :=
    --                        ROUND (v_instal_comm / v_gross_comm * v_whtx);
    --
    --                     SELECT TO_NUMBER (
    --                                  TO_CHAR (SYSDATE, 'YYYY')
    --                               || gin_cop_code_seq.NEXTVAL)
    --                       INTO v_cop_code
    --                       FROM DUAL;
    --
    --                     v_gross_comm :=
    --                          SIGN (v_gross_comm) * ABS (NVL (v_gross_comm, 0))
    --                        - ABS (NVL (v_aggregate_claws_gross, 0));
    --                     v_net_comm :=
    --                          SIGN (v_net_comm) * ABS (NVL (v_net_comm, 0))
    --                        - ABS (NVL (v_aggregate_claws_net, 0));
    --                     v_whtx :=
    --                          SIGN (v_whtx) * ABS (NVL (v_whtx, 0))
    --                        - ABS (NVL (v_aggregate_claws_whtax, 0));
    --
    --                     --DBMS_OUTPUT.PUT_LINE('5v_instal_net='||v_instal_net||' v_instal_comm='||v_instal_comm||' v_instal_wht='||v_instal_wht);
    --                     INSERT INTO gin_commission_pymts (cop_code,
    --                                                       cop_agn_code,
    --                                                       cop_date,
    --                                                       cop_dr_ref_no,
    --                                                       cop_cr_ref_no,
    --                                                       cop_comm_amt,
    --                                                       cop_whdtax_amt,
    --                                                       cop_ovride_comm_amt,
    --                                                       cop_ovride_whdtax_amt,
    --                                                       cop_agn_unit_mgr,
    --                                                       cop_paid,
    --                                                       cop_paid_chq_date,
    --                                                       cop_paid_chq_no,
    --                                                       cop_paid_vchr_no,
    --                                                       cop_trans_no,
    --                                                       cop_brn_code,
    --                                                       cop_bru_code,
    --                                                       cop_prepared_by,
    --                                                       cop_cr_mtran_no,
    --                                                       cop_dr_mtran_no,
    --                                                       cop_whtx_rate,
    --                                                       cop_net_comm,
    --                                                       cop_cur_code,
    --                                                       cop_scl_code,
    --                                                       cop_act_type,
    --                                                       cop_ptins_code,
    --                                                       cop_type)
    --                          VALUES (v_cop_code,
    --                                  v_agnt_code,
    --                                  TRUNC (SYSDATE),
    --                                  v_dr_ref_no,
    --                                  v_cr_ref_no,
    --                                  v_instal_comm,
    --                                  -v_instal_wht,
    --                                  NULL,
    --                                  NULL,
    --                                  NULL,
    --                                  'N',
    --                                  NULL,
    --                                  NULL,
    --                                  NULL,
    --                                  NULL,
    --                                  v_brn_code,
    --                                  NULL,
    --                                  v_user,
    --                                  v_cr_mtran_no,
    --                                  v_dr_mtran_no,
    --                                  v_act_wthtx,
    --                                  v_instal_net,
    --                                  v_cur_code,
    --                                  v_pol_pro_code,
    --                                  v_act_type,
    --                                  install_recs.ptins_code,
    --                                  v_comm_type);
    --
    --                     UPDATE gin_pol_trans_installs
    --                        SET ptins_comm_paid =
    --                                 NVL (ptins_comm_paid, 0)
    --                               + NVL (v_instal_comm, 0),
    --                            ptins_cr_mtran_no = v_cr_mtran_no
    --                      WHERE ptins_code = install_recs.ptins_code;
    --
    --                     ---utilize UW credit clawbacks
    --                     gin_accounts_pkg.update_commission_clawbacks (
    --                        v_cr_mtran_no,
    --                        v_dr_mtran_no,
    --                        v_cop_code);
    --                  END IF;
    --
    --                  EXIT WHEN v_comm_diff < 0;
    --               END LOOP;
    --
    --               IF NVL (v_comm_diff, 0) > 1
    --               THEN
    --                  raise_error (
    --                        'Error on commission installments computation. Amount not fully allocated.='
    --                     || v_comm_diff);
    --               END IF;
    --            END IF;
    --         END IF;
    --
    --         IF     NVL (v_include_comm, 'Y') = 'Y'
    --            AND NVL (v_comm_type, 'COM') = 'COM'
    --         THEN
    --            UPDATE gin_master_transactions
    --               SET mtran_comm_payable =
    --                      NVL (mtran_comm_payable, 0) + v_gross_comm,
    --                   --v_gross_comm, -- SHOULD WE UPDATE THE NET COMMISSION OR GROSS COMMISSION. FIND OUT
    --                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                   mtran_vat_payable =
    --                      NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    --             WHERE mtran_no = v_dr_mtran_no;
    --
    --            UPDATE gin_master_transactions
    --               SET mtran_comm_payable =
    --                      NVL (mtran_comm_payable, 0) + v_gross_comm,
    --                   --v_gross_comm, -- SHOULD WE UPDATE GROSS COMMISSION. FIND OUT
    --                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                   mtran_vat_payable =
    --                      NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    --             WHERE mtran_no = v_cr_mtran_no;
    --
    --            ----UTILIZE COMMISSION CLAWBACKS
    --            IF NVL (v_aggregate_claws_gross, 0) != 0
    --            THEN
    --               IF v_user_name IS NULL
    --               THEN
    --                  raise_error (
    --                        'Error getting user details....Reconnect Session v_user_name 1'
    --                     || v_user_name);
    --               END IF;
    --
    --               gin_uw_credits_pkg.utilizecommclawback (v_dr_mtran_no,
    --                                                       v_cr_mtran_no,
    --                                                       v_user_name);
    --            END IF;
    --         ELSIF     NVL (v_include_comm, 'Y') = 'N'
    --               AND NVL (v_include_vat, 'Y') = 'N'
    --         THEN
    --            UPDATE gin_master_transactions
    --               SET mtran_comm_payable =
    --                      NVL (mtran_comm_payable, 0) + v_gross_comm,
    --                   mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    --                   mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    --                   mtran_vat_paid =
    --                      NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    --                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                   mtran_vat_payable =
    --                      NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    --             WHERE mtran_no = v_dr_mtran_no;
    --
    --            UPDATE gin_master_transactions
    --               SET mtran_comm_payable =
    --                      NVL (mtran_comm_payable, 0) + v_gross_comm,
    --                   mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    --                   mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
    --                   mtran_vat_paid =
    --                      NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
    --                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                   mtran_vat_payable =
    --                      NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    --             WHERE mtran_no = v_cr_mtran_no;
    --         ELSIF     NVL (v_include_comm, 'Y') = 'N'
    --               AND NVL (v_include_vat, 'Y') = 'Y'
    --         THEN
    --            UPDATE gin_master_transactions
    --               SET mtran_comm_payable =
    --                      NVL (mtran_comm_payable, 0) + v_gross_comm,
    --                   mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    --                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                   mtran_vat_payable =
    --                      NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    --             WHERE mtran_no = v_dr_mtran_no;
    --
    --            UPDATE gin_master_transactions
    --               SET mtran_comm_paid = NVL (mtran_comm_paid, 0) + v_gross_comm,
    --                   mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
    --                   mtran_vat_payable =
    --                      NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
    --             WHERE mtran_no = v_cr_mtran_no;
    --         END IF;
    --
    --         IF NVL (v_comm_type, 'COM') = 'ADM'
    --         THEN
    --            UPDATE gin_master_transactions
    --               SET mtran_lta_payable =
    --                      NVL (mtran_lta_payable, 0) + v_gross_comm,
    --                   mtran_lta_whtx_payable =
    --                      NVL (mtran_lta_whtx_payable, 0) + v_whtx
    --             WHERE mtran_no = v_dr_mtran_no;
    --
    --            UPDATE gin_master_transactions
    --               SET mtran_lta_payable =
    --                      NVL (mtran_lta_payable, 0) + v_gross_comm,
    --                   mtran_lta_whtx_payable =
    --                      NVL (mtran_lta_whtx_payable, 0) + v_whtx
    --             WHERE mtran_no = v_cr_mtran_no;
    --         END IF;
    --      END IF;
    --
    --      RETURN (v_net_comm);                                  -- (v_gross_comm);
    --   END;
    FUNCTION update_commission (v_cr_mtran_no     IN NUMBER,
                                v_cr_ref_no       IN VARCHAR2,
                                v_dr_mtran_no     IN NUMBER,
                                v_dr_ref_no       IN VARCHAR2,
                                v_due_comm_amt    IN NUMBER,
                                v_due_vat_amt     IN NUMBER,
                                v_amt_available   IN NUMBER,
                                v_brn_code        IN NUMBER,
                                v_agnt_code       IN NUMBER,
                                v_cur_code        IN NUMBER,
                                v_include_comm    IN VARCHAR2 DEFAULT 'Y',
                                v_include_vat     IN VARCHAR2 DEFAULT 'Y',
                                v_comm_type       IN VARCHAR2 DEFAULT 'COM',
                                v_usr             IN VARCHAR2 DEFAULT NULL)
        RETURN NUMBER
    IS
        v_mtran_no                NUMBER;
        v_user                    VARCHAR2 (25);
        v_cop_code                NUMBER;
        v_act_wthtx               NUMBER := 0;
        v_gross_comm              NUMBER;
        v_net_comm                NUMBER;
        v_whtx                    NUMBER;
        v_pol_pro_code            NUMBER;
        v_rnd                     NUMBER;
        v_over_rnd                NUMBER;
        v_client_type             VARCHAR2 (3);
        v_act_type                VARCHAR2 (3);
        v_pmod_sht_desc           tqc_payment_modes.pmod_sht_desc%TYPE;
        v_pmod_code               NUMBER;
        v_instal_comm             NUMBER;
        v_instal_net              NUMBER;
        v_instal_wht              NUMBER;
        v_comm_diff               NUMBER;
        v_commission              NUMBER;
        v_comm_payable            NUMBER;
        v_comm_paid               NUMBER;
        v_comm_pyts               NUMBER;
        v_mkt_agn_code            tqc_agencies.agn_code%TYPE;
        v_pol_batch_no            gin_policies.pol_batch_no%TYPE;
        v_pol_wthtx_appl          VARCHAR2 (1);
        v_comm_amt                NUMBER;
        v_vat_amt                 NUMBER;
        v_agn_whtax_applicable    VARCHAR2 (1) := 'N';
        v_aggregate_claws_gross   NUMBER;
        v_aggregate_claws_whtax   NUMBER;
        v_aggregate_claws_net     NUMBER;
        v_user_name               VARCHAR2 (50)
            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');

        CURSOR dr_installments IS
              SELECT *
                FROM gin_pol_trans_installs
               WHERE ptins_mtran_no = v_dr_mtran_no
            ORDER BY ptins_install_no;
    BEGIN
        v_user_name := NVL (v_usr, v_user_name);

        --raise_error('v_user_name======='||v_user_name||v_user_name||v_user_name||v_user_name||v_user_name);
        BEGIN
            SELECT mtran_client_type,
                   mtran_pol_batch_no,
                   mtran_pmod_code,
                   mtran_pro_code,
                   mtran_commission,
                   mtran_comm_payable,
                   mtran_comm_paid
              INTO v_client_type,
                   v_pol_batch_no,
                   v_pmod_code,
                   v_pol_pro_code,
                   v_commission,
                   v_comm_payable,
                   v_comm_paid
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error determining account type...');
        END;

        IF v_pol_pro_code IS NULL AND v_pol_batch_no IS NOT NULL
        THEN
            SELECT pol_pro_code
              INTO v_pol_pro_code
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;
        END IF;

        --RAISE_ERROR('MERCY IS HERE');
        --IF
        -- raise_error('nnnnnnn V_agnt_code '||V_agnt_code);
        -- SELECT ACT_WTHTX_RATE,ACT_TYPE_SHT_DESC
        -- INTO v_act_wthtx,v_act_type
        -- FROM tqc_account_types
        -- WHERE ACT_CODE = V_agnt_code;
        v_pol_wthtx_appl :=
            gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');

        --raise_error('v_client_type'||v_client_type);
        IF NVL (v_include_comm, 'Y') = 'Y'
        THEN
            BEGIN
                SELECT SUM (NVL (ABS (coc_comm_amt), 0)),
                       SUM (NVL (ABS (coc_whdtax_amt), 0)),
                       SUM (
                             NVL (ABS (coc_comm_amt), 0)
                           - NVL (ABS (coc_whdtax_amt), 0))
                  INTO v_aggregate_claws_gross,
                       v_aggregate_claws_whtax,
                       v_aggregate_claws_net
                  FROM gin_commission_clawbacks
                 WHERE     coc_dr_mtran_no = v_dr_mtran_no
                       AND NVL (coc_utilized, 'N') = 'N'
                       AND NVL (coc_paid, 'N') = 'N'
                       AND NVL (coc_authorized, 'N') = 'N'
                       AND NVL (coc_withdrawn, 'N') != 'Y';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_aggregate_claws_gross := 0;
                    v_aggregate_claws_whtax := 0;
                    v_aggregate_claws_net := 0;
            END;
        ELSE
            v_aggregate_claws_gross := 0;
            v_aggregate_claws_whtax := 0;
            v_aggregate_claws_net := 0;
        END IF;

        IF NVL (v_client_type, 'X') <> 'D'
        THEN
            IF v_pol_wthtx_appl = 'Y'
            THEN
                BEGIN
                    SELECT DECODE (v_comm_type,
                                   'COM', act_wthtx_rate,
                                   'ADM', act_lta_whtx_rate),
                           act_type_sht_desc
                      INTO v_act_wthtx, v_act_type
                      FROM tqc_account_types, tqc_agencies
                     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error getting withholding tax rate...');
                END;
            ELSE
                BEGIN
                    SELECT act_type_sht_desc
                      INTO v_act_type
                      FROM tqc_account_types, tqc_agencies
                     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;

                    v_act_wthtx := 0;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error getting withholding tax rate...');
                END;
            END IF;
        ELSE
            BEGIN
                SELECT pol_mktr_agn_code
                  INTO v_mkt_agn_code
                  FROM gin_policies
                 WHERE pol_batch_no = v_pol_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error getting marketer attached...');
            END;

            IF NVL (v_client_type, 'X') <> 'D'
            THEN
                BEGIN
                    SELECT DECODE (v_comm_type,
                                   'COM', act_wthtx_rate,
                                   'ADM', act_lta_whtx_rate),
                           act_type_sht_desc
                      INTO v_act_wthtx, v_act_type
                      FROM tqc_account_types, tqc_agencies
                     WHERE     act_code = agn_act_code
                           AND agn_code = v_mkt_agn_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error getting withholding tax rate...'
                            || v_act_wthtx
                            || 'v_act_type'
                            || v_act_type);
                END;
            END IF;
        END IF;

        BEGIN
            SELECT param_value
              INTO v_rnd
              FROM gin_parameters
             WHERE     param_name = 'OVERRIDE_COMM_RNDOFF'
                   AND param_status = 'ACTIVE';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                BEGIN
                    SELECT cur_rnd
                      INTO v_rnd
                      FROM tqc_currencies
                     WHERE cur_code = v_cur_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others ('Error selecting rounding factor');
                END;
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching override commission rounding parameter...');
        END;

        --v_gross_comm := v_comm_amt;
        --v_whtx := v_act_wthtx/(100+v_act_wthtx) * v_comm_amt ;
        --v_net_comm := v_gross_comm - v_whtx;
        --v_act_wthtx := 5;
        IF NVL (v_client_type, 'X') <> 'D'
        THEN
            IF NVL (v_due_vat_amt, 0) != 0
            THEN
                IF NVL (v_act_wthtx, 0) != 0
                THEN
                    v_gross_comm :=
                        ROUND (
                              100
                            / (100 - NVL (v_act_wthtx, 0))
                            * NVL (v_amt_available, 0),
                            v_rnd);
                ELSE
                    v_gross_comm := v_amt_available;
                END IF;

                v_net_comm := v_amt_available;
                v_whtx :=
                      ROUND (NVL (v_gross_comm, 0), v_rnd)
                    - ROUND (NVL (v_net_comm, 0), v_rnd);

                IF v_gross_comm > v_due_comm_amt
                THEN
                    v_gross_comm := v_due_comm_amt;
                    v_whtx :=
                        ROUND (
                              NVL (v_act_wthtx, 0)
                            / 100
                            * NVL (v_gross_comm, 0),
                            v_rnd);
                    v_net_comm := NVL (v_gross_comm, 0) - NVL (v_whtx, 0);
                END IF;
            ELSE
                IF NVL (v_act_wthtx, 0) != 0
                THEN
                    v_whtx :=
                        ROUND (
                              NVL (v_act_wthtx, 0)
                            / (100)
                            * NVL (v_due_comm_amt, 0),
                            v_rnd);
                END IF;

                IF NVL (v_due_comm_amt, 0) != 0
                THEN    ---Masinde Intermediary where commssion is not allowed
                    --raise_Error(' v_due_comm_amt '||v_due_comm_amt);
                    v_gross_comm :=
                        ROUND (
                              NVL (v_due_comm_amt, 0)
                            / (  NVL (v_due_vat_amt, 0)
                               + NVL (v_due_comm_amt, 0)
                               - NVL (v_whtx, 0))
                            * v_amt_available,
                            v_rnd);
                    --Raise_error('v_gross_comm'||v_gross_comm||'v_amt_available'||v_amt_available);
                    v_vat_amt :=
                        ROUND (
                              NVL (v_due_vat_amt, 0)
                            / (  NVL (v_due_vat_amt, 0)
                               + NVL (v_due_comm_amt, 0)
                               - NVL (v_whtx, 0))
                            * NVL (v_amt_available, 0),
                            v_rnd);
                    v_whtx :=
                        ROUND (
                              NVL (v_whtx, 0)
                            / (  NVL (v_due_vat_amt, 0)
                               + NVL (v_due_comm_amt, 0)
                               - NVL (v_whtx, 0))
                            * NVL (v_amt_available, 0),
                            v_rnd);
                    DBMS_OUTPUT.put_line (
                           'v_comm_amt='
                        || v_comm_amt
                        || 'v_amt_available='
                        || v_amt_available
                        || 'v_due_vat_amt='
                        || v_due_vat_amt
                        || 'v_due_comm_amt='
                        || v_due_comm_amt
                        || 'v_vat_amt='
                        || v_vat_amt
                        || 'v_whtx='
                        || v_whtx);
                    v_net_comm :=
                        ROUND (
                              NVL (v_gross_comm, 0)
                            - NVL (v_whtx, 0)
                            + NVL (v_vat_amt, 0),
                            v_rnd);
                    DBMS_OUTPUT.put_line (
                           'v_due_comm_amt='
                        || v_due_comm_amt
                        || 'v_gross_comm='
                        || v_gross_comm);

                    IF v_gross_comm > v_due_comm_amt
                    THEN
                        v_gross_comm := v_due_comm_amt;
                        v_whtx :=
                            ROUND (
                                  NVL (v_act_wthtx, 0)
                                / 100
                                * NVL (v_gross_comm, 0),
                                v_rnd);
                        v_vat_amt := v_due_vat_amt;
                        v_net_comm :=
                              NVL (v_gross_comm, 0)
                            - NVL (v_whtx, 0)
                            + NVL (v_vat_amt, 0);

                        IF v_net_comm > v_amt_available
                        THEN
                            raise_error ('RRR');
                        END IF;
                    END IF;
                END IF;
            END IF;

            -- raise_Error('v_gross_comm='||v_gross_comm);
            IF v_pol_batch_no IS NULL
            THEN
                BEGIN
                    SELECT pol_pmod_code
                      INTO v_pmod_code
                      FROM gin_policies
                     WHERE pol_batch_no = v_pol_batch_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;
            END IF;

            IF v_pmod_code IS NOT NULL
            THEN
                BEGIN
                    SELECT pmod_sht_desc
                      INTO v_pmod_sht_desc
                      FROM tqc_payment_modes
                     WHERE pmod_code = v_pmod_code;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_pmod_sht_desc := NULL;
                    WHEN OTHERS
                    THEN
                        raise_error ('Error getting payment method..');
                END;
            ELSE
                v_pmod_sht_desc := NULL;
            END IF;

            -- IF V_pmod_code IS NOT NULL THEN RAISE_ERROR('NVL(v_pmod_sht_desc ??? === '|| v_pmod_sht_desc);
            IF NVL (v_gross_comm, 0) != 0
            THEN
                IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
                THEN
                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_cop_code_seq.NEXTVAL)
                      INTO v_cop_code
                      FROM DUAL;

                    ---include clawbacks
                    ----include claw backs
                    v_gross_comm :=
                          SIGN (NVL (v_gross_comm, 0))
                        * (  ABS (NVL (v_gross_comm, 0))
                           - ABS (NVL (v_aggregate_claws_gross, 0)));
                    v_net_comm :=
                          SIGN (NVL (v_net_comm, 0))
                        * (  ABS (NVL (v_net_comm, 0))
                           - ABS (NVL (v_aggregate_claws_net, 0)));
                    v_whtx :=
                          SIGN (NVL (v_whtx, 0))
                        * (  ABS (NVL (v_whtx, 0))
                           - ABS (NVL (v_aggregate_claws_whtax, 0)));

                    -- raise_Error('v_gross_comm='||v_gross_comm||'v_net_comm='||v_net_comm||'v_whtx'||v_whtx||'v_aggregate_claws_gross='||v_aggregate_claws_gross);
                    INSERT INTO gin_commission_pymts (cop_code,
                                                      cop_agn_code,
                                                      cop_date,
                                                      cop_dr_ref_no,
                                                      cop_cr_ref_no,
                                                      cop_comm_amt,
                                                      cop_whdtax_amt,
                                                      cop_ovride_comm_amt,
                                                      cop_ovride_whdtax_amt,
                                                      cop_agn_unit_mgr,
                                                      cop_paid,
                                                      cop_paid_chq_date,
                                                      cop_paid_chq_no,
                                                      cop_paid_vchr_no,
                                                      cop_trans_no,
                                                      cop_brn_code,
                                                      cop_bru_code,
                                                      cop_prepared_by,
                                                      cop_cr_mtran_no,
                                                      cop_dr_mtran_no,
                                                      cop_whtx_rate,
                                                      cop_net_comm,
                                                      cop_cur_code,
                                                      cop_scl_code,
                                                      cop_act_type,
                                                      cop_type)
                             VALUES (
                                 v_cop_code,
                                 DECODE (v_client_type,
                                         'D', v_mkt_agn_code,
                                         v_agnt_code),
                                 TRUNC (SYSDATE),
                                 v_dr_ref_no,
                                 v_cr_ref_no,
                                 v_gross_comm,
                                 -v_whtx,
                                 NULL,
                                 NULL,
                                 NULL,
                                 'N',
                                 NULL,
                                 NULL,
                                 NULL,
                                 NULL,
                                 v_brn_code,
                                 NULL,
                                 v_user,
                                 v_cr_mtran_no,
                                 v_dr_mtran_no,
                                 v_act_wthtx,
                                 v_net_comm,
                                 v_cur_code,
                                 v_pol_pro_code,
                                 v_act_type,
                                 v_comm_type);

                    ---utilize UW credit clawbacks
                    gin_accounts_pkg.update_commission_clawbacks (
                        v_cr_mtran_no,
                        v_dr_mtran_no,
                        v_cop_code);
                ELSE
                    v_comm_diff := v_gross_comm;

                    -- RAISE_ERROR('v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
                    FOR install_recs IN dr_installments
                    LOOP
                        IF (  ABS (NVL (install_recs.ptins_comm_amt, 0))
                            - ABS (NVL (install_recs.ptins_comm_paid, 0))) <=
                           0
                        THEN
                            v_instal_comm := 0;
                            v_comm_diff :=
                                v_comm_diff - NVL (v_instal_comm, 0);
                        -- RAISE_ERROR('1v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
                        ELSIF v_comm_diff >=
                              (  ABS (NVL (install_recs.ptins_comm_amt, 0))
                               - ABS (NVL (install_recs.ptins_comm_paid, 0)))
                        THEN
                            v_instal_comm :=
                                (  ABS (NVL (install_recs.ptins_comm_amt, 0))
                                 - ABS (
                                       NVL (install_recs.ptins_comm_paid, 0)));
                            v_comm_diff :=
                                v_comm_diff - NVL (v_instal_comm, 0);
                        -- RAISE_ERROR('2v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
                        ELSE
                            v_instal_comm := v_comm_diff;
                            v_comm_diff :=
                                v_comm_diff - NVL (v_instal_comm, 0);
                        -- RAISE_ERROR('3v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
                        END IF;

                        -- RAISE_ERROR('4v_comm_diff='||v_comm_diff||' v_instal_comm='||v_instal_comm||' v_dr_mtran_no='||v_dr_mtran_no);
                        IF NVL (v_instal_comm, 0) > 0
                        THEN
                            v_instal_net :=
                                ROUND (
                                    v_instal_comm / v_gross_comm * v_net_comm);
                            v_instal_wht :=
                                ROUND (v_instal_comm / v_gross_comm * v_whtx);

                            SELECT TO_NUMBER (
                                          TO_CHAR (SYSDATE, 'YYYY')
                                       || gin_cop_code_seq.NEXTVAL)
                              INTO v_cop_code
                              FROM DUAL;

                            ----include claw backs
                            v_gross_comm :=
                                  SIGN (NVL (v_gross_comm, 0))
                                * (  ABS (NVL (v_gross_comm, 0))
                                   - ABS (NVL (v_aggregate_claws_gross, 0)));
                            v_net_comm :=
                                  SIGN (NVL (v_net_comm, 0))
                                * (  ABS (NVL (v_net_comm, 0))
                                   - ABS (NVL (v_aggregate_claws_net, 0)));
                            v_whtx :=
                                  SIGN (NVL (v_whtx, 0))
                                * (  ABS (NVL (v_whtx, 0))
                                   - ABS (NVL (v_aggregate_claws_whtax, 0)));

                            --DBMS_OUTPUT.PUT_LINE('5v_instal_net='||v_instal_net||' v_instal_comm='||v_instal_comm||' v_instal_wht='||v_instal_wht);
                            INSERT INTO gin_commission_pymts (
                                            cop_code,
                                            cop_agn_code,
                                            cop_date,
                                            cop_dr_ref_no,
                                            cop_cr_ref_no,
                                            cop_comm_amt,
                                            cop_whdtax_amt,
                                            cop_ovride_comm_amt,
                                            cop_ovride_whdtax_amt,
                                            cop_agn_unit_mgr,
                                            cop_paid,
                                            cop_paid_chq_date,
                                            cop_paid_chq_no,
                                            cop_paid_vchr_no,
                                            cop_trans_no,
                                            cop_brn_code,
                                            cop_bru_code,
                                            cop_prepared_by,
                                            cop_cr_mtran_no,
                                            cop_dr_mtran_no,
                                            cop_whtx_rate,
                                            cop_net_comm,
                                            cop_cur_code,
                                            cop_scl_code,
                                            cop_act_type,
                                            cop_ptins_code,
                                            cop_type)
                                 VALUES (v_cop_code,
                                         v_agnt_code,
                                         TRUNC (SYSDATE),
                                         v_dr_ref_no,
                                         v_cr_ref_no,
                                         v_instal_comm,
                                         -v_instal_wht,
                                         NULL,
                                         NULL,
                                         NULL,
                                         'N',
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         v_brn_code,
                                         NULL,
                                         v_user,
                                         v_cr_mtran_no,
                                         v_dr_mtran_no,
                                         v_act_wthtx,
                                         v_instal_net,
                                         v_cur_code,
                                         v_pol_pro_code,
                                         v_act_type,
                                         install_recs.ptins_code,
                                         v_comm_type);

                            UPDATE gin_pol_trans_installs
                               SET ptins_comm_paid =
                                         NVL (ptins_comm_paid, 0)
                                       + NVL (v_instal_comm, 0),
                                   ptins_cr_mtran_no = v_cr_mtran_no
                             WHERE ptins_code = install_recs.ptins_code;

                            ---utilize UW credit clawbacks
                            gin_accounts_pkg.update_commission_clawbacks (
                                v_cr_mtran_no,
                                v_dr_mtran_no,
                                v_cop_code);
                        END IF;

                        EXIT WHEN v_comm_diff < 0;
                    END LOOP;

                    IF NVL (v_comm_diff, 0) > 1
                    THEN
                        raise_error (
                               'Error on commission installments computation. Amount not fully allocated.='
                            || v_comm_diff);
                    END IF;
                END IF;
            END IF;

            IF     NVL (v_include_comm, 'Y') = 'Y'
               AND NVL (v_comm_type, 'COM') = 'COM'
            THEN
                UPDATE gin_master_transactions
                   SET mtran_comm_payable =
                           NVL (mtran_comm_payable, 0) + v_gross_comm,
                       --v_gross_comm, -- SHOULD WE UPDATE THE NET COMMISSION OR GROSS COMMISSION. FIND OUT
                       mtran_whtx_payable =
                           NVL (mtran_whtx_payable, 0) + v_whtx,
                       mtran_vat_payable =
                           NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
                 WHERE mtran_no = v_dr_mtran_no;

                UPDATE gin_master_transactions
                   SET mtran_comm_payable =
                           NVL (mtran_comm_payable, 0) + v_gross_comm,
                       --v_gross_comm, -- SHOULD WE UPDATE GROSS COMMISSION. FIND OUT
                       mtran_whtx_payable =
                           NVL (mtran_whtx_payable, 0) + v_whtx,
                       mtran_vat_payable =
                           NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
                 WHERE mtran_no = v_cr_mtran_no;

                ----UTILIZE COMMISSION CLAWBACKS
                IF NVL (v_aggregate_claws_gross, 0) != 0
                THEN
                    IF v_user_name IS NULL
                    THEN
                        raise_error (
                               'Error getting user details....Reconnect Session v_user_name 1'
                            || v_user_name);
                    END IF;

                    gin_uw_credits_pkg.utilizecommclawback (v_dr_mtran_no,
                                                            v_cr_mtran_no,
                                                            v_user_name);
                END IF;
            ELSIF     NVL (v_include_comm, 'Y') = 'N'
                  AND NVL (v_include_vat, 'Y') = 'N'
            THEN
                UPDATE gin_master_transactions
                   SET mtran_comm_payable =
                           NVL (mtran_comm_payable, 0) + v_gross_comm,
                       mtran_comm_paid =
                           NVL (mtran_comm_paid, 0) + v_gross_comm,
                       mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
                       mtran_vat_paid =
                           NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
                       mtran_whtx_payable =
                           NVL (mtran_whtx_payable, 0) + v_whtx,
                       mtran_vat_payable =
                           NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
                 WHERE mtran_no = v_dr_mtran_no;

                UPDATE gin_master_transactions
                   SET mtran_comm_payable =
                           NVL (mtran_comm_payable, 0) + v_gross_comm,
                       mtran_comm_paid =
                           NVL (mtran_comm_paid, 0) + v_gross_comm,
                       mtran_whtx_paid = NVL (mtran_whtx_paid, 0) + v_whtx,
                       mtran_vat_paid =
                           NVL (mtran_vat_paid, 0) + NVL (v_vat_amt, 0),
                       mtran_whtx_payable =
                           NVL (mtran_whtx_payable, 0) + v_whtx,
                       mtran_vat_payable =
                           NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
                 WHERE mtran_no = v_cr_mtran_no;
            ELSIF     NVL (v_include_comm, 'Y') = 'N'
                  AND NVL (v_include_vat, 'Y') = 'Y'
            THEN
                UPDATE gin_master_transactions
                   SET mtran_comm_payable =
                           NVL (mtran_comm_payable, 0) + v_gross_comm,
                       mtran_comm_paid =
                           NVL (mtran_comm_paid, 0) + v_gross_comm,
                       mtran_whtx_payable =
                           NVL (mtran_whtx_payable, 0) + v_whtx,
                       mtran_vat_payable =
                           NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
                 WHERE mtran_no = v_dr_mtran_no;

                UPDATE gin_master_transactions
                   SET mtran_comm_paid =
                           NVL (mtran_comm_paid, 0) + v_gross_comm,
                       mtran_whtx_payable =
                           NVL (mtran_whtx_payable, 0) + v_whtx,
                       mtran_vat_payable =
                           NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
                 WHERE mtran_no = v_cr_mtran_no;
            END IF;

            IF NVL (v_comm_type, 'COM') = 'ADM'
            THEN
                UPDATE gin_master_transactions
                   SET mtran_lta_payable =
                           NVL (mtran_lta_payable, 0) + v_gross_comm,
                       mtran_lta_whtx_payable =
                           NVL (mtran_lta_whtx_payable, 0) + v_whtx
                 WHERE mtran_no = v_dr_mtran_no;

                UPDATE gin_master_transactions
                   SET mtran_lta_payable =
                           NVL (mtran_lta_payable, 0) + v_gross_comm,
                       mtran_lta_whtx_payable =
                           NVL (mtran_lta_whtx_payable, 0) + v_whtx
                 WHERE mtran_no = v_cr_mtran_no;
            END IF;
        END IF;

        RETURN (v_net_comm);                                -- (v_gross_comm);
    END;

    PROCEDURE update_undo_creditnote_comm (v_cqr_ref      IN VARCHAR2,
                                           v_cqr_ref2     IN VARCHAR2,
                                           v_cqr_chq_no   IN VARCHAR2,
                                           v_cqr_chq_dt   IN DATE,
                                           v_user_name    IN VARCHAR2,
                                           v_cqr_amount   IN NUMBER)
    IS
        CURSOR cur_comm IS
            SELECT copdt_code,
                   copdt_agn_code,
                   copdt_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   agn_sht_desc,
                   act_type_id,
                   copdt_cur_code,
                   act_account_type,
                   copdt_comm_amt                        comm_amt,
                   copdt_whdtax_amt                      whtax,
                   copdt_ovride_comm_amt                 ovrde_comm,
                   copdt_ovride_whdtax_amt               ovrde_whtax,
                   copdt_comm_amt + copdt_whdtax_amt     net_comm
              FROM gin_comm_pymt_dtls, tqc_agencies, tqc_account_types
             WHERE     copdt_agn_code = agn_code
                   AND agn_act_code = act_code
                   AND copdt_authorized = 'Y'
                   AND copdt_code = v_cqr_ref
                   AND copdt_trans_no = v_cqr_ref2;

        CURSOR cur_comm_dtls (vcopdtcode IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   cop_cr_ref_no,
                   cop_dr_ref_no,
                   cop_net_comm,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   cop_comm_amt
              FROM gin_commission_pymts, tqc_agencies
             WHERE cop_agn_code = agn_code AND cop_copdt_code = vcopdtcode;

        v_mtran_no      NUMBER;
        v_cr_mtran_no   NUMBER;
        v_cr_ref_no     VARCHAR2 (35);
        v_cr_bal        NUMBER;
        v_cr_com        NUMBER;
        v_pol_no        VARCHAR2 (35);
    BEGIN
        FOR cur_comm_rec IN cur_comm
        LOOP
            BEGIN
                UPDATE gin_comm_pymt_dtls
                   SET copdt_paid = 'Y',
                       copdt_paid_chq_date = v_cqr_chq_dt,
                       copdt_paid_chq_no = v_cqr_chq_no
                 WHERE     copdt_code = cur_comm_rec.copdt_code
                       AND NVL (copdt_authorized, 'N') = 'Y'
                       AND NVL (copdt_paid, 'N') != 'Y';
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'ERROR REVERSING COMMISSION PAYMENT VOUCHER NO. ..'
                        || v_cqr_ref
                        || v_cqr_ref2);
            END;

            FOR cur_com_dtls_rec IN cur_comm_dtls (cur_comm_rec.copdt_code)
            LOOP
                BEGIN
                    UPDATE gin_commission_pymts
                       SET cop_authorized_by = NULL,
                           cop_authorized = 'N',
                           cop_authorize_date = NULL,
                           cop_paid = 'N'
                     WHERE cop_code = cur_com_dtls_rec.cop_code;
                /*UPDATE gin_master_transactions
                SET mtran_balance =
                NVL (mtran_balance, 0)
                + ( NVL (cur_com_dtls_rec.cop_net_comm, 0)
                * DECODE (mtran_dc, 'C', -1, 'D', 1)
                ),
                mtran_settlement =
                NVL (mtran_settlement, 0)
                - (NVL (cur_com_dtls_rec.cop_net_comm, 0))
                * DECODE (mtran_dc, 'C', -1, 'D', 1)
                WHERE mtran_no = cur_com_dtls_rec.cop_cr_mtran_no;*/
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                END;
            END LOOP;
        END LOOP;
    END update_undo_creditnote_comm;

    FUNCTION update_pymt_comm_refund (v_cr_mtran_no   IN NUMBER,
                                      v_cr_ref_no     IN VARCHAR2,
                                      v_dr_mtran_no   IN NUMBER,
                                      v_dr_ref_no     IN VARCHAR2,
                                      v_comm_amt      IN NUMBER,
                                      v_brn_code      IN NUMBER,
                                      v_agnt_code     IN NUMBER,
                                      v_cur_code      IN NUMBER)
        RETURN NUMBER
    IS
        v_mtran_no         NUMBER;
        v_user             VARCHAR2 (25);
        v_cop_code         NUMBER;
        v_act_wthtx        NUMBER := 0;
        v_gross_comm       NUMBER;
        v_net_comm         NUMBER;
        v_whtx             NUMBER;
        v_pol_pro_code     NUMBER;
        v_pmod_code        NUMBER;
        v_act_type         VARCHAR2 (3);
        v_client_type      VARCHAR2 (3);
        v_mkt_agn_code     tqc_agencies.agn_code%TYPE;
        v_pol_batch_no     gin_policies.pol_batch_no%TYPE;
        v_pol_wthtx_appl   VARCHAR2 (1);
        v_pmod_sht_desc    tqc_payment_modes.pmod_sht_desc%TYPE;
        v_instal_comm      NUMBER;
        v_instal_net       NUMBER;
        v_instal_wht       NUMBER;
        v_comm_diff        NUMBER;
        v_commission       NUMBER;
        v_comm_payable     NUMBER;
        v_comm_paid        NUMBER;
        v_comm_pyts        NUMBER;
        v_rnd              NUMBER;
        v_vat_rate         NUMBER;
        v_vat_amt          NUMBER;
        v_cr_mtran_whtx    NUMBER;
        v_maxcomm_amt      NUMBER;
        v_cr_net_comm      NUMBER;

        CURSOR dr_installments IS
              SELECT *
                FROM gin_pol_trans_installs
               WHERE ptins_mtran_no = v_cr_mtran_no
            --WHERE ptins_mtran_no = v_dr_mtran_no
            ORDER BY ptins_install_no;
    BEGIN
        BEGIN
            SELECT mtran_client_type,
                   mtran_pol_batch_no,
                   mtran_pmod_code,
                   mtran_pro_code,
                   mtran_commission,
                   mtran_comm_payable,
                   mtran_comm_paid,
                   mtran_whtx
              INTO v_client_type,
                   v_pol_batch_no,
                   v_pmod_code,
                   v_pol_pro_code,
                   v_commission,
                   v_comm_payable,
                   v_comm_paid,
                   v_cr_mtran_whtx
              FROM gin_master_transactions
             WHERE mtran_no = v_cr_mtran_no;
        -- WHERE mtran_no = v_dr_mtran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error determining account type...');
        END;

        v_pol_wthtx_appl :=
            gin_parameters_pkg.get_param_varchar ('U/W_WHTAX_APPLICABLE');

        IF NVL (v_client_type, 'X') <> 'D'
        THEN
            IF v_pol_wthtx_appl = 'Y'
            THEN
                BEGIN
                    SELECT act_wthtx_rate, act_type_sht_desc, act_vat_rate
                      INTO v_act_wthtx, v_act_type, v_vat_rate
                      FROM tqc_account_types, tqc_agencies
                     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error getting withholding tax rate...');
                END;
            ELSE
                BEGIN
                    SELECT act_type_sht_desc, act_vat_rate
                      INTO v_act_type, v_vat_rate
                      FROM tqc_account_types, tqc_agencies
                     WHERE act_code = agn_act_code AND agn_code = v_agnt_code;

                    v_act_wthtx := 0;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error getting withholding tax rate...');
                END;
            END IF;
        ELSE
            BEGIN
                SELECT pol_mktr_agn_code
                  INTO v_mkt_agn_code
                  FROM gin_policies
                 WHERE pol_batch_no = v_pol_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error getting marketer attached...');
            END;

            BEGIN
                SELECT act_wthtx_rate, act_type_sht_desc
                  INTO v_act_wthtx, v_act_type
                  FROM tqc_account_types, tqc_agencies
                 WHERE act_code = agn_act_code AND agn_code = v_mkt_agn_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error getting withholding tax rate...');
            END;
        END IF;

        BEGIN
            SELECT cur_rnd
              INTO v_rnd
              FROM tqc_currencies
             WHERE cur_code = v_cur_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_when_others ('Error selecting rounding factor');
        END;

        v_cr_net_comm :=
            ABS (NVL (v_commission, 0)) - ABS (NVL (v_cr_mtran_whtx, 0));

        -- IF ABS(NVL(v_comm_amt,0))>ABS(NVL(v_cr_net_comm,0)) THEN
        -- v_maxcomm_amt:=v_cr_net_comm;
        -- ELSE
        -- v_maxcomm_amt:=v_comm_amt;
        -- END IF;
        IF NVL (v_act_wthtx, 0) != 0
        THEN
            v_gross_comm :=
                ROUND (
                    100 / (100 - NVL (v_act_wthtx, 0)) * NVL (v_comm_amt, 0));
            v_whtx := v_gross_comm - v_comm_amt;
        ELSE
            v_gross_comm := v_comm_amt;
            v_whtx := 0;
        END IF;

        IF NVL (v_vat_rate, 0) != 0
        THEN
            v_vat_amt :=
                ROUND (NVL (v_vat_rate, 0) / 100 * NVL (v_gross_comm, 0),
                       v_rnd);
        END IF;

        v_net_comm :=
            NVL (v_gross_comm, 0) - NVL (v_whtx, 0) + NVL (v_vat_amt, 0);

        -- RAISE_ERROR('v_maxcomm_amt='||v_maxcomm_amt||' v_gross_comm='||v_gross_comm||' v_net_comm='||v_net_comm||' v_whtx='||v_whtx);
        BEGIN
            SELECT SUM (NVL (cop_comm_amt, 0))
              INTO v_comm_pyts
              FROM gin_commission_pymts
             WHERE     cop_dr_mtran_no = v_dr_mtran_no
                   AND NVL (cop_withdrawn, 'N') = 'N';
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error determining commission paid on debit note...');
        END;

        IF   (NVL (v_comm_pyts, 0) + NVL (v_gross_comm, 0))
           - ABS (v_commission) >
           1
        THEN
            raise_error (
                   'Total commission allocated '
                || TO_CHAR (
                       NVL (v_comm_pyts, 0) || '=' || NVL (v_gross_comm, 0))
                || ' is greater than commission on debit note: '
                || ABS (v_commission));
        END IF;

        IF v_pmod_code IS NOT NULL
        THEN
            BEGIN
                SELECT pmod_sht_desc
                  INTO v_pmod_sht_desc
                  FROM tqc_payment_modes
                 WHERE pmod_code = v_pmod_code;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_pmod_sht_desc := NULL;
                WHEN OTHERS
                THEN
                    raise_error ('Error getting payment method..');
            END;
        ELSE
            v_pmod_sht_desc := NULL;
        END IF;

        --RAISE_ERROR('v_pmod_sht_desc='||v_pmod_sht_desc);
        IF NVL (v_pmod_sht_desc, 'CS') != 'IPF'
        THEN
            SELECT TO_NUMBER (
                       TO_CHAR (SYSDATE, 'YYYY') || gin_cop_code_seq.NEXTVAL)
              INTO v_cop_code
              FROM DUAL;

            INSERT INTO gin_commission_pymts (cop_code,
                                              cop_agn_code,
                                              cop_date,
                                              cop_dr_ref_no,
                                              cop_cr_ref_no,
                                              cop_comm_amt,
                                              cop_whdtax_amt,
                                              cop_ovride_comm_amt,
                                              cop_ovride_whdtax_amt,
                                              cop_agn_unit_mgr,
                                              cop_paid,
                                              cop_paid_chq_date,
                                              cop_paid_chq_no,
                                              cop_paid_vchr_no,
                                              cop_trans_no,
                                              cop_brn_code,
                                              cop_bru_code,
                                              cop_prepared_by,
                                              cop_cr_mtran_no,
                                              cop_dr_mtran_no,
                                              cop_whtx_rate,
                                              cop_net_comm,
                                              cop_cur_code,
                                              cop_scl_code,
                                              cop_act_type,
                                              cop_vat_amt)
                 VALUES (v_cop_code,
                         v_agnt_code,
                         TRUNC (SYSDATE),
                         v_dr_ref_no,
                         v_cr_ref_no,
                         -v_gross_comm,
                         v_whtx,
                         NULL,
                         NULL,
                         NULL,
                         'N',
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         v_brn_code,
                         NULL,
                         v_user,
                         v_cr_mtran_no,
                         v_dr_mtran_no,
                         v_act_wthtx,
                         -v_net_comm,
                         v_cur_code,
                         v_pol_pro_code,
                         v_act_type,
                         -v_vat_amt);
        END IF;

        --RAISE_eRROR('v_dr_mtran_no='||v_dr_mtran_no||'='||v_cr_mtran_no);
        UPDATE gin_master_transactions
           SET mtran_comm_payable =
                   NVL (mtran_comm_payable, 0) + v_gross_comm,
               --v_gross_comm, -- SHOULD WE UPDATE THE NET COMMISSION OR GROSS COMMISSION. FIND OUT
               mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
               mtran_vat_payable =
                   NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
         WHERE mtran_no = v_dr_mtran_no;

        UPDATE gin_master_transactions
           SET mtran_comm_payable =
                   NVL (mtran_comm_payable, 0) + v_gross_comm,
               --v_gross_comm, -- SHOULD WE UPDATE GROSS COMMISSION. FIND OUT
               mtran_whtx_payable = NVL (mtran_whtx_payable, 0) + v_whtx,
               mtran_vat_payable =
                   NVL (mtran_vat_payable, 0) + NVL (v_vat_amt, 0)
         WHERE mtran_no = v_cr_mtran_no;

        RETURN (v_gross_comm);
    END;

    FUNCTION get_receipt_no (v_pol_batch_no IN NUMBER)
        RETURN NUMBER
    IS
        v_receipt_no   NUMBER;
    BEGIN
        SELECT mtran_ref_no
          INTO v_receipt_no
          FROM gin_master_transactions
         WHERE     mtran_pol_batch_no = v_pol_batch_no
               AND mtran_tran_type IN ('RC', 'CN');

        RETURN v_receipt_no;
    EXCEPTION
        WHEN OTHERS
        THEN
            RETURN 0;
    END get_receipt_no;

    /* COMMENTED ON 19/09/2016 BY KARANI FOR CONSOLIDATION
     PROCEDURE auth_comm_pymnts_new (
     v_tab IN pymnt_req_tab,
     verror IN VARCHAR2,
     v_in_pyment IN VARCHAR2 DEFAULT 'Y',
     v_user IN VARCHAR2
     )
     IS
     v_user_code NUMBER;
     v_sys_code NUMBER;
     v_tran_status VARCHAR2 (2);
     vfrmname VARCHAR2 (15);
     v_facil_name VARCHAR2 (50);
     v_facil_code NUMBER;
     msg VARCHAR2 (100);
     al_id NUMBER;
     v_vchr_no VARCHAR2 (20);
     v_org_code NUMBER;
     v_cnt NUMBER := 0;
     v_tot_cnt NUMBER := 0;
     v_update VARCHAR2 (5);
     v_agn_con_code VARCHAR2 (10);
     v_iptpecode VARCHAR2 (15);
     v_option VARCHAR2 (15);
     v_date DATE := TRUNC (SYSDATE);
     v_mtran_no NUMBER;
     v_cr_mtran_no NUMBER;
     v_cr_ref_no VARCHAR2 (35);
     v_cr_bal NUMBER;
     v_cr_com NUMBER;
     v_pol_no VARCHAR2 (35);
     v_cr_rc_mtran_no NUMBER;
     v_cr_rc_ref_no VARCHAR2 (35);
     v_cr_rc_bal NUMBER;
     v_cr_rc_com NUMBER;
     v_mtran_cr_no NUMBER;
     v_mtran_dr_no NUMBER;
     v_cr_comm NUMBER;
     v_cop_cr_mtran_no NUMBER;
     v_cop_cr_ref_no VARCHAR2 (30);
     v_cr_mtran_bal NUMBER;
     v_webserv_param gin_parameters.param_value%TYPE;
     v_webserv_address_param gin_parameters.param_value%TYPE;
     v_req_result VARCHAR2 (2000);
     v_req_result1 VARCHAR2 (2000);
     vdisplaynumber VARCHAR2 (30);
     vyear VARCHAR2 (30);
     vmonth VARCHAR2 (30);
     vpaymenttype VARCHAR2 (30);
     vamount VARCHAR2 (30);
     vwhtax VARCHAR2 (30);
     vcrmtranno NUMBER;
     vcrmtranrefno VARCHAR2 (50);
     v_error VARCHAR2 (200);
     v_type_id VARCHAR2 (10);
     v_sht_desc VARCHAR2 (30);
     v_trans_no NUMBER;
     v_deductible_amt NUMBER;
     vagncode NUMBER;
     v_deduct_mtran_no NUMBER;
     v_maker_checker VARCHAR2 (1);
     v_authorized_by VARCHAR2 (30);
     v_prepared_by VARCHAR2 (30);

     CURSOR cur_comm_dtls (
     v_agn_code IN NUMBER,
     v_brn_code IN NUMBER,
     vcopdtcode IN NUMBER
     )
     IS
     SELECT cop_code, cop_agn_code, cop_brn_code, agn_name, agn_act_code,
     agn_comm_allowed, agn_con_code, cop_cr_mtran_no,
     cop_dr_mtran_no, cop_comm_amt grosscomm,
     cop_net_comm netcomm, act_type_id
     FROM gin_commission_pymts, tqc_agencies, tqc_account_types
     WHERE cop_agn_code = agn_code
     AND agn_act_code = act_code
     AND NVL (cop_authorized, 'N') = 'R'
     AND NVL (cop_paid, 'N') != 'Y'
     AND NVL (cop_checked, 'N') = 'Y'
     AND cop_agn_code = v_agn_code
     AND cop_brn_code = v_brn_code
     AND cop_copdt_code = vcopdtcode;
     BEGIN
     IF v_tab.COUNT = 0
     THEN
     v_error := 'NO COMMISSION PAYMENTS TO AUTHORISE..';
     RETURN;
     END IF;

     BEGIN
     SELECT usr_code
     INTO v_user_code
     FROM tqc_users
     WHERE usr_username = v_user;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ( 'ERROR FETCHING CURRENT SYSTEM USER <'
     || v_user
     || '>.......'
     );
     END;

     BEGIN
     SELECT gin_parameters_pkg.get_param_varchar ('SAME_USER_AUTH')
     INTO v_maker_checker
     FROM DUAL;
     EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     v_maker_checker := 'Y';
     WHEN OTHERS
     THEN
     v_maker_checker := 'Y';
     END;

     BEGIN
     SELECT gin_parameters_pkg.get_param_varchar
     ('WEBSERV_COMM_POSTING_HRMS_APPLIC')
     INTO v_webserv_param
     FROM DUAL;
     EXCEPTION
     WHEN NO_DATA_FOUND
     THEN
     v_webserv_param := 'N';
     WHEN OTHERS
     THEN
     raise_error
     ('ERROR FETCHING WEBSERV_COMM_POSTING_HRMS_APPLIC PARAMETER...'
     );
     END;

     IF NVL (v_webserv_param, 'N') = 'Y'
     THEN
     BEGIN
     SELECT gin_parameters_pkg.get_param_varchar ('WEBSERVICES_ADDRESS')
     INTO v_webserv_address_param
     FROM DUAL;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('ERROR FETCHING WEBSERVICES_ADDRESS PARAMETER...');
     END;
     END IF;

     BEGIN
     FOR i IN 1 .. v_tab.COUNT
     LOOP
     --RAISE_eRROR('v_in_pyment='||v_in_pyment);
     IF v_in_pyment = 'Y'
     THEN
     SELECT copdt_agn_code, act_type_id, agn_sht_desc,
     copdt_trans_no, copdt_deductible_amt,
     copdt_deduct_mtran_no, copdt_authorized_by,
     copdt_prepared_by
     INTO vagncode, v_type_id, v_sht_desc,
     v_trans_no, v_deductible_amt,
     v_deduct_mtran_no, v_authorized_by,
     v_prepared_by
     FROM gin_comm_pymt_dtls, tqc_agencies, tqc_account_types
     WHERE copdt_agn_code = agn_code
     AND agn_act_code = act_code
     AND copdt_code = v_tab (i).copdt_code;

     IF NVL (v_maker_checker, 'Y') = 'N'
     THEN
     IF v_authorized_by IS NOT NULL
     THEN
     IF v_authorized_by = v_prepared_by
     THEN
     raise_error
     ('THE USER WHO PREPARED COMMISSION
     IS NOT ALLOWED TO AUTHORISE THE SAME COMMISSION'
     );
     END IF;
     END IF;
     END IF;

     ---RAISE_eRROR('cpm_sht_desc='||v_tab (i).cpm_sht_desc);
     IF NVL (v_tab (i).cpm_sht_desc, 'CHQ') IN
     ('CHQ', 'EFT', 'RTGS', 'MOB') --Defauft mode is cheque
     THEN
     gin_interfaces_pkg.prc_com_pymt (v_tab (i).copdt_code,
     v_user,
     v_tab (i).cpm_sht_desc
     );
     ELSIF v_tab (i).cpm_sht_desc IN ('CR') --credit note
     THEN
     BEGIN
     BEGIN
     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || gin_mtran_no_seq.NEXTVAL
     )
     INTO v_mtran_cr_no
     FROM DUAL;

     INSERT INTO gin_master_transactions
     (mtran_no, mtran_doc_date,
     mtran_date, mtran_ref_no,
     mtran_other_ref, mtran_tran_type,
     mtran_dc, mtran_control_acc,
     mtran_client_type, mtran_client_code,
     mtran_amount,
     mtran_balance, mtran_authorised,
     mtran_net_amt,
     mtran_posting_date, mtran_ggt_tran_no,
     mtran_prp_code, mtran_btr_trans_code,
     mtran_origin, mtran_cur_code,
     mtran_cur_symbol,
     mtran_brn_code,
     mtran_brn_sht_desc,
     mtran_posted_by, mtran_whtx,
     mtran_client_polcy_no, mtran_copdt_code,
     mtran_narrations,mtran_comm_levy_amt
     )
     VALUES (v_mtran_cr_no, TRUNC (SYSDATE),
     TRUNC (SYSDATE), 'COM CRNOTE',
     v_tab (i).copdt_code, 'CRP',
     'C', v_sht_desc,
     v_type_id, v_tab (i).copdt_agn_code,
     -ABS (NVL (v_tab (i).net_comm, 0)),
     -ABS (NVL (v_tab (i).net_comm, 0)), 'N',
     -ABS (NVL (v_tab (i).net_comm, 0)),
     TRUNC (SYSDATE), NULL,
     NULL, 'CRP',
     'U', v_tab (i).copdt_cur_code,
     tqc_interfaces_pkg.currencysymbol
     (v_tab (i).copdt_cur_code
     ),
     v_tab (i).copdt_brn_code,
     fms_interfaces_pkg.brh_name
     (v_tab (i).copdt_brn_code,
     'S'
     ),
     v_user, NULL,
     v_pol_no, v_tab (i).copdt_code,
     'COMM PAID BY CREDIT NOTE',NULL

     );
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ( 'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
     || v_mtran_no
     );
     END;

     BEGIN
     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || gin_mtran_no_seq.NEXTVAL
     )
     INTO v_mtran_dr_no
     FROM DUAL;

     INSERT INTO gin_master_transactions

     --FOR CREDIT TRANSACTION
     ( mtran_no, mtran_doc_date,
     mtran_date, mtran_ref_no,
     mtran_other_ref, mtran_tran_type,
     mtran_dc, mtran_control_acc,
     mtran_client_type, mtran_client_code,
     mtran_amount,
     mtran_balance, mtran_authorised,
     mtran_net_amt,
     mtran_posting_date, mtran_ggt_tran_no,
     mtran_prp_code, mtran_btr_trans_code,
     mtran_origin, mtran_cur_code,
     mtran_cur_symbol,
     mtran_brn_code,
     mtran_brn_sht_desc,
     mtran_posted_by, mtran_whtx,
     mtran_client_polcy_no, mtran_copdt_code,
     mtran_narrations,mtran_comm_levy_amt
     )
     VALUES (v_mtran_dr_no, TRUNC (SYSDATE),
     TRUNC (SYSDATE), 'COM CRNOTE',
     v_tab (i).copdt_code, 'CRP',
     'D', v_sht_desc,
     v_type_id, v_tab (i).copdt_agn_code,
     ABS (NVL (v_tab (i).comm_amt, 0)),
     ABS (NVL (v_tab (i).net_comm, 0)), 'N',
     ABS (NVL (v_tab (i).net_comm, 0)),
     TRUNC (SYSDATE), NULL,
     NULL, 'CRP',
     'U', v_tab (i).copdt_cur_code,
     tqc_interfaces_pkg.currencysymbol
     (v_tab (i).copdt_cur_code
     ),
     v_tab (i).copdt_brn_code,
     fms_interfaces_pkg.brh_name
     (v_tab (i).copdt_brn_code,
     'S'
     ),
     v_user, -ABS (v_tab (i).whtax),
     v_pol_no, v_tab (i).copdt_code,
     'COMM PAID BY CREDIT NOTE',
     -ABS (v_tab (i).comm_levy)
     );
     END;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error updating transaction...');
     END;
     ELSIF v_tab (i).cpm_sht_desc IN ('HRMS') --payment through hrms
     THEN
     IF gin_interfaces_pkg.interface_enabled ('HRMS') = 'Y'
     THEN
     IF NVL (v_webserv_param, 'N') = 'Y'
     THEN
     IF v_webserv_address_param IS NOT NULL
     THEN
     v_agn_con_code := v_tab (i).agn_con_code;
     v_update := 'N';

     IF v_agn_con_code IS NULL
     THEN
     raise_error ( 'PAYROLL MAPPING FOR '
     || v_sht_desc
     || ':'
     || v_type_id
     || ' NOT BE DONE..'
     );
     ELSE
     BEGIN
     IF NVL (v_tab (i).net_comm, 0) <= 0
     THEN
     raise_error ( 'INVALID COMM AMOUNT OF '
     || NVL (v_tab (i).net_comm,
     0)
     );
     END IF;

     vdisplaynumber :=
     TO_CHAR (v_tab (i).copdt_code);
     vyear := TO_CHAR (SYSDATE, 'RRRR');
     vmonth := TO_CHAR (SYSDATE, 'MM');
     vpaymenttype := 'GIS-COMM';
     vamount := TO_CHAR (v_tab (i).comm_amt);
     vwhtax := TO_CHAR (v_tab (i).whtax);
     v_req_result :=
     UTL_HTTP.request
     ( v_webserv_address_param
     || ':63081/cmPayItemInfo?displayNumber='
     || vdisplaynumber
     || '?year='
     || vyear
     || '?month='
     || vmonth
     || '?paymentType='
     || vpaymenttype
     || '?amount='
     || vamount
     );
     v_req_result1 :=
     UTL_HTTP.request
     ( v_webserv_address_param
     || ':63081/cmPayItemInfo?displayNumber='
     || vdisplaynumber
     || '?year='
     || vyear
     || '?month='
     || vmonth
     || '?paymentType='
     || vpaymenttype
     || '?amount='
     || vwhtax
     );
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('ERROR POSTING TO HR.');
     END;
     END IF;
     END IF;
     END IF;
     ELSE
     raise_error
     ('ERROR: POSTING TO HRMS WEB SERVISE NOT ENABLED');
     END IF;
     ELSE
     raise_error ( 'ERROR: PROVIDE INTERMEDIARY '
     || v_sht_desc
     || ' DEFULT PAYMENT MODE '
     );
     END IF;
     END IF;

     v_update := 'Y';
     v_cnt := NVL (v_cnt, 0) + 1;

     IF (NVL (v_update, 'N') = 'Y' AND v_in_pyment = 'N')
     AND v_tab (i).cpm_sht_desc NOT IN ('CR')
     THEN
     /* IF cur_comm_rec.cnt = 1
     THEN
     BEGIN
     SELECT mtran_client_polcy_no INTO v_pol_no
     FROM gin_master_transactions
     WHERE mtran_no = cur_comm_rec.cop_dr_mtran_no;
     EXCEPTION
     WHEN OTHERS
     THEN
     NULL;
     END;
     ELSE
     v_pol_no := 'VARIOUS';
     END IF;*/



    /* v_pol_no := 'VARIOUS';

     BEGIN
     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || gin_mtran_no_seq.NEXTVAL
     )
     INTO v_mtran_no
     FROM DUAL;

     INSERT INTO gin_master_transactions
     (mtran_no, mtran_doc_date, mtran_date,
     mtran_ref_no, mtran_other_ref,
     mtran_tran_type, mtran_dc, mtran_control_acc,
     mtran_client_type, mtran_client_code,
     mtran_amount, mtran_balance,
     mtran_authorised, mtran_net_amt,
     mtran_posting_date, mtran_ggt_tran_no,
     mtran_prp_code, mtran_btr_trans_code,
     mtran_origin, mtran_cur_code,
     mtran_cur_symbol,
     mtran_brn_code,
     mtran_brn_sht_desc,
     mtran_posted_by, mtran_whtx,
     mtran_client_polcy_no, mtran_copdt_code,
     mtran_comm_levy_amt
     )
     VALUES (v_mtran_no, TRUNC (SYSDATE), TRUNC (SYSDATE),
     'COMMISSION', v_tab (i).copdt_code,
     'COM', 'D', v_sht_desc,
     v_type_id, v_tab (i).copdt_agn_code,
     ABS (v_tab (i).comm_amt), v_tab (i).net_comm,
     'Y', v_tab (i).net_comm,
     TRUNC (SYSDATE), v_trans_no,
     NULL, 'COM',
     'U', v_tab (i).copdt_cur_code,
     tqc_interfaces_pkg.currencysymbol
     (v_tab (i).copdt_cur_code
     ),
     v_tab (i).copdt_brn_code,
     fms_interfaces_pkg.brh_name
     (v_tab (i).copdt_brn_code,
     'S'
     ),
     v_user, v_tab (i).whtax,
     v_pol_no, v_tab (i).copdt_code,
     v_tab (i).comm_levy
     );
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ( 'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
     || v_tab (i).copdt_agn_code
     || '='
     || v_sht_desc
     );
     END;
     END IF;

     IF NVL (v_update, 'N') = 'Y'
     THEN
     FOR cur_com_dtls_rec IN
     cur_comm_dtls (v_tab (i).copdt_agn_code,
     v_tab (i).copdt_brn_code,
     v_tab (i).copdt_code
     )
     LOOP
     IF v_in_pyment = 'Y'
     THEN
     BEGIN
     UPDATE gin_commission_pymts
     SET cop_authorized_by = v_user,
     cop_authorized = 'Y',
     cop_authorize_date = TRUNC (SYSDATE),
     cop_copdt_code = v_tab (i).copdt_code,
     cop_trans_no = v_trans_no
     WHERE cop_code = cur_com_dtls_rec.cop_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ('ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...'
     );
     END;
     ELSIF v_in_pyment = 'N'
     THEN
     BEGIN
     UPDATE gin_commission_pymts
     SET cop_authorized_by = v_user,
     cop_authorized = 'Y',
     cop_authorize_date = TRUNC (SYSDATE),
     cop_paid = 'Y',
     cop_paid_chq_no = 'OOS',
     cop_paid_chq_date = TRUNC (SYSDATE),
     cop_copdt_code = v_tab (i).copdt_code,
     cop_trans_no = v_trans_no
     WHERE cop_code = cur_com_dtls_rec.cop_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ( 'ERROR POST UPDATING PAYMENT VOUCHER...'
     || cur_com_dtls_rec.cop_code
     );
     END;
     END IF;
     END LOOP;

     IF v_in_pyment = 'Y'
     THEN
     IF NVL (v_deductible_amt, 0) > 0
     THEN
     BEGIN
     SELECT TO_NUMBER ( TO_CHAR (SYSDATE, 'YYYY')
     || gin_mtran_no_seq.NEXTVAL
     )
     INTO vcrmtranno
     FROM DUAL;

     vcrmtranrefno := 'ADVLN' || v_tab (i).copdt_code;

     INSERT INTO gin_master_transactions
     (mtran_no, mtran_doc_date,
     mtran_date, mtran_ref_no,
     mtran_other_ref, mtran_tran_type,
     mtran_dc, mtran_control_acc,
     mtran_client_type, mtran_client_code,
     mtran_amount,
     mtran_balance, mtran_authorised,
     mtran_net_amt,
     mtran_posting_date, mtran_ggt_tran_no,
     mtran_prp_code, mtran_btr_trans_code,
     mtran_origin, mtran_cur_code,
     mtran_cur_symbol,
     mtran_brn_code,
     mtran_brn_sht_desc,
     mtran_posted_by, mtran_whtx,
     mtran_client_polcy_no, mtran_copdt_code,
     mtran_comm_levy_amt
     )
     VALUES (vcrmtranno, TRUNC (SYSDATE),
     TRUNC (SYSDATE), vcrmtranrefno,
     v_tab (i).copdt_code, 'ADC',
     'C', v_sht_desc,
     v_type_id, vagncode,
     -ABS (v_deductible_amt),
     -ABS (v_deductible_amt), 'Y',
     -ABS (v_deductible_amt),
     TRUNC (SYSDATE), v_trans_no,
     NULL, 'ADVLN',
     'U', v_tab (i).copdt_cur_code,
     tqc_interfaces_pkg.currencysymbol
     (v_tab (i).copdt_cur_code
     ),
     v_tab (i).copdt_brn_code,
     fms_interfaces_pkg.brh_name
     (v_tab (i).copdt_brn_code,
     'S'
     ),
     v_user, 0,
     v_pol_no, v_tab (i).copdt_code,
     0
     );

     v_cr_com := 0;
     --raise_Error(vcrmtranno||' = '||v_deduct_mtran_no||' = '||v_deductible_amt||'='||v_tab (i).copdt_deduct_mtran_no);
     knock_off_transactions
     (vcrmtranno,
     vcrmtranrefno,
     NVL (v_deduct_mtran_no,
     v_tab (i).copdt_deduct_mtran_no
     ),
     'N',
     TRUNC (SYSDATE),
     v_deductible_amt,
     v_cr_com,
     NULL,
     'N'
     );
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ('ERROR UPDATING SUBSIDIARY LEDGER RECORD...');
     END;
     END IF;

     BEGIN
     UPDATE gin_comm_pymt_dtls
     SET copdt_authorized = 'Y',
     copdt_authorized_by = v_user,
     copdt_authorize_date = TRUNC (SYSDATE)
     WHERE copdt_code = v_tab (i).copdt_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ('ERROR UPDATING CONSOLIDATED COMM TRANS ...');
     END;
     ELSIF v_in_pyment = 'N'
     THEN
     UPDATE gin_comm_pymt_dtls
     SET copdt_authorized = 'Y',
     copdt_authorized_by = v_user,
     copdt_authorize_date = TRUNC (SYSDATE),
     copdt_paid = 'Y',
     copdt_paid_chq_date = TRUNC (SYSDATE),
     copdt_paid_chq_no = 'OOS'
     WHERE copdt_code = v_tab (i).copdt_code;
     END IF;
     END IF;

     IF v_tab (i).cpm_sht_desc IN ('HRMS')
     THEN
     IF NVL (v_webserv_param, 'N') = 'Y'
     THEN
     IF gin_interfaces_pkg.interface_enabled ('HRMS') = 'Y'
     THEN
     IF NVL (v_req_result, 0) = 1 THEN
     gin_interfaces_pkg.update_commissions
     (v_tab (i).copdt_code,
     v_trans_no,
     NULL,
     TRUNC (SYSDATE),
     v_user,
     TO_NUMBER (vamount)
     );
     ELSE
     gin_interfaces_pkg.update_undo_commissions
     (v_tab (i).copdt_code,
     v_trans_no,
     NULL,
     TRUNC (SYSDATE),
     v_user,
     TO_NUMBER (vamount)
     );
     END IF;
     END IF;
     END IF;
     END IF;

     BEGIN
     UPDATE gin_gis_transactions
     SET ggt_trans_authorised = 'Y',
     ggt_trans_authorised_by = v_user,
     ggt_trans_authorise_date = TRUNC (SYSDATE)
     WHERE ggt_trans_no = v_trans_no;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('ERROR AUTHORISING COMM TRANS ...');
     END;

     v_error := 'COMMISION AUTHORISED SUCCESSFUL';
     END LOOP;
     END;
     END;
     */



    PROCEDURE auth_comm_pymnts_new (
        v_tab         IN OUT pymnt_req_tab,
        verror        IN     VARCHAR2,
        v_in_pyment   IN     VARCHAR2 DEFAULT 'Y',
        v_user        IN     VARCHAR2)
    IS
        v_user_code               NUMBER;
        v_sys_code                NUMBER;
        v_tran_status             VARCHAR2 (2);
        vfrmname                  VARCHAR2 (15);
        v_facil_name              VARCHAR2 (50);
        v_facil_code              NUMBER;
        msg                       VARCHAR2 (100);
        al_id                     NUMBER;
        v_vchr_no                 VARCHAR2 (20);
        v_org_code                NUMBER;
        v_cnt                     NUMBER := 0;
        v_tot_cnt                 NUMBER := 0;
        v_update                  VARCHAR2 (5);
        v_agn_con_code            VARCHAR2 (10);
        v_iptpecode               VARCHAR2 (15);
        v_option                  VARCHAR2 (15);
        v_date                    DATE := TRUNC (SYSDATE);
        v_mtran_no                NUMBER;
        v_cr_mtran_no             NUMBER;
        v_cr_ref_no               VARCHAR2 (35);
        v_cr_bal                  NUMBER;
        v_cr_com                  NUMBER;
        v_pol_no                  VARCHAR2 (35);
        v_cr_rc_mtran_no          NUMBER;
        v_cr_rc_ref_no            VARCHAR2 (35);
        v_cr_rc_bal               NUMBER;
        v_cr_rc_com               NUMBER;
        v_mtran_cr_no             NUMBER;
        v_mtran_dr_no             NUMBER;
        v_cr_comm                 NUMBER;
        v_cop_cr_mtran_no         NUMBER;
        v_cop_cr_ref_no           VARCHAR2 (30);
        v_cr_mtran_bal            NUMBER;
        v_webserv_param           gin_parameters.param_value%TYPE;
        v_webserv_address_param   gin_parameters.param_value%TYPE;
        v_req_result              VARCHAR2 (2000);
        v_req_result1             VARCHAR2 (2000);
        vdisplaynumber            VARCHAR2 (30);
        vyear                     VARCHAR2 (30);
        vmonth                    VARCHAR2 (30);
        vpaymenttype              VARCHAR2 (30);
        vamount                   VARCHAR2 (30);
        vwhtax                    VARCHAR2 (30);
        vcrmtranno                NUMBER;
        vcrmtranrefno             VARCHAR2 (50);
        v_error                   VARCHAR2 (200);
        v_type_id                 VARCHAR2 (10);
        v_sht_desc                VARCHAR2 (30);
        v_trans_no                NUMBER;
        v_deductible_amt          NUMBER;
        vagncode                  NUMBER;
        v_deduct_mtran_no         NUMBER;
        v_maker_checker           VARCHAR2 (1);
        v_authorized_by           VARCHAR2 (30);
        v_prepared_by             VARCHAR2 (30);
        v_ggt_trans_no            NUMBER;
        v_cpm_min_amt             NUMBER;
        v_cpm_max_amt             NUMBER;
        v_cpm_pymt_mode           NUMBER;
        v_rate                    NUMBER;
        v_comm_amnt               NUMBER;
        v_round                   NUMBER;
        v_bcur_round              NUMBER;
        V_AGN_PIN                 VARCHAR2 (100);
        V_STATUS                  VARCHAR2 (1);
        v_agn_bank_acc_no         VARCHAR2 (30);
        v_agn_bbr_acc_code        NUMBER;
        v_agn_bbr_code            NUMBER (22);

        CURSOR cur_comm_dtls (v_agn_code   IN NUMBER,
                              v_brn_code   IN NUMBER,
                              vcopdtcode   IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   cop_comm_amt     grosscomm,
                   cop_net_comm     netcomm,
                   act_type_id
              FROM gin_commission_pymts, tqc_agencies, tqc_account_types
             WHERE     cop_agn_code = agn_code
                   AND agn_act_code = act_code
                   AND NVL (cop_authorized, 'N') = 'R'
                   AND NVL (cop_paid, 'N') != 'Y'
                   AND NVL (cop_checked, 'N') = 'Y'
                   AND cop_agn_code = v_agn_code
                   AND cop_brn_code = v_brn_code
                   AND cop_copdt_code = vcopdtcode;
    BEGIN
        IF v_tab.COUNT = 0
        THEN
            v_error := 'NO COMMISSION PAYMENTS TO AUTHORISE..';
            RETURN;
        END IF;

        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = v_user;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                       'ERROR FETCHING CURRENT SYSTEM USER <'
                    || v_user
                    || '>.......');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('SAME_USER_AUTH')
              INTO v_maker_checker
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_maker_checker := 'Y';
            WHEN OTHERS
            THEN
                v_maker_checker := 'Y';
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'WEBSERV_COMM_POSTING_HRMS_APPLIC')
              INTO v_webserv_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_webserv_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'ERROR FETCHING WEBSERV_COMM_POSTING_HRMS_APPLIC PARAMETER...');
        END;

        IF NVL (v_webserv_param, 'N') = 'Y'
        THEN
            BEGIN
                SELECT gin_parameters_pkg.get_param_varchar (
                           'WEBSERVICES_ADDRESS')
                  INTO v_webserv_address_param
                  FROM DUAL;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR FETCHING WEBSERVICES_ADDRESS PARAMETER...');
            END;
        END IF;

        BEGIN
            FOR i IN 1 .. v_tab.COUNT
            LOOP
                --RAISE_eRROR('v_in_pyment='||v_in_pyment);
                IF v_in_pyment = 'Y'
                THEN
                    SELECT copdt_agn_code,
                           act_type_id,
                           agn_sht_desc,
                           copdt_trans_no,
                           copdt_deductible_amt,
                           copdt_deduct_mtran_no,
                           copdt_authorized_by,
                           copdt_prepared_by,
                           agn_pin,
                           agn_bank_acc_no,
                           agn_bbr_acc_code,
                           agn_bbr_code
                      INTO vagncode,
                           v_type_id,
                           v_sht_desc,
                           v_trans_no,
                           v_deductible_amt,
                           v_deduct_mtran_no,
                           v_authorized_by,
                           v_prepared_by,
                           v_agn_pin,
                           v_agn_bank_acc_no,
                           v_agn_bbr_acc_code,
                           v_agn_bbr_code
                      FROM gin_comm_pymt_dtls,
                           tqc_agencies,
                           tqc_account_types
                     WHERE     copdt_agn_code = agn_code
                           AND agn_act_code = act_code
                           AND copdt_code = v_tab (i).copdt_code;

                    IF NVL (v_maker_checker, 'Y') = 'N'
                    THEN
                        IF v_authorized_by IS NOT NULL
                        THEN
                            IF v_authorized_by = v_prepared_by
                            THEN
                                raise_error (
                                    'THE USER WHO PREPARED COMMISSION 
 IS NOT ALLOWED TO AUTHORISE THE SAME COMMISSION');
                            END IF;
                        END IF;
                    END IF;

                    -- validate
                    IF V_AGN_PIN IS NULL
                    THEN
                        V_STATUS :=
                            handle_comm_auth_error (
                                'AGENT PIN IS NOT DEFINED',
                                v_tab (i).copdt_code);
                        CONTINUE WHEN NVL (V_STATUS, 'N') = 'Y';
                    ELSE
                        V_STATUS :=
                            handle_comm_auth_error (NULL,
                                                    v_tab (i).copdt_code);
                    END IF;

                    IF v_tab (i).cpm_sht_desc IS NULL
                    THEN
                        V_STATUS :=
                            handle_comm_auth_error (
                                'PAYMENT MODE IS NOT DEFINED',
                                v_tab (i).copdt_code);

                        IF NVL (V_STATUS, 'N') = 'Y'
                        THEN
                            CONTINUE;
                        END IF;
                    ELSE
                        V_STATUS :=
                            handle_comm_auth_error (NULL,
                                                    v_tab (i).copdt_code);
                    END IF;


                    IF     v_agn_bank_acc_no IS NULL
                       AND v_tab (i).cpm_sht_desc = 'EFT'
                    THEN
                        V_STATUS :=
                            handle_comm_auth_error (
                                'AGENT BANK ACCOUNT IS NOT DEFINED',
                                v_tab (i).copdt_code);

                        IF NVL (V_STATUS, 'N') = 'Y'
                        THEN
                            CONTINUE;
                        END IF;
                    ELSE
                        V_STATUS :=
                            handle_comm_auth_error (NULL,
                                                    v_tab (i).copdt_code);
                    END IF;

                    -- IF v_agn_bbr_acc_code IS NULL AND v_tab (i).cpm_sht_desc = 'EFT'
                    -- THEN
                    -- V_STATUS := handle_comm_auth_error('AGENT BANK BRANCH ACCOUNT CODE IS NOT DEFINED',v_tab (i).copdt_code);
                    -- IF NVL(V_STATUS,'N') = 'Y'
                    -- THEN
                    -- CONTINUE;
                    -- END IF;
                    -- ELSE
                    -- V_STATUS :=handle_comm_auth_error(NULL,v_tab (i).copdt_code);
                    -- END IF;

                    IF     v_agn_bbr_code IS NULL
                       AND v_tab (i).cpm_sht_desc = 'EFT'
                    THEN
                        V_STATUS :=
                            handle_comm_auth_error (
                                'AGENT BANK CODE IS NOT DEFINED',
                                v_tab (i).copdt_code);

                        IF NVL (V_STATUS, 'N') = 'Y'
                        THEN
                            CONTINUE;
                        END IF;
                    ELSE
                        V_STATUS :=
                            handle_comm_auth_error (NULL,
                                                    v_tab (i).copdt_code);
                    END IF;

                    -- -- CHECK PAYMENT MODES AGANIST LIMITS+
                    -- BEGIN
                    IF NVL (v_tab (i).cpm_sht_desc, 'CHQ') IN
                           ('EFT', 'RTGS', 'CHQ')
                    THEN
                        v_rate :=
                            get_currexch_rate (v_tab (i).copdt_cur_code,
                                               v_round,
                                               v_bcur_round);
                        v_comm_amnt := v_tab (i).comm_amt * NVL (v_rate, 1);
                        --raise_error(v_comm_amnt);
                        v_tab (i).cpm_sht_desc :=
                            get_payment_mode_by_limits (
                                v_tab (i).cpm_sht_desc,
                                v_comm_amnt);
                    END IF;

                    -- END;
                    --RAISE_ERROR('cpm_sht_desc='||v_tab (i).cpm_sht_desc);
                    IF NVL (v_tab (i).cpm_sht_desc, 'CHQ') IN ('CHQ',
                                                               'EFT',
                                                               'RTGS',
                                                               'MOB') --Defauft mode is cheque
                    THEN
                        gin_interfaces_pkg.prc_com_pymt (
                            v_tab (i).copdt_code,
                            v_user,
                            v_tab (i).cpm_sht_desc);
                    ELSIF v_tab (i).cpm_sht_desc IN ('CR')       --credit note
                    THEN
                        BEGIN
                            BEGIN
                                SELECT ggt_trans_no_seq.NEXTVAL
                                  INTO v_ggt_trans_no
                                  FROM DUAL;

                                INSERT INTO gin_gis_transactions (
                                                ggt_trans_no,
                                                ggt_btr_trans_code,
                                                ggt_done_by,
                                                ggt_done_date,
                                                ggt_uw_clm_tran,
                                                ggt_trans_date,
                                                ggt_effective_date,
                                                ggt_doc_ref)
                                     VALUES (v_ggt_trans_no,
                                             'CRP',
                                             v_user,
                                             TRUNC (SYSDATE),
                                             'A',
                                             TRUNC (SYSDATE),
                                             TRUNC (SYSDATE),
                                             v_tab (i).copdt_code);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    v_error :=
                                        'Error securing the transaction No.';
                                    raise_error (v_error);
                            END;

                            BEGIN
                                SELECT TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY')
                                           || gin_mtran_no_seq.NEXTVAL)
                                  INTO v_mtran_cr_no
                                  FROM DUAL;

                                INSERT INTO gin_master_transactions (
                                                mtran_no,
                                                mtran_doc_date,
                                                mtran_date,
                                                mtran_ref_no,
                                                mtran_other_ref,
                                                mtran_tran_type,
                                                mtran_dc,
                                                mtran_control_acc,
                                                mtran_client_type,
                                                mtran_client_code,
                                                mtran_amount,
                                                mtran_balance,
                                                mtran_authorised,
                                                mtran_net_amt,
                                                mtran_posting_date,
                                                mtran_ggt_tran_no,
                                                mtran_prp_code,
                                                mtran_btr_trans_code,
                                                mtran_origin,
                                                mtran_cur_code,
                                                mtran_cur_symbol,
                                                mtran_brn_code,
                                                mtran_brn_sht_desc,
                                                mtran_posted_by,
                                                mtran_whtx,
                                                mtran_client_polcy_no,
                                                mtran_copdt_code,
                                                mtran_narrations,
                                                mtran_comm_levy_amt)
                                         VALUES (
                                             v_mtran_cr_no,
                                             TRUNC (SYSDATE),
                                             TRUNC (SYSDATE),
                                             'COM CRNOTE',
                                             v_tab (i).copdt_code,
                                             'CRP',
                                             'C',
                                             v_sht_desc,
                                             v_type_id,
                                             -- v_tab (i).copdt_agn_code,
                                             v_tab (i).cop_agn_code,
                                             -ABS (
                                                  NVL (v_tab (i).net_comm, 0)),
                                             -ABS (
                                                  NVL (v_tab (i).net_comm, 0)),
                                             'N',
                                             -ABS (
                                                  NVL (v_tab (i).net_comm, 0)),
                                             TRUNC (SYSDATE),
                                             v_ggt_trans_no,
                                             NULL,
                                             'CRP',
                                             'U',
                                             v_tab (i).copdt_cur_code,
                                             tqc_interfaces_pkg.currencysymbol (
                                                 v_tab (i).copdt_cur_code),
                                             v_tab (i).copdt_brn_code,
                                             fms_interfaces_pkg.brh_name (
                                                 v_tab (i).copdt_brn_code,
                                                 'S'),
                                             v_user,
                                             NULL,
                                             v_pol_no,
                                             v_tab (i).copdt_code,
                                             'COMM PAID BY CREDIT NOTE',
                                             NULL);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                           'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
                                        || v_mtran_no);
                            END;

                            BEGIN
                                SELECT TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY')
                                           || gin_mtran_no_seq.NEXTVAL)
                                  INTO v_mtran_dr_no
                                  FROM DUAL;

                                INSERT INTO gin_master_transactions --FOR CREDIT TRANSACTION
                                                                    (
                                                mtran_no,
                                                mtran_doc_date,
                                                mtran_date,
                                                mtran_ref_no,
                                                mtran_other_ref,
                                                mtran_tran_type,
                                                mtran_dc,
                                                mtran_control_acc,
                                                mtran_client_type,
                                                mtran_client_code,
                                                mtran_amount,
                                                mtran_balance,
                                                mtran_authorised,
                                                mtran_net_amt,
                                                mtran_posting_date,
                                                mtran_ggt_tran_no,
                                                mtran_prp_code,
                                                mtran_btr_trans_code,
                                                mtran_origin,
                                                mtran_cur_code,
                                                mtran_cur_symbol,
                                                mtran_brn_code,
                                                mtran_brn_sht_desc,
                                                mtran_posted_by,
                                                mtran_whtx,
                                                mtran_client_polcy_no,
                                                mtran_copdt_code,
                                                mtran_narrations,
                                                mtran_comm_levy_amt)
                                         VALUES (
                                             v_mtran_dr_no,
                                             TRUNC (SYSDATE),
                                             TRUNC (SYSDATE),
                                             'COM CRNOTE',
                                             v_tab (i).copdt_code,
                                             'CRP',
                                             'D',
                                             v_sht_desc,
                                             v_type_id,
                                             -- v_tab (i).copdt_agn_code,
                                             v_tab (i).cop_agn_code,
                                             ABS (
                                                 NVL (v_tab (i).comm_amt, 0)),
                                             ABS (
                                                 NVL (v_tab (i).net_comm, 0)),
                                             'N',
                                             ABS (
                                                 NVL (v_tab (i).net_comm, 0)),
                                             TRUNC (SYSDATE),
                                             v_ggt_trans_no,
                                             NULL,
                                             'CRP',
                                             'U',
                                             v_tab (i).copdt_cur_code,
                                             tqc_interfaces_pkg.currencysymbol (
                                                 v_tab (i).copdt_cur_code),
                                             v_tab (i).copdt_brn_code,
                                             fms_interfaces_pkg.brh_name (
                                                 v_tab (i).copdt_brn_code,
                                                 'S'),
                                             v_user,
                                             -ABS (v_tab (i).whtax),
                                             v_pol_no,
                                             v_tab (i).copdt_code,
                                             'COMM PAID BY CREDIT NOTE',
                                             -ABS (v_tab (i).comm_levy));
                            END;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error ('Error updating transaction...');
                        END;
                    ELSIF v_tab (i).cpm_sht_desc IN ('HRMS') --payment through hrms
                    THEN
                        IF gin_interfaces_pkg.interface_enabled ('HRMS') =
                           'Y'
                        THEN
                            IF NVL (v_webserv_param, 'N') = 'Y'
                            THEN
                                IF v_webserv_address_param IS NOT NULL
                                THEN
                                    v_agn_con_code := v_tab (i).agn_con_code;
                                    v_update := 'N';

                                    IF v_agn_con_code IS NULL
                                    THEN
                                        raise_error (
                                               'PAYROLL MAPPING FOR '
                                            || v_sht_desc
                                            || ':'
                                            || v_type_id
                                            || ' NOT BE DONE..');
                                    ELSE
                                        BEGIN
                                            IF NVL (v_tab (i).net_comm, 0) <=
                                               0
                                            THEN
                                                raise_error (
                                                       'INVALID COMM AMOUNT OF '
                                                    || NVL (
                                                           v_tab (i).net_comm,
                                                           0));
                                            END IF;

                                            vdisplaynumber :=
                                                TO_CHAR (
                                                    v_tab (i).copdt_code);
                                            vyear :=
                                                TO_CHAR (SYSDATE, 'RRRR');
                                            vmonth := TO_CHAR (SYSDATE, 'MM');
                                            vpaymenttype := 'GIS-COMM';
                                            vamount :=
                                                TO_CHAR (v_tab (i).comm_amt);
                                            vwhtax :=
                                                TO_CHAR (v_tab (i).whtax);
                                            v_req_result :=
                                                UTL_HTTP.request (
                                                       v_webserv_address_param
                                                    || ':63081/cmPayItemInfo?displayNumber='
                                                    || vdisplaynumber
                                                    || '?year='
                                                    || vyear
                                                    || '?month='
                                                    || vmonth
                                                    || '?paymentType='
                                                    || vpaymenttype
                                                    || '?amount='
                                                    || vamount);
                                            v_req_result1 :=
                                                UTL_HTTP.request (
                                                       v_webserv_address_param
                                                    || ':63081/cmPayItemInfo?displayNumber='
                                                    || vdisplaynumber
                                                    || '?year='
                                                    || vyear
                                                    || '?month='
                                                    || vmonth
                                                    || '?paymentType='
                                                    || vpaymenttype
                                                    || '?amount='
                                                    || vwhtax);
                                        EXCEPTION
                                            WHEN OTHERS
                                            THEN
                                                raise_error (
                                                    'ERROR POSTING TO HR.');
                                        END;
                                    END IF;
                                END IF;
                            END IF;
                        ELSE
                            raise_error (
                                'ERROR: POSTING TO HRMS WEB SERVISE NOT ENABLED');
                        END IF;
                    ELSE
                        raise_error (
                               'ERROR: PROVIDE INTERMEDIARY '
                            || v_sht_desc
                            || ' DEFULT PAYMENT MODE ');
                    END IF;
                END IF;

                v_update := 'Y';
                v_cnt := NVL (v_cnt, 0) + 1;

                IF     (NVL (v_update, 'N') = 'Y' AND v_in_pyment = 'N')
                   AND v_tab (i).cpm_sht_desc NOT IN ('CR')
                THEN
                    /* IF cur_comm_rec.cnt = 1
                    THEN
                    BEGIN
                    SELECT mtran_client_polcy_no INTO v_pol_no
                    FROM gin_master_transactions
                    WHERE mtran_no = cur_comm_rec.cop_dr_mtran_no;
                    EXCEPTION
                    WHEN OTHERS
                    THEN
                    NULL;
                    END;
                    ELSE
                    v_pol_no := 'VARIOUS';
                    END IF;*/
                    v_pol_no := 'VARIOUS';

                    BEGIN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || gin_mtran_no_seq.NEXTVAL)
                          INTO v_mtran_no
                          FROM DUAL;

                        INSERT INTO gin_master_transactions (
                                        mtran_no,
                                        mtran_doc_date,
                                        mtran_date,
                                        mtran_ref_no,
                                        mtran_other_ref,
                                        mtran_tran_type,
                                        mtran_dc,
                                        mtran_control_acc,
                                        mtran_client_type,
                                        mtran_client_code,
                                        mtran_amount,
                                        mtran_balance,
                                        mtran_authorised,
                                        mtran_net_amt,
                                        mtran_posting_date,
                                        mtran_ggt_tran_no,
                                        mtran_prp_code,
                                        mtran_btr_trans_code,
                                        mtran_origin,
                                        mtran_cur_code,
                                        mtran_cur_symbol,
                                        mtran_brn_code,
                                        mtran_brn_sht_desc,
                                        mtran_posted_by,
                                        mtran_whtx,
                                        mtran_client_polcy_no,
                                        mtran_copdt_code,
                                        mtran_comm_levy_amt)
                                 VALUES (
                                     v_mtran_no,
                                     TRUNC (SYSDATE),
                                     TRUNC (SYSDATE),
                                     'COMMISSION',
                                     v_tab (i).copdt_code,
                                     'COM',
                                     'D',
                                     v_sht_desc,
                                     v_type_id,
                                     v_tab (i).copdt_agn_code,
                                     ABS (v_tab (i).comm_amt),
                                     v_tab (i).net_comm,
                                     'Y',
                                     v_tab (i).net_comm,
                                     TRUNC (SYSDATE),
                                     v_trans_no,
                                     NULL,
                                     'COM',
                                     'U',
                                     v_tab (i).copdt_cur_code,
                                     tqc_interfaces_pkg.currencysymbol (
                                         v_tab (i).copdt_cur_code),
                                     v_tab (i).copdt_brn_code,
                                     fms_interfaces_pkg.brh_name (
                                         v_tab (i).copdt_brn_code,
                                         'S'),
                                     v_user,
                                     v_tab (i).whtax,
                                     v_pol_no,
                                     v_tab (i).copdt_code,
                                     v_tab (i).comm_levy);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
                                || v_tab (i).copdt_agn_code
                                || '='
                                || v_sht_desc);
                    END;
                END IF;

                IF NVL (v_update, 'N') = 'Y'
                THEN
                    -- RAISE_ERROR('v_in_pyment'||v_in_pyment);
                    FOR cur_com_dtls_rec
                        IN cur_comm_dtls (v_tab (i).copdt_agn_code,
                                          v_tab (i).copdt_brn_code,
                                          v_tab (i).copdt_code)
                    LOOP
                        IF v_in_pyment = 'Y'
                        THEN
                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'R',
                                       cop_authorize_date = TRUNC (SYSDATE),
                                       cop_copdt_code = v_tab (i).copdt_code,
                                       cop_trans_no = v_trans_no
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                            END;
                        ELSIF v_in_pyment = 'N'
                        THEN
                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'Y',
                                       cop_authorize_date = TRUNC (SYSDATE),
                                       cop_paid = 'Y',
                                       cop_paid_chq_no = 'OOS',
                                       cop_paid_chq_date = TRUNC (SYSDATE),
                                       cop_copdt_code = v_tab (i).copdt_code,
                                       cop_trans_no = v_trans_no
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                           'ERROR POST UPDATING PAYMENT VOUCHER...'
                                        || cur_com_dtls_rec.cop_code);
                            END;
                        END IF;
                    END LOOP;

                    IF v_in_pyment = 'Y'
                    THEN
                        IF NVL (v_deductible_amt, 0) > 0
                        THEN
                            BEGIN
                                SELECT TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY')
                                           || gin_mtran_no_seq.NEXTVAL)
                                  INTO vcrmtranno
                                  FROM DUAL;

                                vcrmtranrefno :=
                                    'ADVLN' || v_tab (i).copdt_code;

                                INSERT INTO gin_master_transactions (
                                                mtran_no,
                                                mtran_doc_date,
                                                mtran_date,
                                                mtran_ref_no,
                                                mtran_other_ref,
                                                mtran_tran_type,
                                                mtran_dc,
                                                mtran_control_acc,
                                                mtran_client_type,
                                                mtran_client_code,
                                                mtran_amount,
                                                mtran_balance,
                                                mtran_authorised,
                                                mtran_net_amt,
                                                mtran_posting_date,
                                                mtran_ggt_tran_no,
                                                mtran_prp_code,
                                                mtran_btr_trans_code,
                                                mtran_origin,
                                                mtran_cur_code,
                                                mtran_cur_symbol,
                                                mtran_brn_code,
                                                mtran_brn_sht_desc,
                                                mtran_posted_by,
                                                mtran_whtx,
                                                mtran_client_polcy_no,
                                                mtran_copdt_code,
                                                mtran_comm_levy_amt)
                                         VALUES (
                                             vcrmtranno,
                                             TRUNC (SYSDATE),
                                             TRUNC (SYSDATE),
                                             vcrmtranrefno,
                                             v_tab (i).copdt_code,
                                             'ADC',
                                             'C',
                                             v_sht_desc,
                                             v_type_id,
                                             vagncode,
                                             -ABS (v_deductible_amt),
                                             -ABS (v_deductible_amt),
                                             'Y',
                                             -ABS (v_deductible_amt),
                                             TRUNC (SYSDATE),
                                             v_trans_no,
                                             NULL,
                                             'ADVLN',
                                             'U',
                                             v_tab (i).copdt_cur_code,
                                             tqc_interfaces_pkg.currencysymbol (
                                                 v_tab (i).copdt_cur_code),
                                             v_tab (i).copdt_brn_code,
                                             fms_interfaces_pkg.brh_name (
                                                 v_tab (i).copdt_brn_code,
                                                 'S'),
                                             v_user,
                                             0,
                                             v_pol_no,
                                             v_tab (i).copdt_code,
                                             0);

                                v_cr_com := 0;
                                --raise_Error(vcrmtranno||' = '||v_deduct_mtran_no||' = '||v_deductible_amt||'='||v_tab (i).copdt_deduct_mtran_no);
                                knock_off_transactions (
                                    vcrmtranno,
                                    vcrmtranrefno,
                                    NVL (v_deduct_mtran_no,
                                         v_tab (i).copdt_deduct_mtran_no),
                                    'N',
                                    TRUNC (SYSDATE),
                                    v_deductible_amt,
                                    v_cr_com,
                                    NULL,
                                    'N');
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'ERROR UPDATING SUBSIDIARY LEDGER RECORD...');
                            END;
                        END IF;

                        BEGIN
                            UPDATE gin_comm_pymt_dtls
                               SET copdt_authorized = 'Y',
                                   copdt_authorized_by = v_user,
                                   copdt_authorize_date = TRUNC (SYSDATE)
                             WHERE copdt_code = v_tab (i).copdt_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR UPDATING CONSOLIDATED COMM TRANS ...');
                        END;
                    ELSIF v_in_pyment = 'N'
                    THEN
                        UPDATE gin_comm_pymt_dtls
                           SET copdt_authorized = 'Y',
                               copdt_authorized_by = v_user,
                               copdt_authorize_date = TRUNC (SYSDATE),
                               copdt_paid = 'Y',
                               copdt_paid_chq_date = TRUNC (SYSDATE),
                               copdt_paid_chq_no = 'OOS'
                         WHERE copdt_code = v_tab (i).copdt_code;
                    END IF;
                END IF;

                IF v_tab (i).cpm_sht_desc IN ('HRMS')
                THEN
                    IF NVL (v_webserv_param, 'N') = 'Y'
                    THEN
                        IF gin_interfaces_pkg.interface_enabled ('HRMS') =
                           'Y'
                        THEN
                            IF NVL (v_req_result, 0) = 1
                            THEN
                                gin_interfaces_pkg.update_commissions (
                                    v_tab (i).copdt_code,
                                    v_trans_no,
                                    NULL,
                                    TRUNC (SYSDATE),
                                    v_user,
                                    TO_NUMBER (vamount));
                            ELSE
                                gin_interfaces_pkg.update_undo_commissions (
                                    v_tab (i).copdt_code,
                                    v_trans_no,
                                    NULL,
                                    TRUNC (SYSDATE),
                                    v_user,
                                    TO_NUMBER (vamount));
                            END IF;
                        END IF;
                    END IF;
                END IF;

                BEGIN
                    UPDATE gin_gis_transactions
                       SET ggt_trans_authorised = 'Y',
                           ggt_trans_authorised_by = v_user,
                           ggt_trans_authorise_date = TRUNC (SYSDATE)
                     WHERE ggt_trans_no = v_trans_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('ERROR AUTHORISING COMM TRANS ...');
                END;

                v_error := 'COMMISION AUTHORISED SUCCESSFUL';
            END LOOP;
        END;
    END;

    PROCEDURE makeready_comm_pymnts_new (
        v_tab                     IN     pymnt_prepd_req_tab,
        v_error                      OUT VARCHAR2,
        vuser                     IN     VARCHAR2,
        v_in_pyment               IN     VARCHAR2 DEFAULT 'Y',
        v_instant_automated_com   IN     VARCHAR2 DEFAULT 'N')
    IS
        v_user              VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        v_user_code         NUMBER;
        v_sys_code          NUMBER;
        v_tran_status       VARCHAR2 (2);
        vfrmname            VARCHAR2 (15);
        v_facil_name        VARCHAR2 (50);
        v_facil_code        NUMBER;
        msg                 VARCHAR2 (100);
        al_id               NUMBER;
        v_vchr_no           VARCHAR2 (20);
        v_org_code          NUMBER;
        v_cnt               NUMBER := 0;
        v_tot_cnt           NUMBER := 0;
        v_update            VARCHAR2 (5);
        v_agn_con_code      VARCHAR2 (10);
        v_iptpecode         VARCHAR2 (15);
        v_option            VARCHAR2 (15);
        v_date              DATE := TRUNC (SYSDATE);
        v_mtran_no          NUMBER;
        v_cr_mtran_no       NUMBER;
        v_cr_ref_no         VARCHAR2 (35);
        v_cr_bal            NUMBER;
        v_cr_com            NUMBER;
        v_pol_no            VARCHAR2 (35);
        v_copdt_code        NUMBER;
        v_tran_no           NUMBER := 0;
        v_cr_rc_mtran_no    NUMBER;
        v_cr_rc_ref_no      VARCHAR2 (35);
        v_cr_rc_bal         NUMBER;
        v_cr_rc_com         NUMBER;
        v_mtran_cr_no       NUMBER;
        v_mtran_dr_no       NUMBER;
        v_cr_comm           NUMBER;
        v_cop_cr_mtran_no   NUMBER;
        v_cop_cr_ref_no     VARCHAR2 (30);
        v_cr_mtran_bal      NUMBER;
        v_cpm_code          NUMBER;
        v_cpm_com_min_amt   NUMBER;

        CURSOR cur_comm_dtls (v_coppdt_code IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   cop_comm_amt     grosscomm,
                   cop_net_comm     netcomm,
                   act_type_id
              FROM gin_commission_pymts, tqc_agencies, tqc_account_types
             WHERE     cop_agn_code = agn_code
                   AND agn_act_code = act_code
                   AND cop_coppdt_code = v_coppdt_code;
    BEGIN
        IF v_tab.COUNT = 0
        THEN
            v_error := 'NO COMMISSION PAYMENTS TO MAKE READY..';
            RETURN;
        END IF;

        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = NVL (v_user, vuser);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'ERROR FETCHING CURRENT SYSTEM USER <' || v_user);
        END;

        IF v_in_pyment IS NULL
        THEN
            RAISE_ERROR (
                'ERROR DETERMINING IF THE PAYMENT IS WITH THE SYSTEM OR OUTSIDE THE SYSTEM...');
        END IF;

        BEGIN
            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                   || ggt_trans_no_seq.NEXTVAL
              INTO v_tran_no
              FROM DUAL;

            INSERT INTO gin_gis_transactions (ggt_trans_no,
                                              ggt_btr_trans_code,
                                              ggt_done_by,
                                              ggt_done_date,
                                              ggt_uw_clm_tran,
                                              ggt_trans_date,
                                              ggt_old_tran_no,
                                              ggt_effective_date,
                                              ggt_status)
                 VALUES (v_tran_no,
                         'COM',
                         v_user,
                         TRUNC (SYSDATE),
                         'A',
                         TRUNC (SYSDATE),
                         NULL,
                         TRUNC (SYSDATE),
                         NULL);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error Creating transaction for auth ...');
        END;

        BEGIN
            FOR i IN 1 .. v_tab.COUNT
            LOOP
                IF NVL (v_instant_automated_com, 'N') = 'Y'
                THEN
                    IF v_tab (i).coppdt_agn_code IS NOT NULL
                    THEN
                        SELECT agn_default_cpm_mode
                          INTO v_cpm_code
                          FROM tqc_agencies
                         WHERE agn_code = v_tab (i).coppdt_agn_code;
                    END IF;

                    IF v_cpm_code IS NOT NULL
                    THEN
                        BEGIN
                            SELECT cpm_com_min_amt
                              INTO v_cpm_com_min_amt
                              FROM tqc_clm_payment_modes
                             WHERE cpm_code = v_cpm_code;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                v_cpm_com_min_amt := 0;
                            WHEN OTHERS
                            THEN
                                v_cpm_com_min_amt := 0;
                        END;
                    -- IF NVL (v_cpm_com_min_amt, 0) != 0
                    -- THEN
                    -- IF NVL (v_cpm_com_min_amt, 0) >
                    -- NVL (v_tab (i).net_comm, 0)

                    -- THEN
                    -- SELECT cpm_code
                    -- INTO v_cpm_code
                    -- FROM tqc_clm_payment_modes
                    -- WHERE cpm_sht_desc = 'EFT';
                    -- END IF;
                    -- END IF;
                    END IF;
                ELSE
                    SELECT agn_default_cpm_mode
                      INTO v_cpm_code
                      FROM tqc_agencies
                     WHERE agn_code = v_tab (i).coppdt_agn_code;
                END IF;


                BEGIN
                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                           || gin_copdt_code_seq.NEXTVAL
                      INTO v_copdt_code
                      FROM DUAL;

                    IF v_tab (i).copdt_agn_paymt_mode IS NOT NULL
                    THEN
                        SELECT COPPDT_CPM_CODE
                          INTO v_cpm_code
                          FROM gin_comm_pymt_prepd_dtls
                         WHERE coppdt_code = v_tab (i).coppdt_code;
                    END IF;

                    INSERT INTO gin_comm_pymt_dtls (
                                    copdt_code,
                                    copdt_agn_code,
                                    copdt_date,
                                    copdt_comm_amt,
                                    copdt_paid,
                                    copdt_trans_no,
                                    copdt_brn_code,
                                    copdt_prepared_by,
                                    copdt_bru_code,
                                    copdt_whdtax_amt,
                                    copdt_drcr,
                                    copdt_net_comm,
                                    copdt_ovride_comm_amt,
                                    copdt_ovride_whdtax_amt,
                                    copdt_cur_code,
                                    copdt_act_type,
                                    copdt_payee,
                                    copdt_agn_con_code,
                                    copdt_authorized,
                                    copdt_ovride_net_amt,
                                    copdt_check,
                                    copdt_cpm_code,
                                    copdt_payable_net_comm,
                                    copdt_instant_automated_com,
                                    copdt_vat_amt)
                             VALUES (
                                 v_copdt_code,
                                 v_tab (i).coppdt_agn_code,
                                 TRUNC (SYSDATE),
                                 v_tab (i).comm_amt,
                                 'N',
                                 v_tran_no,
                                 v_tab (i).coppdt_brn_code,
                                 v_user,
                                 NULL,
                                 v_tab (i).whtax,
                                 DECODE (SIGN (v_tab (i).comm_amt),
                                         1, 'C',
                                         'D'),
                                 v_tab (i).net_comm,
                                 NULL,
                                 NULL,
                                 v_tab (i).coppdt_cur_code,
                                 NULL,
                                 v_tab (i).agn_name,
                                 v_tab (i).agn_con_code,
                                 'N',
                                 NULL,
                                 'Y',
                                 v_cpm_code,
                                 v_tab (i).net_comm,
                                 v_instant_automated_com,
                                 v_tab (i).coppdt_vat_amt);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error creating commission voucher details....');
                END;

                v_update := 'Y';
                v_cnt := NVL (v_cnt, 0) + 1;

                IF NVL (v_update, 'N') = 'Y'
                THEN
                    IF v_in_pyment = 'Y'
                    THEN
                        BEGIN
                            UPDATE gin_comm_pymt_prepd_dtls
                               SET coppdt_authorized_by = v_user,
                                   coppdt_authorized = 'R',
                                   coppdt_copdt_code = v_copdt_code,
                                   coppdt_tran_no = v_tran_no
                             WHERE coppdt_code = v_tab (i).coppdt_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                        END;
                    ELSIF v_in_pyment = 'N'
                    THEN
                        BEGIN
                            UPDATE gin_comm_pymt_prepd_dtls
                               SET coppdt_authorized_by = v_user,
                                   coppdt_authorized = 'R',
                                   coppdt_paid = 'Y',
                                   coppdt_paid_chq_no = 'OOS',
                                   coppdt_copdt_code = v_copdt_code,
                                   coppdt_tran_no = v_tran_no
                             WHERE coppdt_code = v_tab (i).coppdt_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR POST UPDATING PAYMENT VOUCHER...');
                        END;
                    END IF;

                    FOR cur_com_dtls_rec
                        IN cur_comm_dtls (v_tab (i).coppdt_code)
                    LOOP
                        IF v_in_pyment = 'Y'
                        THEN
                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'R',
                                       cop_copdt_code = v_copdt_code,
                                       cop_trans_no = v_tran_no
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                            END;
                        ELSIF v_in_pyment = 'N'
                        THEN
                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'R',
                                       cop_paid = 'Y',
                                       cop_paid_chq_no = 'OOS',
                                       cop_copdt_code = v_copdt_code,
                                       cop_trans_no = v_tran_no
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'ERROR POST UPDATING PAYMENT VOUCHER...');
                            END;
                        END IF;
                    END LOOP;

                    IF v_in_pyment = 'Y'
                    THEN
                        BEGIN
                            UPDATE gin_comm_pymt_dtls
                               SET copdt_authorized = 'R'
                             WHERE copdt_code = v_copdt_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR UPDATING CONSOLIDATED COMM TRANS ...');
                        END;
                    ELSIF v_in_pyment = 'N'
                    THEN
                        UPDATE gin_comm_pymt_dtls
                           SET copdt_authorized = 'R',
                               copdt_paid_chq_no = 'OOS'
                         WHERE copdt_code = v_copdt_code;
                    END IF;
                END IF;
            END LOOP;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('ERROR MAKING READY COMM. RECORDS...');
        END;
    END;

    /* COMMENTED BY KARANI ON 19/09/2016 FOR CONSOLIDATION
     PROCEDURE makeready_comm_pymnts_new (
     v_tab IN pymnt_prepd_req_tab,
     v_error OUT VARCHAR2,
     vuser IN VARCHAR2,
     v_in_pyment IN VARCHAR2 DEFAULT 'Y',
     v_instant_automated_com IN VARCHAR2 DEFAULT 'N'
     )
     IS
     v_user VARCHAR2 (30)
     := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
     v_user_code NUMBER;
     v_sys_code NUMBER;
     v_tran_status VARCHAR2 (2);
     vfrmname VARCHAR2 (15);
     v_facil_name VARCHAR2 (50);
     v_facil_code NUMBER;
     msg VARCHAR2 (100);
     al_id NUMBER;
     v_vchr_no VARCHAR2 (20);
     v_org_code NUMBER;
     v_cnt NUMBER := 0;
     v_tot_cnt NUMBER := 0;
     v_update VARCHAR2 (5);
     v_agn_con_code VARCHAR2 (10);
     v_iptpecode VARCHAR2 (15);
     v_option VARCHAR2 (15);
     v_date DATE := TRUNC (SYSDATE);
     v_mtran_no NUMBER;
     v_cr_mtran_no NUMBER;
     v_cr_ref_no VARCHAR2 (35);
     v_cr_bal NUMBER;
     v_cr_com NUMBER;
     v_pol_no VARCHAR2 (35);
     v_copdt_code NUMBER;
     v_tran_no NUMBER := 0;
     v_cr_rc_mtran_no NUMBER;
     v_cr_rc_ref_no VARCHAR2 (35);
     v_cr_rc_bal NUMBER;
     v_cr_rc_com NUMBER;
     v_mtran_cr_no NUMBER;
     v_mtran_dr_no NUMBER;
     v_cr_comm NUMBER;
     v_cop_cr_mtran_no NUMBER;
     v_cop_cr_ref_no VARCHAR2 (30);
     v_cr_mtran_bal NUMBER;
     v_cpm_code NUMBER;
     v_cpm_com_min_amt NUMBER;

     CURSOR cur_comm_dtls (v_coppdt_code IN NUMBER)
     IS
     SELECT cop_code, cop_agn_code, cop_brn_code, agn_name, agn_act_code,
     agn_comm_allowed, agn_con_code, cop_cr_mtran_no,
     cop_dr_mtran_no, cop_comm_amt grosscomm,
     cop_net_comm netcomm, act_type_id
     FROM gin_commission_pymts, tqc_agencies, tqc_account_types
     WHERE cop_agn_code = agn_code
     AND agn_act_code = act_code
     AND cop_coppdt_code = v_coppdt_code;
     BEGIN
     IF v_tab.COUNT = 0
     THEN
     v_error := 'NO COMMISSION PAYMENTS TO MAKE READY..';
     RETURN;
     END IF;

     BEGIN
     SELECT usr_code
     INTO v_user_code
     FROM tqc_users
     WHERE usr_username = NVL (v_user, vuser);
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('ERROR FETCHING CURRENT SYSTEM USER <' || v_user);
     END;

     BEGIN
     SELECT TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
     || ggt_trans_no_seq.NEXTVAL
     INTO v_tran_no
     FROM DUAL;

     INSERT INTO gin_gis_transactions
     (ggt_trans_no, ggt_btr_trans_code, ggt_done_by,
     ggt_done_date, ggt_uw_clm_tran, ggt_trans_date,
     ggt_old_tran_no, ggt_effective_date, ggt_status
     )
     VALUES (v_tran_no, 'COM', v_user,
     TRUNC (SYSDATE), 'A', TRUNC (SYSDATE),
     NULL, TRUNC (SYSDATE), NULL
     );
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('Error Creating transaction for auth ...');
     END;
    --raise_error('COUNT=='||v_tab.COUNT);

     BEGIN
     FOR i IN 1 .. v_tab.COUNT
     LOOP
    -- raise_error(v_tab (i).copdt_agn_paymt_mode);
     IF NVL (v_instant_automated_com, 'N') = 'Y' THEN
     IF v_tab (i).coppdt_agn_code IS NOT NULL
     THEN
     SELECT agn_default_cpm_mode
     INTO v_cpm_code
     FROM tqc_agencies
     WHERE agn_code = v_tab (i).coppdt_agn_code;
     END IF;

     IF v_cpm_code IS NOT NULL
     THEN
     BEGIN
     SELECT cpm_com_min_amt
     INTO v_cpm_com_min_amt
     FROM tqc_clm_payment_modes
     WHERE cpm_code = v_cpm_code;
     EXCEPTION
     WHEN NO_DATA_FOUND THEN
     v_cpm_com_min_amt:=0;
     WHEN OTHERS THEN
     v_cpm_com_min_amt:=0;
     END;

    -- IF NVL (v_cpm_com_min_amt, 0) != 0
    -- THEN
    -- IF NVL (v_cpm_com_min_amt, 0) >
    -- NVL (v_tab (i).net_comm, 0)
    -- THEN
    -- SELECT cpm_code
    -- INTO v_cpm_code
    -- FROM tqc_clm_payment_modes
    -- WHERE cpm_sht_desc = 'EFT';
    -- END IF;
    -- END IF;
     END IF;
     ELSE
     SELECT agn_default_cpm_mode
     INTO v_cpm_code
     FROM tqc_agencies
     WHERE agn_code = v_tab (i).coppdt_agn_code;
     END IF;
    --raise_error(v_tab (i).coppdt_agn_code||';'||v_cpm_code);
     BEGIN
     SELECT TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
     || gin_copdt_code_seq.NEXTVAL
     INTO v_copdt_code
     FROM DUAL;

     INSERT INTO gin_comm_pymt_dtls
     (copdt_code, copdt_agn_code,
     copdt_date, copdt_comm_amt, copdt_paid,
     copdt_trans_no, copdt_brn_code,
     copdt_prepared_by, copdt_bru_code,
     copdt_whdtax_amt,
     copdt_drcr,
     copdt_net_comm, copdt_ovride_comm_amt,
     copdt_ovride_whdtax_amt, copdt_cur_code,
     copdt_act_type, copdt_payee, copdt_agn_con_code,
     copdt_authorized, copdt_ovride_net_amt,
     copdt_check, copdt_cpm_code,
     copdt_payable_net_comm,
     copdt_instant_automated_com,copdt_vat_amt
     )
     VALUES (v_copdt_code, v_tab (i).coppdt_agn_code,
     TRUNC (SYSDATE), v_tab (i).comm_amt, 'N',
     v_tran_no, v_tab (i).coppdt_brn_code,
     v_user, NULL,
     v_tab (i).whtax,
     DECODE (SIGN (v_tab (i).comm_amt), 1, 'C', 'D'),
     v_tab (i).net_comm, NULL,
     NULL, v_tab (i).coppdt_cur_code,
     NULL, v_tab (i).agn_name, v_tab (i).agn_con_code,
     'N', NULL,
     'Y', v_cpm_code,
     v_tab (i).net_comm,
     v_instant_automated_com,v_tab (i).COPPDT_VAT_AMT
     );
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ('Error creating commission voucher details....');
     END;

     v_update := 'Y';
     v_cnt := NVL (v_cnt, 0) + 1;

     IF NVL (v_update, 'N') = 'Y'
     THEN
     IF v_in_pyment = 'Y'
     THEN
     BEGIN
     UPDATE gin_comm_pymt_prepd_dtls
     SET coppdt_authorized_by = v_user,
     coppdt_authorized = 'R',
     coppdt_copdt_code = v_copdt_code,
     coppdt_tran_no = v_tran_no
     WHERE coppdt_code = v_tab (i).coppdt_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ('ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...'
     );
     END;
     ELSIF v_in_pyment = 'N'
     THEN
     BEGIN
     UPDATE gin_comm_pymt_prepd_dtls
     SET coppdt_authorized_by = v_user,
     coppdt_authorized = 'R',
     coppdt_paid = 'Y',
     coppdt_paid_chq_no = 'OOS',
     coppdt_copdt_code = v_copdt_code,
     coppdt_tran_no = v_tran_no
     WHERE coppdt_code = v_tab (i).coppdt_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('ERROR POST UPDATING PAYMENT VOUCHER...');
     END;
     END IF;

     FOR cur_com_dtls_rec IN cur_comm_dtls (v_tab (i).coppdt_code)
     LOOP
     IF v_in_pyment = 'Y'
     THEN
     BEGIN
     UPDATE gin_commission_pymts
     SET cop_authorized_by = v_user,
     cop_authorized = 'R',
     cop_copdt_code = v_copdt_code,
     cop_trans_no = v_tran_no
     WHERE cop_code = cur_com_dtls_rec.cop_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ('ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...'
     );
     END;
     ELSIF v_in_pyment = 'N'
     THEN
     BEGIN
     UPDATE gin_commission_pymts
     SET cop_authorized_by = v_user,
     cop_authorized = 'R',
     cop_paid = 'Y',
     cop_paid_chq_no = 'OOS',
     cop_copdt_code = v_copdt_code,
     cop_trans_no = v_tran_no
     WHERE cop_code = cur_com_dtls_rec.cop_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ('ERROR POST UPDATING PAYMENT VOUCHER...');
     END;
     END IF;
     END LOOP;

     IF v_in_pyment = 'Y'
     THEN
     BEGIN
     UPDATE gin_comm_pymt_dtls
     SET copdt_authorized = 'R'
     WHERE copdt_code = v_copdt_code;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error
     ('ERROR UPDATING CONSOLIDATED COMM TRANS ...');
     END;
     ELSIF v_in_pyment = 'N'
     THEN
     UPDATE gin_comm_pymt_dtls
     SET copdt_authorized = 'R',
     copdt_paid_chq_no = 'OOS'
     WHERE copdt_code = v_copdt_code;
     END IF;
     END IF;
     END LOOP;
     EXCEPTION
     WHEN OTHERS
     THEN
     raise_error ('ERROR MAKING READY COMM. RECORDS...');
     END;
     END;
    */



    -- PROCEDURE undomakeready_comm_pymnts (
    -- v_tab IN pymnt_prepd_req_tab,
    -- v_error OUT VARCHAR2,
    -- vuser IN VARCHAR2,
    -- v_in_pyment IN VARCHAR2 DEFAULT 'Y'
    -- )
    -- IS
    -- v_user VARCHAR2 (30)
    -- := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
    -- v_user_code NUMBER;
    -- v_sys_code NUMBER;
    -- v_copdt_code NUMBER;
    -- v_tran_no NUMBER := 0;

    -- CURSOR cur_comm_dtls (v_coppdt_code IN NUMBER)
    -- IS
    -- SELECT cop_code, cop_agn_code, cop_brn_code, agn_name, agn_act_code,
    -- agn_comm_allowed, agn_con_code, cop_cr_mtran_no,
    -- cop_dr_mtran_no, cop_comm_amt grosscomm,
    -- cop_net_comm netcomm, act_type_id
    -- FROM gin_commission_pymts, tqc_agencies, tqc_account_types
    -- WHERE cop_agn_code = agn_code
    -- AND agn_act_code = act_code
    -- AND NVL (cop_authorized, 'N') IN ('R')
    -- AND cop_coppdt_code = v_coppdt_code;
    -- BEGIN
    -- IF v_tab.COUNT = 0
    -- THEN
    -- v_error := 'NO COMMISSION PAYMENTS TO UNDO MAKE READY..';
    -- RETURN;
    -- END IF;

    -- raise_error ('IN');

    -- BEGIN
    -- SELECT usr_code
    -- INTO v_user_code
    -- FROM tqc_users
    -- WHERE usr_username = NVL (v_user, vuser);
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ( 'ERROR FETCHING CURRENT SYSTEM USER <'
    -- || v_user
    -- || '>.......'
    -- );
    -- END;

    -- BEGIN
    -- FOR i IN 1 .. v_tab.COUNT
    -- LOOP
    -- BEGIN
    -- SELECT coppdt_tran_no, coppdt_copdt_code
    -- INTO v_tran_no, v_copdt_code
    -- FROM gin_comm_pymt_prepd_dtls
    -- WHERE coppdt_code = v_tab (i).coppdt_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('ERROR GETTING COMM DETAILS. ...');
    -- END;

    -- BEGIN
    -- DELETE gin_comm_pymt_prepd_dtls
    -- WHERE coppdt_code = v_tab (i).coppdt_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('ERROR UNDO MAKING READY COMM1');
    -- END;

    -- BEGIN
    -- DELETE gin_gis_transactions
    -- WHERE ggt_trans_no = v_tran_no;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('ERROR UNDO MAKING READY COMM2');
    -- END;

    -- BEGIN
    -- DELETE gin_comm_pymt_dtls
    -- WHERE copdt_code = v_copdt_code;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('ERROR UNDO MAKING READY COMM3');
    -- END;

    -- FOR c IN cur_comm_dtls (v_tab (i).coppdt_code)
    -- LOOP
    -- UPDATE gin_commission_pymts
    -- SET cop_authorized = 'N',
    -- cop_authorized_by = v_user,
    -- cop_copdt_code = NULL,
    -- cop_trans_no = NULL
    -- WHERE cop_code = c.cop_code;
    -- END LOOP;
    -- END LOOP;
    -- EXCEPTION
    -- WHEN OTHERS
    -- THEN
    -- raise_error ('ERROR UNDO MAKING READY COMM. RECORDS...');
    -- END;
    -- END;
    PROCEDURE undomakeready_comm_pymnts (
        v_tab         IN     pymnt_prepd_req_tab,
        v_error          OUT VARCHAR2,
        vuser         IN     VARCHAR2,
        v_in_pyment   IN     VARCHAR2 DEFAULT 'Y')
    IS
        v_user                VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        v_user_code           NUMBER;
        v_sys_code            NUMBER;
        v_copdt_code          NUMBER;
        v_tran_no             NUMBER := 0;
        v_coppdt_copdt_code   NUMBER;

        CURSOR cur_comm_dtls (v_coppdt_code IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   cop_comm_amt     grosscomm,
                   cop_net_comm     netcomm,
                   act_type_id
              FROM gin_commission_pymts, tqc_agencies, tqc_account_types
             WHERE     cop_agn_code = agn_code
                   AND agn_act_code = act_code
                   AND NVL (cop_authorized, 'N') IN ('R')
                   AND cop_coppdt_code = v_coppdt_code;
    BEGIN
        IF v_tab.COUNT = 0
        THEN
            v_error := 'NO COMMISSION PAYMENTS TO UNDO MAKE READY..';
            RETURN;
        END IF;

        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = NVL (v_user, vuser);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                       'ERROR FETCHING CURRENT SYSTEM USER <'
                    || v_user
                    || '>.......');
        END;

        BEGIN
            FOR i IN 1 .. v_tab.COUNT
            LOOP
                BEGIN
                    SELECT coppdt_tran_no, coppdt_code
                      INTO v_tran_no, v_copdt_code
                      FROM gin_comm_pymt_prepd_dtls
                     WHERE coppdt_code = v_tab (i).coppdt_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'ERROR GETTING COMM DETAILS. ...'
                            || v_tab (i).coppdt_code);
                END;

                BEGIN
                    DELETE gin_comm_pymt_prepd_dtls
                     WHERE coppdt_code = v_copdt_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('ERROR UNDO MAKING READY COMM1');
                END;

                BEGIN
                    DELETE gin_gis_transactions
                     WHERE ggt_trans_no = v_tran_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('ERROR UNDO MAKING READY COMM2');
                END;

                FOR c IN cur_comm_dtls (v_copdt_code)
                LOOP
                    UPDATE gin_commission_pymts
                       SET cop_authorized = 'N',
                           cop_authorized_by = v_user,
                           cop_copdt_code = NULL,
                           cop_coppdt_code = NULL,
                           cop_trans_no = NULL
                     WHERE cop_code = c.cop_code;
                END LOOP;

                BEGIN
                    DELETE gin_comm_pymt_dtls
                     WHERE copdt_code = v_tab (i).coppdt_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('ERROR UNDO MAKING READY COMM3');
                END;
            END LOOP;
        -- EXCEPTION
        -- WHEN OTHERS
        -- THEN
        -- raise_error ('ERROR UNDO MAKING READY COMM. RECORDS...');
        END;
    END;

    FUNCTION getpaidprem_rcpt_date (v_pol_batch_no   IN NUMBER,
                                    v_agn_code       IN NUMBER,
                                    v_clnt_code      IN NUMBER,
                                    v_value_type     IN VARCHAR2)
        RETURN VARCHAR
    IS
        v_act_code      NUMBER;
        v_client_type   VARCHAR2 (20);
        v_no            VARCHAR2 (100);
        v_client_code   NUMBER;
        v_settled       NUMBER;
        v_cnt           NUMBER;
        v_date          DATE;
        v_act_type      VARCHAR2 (100);
    BEGIN
        IF v_agn_code = 0
        THEN
            v_client_type := 'D';
            v_client_code := v_clnt_code;
        ELSE
            v_client_code := v_agn_code;

            SELECT agn_act_code, act_type_sht_desc
              INTO v_act_code, v_act_type
              FROM tqc_agencies, tqc_account_types
             WHERE agn_code = v_agn_code AND act_code = agn_act_code;

            IF v_act_code IN (2)
            THEN
                v_client_type := 'A';
            ELSIF v_act_code = 3
            THEN
                v_client_type := 'B';
            ELSIF v_act_code = 4
            THEN
                v_client_type := 'FI';
            ELSE
                v_client_type := v_act_type;
            END IF;
        END IF;

        BEGIN
            SELECT SUM (NVL (mtran_settlement, 0))
              INTO v_settled
              FROM gin_master_transactions
             WHERE     mtran_client_code = v_client_code
                   AND mtran_client_type = v_client_type
                   AND mtran_pol_batch_no = v_pol_batch_no;
        -- AND mtran_tran_type != 'SF';
        EXCEPTION
            WHEN OTHERS
            THEN
                v_settled := NULL;
        END;

        BEGIN
            SELECT COUNT (1), MAX (tmap_mtran_no)
              INTO v_cnt, v_no
              FROM (SELECT tmap_mtran_no
                      FROM gin_master_transactions a, gin_tran_mapping
                     WHERE     mtran_dc = 'D'
                           AND mtran_no = tmap_check_mtran_no
                           AND mtran_client_code = v_client_code
                           AND tmap_drcr != 'D'
                           AND mtran_client_type = v_client_type
                           AND mtran_pol_batch_no = v_pol_batch_no
                           AND mtran_tran_type != 'SF'
                    UNION
                    SELECT tmap_mtran_no
                      FROM gin_master_transactions a, gin_tran_mapping
                     WHERE     mtran_dc = 'C'
                           AND mtran_no = tmap_mtran_no
                           AND mtran_client_code = v_client_code
                           AND mtran_client_type = v_client_type
                           AND tmap_drcr != 'D'
                           AND mtran_pol_batch_no = v_pol_batch_no
                           AND mtran_tran_type != 'SF');
        EXCEPTION
            WHEN OTHERS
            THEN
                RETURN (NULL);
        END;

        BEGIN
            SELECT MAX (tmap_posting_date)
              INTO v_date
              FROM (SELECT tmap_posting_date
                      FROM gin_master_transactions a, gin_tran_mapping
                     WHERE     mtran_dc = 'D'
                           AND mtran_no = tmap_check_mtran_no
                           AND mtran_client_code = v_client_code
                           AND mtran_client_type = v_client_type
                           AND tmap_drcr != 'D'
                           AND mtran_pol_batch_no = v_pol_batch_no
                           AND mtran_tran_type != 'SF'
                    UNION
                    SELECT tmap_posting_date
                      FROM gin_master_transactions a, gin_tran_mapping
                     WHERE     mtran_dc = 'C'
                           AND mtran_no = tmap_mtran_no
                           AND mtran_client_code = v_client_code
                           AND mtran_client_type = v_client_type
                           AND tmap_drcr != 'D'
                           AND mtran_pol_batch_no = v_pol_batch_no
                           AND mtran_tran_type != 'SF');
        EXCEPTION
            WHEN OTHERS
            THEN
                RETURN (NULL);
        END;

        IF v_settled = 0
        THEN
            RETURN NULL;
        ELSE
            IF v_cnt = 0
            THEN
                RETURN NULL;
            ELSIF v_cnt = 1
            THEN
                RETURN v_date;
            ELSE
                RETURN ('VARIOUS');
            END IF;
        END IF;
    END;

    PROCEDURE undomakeready_comm_pymnts_new (
        v_tab         IN     pymnt_prepd_req_tab,
        v_error          OUT VARCHAR2,
        vuser         IN     VARCHAR2,
        v_in_pyment   IN     VARCHAR2 DEFAULT 'Y')
    IS
        v_user         VARCHAR2 (30)
            := pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        v_user_code    NUMBER;
        v_sys_code     NUMBER;
        v_copdt_code   NUMBER;
        v_tran_no      NUMBER := 0;

        CURSOR cur_comm_dtls (v_coppdt_code IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   cop_comm_amt     grosscomm,
                   cop_net_comm     netcomm,
                   act_type_id
              FROM gin_commission_pymts, tqc_agencies, tqc_account_types
             WHERE     cop_agn_code = agn_code
                   AND agn_act_code = act_code
                   AND NVL (cop_authorized, 'N') IN ('R')
                   AND cop_coppdt_code = v_coppdt_code;
    BEGIN
        IF v_tab.COUNT = 0
        THEN
            v_error := 'NO COMMISSION PAYMENTS TO MAKE READY..';
            RETURN;
        END IF;

        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = NVL (v_user, vuser);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                       'ERROR FETCHING CURRENT SYSTEM USER <'
                    || v_user
                    || '>.......');
        END;

        BEGIN
            FOR i IN 1 .. v_tab.COUNT
            LOOP
                BEGIN
                    SELECT coppdt_tran_no, coppdt_copdt_code
                      INTO v_tran_no, v_copdt_code
                      FROM gin_comm_pymt_prepd_dtls
                     WHERE coppdt_code = v_tab (i).coppdt_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                END;

                BEGIN
                    UPDATE gin_comm_pymt_prepd_dtls
                       SET coppdt_authorized_by = NULL,
                           coppdt_authorized = 'N',
                           coppdt_copdt_code = NULL,
                           coppdt_tran_no = NULL
                     WHERE coppdt_code = v_tab (i).coppdt_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error Creating transaction for auth ...');
                END;

                BEGIN
                    DELETE gin_gis_transactions
                     WHERE ggt_trans_no = v_tran_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error Creating transaction for auth ...');
                END;

                BEGIN
                    DELETE gin_comm_pymt_dtls
                     WHERE copdt_code = v_copdt_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error creating commission voucher details....');
                END;
            --raise_error();
            /*FOR cur_com_dtls_rec IN cur_comm_dtls (v_tab (i).coppdt_code)
            LOOP
            BEGIN

            UPDATE gin_commission_pymts
            SET cop_authorized_by = NULL,
            cop_authorized = 'N',
            cop_copdt_code = NULL,
            cop_trans_no = NULL
            WHERE cop_code = cur_com_dtls_rec.cop_code;

            EXCEPTION
            WHEN OTHERS
            THEN
            raise_error
            ('ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...'
            );
            END;
            END LOOP; */



            END LOOP;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('ERROR MAKING READY COMM. RECORDS...');
        END;
    END;

    FUNCTION getpaidprem3 (v_pol_batch_no   IN NUMBER,
                           v_agn_code       IN NUMBER,
                           v_clnt_code      IN NUMBER,
                           v_value_type     IN VARCHAR2)
        RETURN NUMBER
    IS
        v_settled       gin_master_transactions.mtran_amount%TYPE;
        v_balance       gin_master_transactions.mtran_amount%TYPE;
        v_outs          gin_master_transactions.mtran_amount%TYPE;
        v_act_code      NUMBER;
        v_client_type   VARCHAR2 (5);
        v_client_code   NUMBER;
        v_amount        NUMBER;
    BEGIN
        IF v_agn_code = 0
        THEN
            v_client_type := 'D';
            v_client_code := v_clnt_code;
        ELSE
            v_client_code := v_agn_code;

            SELECT agn_act_code
              INTO v_act_code
              FROM tqc_agencies
             WHERE agn_code = v_agn_code;

            IF v_act_code IN (2, 9, 10                             /*, 16,32*/
                                      )
            THEN
                v_client_type := 'A';
            ELSIF v_act_code = 32
            THEN
                v_client_type := 'DI';
            ELSIF v_act_code = 16
            THEN
                v_client_type := 'IA';
            ELSIF v_act_code = 3
            THEN
                v_client_type := 'B';
            ELSIF v_act_code = 4
            THEN
                v_client_type := 'FI';
            ELSIF v_act_code = 5
            THEN
                v_client_type := 'I';
            ELSIF v_act_code = 6
            THEN
                v_client_type := 'R';
            ELSIF v_act_code = 7
            THEN
                v_client_type := 'FO';
            END IF;
        END IF;

        BEGIN
            SELECT SUM (NVL (mtran_settlement, 0)),
                   SUM (NVL (mtran_balance, 0)),
                   SUM (NVL (mtran_amount, 0)),
                     SUM (NVL (mtran_balance, 0))
                   - SUM (NVL (mtran_whtx, 0))
                   - SUM (NVL (mtran_comm_levy_amt, 0))
                   - SUM (NVL (mtran_commission, 0))
              INTO v_settled,
                   v_balance,
                   v_amount,
                   v_outs
              FROM gin_master_transactions
             WHERE     mtran_client_code = v_client_code
                   AND mtran_client_type = v_client_type
                   AND mtran_pol_batch_no = v_pol_batch_no
                   AND mtran_tran_type NOT IN ('SF', 'RC', 'CN');
        EXCEPTION
            WHEN OTHERS
            THEN
                v_settled := NULL;
                v_balance := NULL;
                v_outs := NULL;
        END;

        IF v_value_type = 'B'
        THEN
            RETURN v_balance;
        ELSIF v_value_type = 'G'
        THEN
            RETURN v_outs;
        ELSIF v_value_type = 'S'
        THEN
            RETURN v_settled;
        ELSIF v_value_type = 'A'
        THEN
            RETURN v_amount;
        ELSE
            -- IF v_balance=0 THEN
            -- RETURN v_amount-v_settled;
            -- ELSE
            RETURN v_balance;
        -- END IF;
        END IF;
    END;

    PROCEDURE cancel_comm (v_cr_mtran_no   IN NUMBER,
                           v_cr_ref_no     IN VARCHAR2,
                           v_dr_mtran_no   IN NUMBER,
                           v_dr_ref_no     IN VARCHAR2)
    IS
        CURSOR cur_comm IS
            SELECT mtran_no,
                   cop_cr_mtran_no,
                   cop_comm_amt,
                   cop_whdtax_amt,
                   cop_net_comm,
                   mtran_other_ref,
                   mtran_control_acc,
                   mtran_client_type,
                   mtran_client_code,
                   mtran_client_polcy_no,
                   mtran_copdt_code,
                   mtran_ggt_tran_no,
                   mtran_cur_code,
                   mtran_cur_symbol,
                   mtran_brn_code,
                   mtran_brn_sht_desc,
                   mtran_posted_by,
                   mtran_comm_levy_amt
              FROM gin_commission_pymts,
                   (  SELECT mtran_no,
                             tmap_mtran_no,
                             mtran_other_ref,
                             mtran_control_acc,
                             mtran_client_type,
                             mtran_client_code,
                             mtran_client_polcy_no,
                             mtran_copdt_code,
                             mtran_ggt_tran_no,
                             mtran_cur_code,
                             mtran_cur_symbol,
                             mtran_brn_code,
                             mtran_brn_sht_desc,
                             mtran_posted_by,
                             mtran_comm_levy_amt
                        FROM gin_tran_mapping, gin_master_transactions
                       WHERE     tmap_mtran_no = v_cr_mtran_no
                             AND mtran_no = tmap_check_mtran_no
                             AND mtran_tran_type = 'COM'
                             AND TMAP_DRCR = 'C'
                             AND mtran_dc = 'D'
                    GROUP BY mtran_no,
                             mtran_other_ref,
                             mtran_control_acc,
                             mtran_client_type,
                             mtran_client_code,
                             mtran_client_polcy_no,
                             mtran_copdt_code,
                             mtran_ggt_tran_no,
                             mtran_cur_code,
                             mtran_cur_symbol,
                             mtran_brn_code,
                             mtran_brn_sht_desc,
                             mtran_posted_by,
                             mtran_comm_levy_amt,
                             tmap_mtran_no)
             WHERE     cop_cr_mtran_no = v_cr_mtran_no
                   AND cop_dr_mtran_no = v_dr_mtran_no
                   AND cop_cr_mtran_no = tmap_mtran_no
                   AND NVL (cop_withdrawn, 'N') != 'Y'
                   AND NVL (cop_authorized, 'N') = 'Y';

        v_dr_mtran_ref_no   VARCHAR2 (25);
        v_mtran_no          NUMBER;
        v_tmap_no           NUMBER;
        v_cr_bal            NUMBER := 0;
        v_cr_com            NUMBER := 0;
        v_comm_amt          NUMBER := 0;
        v_whdtax_amt        NUMBER := 0;
        v_net_comm          NUMBER := 0;
        v_user              VARCHAR2 (60)
            := pkg_global_vars.get_pvarchar2 ('pkg_global_vars.pvg_username');
    BEGIN
        FOR c IN cur_comm
        LOOP
            BEGIN
                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || gin_mtran_no_seq.NEXTVAL)
                  INTO v_mtran_no
                  FROM DUAL;

                -- RAISE_ERROR('v_net_comm'||v_net_comm||'v_cr_mtran_no'||v_cr_mtran_no||'v_dr_mtran_no'||v_dr_mtran_no);
                INSERT INTO gin_master_transactions (mtran_no,
                                                     mtran_doc_date,
                                                     mtran_date,
                                                     mtran_ref_no,
                                                     mtran_other_ref,
                                                     mtran_tran_type,
                                                     mtran_dc,
                                                     mtran_control_acc,
                                                     mtran_client_type,
                                                     mtran_client_code,
                                                     mtran_amount,
                                                     mtran_balance,
                                                     mtran_authorised,
                                                     mtran_net_amt,
                                                     mtran_posting_date,
                                                     mtran_ggt_tran_no,
                                                     mtran_prp_code,
                                                     mtran_btr_trans_code,
                                                     mtran_origin,
                                                     mtran_cur_code,
                                                     mtran_cur_symbol,
                                                     mtran_brn_code,
                                                     mtran_brn_sht_desc,
                                                     mtran_posted_by,
                                                     mtran_whtx,
                                                     mtran_client_polcy_no,
                                                     mtran_copdt_code,
                                                     mtran_comm_levy_amt)
                     VALUES (v_mtran_no,
                             TRUNC (SYSDATE),
                             TRUNC (SYSDATE),
                             'COMMISSION/CN',
                             c.mtran_other_ref,
                             --cur_comm_rec.cop_code,
                             'COM',
                             'C',
                             c.mtran_control_acc,
                             c.mtran_client_type,
                             c.mtran_client_code,               --acc sht desc
                             -1 * ROUND (ABS (c.cop_comm_amt)),
                             -1 * ROUND (ABS (NVL (c.cop_net_comm, 0))),
                             'Y',
                             -1 * ROUND (ABS (NVL (c.cop_net_comm, 0))),
                             ---ABS(cur_comm_rec.COMM_AMT),
                             TRUNC (SYSDATE),
                             c.mtran_ggt_tran_no,
                             NULL,
                             'COM',
                             'U',
                             c.mtran_cur_code,
                             c.mtran_cur_symbol,
                             c.mtran_brn_code,
                             c.mtran_brn_sht_desc,
                             c.mtran_posted_by,
                             ROUND (ABS (NVL (c.cop_whdtax_amt, 0))),
                             c.mtran_client_polcy_no,
                             c.mtran_copdt_code,
                             -1 * c.mtran_comm_levy_amt);

                v_cr_bal := v_net_comm;

                gis_accounts_utilities.knock_off_transactions (
                    v_mtran_no,
                    'COMMISSION',
                    c.mtran_no,
                    'Y',
                    TRUNC (SYSDATE),
                    c.cop_net_comm,
                    v_cr_com,
                    c.cop_net_comm);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR UPDATING SUBSIDIARY LEDGER RECORD...');
            END;
        END LOOP;
    END;

    PROCEDURE auth_comm_pymnts (v_cr_mtran_no   IN NUMBER,
                                v_dr_mtran_no   IN NUMBER,
                                v_agn_code      IN NUMBER,
                                v_post_option   IN VARCHAR2,
                                v_in_pyment     IN VARCHAR2 DEFAULT 'N',
                                v_user          IN VARCHAR2,
                                v_inc_whtx      IN VARCHAR2)
    IS
        v_user_code               NUMBER;
        v_sys_code                NUMBER;
        v_tran_status             VARCHAR2 (2);
        vfrmname                  VARCHAR2 (15);
        v_facil_name              VARCHAR2 (50);
        v_facil_code              NUMBER;
        msg                       VARCHAR2 (100);
        al_id                     NUMBER;
        v_vchr_no                 VARCHAR2 (20);
        v_org_code                NUMBER;
        v_cnt                     NUMBER := 0;
        v_tot_cnt                 NUMBER := 0;
        v_update                  VARCHAR2 (5);
        v_tran_sign               NUMBER;
        v_agn_con_code            VARCHAR2 (10);
        v_iptpecode               VARCHAR2 (15);
        v_option                  VARCHAR2 (15);
        v_date                    DATE := TRUNC (SYSDATE);
        v_mtran_no                NUMBER;
        v_cr_ref_no               VARCHAR2 (35);
        v_cr_bal                  NUMBER;
        v_cr_com                  NUMBER;
        v_pol_no                  VARCHAR2 (35);
        v_copdt_code              NUMBER;
        v_tran_no                 NUMBER := 0;
        v_cr_rc_mtran_no          NUMBER;
        v_gltran_tran_no          NUMBER;
        v_cr_rc_ref_no            VARCHAR2 (35);
        v_cr_rc_bal               NUMBER;
        v_cr_rc_com               NUMBER;
        v_mtran_cr_no             NUMBER;
        v_mtran_dr_no             NUMBER;
        v_cr_comm                 NUMBER;
        v_cop_cr_mtran_no         NUMBER;
        v_cop_cr_ref_no           VARCHAR2 (30);
        v_cr_mtran_bal            NUMBER;
        v_webserv_param           gin_parameters.param_value%TYPE;
        v_webserv_address_param   gin_parameters.param_value%TYPE;
        v_req_result              VARCHAR2 (2000);
        v_req_result1             VARCHAR2 (2000);
        vdisplaynumber            VARCHAR2 (30);
        vyear                     VARCHAR2 (30);
        vmonth                    VARCHAR2 (30);
        vpaymenttype              VARCHAR2 (30);
        vamount                   VARCHAR2 (30);
        vwhtax                    VARCHAR2 (30);
        v_trnt_code               VARCHAR2 (30);
        v_trnt_gl_code            VARCHAR2 (30);
        v_trnt_contra_gl_code     VARCHAR2 (30);
        v_drcr                    VARCHAR2 (5);
        v_exch_rate               NUMBER;

        CURSOR cur_comm IS
              SELECT                                              ---cop_code,
                     cop_agn_code,
                     cop_brn_code,
                     NVL (agn_payee, agn_name)                 agn_name,
                     agn_payee,
                     agn_act_code,
                     agn_comm_allowed,
                     agn_con_code,
                     agn_sht_desc,
                     act_type_id,
                     cop_cur_code,
                     act_account_type,
                     SUM (NVL (cop_comm_amt, 0))               comm_amt,
                     SUM (NVL (cop_whdtax_amt, 0))             whtax,
                     SUM (NVL (cop_ovride_comm_amt, 0))        ovrde_comm,
                     SUM (NVL (cop_ovride_whdtax_amt, 0))      ovrde_whtax,
                       SUM (NVL (cop_comm_amt, 0))
                     + SUM (
                             DECODE (SIGN (NVL (cop_comm_amt, 0)), -1, 1, -1)
                           * ABS (NVL (cop_whdtax_amt, 0)))    net_comm,
                     MAX (cop_dr_mtran_no)                     cop_dr_mtran_no,
                     COUNT (1)                                 cnt,
                     COP_CR_REF_NO                             rcrefno,
                     COP_DR_REF_NO                             dbrefno
                FROM gin_commission_pymts, tqc_agencies, tqc_account_types
               WHERE     cop_agn_code = agn_code
                     AND agn_act_code = act_code
                     AND NVL (cop_authorized, 'N') != 'Y'
                     AND NVL (cop_paid, 'N') != 'Y'
                     -- AND NVL (cop_checked, 'N') = 'Y'
                     AND COP_AGN_CODE = NVL (v_agn_code, COP_AGN_CODE)
                     AND COP_CR_MTRAN_NO = v_cr_mtran_no
                     AND COP_DR_MTRAN_NO = NVL (v_dr_mtran_no, COP_DR_MTRAN_NO)
              HAVING   SUM (NVL (cop_comm_amt, 0))
                     + SUM (NVL (cop_whdtax_amt, 0)) !=
                     0
            GROUP BY cop_agn_code,
                     cop_brn_code,
                     agn_name,
                     agn_payee,
                     agn_act_code,
                     agn_comm_allowed,
                     act_account_type,
                     agn_con_code,
                     agn_sht_desc,
                     act_type_id,
                     cop_cur_code                                          --,
                                 -- cop_dr_mtran_no
                                 ;

        CURSOR cur_comm_dtls (v_agn_code IN NUMBER, v_brn_code IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   cop_comm_amt     grosscomm,
                   cop_net_comm     netcomm,
                   act_type_id
              FROM gin_commission_pymts, tqc_agencies, tqc_account_types
             WHERE     cop_agn_code = agn_code
                   AND agn_act_code = act_code
                   AND NVL (cop_authorized, 'N') != 'Y'
                   AND NVL (cop_paid, 'N') != 'Y'
                   -- AND NVL (cop_checked, 'N') = 'Y'
                   AND cop_agn_code = NVL (v_agn_code, cop_agn_code)
                   AND COP_CR_MTRAN_NO = v_cr_mtran_no
                   AND COP_DR_MTRAN_NO = NVL (v_dr_mtran_no, COP_DR_MTRAN_NO)
                   AND cop_brn_code = v_brn_code;
    BEGIN
        --raise_error( 'v_cr_mtran_no'||v_cr_mtran_no||'v_dr_mtran_no'||v_dr_mtran_no||'v_agn_code'||v_agn_code||
        -- 'v_post_option'||v_post_option||'v_in_pyment'||v_in_pyment||'v_inc_whtx'||v_inc_whtx);
        BEGIN
            SELECT COUNT (1)
              INTO v_tot_cnt
              FROM gin_commission_pymts
             WHERE     NVL (cop_authorized, 'N') != 'Y'
                   AND NVL (cop_paid, 'N') != 'Y'
                   -- AND NVL (cop_checked, 'N') = 'Y'
                   AND COP_CR_MTRAN_NO = v_cr_mtran_no
                   AND COP_DR_MTRAN_NO = NVL (v_dr_mtran_no, COP_DR_MTRAN_NO)
                   AND cop_agn_code = NVL (v_agn_code, cop_agn_code);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('UNABLE TO COUNT RECORDS...');
        END;

        IF NVL (v_tot_cnt, 0) = 0
        THEN
            raise_error (
                'NO COMMISSION PAYMENTS TO AUTHORISE..' || v_cr_mtran_no);
        END IF;

        BEGIN
            SELECT usr_code
              INTO v_user_code
              FROM tqc_users
             WHERE usr_username = v_user;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                       'ERROR FETCHING CURRENT SYSTEM USER <'
                    || v_user
                    || '>.......');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'WEBSERV_COMM_POSTING_HRMS_APPLIC')
              INTO v_webserv_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_webserv_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching WEBSERV_COMM_POSTING_HRMS_APPLIC parameter...');
        END;

        IF NVL (v_webserv_param, 'N') = 'Y'
        THEN
            BEGIN
                SELECT gin_parameters_pkg.get_param_varchar (
                           'WEBSERVICES_ADDRESS')
                  INTO v_webserv_address_param
                  FROM DUAL;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error fetching WEBSERVICES_ADDRESS parameter...');
            END;
        END IF;

        BEGIN
            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                   || ggt_trans_no_seq.NEXTVAL
              INTO v_tran_no
              FROM DUAL;

            INSERT INTO gin_gis_transactions (ggt_trans_no,
                                              ggt_btr_trans_code,
                                              ggt_done_by,
                                              ggt_done_date,
                                              ggt_uw_clm_tran,
                                              ggt_trans_date,
                                              ggt_old_tran_no,
                                              ggt_effective_date,
                                              ggt_status)
                 VALUES (v_tran_no,
                         'COM',
                         v_user,
                         TRUNC (SYSDATE),
                         'A',
                         TRUNC (SYSDATE),
                         NULL,
                         TRUNC (SYSDATE),
                         NULL);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error Creating transaction for auth ...');
        END;

        BEGIN
            FOR cur_comm_rec IN cur_comm
            LOOP
                BEGIN
                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                           || gin_copdt_code_seq.NEXTVAL
                      INTO v_copdt_code
                      FROM DUAL;

                    INSERT INTO gin_comm_pymt_dtls (copdt_code,
                                                    copdt_agn_code,
                                                    copdt_date,
                                                    copdt_comm_amt,
                                                    copdt_paid,
                                                    copdt_trans_no,
                                                    copdt_brn_code,
                                                    copdt_prepared_by,
                                                    copdt_bru_code,
                                                    copdt_whdtax_amt,
                                                    copdt_drcr,
                                                    copdt_net_comm,
                                                    copdt_ovride_comm_amt,
                                                    copdt_ovride_whdtax_amt,
                                                    copdt_cur_code,
                                                    copdt_act_type,
                                                    copdt_payee,
                                                    copdt_agn_con_code,
                                                    copdt_authorized,
                                                    copdt_ovride_net_amt)
                             VALUES (
                                 v_copdt_code,
                                 cur_comm_rec.cop_agn_code,
                                 TRUNC (SYSDATE),
                                 (cur_comm_rec.comm_amt),
                                 'N',
                                 v_tran_no,
                                 cur_comm_rec.cop_brn_code,
                                 v_user,
                                 NULL,
                                 (cur_comm_rec.whtax),
                                 DECODE (SIGN (cur_comm_rec.comm_amt),
                                         1, 'C',
                                         'D'),
                                 (cur_comm_rec.net_comm),
                                 NULL,
                                 NULL,
                                 cur_comm_rec.cop_cur_code,
                                 cur_comm_rec.act_type_id,
                                 cur_comm_rec.agn_name,
                                 cur_comm_rec.agn_con_code,
                                 'N',
                                 NULL);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error creating commission voucher details....');
                END;

                IF v_in_pyment = 'Y'
                THEN
                    IF v_post_option IN ('CHQ',
                                         'EFT',
                                         'RTGS',
                                         'MOB')
                    THEN
                        gin_interfaces_pkg.prc_com_pymt (v_copdt_code,
                                                         v_user,
                                                         v_post_option);
                    ELSIF v_post_option IN ('CR')
                    THEN
                        BEGIN
                            SELECT MTRAN_CUR_RATE
                              INTO v_exch_rate
                              FROM GIN_MASTER_TRANSACTIONS
                             WHERE MTRAN_NO = v_dr_mtran_no;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                NULL;
                        END;

                        BEGIN
                            BEGIN
                                SELECT TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY')
                                           || gin_mtran_no_seq.NEXTVAL)
                                  INTO v_mtran_cr_no
                                  FROM DUAL;

                                INSERT INTO gin_master_transactions --FOR DEBIT TRANSACTION
                                                                    (
                                                mtran_no,
                                                mtran_doc_date,
                                                mtran_date,
                                                mtran_ref_no,
                                                mtran_other_ref,
                                                mtran_tran_type,
                                                mtran_dc,
                                                mtran_control_acc,
                                                mtran_client_type,
                                                mtran_client_code,
                                                mtran_amount,
                                                mtran_balance,
                                                mtran_authorised,
                                                mtran_net_amt,
                                                mtran_posting_date,
                                                mtran_ggt_tran_no,
                                                mtran_prp_code,
                                                mtran_btr_trans_code,
                                                mtran_origin,
                                                mtran_cur_code,
                                                mtran_cur_symbol,
                                                mtran_brn_code,
                                                mtran_brn_sht_desc,
                                                mtran_posted_by,
                                                mtran_whtx,
                                                mtran_client_polcy_no,
                                                mtran_copdt_code,
                                                mtran_narrations,
                                                MTRAN_CUR_RATE)
                                         VALUES (
                                             v_mtran_cr_no,
                                             TRUNC (SYSDATE),
                                             TRUNC (SYSDATE),
                                             'COM CRNOTE',
                                             v_copdt_code,
                                             'CRP',
                                             'C',
                                             cur_comm_rec.agn_sht_desc,
                                             cur_comm_rec.act_type_id,
                                             cur_comm_rec.cop_agn_code,
                                             -ABS (
                                                  NVL (cur_comm_rec.net_comm,
                                                       0)),
                                             -ABS (
                                                  NVL (cur_comm_rec.net_comm,
                                                       0)),
                                             'N',
                                             -ABS (
                                                  NVL (cur_comm_rec.net_comm,
                                                       0)),
                                             TRUNC (SYSDATE),
                                             NULL,
                                             NULL,
                                             'CRP',
                                             'U',
                                             cur_comm_rec.cop_cur_code,
                                             tqc_interfaces_pkg.currencysymbol (
                                                 cur_comm_rec.cop_cur_code),
                                             cur_comm_rec.cop_brn_code,
                                             fms_interfaces_pkg.brh_name (
                                                 cur_comm_rec.cop_brn_code,
                                                 'S'),
                                             v_user,
                                             NULL,
                                             v_pol_no,
                                             v_copdt_code,
                                             'COMM PAID BY CREDIT NOTE',
                                             v_exch_rate);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                           'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
                                        || v_mtran_no);
                            END;

                            BEGIN
                                SELECT TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY')
                                           || gin_mtran_no_seq.NEXTVAL)
                                  INTO v_mtran_dr_no
                                  FROM DUAL;

                                INSERT INTO gin_master_transactions --FOR CREDIT TRANSACTION
                                                                    (
                                                mtran_no,
                                                mtran_doc_date,
                                                mtran_date,
                                                mtran_ref_no,
                                                mtran_other_ref,
                                                mtran_tran_type,
                                                mtran_dc,
                                                mtran_control_acc,
                                                mtran_client_type,
                                                mtran_client_code,
                                                mtran_amount,
                                                mtran_balance,
                                                mtran_authorised,
                                                mtran_net_amt,
                                                mtran_posting_date,
                                                mtran_ggt_tran_no,
                                                mtran_prp_code,
                                                mtran_btr_trans_code,
                                                mtran_origin,
                                                mtran_cur_code,
                                                mtran_cur_symbol,
                                                mtran_brn_code,
                                                mtran_brn_sht_desc,
                                                mtran_posted_by,
                                                mtran_whtx,
                                                mtran_client_polcy_no,
                                                mtran_copdt_code,
                                                mtran_narrations,
                                                mtran_date_authorized,
                                                mtran_authorised_by,
                                                MTRAN_CUR_RATE)
                                         VALUES (
                                             v_mtran_dr_no,
                                             TRUNC (SYSDATE),
                                             TRUNC (SYSDATE),
                                             'COM CRNOTE',
                                             v_copdt_code,
                                             'CRP',
                                             'D',
                                             cur_comm_rec.agn_sht_desc,
                                             cur_comm_rec.act_type_id,
                                             cur_comm_rec.cop_agn_code,
                                             ABS (
                                                 NVL (cur_comm_rec.comm_amt,
                                                      0)),
                                             ABS (
                                                 NVL (cur_comm_rec.net_comm,
                                                      0)),
                                             'N',
                                             ABS (
                                                 NVL (cur_comm_rec.net_comm,
                                                      0)),
                                             TRUNC (SYSDATE),
                                             NULL,
                                             NULL,
                                             'CRP',
                                             'U',
                                             cur_comm_rec.cop_cur_code,
                                             tqc_interfaces_pkg.currencysymbol (
                                                 cur_comm_rec.cop_cur_code),
                                             cur_comm_rec.cop_brn_code,
                                             fms_interfaces_pkg.brh_name (
                                                 cur_comm_rec.cop_brn_code,
                                                 'S'),
                                             v_user,
                                             -ABS (cur_comm_rec.whtax),
                                             v_pol_no,
                                             v_copdt_code,
                                             'COMM PAID BY CREDIT NOTE',
                                             TRUNC (SYSDATE),
                                             v_user,
                                             v_exch_rate);
                            END;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error ('Error updating transaction...');
                        END;
                    ELSIF v_post_option IN ('HRMS')
                    THEN
                        IF gin_interfaces_pkg.interface_enabled ('HRMS') =
                           'Y'
                        THEN
                            IF NVL (v_webserv_param, 'N') = 'Y'
                            THEN
                                IF v_webserv_address_param IS NOT NULL
                                THEN
                                    v_agn_con_code :=
                                        cur_comm_rec.agn_con_code;
                                    v_update := 'N';

                                    IF v_agn_con_code IS NULL
                                    THEN
                                        raise_error (
                                               'PAYROLL MAPPING FOR '
                                            || cur_comm_rec.act_account_type
                                            || ' '
                                            || cur_comm_rec.agn_name
                                            || ':'
                                            || cur_comm_rec.agn_sht_desc
                                            || ':'
                                            || cur_comm_rec.act_type_id
                                            || ' NOT BE DONE..');
                                    ELSE
                                        BEGIN
                                            IF NVL (cur_comm_rec.net_comm, 0) <=
                                               0
                                            THEN
                                                raise_error (
                                                       'INVALID COMM AMOUNT OF '
                                                    || NVL (
                                                           cur_comm_rec.net_comm,
                                                           0));
                                            END IF;

                                            -- SELECT DECODE (SIGN (NVL (cur_comm_rec.comm_amt, 0)),
                                            -- -1, 'GIMS-COMMC',
                                            -- 'GIMS-COMM'
                                            -- )
                                            -- INTO v_iptpecode
                                            -- FROM DUAL;

                                            vdisplaynumber :=
                                                TO_CHAR (v_copdt_code);
                                            vyear :=
                                                TO_CHAR (SYSDATE, 'RRRR');
                                            vmonth := TO_CHAR (SYSDATE, 'MM');
                                            vpaymenttype := 'GIS-COMM';
                                            vamount :=
                                                TO_CHAR (
                                                    cur_comm_rec.comm_amt);
                                            vwhtax :=
                                                TO_CHAR (cur_comm_rec.whtax);


                                            v_req_result :=
                                                UTL_HTTP.request (
                                                       v_webserv_address_param
                                                    || ':63081/cmPayItemInfo?displayNumber='
                                                    || vdisplayNumber
                                                    || '?year='
                                                    || vyear
                                                    || '?month='
                                                    || vmonth
                                                    || '?paymentType='
                                                    || vpaymenttype
                                                    || '?amount='
                                                    || vamount);

                                            v_req_result1 :=
                                                UTL_HTTP.request (
                                                       v_webserv_address_param
                                                    || ':63081/cmPayItemInfo?displayNumber='
                                                    || vdisplayNumber
                                                    || '?year='
                                                    || vyear
                                                    || '?month='
                                                    || vmonth
                                                    || '?paymentType='
                                                    || vpaymenttype
                                                    || '?amount='
                                                    || vwhtax);
                                        EXCEPTION
                                            WHEN OTHERS
                                            THEN
                                                raise_error (
                                                    'ERROR POSTING TO HR.');
                                        END;
                                    END IF;
                                END IF;
                            END IF;
                        ELSE
                            raise_error (
                                'ERROR: POSTING TO HRMS WEB SERVISE NOT ENABLED');
                        END IF;
                    ELSE
                        raise_error ('ERROR: HRMS INTERFACE NOT ENABLED');
                    END IF;
                END IF;

                v_update := 'Y';
                v_cnt := NVL (v_cnt, 0) + 1;


                IF     (NVL (v_update, 'N') = 'Y' AND v_in_pyment = 'N')
                   AND v_post_option NOT IN ('CR')
                THEN
                    IF cur_comm_rec.cnt = 1
                    THEN
                        BEGIN
                            SELECT mtran_client_polcy_no
                              INTO v_pol_no
                              FROM gin_master_transactions
                             WHERE mtran_no = cur_comm_rec.cop_dr_mtran_no;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                NULL;
                        END;
                    ELSE
                        v_pol_no := 'VARIOUS';
                    END IF;

                    BEGIN
                        SELECT TO_NUMBER (
                                      TO_CHAR (SYSDATE, 'YYYY')
                                   || gin_mtran_no_seq.NEXTVAL)
                          INTO v_mtran_no
                          FROM DUAL;



                        IF SIGN (cur_comm_rec.comm_amt) = -1
                        THEN
                            v_drcr := 'C';
                        ELSE
                            v_drcr := 'D';
                        END IF;

                        BEGIN
                            SELECT MTRAN_CUR_RATE
                              INTO v_exch_rate
                              FROM GIN_MASTER_TRANSACTIONS
                             WHERE MTRAN_NO = v_dr_mtran_no;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                NULL;
                        END;

                        -- RAISE_ERROR('comm_amt'|| ABS (cur_comm_rec.comm_amt)||'net_comm'||cur_comm_rec.net_comm||'whtax'||cur_comm_rec.whtax||'v_drcr'||v_drcr);
                        INSERT INTO gin_master_transactions (
                                        mtran_no,
                                        mtran_doc_date,
                                        mtran_date,
                                        mtran_ref_no,
                                        mtran_other_ref,
                                        mtran_tran_type,
                                        mtran_dc,
                                        mtran_control_acc,
                                        mtran_client_type,
                                        mtran_client_code,
                                        mtran_amount,
                                        mtran_balance,
                                        mtran_authorised,
                                        mtran_net_amt,
                                        mtran_posting_date,
                                        mtran_ggt_tran_no,
                                        mtran_prp_code,
                                        mtran_btr_trans_code,
                                        mtran_origin,
                                        mtran_cur_code,
                                        mtran_cur_symbol,
                                        mtran_brn_code,
                                        mtran_brn_sht_desc,
                                        mtran_posted_by,
                                        mtran_whtx,
                                        mtran_client_polcy_no,
                                        mtran_copdt_code,
                                        MTRAN_CUR_RATE)
                                 VALUES (
                                     v_mtran_no,
                                     TRUNC (SYSDATE),
                                     TRUNC (SYSDATE),
                                     'COMMISSION',
                                     v_copdt_code,
                                     --cur_comm_rec.cop_code,
                                     'COM',
                                     v_drcr,
                                     cur_comm_rec.agn_sht_desc,
                                     cur_comm_rec.act_type_id,
                                     cur_comm_rec.cop_agn_code, --acc sht desc
                                       ABS (cur_comm_rec.comm_amt)
                                     * DECODE (v_drcr, 'C', -1, 1),
                                       ABS (cur_comm_rec.net_comm)
                                     * DECODE (v_drcr, 'C', -1, 1),
                                     'Y',
                                       ABS (cur_comm_rec.net_comm)
                                     * DECODE (v_drcr, 'C', -1, 1),
                                     ---ABS(cur_comm_rec.COMM_AMT),
                                     TRUNC (SYSDATE),
                                     v_tran_no,
                                     NULL,
                                     'COM',
                                     'U',
                                     cur_comm_rec.cop_cur_code,
                                     tqc_interfaces_pkg.currencysymbol (
                                         cur_comm_rec.cop_cur_code),
                                     cur_comm_rec.cop_brn_code,
                                     fms_interfaces_pkg.brh_name (
                                         cur_comm_rec.cop_brn_code,
                                         'S'),
                                     v_user,
                                       ABS (cur_comm_rec.whtax)
                                     * DECODE (v_drcr, 'C', 1, -1),
                                     v_pol_no,
                                     v_copdt_code,
                                     v_exch_rate);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR UPDATING SUBSIDIARY LEDGER RECORD...');
                    END;
                END IF;

                IF NVL (v_update, 'N') = 'Y'
                THEN
                    FOR cur_com_dtls_rec
                        IN cur_comm_dtls (cur_comm_rec.cop_agn_code,
                                          cur_comm_rec.cop_brn_code)
                    LOOP
                        IF v_in_pyment = 'Y'
                        THEN
                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'Y',
                                       cop_authorize_date = TRUNC (SYSDATE),
                                       cop_copdt_code = v_copdt_code,
                                       cop_trans_no = v_tran_no
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                            END;
                        ELSIF v_in_pyment = 'N'
                        THEN
                            IF cur_comm_rec.net_comm <> 0
                            THEN
                                SELECT    TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY'))
                                       || gin_gltran_no_seq.NEXTVAL
                                  INTO v_gltran_tran_no
                                  FROM DUAL;

                                v_tran_sign := SIGN (cur_comm_rec.net_comm);

                                BEGIN
                                    --raise_error('v_tran_sign'||v_tran_sign||'v_gltran_tran_no'||v_gltran_tran_no);
                                    INSERT INTO gin_gl_transactions (
                                                    gltran_no,
                                                    gltran_auth_date,
                                                    gltran_dc,
                                                    gltran_trnt_code,
                                                    gltran_amount,
                                                    gltran_amount_bcur,
                                                    gltran_gltran_acc,
                                                    gltran_contra_acc,
                                                    gltran_usrname,
                                                    gltran_tran_no,
                                                    gltran_pol_policy_no,
                                                    gltran_u_c_trans,
                                                    gltran_cur_code,
                                                    gltran_cur_symbol,
                                                    gltran_cur_rate,
                                                    gltran_btr_trans_code,
                                                    gltran_level,
                                                    gltran_brn_code)
                                             VALUES (
                                                 v_gltran_tran_no,
                                                 TRUNC (SYSDATE),
                                                 DECODE (v_tran_sign,
                                                         -1, 'C',
                                                         'D'),
                                                 'UC',
                                                 ABS (
                                                     NVL (
                                                         cur_comm_rec.net_comm,
                                                         0)),
                                                 ABS (
                                                     NVL (
                                                         cur_comm_rec.net_comm,
                                                         0)),
                                                 GIN_INTERFACES_PKG.SL_CONTROL_ACC (
                                                     'GIS',
                                                     cur_comm_rec.act_type_id),
                                                 GIN_INTERFACES_PKG.SL_CONTROL_ACC (
                                                     'GIS',
                                                     cur_comm_rec.act_type_id,
                                                     'UC'),
                                                 v_user,
                                                 v_tran_no,
                                                 NULL, --dr_rec.up_pol_policy_no,
                                                 'U',
                                                 cur_comm_rec.cop_cur_code,
                                                 tqc_interfaces_pkg.currencysymbol (
                                                     cur_comm_rec.cop_cur_code),
                                                 v_exch_rate,
                                                 'UC',
                                                 'U',
                                                 cur_comm_rec.cop_brn_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        RAISE_ERROR (
                                            'ERROR INSERTING COMMISSION RECORD.....');
                                END;
                            END IF;


                            IF     cur_comm_rec.whtax <> 0
                               AND NVL (v_inc_whtx, 'Y') = 'N'
                            THEN
                                SELECT    TO_NUMBER (
                                              TO_CHAR (SYSDATE, 'YYYY'))
                                       || gin_gltran_no_seq.NEXTVAL
                                  INTO v_gltran_tran_no
                                  FROM DUAL;

                                v_tran_sign := SIGN (cur_comm_rec.whtax);

                                GIN_INTERFACES_PKG.get_gl_acct_code (
                                    'WTHTX1',
                                    NULL,
                                    'U',
                                    'WTHTX1',
                                    'L',
                                    v_trnt_code,
                                    v_trnt_gl_code,
                                    v_trnt_contra_gl_code);

                                BEGIN
                                    --raise_error('v_tran_sign'||v_tran_sign||'v_gltran_tran_no'||v_gltran_tran_no);
                                    INSERT INTO gin_gl_transactions (
                                                    gltran_no,
                                                    gltran_auth_date,
                                                    gltran_dc,
                                                    gltran_trnt_code,
                                                    gltran_amount,
                                                    gltran_amount_bcur,
                                                    gltran_gltran_acc,
                                                    gltran_contra_acc,
                                                    gltran_usrname,
                                                    gltran_tran_no,
                                                    gltran_pol_policy_no,
                                                    gltran_u_c_trans,
                                                    gltran_cur_code,
                                                    gltran_cur_symbol,
                                                    gltran_cur_rate,
                                                    gltran_btr_trans_code,
                                                    gltran_level,
                                                    gltran_brn_code)
                                             VALUES (
                                                 v_gltran_tran_no,
                                                 TRUNC (SYSDATE),
                                                 DECODE (v_tran_sign,
                                                         -1, 'D',
                                                         'C'),
                                                 'WTHTX1',
                                                 ABS (
                                                     NVL (cur_comm_rec.whtax,
                                                          0)),
                                                 ABS (
                                                     NVL (cur_comm_rec.whtax,
                                                          0)),
                                                 GIN_INTERFACES_PKG.SL_CONTROL_ACC (
                                                     'GIS',
                                                     cur_comm_rec.act_type_id),
                                                 NVL (
                                                     v_trnt_gl_code,
                                                     GIN_INTERFACES_PKG.SL_CONTROL_ACC (
                                                         'GIS',
                                                         cur_comm_rec.act_type_id,
                                                         'WTHTX1')),
                                                 v_user,
                                                 v_tran_no,
                                                 NULL, --dr_rec.up_pol_policy_no,
                                                 'U',
                                                 cur_comm_rec.cop_cur_code,
                                                 tqc_interfaces_pkg.currencysymbol (
                                                     cur_comm_rec.cop_cur_code),
                                                 v_exch_rate,
                                                 'WTHTX1',
                                                 'U',
                                                 cur_comm_rec.cop_brn_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        RAISE_ERROR (
                                            'ERROR INSERTING COMMISSION RECORD.....');
                                END;
                            END IF;

                            BEGIN
                                GIN_INTERFACES_PKG.create_gl_voucher (
                                    v_tran_no,
                                       'COMM PAYABLE FOR RCTNO -'
                                    || cur_comm_rec.rcrefno,
                                    v_user,
                                    cur_comm_rec.cop_agn_code,
                                    'U',
                                    NULL,
                                    cur_comm_rec.dbrefno);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    RAISE_ERROR (
                                        'ERROR POSTING COMMISSION RECORD....');
                            END;


                            BEGIN
                                UPDATE gin_commission_pymts
                                   SET cop_authorized_by = v_user,
                                       cop_authorized = 'Y',
                                       cop_authorize_date = TRUNC (SYSDATE),
                                       cop_paid = 'Y',
                                       cop_CHECKED = 'Y',
                                       cop_paid_chq_no = 'OOS',
                                       cop_paid_chq_date = TRUNC (SYSDATE),
                                       cop_copdt_code = v_copdt_code,
                                       cop_trans_no = v_tran_no
                                 WHERE cop_code = cur_com_dtls_rec.cop_code;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                           'ERROR POST UPDATING PAYMENT VOUCHER...'
                                        || cur_com_dtls_rec.cop_code);
                            END;
                        END IF;
                    END LOOP;

                    IF v_in_pyment = 'Y'
                    THEN
                        BEGIN
                            UPDATE gin_comm_pymt_dtls
                               SET copdt_authorized = 'Y',
                                   copdt_authorized_by = v_user,
                                   copdt_authorize_date = TRUNC (SYSDATE)
                             WHERE copdt_code = v_copdt_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR UPDATING CONSOLIDATED COMM TRANS ...');
                        END;
                    ELSIF v_in_pyment = 'N'
                    THEN
                        UPDATE gin_comm_pymt_dtls
                           SET copdt_authorized = 'Y',
                               copdt_authorized_by = v_user,
                               copdt_authorize_date = TRUNC (SYSDATE),
                               copdt_paid = 'Y',
                               copdt_paid_chq_date = TRUNC (SYSDATE),
                               copdt_paid_chq_no = 'OOS'
                         WHERE copdt_code = v_copdt_code;
                    END IF;
                END IF;

                IF v_post_option IN ('HRMS')
                THEN
                    IF NVL (v_webserv_param, 'N') = 'Y'
                    THEN
                        IF gin_interfaces_pkg.interface_enabled ('HRMS') =
                           'Y'
                        THEN
                            IF NVL (v_req_result, 0) = 1
                            THEN
                                gin_interfaces_pkg.update_commissions (
                                    v_copdt_code,
                                    v_tran_no,
                                    NULL,
                                    TRUNC (SYSDATE),
                                    v_user,
                                    TO_NUMBER (vamount));
                            ELSE
                                gin_interfaces_pkg.update_undo_commissions (
                                    v_copdt_code,
                                    v_tran_no,
                                    NULL,
                                    TRUNC (SYSDATE),
                                    v_user,
                                    TO_NUMBER (vamount));
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END LOOP;

            BEGIN
                UPDATE gin_gis_transactions
                   SET ggt_trans_authorised = 'Y',
                       ggt_trans_authorised_by = v_user,
                       ggt_trans_authorise_date = TRUNC (SYSDATE)
                 WHERE ggt_trans_no = v_tran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR AUTHORISING COMM TRANS ...');
            END;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('ERROR POSTING COMM. RECORDS...999');
        END;
    END;

    FUNCTION get_policy_balance_new (
        v_policy_no     IN VARCHAR2,
        v_tran_origin   IN VARCHAR2 DEFAULT 'UW')
        RETURN NUMBER
    IS
        v_bal   NUMBER;
    BEGIN
        IF v_tran_origin = 'UW'
        THEN
            BEGIN
                SELECT NVL (SUM (NVL (mtran_balance, 0) * mtran_cur_rate), 0)
                  INTO v_bal
                  FROM gin_master_transactions
                 WHERE     mtran_client_polcy_no = v_policy_no
                       AND mtran_origin = 'U'
                       AND mtran_dc = 'D'
                       AND mtran_client_type IN ('D', 'B', 'A')
                       AND mtran_tran_type != 'COM';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_bal := 0;
            END;
        ELSIF v_tran_origin = 'ADM'
        THEN
            BEGIN
                SELECT NVL (SUM (NVL (mtran_balance, 0) * mtran_cur_rate), 0)
                  INTO v_bal
                  FROM gin_master_transactions, gin_adminstration_fee
                 WHERE     adf_pol_policy_no = v_policy_no
                       AND mtran_ref_no = adf_ref_no
                       AND mtran_tran_type = 'ADM'
                       AND mtran_origin = 'U'
                       AND mtran_dc = 'D';
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_bal := 0;
            END;
        END IF;

        RETURN (v_bal);
    END;

    FUNCTION getrctamt (v_tmap_mtran_no NUMBER)
        RETURN NUMBER
    IS
        v_rct_amt   NUMBER;
    BEGIN
        BEGIN
            SELECT mtran_amount
              INTO v_rct_amt
              FROM gin_master_transactions
             WHERE mtran_no = v_tmap_mtran_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
        END;

        RETURN v_rct_amt;
    END;

    --   PROCEDURE update_comm_payable (v_mtran_no IN NUMBER)---commented out on 14th August 2019---auto allocation of credit notes
    --   IS
    --   BEGIN
    --      DECLARE
    --         CURSOR debit_trans
    --         IS
    --            SELECT DISTINCT tmap_check_mtran_no
    --              FROM gin_tran_mapping
    --             WHERE tmap_mtran_no = v_mtran_no;
    --
    --         CURSOR debit_rec (
    --            v_debit_mtran    NUMBER)
    --         IS
    --            SELECT mtran_net_amt,
    --                   mtran_ref_no,
    --                   mtran_commission,
    --                   mtran_whtx,
    --                   mtran_comm_payable,
    --                   mtran_whtx_payable,
    --                   mtran_settlement,
    --                   mtran_balance,
    --                   mtran_no,
    --                   ABS (ROUND (NVL (cop_comm_amt1, 0), 0)) cop_comm_amt1,
    --                   ABS (ROUND (NVL (cop_whdtax_amt1, 0), 0)) cop_whdtax_amt1,
    --                   ABS (ROUND (NVL (cop_comm_amt2, 0), 0)) cop_comm_amt2,
    --                   mtran_comm_paid,
    --                   ABS (ROUND (NVL (cop_whdtax_amt2, 0), 0)) cop_whdtax_amt2,
    --                   ABS (ROUND (NVL (cop_vat1, 0), 0)) cop_vat1,
    --                   ABS (ROUND (NVL (cop_vat2, 0), 0)) cop_vat2,
    --                   ABS (ROUND (NVL (cop_adminwhdtax_amt2, 0)))
    --                      cop_adminwhdtax_amt2,
    --                   ABS (ROUND (NVL (cop_admin_amt2, 0))) cop_admin_amt2,
    --                   ABS (ROUND (NVL (cop_adminvat2, 0))) cop_adminvat2,
    --                   ABS (ROUND (NVL (cop_adminwhdtax_amt1, 0)))
    --                      cop_adminwhdtax_amt1,
    --                   ABS (ROUND (NVL (cop_admin_amt1, 0))) cop_admin_amt1,
    --                   ABS (ROUND (NVL (cop_adminvat1, 0))) cop_adminvat1
    --              FROM gin_master_transactions,
    --                   (  SELECT cop_dr_mtran_no cop_dr_mtran_no1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_comm_amt, 0)))))
    --                                cop_comm_amt1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_whdtax_amt, 0)))))
    --                                cop_whdtax_amt1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_vat, 0)))))
    --                                cop_vat1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'COM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_comm_amt, 0)))))
    --                                cop_admin_amt1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'COM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_whdtax_amt, 0)))))
    --                                cop_adminwhdtax_amt1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'COM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_vat, 0)))))
    --                                cop_adminvat1
    --                        FROM gin_commission_pymts
    --                       WHERE     cop_paid = 'N'
    --                             AND cop_cr_ref_no NOT IN
    --                                    (SELECT REPLACE (mtran_ref_no, '/CN')
    --                                       FROM gin_master_transactions
    --                                      WHERE mtran_ref_no =
    --                                               cop_cr_ref_no || '/CN')
    --                    --and nvl(COP_WITHDRAWN,'N') ='N'
    --                    --AND COP_PAID_CHQ_DATE IS NOT NULL
    --                    GROUP BY cop_dr_mtran_no),
    --                   (  SELECT cop_dr_mtran_no cop_dr_mtran_no2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_comm_amt, 0)))))
    --                                cop_comm_amt2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (
    --                                      NVL (cop_type, 'COM'),
    --                                      'ADM', 0,
    --                                      DECODE (NVL (cop_withdrawn, 'N'),
    --                                              'Y', 0,
    --                                              (NVL (cop_whdtax_amt, 0))))))
    --                                cop_whdtax_amt2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (
    --                                      NVL (cop_type, 'COM'),
    --                                      'ADM', 0,
    --                                      DECODE (NVL (cop_withdrawn, 'N'),
    --                                              'Y', 0,
    --                                              (NVL (cop_vat, 0))))))
    --                                cop_vat2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'COM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_comm_amt, 0)))))
    --                                cop_admin_amt2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (
    --                                      NVL (cop_type, 'COM'),
    --                                      'COM', 0,
    --                                      DECODE (NVL (cop_withdrawn, 'N'),
    --                                              'Y', 0,
    --                                              (NVL (cop_whdtax_amt, 0))))))
    --                                cop_adminwhdtax_amt2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (
    --                                      NVL (cop_type, 'COM'),
    --                                      'COM', 0,
    --                                      DECODE (NVL (cop_withdrawn, 'N'),
    --                                              'Y', 0,
    --                                              (NVL (cop_vat, 0))))))
    --                                cop_adminvat2
    --                        FROM gin_commission_pymts
    --                       WHERE     cop_paid = 'Y'
    --                             AND cop_cr_ref_no NOT IN
    --                                    (SELECT REPLACE (mtran_ref_no, '/CN')
    --                                       FROM gin_master_transactions
    --                                      WHERE mtran_ref_no =
    --                                               cop_cr_ref_no || '/CN')
    --                             --and nvl(COP_WITHDRAWN,'N') ='N'
    --                             AND cop_paid_chq_date IS NOT NULL
    --                    GROUP BY cop_dr_mtran_no)
    --             WHERE     mtran_dc = 'D'
    --                   AND mtran_tran_type != 'COM'
    --                   AND cop_dr_mtran_no1(+) = mtran_no
    --                   AND mtran_no = cop_dr_mtran_no2(+)
    --                   AND mtran_no = v_debit_mtran;
    --
    --         CURSOR credit_rec
    --         IS
    --            SELECT mtran_net_amt,
    --                   mtran_ref_no,
    --                   mtran_commission,
    --                   mtran_whtx,
    --                   mtran_comm_payable,
    --                   mtran_whtx_payable,
    --                   mtran_settlement,
    --                   mtran_balance,
    --                   mtran_no,
    --                   ABS (ROUND (NVL (cop_comm_amt1, 0), 0)) cop_comm_amt1,
    --                   ABS (ROUND (NVL (cop_whdtax_amt1, 0), 0)) cop_whdtax_amt1,
    --                   ABS (ROUND (NVL (cop_comm_amt2, 0), 0)) cop_comm_amt2,
    --                   mtran_comm_paid,
    --                   ABS (ROUND (NVL (cop_whdtax_amt2, 0), 0)) cop_whdtax_amt2,
    --                   ABS (ROUND (cop_vat1, 0)) cop_vat1,
    --                   ABS (ROUND (cop_vat2, 0)) cop_vat2,
    --                   ABS (ROUND (NVL (cop_adminwhdtax_amt2, 0)))
    --                      cop_adminwhdtax_amt2,
    --                   ABS (ROUND (NVL (cop_admin_amt2, 0))) cop_admin_amt2,
    --                   ABS (ROUND (NVL (cop_adminvat2, 0))) cop_adminvat2,
    --                   ABS (ROUND (NVL (cop_adminwhdtax_amt1, 0)))
    --                      cop_adminwhdtax_amt1,
    --                   ABS (ROUND (NVL (cop_admin_amt1, 0))) cop_admin_amt1,
    --                   ABS (ROUND (NVL (cop_adminvat1, 0))) cop_adminvat1
    --              FROM gin_master_transactions,
    --                   (  SELECT cop_cr_mtran_no cop_cr_mtran_no1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_comm_amt, 0)))))
    --                                cop_comm_amt1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_whdtax_amt, 0)))))
    --                                cop_whdtax_amt1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_vat, 0)))))
    --                                cop_vat1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'COM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_comm_amt, 0)))))
    --                                cop_admin_amt1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'COM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_whdtax_amt, 0)))))
    --                                cop_adminwhdtax_amt1,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'COM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_vat, 0)))))
    --                                cop_adminvat1
    --                        FROM gin_commission_pymts
    --                       WHERE     cop_paid = 'N'
    --                             AND cop_cr_ref_no NOT IN
    --                                    (SELECT REPLACE (mtran_ref_no, '/CN')
    --                                       FROM gin_master_transactions
    --                                      WHERE mtran_ref_no =
    --                                               cop_cr_ref_no || '/CN')
    --                    --and nvl(COP_WITHDRAWN,'N') ='N'
    --                    --AND COP_PAID_CHQ_DATE IS NOT NULL
    --                    GROUP BY cop_cr_mtran_no),
    --                   (  SELECT cop_cr_mtran_no cop_cr_mtran_no2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_comm_amt, 0)))))
    --                                cop_comm_amt2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (
    --                                      NVL (cop_type, 'COM'),
    --                                      'ADM', 0,
    --                                      DECODE (NVL (cop_withdrawn, 'N'),
    --                                              'Y', 0,
    --                                              (NVL (cop_whdtax_amt, 0))))))
    --                                cop_whdtax_amt2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (
    --                                      NVL (cop_type, 'COM'),
    --                                      'ADM', 0,
    --                                      DECODE (NVL (cop_withdrawn, 'N'),
    --                                              'Y', 0,
    --                                              (NVL (cop_vat, 0))))))
    --                                cop_vat2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'COM', 0,
    --                                   DECODE (NVL (cop_withdrawn, 'N'),
    --                                           'Y', 0,
    --                                           (NVL (cop_comm_amt, 0)))))
    --                                cop_admin_amt2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (
    --                                      NVL (cop_type, 'COM'),
    --                                      'COM', 0,
    --                                      DECODE (NVL (cop_withdrawn, 'N'),
    --                                              'Y', 0,
    --                                              (NVL (cop_whdtax_amt, 0))))))
    --                                cop_adminwhdtax_amt2,
    --                             SUM (
    --                                DECODE (
    --                                   NVL (cop_type, 'COM'),
    --                                   'ADM', 0,
    --                                   DECODE (
    --                                      NVL (cop_type, 'COM'),
    --                                      'COM', 0,
    --                                      DECODE (NVL (cop_withdrawn, 'N'),
    --                                              'Y', 0,
    --                                              (NVL (cop_vat, 0))))))
    --                                cop_adminvat2
    --                        FROM gin_commission_pymts
    --                       WHERE     cop_paid = 'Y'
    --                             AND cop_cr_ref_no NOT IN
    --                                    (SELECT REPLACE (mtran_ref_no, '/CN')
    --                                       FROM gin_master_transactions
    --                                      WHERE mtran_ref_no =
    --                                               cop_cr_ref_no || '/CN')
    --                             --AND COP_CR_REF_NO='N/DEF/2016/07032'
    --                             --and nvl(COP_WITHDRAWN,'N') ='N'
    --                             AND cop_paid_chq_date IS NOT NULL
    --                    GROUP BY cop_cr_mtran_no)
    --             WHERE     mtran_dc = 'C'
    --                   AND mtran_tran_type != 'COM'
    --                   AND cop_cr_mtran_no1(+) = mtran_no
    --                   AND mtran_no = cop_cr_mtran_no2(+)
    --                   AND mtran_no = v_mtran_no;
    --      BEGIN
    --         FOR p IN debit_trans
    --         LOOP
    --            FOR r IN debit_rec (p.tmap_check_mtran_no)
    --            LOOP
    --               UPDATE gin_master_transactions
    --                  SET mtran_comm_payable = r.cop_comm_amt1,
    --                      mtran_comm_paid = r.cop_comm_amt2,
    --                      mtran_vat_payable = r.cop_vat1,
    --                      mtran_vat_paid = r.cop_vat2,
    --                      mtran_whtx_payable = r.cop_whdtax_amt1,
    --                      mtran_whtx_paid = r.cop_whdtax_amt2,
    --                      mtran_lta_payable = r.cop_admin_amt1,
    --                      mtran_lta_paid = r.cop_admin_amt2,
    --                      mtran_lta_whtx_payable = r.cop_adminwhdtax_amt1,
    --                      mtran_lta_whtx_paid = r.cop_adminwhdtax_amt2
    --                WHERE mtran_no = r.mtran_no;
    --            END LOOP;
    --         END LOOP;
    --
    --         FOR r IN credit_rec
    --         LOOP
    --            UPDATE gin_master_transactions
    --               SET mtran_comm_payable = r.cop_comm_amt1,
    --                   mtran_comm_paid = r.cop_comm_amt2,
    --                   mtran_vat_payable = r.cop_vat1,
    --                   mtran_vat_paid = r.cop_vat2,
    --                   mtran_whtx_payable = r.cop_whdtax_amt1,
    --                   mtran_whtx_paid = r.cop_whdtax_amt2,
    --                   mtran_lta_payable = r.cop_admin_amt1,
    --                   mtran_lta_paid = r.cop_admin_amt2,
    --                   mtran_lta_whtx_payable = r.cop_adminwhdtax_amt1,
    --                   mtran_lta_whtx_paid = r.cop_adminwhdtax_amt2
    --             WHERE mtran_no = r.mtran_no;
    --         END LOOP;
    --      END;
    --   END update_comm_payable;
    PROCEDURE update_comm_payable (v_mtran_no IN NUMBER)
    IS
    BEGIN
        DECLARE
            CURSOR debit_trans IS
                SELECT DISTINCT tmap_check_mtran_no
                  FROM gin_tran_mapping
                 WHERE tmap_mtran_no = v_mtran_no;

            CURSOR debit_rec (v_debit_mtran NUMBER)
            IS
                SELECT mtran_net_amt,
                       mtran_ref_no,
                       mtran_commission,
                       mtran_whtx,
                       mtran_comm_payable,
                       mtran_whtx_payable,
                       mtran_settlement,
                       mtran_balance,
                       mtran_no,
                       ABS (ROUND (NVL (cop_comm_amt1, 0), 0))
                           cop_comm_amt1,
                       ABS (ROUND (NVL (cop_whdtax_amt1, 0), 0))
                           cop_whdtax_amt1,
                       ABS (ROUND (NVL (cop_comm_amt2, 0), 0))
                           cop_comm_amt2,
                       mtran_comm_paid,
                       ABS (ROUND (NVL (cop_whdtax_amt2, 0), 0))
                           cop_whdtax_amt2,
                       ABS (ROUND (NVL (cop_vat1, 0), 0))
                           cop_vat1,
                       ABS (ROUND (NVL (cop_vat2, 0), 0))
                           cop_vat2,
                       ABS (ROUND (NVL (cop_adminwhdtax_amt2, 0)))
                           cop_adminwhdtax_amt2,
                       ABS (ROUND (NVL (cop_admin_amt2, 0)))
                           cop_admin_amt2,
                       ABS (ROUND (NVL (cop_adminvat2, 0)))
                           cop_adminvat2,
                       ABS (ROUND (NVL (cop_adminwhdtax_amt1, 0)))
                           cop_adminwhdtax_amt1,
                       ABS (ROUND (NVL (cop_admin_amt1, 0)))
                           cop_admin_amt1,
                       ABS (ROUND (NVL (cop_adminvat1, 0)))
                           cop_adminvat1
                  FROM gin_master_transactions,
                       (  SELECT cop_dr_mtran_no
                                     cop_dr_mtran_no1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_comm_amt, 0)))))
                                     cop_comm_amt1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_whdtax_amt, 0)))))
                                     cop_whdtax_amt1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_vat, 0)))))
                                     cop_vat1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'COM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_comm_amt, 0)))))
                                     cop_admin_amt1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'COM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_whdtax_amt, 0)))))
                                     cop_adminwhdtax_amt1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'COM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_vat, 0)))))
                                     cop_adminvat1
                            FROM gin_commission_pymts
                           WHERE     cop_paid = 'N'
                                 AND cop_cr_ref_no NOT IN
                                         (SELECT REPLACE (mtran_ref_no, '/CN')
                                            FROM gin_master_transactions
                                           WHERE mtran_ref_no =
                                                 cop_cr_ref_no || '/CN')
                        --and nvl(COP_WITHDRAWN,'N') ='N'
                        --AND COP_PAID_CHQ_DATE IS NOT NULL
                        GROUP BY cop_dr_mtran_no),
                       (  SELECT cop_dr_mtran_no
                                     cop_dr_mtran_no2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_comm_amt, 0)))))
                                     cop_comm_amt2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (
                                             NVL (cop_type, 'COM'),
                                             'ADM', 0,
                                             DECODE (NVL (cop_withdrawn, 'N'),
                                                     'Y', 0,
                                                     (NVL (cop_whdtax_amt, 0))))))
                                     cop_whdtax_amt2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (
                                             NVL (cop_type, 'COM'),
                                             'ADM', 0,
                                             DECODE (NVL (cop_withdrawn, 'N'),
                                                     'Y', 0,
                                                     (NVL (cop_vat, 0))))))
                                     cop_vat2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'COM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_comm_amt, 0)))))
                                     cop_admin_amt2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (
                                             NVL (cop_type, 'COM'),
                                             'COM', 0,
                                             DECODE (NVL (cop_withdrawn, 'N'),
                                                     'Y', 0,
                                                     (NVL (cop_whdtax_amt, 0))))))
                                     cop_adminwhdtax_amt2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (
                                             NVL (cop_type, 'COM'),
                                             'COM', 0,
                                             DECODE (NVL (cop_withdrawn, 'N'),
                                                     'Y', 0,
                                                     (NVL (cop_vat, 0))))))
                                     cop_adminvat2
                            FROM gin_commission_pymts
                           WHERE     cop_paid = 'Y'
                                 AND cop_cr_ref_no NOT IN
                                         (SELECT REPLACE (mtran_ref_no, '/CN')
                                            FROM gin_master_transactions
                                           WHERE mtran_ref_no =
                                                 cop_cr_ref_no || '/CN')
                                 --and nvl(COP_WITHDRAWN,'N') ='N'
                                 AND cop_paid_chq_date IS NOT NULL
                        GROUP BY cop_dr_mtran_no)
                 WHERE     mtran_dc = 'D'
                       AND mtran_tran_type != 'COM'
                       AND cop_dr_mtran_no1(+) = mtran_no
                       AND mtran_no = cop_dr_mtran_no2(+)
                       AND mtran_no = v_debit_mtran;

            CURSOR credit_rec IS
                SELECT mtran_net_amt,
                       mtran_ref_no,
                       mtran_commission,
                       mtran_whtx,
                       mtran_comm_payable,
                       mtran_whtx_payable,
                       mtran_settlement,
                       mtran_balance,
                       mtran_no,
                       ABS (ROUND (NVL (cop_comm_amt1, 0), 0))
                           cop_comm_amt1,
                       ABS (ROUND (NVL (cop_whdtax_amt1, 0), 0))
                           cop_whdtax_amt1,
                       ABS (ROUND (NVL (cop_comm_amt2, 0), 0))
                           cop_comm_amt2,
                       mtran_comm_paid,
                       ABS (ROUND (NVL (cop_whdtax_amt2, 0), 0))
                           cop_whdtax_amt2,
                       ABS (ROUND (cop_vat1, 0))
                           cop_vat1,
                       ABS (ROUND (cop_vat2, 0))
                           cop_vat2,
                       ABS (ROUND (NVL (cop_adminwhdtax_amt2, 0)))
                           cop_adminwhdtax_amt2,
                       ABS (ROUND (NVL (cop_admin_amt2, 0)))
                           cop_admin_amt2,
                       ABS (ROUND (NVL (cop_adminvat2, 0)))
                           cop_adminvat2,
                       ABS (ROUND (NVL (cop_adminwhdtax_amt1, 0)))
                           cop_adminwhdtax_amt1,
                       ABS (ROUND (NVL (cop_admin_amt1, 0)))
                           cop_admin_amt1,
                       ABS (ROUND (NVL (cop_adminvat1, 0)))
                           cop_adminvat1
                  FROM gin_master_transactions,
                       (  SELECT cop_cr_mtran_no
                                     cop_cr_mtran_no1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_comm_amt, 0)))))
                                     cop_comm_amt1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_whdtax_amt, 0)))))
                                     cop_whdtax_amt1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_vat, 0)))))
                                     cop_vat1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'COM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_comm_amt, 0)))))
                                     cop_admin_amt1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'COM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_whdtax_amt, 0)))))
                                     cop_adminwhdtax_amt1,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'COM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_vat, 0)))))
                                     cop_adminvat1
                            FROM gin_commission_pymts
                           WHERE     cop_paid = 'N'
                                 AND cop_cr_ref_no NOT IN
                                         (SELECT REPLACE (mtran_ref_no, '/CN')
                                            FROM gin_master_transactions
                                           WHERE mtran_ref_no =
                                                 cop_cr_ref_no || '/CN')
                        --and nvl(COP_WITHDRAWN,'N') ='N'
                        --AND COP_PAID_CHQ_DATE IS NOT NULL
                        GROUP BY cop_cr_mtran_no),
                       (  SELECT cop_cr_mtran_no
                                     cop_cr_mtran_no2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_comm_amt, 0)))))
                                     cop_comm_amt2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (
                                             NVL (cop_type, 'COM'),
                                             'ADM', 0,
                                             DECODE (NVL (cop_withdrawn, 'N'),
                                                     'Y', 0,
                                                     (NVL (cop_whdtax_amt, 0))))))
                                     cop_whdtax_amt2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (
                                             NVL (cop_type, 'COM'),
                                             'ADM', 0,
                                             DECODE (NVL (cop_withdrawn, 'N'),
                                                     'Y', 0,
                                                     (NVL (cop_vat, 0))))))
                                     cop_vat2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'COM', 0,
                                         DECODE (NVL (cop_withdrawn, 'N'),
                                                 'Y', 0,
                                                 (NVL (cop_comm_amt, 0)))))
                                     cop_admin_amt2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (
                                             NVL (cop_type, 'COM'),
                                             'COM', 0,
                                             DECODE (NVL (cop_withdrawn, 'N'),
                                                     'Y', 0,
                                                     (NVL (cop_whdtax_amt, 0))))))
                                     cop_adminwhdtax_amt2,
                                 SUM (
                                     DECODE (
                                         NVL (cop_type, 'COM'),
                                         'ADM', 0,
                                         DECODE (
                                             NVL (cop_type, 'COM'),
                                             'COM', 0,
                                             DECODE (NVL (cop_withdrawn, 'N'),
                                                     'Y', 0,
                                                     (NVL (cop_vat, 0))))))
                                     cop_adminvat2
                            FROM gin_commission_pymts
                           WHERE     cop_paid = 'Y'
                                 AND cop_cr_ref_no NOT IN
                                         (SELECT REPLACE (mtran_ref_no, '/CN')
                                            FROM gin_master_transactions
                                           WHERE mtran_ref_no =
                                                 cop_cr_ref_no || '/CN')
                                 --AND COP_CR_REF_NO='N/DEF/2016/07032'
                                 --and nvl(COP_WITHDRAWN,'N') ='N'
                                 AND cop_paid_chq_date IS NOT NULL
                        GROUP BY cop_cr_mtran_no)
                 WHERE     mtran_dc = 'C'
                       AND mtran_tran_type != 'COM'
                       AND cop_cr_mtran_no1(+) = mtran_no
                       AND mtran_no = cop_cr_mtran_no2(+)
                       AND mtran_no = v_mtran_no;
        BEGIN
            FOR p IN debit_trans
            LOOP
                FOR r IN debit_rec (p.tmap_check_mtran_no)
                LOOP
                    UPDATE gin_master_transactions
                       SET mtran_comm_payable = r.cop_comm_amt1,
                           mtran_comm_paid = r.cop_comm_amt2,
                           mtran_vat_payable = r.cop_vat1,
                           mtran_vat_paid = r.cop_vat2,
                           mtran_whtx_payable = r.cop_whdtax_amt1,
                           mtran_whtx_paid = r.cop_whdtax_amt2,
                           mtran_lta_payable = r.cop_admin_amt1,
                           mtran_lta_paid = r.cop_admin_amt2,
                           mtran_lta_whtx_payable = r.cop_adminwhdtax_amt1,
                           mtran_lta_whtx_paid = r.cop_adminwhdtax_amt2
                     WHERE mtran_no = r.mtran_no;
                END LOOP;
            END LOOP;

            FOR r IN credit_rec
            LOOP
                UPDATE gin_master_transactions
                   SET mtran_comm_payable = r.cop_comm_amt1,
                       mtran_comm_paid = r.cop_comm_amt2,
                       mtran_vat_payable = r.cop_vat1,
                       mtran_vat_paid = r.cop_vat2,
                       mtran_whtx_payable = r.cop_whdtax_amt1,
                       mtran_whtx_paid = r.cop_whdtax_amt2,
                       mtran_lta_payable = r.cop_admin_amt1,
                       mtran_lta_paid = r.cop_admin_amt2,
                       mtran_lta_whtx_payable = r.cop_adminwhdtax_amt1,
                       mtran_lta_whtx_paid = r.cop_adminwhdtax_amt2
                 WHERE mtran_no = r.mtran_no;
            END LOOP;
        END;
    END update_comm_payable;

    FUNCTION handle_comm_auth_error (v_error        IN VARCHAR2 DEFAULT NULL,
                                     v_copdt_code   IN NUMBER)
        RETURN VARCHAR2
    IS
    BEGIN
        BEGIN
            UPDATE gin_comm_pymt_dtls
               SET copdt_fail_reason = v_error
             WHERE COPDT_CODE = v_copdt_code;
        END;

        RETURN 'Y';
    END;

    FUNCTION get_payment_mode_by_limits (v_pmod_sht_dsc   IN VARCHAR2,
                                         V_TRANS_AMOUNT   IN NUMBER)
        RETURN VARCHAR2
    IS
        V_PMOD   VARCHAR2 (20);
    BEGIN
        IF v_pmod_sht_dsc NOT IN ('RTGS', 'EFT', 'CHQ')
        THEN
            V_PMOD := v_pmod_sht_dsc;
        ELSIF v_pmod_sht_dsc = 'RTGS'
        THEN
            IF V_TRANS_AMOUNT BETWEEN get_min_pmod_limit (v_pmod_sht_dsc)
                                  AND get_max_pmod_limit (v_pmod_sht_dsc)
            THEN
                V_PMOD := 'RTGS';
            ELSIF V_TRANS_AMOUNT BETWEEN get_min_pmod_limit ('EFT')
                                     AND get_max_pmod_limit ('EFT')
            THEN
                V_PMOD := 'EFT';
            ELSIF V_TRANS_AMOUNT BETWEEN get_min_pmod_limit ('CHQ')
                                     AND get_max_pmod_limit ('CHQ')
            THEN
                V_PMOD := 'CHQ';
            ELSE
                V_PMOD := 'Error';
            END IF;
        ELSIF v_pmod_sht_dsc = 'EFT'
        THEN
            IF V_TRANS_AMOUNT BETWEEN get_min_pmod_limit ('EFT')
                                  AND get_max_pmod_limit ('EFT')
            THEN
                V_PMOD := 'EFT';
            ELSIF V_TRANS_AMOUNT BETWEEN get_min_pmod_limit ('RTGS')
                                     AND get_max_pmod_limit ('RTGS')
            THEN
                V_PMOD := 'RTGS';
            ELSIF V_TRANS_AMOUNT BETWEEN get_min_pmod_limit ('CHQ')
                                     AND get_max_pmod_limit ('CHQ')
            THEN
                V_PMOD := 'CHQ';
            ELSE
                V_PMOD := 'Error';
            END IF;
        ELSIF V_PMOD_SHT_DSC = 'CHQ'
        THEN
            IF V_TRANS_AMOUNT BETWEEN get_min_pmod_limit ('CHQ')
                                  AND get_max_pmod_limit ('CHQ')
            THEN
                V_PMOD := 'CHQ';
            ELSIF V_TRANS_AMOUNT BETWEEN get_min_pmod_limit ('RTGS')
                                     AND get_max_pmod_limit ('RTGS')
            THEN
                V_PMOD := 'RTGS';
            ELSE
                V_PMOD := 'Error';
            END IF;
        END IF;

        RETURN V_PMOD;
    END;

    FUNCTION get_min_pmod_limit (v_pmod_sht_dsc IN VARCHAR2)
        RETURN NUMBER
    IS
        v_min_amount   NUMBER;
    BEGIN
        BEGIN
            SELECT NVL (cpm_min_amt, 0)
              INTO V_MIN_AMOUNT
              FROM tqc_clm_payment_modes
             WHERE cpm_sht_desc = v_pmod_sht_dsc;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_error (
                       'MINIMUM LIMIT FOR '
                    || v_pmod_sht_dsc
                    || ' HAVE NOT BEEN DEFINED');
            WHEN OTHERS
            THEN
                raise_error (
                       'MINIMUM LIMIT FOR '
                    || v_pmod_sht_dsc
                    || ' HAVE BEEN DEFINED MORE THAN ONCE');
        END;

        RETURN v_min_amount;
    END;

    FUNCTION get_max_pmod_limit (v_pmod_sht_dsc IN VARCHAR2)
        RETURN NUMBER
    IS
        v_max_amount   NUMBER;
    BEGIN
        BEGIN
            SELECT NVL (cpm_max_amt, 0)
              INTO v_max_amount
              FROM tqc_clm_payment_modes
             WHERE cpm_sht_desc = v_pmod_sht_dsc;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                raise_error (
                       'MAXIMUM LIMIT FOR '
                    || v_pmod_sht_dsc
                    || ' HAVE NOT BEEN DEFINED');
            WHEN OTHERS
            THEN
                raise_error (
                       'MAXIMUM LIMIT FOR '
                    || v_pmod_sht_dsc
                    || ' HAVE BEEN DEFINED MORE THAN ONCE');
        END;

        RETURN v_max_amount;
    END;

    FUNCTION get_account_no (v_mtran_no IN NUMBER, v_client_type IN VARCHAR2)
        RETURN NUMBER
    IS
        v_acc_no   NUMBER;
    BEGIN
        IF v_client_type = 'R'
        THEN
            BEGIN
                SELECT agn_acc_no
                  INTO v_acc_no
                  FROM gin_master_transactions, tqc_agencies
                 WHERE mtran_no = v_mtran_no AND mtran_client_code = agn_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    v_acc_no :=
                        fms_interfaces_pkg.sl_control_acc ('GIS',
                                                           v_client_type);
            END;
        ELSE
            v_acc_no :=
                fms_interfaces_pkg.sl_control_acc ('GIS', v_client_type);
        END IF;

        RETURN v_acc_no;
    END;

    FUNCTION get_bal_bf (v_mtran_clnt_code   NUMBER,
                         v_client_type       VARCHAR2,
                         v_from_date         DATE)
        RETURN NUMBER
    IS
        v_bal_bf   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (MTRAN_NET_AMT, 0) * NVL (MTRAN_CUR_RATE, 1))
              INTO v_bal_bf
              FROM gin_master_transactions
             WHERE     mtran_authorised = 'Y'
                   AND mtran_date <=
                       TO_DATE (
                           gin_premium_trans.get_first_day_of_month (
                               TRUNC (v_from_date)))
                   AND mtran_client_type = v_client_type
                   AND MTRAN_CLIENT_CODE = v_mtran_clnt_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_bal_bf := 0;
        END;

        RETURN v_bal_bf;
    END;

    --   FUNCTION GET_POLICY_RISK_NOTE (V_POL_BATCH_NO IN NUMBER)
    --      RETURN VARCHAR2
    --   IS
    --      V_RISK_NOTE_COUNT     NUMBER;
    --      V_POL_INSURED_COUNT   NUMBER;
    --      V_RISK_NOTE_NO        VARCHAR2 (200);
    --      v_binder              VARCHAR2 (1) := 'N';
    --      v_POL_SCHEME_POLICY   VARCHAR2 (1) := 'N';
    --   BEGIN
    --      SELECT NVL (POL_BINDER_POLICY, 'N'), NVL (POL_SCHEME_POLICY, 'N')
    --        INTO v_binder, v_POL_SCHEME_POLICY
    --        FROM gin_policies
    --       WHERE pol_batch_no = V_POL_BATCH_NO;
    --
    --      BEGIN
    --         SELECT COUNT (*)
    --           INTO V_POL_INSURED_COUNT
    --           FROM GIN_POLICY_INSUREDS
    --          WHERE POLIN_POL_BATCH_NO = V_POL_BATCH_NO;
    --      END;
    --
    --      IF     v_binder = 'N'
    --         AND v_POL_SCHEME_POLICY = 'N'
    --         AND V_POL_INSURED_COUNT > 1
    --      THEN
    --         RETURN 'Various';
    --      ELSE
    --         SELECT COUNT (DISTINCT (IPU_RISK_NOTE))
    --           INTO V_RISK_NOTE_COUNT
    --           FROM GIN_INSURED_PROPERTY_UNDS
    --          WHERE IPU_POL_BATCH_NO = V_POL_BATCH_NO;
    --
    --         IF V_RISK_NOTE_COUNT > 1
    --         THEN
    --            RETURN 'Various';
    --         ELSE
    --            SELECT DISTINCT (IPU_RISK_NOTE)
    --              INTO V_RISK_NOTE_NO
    --              FROM GIN_INSURED_PROPERTY_UNDS
    --             WHERE IPU_POL_BATCH_NO = V_POL_BATCH_NO;
    --
    --            RETURN V_RISK_NOTE_NO;
    --         END IF;
    --      END IF;
    --   END;
    FUNCTION GET_POLICY_RISK_NOTE (V_POL_BATCH_NO IN NUMBER)
        RETURN VARCHAR2
    IS
        V_RISK_NOTE_COUNT     NUMBER;
        V_POL_INSURED_COUNT   NUMBER;
        V_RISK_NOTE_NO        VARCHAR2 (200);
        v_binder              VARCHAR2 (1) := 'N';
        v_POL_SCHEME_POLICY   VARCHAR2 (1) := 'N';
    BEGIN
        SELECT NVL (POL_BINDER_POLICY, 'N'), NVL (POL_SCHEME_POLICY, 'N')
          INTO v_binder, v_POL_SCHEME_POLICY
          FROM gin_policies
         WHERE pol_batch_no = V_POL_BATCH_NO;

        BEGIN
            SELECT COUNT (*)
              INTO V_POL_INSURED_COUNT
              FROM GIN_POLICY_INSUREDS
             WHERE POLIN_POL_BATCH_NO = V_POL_BATCH_NO;
        END;

        IF     v_binder = 'N'
           AND v_POL_SCHEME_POLICY = 'N'
           AND V_POL_INSURED_COUNT > 1
        THEN
            RETURN 'Various';
        ELSE
            SELECT COUNT (DISTINCT (IPU_RISK_NOTE))
              INTO V_RISK_NOTE_COUNT
              FROM GIN_INSURED_PROPERTY_UNDS
             WHERE IPU_POL_BATCH_NO = V_POL_BATCH_NO;

            IF V_RISK_NOTE_COUNT > 1
            THEN
                RETURN 'Various';
            ELSE
                SELECT DISTINCT (IPU_RISK_NOTE)
                  INTO V_RISK_NOTE_NO
                  FROM GIN_INSURED_PROPERTY_UNDS
                 WHERE IPU_POL_BATCH_NO = V_POL_BATCH_NO;

                RETURN V_RISK_NOTE_NO;
            END IF;
        END IF;
    END;

    --   FUNCTION get_policy_transaction_type (V_POL_BATCH_NO IN NUMBER)
    --      RETURN VARCHAR2
    --   IS
    --      v_trans_type    VARCHAR2 (100);
    --      v_binder        VARCHAR2 (1) := 'N';
    --      v_trans_count   NUMBER;
    --   BEGIN
    --      SELECT NVL (POL_BINDER_POLICY, 'N')
    --        INTO v_binder
    --        FROM gin_policies
    --       WHERE pol_batch_no = V_POL_BATCH_NO;
    --
    --      IF v_binder = 'N'
    --      THEN
    --         SELECT DECODE (POL_POLICY_STATUS,
    --                        'NBR', 'NEW BUSINESS',
    --                        'NBD', 'NEW BUSINESS',
    --                        'NBC', 'NEW BUSINESS',
    --                        'APD', 'ENDORSEMENT',
    --                        'RPC', 'ENDORSEMENT',
    --                        'APC', 'ENDORSEMENT',
    --                        'CNC', 'ENDORSEMENT',
    --                        'SPD', 'NEW BUSINESS',
    --                        'SPR', 'NEW BUSINESS',
    --                        'RNC', 'RENEWAL',
    --                        'RND', 'RENEWAL',
    --                        'RNR', 'RENEWAL',
    --                        'RCC', 'ENDORSEMENT',
    --                        POL_POLICY_STATUS)
    --           INTO v_trans_type
    --           FROM GIN_POLICIES
    --          WHERE POL_BATCH_NO = V_POL_BATCH_NO;
    --      ELSE
    --         SELECT COUNT (DISTINCT (RSKRG_TRAN_TYPE))
    --           INTO v_trans_count
    --           FROM GIN_POLICY_RISK_REG
    --          WHERE RSKRG_POL_BATCH_NO = V_POL_BATCH_NO;
    --
    --         IF v_trans_count = 1
    --         THEN
    --            SELECT DISTINCT (RSKRG_TRAN_TYPE)
    --              INTO v_trans_type
    --              FROM GIN_POLICY_RISK_REG
    --             WHERE RSKRG_POL_BATCH_NO = V_POL_BATCH_NO;
    --
    --            SELECT DECODE (v_trans_type,
    --                           'NBR', 'NEW BUSINESS',
    --                           'NBD', 'NEW BUSINESS',
    --                           'NBC', 'NEW BUSINESS',
    --                           'APD', 'ENDORSEMENT',
    --                           'RPC', 'ENDORSEMENT',
    --                           'APC', 'ENDORSEMENT',
    --                           'CNC', 'ENDORSEMENT',
    --                           'SPD', 'NEW BUSINESS',
    --                           'SPR', 'NEW BUSINESS',
    --                           'RNC', 'RENEWAL',
    --                           'RND', 'RENEWAL',
    --                           'RNR', 'RENEWAL',
    --                           'RCC', 'ENDORSEMENT',
    --                           v_trans_type)
    --              INTO v_trans_type
    --              FROM DUAL;
    --         ELSE
    --            RETURN 'Various';
    --         END IF;
    --      END IF;
    --
    --      RETURN v_trans_type;
    --   END;

    FUNCTION get_policy_transaction_type (V_POL_BATCH_NO IN NUMBER)
        RETURN VARCHAR2
    IS
        v_trans_type    VARCHAR2 (100);
        v_binder        VARCHAR2 (1) := 'N';
        v_trans_count   NUMBER;
    BEGIN
        SELECT NVL (POL_BINDER_POLICY, 'N')
          INTO v_binder
          FROM gin_policies
         WHERE pol_batch_no = V_POL_BATCH_NO;

        IF v_binder = 'N'
        THEN
            SELECT DECODE (POL_POLICY_STATUS,
                           'NBR', 'NEW BUSINESS',
                           'NBD', 'NEW BUSINESS',
                           'NBC', 'NEW BUSINESS',
                           'APD', 'ENDORSEMENT',
                           'RPC', 'ENDORSEMENT',
                           'APC', 'ENDORSEMENT',
                           'CNC', 'ENDORSEMENT',
                           'SPD', 'NEW BUSINESS',
                           'SPR', 'NEW BUSINESS',
                           'RNC', 'RENEWAL',
                           'RND', 'RENEWAL',
                           'RNR', 'RENEWAL',
                           'RCC', 'ENDORSEMENT',
                           POL_POLICY_STATUS)
              INTO v_trans_type
              FROM GIN_POLICIES
             WHERE POL_BATCH_NO = V_POL_BATCH_NO;
        ELSE
            SELECT COUNT (DISTINCT (RSKRG_TRAN_TYPE))
              INTO v_trans_count
              FROM GIN_POLICY_RISK_REG
             WHERE RSKRG_POL_BATCH_NO = V_POL_BATCH_NO;

            IF v_trans_count = 1
            THEN
                SELECT DISTINCT (RSKRG_TRAN_TYPE)
                  INTO v_trans_type
                  FROM GIN_POLICY_RISK_REG
                 WHERE RSKRG_POL_BATCH_NO = V_POL_BATCH_NO;

                SELECT DECODE (v_trans_type,
                               'NBR', 'NEW BUSINESS',
                               'NBD', 'NEW BUSINESS',
                               'NBC', 'NEW BUSINESS',
                               'APD', 'ENDORSEMENT',
                               'RPC', 'ENDORSEMENT',
                               'APC', 'ENDORSEMENT',
                               'CNC', 'ENDORSEMENT',
                               'SPD', 'NEW BUSINESS',
                               'SPR', 'NEW BUSINESS',
                               'RNC', 'RENEWAL',
                               'RND', 'RENEWAL',
                               'RNR', 'RENEWAL',
                               'RCC', 'ENDORSEMENT',
                               v_trans_type)
                  INTO v_trans_type
                  FROM DUAL;
            ELSE
                RETURN 'Various';
            END IF;
        END IF;

        RETURN v_trans_type;
    END;

    FUNCTION get_dr_com_paid (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_comm_paid   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_comm_amt, 0))
              INTO v_comm_paid
              FROM gin_commission_pymts
             WHERE     cop_dr_mtran_no = v_mtran_no
                   AND cop_paid = 'Y'
                   --AND SIGN(cop_comm_amt)=1
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_comm_paid := 0;
        END;

        RETURN v_comm_paid;
    END;

    FUNCTION get_dr_com_payble (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_comm_payable   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_comm_amt, 0))
              INTO v_comm_payable
              FROM gin_commission_pymts
             WHERE     cop_dr_mtran_no = v_mtran_no
                   AND cop_paid != 'Y'
                   --AND SIGN(cop_comm_amt)!=-1
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_comm_payable := 0;
        END;

        RETURN v_comm_payable;
    END;

    FUNCTION get_dr_com_whtax_paid (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_whdtax_paid_amt   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_whdtax_amt, 0))
              INTO v_whdtax_paid_amt
              FROM gin_commission_pymts
             WHERE     cop_dr_mtran_no = v_mtran_no
                   AND cop_paid = 'Y'
                   --AND SIGN(cop_whdtax_amt)=-1
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_whdtax_paid_amt := 0;
        END;

        RETURN NVL (v_whdtax_paid_amt, 0);
    END;

    FUNCTION get_dr_com_whtax_payble (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_whdtax_payble_amt   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_whdtax_amt, 0))
              INTO v_whdtax_payble_amt
              FROM gin_commission_pymts
             WHERE     cop_dr_mtran_no = v_mtran_no
                   --AND SIGN(cop_whdtax_amt)!=1
                   AND cop_paid != 'Y'
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_whdtax_payble_amt := 0;
        END;

        RETURN v_whdtax_payble_amt;
    END;

    FUNCTION get_cr_com_paid (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_comm_paid   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_comm_amt, 0))
              INTO v_comm_paid
              FROM gin_commission_pymts
             WHERE     cop_cr_mtran_no = v_mtran_no
                   AND cop_paid = 'Y'
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_comm_paid := 0;
        END;

        RETURN v_comm_paid;
    END;

    FUNCTION get_cr_com_payble (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_comm_payable   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_comm_amt, 0))
              INTO v_comm_payable
              FROM gin_commission_pymts
             WHERE     cop_cr_mtran_no = v_mtran_no
                   AND cop_paid != 'Y'
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_comm_payable := 0;
        END;

        RETURN v_comm_payable;
    END;

    FUNCTION get_cr_com_payble_net (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_comm_payable   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_net_comm, 0))
              INTO v_comm_payable
              FROM gin_commission_pymts
             WHERE     cop_cr_mtran_no = v_mtran_no
                   AND cop_paid != 'Y'
                   AND SIGN (cop_net_comm) != -1
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_comm_payable := 0;
        END;

        RETURN v_comm_payable;
    END;

    FUNCTION get_cr_com_clawedback_net (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_comm_paid   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_net_comm, 0))
              INTO v_comm_paid
              FROM gin_commission_pymts
             WHERE     cop_cr_mtran_no = v_mtran_no
                   AND SIGN (cop_net_comm) = -1
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_comm_paid := 0;
        END;

        RETURN v_comm_paid;
    END;

    --  FUNCTION get_dr_com_paid (v_mtran_no IN NUMBER)
    --      RETURN NUMBER
    --   IS
    --      v_comm_paid   NUMBER := 0;
    --   BEGIN
    --      BEGIN
    --         SELECT SUM (NVL (cop_comm_amt, 0))
    --           INTO v_comm_paid
    --           FROM gin_commission_pymts
    --          WHERE cop_dr_mtran_no = v_mtran_no
    --            AND cop_paid = 'Y'
    --            AND SIGN(cop_comm_amt)=1
    --            AND cop_withdrawn != 'Y';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_comm_paid := 0;
    --      END;
    --
    --      RETURN v_comm_paid;
    --   END;
    FUNCTION get_cr_com_alloc_amt (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_comm_payable   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_net_comm, 0))
              INTO v_comm_payable
              FROM gin_commission_pymts
             WHERE cop_cr_mtran_no = v_mtran_no AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_comm_payable := 0;
        END;

        RETURN v_comm_payable;
    END;

    FUNCTION get_cr_com_whtax_paid (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_whdtax_paid_amt   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_whdtax_amt, 0))
              INTO v_whdtax_paid_amt
              FROM gin_commission_pymts
             WHERE     cop_cr_mtran_no = v_mtran_no
                   AND cop_paid = 'Y'
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_whdtax_paid_amt := 0;
        END;

        RETURN v_whdtax_paid_amt;
    END;

    --   FUNCTION get_dr_com_whtax_paid (v_mtran_no IN NUMBER)
    --      RETURN NUMBER
    --   IS
    --      v_whdtax_paid_amt   NUMBER := 0;
    --   BEGIN
    --      BEGIN
    --         SELECT SUM (NVL (cop_whdtax_amt, 0))
    --           INTO v_whdtax_paid_amt
    --           FROM gin_commission_pymts
    --          WHERE cop_dr_mtran_no = v_mtran_no
    --            AND cop_paid = 'Y'
    --            AND SIGN(cop_whdtax_amt)=-1
    --            AND cop_withdrawn != 'Y';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_whdtax_paid_amt := 0;
    --      END;
    --
    --      RETURN NVL(v_whdtax_paid_amt,0);
    --   END;

    FUNCTION get_Cr_com_whtax_payble (v_mtran_no IN NUMBER)
        RETURN NUMBER
    IS
        v_whdtax_payble_amt   NUMBER := 0;
    BEGIN
        BEGIN
            SELECT SUM (NVL (cop_whdtax_amt, 0))
              INTO v_whdtax_payble_amt
              FROM gin_commission_pymts
             WHERE     cop_Cr_mtran_no = v_mtran_no
                   AND cop_paid != 'Y'
                   AND cop_withdrawn != 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_whdtax_payble_amt := 0;
        END;

        RETURN v_whdtax_payble_amt;
    END;


    PROCEDURE validate_comm_allocations (v_cr_mtran_no   IN NUMBER,
                                         v_dr_mtran_no   IN NUMBER)
    IS
        v_alloc_amt    NUMBER;
        v_settle_amt   NUMBER;
        v_cr_cnt       NUMBER;
        v_debit_amt    NUMBER;
        v_dr_cnt       NUMBER;
        v_dr_cr        VARCHAR2 (1);
        v_tmap_code    NUMBER;
    BEGIN
        BEGIN
              -- select TMAP_DRCR
              -- INTO v_dr_cr
              -- from GIN_TRAN_MAPPING
              -- where TMAP_CODE in (SELECT MAX(TMAP_CODE)
              -- FROM GIN_TRAN_MAPPING
              -- WHERE TMAP_MTRAN_NO = v_cr_mtran_no);
              SELECT COUNT (1),
                     NVL (mtran_settlement, 0),
                     SUM (
                           DECODE (tmap_drcr, 'C', 1, -1)
                         * ABS (NVL (tmap_amount, 0)))    alloc_amt
                INTO v_cr_cnt, v_settle_amt, v_alloc_amt
                FROM gin_master_transactions, gin_tran_mapping
               WHERE tmap_mtran_no = mtran_no AND mtran_no = v_cr_mtran_no
            GROUP BY mtran_no, NVL (mtran_settlement, 0)
              HAVING ROUND (
                         ABS (
                             SUM (
                                   DECODE (tmap_drcr, 'C', 1, -1)
                                 * ABS (NVL (tmap_amount, 0))))) !=
                     ROUND (ABS (NVL (mtran_settlement, 0)));
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_cr_cnt := 0;
            WHEN OTHERS
            THEN
                raise_error (
                       'Error determining the allocated credit ...tran_num:'
                    || v_cr_mtran_no);
        END;

        IF NVL (v_cr_cnt, 0) > 0
        THEN
            --        raise_error('gis_accounts_utilities::LN 26028::v_cr_mtran_no'||v_cr_mtran_no||'v_dr_mtran_no'||v_dr_mtran_no);
            raise_error (
                   'gis_accounts_utilities::LN 26064::Settlement on the credit '
                || v_cr_mtran_no
                || ' of '
                || v_settle_amt
                || ' and the allocated amt.'
                || v_alloc_amt
                || ' Do not tally.');
        END IF;

        BEGIN
              SELECT COUNT (1),
                     NVL (mtran_settlement, 0),
                     SUM (
                           DECODE (tmap_drcr, 'C', 1, -1)
                         * ABS (NVL (tmap_amount, 0)))
                INTO v_dr_cnt, v_debit_amt, v_alloc_amt
                FROM gin_master_transactions, gin_tran_mapping
               WHERE     tmap_check_mtran_no = mtran_no
                     AND mtran_no = v_dr_mtran_no
            GROUP BY mtran_no, NVL (mtran_settlement, 0)
              HAVING ROUND (
                         ABS (
                             SUM (
                                   DECODE (tmap_drcr, 'C', -1, 1)
                                 * ABS (NVL (tmap_amount, 0))))) !=
                     ROUND (ABS (NVL (mtran_settlement, 0)));
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_dr_cnt := 0;
            WHEN OTHERS
            THEN
                raise_error (
                       'Error determining the Debit allocated ...tran_num:'
                    || v_dr_mtran_no);
        END;

        IF NVL (v_dr_cnt, 0) > 0
        THEN
            raise_error (
                   'Settlement on the Debit amt '
                || v_debit_amt
                || ' and the allocated amt.'
                || v_alloc_amt
                || ' Do not tally.'
                || v_dr_mtran_no
                || 'v_dr_cnt='
                || v_dr_cnt);
        END IF;
    END validate_comm_allocations;
END gis_accounts_utilities;
/