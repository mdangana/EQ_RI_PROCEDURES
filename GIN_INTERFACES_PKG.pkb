CREATE OR REPLACE PACKAGE BODY TQ_GIS.gin_interfaces_pkg
AS
    PROCEDURE raise_error (v_msg IN VARCHAR2)
    IS
    BEGIN
        IF SQLCODE != 0
        THEN
            raise_application_error (-20018,
                                     v_msg || ' - ' || SQLERRM (SQLCODE));
        ELSE
            raise_application_error (-20018, v_msg);
        END IF;
    END raise_error;

    PROCEDURE interface_append_chq (
        v_trans_no              NUMBER,
        v_trans_code            VARCHAR2,
        v_raise_by              VARCHAR2,
        v_pol_code              NUMBER,
        v_scl_code              NUMBER,
        v_vchr_no               VARCHAR2,
        v_count                 NUMBER,
        v_amount                NUMBER,
        v_narrative             VARCHAR2,
        v_acc_number            VARCHAR2,
        v_acc_org_code          NUMBER,
        v_branch_code           NUMBER,
        v_drcr                  VARCHAR2,
        v_trn_rec        IN OUT fms_cheques_pkg.type_rqn_dtls_table)
    IS
        v_ref3   NUMBER;
    BEGIN
        BEGIN
            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                   || gin_ref3_seq.NEXTVAL
              INTO v_ref3
              FROM DUAL;

            INSERT INTO gin_interface_table (itb_ref3,
                                             itb_date,
                                             itb_ggt_trans_no,
                                             itb_trnt_code,
                                             itb_raised_by,
                                             itb_count,
                                             itb_pol_batch_no,
                                             itb_scl_code,
                                             itb_vchr_no,
                                             itb_trans_type,
                                             itb_amount,
                                             itb_narrative,
                                             itb_acc_number,
                                             itb_drcr,
                                             itb_brn_code)
                 VALUES (v_ref3,
                         SYSDATE,
                         v_trans_no,
                         v_trans_code,
                         v_raise_by,
                         v_count,
                         v_pol_code,
                         v_scl_code,
                         v_vchr_no,
                         'APPEND_CHQ',
                         v_amount,
                         v_narrative,
                         v_acc_number,
                         v_drcr,
                         v_branch_code);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('INS_Append_CHQ..');
        END;

        BEGIN
            fms_cheques_pkg.append_chq_trans (v_count,
                                              v_amount,
                                              v_narrative,
                                              v_acc_number,
                                              v_acc_org_code,
                                              v_branch_code,
                                              v_drcr,
                                              v_trn_rec,
                                              v_ref3);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Append_CHQ..');
        END;
    END interface_append_chq;

    PROCEDURE interface_append_gl (
        v_trans_no               NUMBER,
        v_trans_code             VARCHAR2,
        v_raise_by               VARCHAR2,
        v_pol_code               NUMBER,
        v_prod_code              NUMBER,
        v_vchr_no                VARCHAR2,
        v_opr_code               NUMBER,
        v_oppr_code              NUMBER,
        v_rcpt_no                VARCHAR2,
        v_count                  NUMBER,
        v_narrative              VARCHAR2,
        v_amount                 NUMBER,
        v_drcr                   VARCHAR2,
        v_acc_number             VARCHAR2,
        v_branch_code            NUMBER,
        v_trn_rec         IN OUT fms_vouchers_pkg.tgl_rec_type,
        v_pdl_code               NUMBER,
        /*pdl_code,unit_code and location code Introduced to enable posting to fms of sbu details to fms*/
        v_unit_code              NUMBER,
        v_location_code          NUMBER)
    IS
        v_ref3   NUMBER;
    BEGIN
        BEGIN
            IF v_acc_number IS NULL
            THEN
                raise_error ('NULL Accnt...' || v_narrative);
            ELSE
                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                       || gin_ref3_seq.NEXTVAL
                  INTO v_ref3
                  FROM DUAL;

                INSERT INTO gin_interface_table (itb_ref3,
                                                 itb_date,
                                                 itb_ggt_trans_no,
                                                 itb_trnt_code,
                                                 itb_raised_by,
                                                 itb_count,
                                                 itb_pol_batch_no,
                                                 itb_scl_code,
                                                 itb_vchr_no,
                                                 itb_trans_type,
                                                 itb_amount,
                                                 itb_narrative,
                                                 itb_acc_number,
                                                 itb_acc_number2,
                                                 itb_drcr,
                                                 itb_brn_code,
                                                 itb_pdl_code,
                                                 itb_unit_code,
                                                 itb_location_code)
                     VALUES (v_ref3,
                             SYSDATE,
                             v_trans_no,
                             v_trans_code,
                             v_raise_by,
                             v_count,
                             v_pol_code,
                             v_prod_code,
                             v_vchr_no,
                             'APPEND_GL',
                             v_amount,
                             v_narrative,
                             v_acc_number,
                             NULL,
                             v_drcr,
                             v_branch_code,
                             v_pdl_code,
                             v_unit_code,
                             v_location_code);
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('INS_Append_GL.1.');
        END;

        BEGIN
            fms_vouchers_pkg.append_gl_trans (v_count,
                                              v_narrative,
                                              v_amount,
                                              v_drcr,
                                              v_acc_number,
                                              v_branch_code,
                                              v_trn_rec,
                                              v_ref3,
                                              NULL,
                                              NULL,
                                              NULL,
                                              NULL,
                                              v_unit_code,
                                              v_location_code);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Append_GL.1.');
        END;
    END interface_append_gl;

    PROCEDURE interface_append_gl (
        v_trans_no               NUMBER,
        v_trans_code             VARCHAR2,
        v_raise_by               VARCHAR2,
        v_pol_code               NUMBER,
        v_prod_code              NUMBER,
        v_vchr_no                VARCHAR2,
        v_opr_code               NUMBER,
        v_oppr_code              NUMBER,
        v_rcpt_no                VARCHAR2,
        v_count                  NUMBER,
        v_narrative              VARCHAR2,
        v_amount                 NUMBER,
        v_drcr                   VARCHAR2,
        v_acc_number1            VARCHAR2,
        v_acc_number2            VARCHAR2,
        v_branch_code            NUMBER,
        v_trn_rec         IN OUT fms_vouchers_pkg.tgl_rec_type,
        v_pdl_code               NUMBER,
        v_unit_code              NUMBER,
        v_location_code          NUMBER)
    IS
        v_ref3   NUMBER;
    BEGIN
        BEGIN
            --RAISE_ERROR('2...');
            IF v_acc_number1 IS NULL OR v_acc_number2 IS NULL
            THEN
                raise_error (
                       'NULL A/cs...Ac1='
                    || v_acc_number1
                    || ';Ac2='
                    || v_acc_number2
                    || ';'
                    || v_narrative);
            ELSE
                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                       || gin_ref3_seq.NEXTVAL
                  INTO v_ref3
                  FROM DUAL;

                INSERT INTO gin_interface_table (itb_ref3,
                                                 itb_date,
                                                 itb_ggt_trans_no,
                                                 itb_trnt_code,
                                                 itb_raised_by,
                                                 itb_count,
                                                 itb_pol_batch_no,
                                                 itb_scl_code,
                                                 itb_vchr_no,
                                                 itb_trans_type,
                                                 itb_amount,
                                                 itb_narrative,
                                                 itb_acc_number,
                                                 itb_acc_number2,
                                                 itb_drcr,
                                                 itb_brn_code,
                                                 itb_pdl_code,
                                                 itb_unit_code,
                                                 itb_location_code)
                     VALUES (v_ref3,
                             SYSDATE,
                             v_trans_no,
                             v_trans_code,
                             v_raise_by,
                             v_count,
                             v_pol_code,
                             v_prod_code,
                             v_vchr_no,
                             'APPEND_GL',
                             v_amount,
                             v_narrative,
                             v_acc_number1,
                             v_acc_number2,
                             v_drcr,
                             v_branch_code,
                             v_pdl_code,
                             v_unit_code,
                             v_location_code);
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('INS_Append_GL.2.');
        END;

        BEGIN
            fms_vouchers_pkg.append_gl_trans (v_count,
                                              v_narrative,
                                              v_amount,
                                              v_drcr,
                                              v_acc_number1,
                                              v_acc_number2,
                                              v_branch_code,
                                              v_trn_rec,
                                              v_ref3,
                                              NULL,
                                              NULL,
                                              NULL,
                                              NULL,
                                              v_unit_code,
                                              v_location_code);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Append_GL.2.');
        END;
    END interface_append_gl;

    PROCEDURE interface_update_vgl (
        v_trans_no                 NUMBER,
        v_trans_code               VARCHAR2,
        v_raise_by                 VARCHAR2,
        v_pol_code                 NUMBER,
        v_date                     DATE,
        v_opr_code                 NUMBER,
        v_oppr_code                NUMBER,
        v_btc_description          VARCHAR2,
        v_btc_type                 VARCHAR2,
        v_branch_code              NUMBER,
        v_description              VARCHAR2,
        v_ref                      VARCHAR2,
        v_gl_trans          IN OUT fms_vouchers_pkg.tgl_rec_type,
        v_uw_or_clm                VARCHAR2,
        v_agent_code               NUMBER,
        v_cur_code                 NUMBER,
        v_curr_rate                NUMBER,
        v_pdl_code                 NUMBER,
        v_unit_code                NUMBER,
        v_location_code            NUMBER)
    IS
        v_ref3     NUMBER;
        v_no       NUMBER;
        v_vgl_no   NUMBER;
        v_req_by   NUMBER;
    BEGIN
        v_req_by := fms_interfaces_pkg.get_usercode (v_raise_by);

        BEGIN
            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                   || gin_ref3_seq.NEXTVAL
              INTO v_ref3
              FROM DUAL;

            INSERT INTO gin_interface_table (itb_ref3,
                                             itb_date,
                                             itb_ggt_trans_no,
                                             itb_trnt_code,
                                             itb_raised_by,
                                             itb_pol_batch_no,
                                             itb_trans_type,
                                             itb_narrative,
                                             itb_brn_code,
                                             itb_batch_desc,
                                             itb_batch_type,
                                             itb_ref,
                                             itb_vgl_post_date,
                                             itb_curr_rate,
                                             itb_pdl_code,
                                             itb_unit_code,
                                             itb_location_code)
                 VALUES (v_ref3,
                         SYSDATE,
                         v_trans_no,
                         v_trans_code,
                         v_raise_by,
                         v_pol_code,
                         'UPDATE_VGL',
                         v_description,
                         v_branch_code,
                         v_btc_description,
                         v_btc_type,
                         v_ref,
                         NVL (v_date, SYSDATE),
                         v_curr_rate,
                         v_pdl_code,
                         v_unit_code,
                         v_location_code);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('INS_Update_Vgl..');
        END;

        BEGIN
            -- raise_error('v_gl_trans=='||v_gl_trans);
            v_vgl_no :=
                fms_interfaces_pkg.update_vgl (v_btc_description, --v_btc_description
                                               v_btc_type,        --v_btc_type
                                               v_branch_code,     --v_brh_code
                                               NVL (v_date, SYSDATE),   --v_dt
                                               v_description,  --v_description
                                               v_ref,                  --v_ref
                                               v_req_by,         --v_raised_by
                                               v_cur_code,        --v_cur_code
                                               v_gl_trans,           --v_trans
                                               v_trans_no,      --v_trans code
                                               v_ref3,
                                               v_curr_rate);          --v_ref3
            fms_interfaces_pkg.post_je (v_vgl_no, v_req_by);
            v_gl_trans.DELETE;

            IF v_vgl_no IS NULL
            THEN
                INSERT INTO gin_gl_trans_not_posted (gltran_tran_no,
                                                     description,
                                                     user_name,
                                                     agent_code,
                                                     uw_or_clm)
                     VALUES (v_trans_code,
                             v_description,
                             v_raise_by,
                             v_agent_code,
                             v_uw_or_clm);
            ELSE
                UPDATE gin_interface_table
                   SET itb_vgl_no = v_vgl_no
                 WHERE itb_ref3 = v_ref3;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE_ERROR ('U=' || SQLERRM (SQLCODE));
        END;
    END interface_update_vgl;

    PROCEDURE interface_create_reqn (
        v_trans_no                        NUMBER,
        v_trans_code                      VARCHAR2,
        v_ref                             VARCHAR2,
        v_ref2                            VARCHAR2,
        v_ref_date                        DATE,
        v_narrative                       VARCHAR2,
        v_amount                          NUMBER,
        v_payee                           VARCHAR2,
        v_pay_method                      VARCHAR2,                 --CHQ, EFT
        v_payee_bank_acc_no               VARCHAR2,
        v_payee_bank_branch_code          NUMBER,
        v_source_auth_by                  VARCHAR2,
        v_source_auth_dt                  DATE,
        v_raise_by                        VARCHAR2,
        v_pmt_type                        VARCHAR2,
        v_branch_code                     NUMBER,
        v_pol_code                        NUMBER,
        v_dtls_table               IN OUT fms_cheques_pkg.type_rqn_dtls_table,
        v_cur_code                 IN     NUMBER)
    IS
        v_ref3               NUMBER;
        v_sys_code           NUMBER;
        v_bank_code          NUMBER;
        v_bank_branch_code   NUMBER;
        v_org_code           NUMBER;
        v_eft_enabled        VARCHAR2 (1);
        v_auth_by            NUMBER;
        v_req_by             NUMBER;
        v_no                 NUMBER := 1;
        v_policy_no          VARCHAR2 (30);
        v_payee_eft_rec      fms_cheques_pkg.type_payee_eft_table;
        v_cur_rate           NUMBER;
        v_bct_code           NUMBER;
    BEGIN
        v_sys_code := fms_interfaces_pkg.systemcode ('GIS');
        v_org_code := fms_interfaces_pkg.get_org (v_branch_code);
        fms_interfaces_pkg.trans_bct (v_pmt_type,
                                      v_sys_code,
                                      v_branch_code,
                                      v_cur_code,
                                      v_bank_code,
                                      v_bank_branch_code,
                                      v_pay_method);
        v_auth_by := fms_interfaces_pkg.get_usercode (v_source_auth_by);
        v_req_by := fms_interfaces_pkg.get_usercode (v_raise_by);

        IF NVL (v_pay_method, 'CHQ') = 'EFT'
        THEN
            BEGIN
                v_eft_enabled := 'N';

                IF v_payee_bank_acc_no IS NOT NULL
                THEN
                    v_eft_enabled :=
                        account_enabled (v_payee_bank_branch_code);

                    IF v_eft_enabled = 'N'
                    THEN
                        raise_error (
                            'BANK BRANCH NOT ENABLED TO TRANSACT EFT PYMT...');
                    END IF;
                ELSE
                    raise_error ('PAYEE BANK A/C UNDEFINED...');
                END IF;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('GETTING BANK ACC INFO...');
            END;
        END IF;

        BEGIN
            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                   || gin_ref3_seq.NEXTVAL
              INTO v_ref3
              FROM DUAL;

            INSERT INTO gin_interface_table (itb_ref3,
                                             itb_date,
                                             itb_ggt_trans_no,
                                             itb_ref,
                                             itb_ref2,
                                             itb_ref_date,
                                             itb_trans_type,
                                             itb_narrative,
                                             itb_amount,
                                             itb_payee,
                                             itb_pay_method,
                                             itb_payee_bank_acc_no,
                                             itb_payee_bank_branch_code,
                                             itb_source_auth_by,
                                             itb_source_auth_dt,
                                             itb_raised_by,
                                             itb_pymt_type,
                                             itb_brn_code,
                                             itb_bank_code,
                                             itb_bank_branch_code,
                                             itb_pol_batch_no,
                                             itb_req_by,
                                             itb_cur_code,
                                             itb_eft_count)
                 VALUES (v_ref3,
                         SYSDATE,
                         v_trans_code,
                         v_ref,
                         v_ref2,
                         v_ref_date,
                         NVL (v_pay_method, 'CHQ') || '_REQN',
                         v_narrative,
                         v_amount,
                         v_payee,
                         v_pay_method,
                         v_payee_bank_acc_no,
                         v_payee_bank_branch_code,
                         v_auth_by,
                         v_source_auth_dt,
                         v_raise_by,
                         v_pmt_type,
                         v_branch_code,
                         v_bank_code,
                         v_bank_branch_code,
                         v_pol_code,
                         v_req_by,
                         v_cur_code,
                         v_no);
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('INS_CREATE_REQN...');
        END;

        IF NVL (v_pay_method, 'CHQ') = 'EFT'
        THEN
            BEGIN
                v_payee_eft_rec.DELETE;
                v_payee_eft_rec (v_no) :=
                    fms_cheques_pkg.append_eft_payees (
                        v_no,
                        v_ref,
                        v_amount,
                        v_payee,
                        v_payee_bank_branch_code,
                        v_payee_bank_acc_no,
                        v_ref2,
                        v_policy_no);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('EFT PAYEE...');
            END;

            BEGIN
                FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                    v_sys_code,                               -- v_cqr_source,
                    v_ref,                                       -- v_cqr_ref,
                    v_ref2,                                     -- v_cqr_ref2,
                    v_ref_date,                             -- v_cqr_ref_date,
                    v_narrative,                           -- v_cqr_narrative,
                    v_branch_code,                          -- v_cqr_brh_code,
                    v_bank_branch_code,                 -- v_cqr_bct_brh_code,
                    v_amount,                                 -- v_cqr_amount,
                    v_payee,                                   -- v_cqr_payee,
                    v_pay_method,                         -- v_cqr_pay_method,
                    v_cur_code,                             -- v_cqr_cur_code,
                    v_cur_rate,                             ---i.cpv_cur_rate,
                    v_bct_code,                                            ---
                    v_auth_by,                        -- v_cqr_source_auth_by,
                    v_source_auth_dt,                 -- v_cqr_source_auth_dt,
                    v_req_by,                                 -- v_cqr_req_by,
                    v_pmt_type,                             -- v_cqr_pmt_type,
                    v_payee_bank_branch_code,              ---v_payee_bbr_code
                    v_payee_bank_acc_no,                      --v_payee_acc_no
                    v_dtls_table,                             -- v_dtls_table,
                    v_payee_eft_rec,                         --v_payee_eft_rec
                    NULL,                             --v_cqr_physical_address
                    NULL,                              ---v_cqr_postal_address
                    v_trans_no,                            --v_itfc_trans_code
                    v_ref3,                                      --v_itfc_ref3
                    NULL,                                 --v_payee_source_pk,
                    NULL,                               --v_payee_source_type,
                    'N',                                        --v_auto_auth,
                    NULL,                                       --v_num_val_1,
                    NULL,                                     ---v_invoice_no,
                    NULL,                                   ---v_invoice_date,
                    NULL,                               ---v_auto_consolidate,
                    NULL,                                       ---v_batch_no,
                    NULL                                   ---v_payee_spr_code
                        );
            --            fms_cheques_pkg.create_reqn
            --                                   (v_sys_code,               -- v_cqr_source,
            --                                    v_ref,                       -- v_cqr_ref,
            --                                    v_ref2,                     -- v_cqr_ref2,
            --                                    v_ref_date,             -- v_cqr_ref_date,
            --                                    v_narrative,           -- v_cqr_narrative,
            --                                    v_branch_code,          -- v_cqr_brh_code,
            --                                    v_bank_branch_code, -- v_cqr_bct_brh_code,
            --                                    v_amount,                 -- v_cqr_amount,
            --                                    v_payee,                   -- v_cqr_payee,
            --                                    v_pay_method,         -- v_cqr_pay_method,
            --                                    NULL,             -- v_cqr_pay_bnk_acc_no,
            --                                    NULL,        -- v_cqr_pay_bnk_branch_code,
            --                                    v_cur_code,             -- v_cqr_cur_code,
            --                                    v_bank_code,            -- v_cqr_bct_code,
            --                                    v_auth_by,        -- v_cqr_source_auth_by,
            --                                    v_source_auth_dt, -- v_cqr_source_auth_dt,
            --                                    v_req_by,                 -- v_cqr_req_by,
            --                                    v_pmt_type,             -- v_cqr_pmt_type,
            --                                    v_dtls_table,             -- v_dtls_table,
            --                                    v_payee_eft_rec,         --v_payee_eft_rec
            --                                    NULL,           -- v_cqr_physical_address,
            --                                    NULL,             -- v_cqr_postal_address,
            --                                    NULL,                   -- v_use_bnk_code,
            --                                    v_trans_no,          -- v_itfc_trans_code,
            --                                    v_ref3
            --                                   );                          -- v_itfc_ref3,
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('CREATE_EFT_REQN...');
            END;
        ELSE
            BEGIN
                --            fms_cheques_pkg.create_reqn
                --                      (v_sys_code,                            -- v_cqr_source,
                --                       v_ref,                                    -- v_cqr_ref,
                --                       v_ref2,                                  -- v_cqr_ref2,
                --                       v_ref_date,                          -- v_cqr_ref_date,
                --                       v_narrative,                        -- v_cqr_narrative,
                --                       v_branch_code,                       -- v_cqr_brh_code,
                --                       v_bank_branch_code,              -- v_cqr_bct_brh_code,
                --                       v_amount,                              -- v_cqr_amount,
                --                       v_payee,                                -- v_cqr_payee,
                --                       v_pay_method,                      -- v_cqr_pay_method,
                --                       v_payee_bank_acc_no,           -- v_cqr_pay_bnk_acc_no,
                --                       v_payee_bank_branch_code, -- v_cqr_pay_bnk_branch_code,
                --                       v_cur_code,                          -- v_cqr_cur_code,
                --                       v_bank_code,                         -- v_cqr_bct_code,
                --                       v_auth_by,                     -- v_cqr_source_auth_by,
                --                       v_source_auth_dt,              -- v_cqr_source_auth_dt,
                --                       v_req_by,                              -- v_cqr_req_by,
                --                       v_pmt_type,                          -- v_cqr_pmt_type,
                --                       v_dtls_table,                          -- v_dtls_table,
                --                       NULL,                        -- v_cqr_physical_address,
                --                       NULL,                          -- v_cqr_postal_address,
                --                       v_trans_no,                       -- v_itfc_trans_code,
                --                       v_ref3
                --                      );

                FMS_INTERFACES_PKG.create_Chq_reqn (
                    v_sys_code,
                    v_ref,                                               --ref
                    v_ref2,                                           -- ref2,
                    v_ref_date,                                           ----
                    v_narrative,                                          ----
                    --'GIS Claim',             --narrative V
                    v_branch_code,                                       -----
                    v_bank_branch_code,                                   ----
                    v_amount,                                             ----
                    --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
                    v_payee,                                              ----
                    v_pay_method,                                         ----
                    v_cur_code,
                    v_cur_rate,                             ---i.cpv_cur_rate,
                    v_bct_code,                                            ---
                    fms_interfaces_pkg.get_usercode (
                        UPPER (v_source_auth_by)),                        ----
                    v_source_auth_dt,                                    -----
                    v_auth_by, --v_user_code,   ----                           --v_cqr_req_by  ,
                    NULL, --'GIS-CLAIM',   ----                              -- pmt_type  ,
                    v_dtls_table,                                         ----
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('CREATE_CHQ_REQN...');
            END;
        END IF;
    END interface_create_reqn;

    FUNCTION getpolicyno (v_drcr_no VARCHAR2)
        RETURN VARCHAR2
    IS
        v_pol_policy_no   gin_policies.pol_policy_no%TYPE;
    BEGIN
        SELECT pol_policy_no
          INTO v_pol_policy_no
          FROM gin_policies
         WHERE pol_ren_endos_no = v_drcr_no;

        RETURN v_pol_policy_no;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            BEGIN
                SELECT pol_policy_no
                  INTO v_pol_policy_no
                  FROM gin_policies
                 WHERE pol_drcr_no = v_drcr_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    BEGIN
                        SELECT pol_policy_no
                          INTO v_pol_policy_no
                          FROM gin_policies
                         WHERE pol_batch_no = TO_NUMBER (v_drcr_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            NULL;
                    END;
                WHEN OTHERS
                THEN
                    NULL;
            END;

            RETURN v_pol_policy_no;
        WHEN TOO_MANY_ROWS
        THEN
            RETURN NULL;
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'Error getting policy number:= Debit= ' || v_drcr_no);
    END;

    FUNCTION getpolicybatchno (v_drcr_no VARCHAR2)
        RETURN NUMBER
    IS
        v_pol_batch_no   gin_policies.pol_batch_no%TYPE;
    BEGIN
        SELECT pol_batch_no
          INTO v_pol_batch_no
          FROM gin_policies
         WHERE pol_drcr_no = v_drcr_no;

        RETURN v_pol_batch_no;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            BEGIN
                SELECT pol_batch_no
                  INTO v_pol_batch_no
                  FROM gin_policies
                 WHERE pol_ren_endos_no = v_drcr_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    BEGIN
                        SELECT pol_batch_no
                          INTO v_pol_batch_no
                          FROM gin_policies
                         WHERE pol_batch_no = TO_NUMBER (v_drcr_no);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            NULL;
                    END;
                WHEN OTHERS
                THEN
                    NULL;
            END;

            RETURN v_pol_batch_no;
        WHEN TOO_MANY_ROWS
        THEN
            RETURN NULL;
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'Error getting policy batch number:= Debit= ' || v_drcr_no);
    END;

    FUNCTION check_if_transmital_full (v_pol_batch_no NUMBER)
        RETURN VARCHAR2
    IS
        v_total_transmital   NUMBER;

        CURSOR cur_pol IS
            SELECT *
              FROM gin_policies
             WHERE pol_batch_no = v_pol_batch_no;

        v_pol_comm_amt       NUMBER;
        v_net_due            NUMBER;
        v_gross_due          NUMBER;
        v_exhange_rate       NUMBER;
        v_client_acc         VARCHAR2 (30);
        v_client_gl_acc      VARCHAR2 (30);
        v_client_code        NUMBER;
        v_client_type        VARCHAR2 (1);
        v_clnt_gl_acc        tqc_agencies.agn_acc_no%TYPE;
        v_act_code           tqc_agencies.agn_act_code%TYPE;
        v_rnd                NUMBER;
        v_bcur_rnd           NUMBER;
    BEGIN
        FOR cur_pol_rec IN cur_pol
        LOOP
            IF NVL (cur_pol_rec.pol_exch_rate_fixed, 'N') = 'N'
            THEN
                v_exhange_rate := 1;
                v_exhange_rate :=
                    get_currexch_rate (cur_pol_rec.pol_cur_code,
                                       v_rnd,
                                       v_bcur_rnd);
            ELSE                                 -- TO TAKE CARE OF FIXED RATE
                v_exhange_rate :=
                    get_currexch_rate (cur_pol_rec.pol_cur_code,
                                       v_rnd,
                                       v_bcur_rnd);
                v_exhange_rate := cur_pol_rec.pol_cur_rate;
            END IF;

            BEGIN
                SELECT agn_sht_desc, agn_acc_no, agn_act_code
                  INTO v_client_acc, v_client_gl_acc, v_act_code
                  FROM tqc_agencies
                 WHERE agn_code = cur_pol_rec.pol_agnt_agent_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (SQLERRM (SQLCODE));
            END;

            IF     cur_pol_rec.pol_agnt_agent_code = 0
               AND cur_pol_rec.pol_mktr_agn_code IS NOT NULL
            THEN                      -- HANDLING MARKETING COMMISSION POSTING
                IF SIGN (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0)) = -1
                THEN
                    v_pol_comm_amt :=
                          ROUND (NVL (cur_pol_rec.pol_mktr_com_amt, 0),
                                 v_rnd)
                        - ROUND (ABS (NVL (cur_pol_rec.pol_wtht, 0)), v_rnd);
                ELSE
                    v_pol_comm_amt :=
                          ROUND (NVL (cur_pol_rec.pol_mktr_com_amt, 0),
                                 v_rnd)
                        + ROUND (ABS (NVL (cur_pol_rec.pol_wtht, 0)), v_rnd);
                END IF;
            ELSIF v_act_code != 0
            THEN
                IF SIGN (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0)) = -1
                THEN
                    v_pol_comm_amt :=
                          ROUND (
                              NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0),
                              v_rnd)
                        - ROUND (ABS (NVL (cur_pol_rec.pol_wtht, 0)), v_rnd);
                --+ ROUND (NVL (cur_pol_rec.pol_vat_amt, 0), v_rnd);
                ELSE
                    v_pol_comm_amt :=
                          ROUND (
                              NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0),
                              v_rnd)
                        + ROUND (ABS (NVL (cur_pol_rec.pol_wtht, 0)), v_rnd);
                --+ ROUND (NVL (cur_pol_rec.pol_vat_amt, 0), v_rnd);
                END IF;
            ELSE
                IF SIGN (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0)) = -1
                THEN
                    v_pol_comm_amt :=
                          ROUND (
                              NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0),
                              v_rnd)
                        - ROUND (ABS (NVL (cur_pol_rec.pol_wtht, 0)), v_rnd);
                ELSE
                    v_pol_comm_amt :=
                          ROUND (
                              NVL (cur_pol_rec.pol_comm_endos_diff_amt, 0),
                              v_rnd)
                        + ROUND (ABS (NVL (cur_pol_rec.pol_wtht, 0)), v_rnd);
                END IF;
            END IF;

            IF v_act_code = 3
            THEN
                IF SIGN (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0)) = -1
                THEN
                    v_net_due :=
                          ROUND (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0),
                                 v_rnd)
                        + v_pol_comm_amt                                   --;
                        + ROUND (NVL (cur_pol_rec.pol_vat_amt, 0), v_rnd);
                ELSE
                    v_net_due :=
                          ROUND (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0),
                                 v_rnd)
                        + v_pol_comm_amt                                   --;
                        + ROUND (NVL (cur_pol_rec.pol_vat_amt, 0), v_rnd);
                END IF;
            ELSE
                IF SIGN (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0)) = -1
                THEN
                    v_net_due :=
                          ROUND (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0),
                                 v_rnd)
                        + v_pol_comm_amt;
                ELSE
                    v_net_due :=
                          ROUND (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0),
                                 v_rnd)
                        + v_pol_comm_amt;
                END IF;
            END IF;

            v_gross_due :=
                  ROUND (NVL (cur_pol_rec.pol_tot_endos_diff_amt, 0), v_rnd)
                + +ROUND (NVL (cur_pol_rec.pol_tl, 0), v_rnd)
                + ROUND (NVL (cur_pol_rec.pol_duties, 0), v_rnd)
                + ROUND (NVL (cur_pol_rec.pol_extras, 0), v_rnd)
                + ROUND (NVL (cur_pol_rec.pol_phfund, 0), v_rnd);
            v_net_due :=
                  NVL (v_net_due, 0)
                + ROUND (NVL (cur_pol_rec.pol_tl, 0), v_rnd)
                + ROUND (NVL (cur_pol_rec.pol_duties, 0), v_rnd)
                + ROUND (NVL (cur_pol_rec.pol_extras, 0), v_rnd)
                + ROUND (NVL (cur_pol_rec.pol_phfund, 0), v_rnd);
        END LOOP;

        SELECT SUM (tt_amount)
          INTO v_total_transmital
          FROM gin_transmital_trans
         WHERE tt_pol_batch_no = v_pol_batch_no AND tt_authorised = 'Y';

        IF NVL (v_net_due, 0) = 0
        THEN
            raise_error ('Premium Cannot be 0');
        END IF;

        IF NVL (v_total_transmital, 0) = 0
        THEN
            raise_error ('Total Amount for Transmittals Cannot be 0');
        END IF;

        IF v_gross_due = v_total_transmital
        THEN
            RETURN 'Y';
        END IF;

        RETURN 'N';
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'Error getting Transmittal total= ' || v_net_due);
    END;

    FUNCTION module_enabled (vmodule IN VARCHAR2)
        RETURN BOOLEAN
    IS
        vrtn   BOOLEAN := FALSE;                          --   VARCHAR2 (100);
    BEGIN
        IF UPPER (vmodule) = 'SMS'
        THEN
            vrtn := TRUE;
        ELSIF UPPER (vmodule) = 'EMAIL'
        THEN
            vrtn := TRUE;
        ELSIF UPPER (vmodule) = 'DMS'
        THEN
            vrtn := FALSE;
        END IF;

        RETURN vrtn;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN NULL;
    END module_enabled;

    PROCEDURE valid_acc (v_acc_no     VARCHAR2,
                         v_org_code   NUMBER,
                         v_brh_code   NUMBER)
    IS
        v_brh_name   VARCHAR2 (100);
    BEGIN
        IF fms_interfaces_pkg.valid_trns_acc (v_acc_no,
                                              v_org_code,
                                              v_brh_code) =
           FALSE
        THEN
            v_brh_name := fms_interfaces_pkg.brh_name (v_brh_code);
            raise_application_error (
                -20001,
                   'ACCOUNT '
                || v_acc_no
                || ' IS UNDEFINED IN '
                || v_brh_name
                || ' .CONTACT SYSTEM ADMIN.');
        END IF;
    END valid_acc;

    FUNCTION gis_def_cur (v_brh NUMBER)
        RETURN NUMBER
    IS
        v_ret_val   NUMBER;
    BEGIN
        SELECT org_cur_code
          INTO v_ret_val
          FROM tqc_organizations
         WHERE org_code = 2;

        --v_ret_val := 1;
        RETURN v_ret_val;
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR GETTING DEFAULT GIS CURRENCY  ' || SQLERRM (SQLCODE));
    END;

    FUNCTION agency_query (v_acc_id       VARCHAR2,
                           v_name         VARCHAR2 DEFAULT NULL,
                           v_pol_prp_no   VARCHAR2 DEFAULT NULL,
                           v_acc_no       NUMBER DEFAULT NULL,
                           v_dr_cr_no     VARCHAR2 DEFAULT NULL,
                           v_trans_no     NUMBER DEFAULT NULL)
        RETURN fms_interfaces_pkg.type_client_types_ref_cursor
    IS
        v_data          fms_interfaces_pkg.type_client_types_ref_cursor;
        v_acct_typeid   NUMBER;
    BEGIN
        v_acct_typeid := fms_interfaces_pkg.accountcode (v_acc_id);

        IF v_acct_typeid = 1
        THEN                                                            --'D''
            OPEN v_data FOR
                SELECT DISTINCT
                       clnt_code, clnt_name || ' ' || clnt_other_names, 'D'
                  FROM gin_policies, tqc_clients, gin_master_transactions
                 WHERE     mtran_client_code = clnt_code
                       AND clnt_name LIKE '%' || v_name || '%'
                       AND mtran_prp_code = pol_prp_code
                       AND pol_policy_no LIKE '%' || v_pol_prp_no || '%'
                       AND mtran_no LIKE '%' || v_trans_no || '%'
                       AND pol_drcr_no LIKE '%' || v_dr_cr_no || '%';
        --OR POL_PROPOSAL_NO  LIKE '%' ||v_pol_prp_no|| '%');
        ELSIF v_acct_typeid <> 1
        THEN
            OPEN v_data FOR SELECT agn_code, agn_sht_desc, v_acc_id
                              FROM tqc_agencies
                             WHERE agn_code != 0;
        --and agn_act_code = v_acc_id;
        END IF;

        RETURN v_data;
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_application_error (-20001,
                                     '..ERROR RETRIEVING AGENT NAME ..');
    END agency_query;

    FUNCTION accountname (v_act_code       NUMBER DEFAULT NULL,
                          v_ssl_act_code   NUMBER DEFAULT NULL)
        RETURN VARCHAR2
    IS
        v_rtval   VARCHAR2 (200) DEFAULT NULL;
    BEGIN
        /*IF v_ssl_act_code = 1 THEN
           select gin_proposers.prp_surname  into    v_rtval
           from gin_proposers where gin_proposers.prp_code = v_act_code;
         ELSIF v_ssl_act_code  <> 1 then
           select AGNT_SHT_DESC--gin_agents.agnt_agent_name
            into    v_rtval
           from gin_agents
           where gin_agents.agnt_agent_code = v_act_code;
        END IF;*/
        RETURN v_rtval;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN NULL;
        WHEN OTHERS
        THEN
            raise_application_error (-20001,
                                     '..ERROR RETRIEVING CLIENT NAME ..');
            RETURN NULL;
    END accountname;

    PROCEDURE trans_query (
        trans_data_rec   IN OUT fms_interfaces_pkg.type_trans_ref_cur,
        v_act_code       IN     NUMBER,
        v_act_type       IN     VARCHAR2)
    IS
    BEGIN
        OPEN trans_data_rec FOR
            SELECT mtran_no,
                   mtran_date,
                   mtran_ref_no,
                   mtran_other_ref,
                   mtran_tran_type,
                   mtran_dc,
                   mtran_client_type,
                   mtran_client_code,
                   mtran_amount,
                   mtran_balance,
                   mtran_narrations,
                   mtran_ggt_tran_no,
                   mtran_cur_rate,
                   mtran_doc_date
              FROM gin_master_transactions
             WHERE     mtran_balance > 0
                   AND mtran_client_code = v_act_code
                   --AND MTRAN_CLIENT_TYPE = DECODE(v_act_type,1,'D',5,'I',6,'R','A')
                   AND mtran_dc = 'D'
                   AND mtran_authorised = 'Y';
    END trans_query;

    FUNCTION interface_enabled (v_itfc_desc          VARCHAR2,
                                v_post_past_period   VARCHAR2 DEFAULT 'Y')
        RETURN VARCHAR2
    IS
        v_ret_val   VARCHAR2 (1) := 'N';
    BEGIN
        IF v_itfc_desc = 'CLM_PMT'
        THEN
            v_ret_val := 'Y';
        ELSIF v_itfc_desc = 'CLM_GL'
        THEN
            v_ret_val := 'Y';
        ELSIF v_itfc_desc = 'COMM_PMT'
        THEN
            v_ret_val := 'Y';
        ELSIF v_itfc_desc = 'UW_TRANS'
        THEN
            IF v_post_past_period = 'N'
            THEN
                v_ret_val := 'Y';
            ELSE
                v_ret_val := 'Y';
            END IF;
        ELSIF v_itfc_desc = 'HRMS'
        THEN
            v_ret_val := 'Y';
        END IF;

        v_ret_val := 'Y';
        RETURN v_ret_val;
    END;

    /************************UPDATE IN GIN_INTERFACES_PKG********************/
    --PROCEDURE update_claims (
    --      v_cqr_ref      IN   VARCHAR2,
    --      v_cqr_ref2     IN   VARCHAR2,
    --      v_cqr_chq_no   IN   VARCHAR2,
    --      v_cqr_chq_dt   IN   DATE,
    --      v_user_name    IN   VARCHAR2,
    --      v_cqr_amount   IN   NUMBER
    --   )
    --   IS
    --      v_status            gin_claim_master_bookings.cmb_claim_status%TYPE;
    --      v_recoveries        NUMBER                                         := 0;
    --      v_salvages          NUMBER                                         := 0;
    --      v_total_payments    NUMBER                                         := 0;
    --      v_ost_reserve       NUMBER;
    --      v_tot_reserve       NUMBER;
    --      v_credit_mtran_no   NUMBER;
    --      v_ggt_trans_no      NUMBER;
    --      v_authorised_by     VARCHAR2 (50);
    --      v_cr_amt            NUMBER (23, 5);
    --      v_cr_ref_no         VARCHAR2 (50);
    --      v_dr_mtran_no       NUMBER;
    --      v_cr_bal            NUMBER;
    --      v_cr_com            NUMBER;
    --      v_error             VARCHAR2 (200);
    --      v_authorised        VARCHAR2 (1);
    --      v_dr_ref_no         VARCHAR2 (50);
    --      v_auto_allocate     VARCHAR2 (1);
    --      v_clmr_code         NUMBER;
    --      v_clmr_tran_no      NUMBER;
    --      v_ipu_id            NUMBER;
    --      v_div_no            VARCHAR2 (10);
    --      v_tran_type         VARCHAR2 (5);
    --      v_cnt               NUMBER;
    --      v_coinsurance       VARCHAR2 (2);
    --      v_trans_no number;

    --      CURSOR all_claimnts
    --      IS
    --         SELECT reg_clmt_code
    --           FROM gin_rgstd_claimants
    --          WHERE reg_cmb_claim_no = v_cqr_ref2 AND reg_claim_status = 1
    --             OR reg_claim_status IS NULL;

    --      CURSOR voucher_dtls (v_voucher_no NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_voucher_details
    --          WHERE voud_cpv_voucher_no = v_voucher_no;

    --      CURSOR cur_claim_fee
    --      IS
    --         SELECT *
    --           FROM gin_clm_pymnt_tax_vouchers
    --          WHERE cptv_code = v_cqr_ref;

    --      CURSOR cur_claim_fee_dtls (v_cptv_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_clm_payment_vouchers
    --          WHERE cpv_cptv_code = v_cptv_code;
    --   BEGIN
    --      /*Separated claim payment from claims fee payment post updating from FMS*/
    --      BEGIN
    --         SELECT COUNT (1)
    --           INTO v_cnt
    --           FROM gin_clm_pymnt_tax_vouchers
    --          WHERE cptv_code = TO_NUMBER (v_cqr_ref);
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_cnt := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching claim voucher to contra...');
    --      END;

    --      IF NVL (v_cnt, 0) = 0
    --      THEN
    --         BEGIN
    --             SELECT CPV_GGT_TRANS_NO
    --             INTO v_trans_no
    --             FROM gin_clm_payment_vouchers
    --                 WHERE cpv_voucher_no = v_cqr_ref
    --                       AND cpv_cmb_claim_no = v_cqr_ref2;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error getting claim transaction number..');
    --         END;
    --
    ----         BEGIN
    ----            GIN_XOL_RECOVERIES. process_xol_new (
    ----                              v_cqr_ref2 ,
    ----                              TRUNC(SYSDATE),
    ----                              v_user_name,
    ----                               v_trans_no
    ----                           );
    ----             GIN_STP_CLAIMS_PKG.update_xol_auth_status(v_trans_no,'Y', v_user_name, TRUNC(SYSDATE)) ;
    ----         EXCEPTION
    ----            WHEN OTHERS
    ----            THEN
    ----               raise_error ('Error reprocessing XOL..');
    ----         END;

    --         BEGIN
    --
    --      ---INTRODUCED BY OLSON ON 20171208
    --      ----XOL CLAIM POSTINGS
    --         claim_xol_pymt_postings (
    --           v_cqr_ref2 ,
    --           v_trans_no,
    --           v_user_name
    --        );
    --
    --             GIN_STP_CLAIMS_PKG.update_xol_auth_status(v_trans_no,'Y', v_user_name, TRUNC(SYSDATE)) ;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error reprocessing XOL..');
    --         END;
    --         BEGIN
    --            UPDATE gin_clm_payment_vouchers
    --               SET cpv_authorised = 'Y',
    --                   cpv_authorised_dt = TRUNC (SYSDATE),
    --                   cpv_cheque_no = v_cqr_chq_no,
    --                   cpv_cheque_date = v_cqr_chq_dt,
    --                   cpv_chq_update_by = v_user_name,
    --                   cpv_chq_update_date = TRUNC (SYSDATE),
    --                   cpv_chq_amt = v_cqr_amount
    --             WHERE cpv_voucher_no = v_cqr_ref
    --                   AND cpv_cmb_claim_no = v_cqr_ref2;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('ERROR POST UPDATING PAYMENT VOUCHER...');
    --         END;

    --         BEGIN
    --            SELECT cpv_authorised_by, NVL (cpv_rein_amount, 0),
    --                   cpv_ggt_trans_no, cpv_auto_allocate, cpv_div_no
    --              INTO v_authorised_by, v_cr_amt,
    --                   v_ggt_trans_no, v_auto_allocate, v_div_no
    --              FROM gin_clm_payment_vouchers
    --             WHERE cpv_voucher_no = v_cqr_ref
    --                   AND cpv_cmb_claim_no = v_cqr_ref2;

    --            UPDATE gin_rgstd_clmts_dv
    --               SET rgcld_div_status = 4
    --             WHERE rgcld_div_no = v_div_no;

    --            SELECT cmb_coinsurance
    --              INTO v_coinsurance
    --              FROM gin_claim_master_bookings
    --             WHERE cmb_claim_no = v_cqr_ref2;

    --            FOR voucher_rec IN voucher_dtls (v_cqr_ref)
    --            LOOP
    --               IF NVL (voucher_rec.voud_salv_amt, 0) > 0
    --               THEN
    --                  gin_stp_claims_pkg.create_clm_salv_recovry
    --                                                 (v_cqr_ref2,
    --                                                  'Salvage',
    --                                                  'Salvage',
    --                                                  'S',
    --                                                  'Salvage',
    --                                                  voucher_rec.voud_per_code,
    --                                                  voucher_rec.voud_salv_amt,
    --                                                  v_authorised_by,
    --                                                  voucher_rec.voud_clmp_code,
    --                                                  v_clmr_code,
    --                                                  'CS',
    --                                                  'Y'
    --                                                 );

    --                  SELECT clmr_ggt_trans_no
    --                    INTO v_clmr_tran_no
    --                    FROM gin_claim_recoveries
    --                   WHERE clmr_code = v_clmr_code;

    --                  gin_stp_claims_pkg.auth_salv_recvry_trans (v_cqr_ref2,
    --                                                             v_clmr_code,
    --                                                             v_clmr_tran_no,
    --                                                             v_authorised_by
    --                                                            );
    --               END IF;

    --               --        RAISE_ERROR('ERROR=='||voucher_rec.voud_excess_allowed||';'||voucher_rec.voud_excess_amt);
    --               IF NVL (voucher_rec.voud_excess_allowed, 'N') = 'Y'
    --               THEN
    --                  IF NVL (voucher_rec.voud_excess_amt, 0) > 0
    --                  THEN
    --                     gin_stp_claims_pkg.create_clm_salv_recovry
    --                                                (v_cqr_ref2,
    --                                                 'excess Recovery',
    --                                                 'Excess',
    --                                                 'R',
    --                                                 'Excess',
    --                                                 voucher_rec.voud_per_code,
    --                                                 voucher_rec.voud_excess_amt,
    --                                                 v_authorised_by,
    --                                                 voucher_rec.voud_clmp_code,
    --                                                 v_clmr_code,
    --                                                 'CR',
    --                                                 'Y'
    --                                                );

    --                     SELECT clmr_ggt_trans_no
    --                       INTO v_clmr_tran_no
    --                       FROM gin_claim_recoveries
    --                      WHERE clmr_code = v_clmr_code;

    --                     gin_stp_claims_pkg.auth_salv_recvry_trans
    --                                                              (v_cqr_ref2,
    --                                                               v_clmr_code,
    --                                                               v_clmr_tran_no,
    --                                                               v_authorised_by
    --                                                              );
    --                  END IF;
    --               END IF;
    --            END LOOP;                             -- RAISE_ERROR('TOAST....');

    --            IF NVL (v_cr_amt, 0) > 0
    --            THEN
    --               IF NVL (v_auto_allocate, 'N') = 'Y'
    --               THEN
    --                  gin_stp_claims_pkg.post_credit_payments (v_cqr_ref2,
    --                                                           v_ggt_trans_no,
    --                                                           v_authorised_by,
    --                                                           v_credit_mtran_no,
    --                                                           'Y'
    --                                                          );

    --                  --               gin_interfaces_pkg.process_rein_clm_creditnote(v_cqr_ref2,
    --                  --                                                        v_ggt_trans_no,
    --                  --                                                        v_authorised_by,
    --                  --                                                        TRUNC (SYSDATE)
    --                  --                                                       );
    --                  SELECT mtran_ref_no
    --                    INTO v_cr_ref_no
    --                    FROM gin_master_transactions
    --                   WHERE mtran_no = v_credit_mtran_no;

    --                  gin_stp_claims_pkg.process_reinstatements (v_cqr_ref2,
    --                                                             v_authorised_by,
    --                                                             v_cr_amt,
    --                                                             v_dr_mtran_no
    --                                                            );

    --                  SELECT mtran_ref_no
    --                    INTO v_dr_ref_no
    --                    FROM gin_master_transactions
    --                   WHERE mtran_no = v_dr_mtran_no;

    --                  gis_accounts_utilities.knock_trans (v_credit_mtran_no,
    --                                                      v_cr_ref_no,
    --                                                      v_dr_mtran_no,
    --                                                      v_dr_ref_no,
    --                                                      SYSDATE,
    --                                                      v_cr_amt
    --                                                     );
    --               END IF;
    --            END IF;
    ----         EXCEPTION
    ----            WHEN OTHERS
    ----            THEN
    ----               raise_error (   'Error reinstating the Transaction...'
    ----                            || v_ggt_trans_no
    ----                            || ' v_cqr_ref2 '
    ----                            || v_cqr_ref2
    ----                            || SQLERRM (SQLCODE)
    ----                           );
    --         END;

    --         BEGIN
    --            SELECT cmb_claim_status, cmb_ipu_id
    --              INTO v_status, v_ipu_id
    --              FROM gin_claim_master_bookings
    --             WHERE cmb_claim_no = v_cqr_ref2;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               v_status := 'P';
    --         END;

    --         IF v_status NOT IN ('S', 'N')
    --         THEN
    --            IF NVL (v_coinsurance, 'N') = 'Y'
    --            THEN
    --               BEGIN
    --                  gin_claim_coin_summary_proc.get_claim_summary
    --                                                           (v_cqr_ref2,
    --                                                            v_tot_reserve,
    --                                                            v_recoveries,
    --                                                            v_salvages,
    --                                                            v_total_payments,
    --                                                            v_ost_reserve
    --                                                           );
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --               END;
    --            ELSE
    --               v_ost_reserve :=
    --                                    GET_OS_RESERVE(v_cqr_ref2);
    --                      --gin_stp_claims_pkg.get_clm_os_reserve (v_cqr_ref2, 'N');
    --            END IF;

    --            IF v_ost_reserve = 0 OR v_ost_reserve IS NULL
    --            THEN
    --               FOR cur_all_claimnts_rec IN all_claimnts
    --               LOOP
    --                  UPDATE gin_rgstd_claimants
    --                     SET reg_claim_status = 3
    --                   WHERE reg_clmt_code = cur_all_claimnts_rec.reg_clmt_code;
    --               END LOOP;

    --               UPDATE gin_claim_master_bookings
    --                  SET cmb_claim_status = 'S',
    --                      cmb_close_date = TRUNC (SYSDATE),
    --                      cmb_status_date = TRUNC (SYSDATE)
    --                WHERE cmb_claim_no = v_cqr_ref2;
    --            END IF;
    --         END IF;
    --      ELSIF NVL (v_cnt, 0) > 0
    --      THEN
    --         FOR c IN cur_claim_fee
    --         LOOP
    --            --raise_Error('1v_cnt='||v_cnt);
    --            FOR i IN cur_claim_fee_dtls (c.cptv_code)
    --            LOOP
    --               --raise_Error('2v_cnt='||v_cnt);
    --               BEGIN
    --                  UPDATE gin_clm_payment_vouchers
    --                     SET cpv_authorised = 'Y',
    --                         cpv_authorised_dt = TRUNC (SYSDATE),
    --                         cpv_cheque_no = v_cqr_chq_no,
    --                         cpv_cheque_date = v_cqr_chq_dt,
    --                         cpv_chq_update_by = v_user_name,
    --                         cpv_chq_update_date = TRUNC (SYSDATE)
    --                   WHERE cpv_cptv_code = v_cqr_ref;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR POST UPDATING PAYMENT VOUCHER...');
    --               END;
    --            END LOOP;

    --            BEGIN
    --               UPDATE gin_clm_pymnt_tax_vouchers
    --                  SET cptv_authorised = 'Y',
    --                      cptv_authorised_date = TRUNC (SYSDATE),
    --                      cptv_cheque_no = v_cqr_chq_no,
    --                      cptv_cheque_date = v_cqr_chq_dt,
    --                      cptv_chq_update_by = v_user_name,
    --                      cptv_chq_update_date = TRUNC (SYSDATE),
    --                      cptv_chq_amt = v_cqr_amount
    --                WHERE cptv_code = v_cqr_ref;
    --            --raise_error('v_cnt='||v_cnt);
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('ERROR POST UPDATING PAYMENT VOUCHER...');
    --            END;
    --         END LOOP;
    --      --raise_error('v_cnt33='||v_cnt);
    --      END IF;
    --
    --      --RAISE_eRROR('v_cnt='||v_cnt);
    --      gin_manage_alerts_pkg.proc_clmpaidtotalloss_alert (v_cqr_ref2,
    --                                                         v_ggt_trans_no,
    --                                                         v_authorised_by
    --                                                        );
    --      gin_manage_alerts_pkg.proc_xol_alert (v_cqr_ref2,
    --                                            'CP',
    --                                            v_ggt_trans_no,
    --                                            v_authorised_by
    --                                           );
    --      gin_manage_alerts_pkg.proc_xolclmpaid_alert (v_cqr_ref2,
    --                                                   'CP',
    --                                                   v_ggt_trans_no,
    --                                                   v_authorised_by
    --                                                  );
    --   --raise_error('AFTER ALERTS='||v_cr_amt||';'||v_auto_allocate);
    --   END update_claims;

    PROCEDURE update_claims (v_cqr_ref      IN VARCHAR2,
                             v_cqr_ref2     IN VARCHAR2,
                             v_cqr_chq_no   IN VARCHAR2,
                             v_cqr_chq_dt   IN DATE,
                             v_user_name    IN VARCHAR2,
                             v_cqr_amount   IN NUMBER)
    IS
        v_status            gin_claim_master_bookings.cmb_claim_status%TYPE;
        v_recoveries        NUMBER := 0;
        v_salvages          NUMBER := 0;
        v_total_payments    NUMBER := 0;
        v_ost_reserve       NUMBER;
        v_tot_reserve       NUMBER;
        v_credit_mtran_no   NUMBER;
        v_ggt_trans_no      NUMBER;
        v_authorised_by     VARCHAR2 (50);
        v_cr_amt            NUMBER (23, 5);
        v_cr_ref_no         VARCHAR2 (50);
        v_dr_mtran_no       NUMBER;
        v_cr_bal            NUMBER;
        v_cr_com            NUMBER;
        v_error             VARCHAR2 (200);
        v_authorised        VARCHAR2 (1);
        v_dr_ref_no         VARCHAR2 (50);
        v_auto_allocate     VARCHAR2 (1);
        v_clmr_code         NUMBER;
        v_clmr_tran_no      NUMBER;
        v_ipu_id            NUMBER;
        v_div_no            VARCHAR2 (10);
        v_tran_type         VARCHAR2 (5);
        v_cnt               NUMBER;
        v_coinsurance       VARCHAR2 (2);
        v_cur_rate          NUMBER;

        CURSOR all_claimnts IS
            SELECT reg_clmt_code
              FROM gin_rgstd_claimants
             WHERE    reg_cmb_claim_no = v_cqr_ref2 AND reg_claim_status = 1
                   OR reg_claim_status IS NULL;

        CURSOR voucher_dtls (v_voucher_no NUMBER)
        IS
            SELECT *
              FROM gin_voucher_details
             WHERE voud_cpv_voucher_no = v_voucher_no;

        CURSOR cur_claim_fee IS
            SELECT *
              FROM gin_clm_pymnt_tax_vouchers
             WHERE cptv_code = v_cqr_ref;

        CURSOR cur_claim_fee_dtls (v_cptv_code NUMBER)
        IS
            SELECT *
              FROM gin_clm_payment_vouchers
             WHERE cpv_cptv_code = v_cptv_code;
    BEGIN
        /*Separated claim payment from claims fee payment post updating from FMS*/
        BEGIN
            SELECT COUNT (1)
              INTO v_cnt
              FROM gin_clm_pymnt_tax_vouchers
             WHERE cptv_code = TO_NUMBER (v_cqr_ref);
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_cnt := 0;
            WHEN OTHERS
            THEN
                raise_error ('Error fetching claim voucher to contra...');
        END;

        BEGIN
            SELECT cpv_authorised_by,
                   NVL (cpv_rein_amount, 0),
                   cpv_ggt_trans_no,
                   cpv_auto_allocate,
                   cpv_div_no,
                   CPV_CUR_RATE
              INTO v_authorised_by,
                   v_cr_amt,
                   v_ggt_trans_no,
                   v_auto_allocate,
                   v_div_no,
                   v_cur_rate
              FROM gin_clm_payment_vouchers
             WHERE     cpv_voucher_no = v_cqr_ref
                   AND cpv_cmb_claim_no = v_cqr_ref2;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error getting claim transaction number..');
        END;

        IF NVL (v_cnt, 0) = 0
        THEN
            BEGIN
                /*  GIN_XOL_RECOVERIES.process_xol_new (
                                    v_cqr_ref2 ,
                                    TRUNC(SYSDATE),
                                    v_user_name,
                                     v_ggt_trans_no
                                );*/
                GIN_STP_CLAIMS_PKG.process_clm_pymnt_ri (v_cqr_ref,
                                                         v_ggt_trans_no);
                --raise_error ('Error reprocessing XOL..11');
                GIN_STP_CLAIMS_PKG.post_pymnt_clms_xol (v_cqr_ref2,
                                                        v_ggt_trans_no,
                                                        v_cur_rate);
                --raise_error ('Error reprocessing XOL..22');
                process_clm_pymt_xol (v_cqr_ref2,
                                      v_ggt_trans_no,
                                      v_user_name,
                                      TRUNC (SYSDATE));
                --            raise_error ('Error reprocessing XOL..33');
                GIN_STP_CLAIMS_PKG.update_xol_auth_status (v_ggt_trans_no,
                                                           'Y',
                                                           v_user_name,
                                                           TRUNC (SYSDATE));
            --           raise_error ('Error reprocessing XOL..44');
            --         EXCEPTION
            --            WHEN OTHERS
            --            THEN
            --               raise_error ('Error reprocessing XOL..');
            END;

            BEGIN
                UPDATE gin_clm_payment_vouchers
                   SET cpv_authorised = 'Y',
                       cpv_authorised_dt = TRUNC (SYSDATE),
                       cpv_cheque_no = v_cqr_chq_no,
                       cpv_cheque_date = v_cqr_chq_dt,
                       cpv_chq_update_by = v_user_name,
                       cpv_chq_update_date = TRUNC (SYSDATE),
                       cpv_chq_amt = v_cqr_amount
                 WHERE     cpv_voucher_no = v_cqr_ref
                       AND cpv_cmb_claim_no = v_cqr_ref2;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR POST UPDATING PAYMENT VOUCHER...');
            END;

            BEGIN
                UPDATE GIN_MASTER_TRANSACTIONS
                   SET MTRAN_DATE = TRUNC (SYSDATE), MTRAN_AUTHORISED = 'Y'
                 WHERE     MTRAN_CMB_CLAIM_NO = v_cqr_ref2
                       AND MTRAN_GGT_TRAN_NO = v_ggt_trans_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR MASTER TRANSACTIONS...');
            END;

            BEGIN
                UPDATE gin_rgstd_clmts_dv
                   SET rgcld_div_status = 4
                 WHERE rgcld_div_no = v_div_no;

                SELECT cmb_coinsurance
                  INTO v_coinsurance
                  FROM gin_claim_master_bookings
                 WHERE cmb_claim_no = v_cqr_ref2;

                FOR voucher_rec IN voucher_dtls (v_cqr_ref)
                LOOP
                    IF NVL (voucher_rec.voud_salv_amt, 0) > 0
                    THEN
                        gin_stp_claims_pkg.create_clm_salv_recovry (
                            v_cqr_ref2,
                            'Salvage',
                            'Salvage',
                            'S',
                            'Salvage',
                            voucher_rec.voud_per_code,
                            voucher_rec.voud_salv_amt,
                            v_authorised_by,
                            voucher_rec.voud_clmp_code,
                            v_clmr_code,
                            'CS',
                            'Y');

                        SELECT clmr_ggt_trans_no
                          INTO v_clmr_tran_no
                          FROM gin_claim_recoveries
                         WHERE clmr_code = v_clmr_code;

                        gin_stp_claims_pkg.auth_salv_recvry_trans (
                            v_cqr_ref2,
                            v_clmr_code,
                            v_clmr_tran_no,
                            v_authorised_by);
                    END IF;

                    --        RAISE_ERROR('ERROR=='||voucher_rec.voud_excess_allowed||';'||voucher_rec.voud_excess_amt);
                    IF NVL (voucher_rec.voud_excess_allowed, 'N') = 'Y'
                    THEN
                        IF NVL (voucher_rec.voud_excess_amt, 0) > 0
                        THEN
                            gin_stp_claims_pkg.create_clm_salv_recovry (
                                v_cqr_ref2,
                                'excess Recovery',
                                'Excess',
                                'R',
                                'Excess',
                                voucher_rec.voud_per_code,
                                voucher_rec.voud_excess_amt,
                                v_authorised_by,
                                voucher_rec.voud_clmp_code,
                                v_clmr_code,
                                'CR',
                                'Y');

                            SELECT clmr_ggt_trans_no
                              INTO v_clmr_tran_no
                              FROM gin_claim_recoveries
                             WHERE clmr_code = v_clmr_code;

                            gin_stp_claims_pkg.auth_salv_recvry_trans (
                                v_cqr_ref2,
                                v_clmr_code,
                                v_clmr_tran_no,
                                v_authorised_by);
                        END IF;
                    END IF;
                END LOOP;                         -- RAISE_ERROR('TOAST....');

                IF NVL (v_cr_amt, 0) > 0
                THEN
                    IF NVL (v_auto_allocate, 'N') = 'Y'
                    THEN
                        gin_stp_claims_pkg.post_credit_payments (
                            v_cqr_ref2,
                            v_ggt_trans_no,
                            v_authorised_by,
                            v_credit_mtran_no,
                            'Y');

                        --               gin_interfaces_pkg.process_rein_clm_creditnote(v_cqr_ref2,
                        --                                                        v_ggt_trans_no,
                        --                                                        v_authorised_by,
                        --                                                        TRUNC (SYSDATE)
                        --                                                       );
                        SELECT mtran_ref_no
                          INTO v_cr_ref_no
                          FROM gin_master_transactions
                         WHERE mtran_no = v_credit_mtran_no;

                        gin_stp_claims_pkg.process_reinstatements (
                            v_cqr_ref2,
                            v_authorised_by,
                            v_cr_amt,
                            v_dr_mtran_no);

                        SELECT mtran_ref_no
                          INTO v_dr_ref_no
                          FROM gin_master_transactions
                         WHERE mtran_no = v_dr_mtran_no;

                        gis_accounts_utilities.knock_trans (
                            v_credit_mtran_no,
                            v_cr_ref_no,
                            v_dr_mtran_no,
                            v_dr_ref_no,
                            SYSDATE,
                            v_cr_amt);
                    END IF;
                END IF;
            --         EXCEPTION
            --            WHEN OTHERS
            --            THEN
            --               raise_error (   'Error reinstating the Transaction...'
            --                            || v_ggt_trans_no
            --                            || ' v_cqr_ref2 '
            --                            || v_cqr_ref2
            --                            || SQLERRM (SQLCODE)
            --                           );
            END;

            BEGIN
                SELECT cmb_claim_status, cmb_ipu_id
                  INTO v_status, v_ipu_id
                  FROM gin_claim_master_bookings
                 WHERE cmb_claim_no = v_cqr_ref2;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_status := 'P';
            END;

            IF v_status NOT IN ('S', 'N')
            THEN
                IF NVL (v_coinsurance, 'N') = 'Y'
                THEN
                    BEGIN
                        gin_claim_coin_summary_proc.get_claim_summary (
                            v_cqr_ref2,
                            v_tot_reserve,
                            v_recoveries,
                            v_salvages,
                            v_total_payments,
                            v_ost_reserve);
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            NULL;
                    END;
                ELSE
                    v_ost_reserve := GET_OS_RESERVE (v_cqr_ref2);
                --gin_stp_claims_pkg.get_clm_os_reserve (v_cqr_ref2, 'N');
                END IF;

                IF v_ost_reserve = 0 OR v_ost_reserve IS NULL
                THEN
                    FOR cur_all_claimnts_rec IN all_claimnts
                    LOOP
                        UPDATE gin_rgstd_claimants
                           SET reg_claim_status = 3
                         WHERE reg_clmt_code =
                               cur_all_claimnts_rec.reg_clmt_code;
                    END LOOP;

                    UPDATE gin_claim_master_bookings
                       SET cmb_claim_status = 'S',
                           cmb_close_date = TRUNC (SYSDATE),
                           cmb_status_date = TRUNC (SYSDATE)
                     WHERE cmb_claim_no = v_cqr_ref2;
                END IF;
            END IF;
        ELSIF NVL (v_cnt, 0) > 0
        THEN
            FOR c IN cur_claim_fee
            LOOP
                --raise_Error('1v_cnt='||v_cnt);
                FOR i IN cur_claim_fee_dtls (c.cptv_code)
                LOOP
                    --raise_Error('2v_cnt='||v_cnt);
                    BEGIN
                        UPDATE gin_clm_payment_vouchers
                           SET cpv_authorised = 'Y',
                               cpv_authorised_dt = TRUNC (SYSDATE),
                               cpv_cheque_no = v_cqr_chq_no,
                               cpv_cheque_date = v_cqr_chq_dt,
                               cpv_chq_update_by = v_user_name,
                               cpv_chq_update_date = TRUNC (SYSDATE)
                         WHERE cpv_cptv_code = v_cqr_ref;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR POST UPDATING PAYMENT VOUCHER...');
                    END;

                    BEGIN
                        UPDATE GIN_MASTER_TRANSACTIONS
                           SET MTRAN_DATE = TRUNC (SYSDATE),
                               MTRAN_AUTHORISED = 'Y'
                         WHERE     MTRAN_CMB_CLAIM_NO = v_cqr_ref2
                               AND MTRAN_GGT_TRAN_NO = v_ggt_trans_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR MASTER TRANSACTIONS...');
                    END;
                END LOOP;

                BEGIN
                    UPDATE gin_clm_pymnt_tax_vouchers
                       SET cptv_authorised = 'Y',
                           cptv_authorised_date = TRUNC (SYSDATE),
                           cptv_cheque_no = v_cqr_chq_no,
                           cptv_cheque_date = v_cqr_chq_dt,
                           cptv_chq_update_by = v_user_name,
                           cptv_chq_update_date = TRUNC (SYSDATE),
                           cptv_chq_amt = v_cqr_amount
                     WHERE cptv_code = v_cqr_ref;
                --raise_error('v_cnt='||v_cnt);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR POST UPDATING PAYMENT VOUCHER...');
                END;
            END LOOP;
        --raise_error('v_cnt33='||v_cnt);
        END IF;

        --RAISE_eRROR('v_cnt='||v_cnt);
        gin_manage_alerts_pkg.proc_clmpaidtotalloss_alert (v_cqr_ref2,
                                                           v_ggt_trans_no,
                                                           v_authorised_by);
        gin_manage_alerts_pkg.proc_xol_alert (v_cqr_ref2,
                                              'CP',
                                              v_ggt_trans_no,
                                              v_authorised_by);
        gin_manage_alerts_pkg.proc_xolclmpaid_alert (v_cqr_ref2,
                                                     'CP',
                                                     v_ggt_trans_no,
                                                     v_authorised_by);
    --raise_error('AFTER ALERTS='||v_cr_amt||';'||v_auto_allocate);
    END update_claims;

    PROCEDURE update_claimsfee (v_cqr_ref      IN VARCHAR2,
                                v_cqr_ref2     IN VARCHAR2,
                                v_cqr_chq_no   IN VARCHAR2,
                                v_cqr_chq_dt   IN DATE,
                                v_user_name    IN VARCHAR2,
                                v_cqr_amount   IN NUMBER)
    IS
        v_status            gin_claim_master_bookings.cmb_claim_status%TYPE;
        v_recoveries        NUMBER := 0;
        v_salvages          NUMBER := 0;
        v_total_payments    NUMBER := 0;
        v_ost_reserve       NUMBER;
        v_tot_reserve       NUMBER;
        v_credit_mtran_no   NUMBER;
        v_ggt_trans_no      NUMBER;
        v_authorised_by     VARCHAR2 (50);
        v_cr_amt            NUMBER (23, 5);
        v_cr_ref_no         VARCHAR2 (50);
        v_dr_mtran_no       NUMBER;
        v_cr_bal            NUMBER;
        v_cr_com            NUMBER;
        v_error             VARCHAR2 (200);
        v_authorised        VARCHAR2 (1);
        v_dr_ref_no         VARCHAR2 (50);
        v_auto_allocate     VARCHAR2 (1);
        v_clmr_code         NUMBER;
        v_clmr_tran_no      NUMBER;
        v_ipu_id            NUMBER;
        v_div_no            VARCHAR2 (10);
        v_tran_type         VARCHAR2 (5);
        v_cnt               NUMBER;
        v_coinsurance       VARCHAR2 (2);

        CURSOR cur_claim_fee IS
            SELECT *
              FROM gin_clm_pymnt_tax_vouchers
             WHERE cptv_code = v_cqr_ref;

        CURSOR cur_claim_fee_dtls (v_cptv_code NUMBER)
        IS
            SELECT *
              FROM gin_clm_payment_vouchers
             WHERE cpv_cptv_code = v_cptv_code;
    BEGIN
        FOR c IN cur_claim_fee
        LOOP
            FOR i IN cur_claim_fee_dtls (c.cptv_code)
            LOOP
                BEGIN
                    UPDATE gin_clm_payment_vouchers
                       SET cpv_authorised = 'Y',
                           cpv_authorised_dt = TRUNC (SYSDATE),
                           cpv_cheque_no = v_cqr_chq_no,
                           cpv_cheque_date = v_cqr_chq_dt,
                           cpv_chq_update_by = v_user_name,
                           cpv_chq_update_date = TRUNC (SYSDATE)
                     WHERE cpv_cptv_code = v_cqr_ref;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR POST UPDATING PAYMENT VOUCHER...');
                END;
            END LOOP;

            BEGIN
                UPDATE gin_clm_pymnt_tax_vouchers
                   SET cptv_authorised = 'Y',
                       cptv_authorised_date = TRUNC (SYSDATE),
                       cptv_cheque_no = v_cqr_chq_no,
                       cptv_cheque_date = v_cqr_chq_dt,
                       cptv_chq_update_by = v_user_name,
                       cptv_chq_update_date = TRUNC (SYSDATE),
                       cptv_chq_amt = v_cqr_amount
                 WHERE cptv_code = v_cqr_ref;
            --raise_error('v_cnt='||v_cnt);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR POST UPDATING PAYMENT VOUCHER...');
            END;
        END LOOP;

        gin_manage_alerts_pkg.proc_clmpaidtotalloss_alert (v_cqr_ref2,
                                                           v_ggt_trans_no,
                                                           v_authorised_by);
        gin_manage_alerts_pkg.proc_xol_alert (v_cqr_ref2,
                                              'CP',
                                              v_ggt_trans_no,
                                              v_authorised_by);
        gin_manage_alerts_pkg.proc_xolclmpaid_alert (v_cqr_ref2,
                                                     'CP',
                                                     v_ggt_trans_no,
                                                     v_authorised_by);
    --raise_error('AFTER ALERTS='||v_cr_amt||';'||v_auto_allocate);
    END update_claimsfee;

    PROCEDURE update_certificates (v_cqr_ref      IN VARCHAR2,
                                   v_cqr_ref2     IN VARCHAR2,
                                   v_cqr_chq_no   IN VARCHAR2,
                                   v_cqr_chq_dt   IN DATE,
                                   v_user_name    IN VARCHAR2,
                                   v_cqr_amount   IN NUMBER)
    IS
        v_copd_code   NUMBER;
    BEGIN
        v_copd_code := REPLACE (v_cqr_ref, 'CPYMT/', '');

        UPDATE gin_cert_ordr_pymt_dtls
           SET copd_chq_no = v_cqr_chq_no,
               copd_chq_amount = v_cqr_amount,
               copd_chq_date = v_cqr_chq_dt,
               copd_chq_auth_by = v_user_name,
               copd_authorized = 'Y'
         WHERE copd_code = v_copd_code;
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_error ('Unable updating Cert details 1.');
    END;

    PROCEDURE update_undo_certificates (v_cqr_ref      IN VARCHAR2,
                                        v_cqr_ref2     IN VARCHAR2,
                                        v_cqr_chq_no   IN VARCHAR2,
                                        v_cqr_chq_dt   IN DATE,
                                        v_user_name    IN VARCHAR2,
                                        v_cqr_amount   IN NUMBER)
    IS
        v_copd_code   NUMBER;
    BEGIN
        v_copd_code := REPLACE (v_cqr_ref, 'CPYMT/', '');

        UPDATE gin_cert_ordr_pymt_dtls
           SET copd_chq_no = NULL,
               copd_chq_amount = NULL,
               copd_chq_date = NULL,
               copd_chq_auth_by = NULL,
               copd_authorized = 'N'
         WHERE copd_code = v_copd_code;
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_error ('Unable updating Cert details 1.');
    END;

    PROCEDURE update_undo_cert_chq (v_cqr_ref      IN VARCHAR2,
                                    v_cqr_ref2     IN VARCHAR2,
                                    v_cqr_chq_no   IN VARCHAR2,
                                    v_cqr_chq_dt   IN DATE,
                                    v_user_name    IN VARCHAR2,
                                    v_cqr_amount   IN NUMBER)
    IS
        v_copd_code   NUMBER;
    BEGIN
        v_copd_code := REPLACE (v_cqr_ref, 'CPYMT/', '');

        UPDATE gin_cert_ordr_pymt_dtls
           SET copd_authorized = 'Y'
         WHERE copd_code = v_copd_code;
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_error ('Unable updating Cert details 1.');
    END;

    --   PROCEDURE post_gis_rct (
    --   v_rct_code                       NUMBER,
    --   v_rct_rec                        fms_interfaces_pkg.type_receipts_table,
    --   v_tran_mapping          IN OUT   fms_interfaces_pkg.tran_mapping_type,
    --   v_rct_type                       VARCHAR2,
    --   v_user_name                      VARCHAR2,
    --   v_cancel                         VARCHAR2 DEFAULT 'N',
    --   v_mtran_ref_no                   VARCHAR2 DEFAULT NULL,
    --   v_reasons_for_failure            VARCHAR2 DEFAULT NULL
    --)
    --IS
    --   v_errmsg                  VARCHAR2 (1500);
    --   v_count                   NUMBER          := 0;
    --   v_ggt_trans_no            NUMBER;
    --   v_mtran_no                NUMBER;
    --   v_amount                  NUMBER          := 0;
    --   v_rrc_code                NUMBER;
    --   v_rec_count               NUMBER;
    --   v_cancel_rct              VARCHAR2 (1)    := v_cancel;
    --   v_allocate_amt            NUMBER          := 0;
    --   v_bal_amt                 NUMBER          := 0;
    --   v_dr_comm_due             NUMBER          := 0;
    --   v_dr_comm_vat_incl        NUMBER          := 0;
    --   v_diff                    NUMBER          := 0;
    --   v_comm_alloc_amt          NUMBER          := 0;
    --   v_brn_code                NUMBER;
    --   v_agnt_code               NUMBER;
    --   v_prev_mtran_no           NUMBER;
    --   v_prev_mtran_ref_no       VARCHAR2 (30);
    --   v_tran_type               VARCHAR2 (10);
    --   v_rnd                     NUMBER;
    --   v_bcur_rnd                NUMBER;
    --   v_cur_rate                NUMBER;
    --   v_param                   VARCHAR2 (5);
    --   v_appr_comm               NUMBER;
    --   v_amt_to_com              NUMBER;
    --   v_act_type_cnt            NUMBER;
    --   v_prp_code                NUMBER;
    --   v_per_pt_code             NUMBER;
    --   v_limit_amt               NUMBER;
    --   v_clmt_code               NUMBER;
    --   v_clmnt_type              VARCHAR2 (30);
    --   v_trans_type              VARCHAR2 (30);
    --   v_param_value             VARCHAR2 (30);
    --   v_cnt                     NUMBER;
    --   v_rec_tran_type           VARCHAR2 (30);
    --   v_interface_type          VARCHAR2 (10);
    --   v_allocate                VARCHAR2 (1);
    --   vuser                     VARCHAR2 (30);
    --   v_new_mtran_no            NUMBER;
    --   v_tmap_amt                NUMBER;
    --   v_pol_batch_no            NUMBER;
    --   v_trans_count             NUMBER;
    --   v_new_dr_no               VARCHAR2 (30);
    --   v_freq                    VARCHAR2 (10);
    --   v_dr_no                   NUMBER;
    --   v_new_pol_batch           NUMBER;
    --   v_dr_mtran_no             NUMBER;
    --   v_dr_mtran_ref_no         VARCHAR2 (30);
    --   v_salvage_rct_param       VARCHAR2 (1);
    --   v_clm_os_reserve          NUMBER;
    --   v_comm_allocated          NUMBER;
    --   v_dr_vat_due              NUMBER;
    --   v_prev_ggt_trans_no       NUMBER;
    --   v_whtx                    NUMBER;
    --   v_net_com_param           VARCHAR2 (1)    := 'N';
    --   v_admfee                  NUMBER;
    --   v_admfee_wht              NUMBER;
    --   v_appr_adm_fee            NUMBER;
    --   v_allocate_adm_fee        NUMBER;
    --   v_admin_fee_allocated     NUMBER;
    --   v_adm_fee_diff            NUMBER;
    --   v_dr_admin_fee_vat_incl   NUMBER;
    --   v_admfee_alloc_amt        NUMBER          := 0;

    --   CURSOR cur_commissions (v_prv_mtran_no IN NUMBER)
    --   IS
    --      SELECT *
    --        FROM gin_commission_pymts
    --       WHERE cop_cr_mtran_no = v_prv_mtran_no;
    --BEGIN
    --   /*
    --   ************************************
    --   USE V_TRAN_MAPPING(i).TMAP_COMM_ALLOC
    --   **************************************
    --   */
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAID_ON_FULL_DEBIT')
    --        INTO v_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching commission payment parameter...');
    --   END;

    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('ALLOW_SALVAGE_WITHOUT_PYMT')
    --        INTO v_salvage_rct_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_salvage_rct_param := 'Y';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching Salvage  parameter...');
    --   END;

    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
    --        INTO v_net_com_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_net_com_param := 'N';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching net of commission parameter...');
    --   END;

    ----      RAISE_ERROR('v_rct_type ='||v_rct_type||';;;'||v_mtran_ref_no);
    --    IF v_rct_type IN ('JV', 'DBT', 'PDR','DBTD','RNRC','QUOT')
    --   /*-- Introduced Dbtd -- Debit Draft Where The Debit Is Not Yet Authorized,
    --   And Rnrc Renewal Receipt Where The Records Are Still In The Renewal Working Area
    --   This will assist in determine how to manage the next move. ie. if the RNRC then check
    --   if its a full receipt and renew the policy. if DBTD, the policy is still in Draft hence do nothing...*/
    --   THEN
    --      SELECT ggt_trans_no_seq.NEXTVAL
    --        INTO v_ggt_trans_no
    --        FROM DUAL;

    --      INSERT INTO gin_gis_transactions
    --                  (ggt_trans_no, ggt_btr_trans_code,
    --                   ggt_done_by, ggt_done_date, ggt_uw_clm_tran,
    --                   ggt_trans_date, ggt_effective_date
    --                  )
    --           VALUES (v_ggt_trans_no, DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                   v_user_name, TRUNC (SYSDATE), 'A',
    --                   TRUNC (SYSDATE), TRUNC (SYSDATE)
    --                  );

    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         --RAISE_ERROR('v_rct_type:'||v_rct_type||';;'||v_rct_rec (j).rct_acct_type_id);
    --         IF v_rct_rec (j).rct_acct_type_id IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_clients
    --             WHERE clnt_code = v_rct_rec (j).rct_act_code
    --               AND clnt_sht_desc = v_rct_rec (j).rct_act_sht_desc;
    --         ELSIF v_rct_rec (j).rct_acct_type_id NOT IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_agencies, tqc_account_types
    --             WHERE agn_act_code = act_code
    --               AND agn_code = v_rct_rec (j).rct_act_code
    --               AND agn_sht_desc = v_rct_rec (j).rct_act_sht_desc
    --               AND act_type_id = v_rct_rec (j).rct_acct_type_id;
    --         END IF;

    --         IF v_act_type_cnt = 0
    --         THEN
    --            raise_error (   'The account type='
    --                         || v_rct_rec (j).rct_acct_type_id
    --                         || ' and account code='
    --                         || v_rct_rec (j).rct_act_sht_desc
    --                         || ' do not match ...'
    --                         || ' v_rct_rec (j).rct_act_code  '
    --                         || v_rct_rec (j).rct_act_code
    --                        );
    --         END IF;

    --         IF v_cancel = 'Y'
    --         THEN
    --            -- MAKE SURE THAT THE RCT 2B CANCELLED ALREADY EXISTS
    --            SELECT COUNT ('X')
    --              INTO v_rec_count
    --              FROM gin_master_transactions
    --             WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --               AND mtran_rct_code = v_rct_rec (j).rct_no;

    --            IF NVL (v_rec_count, 0) = 0
    --            THEN          --DELETE THE  GIN_GIS_TRANSACTION REC CREATED ABOVE;
    --               DELETE FROM gin_gis_transactions
    --                     WHERE ggt_trans_no = v_ggt_trans_no;

    --               EXIT;
    --            END IF;

    --            BEGIN
    --               v_pol_batch_no := v_tran_mapping (j).tmap_pol_batch_no;
    --               update_transmittal_rct (v_pol_batch_no,
    --                                       v_tran_mapping (j).tmap_amount,
    --                                       v_cancel_rct,
    --                                       v_rct_type
    --                                      );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    ----                  raise_error
    ----                         ('Error updating transmittal at cancellation rec...'||v_rct_type||v_pol_batch_no);
    --null;
    --           END;
    --         END IF;

    --         v_cur_rate :=
    --             get_currexch_rate (v_rct_rec (j).rct_cur_code, v_rnd, v_bcur_rnd);

    --         SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                           || gin_mtran_no_seq.NEXTVAL
    --                          )
    --           INTO v_mtran_no
    --           FROM DUAL;

    --         -- RAISE_ERROR( 'MEMO=='||v_rct_rec (j).rct_paymt_memo||';'||v_rct_rec (j).rct_desc||';'||v_rct_rec (j).rct_paymt_mode);
    --         INSERT INTO gin_master_transactions
    --                     (mtran_no, mtran_doc_date, mtran_date,
    --                      mtran_ref_no,
    --                      mtran_other_ref, mtran_tran_type,
    --                      mtran_dc,
    --                      mtran_control_acc,
    --                      mtran_client_type,
    --                      mtran_client_code,
    --                      mtran_amount,
    --                      mtran_balance,
    --                      mtran_authorised,
    --                      mtran_net_amt,
    --                      mtran_posting_date, mtran_ggt_tran_no, mtran_prp_code,
    --                      mtran_btr_trans_code, mtran_origin,
    --                      mtran_cur_code,
    --                      mtran_cur_symbol,
    --                      mtran_brn_code,
    --                      mtran_brn_sht_desc,
    --                      mtran_posted_by,
    --                      mtran_cur_rate,
    --                      mtran_client_polcy_no,
    --                      mtran_narrations, mtran_rct_code,
    --                      mtran_rct_paymt_mode,
    --                      mtran_rct_paymt_memo,
    --                      mtran_agn_discount,
    --                      mtran_pol_batch_no,
    --                      mtran_other_ref1,
    --                      mtran_authorised_by,
    --                      mtran_date_authorized, mtran_pol_ren_endos_no,
    --                      mtran_rct_type,
    --                      mtran_rct_imp_code
    --                     )
    --              --PRP CODE = DECODE( v_rct_rec(j).RCT_ACC_TYPE,'D',v_rct_rec(j).RCT_ACT_CODE,NULL)
    --         VALUES      (v_mtran_no, v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                      DECODE (v_cancel_rct,
    --                              'Y', v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                              v_rct_rec (j).rct_brh_rct_code
    --                             ),
    --                      v_mtran_ref_no,          --v_rct_rec (j).rct_paymt_memo,
    --                                     DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                      DECODE (v_cancel_rct, 'Y', 'D', 'C'),
    --                      v_rct_rec (j).rct_act_sht_desc,
    --                      v_rct_rec (j).rct_acct_type_id,
    --                      v_rct_rec (j).rct_act_code,               --acc sht desc
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      'Y',
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      v_rct_rec (j).rct_date, v_ggt_trans_no, NULL,
    --                      DECODE (v_cancel_rct, 'Y', 'CN', 'RC'), 'A',
    --                      v_rct_rec (j).rct_cur_code,
    --                      tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                      v_rct_rec (j).rct_brh_code,
    --                      fms_interfaces_pkg.brh_name (v_rct_rec (j).rct_brh_code,
    --                                                   'S'
    --                                                  ),
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_cur_rate,
    --                      gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                      v_rct_rec (j).rct_desc, v_rct_rec (j).rct_no,
    --                      v_rct_rec (j).rct_paymt_mode,
    --                      v_rct_rec (j).rct_paymt_memo,
    --                      v_rct_rec (j).rct_discount,
    --                      gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no),
    --                      v_mtran_ref_no,
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_rct_rec (j).rct_date, v_mtran_ref_no,
    --                      v_rct_rec (j).rct_creation_type,
    --                      v_rct_rec (j).rct_imp_code
    --                     );

    --         v_brn_code := v_rct_rec (j).rct_brh_code;
    --         v_agnt_code := v_rct_rec (j).rct_act_code;

    ----           RAISE_ERROR('TOP='||v_param||';'||v_appr_comm||';'||v_allocate_amt||';'||V_cancel||';'||v_mtran_ref_no);
    --         IF v_cancel != 'Y'
    --         THEN
    --            FOR i IN 1 .. v_tran_mapping.COUNT
    --            LOOP
    --               BEGIN
    --                  -- raise_error('vat_amount'||v_tran_mapping (i).tmap_inv_vat);
    --                  v_pol_batch_no := v_tran_mapping (i).tmap_pol_batch_no;

    --                  --gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no);

    --                  -- raise_error('v_pol_batch_no='||v_pol_batch_no);
    ----                     BEGIN
    ----                        UPDATE gin_gis_transmitals
    ----                           SET ggts_rct_amt =
    ----                                  NVL (ggts_rct_amt, 0)
    ----                                  + DECODE (v_cancel_rct, 'Y', -1, 1)
    ----                                    * ABS (v_tran_mapping (i).tmap_amount)
    ----                         WHERE ggts_pol_batch_no = v_pol_batch_no;
    ----                     EXCEPTION
    ----                        WHEN OTHERS
    ----                        THEN
    ----                           NULL;
    ----                     END;
    --                  BEGIN
    --                     update_transmittal_rct (v_pol_batch_no,
    --                                             v_tran_mapping (i).tmap_amount,
    --                                             v_cancel_rct,
    --                                             v_rct_type
    --                                            );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                       raise_error ('Error updating transmittal rec...');
    --                  END;

    --                  BEGIN
    --                     SELECT pol_pro_interface_type, pol_freq_of_payment
    --                       INTO v_interface_type, v_freq
    --                       FROM gin_policies
    --                      WHERE pol_batch_no = v_pol_batch_no;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        v_interface_type := 'ACCRUAL';
    --                        v_freq := 'A';
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error (   'Error getting policy details...'
    --                                     || 'v_pol_batch_no:'
    --                                     || v_pol_batch_no
    --                                     || 'v_mtran_ref_no:'
    --                                     || v_mtran_ref_no
    --                                    );
    --                  END;

    --                  IF NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                  THEN
    ----                     RAISE_ERROR('v_tran_mapping (i).tmap_amount='||v_tran_mapping (i).tmap_amount);
    --                     BEGIN
    --                        gis_accounts_utilities.auto_auth_transactions
    --                                        (v_pol_batch_no,
    --                                         v_tran_mapping (i).tmap_mtran_ref_no,
    --                                         --v_mtran_ref_no ,
    --                                         v_mtran_no,
    --                                         v_tran_mapping (i).tmap_amount,
    --                                         v_freq,
    --                                         v_rct_rec (j).rct_creation_type,
    --                                         v_rct_rec (j).rct_imp_code
    --                                         --v_reasons_for_failure
    --                                        );
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                               ('Error processing cash basis transaction... ');
    --                     END;
    --                  ELSE
    ----                     raise_error(v_tran_mapping (i).tmap_mtran_no||';'||v_tran_mapping (i).tmap_mtran_no);
    ----                        raise_error(v_tran_mapping (i).tmap_mtran_no);
    --                     IF NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                        ('DBT', 'JV', 'PDR')
    --                     THEN
    --                        IF NVL (v_tran_mapping (i).tmap_amount, 0) != 0
    --                        THEN
    --                           BEGIN
    --                              SELECT ABS (NVL (mtran_balance, 0)),
    --                                       ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_balance, 0))
    --                                     + ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       )
    --                                     + ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_vat, 0))
    --                                     - (  ABS (NVL (mtran_vat_paid, 0))
    --                                        + ABS (NVL (mtran_vat_payable, 0))
    --                                       ),
    --                                     mtran_tran_type,
    --                                       ABS (NVL (mtran_whtx, 0))
    --                                     - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_whtx_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_whtx, 0))
    --                                     - (  ABS (NVL (mtran_lta_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_lta_whtx_payable, 0))
    --                                       )
    --                                INTO v_bal_amt,
    --                                     v_dr_comm_due,
    --                                     v_amt_to_com,
    --                                     v_dr_vat_due,
    --                                     v_tran_type,
    --                                     v_whtx,
    --                                     v_admfee,
    --                                     v_admfee_wht
    --                                FROM gin_master_transactions
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;

    --                              v_dr_comm_vat_incl :=
    --                                 NVL (v_dr_comm_due, 0)
    --                                 + NVL (v_dr_vat_due, 0);
    --                              v_dr_admin_fee_vat_incl :=
    --                                      NVL (v_admfee, 0)
    --                                      + NVL (v_admfee_wht, 0);
    --                           EXCEPTION
    --                              WHEN NO_DATA_FOUND
    --                              THEN
    --                                 BEGIN
    --                                    SELECT ABS (NVL (mtran_balance, 0)),
    --                                             ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_balance, 0))
    --                                           + ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             )
    --                                           + ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                           mtran_tran_type, mtran_no,
    --                                           mtran_ref_no,
    --                                             ABS (NVL (mtran_vat, 0))
    --                                           - (  ABS (NVL (mtran_vat_paid, 0))
    --                                              + ABS (NVL (mtran_vat_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_whtx, 0))
    --                                           - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                              + ABS (NVL (mtran_whtx_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_whtx, 0))
    --                                           - (  ABS (NVL (mtran_lta_whtx_paid,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                              + ABS
    --                                                   (NVL
    --                                                       (mtran_lta_whtx_payable,
    --                                                        0
    --                                                       )
    --                                                   )
    --                                             )
    --                                      INTO v_bal_amt,
    --                                           v_dr_comm_due,
    --                                           v_amt_to_com,
    --                                           v_tran_type, v_dr_mtran_no,
    --                                           v_dr_mtran_ref_no,
    --                                           v_dr_vat_due,
    --                                           v_whtx,
    --                                           v_admfee,
    --                                           v_admfee_wht
    --                                      FROM gin_master_transactions
    --                                     WHERE mtran_pol_batch_no =
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                       AND mtran_tran_type NOT IN
    --                                                                 ('RC', 'CN')
    --                                       AND mtran_dc = 'D'
    --                                       AND mtran_client_type IN
    --                                                  ('D', 'A', 'B', 'FI', 'IA');

    --                                    v_dr_comm_vat_incl :=
    --                                         NVL (v_dr_comm_due, 0)
    --                                       + NVL (v_dr_vat_due, 0);
    --                                    v_dr_admin_fee_vat_incl :=
    --                                         NVL (v_admfee, 0)
    --                                       + NVL (v_admfee_wht, 0);
    --                                 EXCEPTION
    --                                    WHEN NO_DATA_FOUND
    --                                    THEN
    --                                       NULL;
    --                                 END;
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_application_error (-20001,
    --                                                          SQLERRM (SQLCODE)
    --                                                         );
    --                           END;

    --                           IF NVL (v_param, 'N') = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'N'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;

    --                              /*
    --                              Handle net of commission here
    --                              If the receipt is not direct, and the amount is net of commission,
    --                              compute how much commission that has been withheld by the agent/broker,
    --                              process commission payment as paid outside the system up to fms.
    --                              this has to be parameterized
    --                              <Lewis to work on this!!!!!!!!!! for union>

    --                              */
    --                              IF     NVL (v_net_com_param, 'N') = 'Y'
    --                                 AND v_rct_rec (j).rct_acct_type_id <> 'D'
    --                              THEN
    --                                 IF NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                         'N') = 'Y'
    --                                 THEN
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_dr_comm_due, 0)
    --                                                  - NVL (v_whtx, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_admfee, 0)
    --                                                  - NVL (v_admfee_wht, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 ELSE
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_dr_comm_due, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_admfee, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 END IF;

    --                                 v_comm_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_dr_comm_due,
    --                                        v_dr_vat_due,
    --                                        v_appr_comm,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'COM'
    --                                       );

    --                                 IF NVL (v_appr_adm_fee, 0) <> 0
    --                                 THEN
    --                                    v_admin_fee_allocated :=
    --                                       gis_accounts_utilities.update_commission
    --                                          (v_mtran_no,
    --                                           v_tran_mapping (i).tmap_mtran_ref_no,
    --                                           NVL
    --                                              (v_dr_mtran_no,
    --                                               v_tran_mapping (i).tmap_mtran_no
    --                                              ),
    --                                           v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                           v_admfee,
    --                                           v_dr_vat_due,
    --                                           v_appr_adm_fee,
    --                                           v_brn_code,
    --                                           v_agnt_code,
    --                                           v_rct_rec (j).rct_cur_code,
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inc_comm,
    --                                               'Y'
    --                                              ),
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inv_vat,
    --                                               'Y'
    --                                              ),
    --                                           'ADM'
    --                                          );
    --                                 END IF;

    --                                 --raise_error(v_admin_fee_allocated);
    --                                 IF     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ) = 'N'
    --                                    AND NVL (v_comm_allocated, 0) != 0
    --                                 THEN
    --                                    gis_accounts_utilities.auth_comm_pymnts
    --                                       (v_mtran_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_agnt_code,
    --                                        'CHQ',
    --                                        'N',
    --                                        tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'N'
    --                                            )
    --                                       );
    --                                 END IF;
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) =
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_adm_fee;
    --                              ELSE
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_adm_fee;
    --                              END IF;

    --                              IF ABS (v_bal_amt) < NVL (v_allocate_amt, 0)
    --                              THEN
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;

    --                              IF ABS (v_bal_amt) < NVL (v_allocate_adm_fee, 0)
    --                              THEN
    --                                 v_allocate_adm_fee := ABS (v_bal_amt);
    --                              END IF;
    --                           END IF;

    ----                       raise_error ('V_RCT_MAPPING ='||v_tran_mapping (1).tmap_rct_type||' AMOUNT;'||v_allocate_amt||'Balance:'||v_bal_amt||'Param:'||v_appr_comm);
    --                           IF NVL (v_allocate_amt, 0) <> 0
    --                           THEN
    --                              BEGIN
    --                                 gis_accounts_utilities.knock_trans
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_rct_rec (j).rct_date,
    --                                     v_allocate_amt
    --                                    );
    --                              EXCEPTION
    --                                 WHEN OTHERS
    --                                 THEN
    --                                    raise_error
    --                                             (   'Error:- Erick was here....'
    --                                              || v_mtran_no
    --                                             );
    --                              END;
    --                           END IF;

    --                           --************MOVED TOWARDS END OF PROC  MASINDE
    --                           /* gis_accounts_utilities.update_coin_payments(v_mtran_no,
    --                                                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                                                        NVL(v_dr_mtran_no,v_tran_mapping (i).tmap_mtran_no),
    --                                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                                                        NVL (v_tran_mapping (i).tmap_amount, 0),
    --                                                                        v_brn_code,
    --                                                                        v_agnt_code,
    --                                                                        v_rct_rec (j).rct_cur_code
    --                                                                        );*/
    --                           v_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_amt;
    --                           v_adm_fee_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_adm_fee;

    --                           IF     v_dr_comm_vat_incl != 0
    --                              AND v_diff > 0
    --                              AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_diff) > NVL (v_dr_comm_vat_incl, 0)
    --                              THEN
    --                                 v_comm_alloc_amt :=
    --                                                  NVL (v_dr_comm_vat_incl, 0);
    --                              ELSE
    --                                 v_comm_alloc_amt := ABS (v_diff);
    --                              END IF;

    --                              --raise_error(v_dr_comm_vat_incl||';'||v_diff);
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_dr_comm_due,
    --                                     v_dr_vat_due,
    --                                     v_diff,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );
    --                              v_diff :=
    --                                    NVL (v_diff, 0)
    --                                    - NVL (v_comm_allocated, 0);

    --                              --RAISE_ERROR(v_comm_allocated||';'||v_admfee||';'||v_dr_vat_due||';'||v_diff);
    --                              IF NVL (v_diff, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_diff,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;

    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           ELSIF     NVL (v_tran_type, 'NONE') = 'BAL'
    --                                 AND NVL (v_tran_mapping (i).tmap_comm_alloc,
    --                                          0
    --                                         ) != 0
    --                           THEN
    --                              v_comm_alloc_amt :=
    --                                  NVL (v_tran_mapping (i).tmap_comm_alloc, 0);

    --                              UPDATE gin_master_transactions
    --                                 SET mtran_commission =
    --                                          NVL (mtran_commission, 0)
    --                                        +   DECODE
    --                                                (SIGN (NVL (mtran_commission,
    --                                                            0
    --                                                           )
    --                                                      ),
    --                                                 -1, -1,
    --                                                 1
    --                                                )
    --                                          * v_comm_alloc_amt
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;

    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_comm_alloc_amt,
    --                                     NULL,                    --v_due_vat_amt,
    --                                     v_comm_alloc_amt,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );

    --                              IF NVL (v_appr_adm_fee, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_appr_adm_fee,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;

    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           END IF;

    --                           ----**************GENERATE COINURANCE PAYMTS
    --                           --
    --                           gis_accounts_utilities.update_coin_payments
    --                                   (v_mtran_no,
    --                                    v_tran_mapping (i).tmap_mtran_ref_no,
    --                                    NVL (v_dr_mtran_no,
    --                                         v_tran_mapping (i).tmap_mtran_no
    --                                        ),
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                    v_allocate_amt,
    --                                    v_comm_allocated,
    --                                    v_brn_code,
    --                                    v_agnt_code,
    --                                    v_rct_rec (j).rct_cur_code,
    --                                    v_tran_mapping (i).tmap_inc_comm,
    --                                    NVL (v_tran_mapping (i).tmap_inv_vat, 'Y')
    --                                   );
    --                           v_amount :=
    --                                     v_amount + v_tran_mapping (i).tmap_amount;
    --                        END IF;

    --                        BEGIN
    --                           gis_accounts_utilities.validate_allocations
    --                                        (v_mtran_no,
    --                                         NVL (v_dr_mtran_no,
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                             )
    --                                        );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error occured on validation of Receipt allocations.'
    --                                 );
    --                        END;
    --                     -- Gis_Accounts_Utilities.allocate_pdr_rcpt(v_mtran_no,v_tran_mapping (i).tmap_mtran_no,v_tran_mapping (i).tmap_amount);
    --                     ELSIF     NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                                     ('RNRC')
    --                           AND NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                     THEN
    --                        /*-- if the receipt amt is equal to fap, transfer transaction to uw, authorize and allocate */
    --                        gin_stp_pkg.auto_renew_prc
    --                                             (v_tran_mapping (i).tmap_mtran_no
    --                                             );
    --                     END IF;
    --                  END IF;
    --               --                  EXCEPTION
    --               --                     WHEN OTHERS
    --               --                     THEN
    --               --                        raise_error (   ' FOR Batch no '
    --               --                                     || v_tran_mapping (i).tmap_pol_batch_no
    --               --                                    );
    --               END;
    --            END LOOP;
    --         ELSE
    --            BEGIN
    --               SELECT mtran_no, mtran_ref_no
    --                 INTO v_prev_mtran_no, v_prev_mtran_ref_no
    --                 FROM gin_master_transactions
    --                WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --                  AND mtran_client_code = v_rct_rec (j).rct_act_code
    --                  AND mtran_client_type = v_rct_rec (j).rct_acct_type_id
    --                  AND mtran_rct_code = v_rct_rec (j).rct_no;
    --            EXCEPTION
    --               WHEN TOO_MANY_ROWS
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'DUPLICATE RECEIPT FOUND..:-'
    --                                           || v_rct_rec (j).rct_brh_rct_code
    --                                           || ' - '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20001,
    --                                           'ERROR..:-' || SQLERRM (SQLCODE)
    --                                          );
    --            END;

    --            IF    NVL (v_rct_rec (j).rct_client_charge_amount, 0) IS NULL
    --               OR NVL (v_rct_rec (j).rct_client_charge_amount, 0) != 0
    --            THEN
    --               INSERT INTO gin_master_transactions
    --                           (mtran_no,
    --                            mtran_doc_date, mtran_date,
    --                            mtran_ref_no,
    --                            mtran_other_ref, mtran_tran_type, mtran_dc,
    --                            mtran_control_acc,
    --                            mtran_client_type,
    --                            mtran_client_code,
    --                            mtran_amount,
    --                            mtran_balance,
    --                            mtran_authorised,
    --                            mtran_net_amt,
    --                            mtran_posting_date, mtran_ggt_tran_no,
    --                            mtran_prp_code, mtran_btr_trans_code,
    --                            mtran_origin, mtran_cur_code,
    --                            mtran_cur_symbol,
    --                            mtran_brn_code,
    --                            mtran_brn_sht_desc,
    --                            mtran_posted_by,
    --                            mtran_cur_rate,
    --                            mtran_client_polcy_no,
    --                            mtran_rct_code,
    --                            mtran_narrations,
    --                            mtran_rct_paymt_mode,
    --                            mtran_rct_paymt_memo,
    --                            mtran_agn_discount,
    --                            mtran_authorised_by,
    --                            mtran_date_authorized
    --                           )
    --                    VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_mtran_no_seq.NEXTVAL
    --                                      ),
    --                            v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                            v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                            v_rct_rec (j).rct_paymt_memo, 'BNK', 'D',
    --                            v_rct_rec (j).rct_act_sht_desc,
    --                            v_rct_rec (j).rct_acct_type_id,
    --                            v_rct_rec (j).rct_act_code,
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            'Y',
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            v_rct_rec (j).rct_date, v_ggt_trans_no,
    --                            NULL, 'BNK',
    --                            'A', v_rct_rec (j).rct_cur_code,
    --                            tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                            v_rct_rec (j).rct_brh_code,
    --                            fms_interfaces_pkg.brh_name
    --                                                   (v_rct_rec (j).rct_brh_code,
    --                                                    'S'
    --                                                   ),
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_cur_rate,
    --                            gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                            v_rct_rec (j).rct_no,
    --                            'CHARGES UPON CANCELLATION',
    --                            v_rct_rec (j).rct_paymt_mode,
    --                            v_rct_rec (j).rct_paymt_memo,
    --                            v_rct_rec (j).rct_discount,
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_rct_rec (j).rct_date
    --                           );
    --            END IF;

    --            gis_accounts_utilities.undo_pdr_rcpt (v_prev_mtran_no);
    --            -- UNDOING PDR ALLOACTIONS
    --            gis_accounts_utilities.undo_trans_allocation (v_prev_mtran_no,
    --                                                          NULL,
    --                                                          'Y'
    --                                                         );
    --            gis_accounts_utilities.undo_pa_rcpt (v_prev_mtran_no,
    --                                                 v_mtran_no,
    --                                                 NULL
    --                                                );

    --            /* MOVED TO gis_accounts_utilities.undo_trans_allocation PROCEDURE
    --            FOR i IN 1 .. v_tran_mapping.COUNT  LOOP
    --            -- RAISE_ERROR('v_prev_mtran_no'||v_prev_mtran_no);
    --                IF NVL(v_net_com_param,'N') = 'Y'
    --                  AND v_rct_rec (j).rct_acct_type_id <> 'D' THEN
    --                         Gis_Accounts_Utilities.auth_comm_pymnts (
    --                                                  v_prev_mtran_no,
    --                                                  NULL,-- v_mtran_no,
    --                                                  NULL,
    --                                                  'CHQ',
    --                                                  'N',
    --                                                  tqc_interfaces_pkg.username (v_rct_rec (j).rct_captured_by ),
    --                                                  NVL(v_tran_mapping (i).tmap_inv_vat,'N')
    --                                               );
    --                END IF;
    --             END LOOP; */
    --            SELECT ABS (NVL (mtran_balance, 0)),
    --                     ABS (NVL (mtran_commission, 0))
    --                   - (  ABS (NVL (mtran_comm_paid, 0))
    --                      + ABS (NVL (mtran_comm_payable, 0))
    --                     )
    --              INTO v_bal_amt,
    --                   v_dr_comm_due
    --              FROM gin_master_transactions
    --             WHERE mtran_no = v_prev_mtran_no;

    --            IF ABS (v_bal_amt) > NVL (v_rct_rec (j).rct_amount, 0)
    --            THEN
    --               v_allocate_amt := NVL (v_rct_rec (j).rct_amount, 0);
    --            ELSE
    --               v_allocate_amt := ABS (v_bal_amt);
    --            END IF;

    --            gis_accounts_utilities.knock_trans
    --                                            (v_prev_mtran_no,
    --                                             v_prev_mtran_ref_no,
    --                                             v_mtran_no,
    --                                                v_rct_rec (j).rct_brh_rct_code
    --                                             || '/CN',
    --                                             v_rct_rec (j).rct_date,
    --                                             v_allocate_amt
    --                                            );
    --         END IF;
    --      END LOOP;
    --   ELSIF NVL (v_rct_type, 'XXX') = ('TRVD')
    --   THEN                                             -- TRAVEL DEPOSIT RECEIPTS
    --      -- Introducing a table to hold deposit
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            INSERT INTO gin_receipt_deposits
    --                        (rde_code,
    --                         rde_clnt_code,
    --                         rde_drcr,
    --                         rde_pol_policy_no,
    --                         rde_amount, rde_allocated_amt,
    --                         rde_balance,
    --                         rde_received_from,
    --                         rde_captured_by,
    --                         rde_captured_date, rde_remarks,
    --                         rde_rct_no, rde_brh_code,
    --                         rde_ggt_trans_no, rde_date,
    --                         rde_receipt_no, rde_tran_type,
    --                         rde_cancelled,
    --                         rde_cancel_dt,
    --                         rde_cancel_by
    --                        )
    --                 VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'RRRR')
    --                                    || gin_rde_code_seq.NEXTVAL
    --                                   ),
    --                         v_rct_rec (j).rct_act_code,
    --                         DECODE (v_cancel, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         v_tran_mapping (i).tmap_amount, 0,
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         v_rct_rec (j).rct_no, v_rct_rec (j).rct_brh_code,
    --                         NULL, SYSDATE,
    --                         v_tran_mapping (i).tmap_mtran_ref_no, 'TRVL',
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         DECODE (v_cancel, 'Y', SYSDATE, NULL),
    --                         DECODE (v_cancel,
    --                                 'Y', v_rct_rec (j).rct_captured_by,
    --                                 NULL
    --                                )
    --                        );
    --         END LOOP;
    --      END LOOP;
    --   ELSE
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            IF NVL (v_salvage_rct_param, 'N') != 'Y'
    --            THEN
    --               IF NVL (v_rct_rec (j).rct_acct_type_id, 'XX') = 'SV'
    --               THEN
    --                  v_clm_os_reserve :=
    --                     gin_stp_claims_pkg.get_clm_os_reserve
    --                                  (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                   'Y'
    --                                  );

    --                  IF NVL (v_clm_os_reserve, 0) != 0
    --                  THEN
    --                     raise_error
    --                        ('Error- Full Claim Payment NOT DONE, Cannot  Continue'
    --                        );
    --                  END IF;
    --               END IF;
    --            END IF;

    --            --RAISE_APPLICATION_ERROR (-20001,'V_MTRAN_REF = '||V_TRAN_MAPPING(i).TMAP_CHECK_MTRAN_REF_NO||';'||v_rct_rec (j).rct_no);
    --            IF v_cancel = 'Y'
    --            THEN
    --               SELECT COUNT ('X')
    --                 INTO v_rec_count
    --                 FROM gin_recovery_rcts
    --                WHERE rrc_receipt_no = v_rct_rec (j).rct_no;

    --               IF v_rec_count = 0
    --               THEN
    --                  v_cancel_rct := 'N';
    --               END IF;
    --            END IF;

    --            SELECT NVL (MAX (rrc_code), 0) + 1
    --              INTO v_rrc_code
    --              FROM gin_recovery_rcts;

    --           ---RAISE_ERROR('mtran_ref_no-'||v_tran_mapping (i).tmap_check_mtran_ref_no||' = '|| 'mtran_no-'||v_tran_mapping (i).tmap_mtran_no);
    --            INSERT INTO gin_recovery_rcts
    --                        (rrc_code,
    --                         rrc_claim_no,
    --                         rrc_recovery_type,
    --                         rrc_drcr,
    --                         rrc_amount,
    --                         rrc_received_from,
    --                         rrc_received_by,
    --                         rrc_receved_date, rrc_remarks,
    --                         rrc_rct_no,
    --                         rrc_brh_code, rrc_receipt_no,
    --                         rrc_status
    --                        )
    --                 VALUES (v_rrc_code,
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --RRC_CLAIM_NO,
    --                         v_rct_rec (j).rct_acct_type_id,
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         DECODE (v_cancel_rct,
    --                                 'N', v_tran_mapping (i).tmap_mtran_ref_no,
    --                                 v_tran_mapping (i).tmap_mtran_ref_no || '/CN'
    --                                ),
    --                         v_rct_rec (j).rct_brh_code, v_rct_rec (j).rct_no,
    --                         DECODE (v_cancel_rct, 'Y', 'C', 'N', 'A')
    --                        );
    --            --RAISE_ERROR('v_tran_mapping (i).tmap_mtran_ref_no'||v_tran_mapping (i).tmap_mtran_ref_no);
    --            UPDATE gin_clm_salvages
    --               --SET CSD_BUYER=v_rct_rec (j).rct_paid_by,
    --            SET csd_buyer =
    --                   (SELECT DISTINCT rct_received_from
    --                      FROM fms_receipts
    --                     WHERE rct_brh_rct_code =
    --                                          v_tran_mapping (i).tmap_mtran_ref_no),
    --                csd_sold = 'Y',
    --                csd_approved_value = v_tran_mapping (i).tmap_amount,
    --                csd_status = 'B'
    --             WHERE csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;

    --            -- PROCESS SALVAGE TRANSACTIONS
    --            BEGIN
    --               SELECT clmp_limit_amt, clmp_per_pt_code
    --                 INTO v_limit_amt, v_per_pt_code
    --                 FROM gin_claim_perils
    --                WHERE clmp_code = v_tran_mapping (i).tmap_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                          (   'Error determining claim peril...tmap_mtran_no'
    --                           || v_tran_mapping (i).tmap_mtran_no
    --                          );
    --            END;

    ----            SELECT DECODE (v_rct_rec (j).rct_acct_type_id, 'SV', 'CS', 'CR')
    ----              INTO v_trans_type
    ----              FROM DUAL;

    ----            SELECT DECODE (v_trans_type, 'CS', 'S', 'R')
    ----              INTO v_rec_tran_type
    ----              FROM DUAL;
    --              SELECT DECODE (v_rct_rec (j).rct_acct_type_id, 'SV', 'CS','XS','XS', 'CR')  INTO v_trans_type
    --              FROM DUAL;

    --            SELECT DECODE (v_trans_type, 'CS', 'S','XS','E', 'R')
    --              INTO v_rec_tran_type
    --              FROM DUAL;
    --            --raise_error('v_rec_tran_type'||v_rec_tran_type);
    --            IF v_trans_type = 'CS'
    --            THEN
    --               BEGIN
    --                  SELECT COUNT (*)
    --                    INTO v_cnt
    --                    FROM gin_clm_salvages
    --                   WHERE csd_clmp_code = v_tran_mapping (i).tmap_mtran_no
    --                     AND csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR FETCHING SALVAGE DETAILS...');
    --               END;
    --            ELSE
    --               v_cnt := 1;
    --            END IF;

    --            IF NVL (v_cnt, 0) > 0
    --            THEN
    --               --RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no);
    --               BEGIN
    --                  SELECT reg_clmt_code, reg_third_party
    --                    INTO v_clmt_code, v_clmnt_type
    --                    FROM gin_rgstd_claimants, tqc_clients
    --                   WHERE reg_third_party = 'S'
    --                     AND reg_cld_code = clnt_code
    --                     AND reg_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     BEGIN
    --                        SELECT cmb_prp_code, 'S'
    --                          INTO v_clmt_code, v_clmnt_type
    --                          FROM gin_claim_master_bookings
    --                         WHERE cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                                   (   'Error determining claimant 1='
    --                                    || v_tran_mapping (i).tmap_check_mtran_ref_no
    --                                   );
    --                     END;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'Error determining claimant='
    --                                  || v_tran_mapping (i).tmap_check_mtran_ref_no
    --                                 );
    --               END;

    --               -- RAISE_ERROR('HERE='||(v_tran_mapping (i).tmap_amount)||';'||v_limit_amt);
    --               IF NVL (v_tran_mapping (i).tmap_amount, 0) = 0
    --               THEN
    --                  raise_error ('Error:- Receipt amount not provided...');
    --               END IF;

    --               IF v_cancel != 'Y'
    --               THEN
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clm_salv_recovry
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error...');
    --                  -- creating claim transaction
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clmsalv_rec_contra
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    --                  --                          EXCEPTION
    --                  --                            WHEN OTHERS THEN
    --                  --                                RAISE_ERROR('Error...');-- creating claim transaction
    --                  END;
    --               END IF;
    --            ELSE
    --               NULL;
    --            -- CREATE A TICKET TO BE ASSIGNED TO DEFAULT CLAIMS USER, TO PROCESS THE SALVAGE TRANSACTION FROM THE RECEIPT CREATED.....SOLO
    --            END IF;
    --         END LOOP;
    --      END LOOP;
    --   END IF;
    ----   EXCEPTION
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                  'POSTING GIS 2RCT :-' || SQLERRM (SQLCODE)
    ----                                 );
    --END post_gis_rct;

    --   PROCEDURE post_gis_rct (
    --   v_rct_code                       NUMBER,
    --   v_rct_rec                        fms_interfaces_pkg.type_receipts_table,
    --   v_tran_mapping          IN OUT   fms_interfaces_pkg.tran_mapping_type,
    --   v_rct_type                       VARCHAR2,
    --   v_user_name                      VARCHAR2,
    --   v_cancel                         VARCHAR2 DEFAULT 'N',
    --   v_mtran_ref_no                   VARCHAR2 DEFAULT NULL,
    --   v_reasons_for_failure            VARCHAR2 DEFAULT NULL
    --)
    --IS
    --   v_errmsg                  VARCHAR2 (1500);
    --   v_count                   NUMBER          := 0;
    --   v_ggt_trans_no            NUMBER;
    --   v_mtran_no                NUMBER;
    --   v_amount                  NUMBER          := 0;
    --   v_rrc_code                NUMBER;
    --   v_rec_count               NUMBER;
    --   v_cancel_rct              VARCHAR2 (1)    := v_cancel;
    --   v_allocate_amt            NUMBER          := 0;
    --   v_bal_amt                 NUMBER          := 0;
    --   v_dr_comm_due             NUMBER          := 0;
    --   v_dr_comm_vat_incl        NUMBER          := 0;
    --   v_diff                    NUMBER          := 0;
    --   v_comm_alloc_amt          NUMBER          := 0;
    --   v_brn_code                NUMBER;
    --   v_agnt_code               NUMBER;
    --   v_prev_mtran_no           NUMBER;
    --   v_prev_mtran_ref_no       VARCHAR2 (30);
    --   v_tran_type               VARCHAR2 (10);
    --   v_rnd                     NUMBER;
    --   v_bcur_rnd                NUMBER;
    --   v_cur_rate                NUMBER;
    --   v_param                   VARCHAR2 (5);
    --   v_appr_comm               NUMBER;
    --   v_amt_to_com              NUMBER;
    --   v_act_type_cnt            NUMBER;
    --   v_prp_code                NUMBER;
    --   v_per_pt_code             NUMBER;
    --   v_limit_amt               NUMBER;
    --   v_clmt_code               NUMBER;
    --   v_clmnt_type              VARCHAR2 (30);
    --   v_trans_type              VARCHAR2 (30);
    --   v_param_value             VARCHAR2 (30);
    --   v_cnt                     NUMBER;
    --   v_rec_tran_type           VARCHAR2 (30);
    --   v_interface_type          VARCHAR2 (10);
    --   v_allocate                VARCHAR2 (1);
    --   vuser                     VARCHAR2 (30);
    --   v_new_mtran_no            NUMBER;
    --   v_tmap_amt                NUMBER;
    --   v_pol_batch_no            NUMBER;
    --   v_trans_count             NUMBER;
    --   v_new_dr_no               VARCHAR2 (30);
    --   v_freq                    VARCHAR2 (10);
    --   v_dr_no                   NUMBER;
    --   v_new_pol_batch           NUMBER;
    --   v_dr_mtran_no             NUMBER;
    --   v_dr_mtran_ref_no         VARCHAR2 (30);
    --   v_salvage_rct_param       VARCHAR2 (1);
    --   v_clm_os_reserve          NUMBER;
    --   v_comm_allocated          NUMBER;
    --   v_dr_vat_due              NUMBER;
    --   v_prev_ggt_trans_no       NUMBER;
    --   v_whtx                    NUMBER;
    --   v_net_com_param           VARCHAR2 (1)    := 'N';
    --   v_admfee                  NUMBER;
    --   v_admfee_wht              NUMBER;
    --   v_appr_adm_fee            NUMBER;
    --   v_allocate_adm_fee        NUMBER;
    --   v_admin_fee_allocated     NUMBER;
    --   v_adm_fee_diff            NUMBER;
    --   v_dr_admin_fee_vat_incl   NUMBER;
    --   v_admfee_alloc_amt        NUMBER          := 0;
    --
    --   CURSOR cur_commissions (v_prv_mtran_no IN NUMBER)
    --   IS
    --      SELECT *
    --        FROM gin_commission_pymts
    --       WHERE cop_cr_mtran_no = v_prv_mtran_no;
    --BEGIN
    --   /*
    --   ************************************
    --   USE V_TRAN_MAPPING(i).TMAP_COMM_ALLOC
    --   **************************************
    --   */
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAID_ON_FULL_DEBIT')
    --        INTO v_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching commission payment parameter...');
    --   END;
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('ALLOW_SALVAGE_WITHOUT_PYMT')
    --        INTO v_salvage_rct_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_salvage_rct_param := 'Y';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching Salvage  parameter...');
    --   END;
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
    --        INTO v_net_com_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_net_com_param := 'N';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching net of commission parameter...');
    --   END;
    --
    ----      RAISE_ERROR('v_rct_type ='||v_rct_type||';;;'||v_mtran_ref_no);
    --    IF v_rct_type IN ('JV', 'DBT', 'PDR','DBTD','RNRC','QUOT')
    --   /*-- Introduced Dbtd -- Debit Draft Where The Debit Is Not Yet Authorized,
    --   And Rnrc Renewal Receipt Where The Records Are Still In The Renewal Working Area
    --   This will assist in determine how to manage the next move. ie. if the RNRC then check
    --   if its a full receipt and renew the policy. if DBTD, the policy is still in Draft hence do nothing...*/
    --   THEN
    --      SELECT ggt_trans_no_seq.NEXTVAL
    --        INTO v_ggt_trans_no
    --        FROM DUAL;
    --
    --      INSERT INTO gin_gis_transactions
    --                  (ggt_trans_no, ggt_btr_trans_code,
    --                   ggt_done_by, ggt_done_date, ggt_uw_clm_tran,
    --                   ggt_trans_date, ggt_effective_date
    --                  )
    --           VALUES (v_ggt_trans_no, DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                   v_user_name, TRUNC (SYSDATE), 'A',
    --                   TRUNC (SYSDATE), TRUNC (SYSDATE)
    --                  );
    --
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         --RAISE_ERROR('v_rct_type:'||v_rct_type||';;'||v_rct_rec (j).rct_acct_type_id);
    --         IF v_rct_rec (j).rct_acct_type_id IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_clients
    --             WHERE clnt_code = v_rct_rec (j).rct_act_code
    --               AND clnt_sht_desc = v_rct_rec (j).rct_act_sht_desc;
    --         ELSIF v_rct_rec (j).rct_acct_type_id NOT IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_agencies, tqc_account_types
    --             WHERE agn_act_code = act_code
    --               AND agn_code = v_rct_rec (j).rct_act_code
    --               AND agn_sht_desc = v_rct_rec (j).rct_act_sht_desc
    --               AND act_type_id = v_rct_rec (j).rct_acct_type_id;
    --         END IF;
    --
    --         IF v_act_type_cnt = 0
    --         THEN
    --            raise_error (   'The account type='
    --                         || v_rct_rec (j).rct_acct_type_id
    --                         || ' and account code='
    --                         || v_rct_rec (j).rct_act_sht_desc
    --                         || ' do not match ...'
    --                         || ' v_rct_rec (j).rct_act_code  '
    --                         || v_rct_rec (j).rct_act_code
    --                        );
    --         END IF;
    --
    --         IF v_cancel = 'Y'
    --         THEN
    --            -- MAKE SURE THAT THE RCT 2B CANCELLED ALREADY EXISTS
    --            SELECT COUNT ('X')
    --              INTO v_rec_count
    --              FROM gin_master_transactions
    --             WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --               AND mtran_rct_code = v_rct_rec (j).rct_no;
    --
    --            IF NVL (v_rec_count, 0) = 0
    --            THEN          --DELETE THE  GIN_GIS_TRANSACTION REC CREATED ABOVE;
    --               DELETE FROM gin_gis_transactions
    --                     WHERE ggt_trans_no = v_ggt_trans_no;
    --
    --               EXIT;
    --            END IF;
    --
    --            BEGIN
    --               v_pol_batch_no := v_tran_mapping (j).tmap_pol_batch_no;
    --               update_transmittal_rct (v_pol_batch_no,
    --                                       v_tran_mapping (j).tmap_amount,
    --                                       v_cancel_rct,
    --                                       v_rct_type
    --                                      );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('Error updating transmittal at cancellation rec...'||v_rct_type||v_pol_batch_no);
    --           END;
    --         END IF;
    --
    --         v_cur_rate :=
    --             get_currexch_rate (v_rct_rec (j).rct_cur_code, v_rnd, v_bcur_rnd);
    --
    --         SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                           || gin_mtran_no_seq.NEXTVAL
    --                          )
    --           INTO v_mtran_no
    --           FROM DUAL;
    --
    --         -- RAISE_ERROR( 'MEMO=='||v_rct_rec (j).rct_paymt_memo||';'||v_rct_rec (j).rct_desc||';'||v_rct_rec (j).rct_paymt_mode);
    --         INSERT INTO gin_master_transactions
    --                     (mtran_no, mtran_doc_date, mtran_date,
    --                      mtran_ref_no,
    --                      mtran_other_ref, mtran_tran_type,
    --                      mtran_dc,
    --                      mtran_control_acc,
    --                      mtran_client_type,
    --                      mtran_client_code,
    --                      mtran_amount,
    --                      mtran_balance,
    --                      mtran_authorised,
    --                      mtran_net_amt,
    --                      mtran_posting_date, mtran_ggt_tran_no, mtran_prp_code,
    --                      mtran_btr_trans_code, mtran_origin,
    --                      mtran_cur_code,
    --                      mtran_cur_symbol,
    --                      mtran_brn_code,
    --                      mtran_brn_sht_desc,
    --                      mtran_posted_by,
    --                      mtran_cur_rate,
    --                      mtran_client_polcy_no,
    --                      mtran_narrations, mtran_rct_code,
    --                      mtran_rct_paymt_mode,
    --                      mtran_rct_paymt_memo,
    --                      mtran_agn_discount,
    --                      mtran_pol_batch_no,
    --                      mtran_other_ref1,
    --                      mtran_authorised_by,
    --                      mtran_date_authorized, mtran_pol_ren_endos_no,
    --                      mtran_rct_type,
    --                      mtran_rct_imp_code
    --                     )
    --              --PRP CODE = DECODE( v_rct_rec(j).RCT_ACC_TYPE,'D',v_rct_rec(j).RCT_ACT_CODE,NULL)
    --         VALUES      (v_mtran_no, v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                      DECODE (v_cancel_rct,
    --                              'Y', v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                              v_rct_rec (j).rct_brh_rct_code
    --                             ),
    --                      v_mtran_ref_no,          --v_rct_rec (j).rct_paymt_memo,
    --                                     DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                      DECODE (v_cancel_rct, 'Y', 'D', 'C'),
    --                      v_rct_rec (j).rct_act_sht_desc,
    --                      v_rct_rec (j).rct_acct_type_id,
    --                      v_rct_rec (j).rct_act_code,               --acc sht desc
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      'Y',
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      v_rct_rec (j).rct_date, v_ggt_trans_no, NULL,
    --                      DECODE (v_cancel_rct, 'Y', 'CN', 'RC'), 'A',
    --                      v_rct_rec (j).rct_cur_code,
    --                      tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                      v_rct_rec (j).rct_brh_code,
    --                      fms_interfaces_pkg.brh_name (v_rct_rec (j).rct_brh_code,
    --                                                   'S'
    --                                                  ),
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_cur_rate,
    --                      gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                      v_rct_rec (j).rct_desc, v_rct_rec (j).rct_no,
    --                      v_rct_rec (j).rct_paymt_mode,
    --                      v_rct_rec (j).rct_paymt_memo,
    --                      v_rct_rec (j).rct_discount,
    --                      gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no),
    --                      v_mtran_ref_no,
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_rct_rec (j).rct_date, v_mtran_ref_no,
    --                      v_rct_rec (j).rct_creation_type,
    --                      v_rct_rec (j).rct_imp_code
    --                     );
    --
    --         v_brn_code := v_rct_rec (j).rct_brh_code;
    --         v_agnt_code := v_rct_rec (j).rct_act_code;
    --
    ----           RAISE_ERROR('TOP='||v_param||';'||v_appr_comm||';'||v_allocate_amt||';'||V_cancel||';'||v_mtran_ref_no);
    --         IF v_cancel != 'Y'
    --         THEN
    --            FOR i IN 1 .. v_tran_mapping.COUNT
    --            LOOP
    --               BEGIN
    --                  -- raise_error('vat_amount'||v_tran_mapping (i).tmap_inv_vat);
    --                  v_pol_batch_no := v_tran_mapping (i).tmap_pol_batch_no;
    --
    --                  --gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no);
    --
    --                  -- raise_error('v_pol_batch_no='||v_pol_batch_no);
    ----                     BEGIN
    ----                        UPDATE gin_gis_transmitals
    ----                           SET ggts_rct_amt =
    ----                                  NVL (ggts_rct_amt, 0)
    ----                                  + DECODE (v_cancel_rct, 'Y', -1, 1)
    ----                                    * ABS (v_tran_mapping (i).tmap_amount)
    ----                         WHERE ggts_pol_batch_no = v_pol_batch_no;
    ----                     EXCEPTION
    ----                        WHEN OTHERS
    ----                        THEN
    ----                           NULL;
    ----                     END;
    --                  BEGIN
    --                     update_transmittal_rct (v_pol_batch_no,
    --                                             v_tran_mapping (i).tmap_amount,
    --                                             v_cancel_rct,
    --                                             v_rct_type
    --                                            );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error updating transmittal rec...');
    --                  END;
    --
    --                  BEGIN
    --                     SELECT pol_pro_interface_type, pol_freq_of_payment
    --                       INTO v_interface_type, v_freq
    --                       FROM gin_policies
    --                      WHERE pol_batch_no = v_pol_batch_no;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        v_interface_type := 'ACCRUAL';
    --                        v_freq := 'A';
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error (   'Error getting policy details...'
    --                                     || 'v_pol_batch_no:'
    --                                     || v_pol_batch_no
    --                                     || 'v_mtran_ref_no:'
    --                                     || v_mtran_ref_no
    --                                    );
    --                  END;
    --
    --                  IF NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                  THEN
    ----                     RAISE_ERROR('v_tran_mapping (i).tmap_amount='||v_tran_mapping (i).tmap_amount);
    --                     BEGIN
    --                        gis_accounts_utilities.auto_auth_transactions
    --                                        (v_pol_batch_no,
    --                                         v_tran_mapping (i).tmap_mtran_ref_no,
    --                                         --v_mtran_ref_no ,
    --                                         v_mtran_no,
    --                                         v_tran_mapping (i).tmap_amount,
    --                                         v_freq,
    --                                         v_rct_rec (j).rct_creation_type,
    --                                         v_rct_rec (j).rct_imp_code --,
    ----                                         v_reasons_for_failure
    --                                        );
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                               ('Error processing cash basis transaction... ');
    --                     END;
    --                  ELSE
    ----                     raise_error(v_tran_mapping (i).tmap_mtran_no||';'||v_tran_mapping (i).tmap_mtran_no);
    ----                        raise_error(v_tran_mapping (i).tmap_mtran_no);
    --                     IF NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                        ('DBT', 'JV', 'PDR')
    --                     THEN
    --                        IF NVL (v_tran_mapping (i).tmap_amount, 0) != 0
    --                        THEN
    --                           BEGIN
    --                              SELECT ABS (NVL (mtran_balance, 0)),
    --                                       ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_balance, 0))
    --                                     + ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       )
    --                                     + ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_vat, 0))
    --                                     - (  ABS (NVL (mtran_vat_paid, 0))
    --                                        + ABS (NVL (mtran_vat_payable, 0))
    --                                       ),
    --                                     mtran_tran_type,
    --                                       ABS (NVL (mtran_whtx, 0))
    --                                     - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_whtx_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_whtx, 0))
    --                                     - (  ABS (NVL (mtran_lta_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_lta_whtx_payable, 0))
    --                                       )
    --                                INTO v_bal_amt,
    --                                     v_dr_comm_due,
    --                                     v_amt_to_com,
    --                                     v_dr_vat_due,
    --                                     v_tran_type,
    --                                     v_whtx,
    --                                     v_admfee,
    --                                     v_admfee_wht
    --                                FROM gin_master_transactions
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;
    --
    --                              v_dr_comm_vat_incl :=
    --                                 NVL (v_dr_comm_due, 0)
    --                                 + NVL (v_dr_vat_due, 0);
    --                              v_dr_admin_fee_vat_incl :=
    --                                      NVL (v_admfee, 0)
    --                                      + NVL (v_admfee_wht, 0);
    --                           EXCEPTION
    --                              WHEN NO_DATA_FOUND
    --                              THEN
    --                                 BEGIN
    --                                    SELECT ABS (NVL (mtran_balance, 0)),
    --                                             ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_balance, 0))
    --                                           + ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             )
    --                                           + ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                           mtran_tran_type, mtran_no,
    --                                           mtran_ref_no,
    --                                             ABS (NVL (mtran_vat, 0))
    --                                           - (  ABS (NVL (mtran_vat_paid, 0))
    --                                              + ABS (NVL (mtran_vat_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_whtx, 0))
    --                                           - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                              + ABS (NVL (mtran_whtx_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_whtx, 0))
    --                                           - (  ABS (NVL (mtran_lta_whtx_paid,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                              + ABS
    --                                                   (NVL
    --                                                       (mtran_lta_whtx_payable,
    --                                                        0
    --                                                       )
    --                                                   )
    --                                             )
    --                                      INTO v_bal_amt,
    --                                           v_dr_comm_due,
    --                                           v_amt_to_com,
    --                                           v_tran_type, v_dr_mtran_no,
    --                                           v_dr_mtran_ref_no,
    --                                           v_dr_vat_due,
    --                                           v_whtx,
    --                                           v_admfee,
    --                                           v_admfee_wht
    --                                      FROM gin_master_transactions
    --                                     WHERE mtran_pol_batch_no =
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                       AND mtran_tran_type NOT IN
    --                                                                 ('RC', 'CN')
    --                                       AND mtran_dc = 'D'
    --                                       AND mtran_client_type IN
    --                                                  ('D', 'A', 'B', 'FI', 'IA');
    --
    --                                    v_dr_comm_vat_incl :=
    --                                         NVL (v_dr_comm_due, 0)
    --                                       + NVL (v_dr_vat_due, 0);
    --                                    v_dr_admin_fee_vat_incl :=
    --                                         NVL (v_admfee, 0)
    --                                       + NVL (v_admfee_wht, 0);
    --                                 EXCEPTION
    --                                    WHEN NO_DATA_FOUND
    --                                    THEN
    --                                       NULL;
    --                                 END;
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_application_error (-20001,
    --                                                          SQLERRM (SQLCODE)
    --                                                         );
    --                           END;
    --
    --                           IF NVL (v_param, 'N') = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'N'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --
    --                              /*
    --                              Handle net of commission here
    --                              If the receipt is not direct, and the amount is net of commission,
    --                              compute how much commission that has been withheld by the agent/broker,
    --                              process commission payment as paid outside the system up to fms.
    --                              this has to be parameterized
    --                              <Lewis to work on this!!!!!!!!!! for union>
    --
    --                              */
    --                              IF     NVL (v_net_com_param, 'N') = 'Y'
    --                                 AND v_rct_rec (j).rct_acct_type_id <> 'D'
    --                              THEN
    --                                 IF NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                         'N') = 'Y'
    --                                 THEN
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_dr_comm_due, 0)
    --                                                  - NVL (v_whtx, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_admfee, 0)
    --                                                  - NVL (v_admfee_wht, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 ELSE
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_dr_comm_due, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_admfee, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 END IF;
    --
    --                                 v_comm_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_dr_comm_due,
    --                                        v_dr_vat_due,
    --                                        v_appr_comm,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'COM'
    --                                       );
    --
    --                                 IF NVL (v_appr_adm_fee, 0) <> 0
    --                                 THEN
    --                                    v_admin_fee_allocated :=
    --                                       gis_accounts_utilities.update_commission
    --                                          (v_mtran_no,
    --                                           v_tran_mapping (i).tmap_mtran_ref_no,
    --                                           NVL
    --                                              (v_dr_mtran_no,
    --                                               v_tran_mapping (i).tmap_mtran_no
    --                                              ),
    --                                           v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                           v_admfee,
    --                                           v_dr_vat_due,
    --                                           v_appr_adm_fee,
    --                                           v_brn_code,
    --                                           v_agnt_code,
    --                                           v_rct_rec (j).rct_cur_code,
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inc_comm,
    --                                               'Y'
    --                                              ),
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inv_vat,
    --                                               'Y'
    --                                              ),
    --                                           'ADM'
    --                                          );
    --                                 END IF;
    --
    --                                 --raise_error(v_admin_fee_allocated);
    --                                 IF     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ) = 'N'
    --                                    AND NVL (v_comm_allocated, 0) != 0
    --                                 THEN
    --                                    gis_accounts_utilities.auth_comm_pymnts
    --                                       (v_mtran_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_agnt_code,
    --                                        'CHQ',
    --                                        'N',
    --                                        tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'N'
    --                                            )
    --                                       );
    --                                 END IF;
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) =
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_adm_fee;
    --                              ELSE
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_adm_fee;
    --                              END IF;
    --
    --                              IF ABS (v_bal_amt) < NVL (v_allocate_amt, 0)
    --                              THEN
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --
    --                              IF ABS (v_bal_amt) < NVL (v_allocate_adm_fee, 0)
    --                              THEN
    --                                 v_allocate_adm_fee := ABS (v_bal_amt);
    --                              END IF;
    --                           END IF;
    --
    ----                       raise_error ('V_RCT_MAPPING ='||v_tran_mapping (1).tmap_rct_type||' AMOUNT;'||v_allocate_amt||'Balance:'||v_bal_amt||'Param:'||v_appr_comm);
    --                           IF NVL (v_allocate_amt, 0) <> 0
    --                           THEN
    --                              BEGIN
    --                                 gis_accounts_utilities.knock_trans
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_rct_rec (j).rct_date,
    --                                     v_allocate_amt
    --                                    );
    --                              EXCEPTION
    --                                 WHEN OTHERS
    --                                 THEN
    --                                    raise_error
    --                                             (   'Error:- Erick was here....'
    --                                              || v_mtran_no
    --                                             );
    --                              END;
    --                           END IF;
    --
    --                           --************MOVED TOWARDS END OF PROC  MASINDE
    --                           /* gis_accounts_utilities.update_coin_payments(v_mtran_no,
    --                                                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                                                        NVL(v_dr_mtran_no,v_tran_mapping (i).tmap_mtran_no),
    --                                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                                                        NVL (v_tran_mapping (i).tmap_amount, 0),
    --                                                                        v_brn_code,
    --                                                                        v_agnt_code,
    --                                                                        v_rct_rec (j).rct_cur_code
    --                                                                        );*/
    --                           v_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_amt;
    --                           v_adm_fee_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_adm_fee;
    --
    --                           IF     v_dr_comm_vat_incl != 0
    --                              AND v_diff > 0
    --                              AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_diff) > NVL (v_dr_comm_vat_incl, 0)
    --                              THEN
    --                                 v_comm_alloc_amt :=
    --                                                  NVL (v_dr_comm_vat_incl, 0);
    --                              ELSE
    --                                 v_comm_alloc_amt := ABS (v_diff);
    --                              END IF;
    --
    --                              --raise_error(v_dr_comm_vat_incl||';'||v_diff);
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_dr_comm_due,
    --                                     v_dr_vat_due,
    --                                     v_diff,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );
    --                              v_diff :=
    --                                    NVL (v_diff, 0)
    --                                    - NVL (v_comm_allocated, 0);
    --
    --                              --RAISE_ERROR(v_comm_allocated||';'||v_admfee||';'||v_dr_vat_due||';'||v_diff);
    --                              IF NVL (v_diff, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_diff,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;
    --
    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           ELSIF     NVL (v_tran_type, 'NONE') = 'BAL'
    --                                 AND NVL (v_tran_mapping (i).tmap_comm_alloc,
    --                                          0
    --                                         ) != 0
    --                           THEN
    --                              v_comm_alloc_amt :=
    --                                  NVL (v_tran_mapping (i).tmap_comm_alloc, 0);
    --
    --                              UPDATE gin_master_transactions
    --                                 SET mtran_commission =
    --                                          NVL (mtran_commission, 0)
    --                                        +   DECODE
    --                                                (SIGN (NVL (mtran_commission,
    --                                                            0
    --                                                           )
    --                                                      ),
    --                                                 -1, -1,
    --                                                 1
    --                                                )
    --                                          * v_comm_alloc_amt
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;
    --
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_comm_alloc_amt,
    --                                     NULL,                    --v_due_vat_amt,
    --                                     v_comm_alloc_amt,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );
    --
    --                              IF NVL (v_appr_adm_fee, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_appr_adm_fee,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;
    --
    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           END IF;
    --
    --                           ----**************GENERATE COINURANCE PAYMTS
    --                           --
    --                           gis_accounts_utilities.update_coin_payments
    --                                   (v_mtran_no,
    --                                    v_tran_mapping (i).tmap_mtran_ref_no,
    --                                    NVL (v_dr_mtran_no,
    --                                         v_tran_mapping (i).tmap_mtran_no
    --                                        ),
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                    v_allocate_amt,
    --                                    v_comm_allocated,
    --                                    v_brn_code,
    --                                    v_agnt_code,
    --                                    v_rct_rec (j).rct_cur_code,
    --                                    v_tran_mapping (i).tmap_inc_comm,
    --                                    NVL (v_tran_mapping (i).tmap_inv_vat, 'Y')
    --                                   );
    --                           v_amount :=
    --                                     v_amount + v_tran_mapping (i).tmap_amount;
    --                        END IF;
    --
    --                        BEGIN
    --                           gis_accounts_utilities.validate_allocations
    --                                        (v_mtran_no,
    --                                         NVL (v_dr_mtran_no,
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                             )
    --                                        );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error occured on validation of Receipt allocations.'
    --                                 );
    --                        END;
    --                     -- Gis_Accounts_Utilities.allocate_pdr_rcpt(v_mtran_no,v_tran_mapping (i).tmap_mtran_no,v_tran_mapping (i).tmap_amount);
    --                     ELSIF     NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                                     ('RNRC')
    --                           AND NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                     THEN
    --                        /*-- if the receipt amt is equal to fap, transfer transaction to uw, authorize and allocate */
    --                        gin_stp_pkg.auto_renew_prc
    --                                             (v_tran_mapping (i).tmap_mtran_no
    --                                             );
    --                     END IF;
    --                  END IF;
    --               --                  EXCEPTION
    --               --                     WHEN OTHERS
    --               --                     THEN
    --               --                        raise_error (   ' FOR Batch no '
    --               --                                     || v_tran_mapping (i).tmap_pol_batch_no
    --               --                                    );
    --               END;
    --            END LOOP;
    --         ELSE
    --            BEGIN
    --               SELECT mtran_no, mtran_ref_no
    --                 INTO v_prev_mtran_no, v_prev_mtran_ref_no
    --                 FROM gin_master_transactions
    --                WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --                  AND mtran_client_code = v_rct_rec (j).rct_act_code
    --                  AND mtran_client_type = v_rct_rec (j).rct_acct_type_id
    --                  AND mtran_rct_code = v_rct_rec (j).rct_no;
    --            EXCEPTION
    --               WHEN TOO_MANY_ROWS
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'DUPLICATE RECEIPT FOUND..:-'
    --                                           || v_rct_rec (j).rct_brh_rct_code
    --                                           || ' - '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20001,
    --                                           'ERROR..:-' || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    --
    --            IF    NVL (v_rct_rec (j).rct_client_charge_amount, 0) IS NULL
    --               OR NVL (v_rct_rec (j).rct_client_charge_amount, 0) != 0
    --            THEN
    --               INSERT INTO gin_master_transactions
    --                           (mtran_no,
    --                            mtran_doc_date, mtran_date,
    --                            mtran_ref_no,
    --                            mtran_other_ref, mtran_tran_type, mtran_dc,
    --                            mtran_control_acc,
    --                            mtran_client_type,
    --                            mtran_client_code,
    --                            mtran_amount,
    --                            mtran_balance,
    --                            mtran_authorised,
    --                            mtran_net_amt,
    --                            mtran_posting_date, mtran_ggt_tran_no,
    --                            mtran_prp_code, mtran_btr_trans_code,
    --                            mtran_origin, mtran_cur_code,
    --                            mtran_cur_symbol,
    --                            mtran_brn_code,
    --                            mtran_brn_sht_desc,
    --                            mtran_posted_by,
    --                            mtran_cur_rate,
    --                            mtran_client_polcy_no,
    --                            mtran_rct_code,
    --                            mtran_narrations,
    --                            mtran_rct_paymt_mode,
    --                            mtran_rct_paymt_memo,
    --                            mtran_agn_discount,
    --                            mtran_authorised_by,
    --                            mtran_date_authorized
    --                           )
    --                    VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_mtran_no_seq.NEXTVAL
    --                                      ),
    --                            v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                            v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                            v_rct_rec (j).rct_paymt_memo, 'BNK', 'D',
    --                            v_rct_rec (j).rct_act_sht_desc,
    --                            v_rct_rec (j).rct_acct_type_id,
    --                            v_rct_rec (j).rct_act_code,
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            'Y',
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            v_rct_rec (j).rct_date, v_ggt_trans_no,
    --                            NULL, 'BNK',
    --                            'A', v_rct_rec (j).rct_cur_code,
    --                            tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                            v_rct_rec (j).rct_brh_code,
    --                            fms_interfaces_pkg.brh_name
    --                                                   (v_rct_rec (j).rct_brh_code,
    --                                                    'S'
    --                                                   ),
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_cur_rate,
    --                            gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                            v_rct_rec (j).rct_no,
    --                            'CHARGES UPON CANCELLATION',
    --                            v_rct_rec (j).rct_paymt_mode,
    --                            v_rct_rec (j).rct_paymt_memo,
    --                            v_rct_rec (j).rct_discount,
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_rct_rec (j).rct_date
    --                           );
    --            END IF;
    --
    --            gis_accounts_utilities.undo_pdr_rcpt (v_prev_mtran_no);
    --            -- UNDOING PDR ALLOACTIONS
    --            gis_accounts_utilities.undo_trans_allocation (v_prev_mtran_no,
    --                                                          NULL,
    --                                                          'Y'
    --                                                         );
    --            gis_accounts_utilities.undo_pa_rcpt (v_prev_mtran_no,
    --                                                 v_mtran_no,
    --                                                 NULL
    --                                                );
    --
    --            /* MOVED TO gis_accounts_utilities.undo_trans_allocation PROCEDURE
    --            FOR i IN 1 .. v_tran_mapping.COUNT  LOOP
    --            -- RAISE_ERROR('v_prev_mtran_no'||v_prev_mtran_no);
    --                IF NVL(v_net_com_param,'N') = 'Y'
    --                  AND v_rct_rec (j).rct_acct_type_id <> 'D' THEN
    --                         Gis_Accounts_Utilities.auth_comm_pymnts (
    --                                                  v_prev_mtran_no,
    --                                                  NULL,-- v_mtran_no,
    --                                                  NULL,
    --                                                  'CHQ',
    --                                                  'N',
    --                                                  tqc_interfaces_pkg.username (v_rct_rec (j).rct_captured_by ),
    --                                                  NVL(v_tran_mapping (i).tmap_inv_vat,'N')
    --                                               );
    --                END IF;
    --             END LOOP; */
    --            SELECT ABS (NVL (mtran_balance, 0)),
    --                     ABS (NVL (mtran_commission, 0))
    --                   - (  ABS (NVL (mtran_comm_paid, 0))
    --                      + ABS (NVL (mtran_comm_payable, 0))
    --                     )
    --              INTO v_bal_amt,
    --                   v_dr_comm_due
    --              FROM gin_master_transactions
    --             WHERE mtran_no = v_prev_mtran_no;
    --
    --            IF ABS (v_bal_amt) > NVL (v_rct_rec (j).rct_amount, 0)
    --            THEN
    --               v_allocate_amt := NVL (v_rct_rec (j).rct_amount, 0);
    --            ELSE
    --               v_allocate_amt := ABS (v_bal_amt);
    --            END IF;
    --
    --            gis_accounts_utilities.knock_trans
    --                                            (v_prev_mtran_no,
    --                                             v_prev_mtran_ref_no,
    --                                             v_mtran_no,
    --                                                v_rct_rec (j).rct_brh_rct_code
    --                                             || '/CN',
    --                                             v_rct_rec (j).rct_date,
    --                                             v_allocate_amt
    --                                            );
    --         END IF;
    --      END LOOP;
    --   ELSIF NVL (v_rct_type, 'XXX') = ('TRVD')
    --   THEN                                             -- TRAVEL DEPOSIT RECEIPTS
    --      -- Introducing a table to hold deposit
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            INSERT INTO gin_receipt_deposits
    --                        (rde_code,
    --                         rde_clnt_code,
    --                         rde_drcr,
    --                         rde_pol_policy_no,
    --                         rde_amount, rde_allocated_amt,
    --                         rde_balance,
    --                         rde_received_from,
    --                         rde_captured_by,
    --                         rde_captured_date, rde_remarks,
    --                         rde_rct_no, rde_brh_code,
    --                         rde_ggt_trans_no, rde_date,
    --                         rde_receipt_no, rde_tran_type,
    --                         rde_cancelled,
    --                         rde_cancel_dt,
    --                         rde_cancel_by
    --                        )
    --                 VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'RRRR')
    --                                    || gin_rde_code_seq.NEXTVAL
    --                                   ),
    --                         v_rct_rec (j).rct_act_code,
    --                         DECODE (v_cancel, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         v_tran_mapping (i).tmap_amount, 0,
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         v_rct_rec (j).rct_no, v_rct_rec (j).rct_brh_code,
    --                         NULL, SYSDATE,
    --                         v_tran_mapping (i).tmap_mtran_ref_no, 'TRVL',
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         DECODE (v_cancel, 'Y', SYSDATE, NULL),
    --                         DECODE (v_cancel,
    --                                 'Y', v_rct_rec (j).rct_captured_by,
    --                                 NULL
    --                                )
    --                        );
    --         END LOOP;
    --      END LOOP;
    --   ELSE
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            IF NVL (v_salvage_rct_param, 'N') != 'Y'
    --            THEN
    --               IF NVL (v_rct_rec (j).rct_acct_type_id, 'XX') = 'SV'
    --               THEN
    --                  v_clm_os_reserve :=
    --                     gin_stp_claims_pkg.get_clm_os_reserve
    --                                  (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                   'Y'
    --                                  );
    --
    --                  IF NVL (v_clm_os_reserve, 0) != 0
    --                  THEN
    --                     raise_error
    --                        ('Error- Full Claim Payment NOT DONE, Cannot  Continue'
    --                        );
    --                  END IF;
    --               END IF;
    --            END IF;
    --
    --            --RAISE_APPLICATION_ERROR (-20001,'V_MTRAN_REF = '||V_TRAN_MAPPING(i).TMAP_CHECK_MTRAN_REF_NO||';'||v_rct_rec (j).rct_no);
    --            IF v_cancel = 'Y'
    --            THEN
    --               SELECT COUNT ('X')
    --                 INTO v_rec_count
    --                 FROM gin_recovery_rcts
    --                WHERE rrc_receipt_no = v_rct_rec (j).rct_no;
    --
    --               IF v_rec_count = 0
    --               THEN
    --                  v_cancel_rct := 'N';
    --               END IF;
    --            END IF;
    --
    --            SELECT NVL (MAX (rrc_code), 0) + 1
    --              INTO v_rrc_code
    --              FROM gin_recovery_rcts;
    --
    --           ---RAISE_ERROR('mtran_ref_no-'||v_tran_mapping (i).tmap_check_mtran_ref_no||' = '|| 'mtran_no-'||v_tran_mapping (i).tmap_mtran_no);
    --            INSERT INTO gin_recovery_rcts
    --                        (rrc_code,
    --                         rrc_claim_no,
    --                         rrc_recovery_type,
    --                         rrc_drcr,
    --                         rrc_amount,
    --                         rrc_received_from,
    --                         rrc_received_by,
    --                         rrc_receved_date, rrc_remarks,
    --                         rrc_rct_no,
    --                         rrc_brh_code, rrc_receipt_no,
    --                         rrc_status
    --                        )
    --                 VALUES (v_rrc_code,
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --RRC_CLAIM_NO,
    --                         v_rct_rec (j).rct_acct_type_id,
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         DECODE (v_cancel_rct,
    --                                 'N', v_tran_mapping (i).tmap_mtran_ref_no,
    --                                 v_tran_mapping (i).tmap_mtran_ref_no || '/CN'
    --                                ),
    --                         v_rct_rec (j).rct_brh_code, v_rct_rec (j).rct_no,
    --                         DECODE (v_cancel_rct, 'Y', 'C', 'N', 'A')
    --                        );
    --
    --            UPDATE gin_clm_salvages
    --               --SET CSD_BUYER=v_rct_rec (j).rct_paid_by,
    --            SET csd_buyer =
    --                   (SELECT rct_received_from
    --                      FROM fms_receipts
    --                     WHERE rct_brh_rct_code =
    --                                          v_tran_mapping (i).tmap_mtran_ref_no),
    --                csd_sold = 'Y',
    --                csd_approved_value = v_tran_mapping (i).tmap_amount,
    --                csd_status = 'B'
    --             WHERE csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --
    --            -- PROCESS SALVAGE TRANSACTIONS
    --            BEGIN
    --               SELECT clmp_limit_amt, clmp_per_pt_code
    --                 INTO v_limit_amt, v_per_pt_code
    --                 FROM gin_claim_perils
    --                WHERE clmp_code = v_tran_mapping (i).tmap_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                          (   'Error determining claim peril...tmap_mtran_no'
    --                           || v_tran_mapping (i).tmap_mtran_no
    --                          );
    --            END;
    --
    --            SELECT DECODE (v_rct_rec (j).rct_acct_type_id, 'SV', 'CS', 'CR')
    --              INTO v_trans_type
    --              FROM DUAL;
    --
    --            SELECT DECODE (v_trans_type, 'CS', 'S', 'R')
    --              INTO v_rec_tran_type
    --              FROM DUAL;
    --
    --            --raise_error('v_rec_tran_type'||v_rec_tran_type);
    --            IF v_trans_type = 'CS'
    --            THEN
    --               BEGIN
    --                  SELECT COUNT (*)
    --                    INTO v_cnt
    --                    FROM gin_clm_salvages
    --                   WHERE csd_clmp_code = v_tran_mapping (i).tmap_mtran_no
    --                     AND csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR FETCHING SALVAGE DETAILS...');
    --               END;
    --            ELSE
    --               v_cnt := 1;
    --            END IF;
    --
    --            IF NVL (v_cnt, 0) > 0
    --            THEN
    --               --RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no);
    --               BEGIN
    --                  SELECT reg_clmt_code, reg_third_party
    --                    INTO v_clmt_code, v_clmnt_type
    --                    FROM gin_rgstd_claimants, tqc_clients
    --                   WHERE reg_third_party = 'S'
    --                     AND reg_cld_code = clnt_code
    --                     AND reg_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     BEGIN
    --                        SELECT cmb_prp_code, 'S'
    --                          INTO v_clmt_code, v_clmnt_type
    --                          FROM gin_claim_master_bookings
    --                         WHERE cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                                   (   'Error determining claimant 1='
    --                                    || v_tran_mapping (i).tmap_check_mtran_ref_no
    --                                   );
    --                     END;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'Error determining claimant='
    --                                  || v_tran_mapping (i).tmap_check_mtran_ref_no
    --                                 );
    --               END;
    --
    --               -- RAISE_ERROR('HERE='||(v_tran_mapping (i).tmap_amount)||';'||v_limit_amt);
    --               IF NVL (v_tran_mapping (i).tmap_amount, 0) = 0
    --               THEN
    --                  raise_error ('Error:- Receipt amount not provided...');
    --               END IF;
    --
    --               IF v_cancel != 'Y'
    --               THEN
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clm_salv_recovry
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error...');
    --                  -- creating claim transaction
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clmsalv_rec_contra
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    --                  --                          EXCEPTION
    --                  --                            WHEN OTHERS THEN
    --                  --                                RAISE_ERROR('Error...');-- creating claim transaction
    --                  END;
    --               END IF;
    --            ELSE
    --               NULL;
    --            -- CREATE A TICKET TO BE ASSIGNED TO DEFAULT CLAIMS USER, TO PROCESS THE SALVAGE TRANSACTION FROM THE RECEIPT CREATED.....SOLO
    --            END IF;
    --         END LOOP;
    --      END LOOP;
    --   END IF;
    ----   EXCEPTION
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                  'POSTING GIS 2RCT :-' || SQLERRM (SQLCODE)
    ----                                 );
    --END post_gis_rct;
    --  PROCEDURE post_gis_rct (
    --   v_rct_code                       NUMBER,
    --   v_rct_rec                        fms_interfaces_pkg.type_receipts_table,
    --   v_tran_mapping          IN OUT   fms_interfaces_pkg.tran_mapping_type,
    --   v_rct_type                       VARCHAR2,
    --   v_user_name                      VARCHAR2,
    --   v_cancel                         VARCHAR2 DEFAULT 'N',
    --   v_mtran_ref_no                   VARCHAR2 DEFAULT NULL,
    --   v_reasons_for_failure            VARCHAR2 DEFAULT NULL
    --)
    --IS
    --   v_errmsg                  VARCHAR2 (1500);
    --   v_count                   NUMBER          := 0;
    --   v_ggt_trans_no            NUMBER;
    --   v_mtran_no                NUMBER;
    --   v_amount                  NUMBER          := 0;
    --   v_rrc_code                NUMBER;
    --   v_rec_count               NUMBER;
    --   v_cancel_rct              VARCHAR2 (1)    := v_cancel;
    --   v_allocate_amt            NUMBER          := 0;
    --   v_bal_amt                 NUMBER          := 0;
    --   v_dr_comm_due             NUMBER          := 0;
    --   v_dr_comm_vat_incl        NUMBER          := 0;
    --   v_diff                    NUMBER          := 0;
    --   v_comm_alloc_amt          NUMBER          := 0;
    --   v_brn_code                NUMBER;
    --   v_agnt_code               NUMBER;
    --   v_prev_mtran_no           NUMBER;
    --   v_prev_mtran_ref_no       VARCHAR2 (30);
    --   v_tran_type               VARCHAR2 (10);
    --   v_rnd                     NUMBER;
    --   v_bcur_rnd                NUMBER;
    --   v_cur_rate                NUMBER;
    --   v_param                   VARCHAR2 (5);
    --   v_appr_comm               NUMBER;
    --   v_amt_to_com              NUMBER;
    --   v_act_type_cnt            NUMBER;
    --   v_prp_code                NUMBER;
    --   v_per_pt_code             NUMBER;
    --   v_limit_amt               NUMBER;
    --   v_clmt_code               NUMBER;
    --   v_clmnt_type              VARCHAR2 (30);
    --   v_trans_type              VARCHAR2 (30);
    --   v_param_value             VARCHAR2 (30);
    --   v_cnt                     NUMBER;
    --   v_rec_tran_type           VARCHAR2 (30);
    --   v_interface_type          VARCHAR2 (10);
    --   v_allocate                VARCHAR2 (1);
    --   vuser                     VARCHAR2 (30);
    --   v_new_mtran_no            NUMBER;
    --   v_tmap_amt                NUMBER;
    --   v_pol_batch_no            NUMBER;
    --   v_trans_count             NUMBER;
    --   v_new_dr_no               VARCHAR2 (30);
    --   v_freq                    VARCHAR2 (10);
    --   v_dr_no                   NUMBER;
    --   v_new_pol_batch           NUMBER;
    --   v_dr_mtran_no             NUMBER;
    --   v_dr_mtran_ref_no         VARCHAR2 (30);
    --   v_salvage_rct_param       VARCHAR2 (1);
    --   v_clm_os_reserve          NUMBER;
    --   v_comm_allocated          NUMBER;
    --   v_dr_vat_due              NUMBER;
    --   v_prev_ggt_trans_no       NUMBER;
    --   v_whtx                    NUMBER;
    --   v_net_com_param           VARCHAR2 (1)    := 'N';
    --   v_admfee                  NUMBER;
    --   v_admfee_wht              NUMBER;
    --   v_appr_adm_fee            NUMBER;
    --   v_allocate_adm_fee        NUMBER;
    --   v_admin_fee_allocated     NUMBER;
    --   v_adm_fee_diff            NUMBER;
    --   v_dr_admin_fee_vat_incl   NUMBER;
    --   v_admfee_alloc_amt        NUMBER          := 0;
    --    v_alrt_code           NUMBER;
    --      v_msgt_msg            VARCHAR2 (160);
    --      v_check_alert         VARCHAR2 (1)     := 'N';
    --      v_prp_agent_code      NUMBER;

    --   CURSOR cur_commissions (v_prv_mtran_no IN NUMBER)
    --   IS
    --      SELECT *
    --        FROM gin_commission_pymts
    --       WHERE cop_cr_mtran_no = v_prv_mtran_no;
    --BEGIN
    --   /*
    --   ************************************
    --   USE V_TRAN_MAPPING(i).TMAP_COMM_ALLOC
    --   **************************************
    --   */
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAID_ON_FULL_DEBIT')
    --        INTO v_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching commission payment parameter...');
    --   END;

    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('ALLOW_SALVAGE_WITHOUT_PYMT')
    --        INTO v_salvage_rct_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_salvage_rct_param := 'Y';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching Salvage  parameter...');
    --   END;

    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
    --        INTO v_net_com_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_net_com_param := 'N';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching net of commission parameter...');
    --   END;

    ----      RAISE_ERROR('v_rct_type ='||v_rct_type||';;;'||v_mtran_ref_no);
    --    IF v_rct_type IN ('JV', 'DBT', 'PDR','DBTD','RNRC','QUOT')
    --   /*-- Introduced Dbtd -- Debit Draft Where The Debit Is Not Yet Authorized,
    --   And Rnrc Renewal Receipt Where The Records Are Still In The Renewal Working Area
    --   This will assist in determine how to manage the next move. ie. if the RNRC then check
    --   if its a full receipt and renew the policy. if DBTD, the policy is still in Draft hence do nothing...*/
    --   THEN
    --      SELECT ggt_trans_no_seq.NEXTVAL
    --        INTO v_ggt_trans_no
    --        FROM DUAL;

    --      INSERT INTO gin_gis_transactions
    --                  (ggt_trans_no, ggt_btr_trans_code,
    --                   ggt_done_by, ggt_done_date, ggt_uw_clm_tran,
    --                   ggt_trans_date, ggt_effective_date
    --                  )
    --           VALUES (v_ggt_trans_no, DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                   v_user_name, TRUNC (SYSDATE), 'A',
    --                   TRUNC (SYSDATE), TRUNC (SYSDATE)
    --                  );

    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         --RAISE_ERROR('v_rct_type:'||v_rct_type||';;'||v_rct_rec (j).rct_acct_type_id);
    --         IF v_rct_rec (j).rct_acct_type_id IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_clients
    --             WHERE clnt_code = v_rct_rec (j).rct_act_code
    --               AND clnt_sht_desc = v_rct_rec (j).rct_act_sht_desc;
    --         ELSIF v_rct_rec (j).rct_acct_type_id NOT IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_agencies, tqc_account_types
    --             WHERE agn_act_code = act_code
    --               AND agn_code = v_rct_rec (j).rct_act_code
    --               AND agn_sht_desc = v_rct_rec (j).rct_act_sht_desc
    --               AND act_type_id = v_rct_rec (j).rct_acct_type_id;
    --         END IF;

    --         IF v_act_type_cnt = 0
    --         THEN
    --            raise_error (   'The account type='
    --                         || v_rct_rec (j).rct_acct_type_id
    --                         || ' and account code='
    --                         || v_rct_rec (j).rct_act_sht_desc
    --                         || ' do not match ...'
    --                         || ' v_rct_rec (j).rct_act_code  '
    --                         || v_rct_rec (j).rct_act_code
    --                        );
    --         END IF;

    --         IF v_cancel = 'Y'
    --         THEN
    --            -- MAKE SURE THAT THE RCT 2B CANCELLED ALREADY EXISTS
    --            SELECT COUNT ('X')
    --              INTO v_rec_count
    --              FROM gin_master_transactions
    --             WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --               AND mtran_rct_code = v_rct_rec (j).rct_no;

    --            IF NVL (v_rec_count, 0) = 0
    --            THEN          --DELETE THE  GIN_GIS_TRANSACTION REC CREATED ABOVE;
    --               DELETE FROM gin_gis_transactions
    --                     WHERE ggt_trans_no = v_ggt_trans_no;

    --               EXIT;
    --            END IF;

    --            BEGIN
    --               v_pol_batch_no := v_tran_mapping (j).tmap_pol_batch_no;
    --               update_transmittal_rct (v_pol_batch_no,
    --                                       v_tran_mapping (j).tmap_amount,
    --                                       v_cancel_rct,
    --                                       v_rct_type
    --                                      );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('Error updating transmittal at cancellation rec...'||v_rct_type||v_pol_batch_no);
    --           END;
    --         END IF;

    --         v_cur_rate :=
    --             get_currexch_rate (v_rct_rec (j).rct_cur_code, v_rnd, v_bcur_rnd);

    --         SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                           || gin_mtran_no_seq.NEXTVAL
    --                          )
    --           INTO v_mtran_no
    --           FROM DUAL;

    --         -- RAISE_ERROR( 'MEMO=='||v_rct_rec (j).rct_paymt_memo||';'||v_rct_rec (j).rct_desc||';'||v_rct_rec (j).rct_paymt_mode);
    --         INSERT INTO gin_master_transactions
    --                     (mtran_no, mtran_doc_date, mtran_date,
    --                      mtran_ref_no,
    --                      mtran_other_ref, mtran_tran_type,
    --                      mtran_dc,
    --                      mtran_control_acc,
    --                      mtran_client_type,
    --                      mtran_client_code,
    --                      mtran_amount,
    --                      mtran_balance,
    --                      mtran_authorised,
    --                      mtran_net_amt,
    --                      mtran_posting_date, mtran_ggt_tran_no, mtran_prp_code,
    --                      mtran_btr_trans_code, mtran_origin,
    --                      mtran_cur_code,
    --                      mtran_cur_symbol,
    --                      mtran_brn_code,
    --                      mtran_brn_sht_desc,
    --                      mtran_posted_by,
    --                      mtran_cur_rate,
    --                      mtran_client_polcy_no,
    --                      mtran_narrations, mtran_rct_code,
    --                      mtran_rct_paymt_mode,
    --                      mtran_rct_paymt_memo,
    --                      mtran_agn_discount,
    --                      mtran_pol_batch_no,
    --                      mtran_other_ref1,
    --                      mtran_authorised_by,
    --                      mtran_date_authorized, mtran_pol_ren_endos_no,
    --                      mtran_rct_type,
    --                      mtran_rct_imp_code
    --                     )
    --              --PRP CODE = DECODE( v_rct_rec(j).RCT_ACC_TYPE,'D',v_rct_rec(j).RCT_ACT_CODE,NULL)
    --         VALUES      (v_mtran_no, v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                      DECODE (v_cancel_rct,
    --                              'Y', v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                              v_rct_rec (j).rct_brh_rct_code
    --                             ),
    --                      v_mtran_ref_no,          --v_rct_rec (j).rct_paymt_memo,
    --                                     DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                      DECODE (v_cancel_rct, 'Y', 'D', 'C'),
    --                      v_rct_rec (j).rct_act_sht_desc,
    --                      v_rct_rec (j).rct_acct_type_id,
    --                      v_rct_rec (j).rct_act_code,               --acc sht desc
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      'Y',
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      v_rct_rec (j).rct_date, v_ggt_trans_no, NULL,
    --                      DECODE (v_cancel_rct, 'Y', 'CN', 'RC'), 'A',
    --                      v_rct_rec (j).rct_cur_code,
    --                      tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                      v_rct_rec (j).rct_brh_code,
    --                      fms_interfaces_pkg.brh_name (v_rct_rec (j).rct_brh_code,
    --                                                   'S'
    --                                                  ),
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_cur_rate,
    --                      gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                      v_rct_rec (j).rct_desc, v_rct_rec (j).rct_no,
    --                      v_rct_rec (j).rct_paymt_mode,
    --                      v_rct_rec (j).rct_paymt_memo,
    --                      v_rct_rec (j).rct_discount,
    --                      gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no),
    --                      v_mtran_ref_no,
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_rct_rec (j).rct_date, v_mtran_ref_no,
    --                      v_rct_rec (j).rct_creation_type,
    --                      v_rct_rec (j).rct_imp_code
    --                     );

    --         v_brn_code := v_rct_rec (j).rct_brh_code;
    --         v_agnt_code := v_rct_rec (j).rct_act_code;

    ----           RAISE_ERROR('TOP='||v_param||';'||v_appr_comm||';'||v_allocate_amt||';'||V_cancel||';'||v_mtran_ref_no);
    --         IF v_cancel != 'Y'
    --         THEN
    --            FOR i IN 1 .. v_tran_mapping.COUNT
    --            LOOP
    --               BEGIN
    --                  -- raise_error('vat_amount'||v_tran_mapping (i).tmap_inv_vat);
    --                  v_pol_batch_no := v_tran_mapping (i).tmap_pol_batch_no;

    --                  --gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no);

    --                  -- raise_error('v_pol_batch_no='||v_pol_batch_no);
    ----                     BEGIN
    ----                        UPDATE gin_gis_transmitals
    ----                           SET ggts_rct_amt =
    ----                                  NVL (ggts_rct_amt, 0)
    ----                                  + DECODE (v_cancel_rct, 'Y', -1, 1)
    ----                                    * ABS (v_tran_mapping (i).tmap_amount)
    ----                         WHERE ggts_pol_batch_no = v_pol_batch_no;
    ----                     EXCEPTION
    ----                        WHEN OTHERS
    ----                        THEN
    ----                           NULL;
    ----                     END;
    --                  BEGIN
    --                     update_transmittal_rct (v_pol_batch_no,
    --                                             v_tran_mapping (i).tmap_amount,
    --                                             v_cancel_rct,
    --                                             v_rct_type
    --                                            );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error updating transmittal rec...');
    --                  END;

    --                  BEGIN
    --                     SELECT pol_pro_interface_type, pol_freq_of_payment
    --                       INTO v_interface_type, v_freq
    --                       FROM gin_policies
    --                      WHERE pol_batch_no = v_pol_batch_no;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        v_interface_type := 'ACCRUAL';
    --                        v_freq := 'A';
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error (   'Error getting policy details...'
    --                                     || 'v_pol_batch_no:'
    --                                     || v_pol_batch_no
    --                                     || 'v_mtran_ref_no:'
    --                                     || v_mtran_ref_no
    --                                    );
    --                  END;

    --                  IF NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                  THEN
    ----                     RAISE_ERROR('v_tran_mapping (i).tmap_amount='||v_tran_mapping (i).tmap_amount);
    --                     BEGIN
    --                        gis_accounts_utilities.auto_auth_transactions
    --                                        (v_pol_batch_no,
    --                                         v_tran_mapping (i).tmap_mtran_ref_no,
    --                                         --v_mtran_ref_no ,
    --                                         v_mtran_no,
    --                                         v_tran_mapping (i).tmap_amount,
    --                                         v_freq,
    --                                         v_rct_rec (j).rct_creation_type,
    --                                         v_rct_rec (j).rct_imp_code --,
    ----                                         v_reasons_for_failure
    --                                        );
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                               ('Error processing cash basis transaction... ');
    --                     END;
    --                  ELSE
    ----                     raise_error(v_tran_mapping (i).tmap_mtran_no||';'||v_tran_mapping (i).tmap_mtran_no);
    ----                        raise_error(v_tran_mapping (i).tmap_mtran_no);
    --                     IF NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                        ('DBT', 'JV', 'PDR')
    --                     THEN
    --                        IF NVL (v_tran_mapping (i).tmap_amount, 0) != 0
    --                        THEN
    --                           BEGIN
    --                              SELECT ABS (NVL (mtran_balance, 0)),
    --                                       ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_balance, 0))
    --                                     + ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       )
    --                                     + ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_vat, 0))
    --                                     - (  ABS (NVL (mtran_vat_paid, 0))
    --                                        + ABS (NVL (mtran_vat_payable, 0))
    --                                       ),
    --                                     mtran_tran_type,
    --                                       ABS (NVL (mtran_whtx, 0))
    --                                     - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_whtx_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_whtx, 0))
    --                                     - (  ABS (NVL (mtran_lta_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_lta_whtx_payable, 0))
    --                                       )
    --                                INTO v_bal_amt,
    --                                     v_dr_comm_due,
    --                                     v_amt_to_com,
    --                                     v_dr_vat_due,
    --                                     v_tran_type,
    --                                     v_whtx,
    --                                     v_admfee,
    --                                     v_admfee_wht
    --                                FROM gin_master_transactions
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;

    --                              v_dr_comm_vat_incl :=
    --                                 NVL (v_dr_comm_due, 0)
    --                                 + NVL (v_dr_vat_due, 0);
    --                              v_dr_admin_fee_vat_incl :=
    --                                      NVL (v_admfee, 0)
    --                                      + NVL (v_admfee_wht, 0);
    --                           EXCEPTION
    --                              WHEN NO_DATA_FOUND
    --                              THEN
    --                                 BEGIN
    --                                    SELECT ABS (NVL (mtran_balance, 0)),
    --                                             ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_balance, 0))
    --                                           + ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             )
    --                                           + ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                           mtran_tran_type, mtran_no,
    --                                           mtran_ref_no,
    --                                             ABS (NVL (mtran_vat, 0))
    --                                           - (  ABS (NVL (mtran_vat_paid, 0))
    --                                              + ABS (NVL (mtran_vat_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_whtx, 0))
    --                                           - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                              + ABS (NVL (mtran_whtx_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_whtx, 0))
    --                                           - (  ABS (NVL (mtran_lta_whtx_paid,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                              + ABS
    --                                                   (NVL
    --                                                       (mtran_lta_whtx_payable,
    --                                                        0
    --                                                       )
    --                                                   )
    --                                             )
    --                                      INTO v_bal_amt,
    --                                           v_dr_comm_due,
    --                                           v_amt_to_com,
    --                                           v_tran_type, v_dr_mtran_no,
    --                                           v_dr_mtran_ref_no,
    --                                           v_dr_vat_due,
    --                                           v_whtx,
    --                                           v_admfee,
    --                                           v_admfee_wht
    --                                      FROM gin_master_transactions
    --                                     WHERE mtran_pol_batch_no =
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                       AND mtran_tran_type NOT IN
    --                                                                 ('RC', 'CN')
    --                                       AND mtran_dc = 'D'
    --                                       AND mtran_client_type IN
    --                                                  ('D', 'A', 'B', 'FI', 'IA');

    --                                    v_dr_comm_vat_incl :=
    --                                         NVL (v_dr_comm_due, 0)
    --                                       + NVL (v_dr_vat_due, 0);
    --                                    v_dr_admin_fee_vat_incl :=
    --                                         NVL (v_admfee, 0)
    --                                       + NVL (v_admfee_wht, 0);
    --                                 EXCEPTION
    --                                    WHEN NO_DATA_FOUND
    --                                    THEN
    --                                       NULL;
    --                                 END;
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_application_error (-20001,
    --                                                          SQLERRM (SQLCODE)
    --                                                         );
    --                           END;

    --                           IF NVL (v_param, 'N') = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'N'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;

    --                              /*
    --                              Handle net of commission here
    --                              If the receipt is not direct, and the amount is net of commission,
    --                              compute how much commission that has been withheld by the agent/broker,
    --                              process commission payment as paid outside the system up to fms.
    --                              this has to be parameterized
    --                              <Lewis to work on this!!!!!!!!!! for union>

    --                              */
    --                              IF     NVL (v_net_com_param, 'N') = 'Y'
    --                                 AND v_rct_rec (j).rct_acct_type_id <> 'D'
    --                              THEN
    --                                 IF NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                         'N') = 'Y'
    --                                 THEN
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_dr_comm_due, 0)
    --                                                  - NVL (v_whtx, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_admfee, 0)
    --                                                  - NVL (v_admfee_wht, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 ELSE
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_dr_comm_due, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_admfee, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 END IF;

    --                                 v_comm_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_dr_comm_due,
    --                                        v_dr_vat_due,
    --                                        v_appr_comm,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'COM'
    --                                       );

    --                                 IF NVL (v_appr_adm_fee, 0) <> 0
    --                                 THEN
    --                                    v_admin_fee_allocated :=
    --                                       gis_accounts_utilities.update_commission
    --                                          (v_mtran_no,
    --                                           v_tran_mapping (i).tmap_mtran_ref_no,
    --                                           NVL
    --                                              (v_dr_mtran_no,
    --                                               v_tran_mapping (i).tmap_mtran_no
    --                                              ),
    --                                           v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                           v_admfee,
    --                                           v_dr_vat_due,
    --                                           v_appr_adm_fee,
    --                                           v_brn_code,
    --                                           v_agnt_code,
    --                                           v_rct_rec (j).rct_cur_code,
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inc_comm,
    --                                               'Y'
    --                                              ),
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inv_vat,
    --                                               'Y'
    --                                              ),
    --                                           'ADM'
    --                                          );
    --                                 END IF;

    --                                 --raise_error(v_admin_fee_allocated);
    --                                 IF     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ) = 'N'
    --                                    AND NVL (v_comm_allocated, 0) != 0
    --                                 THEN
    --                                    gis_accounts_utilities.auth_comm_pymnts
    --                                       (v_mtran_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_agnt_code,
    --                                        'CHQ',
    --                                        'N',
    --                                        tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'N'
    --                                            )
    --                                       );
    --                                 END IF;
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) =
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_adm_fee;
    --                              ELSE
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_adm_fee;
    --                              END IF;

    --                              IF ABS (v_bal_amt) < NVL (v_allocate_amt, 0)
    --                              THEN
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;

    --                              IF ABS (v_bal_amt) < NVL (v_allocate_adm_fee, 0)
    --                              THEN
    --                                 v_allocate_adm_fee := ABS (v_bal_amt);
    --                              END IF;
    --                           END IF;

    ----                       raise_error ('V_RCT_MAPPING ='||v_tran_mapping (1).tmap_rct_type||' AMOUNT;'||v_allocate_amt||'Balance:'||v_bal_amt||'Param:'||v_appr_comm);
    --                           IF NVL (v_allocate_amt, 0) <> 0
    --                           THEN
    --                              BEGIN
    --                                 gis_accounts_utilities.knock_trans
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_rct_rec (j).rct_date,
    --                                     v_allocate_amt
    --                                    );
    --                              EXCEPTION
    --                                 WHEN OTHERS
    --                                 THEN
    --                                    raise_error
    --                                             (   'Error:- Erick was here....'
    --                                              || v_mtran_no
    --                                             );
    --                              END;
    --                           END IF;

    --                           --************MOVED TOWARDS END OF PROC  MASINDE
    --                           /* gis_accounts_utilities.update_coin_payments(v_mtran_no,
    --                                                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                                                        NVL(v_dr_mtran_no,v_tran_mapping (i).tmap_mtran_no),
    --                                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                                                        NVL (v_tran_mapping (i).tmap_amount, 0),
    --                                                                        v_brn_code,
    --                                                                        v_agnt_code,
    --                                                                        v_rct_rec (j).rct_cur_code
    --                                                                        );*/
    --                           v_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_amt;
    --                           v_adm_fee_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_adm_fee;

    --                           IF     v_dr_comm_vat_incl != 0
    --                              AND v_diff > 0
    --                              AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_diff) > NVL (v_dr_comm_vat_incl, 0)
    --                              THEN
    --                                 v_comm_alloc_amt :=
    --                                                  NVL (v_dr_comm_vat_incl, 0);
    --                              ELSE
    --                                 v_comm_alloc_amt := ABS (v_diff);
    --                              END IF;

    --                              --raise_error(v_dr_comm_vat_incl||';'||v_diff);
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_dr_comm_due,
    --                                     v_dr_vat_due,
    --                                     v_diff,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );
    --                              v_diff :=
    --                                    NVL (v_diff, 0)
    --                                    - NVL (v_comm_allocated, 0);

    --                              --RAISE_ERROR(v_comm_allocated||';'||v_admfee||';'||v_dr_vat_due||';'||v_diff);
    --                              IF NVL (v_diff, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_diff,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;

    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           ELSIF     NVL (v_tran_type, 'NONE') = 'BAL'
    --                                 AND NVL (v_tran_mapping (i).tmap_comm_alloc,
    --                                          0
    --                                         ) != 0
    --                           THEN
    --                              v_comm_alloc_amt :=
    --                                  NVL (v_tran_mapping (i).tmap_comm_alloc, 0);

    --                              UPDATE gin_master_transactions
    --                                 SET mtran_commission =
    --                                          NVL (mtran_commission, 0)
    --                                        +   DECODE
    --                                                (SIGN (NVL (mtran_commission,
    --                                                            0
    --                                                           )
    --                                                      ),
    --                                                 -1, -1,
    --                                                 1
    --                                                )
    --                                          * v_comm_alloc_amt
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;

    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_comm_alloc_amt,
    --                                     NULL,                    --v_due_vat_amt,
    --                                     v_comm_alloc_amt,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );

    --                              IF NVL (v_appr_adm_fee, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_appr_adm_fee,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;

    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           END IF;

    --                           ----**************GENERATE COINURANCE PAYMTS
    --                           --
    --                           gis_accounts_utilities.update_coin_payments
    --                                   (v_mtran_no,
    --                                    v_tran_mapping (i).tmap_mtran_ref_no,
    --                                    NVL (v_dr_mtran_no,
    --                                         v_tran_mapping (i).tmap_mtran_no
    --                                        ),
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                    v_allocate_amt,
    --                                    v_comm_allocated,
    --                                    v_brn_code,
    --                                    v_agnt_code,
    --                                    v_rct_rec (j).rct_cur_code,
    --                                    v_tran_mapping (i).tmap_inc_comm,
    --                                    NVL (v_tran_mapping (i).tmap_inv_vat, 'Y')
    --                                   );
    --                           v_amount :=
    --                                     v_amount + v_tran_mapping (i).tmap_amount;
    --                        END IF;

    --                        BEGIN
    --                           gis_accounts_utilities.validate_allocations
    --                                        (v_mtran_no,
    --                                         NVL (v_dr_mtran_no,
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                             )
    --                                        );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error occured on validation of Receipt allocations.'
    --                                 );
    --                        END;
    --                     -- Gis_Accounts_Utilities.allocate_pdr_rcpt(v_mtran_no,v_tran_mapping (i).tmap_mtran_no,v_tran_mapping (i).tmap_amount);
    --                     ELSIF     NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                                     ('RNRC')
    --                           AND NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                     THEN
    --                        /*-- if the receipt amt is equal to fap, transfer transaction to uw, authorize and allocate */
    --                        gin_stp_pkg.auto_renew_prc
    --                                             (v_tran_mapping (i).tmap_mtran_no
    --                                             );
    --                     END IF;
    --                  END IF;
    --               --                  EXCEPTION
    --               --                     WHEN OTHERS
    --               --                     THEN
    --               --                        raise_error (   ' FOR Batch no '
    --               --                                     || v_tran_mapping (i).tmap_pol_batch_no
    --               --                                    );
    --               END;
    --
    --               BEGIN
    --                     BEGIN
    --                        SELECT alrt_code,alrt_check_alert
    --                          INTO v_alrt_code,v_check_alert
    --                          FROM tqc_alert_types
    --                         WHERE alrt_sys_code = 37
    --                           AND alrt_sht_desc = 'RCPTMSG';
    --                     EXCEPTION
    --                        WHEN NO_DATA_FOUND THEN
    --                            v_check_alert:='N';
    --                        WHEN OTHERS
    --                        THEN
    --                           NULL;
    --                     END;
    --
    --                    IF NVL(v_check_alert,'N') ='Y'
    --                     THEN
    --                      BEGIN
    --                            SELECT msgt_msg
    --                              INTO v_msgt_msg
    --                              FROM tqc_msg_templates
    --                             WHERE msgt_sht_desc = 'RCPTMSG';
    --                       EXCEPTION
    --                            WHEN OTHERS
    --                            THEN
    --                               NULL;
    --                       END;

    --                       BEGIN
    --                            SELECT pol_prp_code,pol_agnt_agent_code
    --                              INTO v_prp_code,v_prp_agent_code
    --                              FROM gin_policies
    --                             WHERE pol_drcr_no =
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no;
    --                        EXCEPTION
    --                            WHEN OTHERS
    --                            THEN
    --                               NULL;
    --                        END;
    --                        IF NVL(v_prp_agent_code,0) = 0 THEN
    --
    --                        BEGIN
    --                           tqc_interfaces_pkg.create_alert_prc
    --                              (v_alrt_code,                       --alert type
    --                               NULL,
    --                  --v_user_code_to, -- user to whom the alert is being send to
    --                               v_user_name,
    --                          -- v_user_from ,           -- user raising the alert
    --                               'C',
    --                        --v_reciepient,reciepient -c client,u user, a agencies
    --                               v_prp_code,                      --v_clnt_code,
    --                               v_agnt_code,                      --v_agn_code,
    --                               NULL,                           --v_quot_code ,
    --                               v_tran_mapping (i).tmap_amount,    --v_quot_no,
    --                               v_pol_batch_no,                   --v_pol_code,
    --                               gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                               v_rct_rec (j).rct_brh_rct_code,--NULL,                              --v_clm_no ,
    --                               'RCT-ALLOCATION',
    --                               'U',                             --v_app_lvl  ,
    --                               NULL,                    --v_email_sender_addr,
    --                               TRUNC (SYSDATE),
    --                    --v_to_send_date        IN   DATE DEFAULT TRUNC (SYSDATE),
    --                               NULL,
    --                             --v_gcc_code            IN   NUMBER DEFAULT NULL,
    --                               NULL,
    --                             --v_csd_code            IN   NUMBER DEFAULT NULL,
    --                               NULL
    --                              --v_trans_no            IN   NUMBER DEFAULT NULL
    --                              );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                           NULL;
    --                              --raise_error ('Error sending SMS...');
    --                        END;
    --                        END IF;
    --                     END IF;
    --                  END;
    --            END LOOP;
    --         ELSE
    --            BEGIN
    --               SELECT mtran_no, mtran_ref_no
    --                 INTO v_prev_mtran_no, v_prev_mtran_ref_no
    --                 FROM gin_master_transactions
    --                WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --                  AND mtran_client_code = v_rct_rec (j).rct_act_code
    --                  AND mtran_client_type = v_rct_rec (j).rct_acct_type_id
    --                  AND mtran_rct_code = v_rct_rec (j).rct_no;
    --            EXCEPTION
    --               WHEN TOO_MANY_ROWS
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'DUPLICATE RECEIPT FOUND..:-'
    --                                           || v_rct_rec (j).rct_brh_rct_code
    --                                           || ' - '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20001,
    --                                           'ERROR..:-' || SQLERRM (SQLCODE)
    --                                          );
    --            END;

    --            IF    NVL (v_rct_rec (j).rct_client_charge_amount, 0) IS NULL
    --               OR NVL (v_rct_rec (j).rct_client_charge_amount, 0) != 0
    --            THEN
    --               INSERT INTO gin_master_transactions
    --                           (mtran_no,
    --                            mtran_doc_date, mtran_date,
    --                            mtran_ref_no,
    --                            mtran_other_ref, mtran_tran_type, mtran_dc,
    --                            mtran_control_acc,
    --                            mtran_client_type,
    --                            mtran_client_code,
    --                            mtran_amount,
    --                            mtran_balance,
    --                            mtran_authorised,
    --                            mtran_net_amt,
    --                            mtran_posting_date, mtran_ggt_tran_no,
    --                            mtran_prp_code, mtran_btr_trans_code,
    --                            mtran_origin, mtran_cur_code,
    --                            mtran_cur_symbol,
    --                            mtran_brn_code,
    --                            mtran_brn_sht_desc,
    --                            mtran_posted_by,
    --                            mtran_cur_rate,
    --                            mtran_client_polcy_no,
    --                            mtran_rct_code,
    --                            mtran_narrations,
    --                            mtran_rct_paymt_mode,
    --                            mtran_rct_paymt_memo,
    --                            mtran_agn_discount,
    --                            mtran_authorised_by,
    --                            mtran_date_authorized
    --                           )
    --                    VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_mtran_no_seq.NEXTVAL
    --                                      ),
    --                            v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                            v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                            v_rct_rec (j).rct_paymt_memo, 'BNK', 'D',
    --                            v_rct_rec (j).rct_act_sht_desc,
    --                            v_rct_rec (j).rct_acct_type_id,
    --                            v_rct_rec (j).rct_act_code,
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            'Y',
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            v_rct_rec (j).rct_date, v_ggt_trans_no,
    --                            NULL, 'BNK',
    --                            'A', v_rct_rec (j).rct_cur_code,
    --                            tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                            v_rct_rec (j).rct_brh_code,
    --                            fms_interfaces_pkg.brh_name
    --                                                   (v_rct_rec (j).rct_brh_code,
    --                                                    'S'
    --                                                   ),
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_cur_rate,
    --                            gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                            v_rct_rec (j).rct_no,
    --                            'CHARGES UPON CANCELLATION',
    --                            v_rct_rec (j).rct_paymt_mode,
    --                            v_rct_rec (j).rct_paymt_memo,
    --                            v_rct_rec (j).rct_discount,
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_rct_rec (j).rct_date
    --                           );
    --            END IF;

    --            gis_accounts_utilities.undo_pdr_rcpt (v_prev_mtran_no);
    --            -- UNDOING PDR ALLOACTIONS
    --            gis_accounts_utilities.undo_trans_allocation (v_prev_mtran_no,
    --                                                          NULL,
    --                                                          'Y'
    --                                                         );
    --            gis_accounts_utilities.undo_pa_rcpt (v_prev_mtran_no,
    --                                                 v_mtran_no,
    --                                                 NULL
    --                                                );

    --            /* MOVED TO gis_accounts_utilities.undo_trans_allocation PROCEDURE
    --            FOR i IN 1 .. v_tran_mapping.COUNT  LOOP
    --            -- RAISE_ERROR('v_prev_mtran_no'||v_prev_mtran_no);
    --                IF NVL(v_net_com_param,'N') = 'Y'
    --                  AND v_rct_rec (j).rct_acct_type_id <> 'D' THEN
    --                         Gis_Accounts_Utilities.auth_comm_pymnts (
    --                                                  v_prev_mtran_no,
    --                                                  NULL,-- v_mtran_no,
    --                                                  NULL,
    --                                                  'CHQ',
    --                                                  'N',
    --                                                  tqc_interfaces_pkg.username (v_rct_rec (j).rct_captured_by ),
    --                                                  NVL(v_tran_mapping (i).tmap_inv_vat,'N')
    --                                               );
    --                END IF;
    --             END LOOP; */
    --            SELECT ABS (NVL (mtran_balance, 0)),
    --                     ABS (NVL (mtran_commission, 0))
    --                   - (  ABS (NVL (mtran_comm_paid, 0))
    --                      + ABS (NVL (mtran_comm_payable, 0))
    --                     )
    --              INTO v_bal_amt,
    --                   v_dr_comm_due
    --              FROM gin_master_transactions
    --             WHERE mtran_no = v_prev_mtran_no;

    --            IF ABS (v_bal_amt) > NVL (v_rct_rec (j).rct_amount, 0)
    --            THEN
    --               v_allocate_amt := NVL (v_rct_rec (j).rct_amount, 0);
    --            ELSE
    --               v_allocate_amt := ABS (v_bal_amt);
    --            END IF;

    --            gis_accounts_utilities.knock_trans
    --                                            (v_prev_mtran_no,
    --                                             v_prev_mtran_ref_no,
    --                                             v_mtran_no,
    --                                                v_rct_rec (j).rct_brh_rct_code
    --                                             || '/CN',
    --                                             v_rct_rec (j).rct_date,
    --                                             v_allocate_amt
    --                                            );
    --         END IF;
    --      END LOOP;
    --   ELSIF NVL (v_rct_type, 'XXX') = ('TRVD')
    --   THEN                                             -- TRAVEL DEPOSIT RECEIPTS
    --      -- Introducing a table to hold deposit
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            INSERT INTO gin_receipt_deposits
    --                        (rde_code,
    --                         rde_clnt_code,
    --                         rde_drcr,
    --                         rde_pol_policy_no,
    --                         rde_amount, rde_allocated_amt,
    --                         rde_balance,
    --                         rde_received_from,
    --                         rde_captured_by,
    --                         rde_captured_date, rde_remarks,
    --                         rde_rct_no, rde_brh_code,
    --                         rde_ggt_trans_no, rde_date,
    --                         rde_receipt_no, rde_tran_type,
    --                         rde_cancelled,
    --                         rde_cancel_dt,
    --                         rde_cancel_by
    --                        )
    --                 VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'RRRR')
    --                                    || gin_rde_code_seq.NEXTVAL
    --                                   ),
    --                         v_rct_rec (j).rct_act_code,
    --                         DECODE (v_cancel, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         v_tran_mapping (i).tmap_amount, 0,
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         v_rct_rec (j).rct_no, v_rct_rec (j).rct_brh_code,
    --                         NULL, SYSDATE,
    --                         v_tran_mapping (i).tmap_mtran_ref_no, 'TRVL',
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         DECODE (v_cancel, 'Y', SYSDATE, NULL),
    --                         DECODE (v_cancel,
    --                                 'Y', v_rct_rec (j).rct_captured_by,
    --                                 NULL
    --                                )
    --                        );
    --         END LOOP;
    --      END LOOP;
    --   ELSE
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            IF NVL (v_salvage_rct_param, 'N') != 'Y'
    --            THEN
    --               IF NVL (v_rct_rec (j).rct_acct_type_id, 'XX') = 'SV'
    --               THEN
    --                  v_clm_os_reserve :=
    --                     gin_stp_claims_pkg.get_clm_os_reserve
    --                                  (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                   'Y'
    --                                  );

    --                  IF NVL (v_clm_os_reserve, 0) != 0
    --                  THEN
    --                     raise_error
    --                        ('Error- Full Claim Payment NOT DONE, Cannot  Continue'
    --                        );
    --                  END IF;
    --               END IF;
    --            END IF;

    --            --RAISE_APPLICATION_ERROR (-20001,'V_MTRAN_REF = '||V_TRAN_MAPPING(i).TMAP_CHECK_MTRAN_REF_NO||';'||v_rct_rec (j).rct_no);
    --            IF v_cancel = 'Y'
    --            THEN
    --               SELECT COUNT ('X')
    --                 INTO v_rec_count
    --                 FROM gin_recovery_rcts
    --                WHERE rrc_receipt_no = v_rct_rec (j).rct_no;

    --               IF v_rec_count = 0
    --               THEN
    --                  v_cancel_rct := 'N';
    --               END IF;
    --            END IF;

    --            SELECT NVL (MAX (rrc_code), 0) + 1
    --              INTO v_rrc_code
    --              FROM gin_recovery_rcts;

    --           ---RAISE_ERROR('mtran_ref_no-'||v_tran_mapping (i).tmap_check_mtran_ref_no||' = '|| 'mtran_no-'||v_tran_mapping (i).tmap_mtran_no);
    --            INSERT INTO gin_recovery_rcts
    --                        (rrc_code,
    --                         rrc_claim_no,
    --                         rrc_recovery_type,
    --                         rrc_drcr,
    --                         rrc_amount,
    --                         rrc_received_from,
    --                         rrc_received_by,
    --                         rrc_receved_date, rrc_remarks,
    --                         rrc_rct_no,
    --                         rrc_brh_code, rrc_receipt_no,
    --                         rrc_status
    --                        )
    --                 VALUES (v_rrc_code,
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --RRC_CLAIM_NO,
    --                         v_rct_rec (j).rct_acct_type_id,
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         DECODE (v_cancel_rct,
    --                                 'N', v_tran_mapping (i).tmap_mtran_ref_no,
    --                                 v_tran_mapping (i).tmap_mtran_ref_no || '/CN'
    --                                ),
    --                         v_rct_rec (j).rct_brh_code, v_rct_rec (j).rct_no,
    --                         DECODE (v_cancel_rct, 'Y', 'C', 'N', 'A')
    --                        );
    ----            raise_error(v_tran_mapping (i).tmap_mtran_no);
    --            begin
    --            UPDATE gin_clm_salvages
    --               --SET CSD_BUYER=v_rct_rec (j).rct_paid_by,
    --            SET csd_buyer =
    --                   (SELECT rct_received_from
    --                      FROM fms_receipts
    --                     WHERE rct_brh_rct_code =
    --                                          v_tran_mapping (i).tmap_mtran_ref_no),
    --                csd_sold = 'Y',
    --                csd_approved_value = v_tran_mapping (i).tmap_amount,
    --                csd_status = 'B'
    --             WHERE csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no
    --                          and CSD_CLMP_CODE=v_tran_mapping (i).tmap_mtran_no;
    --             exception
    --                when others then
    --                null;
    --             end;
    ----raise_error('here after ='||v_tran_mapping (i).tmap_mtran_no);
    --            -- PROCESS SALVAGE TRANSACTIONS
    --            BEGIN
    --               SELECT clmp_limit_amt, clmp_per_pt_code
    --                 INTO v_limit_amt, v_per_pt_code
    --                 FROM gin_claim_perils
    --                WHERE clmp_code = v_tran_mapping (i).tmap_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                          (   'Error determining claim peril...tmap_mtran_no'
    --                           || v_tran_mapping (i).tmap_mtran_no
    --                          );
    --            END;

    --            SELECT DECODE (v_rct_rec (j).rct_acct_type_id, 'SV', 'CS', 'CR')
    --              INTO v_trans_type
    --              FROM DUAL;

    --            SELECT DECODE (v_trans_type, 'CS', 'S', 'R')
    --              INTO v_rec_tran_type
    --              FROM DUAL;

    --            --raise_error('v_rec_tran_type'||v_rec_tran_type);
    --            IF v_trans_type = 'CS'
    --            THEN
    --               BEGIN
    --                  SELECT COUNT (*)
    --                    INTO v_cnt
    --                    FROM gin_clm_salvages
    --                   WHERE csd_clmp_code = v_tran_mapping (i).tmap_mtran_no
    --                     AND csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR FETCHING SALVAGE DETAILS...');
    --               END;
    --            ELSE
    --               v_cnt := 1;
    --            END IF;

    --            IF NVL (v_cnt, 0) > 0
    --            THEN
    --               --RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no);
    --               BEGIN
    --                  SELECT reg_clmt_code, reg_third_party
    --                    INTO v_clmt_code, v_clmnt_type
    --                    FROM gin_rgstd_claimants, tqc_clients
    --                   WHERE reg_third_party = 'S'
    --                     AND reg_cld_code = clnt_code
    --                     AND reg_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     BEGIN
    --                        SELECT cmb_prp_code, 'S'
    --                          INTO v_clmt_code, v_clmnt_type
    --                          FROM gin_claim_master_bookings
    --                         WHERE cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                                   (   'Error determining claimant 1='
    --                                    || v_tran_mapping (i).tmap_check_mtran_ref_no
    --                                   );
    --                     END;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'Error determining claimant='
    --                                  || v_tran_mapping (i).tmap_check_mtran_ref_no
    --                                 );
    --               END;

    --               -- RAISE_ERROR('HERE='||(v_tran_mapping (i).tmap_amount)||';'||v_limit_amt);
    --               IF NVL (v_tran_mapping (i).tmap_amount, 0) = 0
    --               THEN
    --                  raise_error ('Error:- Receipt amount not provided...');
    --               END IF;

    --               IF v_cancel != 'Y'
    --               THEN
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clm_salv_recovry
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error...');
    --                  -- creating claim transaction
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clmsalv_rec_contra
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    --                  --                          EXCEPTION
    --                  --                            WHEN OTHERS THEN
    --                  --                                RAISE_ERROR('Error...');-- creating claim transaction
    --                  END;
    --               END IF;
    --            ELSE
    --               NULL;
    --            -- CREATE A TICKET TO BE ASSIGNED TO DEFAULT CLAIMS USER, TO PROCESS THE SALVAGE TRANSACTION FROM THE RECEIPT CREATED.....SOLO
    --            END IF;
    --         END LOOP;
    --      END LOOP;
    --   END IF;
    ----   EXCEPTION
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                  'POSTING GIS 2RCT :-' || SQLERRM (SQLCODE)
    ----                                 );
    --END post_gis_rct;
    --PROCEDURE post_gis_rct (
    --   v_rct_code                       NUMBER,
    --   v_rct_rec                        fms_interfaces_pkg.type_receipts_table,
    --   v_tran_mapping          IN OUT   fms_interfaces_pkg.tran_mapping_type,
    --   v_rct_type                       VARCHAR2,
    --   v_user_name                      VARCHAR2,
    --   v_cancel                         VARCHAR2 DEFAULT 'N',
    --   v_mtran_ref_no                   VARCHAR2 DEFAULT NULL,
    --   v_reasons_for_failure            VARCHAR2 DEFAULT NULL
    --)
    --IS
    --   v_errmsg                  VARCHAR2 (1500);
    --   v_count                   NUMBER          := 0;
    --   v_ggt_trans_no            NUMBER;
    --   v_mtran_no                NUMBER;
    --   v_amount                  NUMBER          := 0;
    --   v_rrc_code                NUMBER;
    --   v_rec_count               NUMBER;
    --   v_cancel_rct              VARCHAR2 (1)    := v_cancel;
    --   v_allocate_amt            NUMBER          := 0;
    --   v_bal_amt                 NUMBER          := 0;
    --   v_dr_comm_due             NUMBER          := 0;
    --   v_dr_comm_vat_incl        NUMBER          := 0;
    --   v_diff                    NUMBER          := 0;
    --   v_comm_alloc_amt          NUMBER          := 0;
    --   v_brn_code                NUMBER;
    --   v_agnt_code               NUMBER;
    --   v_prev_mtran_no           NUMBER;
    --   v_prev_mtran_ref_no       VARCHAR2 (30);
    --   v_tran_type               VARCHAR2 (10);
    --   v_rnd                     NUMBER;
    --   v_bcur_rnd                NUMBER;
    --   v_cur_rate                NUMBER;
    --   v_param                   VARCHAR2 (5);
    --   v_appr_comm               NUMBER;
    --   v_amt_to_com              NUMBER;
    --   v_act_type_cnt            NUMBER;
    --   v_prp_code                NUMBER;
    --   v_per_pt_code             NUMBER;
    --   v_limit_amt               NUMBER;
    --   v_clmt_code               NUMBER;
    --   v_clmnt_type              VARCHAR2 (30);
    --   v_trans_type              VARCHAR2 (30);
    --   v_param_value             VARCHAR2 (30);
    --   v_cnt                     NUMBER;
    --   v_rec_tran_type           VARCHAR2 (30);
    --   v_interface_type          VARCHAR2 (10);
    --   v_allocate                VARCHAR2 (1);
    --   vuser                     VARCHAR2 (30);
    --   v_new_mtran_no            NUMBER;
    --   v_tmap_amt                NUMBER;
    --   v_pol_batch_no            NUMBER;
    --   v_trans_count             NUMBER;
    --   v_new_dr_no               VARCHAR2 (30);
    --   v_freq                    VARCHAR2 (10);
    --   v_dr_no                   NUMBER;
    --   v_new_pol_batch           NUMBER;
    --   v_dr_mtran_no             NUMBER;
    --   v_dr_mtran_ref_no         VARCHAR2 (30);
    --   v_salvage_rct_param       VARCHAR2 (1);
    --   v_clm_os_reserve          NUMBER;
    --   v_comm_allocated          NUMBER;
    --   v_dr_vat_due              NUMBER;
    --   v_prev_ggt_trans_no       NUMBER;
    --   v_whtx                    NUMBER;
    --   v_net_com_param           VARCHAR2 (1)    := 'N';
    --   v_admfee                  NUMBER;
    --   v_admfee_wht              NUMBER;
    --   v_appr_adm_fee            NUMBER;
    --   v_allocate_adm_fee        NUMBER;
    --   v_admin_fee_allocated     NUMBER;
    --   v_adm_fee_diff            NUMBER;
    --   v_dr_admin_fee_vat_incl   NUMBER;
    --   v_admfee_alloc_amt        NUMBER          := 0;
    --
    --   CURSOR cur_commissions (v_prv_mtran_no IN NUMBER)
    --   IS
    --      SELECT *
    --        FROM gin_commission_pymts
    --       WHERE cop_cr_mtran_no = v_prv_mtran_no;
    --BEGIN
    ----raise_error('v_user_name'||v_user_name);
    --   /*
    --   ************************************
    --   USE V_TRAN_MAPPING(i).TMAP_COMM_ALLOC
    --   **************************************
    --   */
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAID_ON_FULL_DEBIT')
    --        INTO v_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching commission payment parameter...');
    --   END;
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('ALLOW_SALVAGE_WITHOUT_PYMT')
    --        INTO v_salvage_rct_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_salvage_rct_param := 'Y';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching Salvage  parameter...');
    --   END;
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
    --        INTO v_net_com_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_net_com_param := 'N';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching net of commission parameter...');
    --   END;
    --
    ----      RAISE_ERROR('v_rct_type ='||v_rct_type||';;;'||v_mtran_ref_no);
    --    IF v_rct_type IN ('JV', 'DBT', 'PDR','DBTD','RNRC','QUOT')
    --   /*-- Introduced Dbtd -- Debit Draft Where The Debit Is Not Yet Authorized,
    --   And Rnrc Renewal Receipt Where The Records Are Still In The Renewal Working Area
    --   This will assist in determine how to manage the next move. ie. if the RNRC then check
    --   if its a full receipt and renew the policy. if DBTD, the policy is still in Draft hence do nothing...*/
    --   THEN
    --      SELECT ggt_trans_no_seq.NEXTVAL
    --        INTO v_ggt_trans_no
    --        FROM DUAL;
    --
    --      INSERT INTO gin_gis_transactions
    --                  (ggt_trans_no, ggt_btr_trans_code,
    --                   ggt_done_by, ggt_done_date, ggt_uw_clm_tran,
    --                   ggt_trans_date, ggt_effective_date
    --                  )
    --           VALUES (v_ggt_trans_no, DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                   v_user_name, TRUNC (SYSDATE), 'A',
    --                   TRUNC (SYSDATE), TRUNC (SYSDATE)
    --                  );
    --
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         --RAISE_ERROR('v_rct_type:'||v_rct_type||';;'||v_rct_rec (j).rct_acct_type_id);
    --         IF v_rct_rec (j).rct_acct_type_id IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_clients
    --             WHERE clnt_code = v_rct_rec (j).rct_act_code
    --               AND clnt_sht_desc = v_rct_rec (j).rct_act_sht_desc;
    --         ELSIF v_rct_rec (j).rct_acct_type_id NOT IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_agencies, tqc_account_types
    --             WHERE agn_act_code = act_code
    --               AND agn_code = v_rct_rec (j).rct_act_code
    --               AND agn_sht_desc = v_rct_rec (j).rct_act_sht_desc
    --               AND act_type_id = v_rct_rec (j).rct_acct_type_id;
    --         END IF;
    ----            RAISE_ERROR('HERE...TR...');
    --         IF v_act_type_cnt = 0
    --         THEN
    --            raise_error (   'The account type='
    --                         || v_rct_rec (j).rct_acct_type_id
    --                         || ' and account code='
    --                         || v_rct_rec (j).rct_act_sht_desc
    --                         || ' do not match ...'
    --                         || ' v_rct_rec (j).rct_act_code  '
    --                         || v_rct_rec (j).rct_act_code
    --                        );
    --         END IF;
    --
    --         IF v_cancel = 'Y'
    --         THEN
    --            -- MAKE SURE THAT THE RCT 2B CANCELLED ALREADY EXISTS
    --            SELECT COUNT ('X')
    --              INTO v_rec_count
    --              FROM gin_master_transactions
    --             WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --               AND mtran_rct_code = v_rct_rec (j).rct_no;
    ----RAISE_ERROR('v_rec_count = '||v_rec_count);
    --            IF NVL (v_rec_count, 0) = 0
    --            THEN          --DELETE THE  GIN_GIS_TRANSACTION REC CREATED ABOVE;
    --               DELETE FROM gin_gis_transactions
    --                     WHERE ggt_trans_no = v_ggt_trans_no;
    --
    --               EXIT;
    --            END IF;
    --
    --            BEGIN
    --               v_pol_batch_no := v_tran_mapping (j).tmap_pol_batch_no;
    --               update_transmittal_rct (v_pol_batch_no,
    --                                       v_tran_mapping (j).tmap_amount,
    --                                       v_cancel_rct,
    --                                       v_rct_type
    --                                      );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('Error updating transmittal at cancellation rec...'||v_rct_type||v_pol_batch_no);
    --           END;
    --         END IF;
    --
    --         v_cur_rate :=
    --             get_currexch_rate (v_rct_rec (j).rct_cur_code, v_rnd, v_bcur_rnd);
    --
    --         SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                           || gin_mtran_no_seq.NEXTVAL
    --                          )
    --           INTO v_mtran_no
    --           FROM DUAL;
    --
    ----        RAISE_ERROR( 'MEMO=='||v_rct_rec (j).rct_paymt_memo||';'||v_rct_rec (j).rct_desc||';'||v_rct_rec (j).rct_paymt_mode);
    --         INSERT INTO gin_master_transactions
    --                     (mtran_no, mtran_doc_date, mtran_date,
    --                      mtran_ref_no,
    --                      mtran_other_ref, mtran_tran_type,
    --                      mtran_dc,
    --                      mtran_control_acc,
    --                      mtran_client_type,
    --                      mtran_client_code,
    --                      mtran_amount,
    --                      mtran_balance,
    --                      mtran_authorised,
    --                      mtran_net_amt,
    --                      mtran_posting_date, mtran_ggt_tran_no, mtran_prp_code,
    --                      mtran_btr_trans_code, mtran_origin,
    --                      mtran_cur_code,
    --                      mtran_cur_symbol,
    --                      mtran_brn_code,
    --                      mtran_brn_sht_desc,
    --                      mtran_posted_by,
    --                      mtran_cur_rate,
    --                      mtran_client_polcy_no,
    --                      mtran_narrations, mtran_rct_code,
    --                      mtran_rct_paymt_mode,
    --                      mtran_rct_paymt_memo,
    --                      mtran_agn_discount,
    --                      mtran_pol_batch_no,
    --                      mtran_other_ref1,
    --                      mtran_authorised_by,
    --                      mtran_date_authorized, mtran_pol_ren_endos_no,
    --                      mtran_rct_type,
    --                      mtran_rct_imp_code
    --                     )
    --              --PRP CODE = DECODE( v_rct_rec(j).RCT_ACC_TYPE,'D',v_rct_rec(j).RCT_ACT_CODE,NULL)
    --         VALUES      (v_mtran_no, v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                      DECODE (v_cancel_rct,
    --                              'Y', v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                              v_rct_rec (j).rct_brh_rct_code
    --                             ),
    --                      v_mtran_ref_no,          --v_rct_rec (j).rct_paymt_memo,
    --                                     DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                      DECODE (v_cancel_rct, 'Y', 'D', 'C'),
    --                      v_rct_rec (j).rct_act_sht_desc,
    --                      v_rct_rec (j).rct_acct_type_id,
    --                      v_rct_rec (j).rct_act_code,               --acc sht desc
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      'Y',
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      v_rct_rec (j).rct_date, v_ggt_trans_no, NULL,
    --                      DECODE (v_cancel_rct, 'Y', 'CN', 'RC'), 'A',
    --                      v_rct_rec (j).rct_cur_code,
    --                      tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                      v_rct_rec (j).rct_brh_code,
    --                      fms_interfaces_pkg.brh_name (v_rct_rec (j).rct_brh_code,
    --                                                   'S'
    --                                                  ),
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_cur_rate,
    --                      gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                      v_rct_rec (j).rct_desc, v_rct_rec (j).rct_no,
    --                      v_rct_rec (j).rct_paymt_mode,
    --                      v_rct_rec (j).rct_paymt_memo,
    --                      v_rct_rec (j).rct_discount,
    --                      gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no),
    --                      v_mtran_ref_no,
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_rct_rec (j).rct_date, v_mtran_ref_no,
    --                      v_rct_rec (j).rct_creation_type,
    --                      v_rct_rec (j).rct_imp_code
    --                     );
    --
    --         v_brn_code := v_rct_rec (j).rct_brh_code;
    --         v_agnt_code := v_rct_rec (j).rct_act_code;
    --
    ----           RAISE_ERROR('TOP='||v_param||';'||v_appr_comm||';'||v_allocate_amt||';'||V_cancel||';'||v_mtran_ref_no);
    --         IF v_cancel != 'Y'
    --         THEN
    --            FOR i IN 1 .. v_tran_mapping.COUNT
    --            LOOP
    --               BEGIN
    --                  -- raise_error('vat_amount'||v_tran_mapping (i).tmap_inv_vat);
    --                  v_pol_batch_no := v_tran_mapping (i).tmap_pol_batch_no;
    --
    --                  --gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no);
    --
    --                  -- raise_error('v_pol_batch_no='||v_pol_batch_no);
    ----                     BEGIN
    ----                        UPDATE gin_gis_transmitals
    ----                           SET ggts_rct_amt =
    ----                                  NVL (ggts_rct_amt, 0)
    ----                                  + DECODE (v_cancel_rct, 'Y', -1, 1)
    ----                                    * ABS (v_tran_mapping (i).tmap_amount)
    ----                         WHERE ggts_pol_batch_no = v_pol_batch_no;
    ----                     EXCEPTION
    ----                        WHEN OTHERS
    ----                        THEN
    ----                           NULL;
    ----                     END;
    --                  BEGIN
    --                     update_transmittal_rct (v_pol_batch_no,
    --                                             v_tran_mapping (i).tmap_amount,
    --                                             v_cancel_rct,
    --                                             v_rct_type
    --                                            );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error updating transmittal rec...');
    --                  END;
    --
    --                  BEGIN
    --                     SELECT pol_pro_interface_type, pol_freq_of_payment
    --                       INTO v_interface_type, v_freq
    --                       FROM gin_policies
    --                      WHERE pol_batch_no = v_pol_batch_no;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        v_interface_type := 'ACCRUAL';
    --                        v_freq := 'A';
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error (   'Error getting policy details...'
    --                                     || 'v_pol_batch_no:'
    --                                     || v_pol_batch_no
    --                                     || 'v_mtran_ref_no:'
    --                                     || v_mtran_ref_no
    --                                    );
    --                  END;
    --
    --                  IF NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                  THEN
    ----                     RAISE_ERROR('v_tran_mapping (i).tmap_amount='||v_tran_mapping (i).tmap_amount);
    --                     BEGIN
    --                        gis_accounts_utilities.auto_auth_transactions
    --                                        (v_pol_batch_no,
    --                                         v_tran_mapping (i).tmap_mtran_ref_no,
    --                                         --v_mtran_ref_no ,
    --                                         v_mtran_no,
    --                                         v_tran_mapping (i).tmap_amount,
    --                                         v_freq,
    --                                         v_rct_rec (j).rct_creation_type,
    --                                         v_rct_rec (j).rct_imp_code --,
    ----                                         v_reasons_for_failure
    --                                        );
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                               ('Error processing cash basis transaction... ');
    --                     END;
    --                  ELSE
    ----                     raise_error(v_tran_mapping (i).tmap_mtran_no||';'||v_tran_mapping (i).tmap_mtran_no);
    ----                        raise_error(v_tran_mapping (i).tmap_mtran_no);
    --                     IF NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                        ('DBT', 'JV', 'PDR')
    --                     THEN
    --                        IF NVL (v_tran_mapping (i).tmap_amount, 0) != 0
    --                        THEN
    --                           BEGIN
    --                              SELECT ABS (NVL (mtran_balance, 0)),
    --                                       ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_balance, 0))
    --                                     + ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       )
    --                                     + ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_vat, 0))
    --                                     - (  ABS (NVL (mtran_vat_paid, 0))
    --                                        + ABS (NVL (mtran_vat_payable, 0))
    --                                       ),
    --                                     mtran_tran_type,
    --                                       ABS (NVL (mtran_whtx, 0))
    --                                     - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_whtx_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_whtx, 0))
    --                                     - (  ABS (NVL (mtran_lta_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_lta_whtx_payable, 0))
    --                                       )
    --                                INTO v_bal_amt,
    --                                     v_dr_comm_due,
    --                                     v_amt_to_com,
    --                                     v_dr_vat_due,
    --                                     v_tran_type,
    --                                     v_whtx,
    --                                     v_admfee,
    --                                     v_admfee_wht
    --                                FROM gin_master_transactions
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;
    --
    --                              v_dr_comm_vat_incl :=
    --                                 NVL (v_dr_comm_due, 0)
    --                                 + NVL (v_dr_vat_due, 0);
    --                              v_dr_admin_fee_vat_incl :=
    --                                      NVL (v_admfee, 0)
    --                                      + NVL (v_admfee_wht, 0);
    --                           EXCEPTION
    --                              WHEN NO_DATA_FOUND
    --                              THEN
    --                                 BEGIN
    --                                    SELECT ABS (NVL (mtran_balance, 0)),
    --                                             ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_balance, 0))
    --                                           + ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             )
    --                                           + ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                           mtran_tran_type, mtran_no,
    --                                           mtran_ref_no,
    --                                             ABS (NVL (mtran_vat, 0))
    --                                           - (  ABS (NVL (mtran_vat_paid, 0))
    --                                              + ABS (NVL (mtran_vat_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_whtx, 0))
    --                                           - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                              + ABS (NVL (mtran_whtx_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_whtx, 0))
    --                                           - (  ABS (NVL (mtran_lta_whtx_paid,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                              + ABS
    --                                                   (NVL
    --                                                       (mtran_lta_whtx_payable,
    --                                                        0
    --                                                       )
    --                                                   )
    --                                             )
    --                                      INTO v_bal_amt,
    --                                           v_dr_comm_due,
    --                                           v_amt_to_com,
    --                                           v_tran_type, v_dr_mtran_no,
    --                                           v_dr_mtran_ref_no,
    --                                           v_dr_vat_due,
    --                                           v_whtx,
    --                                           v_admfee,
    --                                           v_admfee_wht
    --                                      FROM gin_master_transactions
    --                                     WHERE mtran_pol_batch_no =
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                       AND mtran_tran_type NOT IN
    --                                                                 ('RC', 'CN')
    --                                       AND mtran_dc = 'D'
    --                                       AND mtran_client_type IN
    --                                                  ('D', 'A', 'B', 'FI', 'IA');
    --
    --                                    v_dr_comm_vat_incl :=
    --                                         NVL (v_dr_comm_due, 0)
    --                                       + NVL (v_dr_vat_due, 0);
    --                                    v_dr_admin_fee_vat_incl :=
    --                                         NVL (v_admfee, 0)
    --                                       + NVL (v_admfee_wht, 0);
    --                                 EXCEPTION
    --                                    WHEN NO_DATA_FOUND
    --                                    THEN
    --                                       NULL;
    --                                 END;
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_application_error (-20001,
    --                                                          SQLERRM (SQLCODE)
    --                                                         );
    --                           END;
    --
    --                           IF NVL (v_param, 'N') = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'N'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --
    --                              /*
    --                              Handle net of commission here
    --                              If the receipt is not direct, and the amount is net of commission,
    --                              compute how much commission that has been withheld by the agent/broker,
    --                              process commission payment as paid outside the system up to fms.
    --                              this has to be parameterized
    --                              <Lewis to work on this!!!!!!!!!! for union>
    --
    --                              */
    --                              IF     NVL (v_net_com_param, 'N') = 'Y'
    --                                 AND v_rct_rec (j).rct_acct_type_id <> 'D'
    --                              THEN
    --                                 IF NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                         'N') = 'Y'
    --                                 THEN
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_dr_comm_due, 0)
    --                                                  - NVL (v_whtx, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_admfee, 0)
    --                                                  - NVL (v_admfee_wht, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 ELSE
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_dr_comm_due, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_admfee, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 END IF;
    --
    --                                 v_comm_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_dr_comm_due,
    --                                        v_dr_vat_due,
    --                                        v_appr_comm,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'COM'
    --                                       );
    --
    --                                 IF NVL (v_appr_adm_fee, 0) <> 0
    --                                 THEN
    --                                    v_admin_fee_allocated :=
    --                                       gis_accounts_utilities.update_commission
    --                                          (v_mtran_no,
    --                                           v_tran_mapping (i).tmap_mtran_ref_no,
    --                                           NVL
    --                                              (v_dr_mtran_no,
    --                                               v_tran_mapping (i).tmap_mtran_no
    --                                              ),
    --                                           v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                           v_admfee,
    --                                           v_dr_vat_due,
    --                                           v_appr_adm_fee,
    --                                           v_brn_code,
    --                                           v_agnt_code,
    --                                           v_rct_rec (j).rct_cur_code,
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inc_comm,
    --                                               'Y'
    --                                              ),
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inv_vat,
    --                                               'Y'
    --                                              ),
    --                                           'ADM'
    --                                          );
    --                                 END IF;
    --
    --                                 --raise_error(v_admin_fee_allocated);
    --                                 IF     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ) = 'N'
    --                                    AND NVL (v_comm_allocated, 0) != 0
    --                                 THEN
    --                                    gis_accounts_utilities.auth_comm_pymnts
    --                                       (v_mtran_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_agnt_code,
    --                                        'CHQ',
    --                                        'N',
    --                                        tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'N'
    --                                            )
    --                                       );
    --                                 END IF;
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) =
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_adm_fee;
    --                              ELSE
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_adm_fee;
    --                              END IF;
    --
    --                              IF ABS (v_bal_amt) < NVL (v_allocate_amt, 0)
    --                              THEN
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --
    --                              IF ABS (v_bal_amt) < NVL (v_allocate_adm_fee, 0)
    --                              THEN
    --                                 v_allocate_adm_fee := ABS (v_bal_amt);
    --                              END IF;
    --                           END IF;
    --
    ----                       raise_error ('V_RCT_MAPPING ='||v_tran_mapping (1).tmap_rct_type||' AMOUNT;'||v_allocate_amt||'Balance:'||v_bal_amt||'Param:'||v_appr_comm);
    --                           IF NVL (v_allocate_amt, 0) <> 0
    --                           THEN
    --                              BEGIN
    --                                 gis_accounts_utilities.knock_trans
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_rct_rec (j).rct_date,
    --                                     v_allocate_amt
    --                                    );
    --                              EXCEPTION
    --                                 WHEN OTHERS
    --                                 THEN
    --                                    raise_error
    --                                             (   'Error:- Erick was here....'
    --                                              || v_mtran_no
    --                                             );
    --                              END;
    --                           END IF;
    --
    --                           --************MOVED TOWARDS END OF PROC  MASINDE
    --                           /* gis_accounts_utilities.update_coin_payments(v_mtran_no,
    --                                                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                                                        NVL(v_dr_mtran_no,v_tran_mapping (i).tmap_mtran_no),
    --                                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                                                        NVL (v_tran_mapping (i).tmap_amount, 0),
    --                                                                        v_brn_code,
    --                                                                        v_agnt_code,
    --                                                                        v_rct_rec (j).rct_cur_code
    --                                                                        );*/
    --                           v_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_amt;
    --                           v_adm_fee_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_adm_fee;
    --
    --                           IF     v_dr_comm_vat_incl != 0
    --                              AND v_diff > 0
    --                              AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_diff) > NVL (v_dr_comm_vat_incl, 0)
    --                              THEN
    --                                 v_comm_alloc_amt :=
    --                                                  NVL (v_dr_comm_vat_incl, 0);
    --                              ELSE
    --                                 v_comm_alloc_amt := ABS (v_diff);
    --                              END IF;
    --
    --                              --raise_error(v_dr_comm_vat_incl||';'||v_diff);
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_dr_comm_due,
    --                                     v_dr_vat_due,
    --                                     v_diff,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM',
    --                                     v_user_name
    --                                    );
    --                              v_diff :=
    --                                    NVL (v_diff, 0)
    --                                    - NVL (v_comm_allocated, 0);
    --
    --                              --RAISE_ERROR(v_comm_allocated||';'||v_admfee||';'||v_dr_vat_due||';'||v_diff);
    --                              IF NVL (v_diff, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_diff,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;
    --
    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           ELSIF     NVL (v_tran_type, 'NONE') = 'BAL'
    --                                 AND NVL (v_tran_mapping (i).tmap_comm_alloc,
    --                                          0
    --                                         ) != 0
    --                           THEN
    --                              v_comm_alloc_amt :=
    --                                  NVL (v_tran_mapping (i).tmap_comm_alloc, 0);
    --
    --                              UPDATE gin_master_transactions
    --                                 SET mtran_commission =
    --                                          NVL (mtran_commission, 0)
    --                                        +   DECODE
    --                                                (SIGN (NVL (mtran_commission,
    --                                                            0
    --                                                           )
    --                                                      ),
    --                                                 -1, -1,
    --                                                 1
    --                                                )
    --                                          * v_comm_alloc_amt
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;
    --
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_comm_alloc_amt,
    --                                     NULL,                    --v_due_vat_amt,
    --                                     v_comm_alloc_amt,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );
    --
    --                              IF NVL (v_appr_adm_fee, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_appr_adm_fee,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;
    --
    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           END IF;
    --
    --                           ----**************GENERATE COINURANCE PAYMTS
    --                           --
    --                           gis_accounts_utilities.update_coin_payments
    --                                   (v_mtran_no,
    --                                    v_tran_mapping (i).tmap_mtran_ref_no,
    --                                    NVL (v_dr_mtran_no,
    --                                         v_tran_mapping (i).tmap_mtran_no
    --                                        ),
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                    v_allocate_amt,
    --                                    v_comm_allocated,
    --                                    v_brn_code,
    --                                    v_agnt_code,
    --                                    v_rct_rec (j).rct_cur_code,
    --                                    v_tran_mapping (i).tmap_inc_comm,
    --                                    NVL (v_tran_mapping (i).tmap_inv_vat, 'Y')
    --                                   );
    --                           v_amount :=
    --                                     v_amount + v_tran_mapping (i).tmap_amount;
    --                        END IF;
    --
    --                        BEGIN
    --                           gis_accounts_utilities.validate_allocations
    --                                        (v_mtran_no,
    --                                         NVL (v_dr_mtran_no,
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                             )
    --                                        );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error occured on validation of Receipt allocations.'
    --                                 );
    --                        END;
    --                     -- Gis_Accounts_Utilities.allocate_pdr_rcpt(v_mtran_no,v_tran_mapping (i).tmap_mtran_no,v_tran_mapping (i).tmap_amount);
    --                     ELSIF     NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                                     ('RNRC')
    --                           AND NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                     THEN
    --                        /*-- if the receipt amt is equal to fap, transfer transaction to uw, authorize and allocate */
    --                        gin_stp_pkg.auto_renew_prc
    --                                             (v_tran_mapping (i).tmap_mtran_no
    --                                             );
    --                     END IF;
    --                  END IF;
    --               --                  EXCEPTION
    --               --                     WHEN OTHERS
    --               --                     THEN
    --               --                        raise_error (   ' FOR Batch no '
    --               --                                     || v_tran_mapping (i).tmap_pol_batch_no
    --               --                                    );
    --               END;
    --            END LOOP;
    --         ELSE
    --            BEGIN
    --               SELECT mtran_no, mtran_ref_no
    --                 INTO v_prev_mtran_no, v_prev_mtran_ref_no
    --                 FROM gin_master_transactions
    --                WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --                  AND mtran_client_code = v_rct_rec (j).rct_act_code
    --                  AND mtran_client_type = v_rct_rec (j).rct_acct_type_id
    --                  AND mtran_rct_code = v_rct_rec (j).rct_no;
    --            EXCEPTION
    --               WHEN TOO_MANY_ROWS
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'DUPLICATE RECEIPT FOUND..:-'
    --                                           || v_rct_rec (j).rct_brh_rct_code
    --                                           || ' - '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20001,
    --                                           'ERROR..:-' || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    ----        RAISE_ERROR('v_prev_mtran_no = '||v_prev_mtran_no);
    --            IF    NVL (v_rct_rec (j).rct_client_charge_amount, 0) IS NULL
    --               OR NVL (v_rct_rec (j).rct_client_charge_amount, 0) != 0
    --            THEN
    --               INSERT INTO gin_master_transactions
    --                           (mtran_no,
    --                            mtran_doc_date, mtran_date,
    --                            mtran_ref_no,
    --                            mtran_other_ref, mtran_tran_type, mtran_dc,
    --                            mtran_control_acc,
    --                            mtran_client_type,
    --                            mtran_client_code,
    --                            mtran_amount,
    --                            mtran_balance,
    --                            mtran_authorised,
    --                            mtran_net_amt,
    --                            mtran_posting_date, mtran_ggt_tran_no,
    --                            mtran_prp_code, mtran_btr_trans_code,
    --                            mtran_origin, mtran_cur_code,
    --                            mtran_cur_symbol,
    --                            mtran_brn_code,
    --                            mtran_brn_sht_desc,
    --                            mtran_posted_by,
    --                            mtran_cur_rate,
    --                            mtran_client_polcy_no,
    --                            mtran_rct_code,
    --                            mtran_narrations,
    --                            mtran_rct_paymt_mode,
    --                            mtran_rct_paymt_memo,
    --                            mtran_agn_discount,
    --                            mtran_authorised_by,
    --                            mtran_date_authorized
    --                           )
    --                    VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_mtran_no_seq.NEXTVAL
    --                                      ),
    --                            v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                            v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                            v_rct_rec (j).rct_paymt_memo, 'BNK', 'D',
    --                            v_rct_rec (j).rct_act_sht_desc,
    --                            v_rct_rec (j).rct_acct_type_id,
    --                            v_rct_rec (j).rct_act_code,
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            'Y',
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            v_rct_rec (j).rct_date, v_ggt_trans_no,
    --                            NULL, 'BNK',
    --                            'A', v_rct_rec (j).rct_cur_code,
    --                            tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                            v_rct_rec (j).rct_brh_code,
    --                            fms_interfaces_pkg.brh_name
    --                                                   (v_rct_rec (j).rct_brh_code,
    --                                                    'S'
    --                                                   ),
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_cur_rate,
    --                            gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                            v_rct_rec (j).rct_no,
    --                            'CHARGES UPON CANCELLATION',
    --                            v_rct_rec (j).rct_paymt_mode,
    --                            v_rct_rec (j).rct_paymt_memo,
    --                            v_rct_rec (j).rct_discount,
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_rct_rec (j).rct_date
    --                           );
    --            END IF;
    --
    --            gis_accounts_utilities.undo_pdr_rcpt (v_prev_mtran_no);
    --            -- UNDOING PDR ALLOACTIONS
    --            gis_accounts_utilities.undo_trans_allocation (v_prev_mtran_no,
    --                                                          NULL,
    --                                                          'Y'
    --                                                         );
    --            gis_accounts_utilities.undo_pa_rcpt (v_prev_mtran_no,
    --                                                 v_mtran_no,
    --                                                 NULL
    --                                                );
    --
    --            /* MOVED TO gis_accounts_utilities.undo_trans_allocation PROCEDURE
    --            FOR i IN 1 .. v_tran_mapping.COUNT  LOOP
    --            -- RAISE_ERROR('v_prev_mtran_no'||v_prev_mtran_no);
    --                IF NVL(v_net_com_param,'N') = 'Y'
    --                  AND v_rct_rec (j).rct_acct_type_id <> 'D' THEN
    --                         Gis_Accounts_Utilities.auth_comm_pymnts (
    --                                                  v_prev_mtran_no,
    --                                                  NULL,-- v_mtran_no,
    --                                                  NULL,
    --                                                  'CHQ',
    --                                                  'N',
    --                                                  tqc_interfaces_pkg.username (v_rct_rec (j).rct_captured_by ),
    --                                                  NVL(v_tran_mapping (i).tmap_inv_vat,'N')
    --                                               );
    --                END IF;
    --             END LOOP; */
    --            SELECT ABS (NVL (mtran_balance, 0)),
    --                     ABS (NVL (mtran_commission, 0))
    --                   - (  ABS (NVL (mtran_comm_paid, 0))
    --                      + ABS (NVL (mtran_comm_payable, 0))
    --                     )
    --              INTO v_bal_amt,
    --                   v_dr_comm_due
    --              FROM gin_master_transactions
    --             WHERE mtran_no = v_prev_mtran_no;
    ----RAISE_ERROR('v_bal_amt = '||v_bal_amt||' v_dr_comm_due = '||v_dr_comm_due);
    --            IF ABS (v_bal_amt) > NVL (v_rct_rec (j).rct_amount, 0)
    --            THEN
    --               v_allocate_amt := NVL (v_rct_rec (j).rct_amount, 0);
    --            ELSE
    --               v_allocate_amt := ABS (v_bal_amt);
    --            END IF;
    --
    --            gis_accounts_utilities.knock_trans
    --                                            (v_prev_mtran_no,
    --                                             v_prev_mtran_ref_no,
    --                                             v_mtran_no,
    --                                                v_rct_rec (j).rct_brh_rct_code
    --                                             || '/CN',
    --                                             v_rct_rec (j).rct_date,
    --                                             v_allocate_amt
    --                                            );
    ----           RAISE_ERROR('FAILS HERE');
    --         END IF;
    --      END LOOP;
    --   ELSIF NVL (v_rct_type, 'XXX') = ('TRVD')
    --   THEN                                             -- TRAVEL DEPOSIT RECEIPTS
    --      -- Introducing a table to hold deposit
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            INSERT INTO gin_receipt_deposits
    --                        (rde_code,
    --                         rde_clnt_code,
    --                         rde_drcr,
    --                         rde_pol_policy_no,
    --                         rde_amount, rde_allocated_amt,
    --                         rde_balance,
    --                         rde_received_from,
    --                         rde_captured_by,
    --                         rde_captured_date, rde_remarks,
    --                         rde_rct_no, rde_brh_code,
    --                         rde_ggt_trans_no, rde_date,
    --                         rde_receipt_no, rde_tran_type,
    --                         rde_cancelled,
    --                         rde_cancel_dt,
    --                         rde_cancel_by
    --                        )
    --                 VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'RRRR')
    --                                    || gin_rde_code_seq.NEXTVAL
    --                                   ),
    --                         v_rct_rec (j).rct_act_code,
    --                         DECODE (v_cancel, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         v_tran_mapping (i).tmap_amount, 0,
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         v_rct_rec (j).rct_no, v_rct_rec (j).rct_brh_code,
    --                         NULL, SYSDATE,
    --                         v_tran_mapping (i).tmap_mtran_ref_no, 'TRVL',
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         DECODE (v_cancel, 'Y', SYSDATE, NULL),
    --                         DECODE (v_cancel,
    --                                 'Y', v_rct_rec (j).rct_captured_by,
    --                                 NULL
    --                                )
    --                        );
    --         END LOOP;
    --      END LOOP;
    --   ELSE
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            IF NVL (v_salvage_rct_param, 'N') != 'Y'
    --            THEN
    --               IF NVL (v_rct_rec (j).rct_acct_type_id, 'XX') = 'SV'
    --               THEN
    --                  v_clm_os_reserve :=
    --                     gin_stp_claims_pkg.get_clm_os_reserve
    --                                  (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                   'Y'
    --                                  );
    --
    --                  IF NVL (v_clm_os_reserve, 0) != 0
    --                  THEN
    --                     raise_error
    --                        ('Error- Full Claim Payment NOT DONE, Cannot  Continue'
    --                        );
    --                  END IF;
    --               END IF;
    --            END IF;
    --
    --            --RAISE_APPLICATION_ERROR (-20001,'V_MTRAN_REF = '||V_TRAN_MAPPING(i).TMAP_CHECK_MTRAN_REF_NO||';'||v_rct_rec (j).rct_no);
    --            IF v_cancel = 'Y'
    --            THEN
    --               SELECT COUNT ('X')
    --                 INTO v_rec_count
    --                 FROM gin_recovery_rcts
    --                WHERE rrc_receipt_no = v_rct_rec (j).rct_no;
    --
    --               IF v_rec_count = 0
    --               THEN
    --                  v_cancel_rct := 'N';
    --               END IF;
    --            END IF;
    --
    --            SELECT NVL (MAX (rrc_code), 0) + 1
    --              INTO v_rrc_code
    --              FROM gin_recovery_rcts;
    --
    --           ---RAISE_ERROR('mtran_ref_no-'||v_tran_mapping (i).tmap_check_mtran_ref_no||' = '|| 'mtran_no-'||v_tran_mapping (i).tmap_mtran_no);
    --            INSERT INTO gin_recovery_rcts
    --                        (rrc_code,
    --                         rrc_claim_no,
    --                         rrc_recovery_type,
    --                         rrc_drcr,
    --                         rrc_amount,
    --                         rrc_received_from,
    --                         rrc_received_by,
    --                         rrc_receved_date, rrc_remarks,
    --                         rrc_rct_no,
    --                         rrc_brh_code, rrc_receipt_no,
    --                         rrc_status
    --                        )
    --                 VALUES (v_rrc_code,
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --RRC_CLAIM_NO,
    --                         v_rct_rec (j).rct_acct_type_id,
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         DECODE (v_cancel_rct,
    --                                 'N', v_tran_mapping (i).tmap_mtran_ref_no,
    --                                 v_tran_mapping (i).tmap_mtran_ref_no || '/CN'
    --                                ),
    --                         v_rct_rec (j).rct_brh_code, v_rct_rec (j).rct_no,
    --                         DECODE (v_cancel_rct, 'Y', 'C', 'N', 'A')
    --                        );
    ----            raise_error(v_tran_mapping (i).tmap_mtran_no);
    --            begin
    --            UPDATE gin_clm_salvages
    --               --SET CSD_BUYER=v_rct_rec (j).rct_paid_by,
    --            SET csd_buyer =
    --                   (SELECT rct_received_from
    --                      FROM fms_receipts
    --                     WHERE RCT_NO =v_rct_rec (j).rct_no),
    --                csd_sold = 'Y',
    --                csd_approved_value = v_tran_mapping (i).tmap_amount,
    --                csd_status = 'B'
    --             WHERE csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no
    --                          and CSD_CLMP_CODE=v_tran_mapping (i).tmap_mtran_no;
    --             exception
    --                when others then
    --                raise_error('Error updating salvage buyer details');
    --             end;
    ----raise_error('here after ='||v_tran_mapping (i).tmap_mtran_no);
    --            -- PROCESS SALVAGE TRANSACTIONS
    --            BEGIN
    --               SELECT clmp_limit_amt, clmp_per_pt_code
    --                 INTO v_limit_amt, v_per_pt_code
    --                 FROM gin_claim_perils
    --                WHERE clmp_code = v_tran_mapping (i).tmap_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                          (   'Error determining claim peril...tmap_mtran_no'
    --                           || v_tran_mapping (i).tmap_mtran_no
    --                          );
    --            END;
    --
    --            SELECT DECODE (v_rct_rec (j).rct_acct_type_id, 'SV', 'CS', 'XS','XS','CR')
    --              INTO v_trans_type
    --              FROM DUAL;
    --
    --            SELECT DECODE (v_trans_type, 'CS', 'S', 'XS','E','R')
    --              INTO v_rec_tran_type
    --              FROM DUAL;
    --
    --            --raise_error('v_rct_rec (j).rct_acct_type_id'||v_rct_rec (j).rct_acct_type_id);
    --            IF v_trans_type = 'CS'
    --            THEN
    --               BEGIN
    --                  SELECT COUNT (*)
    --                    INTO v_cnt
    --                    FROM gin_clm_salvages
    --                   WHERE csd_clmp_code = v_tran_mapping (i).tmap_mtran_no
    --                     AND csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR FETCHING SALVAGE DETAILS...');
    --               END;
    --            ELSE
    --               v_cnt := 1;
    --            END IF;
    --
    --
    --            IF NVL (v_cnt, 0) > 0
    --            THEN
    --             --  RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no);
    ----              RAISE_eRROR('v_clmt_code='||v_clmt_code||'v_cnt='||v_cnt||'claim='||v_tran_mapping (i).tmap_check_mtran_ref_no);
    --               BEGIN
    --
    --                  SELECT reg_clmt_code, reg_third_party
    --                    INTO v_clmt_code, v_clmnt_type
    --                    FROM gin_rgstd_claimants, tqc_clients
    --                   WHERE reg_third_party = 'S'
    --                     AND reg_cld_code = clnt_code
    --                     AND reg_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                   gin_stp_claims_pkg.getregclaimantdetails (v_tran_mapping (i).tmap_check_mtran_ref_no,v_clmt_code, v_clmnt_type);
    ----                   RAISE_ERROR('CLAIM NUMBER11 ='||v_tran_mapping (i).tmap_check_mtran_ref_no||'v_clmt_code='||v_clmt_code);
    ----                     BEGIN
    ----                        SELECT cmb_prp_code, 'S'
    ----                          INTO v_clmt_code, v_clmnt_type
    ----                          FROM gin_claim_master_bookings
    ----                         WHERE cmb_claim_no =
    ----                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    ----
    ----                     EXCEPTION
    ----                        WHEN OTHERS
    ----                        THEN
    ----                           raise_error
    ----                                   (   'Error determining claimant 1='
    ----                                    || v_tran_mapping (i).tmap_check_mtran_ref_no
    ----                                   );
    ----                     END;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'Error determining claimant='
    --                                  || v_tran_mapping (i).tmap_check_mtran_ref_no
    --                                 );
    --               END;
    --               -- RAISE_ERROR('HERE='||(v_tran_mapping (i).tmap_amount)||';'||v_limit_amt);
    --               IF NVL (v_tran_mapping (i).tmap_amount, 0) = 0
    --               THEN
    --                  raise_error ('Error:- Receipt amount not provided...');
    --               END IF;
    ----RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no||'v_clmt_code='||v_clmt_code);
    --               IF v_cancel != 'Y'
    --               THEN
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clm_salv_recovry
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    ----                  EXCEPTION
    ----                     WHEN OTHERS
    ----                     THEN
    ----                        raise_error ('Error...');
    --                  -- creating claim transaction
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clmsalv_rec_contra
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    --                  --                          EXCEPTION
    --                  --                            WHEN OTHERS THEN
    --                  --                                RAISE_ERROR('Error...');-- creating claim transaction
    --                  END;
    --               END IF;
    --            ELSE
    --               NULL;
    --            -- CREATE A TICKET TO BE ASSIGNED TO DEFAULT CLAIMS USER, TO PROCESS THE SALVAGE TRANSACTION FROM THE RECEIPT CREATED.....SOLO
    --            END IF;
    --         END LOOP;
    --      END LOOP;
    --   END IF;
    ----   EXCEPTION
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                  'POSTING GIS 2RCT :-' || SQLERRM (SQLCODE)
    ----                                 );
    --END post_gis_rct;
    --  PROCEDURE post_gis_rct (
    --   v_rct_code                       NUMBER,
    --   v_rct_rec                        fms_interfaces_pkg.type_receipts_table,
    --   v_tran_mapping          IN OUT   fms_interfaces_pkg.tran_mapping_type,
    --   v_rct_type                       VARCHAR2,
    --   v_user_name                      VARCHAR2,
    --   v_cancel                         VARCHAR2 DEFAULT 'N',
    --   v_mtran_ref_no                   VARCHAR2 DEFAULT NULL,
    --   v_reasons_for_failure            VARCHAR2 DEFAULT NULL
    --)
    --IS
    --   v_errmsg                  VARCHAR2 (1500);
    --   v_count                   NUMBER          := 0;
    --   v_ggt_trans_no            NUMBER;
    --   v_mtran_no                NUMBER;
    --   v_amount                  NUMBER          := 0;
    --   v_rrc_code                NUMBER;
    --   v_rec_count               NUMBER;
    --   v_cancel_rct              VARCHAR2 (1)    := v_cancel;
    --   v_allocate_amt            NUMBER          := 0;
    --   v_bal_amt                 NUMBER          := 0;
    --   v_dr_comm_due             NUMBER          := 0;
    --   v_dr_comm_vat_incl        NUMBER          := 0;
    --   v_diff                    NUMBER          := 0;
    --   v_comm_alloc_amt          NUMBER          := 0;
    --   v_brn_code                NUMBER;
    --   v_agnt_code               NUMBER;
    --   v_prev_mtran_no           NUMBER;
    --   v_prev_mtran_ref_no       VARCHAR2 (30);
    --   v_tran_type               VARCHAR2 (10);
    --   v_rnd                     NUMBER;
    --   v_bcur_rnd                NUMBER;
    --   v_cur_rate                NUMBER;
    --   v_param                   VARCHAR2 (5);
    --   v_appr_comm               NUMBER;
    --   v_amt_to_com              NUMBER;
    --   v_act_type_cnt            NUMBER;
    --   v_prp_code                NUMBER;
    --   v_per_pt_code             NUMBER;
    --   v_limit_amt               NUMBER;
    --   v_clmt_code               NUMBER;
    --   v_clmnt_type              VARCHAR2 (30);
    --   v_trans_type              VARCHAR2 (30);
    --   v_param_value             VARCHAR2 (30);
    --   v_cnt                     NUMBER;
    --   v_rec_tran_type           VARCHAR2 (30);
    --   v_interface_type          VARCHAR2 (10);
    --   v_allocate                VARCHAR2 (1);
    --   vuser                     VARCHAR2 (30);
    --   v_new_mtran_no            NUMBER;
    --   v_tmap_amt                NUMBER;
    --   v_pol_batch_no            NUMBER;
    --   v_trans_count             NUMBER;
    --   v_new_dr_no               VARCHAR2 (30);
    --   v_freq                    VARCHAR2 (10);
    --   v_dr_no                   NUMBER;
    --   v_new_pol_batch           NUMBER;
    --   v_dr_mtran_no             NUMBER;
    --   v_dr_mtran_ref_no         VARCHAR2 (30);
    --   v_salvage_rct_param       VARCHAR2 (1);
    --   v_clm_os_reserve          NUMBER;
    --   v_comm_allocated          NUMBER;
    --   v_dr_vat_due              NUMBER;
    --   v_prev_ggt_trans_no       NUMBER;
    --   v_whtx                    NUMBER;
    --   v_net_com_param           VARCHAR2 (1)    := 'N';
    --   v_admfee                  NUMBER;
    --   v_admfee_wht              NUMBER;
    --   v_appr_adm_fee            NUMBER;
    --   v_allocate_adm_fee        NUMBER;
    --   v_admin_fee_allocated     NUMBER;
    --   v_adm_fee_diff            NUMBER;
    --   v_dr_admin_fee_vat_incl   NUMBER;
    --   v_admfee_alloc_amt        NUMBER          := 0;
    --
    --   CURSOR cur_commissions (v_prv_mtran_no IN NUMBER)
    --   IS
    --      SELECT *
    --        FROM gin_commission_pymts
    --       WHERE cop_cr_mtran_no = v_prv_mtran_no;
    --BEGIN
    --   /*
    --   ************************************
    --   USE V_TRAN_MAPPING(i).TMAP_COMM_ALLOC
    --   **************************************
    --   */
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAID_ON_FULL_DEBIT')
    --        INTO v_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching commission payment parameter...');
    --   END;
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('ALLOW_SALVAGE_WITHOUT_PYMT')
    --        INTO v_salvage_rct_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_salvage_rct_param := 'Y';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching Salvage  parameter...');
    --   END;
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
    --        INTO v_net_com_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_net_com_param := 'N';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching net of commission parameter...');
    --   END;
    --
    ----      RAISE_ERROR('v_rct_type ='||v_rct_type||';;;'||v_mtran_ref_no);
    --    IF v_rct_type IN ('JV', 'DBT', 'PDR','DBTD','RNRC','QUOT')
    --   /*-- Introduced Dbtd -- Debit Draft Where The Debit Is Not Yet Authorized,
    --   And Rnrc Renewal Receipt Where The Records Are Still In The Renewal Working Area
    --   This will assist in determine how to manage the next move. ie. if the RNRC then check
    --   if its a full receipt and renew the policy. if DBTD, the policy is still in Draft hence do nothing...*/
    --   THEN
    --      SELECT ggt_trans_no_seq.NEXTVAL
    --        INTO v_ggt_trans_no
    --        FROM DUAL;
    --
    --      INSERT INTO gin_gis_transactions
    --                  (ggt_trans_no, ggt_btr_trans_code,
    --                   ggt_done_by, ggt_done_date, ggt_uw_clm_tran,
    --                   ggt_trans_date, ggt_effective_date
    --                  )
    --           VALUES (v_ggt_trans_no, DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                   v_user_name, TRUNC (SYSDATE), 'A',
    --                   TRUNC (SYSDATE), TRUNC (SYSDATE)
    --                  );
    --
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         --RAISE_ERROR('v_rct_type:'||v_rct_type||';;'||v_rct_rec (j).rct_acct_type_id);
    --         IF v_rct_rec (j).rct_acct_type_id IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_clients
    --             WHERE clnt_code = v_rct_rec (j).rct_act_code
    --               AND clnt_sht_desc = v_rct_rec (j).rct_act_sht_desc;
    --         ELSIF v_rct_rec (j).rct_acct_type_id NOT IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_agencies, tqc_account_types
    --             WHERE agn_act_code = act_code
    --               AND agn_code = v_rct_rec (j).rct_act_code
    --               AND agn_sht_desc = v_rct_rec (j).rct_act_sht_desc
    --               AND act_type_id = v_rct_rec (j).rct_acct_type_id;
    --         END IF;
    ----            RAISE_ERROR('HERE...TR...');
    --         IF v_act_type_cnt = 0
    --         THEN
    --            raise_error (   'The account type='
    --                         || v_rct_rec (j).rct_acct_type_id
    --                         || ' and account code='
    --                         || v_rct_rec (j).rct_act_sht_desc
    --                         || ' do not match ...'
    --                         || ' v_rct_rec (j).rct_act_code  '
    --                         || v_rct_rec (j).rct_act_code
    --                        );
    --         END IF;
    --
    --         IF v_cancel = 'Y'
    --         THEN
    --            -- MAKE SURE THAT THE RCT 2B CANCELLED ALREADY EXISTS
    --            SELECT COUNT ('X')
    --              INTO v_rec_count
    --              FROM gin_master_transactions
    --             WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --               AND mtran_rct_code = v_rct_rec (j).rct_no;
    ----RAISE_ERROR('v_rec_count = '||v_rec_count);
    --            IF NVL (v_rec_count, 0) = 0
    --            THEN          --DELETE THE  GIN_GIS_TRANSACTION REC CREATED ABOVE;
    --               DELETE FROM gin_gis_transactions
    --                     WHERE ggt_trans_no = v_ggt_trans_no;
    --
    --               EXIT;
    --            END IF;
    --
    --            BEGIN
    --               v_pol_batch_no := v_tran_mapping (j).tmap_pol_batch_no;
    --               update_transmittal_rct (v_pol_batch_no,
    --                                       v_tran_mapping (j).tmap_amount,
    --                                       v_cancel_rct,
    --                                       v_rct_type
    --                                      );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('Error updating transmittal at cancellation rec...'||v_rct_type||v_pol_batch_no);
    --           END;
    --         END IF;
    --
    --         v_cur_rate :=
    --             get_currexch_rate (v_rct_rec (j).rct_cur_code, v_rnd, v_bcur_rnd);
    --
    --         SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                           || gin_mtran_no_seq.NEXTVAL
    --                          )
    --           INTO v_mtran_no
    --           FROM DUAL;
    --
    ----        RAISE_ERROR( 'MEMO=='||v_rct_rec (j).rct_paymt_memo||';'||v_rct_rec (j).rct_desc||';'||v_rct_rec (j).rct_paymt_mode);
    --         INSERT INTO gin_master_transactions
    --                     (mtran_no, mtran_doc_date, mtran_date,
    --                      mtran_ref_no,
    --                      mtran_other_ref, mtran_tran_type,
    --                      mtran_dc,
    --                      mtran_control_acc,
    --                      mtran_client_type,
    --                      mtran_client_code,
    --                      mtran_amount,
    --                      mtran_balance,
    --                      mtran_authorised,
    --                      mtran_net_amt,
    --                      mtran_posting_date, mtran_ggt_tran_no, mtran_prp_code,
    --                      mtran_btr_trans_code, mtran_origin,
    --                      mtran_cur_code,
    --                      mtran_cur_symbol,
    --                      mtran_brn_code,
    --                      mtran_brn_sht_desc,
    --                      mtran_posted_by,
    --                      mtran_cur_rate,
    --                      mtran_client_polcy_no,
    --                      mtran_narrations, mtran_rct_code,
    --                      mtran_rct_paymt_mode,
    --                      mtran_rct_paymt_memo,
    --                      mtran_agn_discount,
    --                      mtran_pol_batch_no,
    --                      mtran_other_ref1,
    --                      mtran_authorised_by,
    --                      mtran_date_authorized, mtran_pol_ren_endos_no,
    --                      mtran_rct_type,
    --                      mtran_rct_imp_code
    --                     )
    --              --PRP CODE = DECODE( v_rct_rec(j).RCT_ACC_TYPE,'D',v_rct_rec(j).RCT_ACT_CODE,NULL)
    --         VALUES      (v_mtran_no, v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                      DECODE (v_cancel_rct,
    --                              'Y', v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                              v_rct_rec (j).rct_brh_rct_code
    --                             ),
    --                      v_mtran_ref_no,          --v_rct_rec (j).rct_paymt_memo,
    --                                     DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                      DECODE (v_cancel_rct, 'Y', 'D', 'C'),
    --                      v_rct_rec (j).rct_act_sht_desc,
    --                      v_rct_rec (j).rct_acct_type_id,
    --                      v_rct_rec (j).rct_act_code,               --acc sht desc
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      'Y',
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      v_rct_rec (j).rct_date, v_ggt_trans_no, NULL,
    --                      DECODE (v_cancel_rct, 'Y', 'CN', 'RC'), 'A',
    --                      v_rct_rec (j).rct_cur_code,
    --                      tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                      v_rct_rec (j).rct_brh_code,
    --                      fms_interfaces_pkg.brh_name (v_rct_rec (j).rct_brh_code,
    --                                                   'S'
    --                                                  ),
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_cur_rate,
    --                      gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                      v_rct_rec (j).rct_desc, v_rct_rec (j).rct_no,
    --                      v_rct_rec (j).rct_paymt_mode,
    --                      v_rct_rec (j).rct_paymt_memo,
    --                      v_rct_rec (j).rct_discount,
    --                      gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no),
    --                      v_mtran_ref_no,
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_rct_rec (j).rct_date, v_mtran_ref_no,
    --                      v_rct_rec (j).rct_creation_type,
    --                      v_rct_rec (j).rct_imp_code
    --                     );
    --
    --         v_brn_code := v_rct_rec (j).rct_brh_code;
    --         v_agnt_code := v_rct_rec (j).rct_act_code;
    --
    ----           RAISE_ERROR('TOP='||v_param||';'||v_appr_comm||';'||v_allocate_amt||';'||V_cancel||';'||v_mtran_ref_no);
    --         IF v_cancel != 'Y'
    --         THEN
    --            FOR i IN 1 .. v_tran_mapping.COUNT
    --            LOOP
    --               BEGIN
    --                  -- raise_error('vat_amount'||v_tran_mapping (i).tmap_inv_vat);
    --                  v_pol_batch_no := v_tran_mapping (i).tmap_pol_batch_no;
    --
    --                  --gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no);
    --
    --                  -- raise_error('v_pol_batch_no='||v_pol_batch_no);
    ----                     BEGIN
    ----                        UPDATE gin_gis_transmitals
    ----                           SET ggts_rct_amt =
    ----                                  NVL (ggts_rct_amt, 0)
    ----                                  + DECODE (v_cancel_rct, 'Y', -1, 1)
    ----                                    * ABS (v_tran_mapping (i).tmap_amount)
    ----                         WHERE ggts_pol_batch_no = v_pol_batch_no;
    ----                     EXCEPTION
    ----                        WHEN OTHERS
    ----                        THEN
    ----                           NULL;
    ----                     END;
    --                  BEGIN
    --                     update_transmittal_rct (v_pol_batch_no,
    --                                             v_tran_mapping (i).tmap_amount,
    --                                             v_cancel_rct,
    --                                             v_rct_type
    --                                            );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error updating transmittal rec...');
    --                  END;
    --
    --                  BEGIN
    --                     SELECT pol_pro_interface_type, pol_freq_of_payment
    --                       INTO v_interface_type, v_freq
    --                       FROM gin_policies
    --                      WHERE pol_batch_no = v_pol_batch_no;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        v_interface_type := 'ACCRUAL';
    --                        v_freq := 'A';
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error (   'Error getting policy details...'
    --                                     || 'v_pol_batch_no:'
    --                                     || v_pol_batch_no
    --                                     || 'v_mtran_ref_no:'
    --                                     || v_mtran_ref_no
    --                                    );
    --                  END;
    --
    --                  IF NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                  THEN
    ----                     RAISE_ERROR('v_tran_mapping (i).tmap_amount='||v_tran_mapping (i).tmap_amount);
    --                     BEGIN
    --                        gis_accounts_utilities.auto_auth_transactions
    --                                        (v_pol_batch_no,
    --                                         v_tran_mapping (i).tmap_mtran_ref_no,
    --                                         --v_mtran_ref_no ,
    --                                         v_mtran_no,
    --                                         v_tran_mapping (i).tmap_amount,
    --                                         v_freq,
    --                                         v_rct_rec (j).rct_creation_type,
    --                                         v_rct_rec (j).rct_imp_code --,
    ----                                         v_reasons_for_failure
    --                                        );
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                               ('Error processing cash basis transaction... ');
    --                     END;
    --                  ELSE
    ----                     raise_error(v_tran_mapping (i).tmap_mtran_no||';'||v_tran_mapping (i).tmap_mtran_no);
    ----                        raise_error(v_tran_mapping (i).tmap_mtran_no);
    --                     IF NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                        ('DBT', 'JV', 'PDR')
    --                     THEN
    --                        IF NVL (v_tran_mapping (i).tmap_amount, 0) != 0
    --                        THEN
    --                           BEGIN
    --                              SELECT ABS (NVL (mtran_balance, 0)),
    --                                       ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_balance, 0))
    --                                     + ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       )
    --                                     + ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_vat, 0))
    --                                     - (  ABS (NVL (mtran_vat_paid, 0))
    --                                        + ABS (NVL (mtran_vat_payable, 0))
    --                                       ),
    --                                     mtran_tran_type,
    --                                       ABS (NVL (mtran_whtx, 0))
    --                                     - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_whtx_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_whtx, 0))
    --                                     - (  ABS (NVL (mtran_lta_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_lta_whtx_payable, 0))
    --                                       )
    --                                INTO v_bal_amt,
    --                                     v_dr_comm_due,
    --                                     v_amt_to_com,
    --                                     v_dr_vat_due,
    --                                     v_tran_type,
    --                                     v_whtx,
    --                                     v_admfee,
    --                                     v_admfee_wht
    --                                FROM gin_master_transactions
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;
    --
    --                              v_dr_comm_vat_incl :=
    --                                 NVL (v_dr_comm_due, 0)
    --                                 + NVL (v_dr_vat_due, 0);
    --                              v_dr_admin_fee_vat_incl :=
    --                                      NVL (v_admfee, 0)
    --                                      + NVL (v_admfee_wht, 0);
    --                           EXCEPTION
    --                              WHEN NO_DATA_FOUND
    --                              THEN
    --                                 BEGIN
    --                                    SELECT ABS (NVL (mtran_balance, 0)),
    --                                             ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_balance, 0))
    --                                           + ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             )
    --                                           + ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                           mtran_tran_type, mtran_no,
    --                                           mtran_ref_no,
    --                                             ABS (NVL (mtran_vat, 0))
    --                                           - (  ABS (NVL (mtran_vat_paid, 0))
    --                                              + ABS (NVL (mtran_vat_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_whtx, 0))
    --                                           - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                              + ABS (NVL (mtran_whtx_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_whtx, 0))
    --                                           - (  ABS (NVL (mtran_lta_whtx_paid,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                              + ABS
    --                                                   (NVL
    --                                                       (mtran_lta_whtx_payable,
    --                                                        0
    --                                                       )
    --                                                   )
    --                                             )
    --                                      INTO v_bal_amt,
    --                                           v_dr_comm_due,
    --                                           v_amt_to_com,
    --                                           v_tran_type, v_dr_mtran_no,
    --                                           v_dr_mtran_ref_no,
    --                                           v_dr_vat_due,
    --                                           v_whtx,
    --                                           v_admfee,
    --                                           v_admfee_wht
    --                                      FROM gin_master_transactions
    --                                     WHERE mtran_pol_batch_no =
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                       AND mtran_tran_type NOT IN
    --                                                                 ('RC', 'CN')
    --                                       AND mtran_dc = 'D'
    --                                       AND mtran_client_type IN
    --                                                  ('D', 'A', 'B', 'FI', 'IA');
    --
    --                                    v_dr_comm_vat_incl :=
    --                                         NVL (v_dr_comm_due, 0)
    --                                       + NVL (v_dr_vat_due, 0);
    --                                    v_dr_admin_fee_vat_incl :=
    --                                         NVL (v_admfee, 0)
    --                                       + NVL (v_admfee_wht, 0);
    --                                 EXCEPTION
    --                                    WHEN NO_DATA_FOUND
    --                                    THEN
    --                                       NULL;
    --                                 END;
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_application_error (-20001,
    --                                                          SQLERRM (SQLCODE)
    --                                                         );
    --                           END;
    --
    --                           IF NVL (v_param, 'N') = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'N'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --
    --                              /*
    --                              Handle net of commission here
    --                              If the receipt is not direct, and the amount is net of commission,
    --                              compute how much commission that has been withheld by the agent/broker,
    --                              process commission payment as paid outside the system up to fms.
    --                              this has to be parameterized
    --                              <Lewis to work on this!!!!!!!!!! for union>
    --
    --                              */
    --                              IF     NVL (v_net_com_param, 'N') = 'Y'
    --                                 AND v_rct_rec (j).rct_acct_type_id <> 'D'
    --                              THEN
    --                                 IF NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                         'N') = 'Y'
    --                                 THEN
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_dr_comm_due, 0)
    --                                                  - NVL (v_whtx, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_admfee, 0)
    --                                                  - NVL (v_admfee_wht, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 ELSE
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_dr_comm_due, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_admfee, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 END IF;
    --
    --                                 v_comm_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_dr_comm_due,
    --                                        v_dr_vat_due,
    --                                        v_appr_comm,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'COM'
    --                                       );
    --
    --                                 IF NVL (v_appr_adm_fee, 0) <> 0
    --                                 THEN
    --                                    v_admin_fee_allocated :=
    --                                       gis_accounts_utilities.update_commission
    --                                          (v_mtran_no,
    --                                           v_tran_mapping (i).tmap_mtran_ref_no,
    --                                           NVL
    --                                              (v_dr_mtran_no,
    --                                               v_tran_mapping (i).tmap_mtran_no
    --                                              ),
    --                                           v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                           v_admfee,
    --                                           v_dr_vat_due,
    --                                           v_appr_adm_fee,
    --                                           v_brn_code,
    --                                           v_agnt_code,
    --                                           v_rct_rec (j).rct_cur_code,
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inc_comm,
    --                                               'Y'
    --                                              ),
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inv_vat,
    --                                               'Y'
    --                                              ),
    --                                           'ADM'
    --                                          );
    --                                 END IF;
    --
    --                                 --raise_error(v_admin_fee_allocated);
    --                                 IF     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ) = 'N'
    --                                    AND NVL (v_comm_allocated, 0) != 0
    --                                 THEN
    --                                    gis_accounts_utilities.auth_comm_pymnts
    --                                       (v_mtran_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_agnt_code,
    --                                        'CHQ',
    --                                        'N',
    --                                        tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'N'
    --                                            )
    --                                       );
    --                                 END IF;
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) =
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_adm_fee;
    --                              ELSE
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_adm_fee;
    --                              END IF;
    --
    --                              IF ABS (v_bal_amt) < NVL (v_allocate_amt, 0)
    --                              THEN
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --
    --                              IF ABS (v_bal_amt) < NVL (v_allocate_adm_fee, 0)
    --                              THEN
    --                                 v_allocate_adm_fee := ABS (v_bal_amt);
    --                              END IF;
    --                           END IF;
    --
    ----                       raise_error ('V_RCT_MAPPING ='||v_tran_mapping (1).tmap_rct_type||' AMOUNT;'||v_allocate_amt||'Balance:'||v_bal_amt||'Param:'||v_appr_comm);
    --                           IF NVL (v_allocate_amt, 0) <> 0
    --                           THEN
    --                              BEGIN
    --                                 gis_accounts_utilities.knock_trans
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_rct_rec (j).rct_date,
    --                                     v_allocate_amt
    --                                    );
    --                              EXCEPTION
    --                                 WHEN OTHERS
    --                                 THEN
    --                                    raise_error
    --                                             (   'Error:- Erick was here....'
    --                                              || v_mtran_no
    --                                             );
    --                              END;
    --                           END IF;
    --
    --                           --************MOVED TOWARDS END OF PROC  MASINDE
    --                           /* gis_accounts_utilities.update_coin_payments(v_mtran_no,
    --                                                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                                                        NVL(v_dr_mtran_no,v_tran_mapping (i).tmap_mtran_no),
    --                                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                                                        NVL (v_tran_mapping (i).tmap_amount, 0),
    --                                                                        v_brn_code,
    --                                                                        v_agnt_code,
    --                                                                        v_rct_rec (j).rct_cur_code
    --                                                                        );*/
    --                           v_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_amt;
    --                           v_adm_fee_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_adm_fee;
    --
    --                           IF     v_dr_comm_vat_incl != 0
    --                              AND v_diff > 0
    --                              AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_diff) > NVL (v_dr_comm_vat_incl, 0)
    --                              THEN
    --                                 v_comm_alloc_amt :=
    --                                                  NVL (v_dr_comm_vat_incl, 0);
    --                              ELSE
    --                                 v_comm_alloc_amt := ABS (v_diff);
    --                              END IF;
    --
    --                              --raise_error(v_dr_comm_vat_incl||';'||v_diff);
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_dr_comm_due,
    --                                     v_dr_vat_due,
    --                                     v_diff,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );
    --                              v_diff :=
    --                                    NVL (v_diff, 0)
    --                                    - NVL (v_comm_allocated, 0);
    --
    --                              --RAISE_ERROR(v_comm_allocated||';'||v_admfee||';'||v_dr_vat_due||';'||v_diff);
    --                              IF NVL (v_diff, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_diff,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;
    --
    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           ELSIF     NVL (v_tran_type, 'NONE') = 'BAL'
    --                                 AND NVL (v_tran_mapping (i).tmap_comm_alloc,
    --                                          0
    --                                         ) != 0
    --                           THEN
    --                              v_comm_alloc_amt :=
    --                                  NVL (v_tran_mapping (i).tmap_comm_alloc, 0);
    --
    --                              UPDATE gin_master_transactions
    --                                 SET mtran_commission =
    --                                          NVL (mtran_commission, 0)
    --                                        +   DECODE
    --                                                (SIGN (NVL (mtran_commission,
    --                                                            0
    --                                                           )
    --                                                      ),
    --                                                 -1, -1,
    --                                                 1
    --                                                )
    --                                          * v_comm_alloc_amt
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;
    --
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_comm_alloc_amt,
    --                                     NULL,                    --v_due_vat_amt,
    --                                     v_comm_alloc_amt,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );
    --
    --                              IF NVL (v_appr_adm_fee, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_appr_adm_fee,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;
    --
    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           END IF;
    --
    --                           ----**************GENERATE COINURANCE PAYMTS
    --                           --
    --                           gis_accounts_utilities.update_coin_payments
    --                                   (v_mtran_no,
    --                                    v_tran_mapping (i).tmap_mtran_ref_no,
    --                                    NVL (v_dr_mtran_no,
    --                                         v_tran_mapping (i).tmap_mtran_no
    --                                        ),
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                    v_allocate_amt,
    --                                    v_comm_allocated,
    --                                    v_brn_code,
    --                                    v_agnt_code,
    --                                    v_rct_rec (j).rct_cur_code,
    --                                    v_tran_mapping (i).tmap_inc_comm,
    --                                    NVL (v_tran_mapping (i).tmap_inv_vat, 'Y')
    --                                   );
    --                           v_amount :=
    --                                     v_amount + v_tran_mapping (i).tmap_amount;
    --                        END IF;
    --
    --                        BEGIN
    --                           gis_accounts_utilities.validate_allocations
    --                                        (v_mtran_no,
    --                                         NVL (v_dr_mtran_no,
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                             )
    --                                        );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error occured on validation of Receipt allocations.'
    --                                 );
    --                        END;
    --                     -- Gis_Accounts_Utilities.allocate_pdr_rcpt(v_mtran_no,v_tran_mapping (i).tmap_mtran_no,v_tran_mapping (i).tmap_amount);
    --                     ELSIF     NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                                     ('RNRC')
    --                           AND NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                     THEN
    --                        /*-- if the receipt amt is equal to fap, transfer transaction to uw, authorize and allocate */
    --                        gin_stp_pkg.auto_renew_prc
    --                                             (v_tran_mapping (i).tmap_mtran_no
    --                                             );
    --                     END IF;
    --                  END IF;
    --               --                  EXCEPTION
    --               --                     WHEN OTHERS
    --               --                     THEN
    --               --                        raise_error (   ' FOR Batch no '
    --               --                                     || v_tran_mapping (i).tmap_pol_batch_no
    --               --                                    );
    --               END;
    --            END LOOP;
    --         ELSE
    --            BEGIN
    --               SELECT mtran_no, mtran_ref_no
    --                 INTO v_prev_mtran_no, v_prev_mtran_ref_no
    --                 FROM gin_master_transactions
    --                WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --                  AND mtran_client_code = v_rct_rec (j).rct_act_code
    --                  AND mtran_client_type = v_rct_rec (j).rct_acct_type_id
    --                  AND mtran_rct_code = v_rct_rec (j).rct_no;
    --            EXCEPTION
    --               WHEN TOO_MANY_ROWS
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'DUPLICATE RECEIPT FOUND..:-'
    --                                           || v_rct_rec (j).rct_brh_rct_code
    --                                           || ' - '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20001,
    --                                           'ERROR..:-' || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    ----        RAISE_ERROR('v_prev_mtran_no = '||v_prev_mtran_no);
    --            IF    NVL (v_rct_rec (j).rct_client_charge_amount, 0) IS NULL
    --               OR NVL (v_rct_rec (j).rct_client_charge_amount, 0) != 0
    --            THEN
    --               INSERT INTO gin_master_transactions
    --                           (mtran_no,
    --                            mtran_doc_date, mtran_date,
    --                            mtran_ref_no,
    --                            mtran_other_ref, mtran_tran_type, mtran_dc,
    --                            mtran_control_acc,
    --                            mtran_client_type,
    --                            mtran_client_code,
    --                            mtran_amount,
    --                            mtran_balance,
    --                            mtran_authorised,
    --                            mtran_net_amt,
    --                            mtran_posting_date, mtran_ggt_tran_no,
    --                            mtran_prp_code, mtran_btr_trans_code,
    --                            mtran_origin, mtran_cur_code,
    --                            mtran_cur_symbol,
    --                            mtran_brn_code,
    --                            mtran_brn_sht_desc,
    --                            mtran_posted_by,
    --                            mtran_cur_rate,
    --                            mtran_client_polcy_no,
    --                            mtran_rct_code,
    --                            mtran_narrations,
    --                            mtran_rct_paymt_mode,
    --                            mtran_rct_paymt_memo,
    --                            mtran_agn_discount,
    --                            mtran_authorised_by,
    --                            mtran_date_authorized
    --                           )
    --                    VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_mtran_no_seq.NEXTVAL
    --                                      ),
    --                            v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                            v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                            v_rct_rec (j).rct_paymt_memo, 'BNK', 'D',
    --                            v_rct_rec (j).rct_act_sht_desc,
    --                            v_rct_rec (j).rct_acct_type_id,
    --                            v_rct_rec (j).rct_act_code,
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            'Y',
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            v_rct_rec (j).rct_date, v_ggt_trans_no,
    --                            NULL, 'BNK',
    --                            'A', v_rct_rec (j).rct_cur_code,
    --                            tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                            v_rct_rec (j).rct_brh_code,
    --                            fms_interfaces_pkg.brh_name
    --                                                   (v_rct_rec (j).rct_brh_code,
    --                                                    'S'
    --                                                   ),
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_cur_rate,
    --                            gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                            v_rct_rec (j).rct_no,
    --                            'CHARGES UPON CANCELLATION',
    --                            v_rct_rec (j).rct_paymt_mode,
    --                            v_rct_rec (j).rct_paymt_memo,
    --                            v_rct_rec (j).rct_discount,
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_rct_rec (j).rct_date
    --                           );
    --            END IF;
    --
    --            gis_accounts_utilities.undo_pdr_rcpt (v_prev_mtran_no);
    --            -- UNDOING PDR ALLOACTIONS
    --            gis_accounts_utilities.undo_trans_allocation (v_prev_mtran_no,
    --                                                          NULL,
    --                                                          'Y'
    --                                                         );
    --            gis_accounts_utilities.undo_pa_rcpt (v_prev_mtran_no,
    --                                                 v_mtran_no,
    --                                                 NULL
    --                                                );
    --
    --            /* MOVED TO gis_accounts_utilities.undo_trans_allocation PROCEDURE
    --            FOR i IN 1 .. v_tran_mapping.COUNT  LOOP
    --            -- RAISE_ERROR('v_prev_mtran_no'||v_prev_mtran_no);
    --                IF NVL(v_net_com_param,'N') = 'Y'
    --                  AND v_rct_rec (j).rct_acct_type_id <> 'D' THEN
    --                         Gis_Accounts_Utilities.auth_comm_pymnts (
    --                                                  v_prev_mtran_no,
    --                                                  NULL,-- v_mtran_no,
    --                                                  NULL,
    --                                                  'CHQ',
    --                                                  'N',
    --                                                  tqc_interfaces_pkg.username (v_rct_rec (j).rct_captured_by ),
    --                                                  NVL(v_tran_mapping (i).tmap_inv_vat,'N')
    --                                               );
    --                END IF;
    --             END LOOP; */
    --            SELECT ABS (NVL (mtran_balance, 0)),
    --                     ABS (NVL (mtran_commission, 0))
    --                   - (  ABS (NVL (mtran_comm_paid, 0))
    --                      + ABS (NVL (mtran_comm_payable, 0))
    --                     )
    --              INTO v_bal_amt,
    --                   v_dr_comm_due
    --              FROM gin_master_transactions
    --             WHERE mtran_no = v_prev_mtran_no;
    ----RAISE_ERROR('v_bal_amt = '||v_bal_amt||' v_dr_comm_due = '||v_dr_comm_due);
    --            IF ABS (v_bal_amt) > NVL (v_rct_rec (j).rct_amount, 0)
    --            THEN
    --               v_allocate_amt := NVL (v_rct_rec (j).rct_amount, 0);
    --            ELSE
    --               v_allocate_amt := ABS (v_bal_amt);
    --            END IF;
    --
    --            gis_accounts_utilities.knock_trans
    --                                            (v_prev_mtran_no,
    --                                             v_prev_mtran_ref_no,
    --                                             v_mtran_no,
    --                                                v_rct_rec (j).rct_brh_rct_code
    --                                             || '/CN',
    --                                             v_rct_rec (j).rct_date,
    --                                             v_allocate_amt
    --                                            );
    ----           RAISE_ERROR('FAILS HERE');
    --         END IF;
    --      END LOOP;
    --   ELSIF NVL (v_rct_type, 'XXX') = ('TRVD')
    --   THEN                                             -- TRAVEL DEPOSIT RECEIPTS
    --      -- Introducing a table to hold deposit
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            INSERT INTO gin_receipt_deposits
    --                        (rde_code,
    --                         rde_clnt_code,
    --                         rde_drcr,
    --                         rde_pol_policy_no,
    --                         rde_amount, rde_allocated_amt,
    --                         rde_balance,
    --                         rde_received_from,
    --                         rde_captured_by,
    --                         rde_captured_date, rde_remarks,
    --                         rde_rct_no, rde_brh_code,
    --                         rde_ggt_trans_no, rde_date,
    --                         rde_receipt_no, rde_tran_type,
    --                         rde_cancelled,
    --                         rde_cancel_dt,
    --                         rde_cancel_by
    --                        )
    --                 VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'RRRR')
    --                                    || gin_rde_code_seq.NEXTVAL
    --                                   ),
    --                         v_rct_rec (j).rct_act_code,
    --                         DECODE (v_cancel, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         v_tran_mapping (i).tmap_amount, 0,
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         v_rct_rec (j).rct_no, v_rct_rec (j).rct_brh_code,
    --                         NULL, SYSDATE,
    --                         v_tran_mapping (i).tmap_mtran_ref_no, 'TRVL',
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         DECODE (v_cancel, 'Y', SYSDATE, NULL),
    --                         DECODE (v_cancel,
    --                                 'Y', v_rct_rec (j).rct_captured_by,
    --                                 NULL
    --                                )
    --                        );
    --         END LOOP;
    --      END LOOP;
    --   ELSE
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            IF NVL (v_salvage_rct_param, 'N') != 'Y'
    --            THEN
    --               IF NVL (v_rct_rec (j).rct_acct_type_id, 'XX') = 'SV'
    --               THEN
    --                  v_clm_os_reserve :=
    --                     gin_stp_claims_pkg.get_clm_os_reserve
    --                                  (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                   'Y'
    --                                  );
    --
    --                  IF NVL (v_clm_os_reserve, 0) != 0
    --                  THEN
    --                     raise_error
    --                        ('Error- Full Claim Payment NOT DONE, Cannot  Continue'
    --                        );
    --                  END IF;
    --               END IF;
    --            END IF;
    --
    --            --RAISE_APPLICATION_ERROR (-20001,'V_MTRAN_REF = '||V_TRAN_MAPPING(i).TMAP_CHECK_MTRAN_REF_NO||';'||v_rct_rec (j).rct_no);
    --            IF v_cancel = 'Y'
    --            THEN
    --               SELECT COUNT ('X')
    --                 INTO v_rec_count
    --                 FROM gin_recovery_rcts
    --                WHERE rrc_receipt_no = v_rct_rec (j).rct_no;
    --
    --               IF v_rec_count = 0
    --               THEN
    --                  v_cancel_rct := 'N';
    --               END IF;
    --            END IF;
    --
    --            SELECT NVL (MAX (rrc_code), 0) + 1
    --              INTO v_rrc_code
    --              FROM gin_recovery_rcts;
    --
    --           ---RAISE_ERROR('mtran_ref_no-'||v_tran_mapping (i).tmap_check_mtran_ref_no||' = '|| 'mtran_no-'||v_tran_mapping (i).tmap_mtran_no);
    --            INSERT INTO gin_recovery_rcts
    --                        (rrc_code,
    --                         rrc_claim_no,
    --                         rrc_recovery_type,
    --                         rrc_drcr,
    --                         rrc_amount,
    --                         rrc_received_from,
    --                         rrc_received_by,
    --                         rrc_receved_date, rrc_remarks,
    --                         rrc_rct_no,
    --                         rrc_brh_code, rrc_receipt_no,
    --                         rrc_status
    --                        )
    --                 VALUES (v_rrc_code,
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --RRC_CLAIM_NO,
    --                         v_rct_rec (j).rct_acct_type_id,
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         DECODE (v_cancel_rct,
    --                                 'N', v_tran_mapping (i).tmap_mtran_ref_no,
    --                                 v_tran_mapping (i).tmap_mtran_ref_no || '/CN'
    --                                ),
    --                         v_rct_rec (j).rct_brh_code, v_rct_rec (j).rct_no,
    --                         DECODE (v_cancel_rct, 'Y', 'C', 'N', 'A')
    --                        );
    ----            raise_error(v_tran_mapping (i).tmap_mtran_no);
    --            begin
    --            UPDATE gin_clm_salvages
    --               --SET CSD_BUYER=v_rct_rec (j).rct_paid_by,
    --            SET csd_buyer =
    --                   (SELECT rct_received_from
    --                      FROM fms_receipts
    --                     WHERE RCT_NO =v_rct_rec (j).rct_no),
    --                csd_sold = 'Y',
    --                csd_approved_value = v_tran_mapping (i).tmap_amount,
    --                csd_status = 'B'
    --             WHERE csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no
    --                          and CSD_CLMP_CODE=v_tran_mapping (i).tmap_mtran_no;
    --             exception
    --                when others then
    --                raise_error('Error updating salvage buyer details');
    --             end;
    ----raise_error('here after ='||v_tran_mapping (i).tmap_mtran_no);
    --            -- PROCESS SALVAGE TRANSACTIONS
    --            BEGIN
    --               SELECT clmp_limit_amt, clmp_per_pt_code
    --                 INTO v_limit_amt, v_per_pt_code
    --                 FROM gin_claim_perils
    --                WHERE clmp_code = v_tran_mapping (i).tmap_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                          (   'Error determining claim peril...tmap_mtran_no'
    --                           || v_tran_mapping (i).tmap_mtran_no
    --                          );
    --            END;
    --
    --            SELECT DECODE (v_rct_rec (j).rct_acct_type_id, 'SV', 'CS', 'XS','XS','CR')
    --              INTO v_trans_type
    --              FROM DUAL;
    --
    --            SELECT DECODE (v_trans_type, 'CS', 'S', 'XS','E','R')
    --              INTO v_rec_tran_type
    --              FROM DUAL;
    --
    --            --raise_error('v_rct_rec (j).rct_acct_type_id'||v_rct_rec (j).rct_acct_type_id);
    --            IF v_trans_type = 'CS'
    --            THEN
    --               BEGIN
    --                  SELECT COUNT (*)
    --                    INTO v_cnt
    --                    FROM gin_clm_salvages
    --                   WHERE csd_clmp_code = v_tran_mapping (i).tmap_mtran_no
    --                     AND csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR FETCHING SALVAGE DETAILS...');
    --               END;
    --            ELSE
    --               v_cnt := 1;
    --            END IF;
    --
    --
    --            IF NVL (v_cnt, 0) > 0
    --            THEN
    --             --  RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no);
    ----              RAISE_eRROR('v_clmt_code='||v_clmt_code||'v_cnt='||v_cnt||'claim='||v_tran_mapping (i).tmap_check_mtran_ref_no);
    --               BEGIN
    --
    --                  SELECT reg_clmt_code, reg_third_party
    --                    INTO v_clmt_code, v_clmnt_type
    --                    FROM gin_rgstd_claimants, tqc_clients
    --                   WHERE reg_third_party = 'S'
    --                     AND reg_cld_code = clnt_code
    --                     AND reg_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                   gin_stp_claims_pkg.getregclaimantdetails (v_tran_mapping (i).tmap_check_mtran_ref_no,v_clmt_code, v_clmnt_type);
    ----                   RAISE_ERROR('CLAIM NUMBER11 ='||v_tran_mapping (i).tmap_check_mtran_ref_no||'v_clmt_code='||v_clmt_code);
    ----                     BEGIN
    ----                        SELECT cmb_prp_code, 'S'
    ----                          INTO v_clmt_code, v_clmnt_type
    ----                          FROM gin_claim_master_bookings
    ----                         WHERE cmb_claim_no =
    ----                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    ----
    ----                     EXCEPTION
    ----                        WHEN OTHERS
    ----                        THEN
    ----                           raise_error
    ----                                   (   'Error determining claimant 1='
    ----                                    || v_tran_mapping (i).tmap_check_mtran_ref_no
    ----                                   );
    ----                     END;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'Error determining claimant='
    --                                  || v_tran_mapping (i).tmap_check_mtran_ref_no
    --                                 );
    --               END;
    --               -- RAISE_ERROR('HERE='||(v_tran_mapping (i).tmap_amount)||';'||v_limit_amt);
    --               IF NVL (v_tran_mapping (i).tmap_amount, 0) = 0
    --               THEN
    --                  raise_error ('Error:- Receipt amount not provided...');
    --               END IF;
    ----RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no||'v_clmt_code='||v_clmt_code);
    --               IF v_cancel != 'Y'
    --               THEN
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clm_salv_recovry
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    ----                  EXCEPTION
    ----                     WHEN OTHERS
    ----                     THEN
    ----                        raise_error ('Error...');
    --                  -- creating claim transaction
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clmsalv_rec_contra
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    --                  --                          EXCEPTION
    --                  --                            WHEN OTHERS THEN
    --                  --                                RAISE_ERROR('Error...');-- creating claim transaction
    --                  END;
    --               END IF;
    --            ELSE
    --               NULL;
    --            -- CREATE A TICKET TO BE ASSIGNED TO DEFAULT CLAIMS USER, TO PROCESS THE SALVAGE TRANSACTION FROM THE RECEIPT CREATED.....SOLO
    --            END IF;
    --         END LOOP;
    --      END LOOP;
    --   END IF;
    ----   EXCEPTION
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                  'POSTING GIS 2RCT :-' || SQLERRM (SQLCODE)
    ----                                 );
    ----END post_gis_rct;
    --PROCEDURE post_gis_rct (---commented out on 1st Feb 2019---unable to save receipt--user details not found
    --   v_rct_code                       NUMBER,
    --   v_rct_rec                        fms_interfaces_pkg.type_receipts_table,
    --   v_tran_mapping          IN OUT   fms_interfaces_pkg.tran_mapping_type,
    --   v_rct_type                       VARCHAR2,
    --   v_user_name                      VARCHAR2,
    --   v_cancel                         VARCHAR2 DEFAULT 'N',
    --   v_mtran_ref_no                   VARCHAR2 DEFAULT NULL,
    --   v_reasons_for_failure            VARCHAR2 DEFAULT NULL
    --)
    --IS
    --   v_errmsg                  VARCHAR2 (1500);
    --   v_count                   NUMBER          := 0;
    --   v_ggt_trans_no            NUMBER;
    --   v_mtran_no                NUMBER;
    --   v_amount                  NUMBER          := 0;
    --   v_rrc_code                NUMBER;
    --   v_rec_count               NUMBER;
    --   v_cancel_rct              VARCHAR2 (1)    := v_cancel;
    --   v_allocate_amt            NUMBER          := 0;
    --   v_bal_amt                 NUMBER          := 0;
    --   v_dr_comm_due             NUMBER          := 0;
    --   v_dr_comm_vat_incl        NUMBER          := 0;
    --   v_diff                    NUMBER          := 0;
    --   v_comm_alloc_amt          NUMBER          := 0;
    --   v_brn_code                NUMBER;
    --   v_agnt_code               NUMBER;
    --   v_prev_mtran_no           NUMBER;
    --   v_prev_mtran_ref_no       VARCHAR2 (30);
    --   v_tran_type               VARCHAR2 (10);
    --   v_rnd                     NUMBER;
    --   v_bcur_rnd                NUMBER;
    --   v_cur_rate                NUMBER;
    --   v_param                   VARCHAR2 (5);
    --   v_appr_comm               NUMBER;
    --   v_amt_to_com              NUMBER;
    --   v_act_type_cnt            NUMBER;
    --   v_prp_code                NUMBER;
    --   v_per_pt_code             NUMBER;
    --   v_limit_amt               NUMBER;
    --   v_clmt_code               NUMBER;
    --   v_clmnt_type              VARCHAR2 (30);
    --   v_trans_type              VARCHAR2 (30);
    --   v_param_value             VARCHAR2 (30);
    --   v_cnt                     NUMBER;
    --   v_rec_tran_type           VARCHAR2 (30);
    --   v_interface_type          VARCHAR2 (10);
    --   v_allocate                VARCHAR2 (1);
    --   vuser                     VARCHAR2 (30);
    --   v_new_mtran_no            NUMBER;
    --   v_tmap_amt                NUMBER;
    --   v_pol_batch_no            NUMBER;
    --   v_trans_count             NUMBER;
    --   v_new_dr_no               VARCHAR2 (30);
    --   v_freq                    VARCHAR2 (10);
    --   v_dr_no                   NUMBER;
    --   v_new_pol_batch           NUMBER;
    --   v_dr_mtran_no             NUMBER;
    --   v_dr_mtran_ref_no         VARCHAR2 (30);
    --   v_salvage_rct_param       VARCHAR2 (1);
    --   v_clm_os_reserve          NUMBER;
    --   v_comm_allocated          NUMBER;
    --   v_dr_vat_due              NUMBER;
    --   v_prev_ggt_trans_no       NUMBER;
    --   v_whtx                    NUMBER;
    --   v_net_com_param           VARCHAR2 (1)    := 'N';
    --   v_admfee                  NUMBER;
    --   v_admfee_wht              NUMBER;
    --   v_appr_adm_fee            NUMBER;
    --   v_allocate_adm_fee        NUMBER;
    --   v_admin_fee_allocated     NUMBER;
    --   v_adm_fee_diff            NUMBER;
    --   v_dr_admin_fee_vat_incl   NUMBER;
    --   v_admfee_alloc_amt        NUMBER          := 0;
    --
    --   CURSOR cur_commissions (v_prv_mtran_no IN NUMBER)
    --   IS
    --      SELECT *
    --        FROM gin_commission_pymts
    --       WHERE cop_cr_mtran_no = v_prv_mtran_no;
    --BEGIN
    --   /*
    --   ************************************
    --   USE V_TRAN_MAPPING(i).TMAP_COMM_ALLOC
    --   **************************************
    --   */
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAID_ON_FULL_DEBIT')
    --        INTO v_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching commission payment parameter...');
    --   END;
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar
    --                                                 ('ALLOW_SALVAGE_WITHOUT_PYMT')
    --        INTO v_salvage_rct_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_salvage_rct_param := 'Y';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching Salvage  parameter...');
    --   END;
    --
    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
    --        INTO v_net_com_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_net_com_param := 'N';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching net of commission parameter...');
    --   END;
    --
    ----      RAISE_ERROR('v_rct_type ='||v_rct_type||';;;'||v_mtran_ref_no);
    --    IF v_rct_type IN ('JV', 'DBT', 'PDR','DBTD','RNRC','QUOT')
    --   /*-- Introduced Dbtd -- Debit Draft Where The Debit Is Not Yet Authorized,
    --   And Rnrc Renewal Receipt Where The Records Are Still In The Renewal Working Area
    --   This will assist in determine how to manage the next move. ie. if the RNRC then check
    --   if its a full receipt and renew the policy. if DBTD, the policy is still in Draft hence do nothing...*/
    --   THEN
    --      SELECT ggt_trans_no_seq.NEXTVAL
    --        INTO v_ggt_trans_no
    --        FROM DUAL;
    --
    --      INSERT INTO gin_gis_transactions
    --                  (ggt_trans_no, ggt_btr_trans_code,
    --                   ggt_done_by, ggt_done_date, ggt_uw_clm_tran,
    --                   ggt_trans_date, ggt_effective_date
    --                  )
    --           VALUES (v_ggt_trans_no, DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                   v_user_name, TRUNC (SYSDATE), 'A',
    --                   TRUNC (SYSDATE), TRUNC (SYSDATE)
    --                  );
    --
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         --RAISE_ERROR('v_rct_type:'||v_rct_type||';;'||v_rct_rec (j).rct_acct_type_id);
    --         IF v_rct_rec (j).rct_acct_type_id IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_clients
    --             WHERE clnt_code = v_rct_rec (j).rct_act_code
    --               AND clnt_sht_desc = v_rct_rec (j).rct_act_sht_desc;
    --         ELSIF v_rct_rec (j).rct_acct_type_id NOT IN ('D')
    --         THEN
    --            SELECT COUNT (1)
    --              INTO v_act_type_cnt
    --              FROM tqc_agencies, tqc_account_types
    --             WHERE agn_act_code = act_code
    --               AND agn_code = v_rct_rec (j).rct_act_code
    --               AND agn_sht_desc = v_rct_rec (j).rct_act_sht_desc
    --               AND act_type_id = v_rct_rec (j).rct_acct_type_id;
    --         END IF;
    ----            RAISE_ERROR('HERE...TR...');
    --         IF v_act_type_cnt = 0
    --         THEN
    --            raise_error (   'The account type='
    --                         || v_rct_rec (j).rct_acct_type_id
    --                         || ' and account code='
    --                         || v_rct_rec (j).rct_act_sht_desc
    --                         || ' do not match ...'
    --                         || ' v_rct_rec (j).rct_act_code  '
    --                         || v_rct_rec (j).rct_act_code
    --                        );
    --         END IF;
    --
    --         IF v_cancel = 'Y'
    --         THEN
    --            -- MAKE SURE THAT THE RCT 2B CANCELLED ALREADY EXISTS
    --            SELECT COUNT ('X')
    --              INTO v_rec_count
    --              FROM gin_master_transactions
    --             WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --               AND mtran_rct_code = v_rct_rec (j).rct_no;
    ----RAISE_ERROR('v_rec_count = '||v_rec_count);
    --            IF NVL (v_rec_count, 0) = 0
    --            THEN          --DELETE THE  GIN_GIS_TRANSACTION REC CREATED ABOVE;
    --               DELETE FROM gin_gis_transactions
    --                     WHERE ggt_trans_no = v_ggt_trans_no;
    --
    --               EXIT;
    --            END IF;
    --
    --            BEGIN
    --               v_pol_batch_no := v_tran_mapping (j).tmap_pol_batch_no;
    --               update_transmittal_rct (v_pol_batch_no,
    --                                       v_tran_mapping (j).tmap_amount,
    --                                       v_cancel_rct,
    --                                       v_rct_type
    --                                      );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('Error updating transmittal at cancellation rec...'||v_rct_type||v_pol_batch_no);
    --           END;
    --         END IF;
    --
    --         v_cur_rate :=
    --             get_currexch_rate (v_rct_rec (j).rct_cur_code, v_rnd, v_bcur_rnd);
    --
    --         SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                           || gin_mtran_no_seq.NEXTVAL
    --                          )
    --           INTO v_mtran_no
    --           FROM DUAL;
    --
    ----        RAISE_ERROR( 'MEMO=='||v_rct_rec (j).rct_paymt_memo||';'||v_rct_rec (j).rct_desc||';'||v_rct_rec (j).rct_paymt_mode);
    --         INSERT INTO gin_master_transactions
    --                     (mtran_no, mtran_doc_date, mtran_date,
    --                      mtran_ref_no,
    --                      mtran_other_ref, mtran_tran_type,
    --                      mtran_dc,
    --                      mtran_control_acc,
    --                      mtran_client_type,
    --                      mtran_client_code,
    --                      mtran_amount,
    --                      mtran_balance,
    --                      mtran_authorised,
    --                      mtran_net_amt,
    --                      mtran_posting_date, mtran_ggt_tran_no, mtran_prp_code,
    --                      mtran_btr_trans_code, mtran_origin,
    --                      mtran_cur_code,
    --                      mtran_cur_symbol,
    --                      mtran_brn_code,
    --                      mtran_brn_sht_desc,
    --                      mtran_posted_by,
    --                      mtran_cur_rate,
    --                      mtran_client_polcy_no,
    --                      mtran_narrations, mtran_rct_code,
    --                      mtran_rct_paymt_mode,
    --                      mtran_rct_paymt_memo,
    --                      mtran_agn_discount,
    --                      mtran_pol_batch_no,
    --                      mtran_other_ref1,
    --                      mtran_authorised_by,
    --                      mtran_date_authorized, mtran_pol_ren_endos_no,
    --                      mtran_rct_type,
    --                      mtran_rct_imp_code
    --                     )
    --              --PRP CODE = DECODE( v_rct_rec(j).RCT_ACC_TYPE,'D',v_rct_rec(j).RCT_ACT_CODE,NULL)
    --         VALUES      (v_mtran_no, v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                      DECODE (v_cancel_rct,
    --                              'Y', v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                              v_rct_rec (j).rct_brh_rct_code
    --                             ),
    --                      v_mtran_ref_no,          --v_rct_rec (j).rct_paymt_memo,
    --                                     DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
    --                      DECODE (v_cancel_rct, 'Y', 'D', 'C'),
    --                      v_rct_rec (j).rct_act_sht_desc,
    --                      v_rct_rec (j).rct_acct_type_id,
    --                      v_rct_rec (j).rct_act_code,               --acc sht desc
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      'Y',
    --                        DECODE (v_cancel_rct, 'Y', 1, -1)
    --                      * ABS (v_rct_rec (j).rct_amount),
    --                      v_rct_rec (j).rct_date, v_ggt_trans_no, NULL,
    --                      DECODE (v_cancel_rct, 'Y', 'CN', 'RC'), 'A',
    --                      v_rct_rec (j).rct_cur_code,
    --                      tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                      v_rct_rec (j).rct_brh_code,
    --                      fms_interfaces_pkg.brh_name (v_rct_rec (j).rct_brh_code,
    --                                                   'S'
    --                                                  ),
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_cur_rate,
    --                      gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                      v_rct_rec (j).rct_desc, v_rct_rec (j).rct_no,
    --                      v_rct_rec (j).rct_paymt_mode,
    --                      v_rct_rec (j).rct_paymt_memo,
    --                      v_rct_rec (j).rct_discount,
    --                      gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no),
    --                      v_mtran_ref_no,
    --                      tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                      v_rct_rec (j).rct_date, v_mtran_ref_no,
    --                      v_rct_rec (j).rct_creation_type,
    --                      v_rct_rec (j).rct_imp_code
    --                     );
    --
    --         v_brn_code := v_rct_rec (j).rct_brh_code;
    --         v_agnt_code := v_rct_rec (j).rct_act_code;
    --
    ----           RAISE_ERROR('TOP='||v_param||';'||v_appr_comm||';'||v_allocate_amt||';'||V_cancel||';'||v_mtran_ref_no);
    --         IF v_cancel != 'Y'
    --         THEN
    --            FOR i IN 1 .. v_tran_mapping.COUNT
    --            LOOP
    --               BEGIN
    --                  -- raise_error('vat_amount'||v_tran_mapping (i).tmap_inv_vat);
    --                  v_pol_batch_no := v_tran_mapping (i).tmap_pol_batch_no;
    --
    --                  --gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no);
    --
    --                  -- raise_error('v_pol_batch_no='||v_pol_batch_no);
    ----                     BEGIN
    ----                        UPDATE gin_gis_transmitals
    ----                           SET ggts_rct_amt =
    ----                                  NVL (ggts_rct_amt, 0)
    ----                                  + DECODE (v_cancel_rct, 'Y', -1, 1)
    ----                                    * ABS (v_tran_mapping (i).tmap_amount)
    ----                         WHERE ggts_pol_batch_no = v_pol_batch_no;
    ----                     EXCEPTION
    ----                        WHEN OTHERS
    ----                        THEN
    ----                           NULL;
    ----                     END;
    --                  BEGIN
    --                     update_transmittal_rct (v_pol_batch_no,
    --                                             v_tran_mapping (i).tmap_amount,
    --                                             v_cancel_rct,
    --                                             v_rct_type
    --                                            );
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error ('Error updating transmittal rec...');
    --                  END;
    --
    --                  BEGIN
    --                     SELECT pol_pro_interface_type, pol_freq_of_payment
    --                       INTO v_interface_type, v_freq
    --                       FROM gin_policies
    --                      WHERE pol_batch_no = v_pol_batch_no;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        v_interface_type := 'ACCRUAL';
    --                        v_freq := 'A';
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error (   'Error getting policy details...'
    --                                     || 'v_pol_batch_no:'
    --                                     || v_pol_batch_no
    --                                     || 'v_mtran_ref_no:'
    --                                     || v_mtran_ref_no
    --                                    );
    --                  END;
    --
    --                  IF NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                  THEN
    ----                     RAISE_ERROR('v_tran_mapping (i).tmap_amount='||v_tran_mapping (i).tmap_amount);
    --                     BEGIN
    --                        gis_accounts_utilities.auto_auth_transactions
    --                                        (v_pol_batch_no,
    --                                         v_tran_mapping (i).tmap_mtran_ref_no,
    --                                         --v_mtran_ref_no ,
    --                                         v_mtran_no,
    --                                         v_tran_mapping (i).tmap_amount,
    --                                         v_freq,
    --                                         v_rct_rec (j).rct_creation_type,
    --                                         v_rct_rec (j).rct_imp_code --,
    ----                                         v_reasons_for_failure
    --                                        );
    --                     EXCEPTION
    --                        WHEN OTHERS
    --                        THEN
    --                           raise_error
    --                               ('Error processing cash basis transaction... ');
    --                     END;
    --                  ELSE
    ----                     raise_error(v_tran_mapping (i).tmap_mtran_no||';'||v_tran_mapping (i).tmap_mtran_no);
    ----                        raise_error(v_tran_mapping (i).tmap_mtran_no);
    --                     IF NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                        ('DBT', 'JV', 'PDR')
    --                     THEN
    --                        IF NVL (v_tran_mapping (i).tmap_amount, 0) != 0
    --                        THEN
    --                           BEGIN
    --                              SELECT ABS (NVL (mtran_balance, 0)),
    --                                       ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_balance, 0))
    --                                     + ABS (NVL (mtran_commission, 0))
    --                                     - (  ABS (NVL (mtran_comm_paid, 0))
    --                                        + ABS (NVL (mtran_comm_payable, 0))
    --                                       )
    --                                     + ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_vat, 0))
    --                                     - (  ABS (NVL (mtran_vat_paid, 0))
    --                                        + ABS (NVL (mtran_vat_payable, 0))
    --                                       ),
    --                                     mtran_tran_type,
    --                                       ABS (NVL (mtran_whtx, 0))
    --                                     - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_whtx_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_amt, 0))
    --                                     - (  ABS (NVL (mtran_lta_paid, 0))
    --                                        + ABS (NVL (mtran_lta_payable, 0))
    --                                       ),
    --                                       ABS (NVL (mtran_lta_whtx, 0))
    --                                     - (  ABS (NVL (mtran_lta_whtx_paid, 0))
    --                                        + ABS (NVL (mtran_lta_whtx_payable, 0))
    --                                       )
    --                                INTO v_bal_amt,
    --                                     v_dr_comm_due,
    --                                     v_amt_to_com,
    --                                     v_dr_vat_due,
    --                                     v_tran_type,
    --                                     v_whtx,
    --                                     v_admfee,
    --                                     v_admfee_wht
    --                                FROM gin_master_transactions
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;
    --
    --                              v_dr_comm_vat_incl :=
    --                                 NVL (v_dr_comm_due, 0)
    --                                 + NVL (v_dr_vat_due, 0);
    --                              v_dr_admin_fee_vat_incl :=
    --                                      NVL (v_admfee, 0)
    --                                      + NVL (v_admfee_wht, 0);
    --                           EXCEPTION
    --                              WHEN NO_DATA_FOUND
    --                              THEN
    --                                 BEGIN
    --                                    SELECT ABS (NVL (mtran_balance, 0)),
    --                                             ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_balance, 0))
    --                                           + ABS (NVL (mtran_commission, 0))
    --                                           - (  ABS (NVL (mtran_comm_paid, 0))
    --                                              + ABS (NVL (mtran_comm_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             )
    --                                           + ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                           mtran_tran_type, mtran_no,
    --                                           mtran_ref_no,
    --                                             ABS (NVL (mtran_vat, 0))
    --                                           - (  ABS (NVL (mtran_vat_paid, 0))
    --                                              + ABS (NVL (mtran_vat_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_whtx, 0))
    --                                           - (  ABS (NVL (mtran_whtx_paid, 0))
    --                                              + ABS (NVL (mtran_whtx_payable,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_amt, 0))
    --                                           - (  ABS (NVL (mtran_lta_paid, 0))
    --                                              + ABS (NVL (mtran_lta_payable,
    --                                                          0)
    --                                                    )
    --                                             ),
    --                                             ABS (NVL (mtran_lta_whtx, 0))
    --                                           - (  ABS (NVL (mtran_lta_whtx_paid,
    --                                                          0
    --                                                         )
    --                                                    )
    --                                              + ABS
    --                                                   (NVL
    --                                                       (mtran_lta_whtx_payable,
    --                                                        0
    --                                                       )
    --                                                   )
    --                                             )
    --                                      INTO v_bal_amt,
    --                                           v_dr_comm_due,
    --                                           v_amt_to_com,
    --                                           v_tran_type, v_dr_mtran_no,
    --                                           v_dr_mtran_ref_no,
    --                                           v_dr_vat_due,
    --                                           v_whtx,
    --                                           v_admfee,
    --                                           v_admfee_wht
    --                                      FROM gin_master_transactions
    --                                     WHERE mtran_pol_batch_no =
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                       AND mtran_tran_type NOT IN
    --                                                                 ('RC', 'CN')
    --                                       AND mtran_dc = 'D'
    --                                       AND mtran_client_type IN
    --                                                  ('D', 'A', 'B', 'FI', 'IA');
    --
    --                                    v_dr_comm_vat_incl :=
    --                                         NVL (v_dr_comm_due, 0)
    --                                       + NVL (v_dr_vat_due, 0);
    --                                    v_dr_admin_fee_vat_incl :=
    --                                         NVL (v_admfee, 0)
    --                                       + NVL (v_admfee_wht, 0);
    --                                 EXCEPTION
    --                                    WHEN NO_DATA_FOUND
    --                                    THEN
    --                                       NULL;
    --                                 END;
    --                              WHEN OTHERS
    --                              THEN
    --                                 raise_application_error (-20001,
    --                                                          SQLERRM (SQLCODE)
    --                                                         );
    --                           END;
    --
    --                           IF NVL (v_param, 'N') = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'N'
    --                           THEN
    --                              IF ABS (v_bal_amt) >
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0);
    --                              ELSE
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --
    --                              /*
    --                              Handle net of commission here
    --                              If the receipt is not direct, and the amount is net of commission,
    --                              compute how much commission that has been withheld by the agent/broker,
    --                              process commission payment as paid outside the system up to fms.
    --                              this has to be parameterized
    --                              <Lewis to work on this!!!!!!!!!! for union>
    --
    --                              */
    --                              IF     NVL (v_net_com_param, 'N') = 'Y'
    --                                 AND v_rct_rec (j).rct_acct_type_id <> 'D'
    --                              THEN
    --                                 IF NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                         'N') = 'Y'
    --                                 THEN
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_dr_comm_due, 0)
    --                                                  - NVL (v_whtx, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * (  NVL (v_admfee, 0)
    --                                                  - NVL (v_admfee_wht, 0)
    --                                                 )
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 ELSE
    --                                    v_appr_comm :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_dr_comm_due, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                    v_appr_adm_fee :=
    --                                       ROUND
    --                                          ((  (  NVL
    --                                                    (v_tran_mapping (i).tmap_amount,
    --                                                     0
    --                                                    )
    --                                               * NVL (v_admfee, 0)
    --                                              )
    --                                            / v_bal_amt
    --                                           ),
    --                                           v_rnd
    --                                          );
    --                                 END IF;
    --
    --                                 v_comm_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_dr_comm_due,
    --                                        v_dr_vat_due,
    --                                        v_appr_comm,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'COM'
    --                                       );
    --
    --                                 IF NVL (v_appr_adm_fee, 0) <> 0
    --                                 THEN
    --                                    v_admin_fee_allocated :=
    --                                       gis_accounts_utilities.update_commission
    --                                          (v_mtran_no,
    --                                           v_tran_mapping (i).tmap_mtran_ref_no,
    --                                           NVL
    --                                              (v_dr_mtran_no,
    --                                               v_tran_mapping (i).tmap_mtran_no
    --                                              ),
    --                                           v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                           v_admfee,
    --                                           v_dr_vat_due,
    --                                           v_appr_adm_fee,
    --                                           v_brn_code,
    --                                           v_agnt_code,
    --                                           v_rct_rec (j).rct_cur_code,
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inc_comm,
    --                                               'Y'
    --                                              ),
    --                                           NVL
    --                                              (v_tran_mapping (i).tmap_inv_vat,
    --                                               'Y'
    --                                              ),
    --                                           'ADM'
    --                                          );
    --                                 END IF;
    --
    --                                 --raise_error(v_admin_fee_allocated);
    --                                 IF     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ) = 'N'
    --                                    AND NVL (v_comm_allocated, 0) != 0
    --                                 THEN
    --                                    gis_accounts_utilities.auth_comm_pymnts
    --                                       (v_mtran_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_agnt_code,
    --                                        'CHQ',
    --                                        'N',
    --                                        tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'N'
    --                                            )
    --                                       );
    --                                 END IF;
    --                              END IF;
    --                           ELSIF     NVL (v_param, 'N') = 'N'
    --                                 AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_bal_amt) =
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                              THEN
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      NVL (v_tran_mapping (i).tmap_amount, 0)
    --                                    - v_appr_adm_fee;
    --                              ELSE
    --                                 v_appr_comm :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_dr_comm_due
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_appr_adm_fee :=
    --                                    ROUND
    --                                       ((  (  NVL
    --                                                 (v_tran_mapping (i).tmap_amount,
    --                                                  0
    --                                                 )
    --                                            / v_amt_to_com
    --                                           )
    --                                         * v_admfee
    --                                        ),
    --                                        v_rnd
    --                                       );
    --                                 v_allocate_amt :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_comm;
    --                                 v_allocate_adm_fee :=
    --                                      ABS (NVL (v_tran_mapping (i).tmap_amount,
    --                                                0
    --                                               )
    --                                          )
    --                                    - v_appr_adm_fee;
    --                              END IF;
    --
    --                              IF ABS (v_bal_amt) < NVL (v_allocate_amt, 0)
    --                              THEN
    --                                 v_allocate_amt := ABS (v_bal_amt);
    --                              END IF;
    --
    --                              IF ABS (v_bal_amt) < NVL (v_allocate_adm_fee, 0)
    --                              THEN
    --                                 v_allocate_adm_fee := ABS (v_bal_amt);
    --                              END IF;
    --                           END IF;
    --
    ----                       raise_error ('V_RCT_MAPPING ='||v_tran_mapping (1).tmap_rct_type||' AMOUNT;'||v_allocate_amt||'Balance:'||v_bal_amt||'Param:'||v_appr_comm);
    --                           IF NVL (v_allocate_amt, 0) <> 0
    --                           THEN
    --                              BEGIN
    --                                 gis_accounts_utilities.knock_trans
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_rct_rec (j).rct_date,
    --                                     v_allocate_amt
    --                                    );
    --                              EXCEPTION
    --                                 WHEN OTHERS
    --                                 THEN
    --                                    raise_error
    --                                             (   'Error:- Erick was here....'
    --                                              || v_mtran_no
    --                                             );
    --                              END;
    --                           END IF;
    --
    --                           --************MOVED TOWARDS END OF PROC  MASINDE
    --                           /* gis_accounts_utilities.update_coin_payments(v_mtran_no,
    --                                                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                                                        NVL(v_dr_mtran_no,v_tran_mapping (i).tmap_mtran_no),
    --                                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                                                        NVL (v_tran_mapping (i).tmap_amount, 0),
    --                                                                        v_brn_code,
    --                                                                        v_agnt_code,
    --                                                                        v_rct_rec (j).rct_cur_code
    --                                                                        );*/
    --                           v_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_amt;
    --                           v_adm_fee_diff :=
    --                                ABS (NVL (v_tran_mapping (i).tmap_amount, 0))
    --                              - v_allocate_adm_fee;
    --
    --                           IF     v_dr_comm_vat_incl != 0
    --                              AND v_diff > 0
    --                              AND v_tran_mapping (i).tmap_inc_comm = 'Y'
    --                           THEN
    --                              IF ABS (v_diff) > NVL (v_dr_comm_vat_incl, 0)
    --                              THEN
    --                                 v_comm_alloc_amt :=
    --                                                  NVL (v_dr_comm_vat_incl, 0);
    --                              ELSE
    --                                 v_comm_alloc_amt := ABS (v_diff);
    --                              END IF;
    --
    --                              --raise_error(v_dr_comm_vat_incl||';'||v_diff);
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_dr_comm_due,
    --                                     v_dr_vat_due,
    --                                     v_diff,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );
    --                              v_diff :=
    --                                    NVL (v_diff, 0)
    --                                    - NVL (v_comm_allocated, 0);
    --
    --                              --RAISE_ERROR(v_comm_allocated||';'||v_admfee||';'||v_dr_vat_due||';'||v_diff);
    --                              IF NVL (v_diff, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_diff,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;
    --
    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           ELSIF     NVL (v_tran_type, 'NONE') = 'BAL'
    --                                 AND NVL (v_tran_mapping (i).tmap_comm_alloc,
    --                                          0
    --                                         ) != 0
    --                           THEN
    --                              v_comm_alloc_amt :=
    --                                  NVL (v_tran_mapping (i).tmap_comm_alloc, 0);
    --
    --                              UPDATE gin_master_transactions
    --                                 SET mtran_commission =
    --                                          NVL (mtran_commission, 0)
    --                                        +   DECODE
    --                                                (SIGN (NVL (mtran_commission,
    --                                                            0
    --                                                           )
    --                                                      ),
    --                                                 -1, -1,
    --                                                 1
    --                                                )
    --                                          * v_comm_alloc_amt
    --                               WHERE mtran_no =
    --                                              v_tran_mapping (i).tmap_mtran_no;
    --
    --                              v_comm_allocated :=
    --                                 gis_accounts_utilities.update_commission
    --                                    (v_mtran_no,
    --                                     v_tran_mapping (i).tmap_mtran_ref_no,
    --                                     NVL (v_dr_mtran_no,
    --                                          v_tran_mapping (i).tmap_mtran_no
    --                                         ),
    --                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                     v_comm_alloc_amt,
    --                                     NULL,                    --v_due_vat_amt,
    --                                     v_comm_alloc_amt,
    --                                     v_brn_code,
    --                                     v_agnt_code,
    --                                     v_rct_rec (j).rct_cur_code,
    --                                     NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                          'Y'
    --                                         ),
    --                                     NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                          'Y'),
    --                                     'COM'
    --                                    );
    --
    --                              IF NVL (v_appr_adm_fee, 0) <> 0
    --                              THEN
    --                                 v_admin_fee_allocated :=
    --                                    gis_accounts_utilities.update_commission
    --                                       (v_mtran_no,
    --                                        v_tran_mapping (i).tmap_mtran_ref_no,
    --                                        NVL (v_dr_mtran_no,
    --                                             v_tran_mapping (i).tmap_mtran_no
    --                                            ),
    --                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                        v_admfee,
    --                                        v_dr_vat_due,
    --                                        v_appr_adm_fee,
    --                                        v_brn_code,
    --                                        v_agnt_code,
    --                                        v_rct_rec (j).rct_cur_code,
    --                                        NVL (v_tran_mapping (i).tmap_inc_comm,
    --                                             'Y'
    --                                            ),
    --                                        NVL (v_tran_mapping (i).tmap_inv_vat,
    --                                             'Y'
    --                                            ),
    --                                        'ADM'
    --                                       );
    --                              END IF;
    --
    --                              gin_accounts_pkg.create_comm_rqstion
    --                                                                  (v_mtran_no,
    --                                                                   v_user_name
    --                                                                  );
    --                           END IF;
    --
    --                           ----**************GENERATE COINURANCE PAYMTS
    --                           --
    --                           gis_accounts_utilities.update_coin_payments
    --                                   (v_mtran_no,
    --                                    v_tran_mapping (i).tmap_mtran_ref_no,
    --                                    NVL (v_dr_mtran_no,
    --                                         v_tran_mapping (i).tmap_mtran_no
    --                                        ),
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                    v_allocate_amt,
    --                                    v_comm_allocated,
    --                                    v_brn_code,
    --                                    v_agnt_code,
    --                                    v_rct_rec (j).rct_cur_code,
    --                                    v_tran_mapping (i).tmap_inc_comm,
    --                                    NVL (v_tran_mapping (i).tmap_inv_vat, 'Y')
    --                                   );
    --                           v_amount :=
    --                                     v_amount + v_tran_mapping (i).tmap_amount;
    --                        END IF;
    --
    --                        BEGIN
    --                           gis_accounts_utilities.validate_allocations
    --                                        (v_mtran_no,
    --                                         NVL (v_dr_mtran_no,
    --                                              v_tran_mapping (i).tmap_mtran_no
    --                                             )
    --                                        );
    --                        EXCEPTION
    --                           WHEN OTHERS
    --                           THEN
    --                              raise_error
    --                                 ('Error occured on validation of Receipt allocations.'
    --                                 );
    --                        END;
    --                     -- Gis_Accounts_Utilities.allocate_pdr_rcpt(v_mtran_no,v_tran_mapping (i).tmap_mtran_no,v_tran_mapping (i).tmap_amount);
    --                     ELSIF     NVL (v_tran_mapping (i).tmap_rct_type, 'DBT') IN
    --                                                                     ('RNRC')
    --                           AND NVL (v_interface_type, 'ACCRUAL') = 'CASH'
    --                     THEN
    --                        /*-- if the receipt amt is equal to fap, transfer transaction to uw, authorize and allocate */
    --                        gin_stp_pkg.auto_renew_prc
    --                                             (v_tran_mapping (i).tmap_mtran_no
    --                                             );
    --                     END IF;
    --                  END IF;
    --               --                  EXCEPTION
    --               --                     WHEN OTHERS
    --               --                     THEN
    --               --                        raise_error (   ' FOR Batch no '
    --               --                                     || v_tran_mapping (i).tmap_pol_batch_no
    --               --                                    );
    --               END;
    --            END LOOP;
    --         ELSE
    --            BEGIN
    --               SELECT mtran_no, mtran_ref_no
    --                 INTO v_prev_mtran_no, v_prev_mtran_ref_no
    --                 FROM gin_master_transactions
    --                WHERE mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
    --                  AND mtran_client_code = v_rct_rec (j).rct_act_code
    --                  AND mtran_client_type = v_rct_rec (j).rct_acct_type_id
    --                  AND mtran_rct_code = v_rct_rec (j).rct_no;
    --            EXCEPTION
    --               WHEN TOO_MANY_ROWS
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'DUPLICATE RECEIPT FOUND..:-'
    --                                           || v_rct_rec (j).rct_brh_rct_code
    --                                           || ' - '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20001,
    --                                           'ERROR..:-' || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    ----        RAISE_ERROR('v_prev_mtran_no = '||v_prev_mtran_no);
    --            IF    NVL (v_rct_rec (j).rct_client_charge_amount, 0) IS NULL
    --               OR NVL (v_rct_rec (j).rct_client_charge_amount, 0) != 0
    --            THEN
    --               INSERT INTO gin_master_transactions
    --                           (mtran_no,
    --                            mtran_doc_date, mtran_date,
    --                            mtran_ref_no,
    --                            mtran_other_ref, mtran_tran_type, mtran_dc,
    --                            mtran_control_acc,
    --                            mtran_client_type,
    --                            mtran_client_code,
    --                            mtran_amount,
    --                            mtran_balance,
    --                            mtran_authorised,
    --                            mtran_net_amt,
    --                            mtran_posting_date, mtran_ggt_tran_no,
    --                            mtran_prp_code, mtran_btr_trans_code,
    --                            mtran_origin, mtran_cur_code,
    --                            mtran_cur_symbol,
    --                            mtran_brn_code,
    --                            mtran_brn_sht_desc,
    --                            mtran_posted_by,
    --                            mtran_cur_rate,
    --                            mtran_client_polcy_no,
    --                            mtran_rct_code,
    --                            mtran_narrations,
    --                            mtran_rct_paymt_mode,
    --                            mtran_rct_paymt_memo,
    --                            mtran_agn_discount,
    --                            mtran_authorised_by,
    --                            mtran_date_authorized
    --                           )
    --                    VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                       || gin_mtran_no_seq.NEXTVAL
    --                                      ),
    --                            v_rct_rec (j).rct_date, TRUNC (SYSDATE),
    --                            v_rct_rec (j).rct_brh_rct_code || '/CN',
    --                            v_rct_rec (j).rct_paymt_memo, 'BNK', 'D',
    --                            v_rct_rec (j).rct_act_sht_desc,
    --                            v_rct_rec (j).rct_acct_type_id,
    --                            v_rct_rec (j).rct_act_code,
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            'Y',
    --                            ABS (v_rct_rec (j).rct_client_charge_amount),
    --                            v_rct_rec (j).rct_date, v_ggt_trans_no,
    --                            NULL, 'BNK',
    --                            'A', v_rct_rec (j).rct_cur_code,
    --                            tqc_interfaces_pkg.currencysymbol
    --                                                    (v_rct_rec (j).rct_cur_code
    --                                                    ),
    --                            v_rct_rec (j).rct_brh_code,
    --                            fms_interfaces_pkg.brh_name
    --                                                   (v_rct_rec (j).rct_brh_code,
    --                                                    'S'
    --                                                   ),
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_cur_rate,
    --                            gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
    --                            v_rct_rec (j).rct_no,
    --                            'CHARGES UPON CANCELLATION',
    --                            v_rct_rec (j).rct_paymt_mode,
    --                            v_rct_rec (j).rct_paymt_memo,
    --                            v_rct_rec (j).rct_discount,
    --                            tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),
    --                            v_rct_rec (j).rct_date
    --                           );
    --            END IF;
    --
    --            gis_accounts_utilities.undo_pdr_rcpt (v_prev_mtran_no);
    --            -- UNDOING PDR ALLOACTIONS
    --            gis_accounts_utilities.undo_trans_allocation (v_prev_mtran_no,
    --                                                          NULL,
    --                                                          'Y'
    --                                                         );
    --            gis_accounts_utilities.undo_pa_rcpt (v_prev_mtran_no,
    --                                                 v_mtran_no,
    --                                                 NULL
    --                                                );
    --
    --            /* MOVED TO gis_accounts_utilities.undo_trans_allocation PROCEDURE
    --            FOR i IN 1 .. v_tran_mapping.COUNT  LOOP
    --            -- RAISE_ERROR('v_prev_mtran_no'||v_prev_mtran_no);
    --                IF NVL(v_net_com_param,'N') = 'Y'
    --                  AND v_rct_rec (j).rct_acct_type_id <> 'D' THEN
    --                         Gis_Accounts_Utilities.auth_comm_pymnts (
    --                                                  v_prev_mtran_no,
    --                                                  NULL,-- v_mtran_no,
    --                                                  NULL,
    --                                                  'CHQ',
    --                                                  'N',
    --                                                  tqc_interfaces_pkg.username (v_rct_rec (j).rct_captured_by ),
    --                                                  NVL(v_tran_mapping (i).tmap_inv_vat,'N')
    --                                               );
    --                END IF;
    --             END LOOP; */
    --            SELECT ABS (NVL (mtran_balance, 0)),
    --                     ABS (NVL (mtran_commission, 0))
    --                   - (  ABS (NVL (mtran_comm_paid, 0))
    --                      + ABS (NVL (mtran_comm_payable, 0))
    --                     )
    --              INTO v_bal_amt,
    --                   v_dr_comm_due
    --              FROM gin_master_transactions
    --             WHERE mtran_no = v_prev_mtran_no;
    ----RAISE_ERROR('v_bal_amt = '||v_bal_amt||' v_dr_comm_due = '||v_dr_comm_due);
    --            IF ABS (v_bal_amt) > NVL (v_rct_rec (j).rct_amount, 0)
    --            THEN
    --               v_allocate_amt := NVL (v_rct_rec (j).rct_amount, 0);
    --            ELSE
    --               v_allocate_amt := ABS (v_bal_amt);
    --            END IF;
    --
    --            gis_accounts_utilities.knock_trans
    --                                            (v_prev_mtran_no,
    --                                             v_prev_mtran_ref_no,
    --                                             v_mtran_no,
    --                                                v_rct_rec (j).rct_brh_rct_code
    --                                             || '/CN',
    --                                             v_rct_rec (j).rct_date,
    --                                             v_allocate_amt
    --                                            );
    ----           RAISE_ERROR('FAILS HERE');
    --         END IF;
    --      END LOOP;
    --   ELSIF NVL (v_rct_type, 'XXX') = ('TRVD')
    --   THEN                                             -- TRAVEL DEPOSIT RECEIPTS
    --      -- Introducing a table to hold deposit
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            INSERT INTO gin_receipt_deposits
    --                        (rde_code,
    --                         rde_clnt_code,
    --                         rde_drcr,
    --                         rde_pol_policy_no,
    --                         rde_amount, rde_allocated_amt,
    --                         rde_balance,
    --                         rde_received_from,
    --                         rde_captured_by,
    --                         rde_captured_date, rde_remarks,
    --                         rde_rct_no, rde_brh_code,
    --                         rde_ggt_trans_no, rde_date,
    --                         rde_receipt_no, rde_tran_type,
    --                         rde_cancelled,
    --                         rde_cancel_dt,
    --                         rde_cancel_by
    --                        )
    --                 VALUES (TO_NUMBER (   TO_CHAR (SYSDATE, 'RRRR')
    --                                    || gin_rde_code_seq.NEXTVAL
    --                                   ),
    --                         v_rct_rec (j).rct_act_code,
    --                         DECODE (v_cancel, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         v_tran_mapping (i).tmap_amount, 0,
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         v_rct_rec (j).rct_no, v_rct_rec (j).rct_brh_code,
    --                         NULL, SYSDATE,
    --                         v_tran_mapping (i).tmap_mtran_ref_no, 'TRVL',
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         DECODE (v_cancel, 'Y', SYSDATE, NULL),
    --                         DECODE (v_cancel,
    --                                 'Y', v_rct_rec (j).rct_captured_by,
    --                                 NULL
    --                                )
    --                        );
    --         END LOOP;
    --      END LOOP;
    --   ELSE
    --      FOR j IN 1 .. v_rct_rec.COUNT
    --      LOOP
    --         FOR i IN 1 .. v_tran_mapping.COUNT
    --         LOOP
    --            IF NVL (v_salvage_rct_param, 'N') != 'Y'
    --            THEN
    --               IF NVL (v_rct_rec (j).rct_acct_type_id, 'XX') = 'SV'
    --               THEN
    --                  v_clm_os_reserve :=
    --                     gin_stp_claims_pkg.get_clm_os_reserve
    --                                  (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                                   'Y'
    --                                  );
    --
    --                  IF NVL (v_clm_os_reserve, 0) != 0
    --                  THEN
    --                     raise_error
    --                        ('Error- Full Claim Payment NOT DONE, Cannot  Continue'
    --                        );
    --                  END IF;
    --               END IF;
    --            END IF;
    --
    --            --RAISE_APPLICATION_ERROR (-20001,'V_MTRAN_REF = '||V_TRAN_MAPPING(i).TMAP_CHECK_MTRAN_REF_NO||';'||v_rct_rec (j).rct_no);
    --            IF v_cancel = 'Y'
    --            THEN
    --               SELECT COUNT ('X')
    --                 INTO v_rec_count
    --                 FROM gin_recovery_rcts
    --                WHERE rrc_receipt_no = v_rct_rec (j).rct_no;
    --
    --               IF v_rec_count = 0
    --               THEN
    --                  v_cancel_rct := 'N';
    --               END IF;
    --            END IF;
    --
    --            SELECT NVL (MAX (rrc_code), 0) + 1
    --              INTO v_rrc_code
    --              FROM gin_recovery_rcts;
    --
    --           ---RAISE_ERROR('mtran_ref_no-'||v_tran_mapping (i).tmap_check_mtran_ref_no||' = '|| 'mtran_no-'||v_tran_mapping (i).tmap_mtran_no);
    --            INSERT INTO gin_recovery_rcts
    --                        (rrc_code,
    --                         rrc_claim_no,
    --                         rrc_recovery_type,
    --                         rrc_drcr,
    --                         rrc_amount,
    --                         rrc_received_from,
    --                         rrc_received_by,
    --                         rrc_receved_date, rrc_remarks,
    --                         rrc_rct_no,
    --                         rrc_brh_code, rrc_receipt_no,
    --                         rrc_status
    --                        )
    --                 VALUES (v_rrc_code,
    --                         v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --RRC_CLAIM_NO,
    --                         v_rct_rec (j).rct_acct_type_id,
    --                         DECODE (v_cancel_rct, 'Y', 'D', 'N', 'C'),
    --                         v_tran_mapping (i).tmap_amount,
    --                         v_rct_rec (j).rct_paid_by,
    --                         v_rct_rec (j).rct_captured_by,
    --                         v_rct_rec (j).rct_date, v_rct_rec (j).rct_desc,
    --                         DECODE (v_cancel_rct,
    --                                 'N', v_tran_mapping (i).tmap_mtran_ref_no,
    --                                 v_tran_mapping (i).tmap_mtran_ref_no || '/CN'
    --                                ),
    --                         v_rct_rec (j).rct_brh_code, v_rct_rec (j).rct_no,
    --                         DECODE (v_cancel_rct, 'Y', 'C', 'N', 'A')
    --                        );
    ----            raise_error(v_tran_mapping (i).tmap_mtran_no);
    --            begin
    --            UPDATE gin_clm_salvages
    --               --SET CSD_BUYER=v_rct_rec (j).rct_paid_by,
    --            SET csd_buyer =
    --                   (SELECT rct_received_from
    --                      FROM fms_receipts
    --                     WHERE RCT_NO =v_rct_rec (j).rct_no),
    --                csd_sold = 'Y',
    --                csd_approved_value = v_tran_mapping (i).tmap_amount,
    --                csd_status = 'B'
    --             WHERE csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no
    --                          and CSD_CLMP_CODE=v_tran_mapping (i).tmap_mtran_no;
    --             exception
    --                when others then
    --                raise_error('Error updating salvage buyer details');
    --             end;
    ----raise_error('here after ='||v_tran_mapping (i).tmap_mtran_no);
    --            -- PROCESS SALVAGE TRANSACTIONS
    --            BEGIN
    --               SELECT clmp_limit_amt, clmp_per_pt_code
    --                 INTO v_limit_amt, v_per_pt_code
    --                 FROM gin_claim_perils
    --                WHERE clmp_code = v_tran_mapping (i).tmap_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                          (   'Error determining claim peril...tmap_mtran_no'
    --                           || v_tran_mapping (i).tmap_mtran_no
    --                          );
    --            END;
    --
    --            SELECT DECODE (v_rct_rec (j).rct_acct_type_id, 'SV', 'CS', 'XS','XS','CR')
    --              INTO v_trans_type
    --              FROM DUAL;
    --
    --            SELECT DECODE (v_trans_type, 'CS', 'S', 'XS','E','R')
    --              INTO v_rec_tran_type
    --              FROM DUAL;
    --
    --            --raise_error('v_rct_rec (j).rct_acct_type_id'||v_rct_rec (j).rct_acct_type_id);
    --            IF v_trans_type = 'CS'
    --            THEN
    --               BEGIN
    --                  SELECT COUNT (*)
    --                    INTO v_cnt
    --                    FROM gin_clm_salvages
    --                   WHERE csd_clmp_code = v_tran_mapping (i).tmap_mtran_no
    --                     AND csd_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     NULL;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR FETCHING SALVAGE DETAILS...');
    --               END;
    --            ELSE
    --               v_cnt := 1;
    --            END IF;
    --
    --
    --            IF NVL (v_cnt, 0) > 0
    --            THEN
    --             --  RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no);
    ----              RAISE_eRROR('v_clmt_code='||v_clmt_code||'v_cnt='||v_cnt||'claim='||v_tran_mapping (i).tmap_check_mtran_ref_no);
    --               BEGIN
    --
    --                  SELECT reg_clmt_code, reg_third_party
    --                    INTO v_clmt_code, v_clmnt_type
    --                    FROM gin_rgstd_claimants, tqc_clients
    --                   WHERE reg_third_party = 'S'
    --                     AND reg_cld_code = clnt_code
    --                     AND reg_cmb_claim_no =
    --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                   gin_stp_claims_pkg.getregclaimantdetails (v_tran_mapping (i).tmap_check_mtran_ref_no,v_clmt_code, v_clmnt_type);
    ----                   RAISE_ERROR('CLAIM NUMBER11 ='||v_tran_mapping (i).tmap_check_mtran_ref_no||'v_clmt_code='||v_clmt_code);
    ----                     BEGIN
    ----                        SELECT cmb_prp_code, 'S'
    ----                          INTO v_clmt_code, v_clmnt_type
    ----                          FROM gin_claim_master_bookings
    ----                         WHERE cmb_claim_no =
    ----                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
    ----
    ----                     EXCEPTION
    ----                        WHEN OTHERS
    ----                        THEN
    ----                           raise_error
    ----                                   (   'Error determining claimant 1='
    ----                                    || v_tran_mapping (i).tmap_check_mtran_ref_no
    ----                                   );
    ----                     END;
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'Error determining claimant='
    --                                  || v_tran_mapping (i).tmap_check_mtran_ref_no
    --                                 );
    --               END;
    --               -- RAISE_ERROR('HERE='||(v_tran_mapping (i).tmap_amount)||';'||v_limit_amt);
    --               IF NVL (v_tran_mapping (i).tmap_amount, 0) = 0
    --               THEN
    --                  raise_error ('Error:- Receipt amount not provided...');
    --               END IF;
    ----RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no||'v_clmt_code='||v_clmt_code);
    --               IF v_cancel != 'Y'
    --               THEN
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clm_salv_recovry
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    ----                  EXCEPTION
    ----                     WHEN OTHERS
    ----                     THEN
    ----                        raise_error ('Error...');
    --                  -- creating claim transaction
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     gin_claim_utilities.auto_create_clmsalv_rec_contra
    --                        (v_tran_mapping (i).tmap_check_mtran_ref_no,
    --                         --v_clmno IN VARCHAR2,
    --                         NULL,                         --v_trans_no IN NUMBER,
    --                         TRUNC (SYSDATE),
    --                         --v_date IN DATE DEFAULT TRUNC(SYSDATE),
    --                         v_trans_type,             --v_trans_type IN VARCHAR2,
    --                         v_clmt_code,                 --v_clmt_code in number,
    --                         NULL,                        --v_clmr_code IN NUMBER,
    --                         NVL (v_rct_rec (j).rct_paymt_memo,
    --                              v_rct_rec (j).rct_desc
    --                             ),
    --                         --v_description in  varchar2, -- salvage description or recovery description
    --                         SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
    --                         --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
    --                         v_rec_tran_type,
    --                         --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
    --                         v_rct_rec (j).rct_desc,      --v_remarks IN VARCHAR2,
    --                         'A',                        --v_add_edit IN VARCHAR2,
    --                         v_tran_mapping (i).tmap_mtran_no,
    --                         --v_per_pt_code,--v_per_code IN NUMBER,
    --                         v_tran_mapping (i).tmap_amount,
    --                         --v_per_amount IN NUMBER,
    --                         tqc_interfaces_pkg.username
    --                                                 (v_rct_rec (j).rct_captured_by
    --                                                 ),      --v_user IN VARCHAR2,
    --                         v_ggt_trans_no,          --v_new_trans_no OUT NUMBER,
    --                         v_clmnt_type,             --v_clmnt_type IN VARCHAR2,
    --                         v_rrc_code,
    --                         --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
    --                         v_rct_rec (j).rct_no
    --                          --v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
    --                        );
    --                  --                          EXCEPTION
    --                  --                            WHEN OTHERS THEN
    --                  --                                RAISE_ERROR('Error...');-- creating claim transaction
    --                  END;
    --               END IF;
    --            ELSE
    --               NULL;
    --            -- CREATE A TICKET TO BE ASSIGNED TO DEFAULT CLAIMS USER, TO PROCESS THE SALVAGE TRANSACTION FROM THE RECEIPT CREATED.....SOLO
    --            END IF;
    --         END LOOP;
    --      END LOOP;
    --   END IF;
    ----   EXCEPTION
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                  'POSTING GIS 2RCT :-' || SQLERRM (SQLCODE)
    ----                                 );
    --END post_gis_rct;
    PROCEDURE post_gis_rct (                             ----28/jUNE/2019-----
        v_rct_code                     NUMBER,
        v_rct_rec                      fms_interfaces_pkg.type_receipts_table,
        v_tran_mapping          IN OUT fms_interfaces_pkg.tran_mapping_type,
        v_rct_type                     VARCHAR2,
        v_user_name                    VARCHAR2,
        v_cancel                       VARCHAR2 DEFAULT 'N',
        v_mtran_ref_no                 VARCHAR2 DEFAULT NULL,
        v_reasons_for_failure          VARCHAR2 DEFAULT NULL)
    IS
        v_errmsg                  VARCHAR2 (1500);
        v_count                   NUMBER := 0;
        v_ggt_trans_no            NUMBER;
        v_mtran_no                NUMBER;
        v_amount                  NUMBER := 0;
        v_rrc_code                NUMBER;
        v_rec_count               NUMBER;
        v_cancel_rct              VARCHAR2 (1) := v_cancel;
        v_allocate_amt            NUMBER := 0;
        v_bal_amt                 NUMBER := 0;
        v_dr_comm_due             NUMBER := 0;
        v_dr_comm_vat_incl        NUMBER := 0;
        v_diff                    NUMBER := 0;
        v_comm_alloc_amt          NUMBER := 0;
        v_brn_code                NUMBER;
        v_agnt_code               NUMBER;
        v_prev_mtran_no           NUMBER;
        v_prev_mtran_ref_no       VARCHAR2 (30);
        v_tran_type               VARCHAR2 (10);
        v_rnd                     NUMBER;
        v_bcur_rnd                NUMBER;
        v_cur_rate                NUMBER;
        v_param                   VARCHAR2 (5);
        v_appr_comm               NUMBER;
        v_amt_to_com              NUMBER;
        v_act_type_cnt            NUMBER;
        v_prp_code                NUMBER;
        v_per_pt_code             NUMBER;
        v_limit_amt               NUMBER;
        v_clmt_code               NUMBER;
        v_clmnt_type              VARCHAR2 (30);
        v_trans_type              VARCHAR2 (30);
        v_param_value             VARCHAR2 (30);
        v_cnt                     NUMBER;
        v_rec_tran_type           VARCHAR2 (30);
        v_interface_type          VARCHAR2 (10);
        v_allocate                VARCHAR2 (1);
        vuser                     VARCHAR2 (30);
        v_new_mtran_no            NUMBER;
        v_tmap_amt                NUMBER;
        v_pol_batch_no            NUMBER;
        v_trans_count             NUMBER;
        v_new_dr_no               VARCHAR2 (30);
        v_freq                    VARCHAR2 (10);
        v_dr_no                   NUMBER;
        v_new_pol_batch           NUMBER;
        v_dr_mtran_no             NUMBER;
        v_dr_mtran_ref_no         VARCHAR2 (30);
        v_salvage_rct_param       VARCHAR2 (1);
        v_clm_os_reserve          NUMBER;
        v_comm_allocated          NUMBER;
        v_dr_vat_due              NUMBER;
        v_prev_ggt_trans_no       NUMBER;
        v_whtx                    NUMBER;
        v_net_com_param           VARCHAR2 (1) := 'N';
        v_admfee                  NUMBER;
        v_admfee_wht              NUMBER;
        v_appr_adm_fee            NUMBER;
        v_allocate_adm_fee        NUMBER;
        v_admin_fee_allocated     NUMBER;
        v_adm_fee_diff            NUMBER;
        v_dr_admin_fee_vat_incl   NUMBER;
        v_admfee_alloc_amt        NUMBER := 0;

        CURSOR cur_commissions (v_prv_mtran_no IN NUMBER)
        IS
            SELECT *
              FROM gin_commission_pymts
             WHERE cop_cr_mtran_no = v_prv_mtran_no;
    BEGIN
        /*
        ************************************
        USE V_TRAN_MAPPING(i).TMAP_COMM_ALLOC
        **************************************
        */
        -- raise_error('v_rct_type '||v_rct_type);
        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'COMM_PAID_ON_FULL_DEBIT')
              INTO v_param
              FROM DUAL;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching commission payment parameter...');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'ALLOW_SALVAGE_WITHOUT_PYMT')
              INTO v_salvage_rct_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_salvage_rct_param := 'Y';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching Salvage  parameter...');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
              INTO v_net_com_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_net_com_param := 'N';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching net of commission parameter...');
        END;

        --      RAISE_ERROR('v_rct_type ='||v_rct_type||';;;'||v_mtran_ref_no);
        IF v_rct_type IN ('JV',
                          'DBT',
                          'PDR',
                          'DBTD',
                          'RNRC',
                          'QUOT')
        /*-- Introduced Dbtd -- Debit Draft Where The Debit Is Not Yet Authorized,
        And Rnrc Renewal Receipt Where The Records Are Still In The Renewal Working Area
        This will assist in determine how to manage the next move. ie. if the RNRC then check
        if its a full receipt and renew the policy. if DBTD, the policy is still in Draft hence do nothing...*/
        THEN
            SELECT ggt_trans_no_seq.NEXTVAL INTO v_ggt_trans_no FROM DUAL;

            INSERT INTO gin_gis_transactions (ggt_trans_no,
                                              ggt_btr_trans_code,
                                              ggt_done_by,
                                              ggt_done_date,
                                              ggt_uw_clm_tran,
                                              ggt_trans_date,
                                              ggt_effective_date)
                 VALUES (v_ggt_trans_no,
                         DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
                         v_user_name,
                         TRUNC (SYSDATE),
                         'A',
                         TRUNC (SYSDATE),
                         TRUNC (SYSDATE));

            FOR j IN 1 .. v_rct_rec.COUNT
            LOOP
                --RAISE_ERROR('v_rct_type:'||v_rct_type||';;'||v_rct_rec (j).rct_acct_type_id);
                IF v_rct_rec (j).rct_acct_type_id IN ('D')
                THEN
                    SELECT COUNT (1)
                      INTO v_act_type_cnt
                      FROM tqc_clients
                     WHERE     clnt_code = v_rct_rec (j).rct_act_code
                           AND clnt_sht_desc = v_rct_rec (j).rct_act_sht_desc;
                ELSIF v_rct_rec (j).rct_acct_type_id NOT IN ('D')
                THEN
                    SELECT COUNT (1)
                      INTO v_act_type_cnt
                      FROM tqc_agencies, tqc_account_types
                     WHERE     agn_act_code = act_code
                           AND agn_code = v_rct_rec (j).rct_act_code
                           AND agn_sht_desc = v_rct_rec (j).rct_act_sht_desc
                           AND act_type_id = v_rct_rec (j).rct_acct_type_id;
                END IF;

                --            RAISE_ERROR('HERE...TR...');
                IF v_act_type_cnt = 0
                THEN
                    raise_error (
                           'The account type='
                        || v_rct_rec (j).rct_acct_type_id
                        || ' and account code='
                        || v_rct_rec (j).rct_act_sht_desc
                        || ' do not match ...'
                        || ' v_rct_rec (j).rct_act_code  '
                        || v_rct_rec (j).rct_act_code);
                END IF;

                IF v_cancel = 'Y'
                THEN
                    -- MAKE SURE THAT THE RCT 2B CANCELLED ALREADY EXISTS
                    SELECT COUNT ('X')
                      INTO v_rec_count
                      FROM gin_master_transactions
                     WHERE     mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
                           AND mtran_rct_code = v_rct_rec (j).rct_no;

                    --RAISE_ERROR('v_rec_count = '||v_rec_count);
                    IF NVL (v_rec_count, 0) = 0
                    THEN  --DELETE THE  GIN_GIS_TRANSACTION REC CREATED ABOVE;
                        DELETE FROM gin_gis_transactions
                              WHERE ggt_trans_no = v_ggt_trans_no;

                        EXIT;
                    END IF;

                    BEGIN
                        v_pol_batch_no :=
                            v_tran_mapping (j).tmap_pol_batch_no;
                        update_transmittal_rct (
                            v_pol_batch_no,
                            v_tran_mapping (j).tmap_amount,
                            v_cancel_rct,
                            v_rct_type);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            NULL;
                    --                  raise_error
                    --                      (   'Error updating transmittal at cancellation rec...'
                    --                       || v_rct_type
                    --                       || v_pol_batch_no
                    --                      );
                    END;
                END IF;

                v_cur_rate :=
                    get_currexch_rate (v_rct_rec (j).rct_cur_code,
                                       v_rnd,
                                       v_bcur_rnd);

                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || gin_mtran_no_seq.NEXTVAL)
                  INTO v_mtran_no
                  FROM DUAL;

                --        RAISE_ERROR( 'MEMO=='||v_rct_rec (j).rct_paymt_memo||';'||v_rct_rec (j).rct_desc||';'||v_rct_rec (j).rct_paymt_mode);
                INSERT INTO gin_master_transactions (mtran_no,
                                                     mtran_doc_date,
                                                     mtran_date,
                                                     mtran_ref_no,
                                                     mtran_other_ref,
                                                     mtran_tran_type,
                                                     mtran_dc,
                                                     mtran_control_acc,
                                                     mtran_client_type,
                                                     mtran_client_code,
                                                     mtran_amount,
                                                     mtran_balance,
                                                     mtran_authorised,
                                                     mtran_net_amt,
                                                     mtran_posting_date,
                                                     mtran_ggt_tran_no,
                                                     mtran_prp_code,
                                                     mtran_btr_trans_code,
                                                     mtran_origin,
                                                     mtran_cur_code,
                                                     mtran_cur_symbol,
                                                     mtran_brn_code,
                                                     mtran_brn_sht_desc,
                                                     mtran_posted_by,
                                                     mtran_cur_rate,
                                                     mtran_client_polcy_no,
                                                     mtran_narrations,
                                                     mtran_rct_code,
                                                     mtran_rct_paymt_mode,
                                                     mtran_rct_paymt_memo,
                                                     mtran_agn_discount,
                                                     mtran_pol_batch_no,
                                                     mtran_other_ref1,
                                                     mtran_authorised_by,
                                                     mtran_date_authorized,
                                                     mtran_pol_ren_endos_no,
                                                     mtran_rct_type,
                                                     mtran_rct_imp_code)
                         --PRP CODE = DECODE( v_rct_rec(j).RCT_ACC_TYPE,'D',v_rct_rec(j).RCT_ACT_CODE,NULL)
                         VALUES (
                             v_mtran_no,
                             v_rct_rec (j).rct_date,
                             TRUNC (SYSDATE),
                             DECODE (
                                 v_cancel_rct,
                                 'Y', v_rct_rec (j).rct_brh_rct_code || '/CN',
                                 v_rct_rec (j).rct_brh_rct_code),
                             v_mtran_ref_no,   --v_rct_rec (j).rct_paymt_memo,
                             DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
                             DECODE (v_cancel_rct, 'Y', 'D', 'C'),
                             v_rct_rec (j).rct_act_sht_desc,
                             v_rct_rec (j).rct_acct_type_id,
                             v_rct_rec (j).rct_act_code,        --acc sht desc
                               DECODE (v_cancel_rct, 'Y', 1, -1)
                             * ABS (v_rct_rec (j).rct_amount),
                               DECODE (v_cancel_rct, 'Y', 1, -1)
                             * ABS (v_rct_rec (j).rct_amount),
                             'Y',
                               DECODE (v_cancel_rct, 'Y', 1, -1)
                             * ABS (v_rct_rec (j).rct_amount),
                             v_rct_rec (j).rct_date,
                             v_ggt_trans_no,
                             NULL,
                             DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
                             'A',
                             v_rct_rec (j).rct_cur_code,
                             tqc_interfaces_pkg.currencysymbol (
                                 v_rct_rec (j).rct_cur_code),
                             v_rct_rec (j).rct_brh_code,
                             fms_interfaces_pkg.brh_name (
                                 v_rct_rec (j).rct_brh_code,
                                 'S'),
                             tqc_interfaces_pkg.username (
                                 v_rct_rec (j).rct_captured_by),
                             v_cur_rate,
                             gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
                             v_rct_rec (j).rct_desc,
                             v_rct_rec (j).rct_no,
                             v_rct_rec (j).rct_paymt_mode,
                             v_rct_rec (j).rct_paymt_memo,
                             v_rct_rec (j).rct_discount,
                             gin_interfaces_pkg.getpolicybatchno (
                                 v_mtran_ref_no),
                             v_mtran_ref_no,
                             tqc_interfaces_pkg.username (
                                 v_rct_rec (j).rct_captured_by),
                             v_rct_rec (j).rct_date,
                             v_mtran_ref_no,
                             v_rct_rec (j).rct_creation_type,
                             v_rct_rec (j).rct_imp_code);

                v_brn_code := v_rct_rec (j).rct_brh_code;
                v_agnt_code := v_rct_rec (j).rct_act_code;

                --           RAISE_ERROR('TOP='||v_param||';'||v_appr_comm||';'||v_allocate_amt||';'||V_cancel||';'||v_mtran_ref_no);
                IF v_cancel != 'Y'
                THEN
                    FOR i IN 1 .. v_tran_mapping.COUNT
                    LOOP
                        BEGIN
                            -- raise_error('vat_amount'||v_tran_mapping (i).tmap_inv_vat);
                            v_pol_batch_no :=
                                v_tran_mapping (i).tmap_pol_batch_no;

                            --gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no);

                            -- raise_error('v_pol_batch_no='||v_pol_batch_no);
                            --                     BEGIN
                            --                        UPDATE gin_gis_transmitals
                            --                           SET ggts_rct_amt =
                            --                                  NVL (ggts_rct_amt, 0)
                            --                                  + DECODE (v_cancel_rct, 'Y', -1, 1)
                            --                                    * ABS (v_tran_mapping (i).tmap_amount)
                            --                         WHERE ggts_pol_batch_no = v_pol_batch_no;
                            --                     EXCEPTION
                            --                        WHEN OTHERS
                            --                        THEN
                            --                           NULL;
                            --                     END;
                            BEGIN
                                update_transmittal_rct (
                                    v_pol_batch_no,
                                    v_tran_mapping (i).tmap_amount,
                                    v_cancel_rct,
                                    v_rct_type);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Error updating transmittal rec...');
                            END;

                            BEGIN
                                SELECT pol_pro_interface_type,
                                       pol_freq_of_payment
                                  INTO v_interface_type, v_freq
                                  FROM gin_policies
                                 WHERE pol_batch_no = v_pol_batch_no;
                            EXCEPTION
                                WHEN NO_DATA_FOUND
                                THEN
                                    v_interface_type := 'ACCRUAL';
                                    v_freq := 'A';
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                           'Error getting policy details...'
                                        || 'v_pol_batch_no:'
                                        || v_pol_batch_no
                                        || 'v_mtran_ref_no:'
                                        || v_mtran_ref_no);
                            END;

                            IF NVL (v_interface_type, 'ACCRUAL') = 'CASH'
                            THEN
                                --                     RAISE_ERROR('v_tran_mapping (i).tmap_amount='||v_tran_mapping (i).tmap_amount);
                                BEGIN
                                    gis_accounts_utilities.auto_auth_transactions (
                                        v_pol_batch_no,
                                        v_tran_mapping (i).tmap_mtran_ref_no,
                                        --v_mtran_ref_no ,
                                        v_mtran_no,
                                        v_tran_mapping (i).tmap_amount,
                                        v_freq,
                                        v_rct_rec (j).rct_creation_type,
                                        v_rct_rec (j).rct_imp_code         --,
                                                                  --                                         v_reasons_for_failure
                                                                  );
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                            'Error processing cash basis transaction... ');
                                END;
                            ELSE
                                --                     raise_error(v_tran_mapping (i).tmap_mtran_no||';'||v_tran_mapping (i).tmap_mtran_no);
                                --                        raise_error(v_tran_mapping (i).tmap_mtran_no);
                                IF NVL (v_tran_mapping (i).tmap_rct_type,
                                        'DBT') IN
                                       ('DBT', 'JV', 'PDR')
                                THEN
                                    IF NVL (v_tran_mapping (i).tmap_amount,
                                            0) !=
                                       0
                                    THEN
                                        BEGIN
                                            SELECT ABS (
                                                       NVL (mtran_balance, 0)),
                                                     ABS (
                                                         NVL (
                                                             mtran_commission,
                                                             0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_comm_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_comm_payable,
                                                                0))),
                                                     ABS (
                                                         NVL (mtran_balance,
                                                              0))
                                                   + ABS (
                                                         NVL (
                                                             mtran_commission,
                                                             0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_comm_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_comm_payable,
                                                                0)))
                                                   + ABS (
                                                         NVL (mtran_lta_amt,
                                                              0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_lta_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_lta_payable,
                                                                0))),
                                                     ABS (NVL (mtran_vat, 0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_vat_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_vat_payable,
                                                                0))),
                                                   mtran_tran_type,
                                                     ABS (
                                                         NVL (mtran_whtx, 0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_whtx_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_whtx_payable,
                                                                0))),
                                                     ABS (
                                                         NVL (mtran_lta_amt,
                                                              0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_lta_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_lta_payable,
                                                                0))),
                                                     ABS (
                                                         NVL (mtran_lta_whtx,
                                                              0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_lta_whtx_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_lta_whtx_payable,
                                                                0)))
                                              INTO v_bal_amt,
                                                   v_dr_comm_due,
                                                   v_amt_to_com,
                                                   v_dr_vat_due,
                                                   v_tran_type,
                                                   v_whtx,
                                                   v_admfee,
                                                   v_admfee_wht
                                              FROM gin_master_transactions
                                             WHERE mtran_no =
                                                   v_tran_mapping (i).tmap_mtran_no;


                                            v_dr_comm_vat_incl :=
                                                  NVL (v_dr_comm_due, 0)
                                                + NVL (v_dr_vat_due, 0);
                                            v_dr_admin_fee_vat_incl :=
                                                  NVL (v_admfee, 0)
                                                + NVL (v_admfee_wht, 0);
                                        EXCEPTION
                                            WHEN NO_DATA_FOUND
                                            THEN
                                                BEGIN
                                                    SELECT ABS (
                                                               NVL (
                                                                   mtran_balance,
                                                                   0)),
                                                             ABS (
                                                                 NVL (
                                                                     mtran_commission,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_comm_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_comm_payable,
                                                                        0))),
                                                             ABS (
                                                                 NVL (
                                                                     mtran_balance,
                                                                     0))
                                                           + ABS (
                                                                 NVL (
                                                                     mtran_commission,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_comm_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_comm_payable,
                                                                        0)))
                                                           + ABS (
                                                                 NVL (
                                                                     mtran_lta_amt,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_lta_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_lta_payable,
                                                                        0))),
                                                           mtran_tran_type,
                                                           mtran_no,
                                                           mtran_ref_no,
                                                             ABS (
                                                                 NVL (
                                                                     mtran_vat,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_vat_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_vat_payable,
                                                                        0))),
                                                             ABS (
                                                                 NVL (
                                                                     mtran_whtx,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_whtx_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_whtx_payable,
                                                                        0))),
                                                             ABS (
                                                                 NVL (
                                                                     mtran_lta_amt,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_lta_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_lta_payable,
                                                                        0))),
                                                             ABS (
                                                                 NVL (
                                                                     mtran_lta_whtx,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_lta_whtx_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_lta_whtx_payable,
                                                                        0)))
                                                      INTO v_bal_amt,
                                                           v_dr_comm_due,
                                                           v_amt_to_com,
                                                           v_tran_type,
                                                           v_dr_mtran_no,
                                                           v_dr_mtran_ref_no,
                                                           v_dr_vat_due,
                                                           v_whtx,
                                                           v_admfee,
                                                           v_admfee_wht
                                                      FROM gin_master_transactions
                                                     WHERE     mtran_pol_batch_no =
                                                               v_tran_mapping (
                                                                   i).tmap_mtran_no
                                                           AND mtran_tran_type NOT IN
                                                                   ('RC',
                                                                    'CN')
                                                           AND mtran_dc = 'D'
                                                           AND mtran_client_type IN
                                                                   ('D',
                                                                    'A',
                                                                    'B',
                                                                    'FI',
                                                                    'IA');

                                                    v_dr_comm_vat_incl :=
                                                          NVL (v_dr_comm_due,
                                                               0)
                                                        + NVL (v_dr_vat_due,
                                                               0);
                                                    v_dr_admin_fee_vat_incl :=
                                                          NVL (v_admfee, 0)
                                                        + NVL (v_admfee_wht,
                                                               0);
                                                EXCEPTION
                                                    WHEN NO_DATA_FOUND
                                                    THEN
                                                        NULL;
                                                END;
                                            WHEN OTHERS
                                            THEN
                                                raise_application_error (
                                                    -20001,
                                                    SQLERRM (SQLCODE));
                                        END;

                                        IF NVL (v_param, 'N') = 'Y'
                                        THEN
                                            IF ABS (v_bal_amt) >
                                               NVL (
                                                   v_tran_mapping (i).tmap_amount,
                                                   0)
                                            THEN
                                                v_allocate_amt :=
                                                    NVL (
                                                        v_tran_mapping (i).tmap_amount,
                                                        0);
                                            ELSE
                                                v_allocate_amt :=
                                                    ABS (v_bal_amt);
                                            END IF;
                                        ELSIF     NVL (v_param, 'N') = 'N'
                                              AND v_tran_mapping (i).tmap_inc_comm =
                                                  'N'
                                        THEN
                                            IF ABS (v_bal_amt) >
                                               NVL (
                                                   v_tran_mapping (i).tmap_amount,
                                                   0)
                                            THEN
                                                v_allocate_amt :=
                                                    NVL (
                                                        v_tran_mapping (i).tmap_amount,
                                                        0);
                                            ELSE
                                                v_allocate_amt :=
                                                    ABS (v_bal_amt);
                                            END IF;

                                            /*
                                            Handle net of commission here
                                            If the receipt is not direct, and the amount is net of commission,
                                            compute how much commission that has been withheld by the agent/broker,
                                            process commission payment as paid outside the system up to fms.
                                            this has to be parameterized
                                            <Lewis to work on this!!!!!!!!!! for union>

                                            */
                                            IF     NVL (v_net_com_param, 'N') =
                                                   'Y'
                                               AND v_rct_rec (j).rct_acct_type_id <>
                                                   'D'
                                            THEN
                                                IF NVL (
                                                       v_tran_mapping (i).tmap_inv_vat,
                                                       'N') =
                                                   'Y'
                                                THEN
                                                    v_appr_comm :=
                                                        ROUND (
                                                            (  (  NVL (
                                                                      v_tran_mapping (
                                                                          i).tmap_amount,
                                                                      0)
                                                                * (  NVL (
                                                                         v_dr_comm_due,
                                                                         0)
                                                                   - NVL (
                                                                         v_whtx,
                                                                         0)))
                                                             / v_bal_amt),
                                                            v_rnd);
                                                    v_appr_adm_fee :=
                                                        ROUND (
                                                            (  (  NVL (
                                                                      v_tran_mapping (
                                                                          i).tmap_amount,
                                                                      0)
                                                                * (  NVL (
                                                                         v_admfee,
                                                                         0)
                                                                   - NVL (
                                                                         v_admfee_wht,
                                                                         0)))
                                                             / v_bal_amt),
                                                            v_rnd);
                                                ELSE
                                                    v_appr_comm :=
                                                        ROUND (
                                                            (  (  NVL (
                                                                      v_tran_mapping (
                                                                          i).tmap_amount,
                                                                      0)
                                                                * NVL (
                                                                      v_dr_comm_due,
                                                                      0))
                                                             / v_bal_amt),
                                                            v_rnd);
                                                    v_appr_adm_fee :=
                                                        ROUND (
                                                            (  (  NVL (
                                                                      v_tran_mapping (
                                                                          i).tmap_amount,
                                                                      0)
                                                                * NVL (
                                                                      v_admfee,
                                                                      0))
                                                             / v_bal_amt),
                                                            v_rnd);
                                                END IF;

                                                v_comm_allocated :=
                                                    gis_accounts_utilities.update_commission (
                                                        v_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_ref_no,
                                                        NVL (
                                                            v_dr_mtran_no,
                                                            v_tran_mapping (
                                                                i).tmap_mtran_no),
                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                        v_dr_comm_due,
                                                        v_dr_vat_due,
                                                        v_appr_comm,
                                                        v_brn_code,
                                                        v_agnt_code,
                                                        v_rct_rec (j).rct_cur_code,
                                                        NVL (
                                                            v_tran_mapping (
                                                                i).tmap_inc_comm,
                                                            'Y'),
                                                        NVL (
                                                            v_tran_mapping (
                                                                i).tmap_inv_vat,
                                                            'Y'),
                                                        'COM',
                                                        v_user_name);

                                                IF NVL (v_appr_adm_fee, 0) <>
                                                   0
                                                THEN
                                                    v_admin_fee_allocated :=
                                                        gis_accounts_utilities.update_commission (
                                                            v_mtran_no,
                                                            v_tran_mapping (
                                                                i).tmap_mtran_ref_no,
                                                            NVL (
                                                                v_dr_mtran_no,
                                                                v_tran_mapping (
                                                                    i).tmap_mtran_no),
                                                            v_tran_mapping (
                                                                i).tmap_check_mtran_ref_no,
                                                            v_admfee,
                                                            v_dr_vat_due,
                                                            v_appr_adm_fee,
                                                            v_brn_code,
                                                            v_agnt_code,
                                                            v_rct_rec (j).rct_cur_code,
                                                            NVL (
                                                                v_tran_mapping (
                                                                    i).tmap_inc_comm,
                                                                'Y'),
                                                            NVL (
                                                                v_tran_mapping (
                                                                    i).tmap_inv_vat,
                                                                'Y'),
                                                            'ADM',
                                                            v_user_name);
                                                END IF;

                                                --raise_error(v_admin_fee_allocated);
                                                IF     NVL (
                                                           v_tran_mapping (i).tmap_inc_comm,
                                                           'Y') =
                                                       'N'
                                                   AND NVL (v_comm_allocated,
                                                            0) !=
                                                       0
                                                THEN
                                                    gis_accounts_utilities.auth_comm_pymnts (
                                                        v_mtran_no,
                                                        NVL (
                                                            v_dr_mtran_no,
                                                            v_tran_mapping (
                                                                i).tmap_mtran_no),
                                                        v_agnt_code,
                                                        'CHQ',
                                                        'N',
                                                        tqc_interfaces_pkg.username (
                                                            v_rct_rec (j).rct_captured_by),
                                                        NVL (
                                                            v_tran_mapping (
                                                                i).tmap_inv_vat,
                                                            'N'));
                                                END IF;
                                            END IF;
                                        ELSIF     NVL (v_param, 'N') = 'N'
                                              AND v_tran_mapping (i).tmap_inc_comm =
                                                  'Y'
                                        THEN
                                            IF ABS (v_bal_amt) =
                                               NVL (
                                                   v_tran_mapping (i).tmap_amount,
                                                   0)
                                            THEN
                                                v_appr_comm :=
                                                    ROUND (
                                                        (  (  NVL (
                                                                  v_tran_mapping (
                                                                      i).tmap_amount,
                                                                  0)
                                                            / v_amt_to_com)
                                                         * v_dr_comm_due),
                                                        v_rnd);
                                                v_appr_adm_fee :=
                                                    ROUND (
                                                        (  (  NVL (
                                                                  v_tran_mapping (
                                                                      i).tmap_amount,
                                                                  0)
                                                            / v_amt_to_com)
                                                         * v_admfee),
                                                        v_rnd);
                                                v_allocate_amt :=
                                                      NVL (
                                                          v_tran_mapping (i).tmap_amount,
                                                          0)
                                                    - v_appr_comm;
                                                v_allocate_adm_fee :=
                                                      NVL (
                                                          v_tran_mapping (i).tmap_amount,
                                                          0)
                                                    - v_appr_adm_fee;
                                            ELSE
                                                v_appr_comm :=
                                                    ROUND (
                                                        (  (  NVL (
                                                                  v_tran_mapping (
                                                                      i).tmap_amount,
                                                                  0)
                                                            / v_amt_to_com)
                                                         * v_dr_comm_due),
                                                        v_rnd);
                                                v_appr_adm_fee :=
                                                    ROUND (
                                                        (  (  NVL (
                                                                  v_tran_mapping (
                                                                      i).tmap_amount,
                                                                  0)
                                                            / v_amt_to_com)
                                                         * v_admfee),
                                                        v_rnd);
                                                v_allocate_amt :=
                                                      ABS (
                                                          NVL (
                                                              v_tran_mapping (
                                                                  i).tmap_amount,
                                                              0))
                                                    - v_appr_comm;
                                                v_allocate_adm_fee :=
                                                      ABS (
                                                          NVL (
                                                              v_tran_mapping (
                                                                  i).tmap_amount,
                                                              0))
                                                    - v_appr_adm_fee;
                                            END IF;

                                            IF ABS (v_bal_amt) <
                                               NVL (v_allocate_amt, 0)
                                            THEN
                                                v_allocate_amt :=
                                                    ABS (v_bal_amt);
                                            END IF;

                                            IF ABS (v_bal_amt) <
                                               NVL (v_allocate_adm_fee, 0)
                                            THEN
                                                v_allocate_adm_fee :=
                                                    ABS (v_bal_amt);
                                            END IF;
                                        END IF;

                                        --                       raise_error ('V_RCT_MAPPING ='||v_tran_mapping (1).tmap_rct_type||' AMOUNT;'||v_allocate_amt||'Balance:'||v_bal_amt||'Param:'||v_appr_comm);
                                        IF NVL (v_allocate_amt, 0) <> 0
                                        THEN
                                            BEGIN
                                                gis_accounts_utilities.knock_trans (
                                                    v_mtran_no,
                                                    v_tran_mapping (i).tmap_mtran_ref_no,
                                                    NVL (
                                                        v_dr_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_no),
                                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                    v_rct_rec (j).rct_date,
                                                    v_allocate_amt);
                                            EXCEPTION
                                                WHEN OTHERS
                                                THEN
                                                    raise_error (
                                                           'Error:- Erick was here....'
                                                        || v_mtran_no);
                                            END;
                                        END IF;

                                        --************MOVED TOWARDS END OF PROC  MASINDE
                                        /* gis_accounts_utilities.update_coin_payments(v_mtran_no,
                                                                                     v_tran_mapping (i).tmap_mtran_ref_no,
                                                                                     NVL(v_dr_mtran_no,v_tran_mapping (i).tmap_mtran_no),
                                                                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                                                     NVL (v_tran_mapping (i).tmap_amount, 0),
                                                                                     v_brn_code,
                                                                                     v_agnt_code,
                                                                                     v_rct_rec (j).rct_cur_code
                                                                                     );*/
                                        v_diff :=
                                              ABS (
                                                  NVL (
                                                      v_tran_mapping (i).tmap_amount,
                                                      0))
                                            - v_allocate_amt;
                                        v_adm_fee_diff :=
                                              ABS (
                                                  NVL (
                                                      v_tran_mapping (i).tmap_amount,
                                                      0))
                                            - v_allocate_adm_fee;

                                        IF     v_dr_comm_vat_incl != 0
                                           AND v_diff > 0
                                           AND v_tran_mapping (i).tmap_inc_comm =
                                               'Y'
                                        THEN
                                            IF ABS (v_diff) >
                                               NVL (v_dr_comm_vat_incl, 0)
                                            THEN
                                                v_comm_alloc_amt :=
                                                    NVL (v_dr_comm_vat_incl,
                                                         0);
                                            ELSE
                                                v_comm_alloc_amt :=
                                                    ABS (v_diff);
                                            END IF;

                                            --raise_error(v_dr_comm_vat_incl||';'||v_diff);
                                            v_comm_allocated :=
                                                gis_accounts_utilities.update_commission (
                                                    v_mtran_no,
                                                    v_tran_mapping (i).tmap_mtran_ref_no,
                                                    NVL (
                                                        v_dr_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_no),
                                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                    v_dr_comm_due,
                                                    v_dr_vat_due,
                                                    v_diff,
                                                    v_brn_code,
                                                    v_agnt_code,
                                                    v_rct_rec (j).rct_cur_code,
                                                    NVL (
                                                        v_tran_mapping (i).tmap_inc_comm,
                                                        'Y'),
                                                    NVL (
                                                        v_tran_mapping (i).tmap_inv_vat,
                                                        'Y'),
                                                    'COM',
                                                    v_user_name);
                                            v_diff :=
                                                  NVL (v_diff, 0)
                                                - NVL (v_comm_allocated, 0);

                                            --RAISE_ERROR(v_comm_allocated||';'||v_admfee||';'||v_dr_vat_due||';'||v_diff);
                                            IF NVL (v_diff, 0) <> 0
                                            THEN
                                                v_admin_fee_allocated :=
                                                    gis_accounts_utilities.update_commission (
                                                        v_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_ref_no,
                                                        NVL (
                                                            v_dr_mtran_no,
                                                            v_tran_mapping (
                                                                i).tmap_mtran_no),
                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                        v_admfee,
                                                        v_dr_vat_due,
                                                        v_diff,
                                                        v_brn_code,
                                                        v_agnt_code,
                                                        v_rct_rec (j).rct_cur_code,
                                                        NVL (
                                                            v_tran_mapping (
                                                                i).tmap_inc_comm,
                                                            'Y'),
                                                        NVL (
                                                            v_tran_mapping (
                                                                i).tmap_inv_vat,
                                                            'Y'),
                                                        'ADM',
                                                        v_user_name);
                                            END IF;

                                            gin_accounts_pkg.create_comm_rqstion (
                                                v_mtran_no,
                                                v_user_name);
                                        ELSIF     NVL (v_tran_type, 'NONE') =
                                                  'BAL'
                                              AND NVL (
                                                      v_tran_mapping (i).tmap_comm_alloc,
                                                      0) !=
                                                  0
                                        THEN
                                            v_comm_alloc_amt :=
                                                NVL (
                                                    v_tran_mapping (i).tmap_comm_alloc,
                                                    0);

                                            UPDATE gin_master_transactions
                                               SET mtran_commission =
                                                         NVL (
                                                             mtran_commission,
                                                             0)
                                                       +   DECODE (
                                                               SIGN (
                                                                   NVL (
                                                                       mtran_commission,
                                                                       0)),
                                                               -1, -1,
                                                               1)
                                                         * v_comm_alloc_amt
                                             WHERE mtran_no =
                                                   v_tran_mapping (i).tmap_mtran_no;

                                            v_comm_allocated :=
                                                gis_accounts_utilities.update_commission (
                                                    v_mtran_no,
                                                    v_tran_mapping (i).tmap_mtran_ref_no,
                                                    NVL (
                                                        v_dr_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_no),
                                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                    v_comm_alloc_amt,
                                                    NULL,     --v_due_vat_amt,
                                                    v_comm_alloc_amt,
                                                    v_brn_code,
                                                    v_agnt_code,
                                                    v_rct_rec (j).rct_cur_code,
                                                    NVL (
                                                        v_tran_mapping (i).tmap_inc_comm,
                                                        'Y'),
                                                    NVL (
                                                        v_tran_mapping (i).tmap_inv_vat,
                                                        'Y'),
                                                    'COM',
                                                    v_user_name);

                                            IF NVL (v_appr_adm_fee, 0) <> 0
                                            THEN
                                                v_admin_fee_allocated :=
                                                    gis_accounts_utilities.update_commission (
                                                        v_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_ref_no,
                                                        NVL (
                                                            v_dr_mtran_no,
                                                            v_tran_mapping (
                                                                i).tmap_mtran_no),
                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                        v_admfee,
                                                        v_dr_vat_due,
                                                        v_appr_adm_fee,
                                                        v_brn_code,
                                                        v_agnt_code,
                                                        v_rct_rec (j).rct_cur_code,
                                                        NVL (
                                                            v_tran_mapping (
                                                                i).tmap_inc_comm,
                                                            'Y'),
                                                        NVL (
                                                            v_tran_mapping (
                                                                i).tmap_inv_vat,
                                                            'Y'),
                                                        'ADM',
                                                        v_user_name);
                                            END IF;

                                            gin_accounts_pkg.create_comm_rqstion (
                                                v_mtran_no,
                                                v_user_name);
                                        END IF;

                                        ----**************GENERATE COINURANCE PAYMTS
                                        --
                                        gis_accounts_utilities.update_coin_payments (
                                            v_mtran_no,
                                            v_tran_mapping (i).tmap_mtran_ref_no,
                                            NVL (
                                                v_dr_mtran_no,
                                                v_tran_mapping (i).tmap_mtran_no),
                                            v_tran_mapping (i).tmap_check_mtran_ref_no,
                                            v_allocate_amt,
                                            v_comm_allocated,
                                            v_brn_code,
                                            v_agnt_code,
                                            v_rct_rec (j).rct_cur_code,
                                            v_tran_mapping (i).tmap_inc_comm,
                                            NVL (
                                                v_tran_mapping (i).tmap_inv_vat,
                                                'Y'));
                                        v_amount :=
                                              v_amount
                                            + v_tran_mapping (i).tmap_amount;
                                    END IF;

                                    BEGIN
                                        gis_accounts_utilities.validate_allocations (
                                            v_mtran_no,
                                            NVL (
                                                v_dr_mtran_no,
                                                v_tran_mapping (i).tmap_mtran_no));
                                    EXCEPTION
                                        WHEN OTHERS
                                        THEN
                                            raise_error (
                                                'Error occured on validation of Receipt allocations.');
                                    END;
                                -- Gis_Accounts_Utilities.allocate_pdr_rcpt(v_mtran_no,v_tran_mapping (i).tmap_mtran_no,v_tran_mapping (i).tmap_amount);
                                ELSIF     NVL (
                                              v_tran_mapping (i).tmap_rct_type,
                                              'DBT') IN
                                              ('RNRC')
                                      AND NVL (v_interface_type, 'ACCRUAL') =
                                          'CASH'
                                THEN
                                    /*-- if the receipt amt is equal to fap, transfer transaction to uw, authorize and allocate */
                                    gin_stp_pkg.auto_renew_prc (
                                        v_tran_mapping (i).tmap_mtran_no);
                                END IF;
                            END IF;
                        --                  EXCEPTION
                        --                     WHEN OTHERS
                        --                     THEN
                        --                        raise_error (   ' FOR Batch no '
                        --                                     || v_tran_mapping (i).tmap_pol_batch_no
                        --                                    );
                        END;
                    END LOOP;
                ELSE
                    BEGIN
                        SELECT mtran_no, mtran_ref_no
                          INTO v_prev_mtran_no, v_prev_mtran_ref_no
                          FROM gin_master_transactions
                         WHERE     mtran_ref_no =
                                   v_rct_rec (j).rct_brh_rct_code
                               AND mtran_client_code =
                                   v_rct_rec (j).rct_act_code
                               AND mtran_client_type =
                                   v_rct_rec (j).rct_acct_type_id
                               AND mtran_rct_code = v_rct_rec (j).rct_no;
                    EXCEPTION
                        WHEN TOO_MANY_ROWS
                        THEN
                            raise_application_error (
                                -20001,
                                   'DUPLICATE RECEIPT FOUND..:-'
                                || v_rct_rec (j).rct_brh_rct_code
                                || ' - '
                                || SQLERRM (SQLCODE));
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20001,
                                'ERROR..:-' || SQLERRM (SQLCODE));
                    END;

                    --        RAISE_ERROR('v_prev_mtran_no = '||v_prev_mtran_no);
                    IF    NVL (v_rct_rec (j).rct_client_charge_amount, 0)
                              IS NULL
                       OR NVL (v_rct_rec (j).rct_client_charge_amount, 0) !=
                          0
                    THEN
                        INSERT INTO gin_master_transactions (
                                        mtran_no,
                                        mtran_doc_date,
                                        mtran_date,
                                        mtran_ref_no,
                                        mtran_other_ref,
                                        mtran_tran_type,
                                        mtran_dc,
                                        mtran_control_acc,
                                        mtran_client_type,
                                        mtran_client_code,
                                        mtran_amount,
                                        mtran_balance,
                                        mtran_authorised,
                                        mtran_net_amt,
                                        mtran_posting_date,
                                        mtran_ggt_tran_no,
                                        mtran_prp_code,
                                        mtran_btr_trans_code,
                                        mtran_origin,
                                        mtran_cur_code,
                                        mtran_cur_symbol,
                                        mtran_brn_code,
                                        mtran_brn_sht_desc,
                                        mtran_posted_by,
                                        mtran_cur_rate,
                                        mtran_client_polcy_no,
                                        mtran_rct_code,
                                        mtran_narrations,
                                        mtran_rct_paymt_mode,
                                        mtran_rct_paymt_memo,
                                        mtran_agn_discount,
                                        mtran_authorised_by,
                                        mtran_date_authorized)
                                 VALUES (
                                     TO_NUMBER (
                                            TO_CHAR (SYSDATE, 'YYYY')
                                         || gin_mtran_no_seq.NEXTVAL),
                                     v_rct_rec (j).rct_date,
                                     TRUNC (SYSDATE),
                                     v_rct_rec (j).rct_brh_rct_code || '/CN',
                                     v_rct_rec (j).rct_paymt_memo,
                                     'BNK',
                                     'D',
                                     v_rct_rec (j).rct_act_sht_desc,
                                     v_rct_rec (j).rct_acct_type_id,
                                     v_rct_rec (j).rct_act_code,
                                     ABS (
                                         v_rct_rec (j).rct_client_charge_amount),
                                     ABS (
                                         v_rct_rec (j).rct_client_charge_amount),
                                     'Y',
                                     ABS (
                                         v_rct_rec (j).rct_client_charge_amount),
                                     v_rct_rec (j).rct_date,
                                     v_ggt_trans_no,
                                     NULL,
                                     'BNK',
                                     'A',
                                     v_rct_rec (j).rct_cur_code,
                                     tqc_interfaces_pkg.currencysymbol (
                                         v_rct_rec (j).rct_cur_code),
                                     v_rct_rec (j).rct_brh_code,
                                     fms_interfaces_pkg.brh_name (
                                         v_rct_rec (j).rct_brh_code,
                                         'S'),
                                     tqc_interfaces_pkg.username (
                                         v_rct_rec (j).rct_captured_by),
                                     v_cur_rate,
                                     gin_interfaces_pkg.getpolicyno (
                                         v_mtran_ref_no),
                                     v_rct_rec (j).rct_no,
                                     'CHARGES UPON CANCELLATION',
                                     v_rct_rec (j).rct_paymt_mode,
                                     v_rct_rec (j).rct_paymt_memo,
                                     v_rct_rec (j).rct_discount,
                                     tqc_interfaces_pkg.username (
                                         v_rct_rec (j).rct_captured_by),
                                     v_rct_rec (j).rct_date);
                    END IF;

                    gis_accounts_utilities.undo_pdr_rcpt (v_prev_mtran_no);
                    -- UNDOING PDR ALLOACTIONS
                    gis_accounts_utilities.undo_trans_allocation (
                        v_prev_mtran_no,
                        NULL,
                        'Y');
                    gis_accounts_utilities.undo_pa_rcpt (v_prev_mtran_no,
                                                         v_mtran_no,
                                                         NULL);

                    /* MOVED TO gis_accounts_utilities.undo_trans_allocation PROCEDURE
                    FOR i IN 1 .. v_tran_mapping.COUNT  LOOP
                    -- RAISE_ERROR('v_prev_mtran_no'||v_prev_mtran_no);
                        IF NVL(v_net_com_param,'N') = 'Y'
                          AND v_rct_rec (j).rct_acct_type_id <> 'D' THEN
                                 Gis_Accounts_Utilities.auth_comm_pymnts (
                                                          v_prev_mtran_no,
                                                          NULL,-- v_mtran_no,
                                                          NULL,
                                                          'CHQ',
                                                          'N',
                                                          tqc_interfaces_pkg.username (v_rct_rec (j).rct_captured_by ),
                                                          NVL(v_tran_mapping (i).tmap_inv_vat,'N')
                                                       );
                        END IF;
                     END LOOP; */
                    SELECT ABS (NVL (mtran_balance, 0)),
                             ABS (NVL (mtran_commission, 0))
                           - (  ABS (NVL (mtran_comm_paid, 0))
                              + ABS (NVL (mtran_comm_payable, 0)))
                      INTO v_bal_amt, v_dr_comm_due
                      FROM gin_master_transactions
                     WHERE mtran_no = v_prev_mtran_no;

                    --RAISE_ERROR('v_bal_amt = '||v_bal_amt||' v_dr_comm_due = '||v_dr_comm_due);
                    IF ABS (v_bal_amt) > NVL (v_rct_rec (j).rct_amount, 0)
                    THEN
                        v_allocate_amt := NVL (v_rct_rec (j).rct_amount, 0);
                    ELSE
                        v_allocate_amt := ABS (v_bal_amt);
                    END IF;

                    gis_accounts_utilities.knock_trans (
                        v_prev_mtran_no,
                        v_prev_mtran_ref_no,
                        v_mtran_no,
                        v_rct_rec (j).rct_brh_rct_code || '/CN',
                        v_rct_rec (j).rct_date,
                        v_allocate_amt);
                --           RAISE_ERROR('FAILS HERE');
                END IF;
            END LOOP;
        ELSIF NVL (v_rct_type, 'XXX') = ('TRVD')
        THEN                                        -- TRAVEL DEPOSIT RECEIPTS
            -- Introducing a table to hold deposit
            FOR j IN 1 .. v_rct_rec.COUNT
            LOOP
                FOR i IN 1 .. v_tran_mapping.COUNT
                LOOP
                    INSERT INTO gin_receipt_deposits (rde_code,
                                                      rde_clnt_code,
                                                      rde_drcr,
                                                      rde_pol_policy_no,
                                                      rde_amount,
                                                      rde_allocated_amt,
                                                      rde_balance,
                                                      rde_received_from,
                                                      rde_captured_by,
                                                      rde_captured_date,
                                                      rde_remarks,
                                                      rde_rct_no,
                                                      rde_brh_code,
                                                      rde_ggt_trans_no,
                                                      rde_date,
                                                      rde_receipt_no,
                                                      rde_tran_type,
                                                      rde_cancelled,
                                                      rde_cancel_dt,
                                                      rde_cancel_by)
                             VALUES (
                                 TO_NUMBER (
                                        TO_CHAR (SYSDATE, 'RRRR')
                                     || gin_rde_code_seq.NEXTVAL),
                                 v_rct_rec (j).rct_act_code,
                                 DECODE (v_cancel,  'Y', 'D',  'N', 'C'),
                                 v_tran_mapping (i).tmap_check_mtran_ref_no,
                                 v_tran_mapping (i).tmap_amount,
                                 0,
                                 v_tran_mapping (i).tmap_amount,
                                 v_rct_rec (j).rct_paid_by,
                                 v_rct_rec (j).rct_captured_by,
                                 v_rct_rec (j).rct_date,
                                 v_rct_rec (j).rct_desc,
                                 v_rct_rec (j).rct_no,
                                 v_rct_rec (j).rct_brh_code,
                                 NULL,
                                 SYSDATE,
                                 v_tran_mapping (i).tmap_mtran_ref_no,
                                 'TRVL',
                                 DECODE (v_cancel_rct,  'Y', 'D',  'N', 'C'),
                                 DECODE (v_cancel, 'Y', SYSDATE, NULL),
                                 DECODE (v_cancel,
                                         'Y', v_rct_rec (j).rct_captured_by,
                                         NULL));
                END LOOP;
            END LOOP;
        ELSE
            FOR j IN 1 .. v_rct_rec.COUNT
            LOOP
                FOR i IN 1 .. v_tran_mapping.COUNT
                LOOP
                    IF NVL (v_salvage_rct_param, 'N') != 'Y'
                    THEN
                        IF NVL (v_rct_rec (j).rct_acct_type_id, 'XX') = 'SV'
                        THEN
                            v_clm_os_reserve :=
                                gin_stp_claims_pkg.get_clm_os_reserve (
                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                    'Y');

                            IF NVL (v_clm_os_reserve, 0) != 0
                            THEN
                                raise_error (
                                    'Error- Full Claim Payment NOT DONE, Cannot  Continue');
                            END IF;
                        END IF;
                    END IF;

                    --RAISE_APPLICATION_ERROR (-20001,'V_MTRAN_REF = '||V_TRAN_MAPPING(i).TMAP_CHECK_MTRAN_REF_NO||';'||v_rct_rec (j).rct_no);
                    IF v_cancel = 'Y'
                    THEN
                        SELECT COUNT ('X')
                          INTO v_rec_count
                          FROM gin_recovery_rcts
                         WHERE rrc_receipt_no = v_rct_rec (j).rct_no;

                        IF v_rec_count = 0
                        THEN
                            v_cancel_rct := 'N';
                        END IF;
                    END IF;

                    SELECT NVL (MAX (rrc_code), 0) + 1
                      INTO v_rrc_code
                      FROM gin_recovery_rcts;

                    ---RAISE_ERROR('mtran_ref_no-'||v_tran_mapping (i).tmap_check_mtran_ref_no||' = '|| 'mtran_no-'||v_tran_mapping (i).tmap_mtran_no);
                    INSERT INTO gin_recovery_rcts (rrc_code,
                                                   rrc_claim_no,
                                                   rrc_recovery_type,
                                                   rrc_drcr,
                                                   rrc_amount,
                                                   rrc_received_from,
                                                   rrc_received_by,
                                                   rrc_receved_date,
                                                   rrc_remarks,
                                                   rrc_rct_no,
                                                   rrc_brh_code,
                                                   rrc_receipt_no,
                                                   rrc_status)
                             VALUES (
                                 v_rrc_code,
                                 v_tran_mapping (i).tmap_check_mtran_ref_no,
                                 --RRC_CLAIM_NO,
                                 v_rct_rec (j).rct_acct_type_id,
                                 DECODE (v_cancel_rct,  'Y', 'D',  'N', 'C'),
                                 v_tran_mapping (i).tmap_amount,
                                 v_rct_rec (j).rct_paid_by,
                                 v_rct_rec (j).rct_captured_by,
                                 v_rct_rec (j).rct_date,
                                 v_rct_rec (j).rct_desc,
                                 DECODE (
                                     v_cancel_rct,
                                     'N', v_tran_mapping (i).tmap_mtran_ref_no,
                                        v_tran_mapping (i).tmap_mtran_ref_no
                                     || '/CN'),
                                 v_rct_rec (j).rct_brh_code,
                                 v_rct_rec (j).rct_no,
                                 DECODE (v_cancel_rct,  'Y', 'C',  'N', 'A'));

                    --            raise_error(v_tran_mapping (i).tmap_mtran_no);
                    BEGIN
                        UPDATE gin_clm_salvages
                           --SET CSD_BUYER=v_rct_rec (j).rct_paid_by,
                           SET csd_buyer =
                                   (SELECT rct_received_from
                                      FROM fms_receipts
                                     WHERE rct_no = v_rct_rec (j).rct_no),
                               csd_sold = 'Y',
                               csd_approved_value =
                                   v_tran_mapping (i).tmap_amount,
                               csd_status = 'B'
                         WHERE     csd_cmb_claim_no =
                                   v_tran_mapping (i).tmap_check_mtran_ref_no
                               AND csd_clmp_code =
                                   v_tran_mapping (i).tmap_mtran_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error updating salvage buyer details');
                    END;

                    --raise_error('here after ='||v_tran_mapping (i).tmap_mtran_no);
                    -- PROCESS SALVAGE TRANSACTIONS
                    BEGIN
                        SELECT clmp_limit_amt, clmp_per_pt_code
                          INTO v_limit_amt, v_per_pt_code
                          FROM gin_claim_perils
                         WHERE clmp_code = v_tran_mapping (i).tmap_mtran_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error determining claim peril...tmap_mtran_no'
                                || v_tran_mapping (i).tmap_mtran_no);
                    END;

                    SELECT DECODE (v_rct_rec (j).rct_acct_type_id,
                                   'SV', 'CS',
                                   'XS', 'XS',
                                   'CR')
                      INTO v_trans_type
                      FROM DUAL;

                    SELECT DECODE (v_trans_type,
                                   'CS', 'S',
                                   'XS', 'E',
                                   'R')
                      INTO v_rec_tran_type
                      FROM DUAL;

                    --raise_error('v_rct_rec (j).rct_acct_type_id'||v_rct_rec (j).rct_acct_type_id);
                    IF v_trans_type = 'CS'
                    THEN
                        BEGIN
                            SELECT COUNT (*)
                              INTO v_cnt
                              FROM gin_clm_salvages
                             WHERE     csd_clmp_code =
                                       v_tran_mapping (i).tmap_mtran_no
                                   AND csd_cmb_claim_no =
                                       v_tran_mapping (i).tmap_check_mtran_ref_no;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                NULL;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR FETCHING SALVAGE DETAILS...');
                        END;
                    ELSE
                        v_cnt := 1;
                    END IF;

                    IF NVL (v_cnt, 0) > 0
                    THEN
                        --  RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no);
                        --              RAISE_eRROR('v_clmt_code='||v_clmt_code||'v_cnt='||v_cnt||'claim='||v_tran_mapping (i).tmap_check_mtran_ref_no);
                        BEGIN
                            SELECT reg_clmt_code, reg_third_party
                              INTO v_clmt_code, v_clmnt_type
                              FROM gin_rgstd_claimants, tqc_clients
                             WHERE     reg_third_party = 'S'
                                   AND reg_cld_code = clnt_code
                                   AND reg_cmb_claim_no =
                                       v_tran_mapping (i).tmap_check_mtran_ref_no;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                gin_stp_claims_pkg.getregclaimantdetails (
                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                    v_clmt_code,
                                    v_clmnt_type);
                            --                   RAISE_ERROR('CLAIM NUMBER11 ='||v_tran_mapping (i).tmap_check_mtran_ref_no||'v_clmt_code='||v_clmt_code);
                            --                     BEGIN
                            --                        SELECT cmb_prp_code, 'S'
                            --                          INTO v_clmt_code, v_clmnt_type
                            --                          FROM gin_claim_master_bookings
                            --                         WHERE cmb_claim_no =
                            --                                    v_tran_mapping (i).tmap_check_mtran_ref_no;
                            --
                            --                     EXCEPTION
                            --                        WHEN OTHERS
                            --                        THEN
                            --                           raise_error
                            --                                   (   'Error determining claimant 1='
                            --                                    || v_tran_mapping (i).tmap_check_mtran_ref_no
                            --                                   );
                            --                     END;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                       'Error determining claimant='
                                    || v_tran_mapping (i).tmap_check_mtran_ref_no);
                        END;

                        -- RAISE_ERROR('HERE='||(v_tran_mapping (i).tmap_amount)||';'||v_limit_amt);
                        IF NVL (v_tran_mapping (i).tmap_amount, 0) = 0
                        THEN
                            raise_error (
                                'Error:- Receipt amount not provided...');
                        END IF;

                        --RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no||'v_clmt_code='||v_clmt_code);
                        IF v_cancel != 'Y'
                        THEN
                            BEGIN
                                gin_claim_utilities.auto_create_clm_salv_recovry (
                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                    --v_clmno IN VARCHAR2,
                                    NULL,              --v_trans_no IN NUMBER,
                                    TRUNC (SYSDATE),
                                    --v_date IN DATE DEFAULT TRUNC(SYSDATE),
                                    v_trans_type,  --v_trans_type IN VARCHAR2,
                                    v_clmt_code,      --v_clmt_code in number,
                                    NULL,             --v_clmr_code IN NUMBER,
                                    NVL (v_rct_rec (j).rct_paymt_memo,
                                         v_rct_rec (j).rct_desc),
                                    --v_description in  varchar2, -- salvage description or recovery description
                                    SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
                                    --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
                                    v_rec_tran_type,
                                    --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
                                    v_rct_rec (j).rct_desc, --v_remarks IN VARCHAR2,
                                    'A',             --v_add_edit IN VARCHAR2,
                                    v_tran_mapping (i).tmap_mtran_no,
                                    --v_per_pt_code,--v_per_code IN NUMBER,
                                    v_tran_mapping (i).tmap_amount,
                                    --v_per_amount IN NUMBER,
                                    tqc_interfaces_pkg.username (
                                        v_rct_rec (j).rct_captured_by), --v_user IN VARCHAR2,
                                    v_ggt_trans_no, --v_new_trans_no OUT NUMBER,
                                    v_clmnt_type,  --v_clmnt_type IN VARCHAR2,
                                    v_rrc_code,
                                    --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
                                    v_rct_rec (j).rct_no--v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
                                                        );
                            --                  EXCEPTION
                            --                     WHEN OTHERS
                            --                     THEN
                            --                        raise_error ('Error...');
                            -- creating claim transaction
                            END;
                        ELSE
                            BEGIN
                                gin_claim_utilities.auto_create_clmsalv_rec_contra (
                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                    --v_clmno IN VARCHAR2,
                                    NULL,              --v_trans_no IN NUMBER,
                                    TRUNC (SYSDATE),
                                    --v_date IN DATE DEFAULT TRUNC(SYSDATE),
                                    v_trans_type,  --v_trans_type IN VARCHAR2,
                                    v_clmt_code,      --v_clmt_code in number,
                                    NULL,             --v_clmr_code IN NUMBER,
                                    NVL (v_rct_rec (j).rct_paymt_memo,
                                         v_rct_rec (j).rct_desc),
                                    --v_description in  varchar2, -- salvage description or recovery description
                                    SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
                                    --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
                                    v_rec_tran_type,
                                    --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
                                    v_rct_rec (j).rct_desc, --v_remarks IN VARCHAR2,
                                    'A',             --v_add_edit IN VARCHAR2,
                                    v_tran_mapping (i).tmap_mtran_no,
                                    --v_per_pt_code,--v_per_code IN NUMBER,
                                    v_tran_mapping (i).tmap_amount,
                                    --v_per_amount IN NUMBER,
                                    tqc_interfaces_pkg.username (
                                        v_rct_rec (j).rct_captured_by), --v_user IN VARCHAR2,
                                    v_ggt_trans_no, --v_new_trans_no OUT NUMBER,
                                    v_clmnt_type,  --v_clmnt_type IN VARCHAR2,
                                    v_rrc_code,
                                    --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
                                    v_rct_rec (j).rct_no--v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
                                                        );
                            --                          EXCEPTION
                            --                            WHEN OTHERS THEN
                            --                                RAISE_ERROR('Error...');-- creating claim transaction
                            END;
                        END IF;
                    ELSE
                        NULL;
                    -- CREATE A TICKET TO BE ASSIGNED TO DEFAULT CLAIMS USER, TO PROCESS THE SALVAGE TRANSACTION FROM THE RECEIPT CREATED.....SOLO
                    END IF;
                END LOOP;
            END LOOP;
        END IF;
    --   EXCEPTION
    --      WHEN OTHERS
    --      THEN
    --         raise_application_error (-20001,
    --                                  'POSTING GIS 2RCT :-' || SQLERRM (SQLCODE)
    --                                 );
    END post_gis_rct;

    PROCEDURE post_gis_rct191815 (
        v_rct_code              NUMBER,
        v_rct_rec               fms_interfaces_pkg.type_receipts_table,
        v_tran_mapping   IN OUT fms_interfaces_pkg.tran_mapping_type,
        v_rct_type              VARCHAR2,
        v_user_name             VARCHAR2,
        v_cancel                VARCHAR2 DEFAULT 'N',
        v_mtran_ref_no          VARCHAR2 DEFAULT NULL)
    IS
        v_errmsg              VARCHAR2 (1500);
        v_count               NUMBER := 0;
        v_ggt_trans_no        NUMBER;
        v_mtran_no            NUMBER;
        v_amount              NUMBER := 0;
        v_rrc_code            NUMBER;
        v_rec_count           NUMBER;
        v_cancel_rct          VARCHAR2 (1) := v_cancel;
        v_allocate_amt        NUMBER := 0;
        v_bal_amt             NUMBER := 0;
        v_dr_comm_due         NUMBER := 0;
        v_dr_comm_vat_incl    NUMBER := 0;
        v_diff                NUMBER := 0;
        v_comm_alloc_amt      NUMBER := 0;
        v_brn_code            NUMBER;
        v_agnt_code           NUMBER;
        v_prev_mtran_no       NUMBER;
        v_prev_mtran_ref_no   VARCHAR2 (30);
        v_tran_type           VARCHAR2 (10);
        v_rnd                 NUMBER;
        v_bcur_rnd            NUMBER;
        v_cur_rate            NUMBER;
        v_param               VARCHAR2 (5);
        v_appr_comm           NUMBER;
        v_amt_to_com          NUMBER;
        v_act_type_cnt        NUMBER;
        v_prp_code            NUMBER;
        v_per_pt_code         NUMBER;
        v_limit_amt           NUMBER;
        v_clmt_code           NUMBER;
        v_clmnt_type          VARCHAR2 (30);
        v_trans_type          VARCHAR2 (30);
        v_param_value         VARCHAR2 (30);
        v_cnt                 NUMBER;
        v_rec_tran_type       VARCHAR2 (30);
        v_interface_type      VARCHAR2 (10);
        v_allocate            VARCHAR2 (1);
        vuser                 VARCHAR2 (30);
        v_new_mtran_no        NUMBER;
        v_tmap_amt            NUMBER;
        v_pol_batch_no        NUMBER;
        v_trans_count         NUMBER;
        v_new_dr_no           VARCHAR2 (30);
        v_freq                VARCHAR2 (10);
        v_dr_no               NUMBER;
        v_new_pol_batch       NUMBER;
        v_dr_mtran_no         NUMBER;
        v_dr_mtran_ref_no     VARCHAR2 (30);
        v_salvage_rct_param   VARCHAR2 (1);
        v_clm_os_reserve      NUMBER;
        v_comm_allocated      NUMBER;
        v_dr_vat_due          NUMBER;
        v_prev_ggt_trans_no   NUMBER;
        v_whtx                NUMBER;
        v_net_com_param       VARCHAR2 (1) := 'N';

        CURSOR cur_commissions (v_prv_mtran_no IN NUMBER)
        IS
            SELECT *
              FROM gin_commission_pymts
             WHERE cop_cr_mtran_no = v_prv_mtran_no;
    BEGIN
        /*
        ************************************
        USE V_TRAN_MAPPING(i).TMAP_COMM_ALLOC
        **************************************
        */
        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'COMM_PAID_ON_FULL_DEBIT')
              INTO v_param
              FROM DUAL;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching commission payment parameter...');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'ALLOW_SALVAGE_WITHOUT_PYMT')
              INTO v_salvage_rct_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_salvage_rct_param := 'Y';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching Salvage  parameter...');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('COMM_PAYABLE_NET')
              INTO v_net_com_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_net_com_param := 'N';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching net of commission parameter...');
        END;

        --RAISE_ERROR('v_rct_type ='||v_rct_type||';;;'||v_mtran_ref_no);
        IF v_rct_type IN ('JV',
                          'DBT',
                          'PDR',
                          'DBTD',
                          'RNRC')
        /*-- Introduced Dbtd -- Debit Draft Where The Debit Is Not Yet Authorized,
        And Rnrc Renewal Receipt Where The Records Are Still In The Renewal Working Area
        This will assist in determine how to manage the next move. ie. if the RNRC then check
        if its a full receipt and renew the policy. if DBTD, the policy is still in Draft hence do nothing...*/
        THEN
            SELECT ggt_trans_no_seq.NEXTVAL INTO v_ggt_trans_no FROM DUAL;

            INSERT INTO gin_gis_transactions (ggt_trans_no,
                                              ggt_btr_trans_code,
                                              ggt_done_by,
                                              ggt_done_date,
                                              ggt_uw_clm_tran,
                                              ggt_trans_date,
                                              ggt_effective_date)
                 VALUES (v_ggt_trans_no,
                         DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
                         v_user_name,
                         TRUNC (SYSDATE),
                         'A',
                         TRUNC (SYSDATE),
                         TRUNC (SYSDATE));

            --RAISE_ERROR('TOP='||v_param||';'||v_appr_comm||';'||v_allocate_amt);
            FOR j IN 1 .. v_rct_rec.COUNT
            LOOP
                --RAISE_ERROR('v_rct_type:'||v_rct_type||';;'||v_rct_rec (j).rct_acct_type_id);
                IF v_rct_rec (j).rct_acct_type_id IN ('D')
                THEN
                    SELECT COUNT (1)
                      INTO v_act_type_cnt
                      FROM tqc_clients
                     WHERE     clnt_code = v_rct_rec (j).rct_act_code
                           AND clnt_sht_desc = v_rct_rec (j).rct_act_sht_desc;
                ELSIF v_rct_rec (j).rct_acct_type_id NOT IN ('D')
                THEN
                    SELECT COUNT (1)
                      INTO v_act_type_cnt
                      FROM tqc_agencies, tqc_account_types
                     WHERE     agn_act_code = act_code
                           AND agn_code = v_rct_rec (j).rct_act_code
                           AND agn_sht_desc = v_rct_rec (j).rct_act_sht_desc
                           AND act_type_id = v_rct_rec (j).rct_acct_type_id;
                END IF;

                IF v_act_type_cnt = 0
                THEN
                    raise_error (
                           'The account type='
                        || v_rct_rec (j).rct_acct_type_id
                        || ' and account code='
                        || v_rct_rec (j).rct_act_sht_desc
                        || ' do not match ...'
                        || ' v_rct_rec (j).rct_act_code  '
                        || v_rct_rec (j).rct_act_code);
                END IF;

                IF v_cancel = 'Y'
                THEN
                    -- MAKE SURE THAT THE RCT 2B CANCELLED ALREADY EXISTS
                    SELECT COUNT ('X')
                      INTO v_rec_count
                      FROM gin_master_transactions
                     WHERE     mtran_ref_no = v_rct_rec (j).rct_brh_rct_code
                           AND mtran_rct_code = v_rct_rec (j).rct_no;

                    IF NVL (v_rec_count, 0) = 0
                    THEN  --DELETE THE  GIN_GIS_TRANSACTION REC CREATED ABOVE;
                        DELETE FROM gin_gis_transactions
                              WHERE ggt_trans_no = v_ggt_trans_no;

                        EXIT;
                    END IF;
                END IF;

                v_cur_rate :=
                    get_currexch_rate (v_rct_rec (j).rct_cur_code,
                                       v_rnd,
                                       v_bcur_rnd);

                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || gin_mtran_no_seq.NEXTVAL)
                  INTO v_mtran_no
                  FROM DUAL;

                --RAISE_ERROR( 'MEMO=='||v_rct_rec (j).rct_paymt_memo||';'||v_rct_rec (j).rct_desc||';'||v_rct_rec (j).rct_paymt_mode);
                INSERT INTO gin_master_transactions (mtran_no,
                                                     mtran_doc_date,
                                                     mtran_date,
                                                     mtran_ref_no,
                                                     mtran_other_ref,
                                                     mtran_tran_type,
                                                     mtran_dc,
                                                     mtran_control_acc,
                                                     mtran_client_type,
                                                     mtran_client_code,
                                                     mtran_amount,
                                                     mtran_balance,
                                                     mtran_authorised,
                                                     mtran_net_amt,
                                                     mtran_posting_date,
                                                     mtran_ggt_tran_no,
                                                     mtran_prp_code,
                                                     mtran_btr_trans_code,
                                                     mtran_origin,
                                                     mtran_cur_code,
                                                     mtran_cur_symbol,
                                                     mtran_brn_code,
                                                     mtran_brn_sht_desc,
                                                     mtran_posted_by,
                                                     mtran_cur_rate,
                                                     mtran_client_polcy_no,
                                                     mtran_narrations,
                                                     mtran_rct_code,
                                                     mtran_rct_paymt_mode,
                                                     mtran_rct_paymt_memo,
                                                     mtran_agn_discount,
                                                     mtran_pol_batch_no,
                                                     mtran_other_ref1,
                                                     mtran_authorised_by,
                                                     mtran_date_authorized,
                                                     mtran_pol_ren_endos_no,
                                                     mtran_rct_type,
                                                     mtran_rct_imp_code)
                         --PRP CODE = DECODE( v_rct_rec(j).RCT_ACC_TYPE,'D',v_rct_rec(j).RCT_ACT_CODE,NULL)
                         VALUES (
                             v_mtran_no,
                             v_rct_rec (j).rct_date,
                             TRUNC (SYSDATE),
                             DECODE (
                                 v_cancel_rct,
                                 'Y', v_rct_rec (j).rct_brh_rct_code || '/CN',
                                 v_rct_rec (j).rct_brh_rct_code),
                             v_mtran_ref_no,   --v_rct_rec (j).rct_paymt_memo,
                             DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
                             DECODE (v_cancel_rct, 'Y', 'D', 'C'),
                             v_rct_rec (j).rct_act_sht_desc,
                             v_rct_rec (j).rct_acct_type_id,
                             v_rct_rec (j).rct_act_code,        --acc sht desc
                               DECODE (v_cancel_rct, 'Y', 1, -1)
                             * ABS (v_rct_rec (j).rct_amount),
                               DECODE (v_cancel_rct, 'Y', 1, -1)
                             * ABS (v_rct_rec (j).rct_amount),
                             'Y',
                               DECODE (v_cancel_rct, 'Y', 1, -1)
                             * ABS (v_rct_rec (j).rct_amount),
                             v_rct_rec (j).rct_date,
                             v_ggt_trans_no,
                             NULL,
                             DECODE (v_cancel_rct, 'Y', 'CN', 'RC'),
                             'A',
                             v_rct_rec (j).rct_cur_code,
                             tqc_interfaces_pkg.currencysymbol (
                                 v_rct_rec (j).rct_cur_code),
                             v_rct_rec (j).rct_brh_code,
                             fms_interfaces_pkg.brh_name (
                                 v_rct_rec (j).rct_brh_code,
                                 'S'),
                             tqc_interfaces_pkg.username (
                                 v_rct_rec (j).rct_captured_by),
                             v_cur_rate,
                             gin_interfaces_pkg.getpolicyno (v_mtran_ref_no),
                             v_rct_rec (j).rct_desc,
                             v_rct_rec (j).rct_no,
                             v_rct_rec (j).rct_paymt_mode,
                             v_rct_rec (j).rct_paymt_memo,
                             v_rct_rec (j).rct_discount,
                             gin_interfaces_pkg.getpolicybatchno (
                                 v_mtran_ref_no),
                             v_mtran_ref_no,
                             tqc_interfaces_pkg.username (
                                 v_rct_rec (j).rct_captured_by),
                             v_rct_rec (j).rct_date,
                             v_mtran_ref_no,
                             v_rct_rec (j).rct_creation_type,
                             v_rct_rec (j).rct_imp_code);

                v_brn_code := v_rct_rec (j).rct_brh_code;
                v_agnt_code := v_rct_rec (j).rct_act_code;

                --RAISE_ERROR('TOP='||v_param||';'||v_appr_comm||';'||v_allocate_amt||';'||V_cancel||';'||v_mtran_ref_no);
                IF v_cancel != 'Y'
                THEN
                    FOR i IN 1 .. v_tran_mapping.COUNT
                    LOOP
                        BEGIN
                            v_pol_batch_no :=
                                v_tran_mapping (i).tmap_pol_batch_no;

                            --gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no);

                            -- raise_error('v_pol_batch_no='||v_pol_batch_no);
                            BEGIN
                                update_transmittal_rct (
                                    v_pol_batch_no,
                                    v_tran_mapping (i).tmap_amount,
                                    v_cancel_rct,
                                    v_rct_type);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                        'Error updating transmittal rec...');
                            END;

                            BEGIN
                                SELECT pol_pro_interface_type,
                                       pol_freq_of_payment
                                  INTO v_interface_type, v_freq
                                  FROM gin_policies
                                 WHERE pol_batch_no = v_pol_batch_no;
                            EXCEPTION
                                WHEN NO_DATA_FOUND
                                THEN
                                    v_interface_type := 'ACCRUAL';
                                    v_freq := 'A';
                                WHEN OTHERS
                                THEN
                                    raise_error (
                                           'Error getting policy details...'
                                        || 'v_pol_batch_no:'
                                        || v_pol_batch_no
                                        || 'v_mtran_ref_no:'
                                        || v_mtran_ref_no);
                            END;

                            IF NVL (v_interface_type, 'ACCRUAL') = 'CASH'
                            THEN
                                BEGIN
                                    gis_accounts_utilities.auto_auth_transactions (
                                        v_pol_batch_no,
                                        v_tran_mapping (i).tmap_mtran_ref_no,
                                        --v_mtran_ref_no ,
                                        v_mtran_no,
                                        v_tran_mapping (i).tmap_amount,
                                        v_freq,
                                        v_rct_rec (j).rct_creation_type,
                                        v_rct_rec (j).rct_imp_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error ('KKKDKDKDKKD ');
                                END;
                            ELSE
                                -- raise_error ('V_RCT_MAPPING ='||v_tran_mapping (1).tmap_rct_type||' AMOUNT;'||v_tran_mapping (i).tmap_amount);
                                IF NVL (v_tran_mapping (i).tmap_rct_type,
                                        'DBT') IN
                                       ('DBT', 'JV', 'PDR')
                                THEN
                                    IF NVL (v_tran_mapping (i).tmap_amount,
                                            0) !=
                                       0
                                    THEN
                                        BEGIN
                                            SELECT ABS (
                                                       NVL (mtran_balance, 0)),
                                                     ABS (
                                                         NVL (
                                                             mtran_commission,
                                                             0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_comm_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_comm_payable,
                                                                0))),
                                                     ABS (
                                                         NVL (mtran_balance,
                                                              0))
                                                   + ABS (
                                                         NVL (
                                                             mtran_commission,
                                                             0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_comm_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_comm_payable,
                                                                0))),
                                                     ABS (NVL (mtran_vat, 0))
                                                   - (  ABS (
                                                            NVL (
                                                                mtran_vat_paid,
                                                                0))
                                                      + ABS (
                                                            NVL (
                                                                mtran_vat_payable,
                                                                0))),
                                                   mtran_tran_type
                                              INTO v_bal_amt,
                                                   v_dr_comm_due,
                                                   v_amt_to_com,
                                                   v_dr_vat_due,
                                                   v_tran_type
                                              FROM gin_master_transactions
                                             WHERE mtran_no =
                                                   v_tran_mapping (i).tmap_mtran_no;

                                            v_dr_comm_vat_incl :=
                                                  NVL (v_dr_comm_due, 0)
                                                + NVL (v_dr_vat_due, 0);
                                        EXCEPTION
                                            WHEN NO_DATA_FOUND
                                            THEN
                                                BEGIN
                                                    SELECT ABS (
                                                               NVL (
                                                                   mtran_balance,
                                                                   0)),
                                                             ABS (
                                                                 NVL (
                                                                     mtran_commission,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_comm_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_comm_payable,
                                                                        0))),
                                                             ABS (
                                                                 NVL (
                                                                     mtran_balance,
                                                                     0))
                                                           + ABS (
                                                                 NVL (
                                                                     mtran_commission,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_comm_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_comm_payable,
                                                                        0))),
                                                           mtran_tran_type,
                                                           mtran_no,
                                                           mtran_ref_no,
                                                             ABS (
                                                                 NVL (
                                                                     mtran_vat,
                                                                     0))
                                                           - (  ABS (
                                                                    NVL (
                                                                        mtran_vat_paid,
                                                                        0))
                                                              + ABS (
                                                                    NVL (
                                                                        mtran_vat_payable,
                                                                        0)))
                                                      INTO v_bal_amt,
                                                           v_dr_comm_due,
                                                           v_amt_to_com,
                                                           v_tran_type,
                                                           v_dr_mtran_no,
                                                           v_dr_mtran_ref_no,
                                                           v_dr_vat_due
                                                      FROM gin_master_transactions
                                                     WHERE     mtran_pol_batch_no =
                                                               v_tran_mapping (
                                                                   i).tmap_mtran_no
                                                           AND mtran_tran_type NOT IN
                                                                   ('RC',
                                                                    'CN')
                                                           AND mtran_dc = 'D'
                                                           AND mtran_client_type IN
                                                                   ('D',
                                                                    'A',
                                                                    'B',
                                                                    'FI',
                                                                    'IA');

                                                    v_dr_comm_vat_incl :=
                                                          NVL (v_dr_comm_due,
                                                               0)
                                                        + NVL (v_dr_vat_due,
                                                               0);
                                                EXCEPTION
                                                    WHEN NO_DATA_FOUND
                                                    THEN
                                                        NULL;
                                                END;
                                            WHEN OTHERS
                                            THEN
                                                raise_application_error (
                                                    -20001,
                                                    SQLERRM (SQLCODE));
                                        END;

                                        --RAISE_ERROR('v_bal_amt '||v_bal_amt||' v_tran_mapping (i).tmap_mtran_no '||v_tran_mapping (i).tmap_mtran_no);
                                        --  Raise_error('v_param='||v_param||' tmap_inc_comm='||v_tran_mapping (i).tmap_inc_comm);
                                        IF NVL (v_param, 'N') = 'Y'
                                        THEN
                                            IF ABS (v_bal_amt) >
                                               NVL (
                                                   v_tran_mapping (i).tmap_amount,
                                                   0)
                                            THEN
                                                v_allocate_amt :=
                                                    NVL (
                                                        v_tran_mapping (i).tmap_amount,
                                                        0);
                                            ELSE
                                                v_allocate_amt :=
                                                    ABS (v_bal_amt);
                                            END IF;
                                        ELSIF     NVL (v_param, 'N') = 'N'
                                              AND v_tran_mapping (i).tmap_inc_comm =
                                                  'N'
                                        THEN
                                            IF ABS (v_bal_amt) >
                                               NVL (
                                                   v_tran_mapping (i).tmap_amount,
                                                   0)
                                            THEN
                                                v_allocate_amt :=
                                                    NVL (
                                                        v_tran_mapping (i).tmap_amount,
                                                        0);
                                            ELSE
                                                v_allocate_amt :=
                                                    ABS (v_bal_amt);
                                            END IF;

                                            IF     NVL (v_net_com_param, 'N') =
                                                   'Y'
                                               AND v_rct_rec (j).rct_acct_type_id <>
                                                   'D'
                                            THEN
                                                IF NVL (
                                                       v_tran_mapping (i).tmap_inv_vat,
                                                       'N') =
                                                   'Y'
                                                THEN
                                                    v_appr_comm :=
                                                        ROUND (
                                                            (  (  NVL (
                                                                      v_tran_mapping (
                                                                          i).tmap_amount,
                                                                      0)
                                                                * (  NVL (
                                                                         v_dr_comm_due,
                                                                         0)
                                                                   - NVL (
                                                                         v_whtx,
                                                                         0)))
                                                             / v_bal_amt),
                                                            v_rnd);
                                                ELSE
                                                    v_appr_comm :=
                                                        ROUND (
                                                            (  (  NVL (
                                                                      v_tran_mapping (
                                                                          i).tmap_amount,
                                                                      0)
                                                                * NVL (
                                                                      v_dr_comm_due,
                                                                      0))
                                                             / v_bal_amt),
                                                            v_rnd);
                                                END IF;

                                                v_comm_allocated :=
                                                    gis_accounts_utilities.update_commission (
                                                        v_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_ref_no,
                                                        NVL (
                                                            v_dr_mtran_no,
                                                            v_tran_mapping (
                                                                i).tmap_mtran_no),
                                                        v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                        v_dr_comm_due,
                                                        v_dr_vat_due,
                                                        v_appr_comm,
                                                        v_brn_code,
                                                        v_agnt_code,
                                                        v_rct_rec (j).rct_cur_code);
                                                gis_accounts_utilities.auth_comm_pymnts (
                                                    v_mtran_no,
                                                    NVL (
                                                        v_dr_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_no),
                                                    v_agnt_code,
                                                    'CHQ',
                                                    'N',
                                                    tqc_interfaces_pkg.username (
                                                        v_rct_rec (j).rct_captured_by),
                                                    NVL (
                                                        v_tran_mapping (i).tmap_inv_vat,
                                                        'N'));
                                            END IF;
                                        ELSIF     NVL (v_param, 'N') = 'N'
                                              AND v_tran_mapping (i).tmap_inc_comm =
                                                  'Y'
                                        THEN
                                            IF ABS (v_bal_amt) =
                                               NVL (
                                                   v_tran_mapping (i).tmap_amount,
                                                   0)
                                            THEN
                                                v_appr_comm :=
                                                    ROUND (
                                                        (  (  NVL (
                                                                  v_tran_mapping (
                                                                      i).tmap_amount,
                                                                  0)
                                                            / v_amt_to_com)
                                                         * v_dr_comm_due),
                                                        v_rnd);
                                                v_allocate_amt :=
                                                      NVL (
                                                          v_tran_mapping (i).tmap_amount,
                                                          0)
                                                    - v_appr_comm;
                                            ELSE
                                                v_appr_comm :=
                                                    ROUND (
                                                        (  (  NVL (
                                                                  v_tran_mapping (
                                                                      i).tmap_amount,
                                                                  0)
                                                            / v_amt_to_com)
                                                         * v_dr_comm_due),
                                                        v_rnd);
                                                v_allocate_amt :=
                                                      ABS (
                                                          NVL (
                                                              v_tran_mapping (
                                                                  i).tmap_amount,
                                                              0))
                                                    - v_appr_comm;
                                            END IF;

                                            IF ABS (v_bal_amt) <
                                               NVL (v_allocate_amt, 0)
                                            THEN
                                                v_allocate_amt :=
                                                    ABS (v_bal_amt);
                                            END IF;
                                        END IF;

                                        --raise_error ('V_RCT_MAPPING ='||v_tran_mapping (1).tmap_rct_type||' AMOUNT;'||v_allocate_amt||'Balance:'||v_bal_amt||'Param:'||v_appr_comm);
                                        gis_accounts_utilities.knock_trans (
                                            v_mtran_no,
                                            v_tran_mapping (i).tmap_mtran_ref_no,
                                            NVL (
                                                v_dr_mtran_no,
                                                v_tran_mapping (i).tmap_mtran_no),
                                            v_tran_mapping (i).tmap_check_mtran_ref_no,
                                            v_rct_rec (j).rct_date,
                                            v_allocate_amt);
                                        --************MOVED TOWARDS END OF PROC  MASINDE
                                        /* gis_accounts_utilities.update_coin_payments(v_mtran_no,
                                                                                     v_tran_mapping (i).tmap_mtran_ref_no,
                                                                                     NVL(v_dr_mtran_no,v_tran_mapping (i).tmap_mtran_no),
                                                                                     v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                                                     NVL (v_tran_mapping (i).tmap_amount, 0),
                                                                                     v_brn_code,
                                                                                     v_agnt_code,
                                                                                     v_rct_rec (j).rct_cur_code
                                                                                     );*/
                                        v_diff :=
                                              ABS (
                                                  NVL (
                                                      v_tran_mapping (i).tmap_amount,
                                                      0))
                                            - v_allocate_amt;

                                        -- RAISE_APPLICATION_ERROR(-20001,NVL (v_tran_mapping (i).tmap_amount, 0)||'='||v_allocate_amt||' = '||v_diff||' = '||v_tran_type||' = '||V_TRAN_MAPPING(i).TMAP_COMM_ALLOC||' = '||V_TRAN_MAPPING(i).TMAP_INC_COMM);
                                        --raise_error('here='||v_dr_comm_due||'v_diff='||v_diff||'tmap_inc_comm='||v_tran_mapping (i).tmap_inc_comm);
                                        -- IF   v_dr_comm_due != 0  AND v_diff > 0
                                        IF     v_dr_comm_vat_incl != 0
                                           AND v_diff > 0
                                           AND v_tran_mapping (i).tmap_inc_comm =
                                               'Y'
                                        THEN
                                            IF ABS (v_diff) >
                                               NVL (v_dr_comm_vat_incl, 0)
                                            THEN
                                                v_comm_alloc_amt :=
                                                    NVL (v_dr_comm_vat_incl,
                                                         0);
                                            ELSE
                                                v_comm_alloc_amt :=
                                                    ABS (v_diff);
                                            END IF;

                                            --RAISE_ERROR('v_comm_alloc_amt='||v_comm_alloc_amt);
                                            v_comm_allocated :=
                                                gis_accounts_utilities.update_commission (
                                                    v_mtran_no,
                                                    v_tran_mapping (i).tmap_mtran_ref_no,
                                                    NVL (
                                                        v_dr_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_no),
                                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                    v_dr_comm_due,
                                                    v_dr_vat_due,
                                                    v_diff,
                                                    v_brn_code,
                                                    v_agnt_code,
                                                    v_rct_rec (j).rct_cur_code);
                                            gin_accounts_pkg.create_comm_rqstion (
                                                v_mtran_no,
                                                v_user_name);
                                        ELSIF     NVL (v_tran_type, 'NONE') =
                                                  'BAL'
                                              AND NVL (
                                                      v_tran_mapping (i).tmap_comm_alloc,
                                                      0) !=
                                                  0
                                        THEN
                                            v_comm_alloc_amt :=
                                                NVL (
                                                    v_tran_mapping (i).tmap_comm_alloc,
                                                    0);

                                            UPDATE gin_master_transactions
                                               SET mtran_commission =
                                                         NVL (
                                                             mtran_commission,
                                                             0)
                                                       +   DECODE (
                                                               SIGN (
                                                                   NVL (
                                                                       mtran_commission,
                                                                       0)),
                                                               -1, -1,
                                                               1)
                                                         * v_comm_alloc_amt
                                             WHERE mtran_no =
                                                   v_tran_mapping (i).tmap_mtran_no;

                                            v_comm_allocated :=
                                                gis_accounts_utilities.update_commission (
                                                    v_mtran_no,
                                                    v_tran_mapping (i).tmap_mtran_ref_no,
                                                    NVL (
                                                        v_dr_mtran_no,
                                                        v_tran_mapping (i).tmap_mtran_no),
                                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                                    v_comm_alloc_amt,
                                                    NULL,     --v_due_vat_amt,
                                                    v_comm_alloc_amt,
                                                    v_brn_code,
                                                    v_agnt_code,
                                                    v_rct_rec (j).rct_cur_code);
                                            gin_accounts_pkg.create_comm_rqstion (
                                                v_mtran_no,
                                                v_user_name);
                                        END IF;

                                        ----**************GENERATE COINURANCE PAYMTS
                                        --RAISE_ERROR('update_coin_payments=');
                                        gis_accounts_utilities.update_coin_payments (
                                            v_mtran_no,
                                            v_tran_mapping (i).tmap_mtran_ref_no,
                                            NVL (
                                                v_dr_mtran_no,
                                                v_tran_mapping (i).tmap_mtran_no),
                                            v_tran_mapping (i).tmap_check_mtran_ref_no,
                                            v_allocate_amt,
                                            v_comm_allocated,
                                            v_brn_code,
                                            v_agnt_code,
                                            v_rct_rec (j).rct_cur_code,
                                            v_tran_mapping (i).tmap_inc_comm,
                                            v_tran_mapping (i).tmap_inv_vat);
                                        v_amount :=
                                              v_amount
                                            + v_tran_mapping (i).tmap_amount;
                                    END IF;

                                    BEGIN
                                        gis_accounts_utilities.validate_allocations (
                                            v_mtran_no,
                                            NVL (
                                                v_dr_mtran_no,
                                                v_tran_mapping (i).tmap_mtran_no));
                                    EXCEPTION
                                        WHEN OTHERS
                                        THEN
                                            raise_error (
                                                'Error occured on validation of Receipt allocations.');
                                    END;
                                -- Gis_Accounts_Utilities.allocate_pdr_rcpt(v_mtran_no,v_tran_mapping (i).tmap_mtran_no,v_tran_mapping (i).tmap_amount);
                                ELSIF     NVL (
                                              v_tran_mapping (i).tmap_rct_type,
                                              'DBT') IN
                                              ('RNRC')
                                      AND NVL (v_interface_type, 'ACCRUAL') =
                                          'CASH'
                                THEN
                                    /*-- if the receipt amt is equal to fap, transfer transaction to uw, authorize and allocate */
                                    gin_stp_pkg.auto_renew_prc (
                                        v_tran_mapping (i).tmap_mtran_no);
                                END IF;
                            END IF;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                       ' FOR Batch no '
                                    || v_tran_mapping (i).tmap_pol_batch_no);
                        END;
                    END LOOP;
                ELSE
                    BEGIN
                        SELECT mtran_no, mtran_ref_no
                          INTO v_prev_mtran_no, v_prev_mtran_ref_no
                          FROM gin_master_transactions
                         WHERE     mtran_ref_no =
                                   v_rct_rec (j).rct_brh_rct_code
                               AND mtran_client_code =
                                   v_rct_rec (j).rct_act_code
                               AND mtran_client_type =
                                   v_rct_rec (j).rct_acct_type_id
                               AND mtran_rct_code = v_rct_rec (j).rct_no;
                    EXCEPTION
                        WHEN TOO_MANY_ROWS
                        THEN
                            raise_application_error (
                                -20001,
                                   'DUPLICATE RECEIPT FOUND..:-'
                                || v_rct_rec (j).rct_brh_rct_code
                                || ' - '
                                || SQLERRM (SQLCODE));
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20001,
                                'ERROR..:-' || SQLERRM (SQLCODE));
                    END;

                    FOR i IN 1 .. v_tran_mapping.COUNT
                    LOOP
                        BEGIN
                            update_transmittal_rct (
                                v_pol_batch_no,
                                v_tran_mapping (i).tmap_amount,
                                v_cancel_rct,
                                v_rct_type);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error updating transmittal at cancellation rec...');
                        END;
                    END LOOP;

                    IF    NVL (v_rct_rec (j).rct_client_charge_amount, 0)
                              IS NULL
                       OR NVL (v_rct_rec (j).rct_client_charge_amount, 0) !=
                          0
                    THEN
                        INSERT INTO gin_master_transactions (
                                        mtran_no,
                                        mtran_doc_date,
                                        mtran_date,
                                        mtran_ref_no,
                                        mtran_other_ref,
                                        mtran_tran_type,
                                        mtran_dc,
                                        mtran_control_acc,
                                        mtran_client_type,
                                        mtran_client_code,
                                        mtran_amount,
                                        mtran_balance,
                                        mtran_authorised,
                                        mtran_net_amt,
                                        mtran_posting_date,
                                        mtran_ggt_tran_no,
                                        mtran_prp_code,
                                        mtran_btr_trans_code,
                                        mtran_origin,
                                        mtran_cur_code,
                                        mtran_cur_symbol,
                                        mtran_brn_code,
                                        mtran_brn_sht_desc,
                                        mtran_posted_by,
                                        mtran_cur_rate,
                                        mtran_client_polcy_no,
                                        mtran_rct_code,
                                        mtran_narrations,
                                        mtran_rct_paymt_mode,
                                        mtran_rct_paymt_memo,
                                        mtran_agn_discount,
                                        mtran_authorised_by,
                                        mtran_date_authorized)
                                 VALUES (
                                     TO_NUMBER (
                                            TO_CHAR (SYSDATE, 'YYYY')
                                         || gin_mtran_no_seq.NEXTVAL),
                                     v_rct_rec (j).rct_date,
                                     TRUNC (SYSDATE),
                                     v_rct_rec (j).rct_brh_rct_code || '/CN',
                                     v_rct_rec (j).rct_paymt_memo,
                                     'BNK',
                                     'D',
                                     v_rct_rec (j).rct_act_sht_desc,
                                     v_rct_rec (j).rct_acct_type_id,
                                     v_rct_rec (j).rct_act_code,
                                     ABS (
                                         v_rct_rec (j).rct_client_charge_amount),
                                     ABS (
                                         v_rct_rec (j).rct_client_charge_amount),
                                     'Y',
                                     ABS (
                                         v_rct_rec (j).rct_client_charge_amount),
                                     v_rct_rec (j).rct_date,
                                     v_ggt_trans_no,
                                     NULL,
                                     'BNK',
                                     'A',
                                     v_rct_rec (j).rct_cur_code,
                                     tqc_interfaces_pkg.currencysymbol (
                                         v_rct_rec (j).rct_cur_code),
                                     v_rct_rec (j).rct_brh_code,
                                     fms_interfaces_pkg.brh_name (
                                         v_rct_rec (j).rct_brh_code,
                                         'S'),
                                     tqc_interfaces_pkg.username (
                                         v_rct_rec (j).rct_captured_by),
                                     v_cur_rate,
                                     gin_interfaces_pkg.getpolicyno (
                                         v_mtran_ref_no),
                                     v_rct_rec (j).rct_no,
                                     'CHARGES UPON CANCELLATION',
                                     v_rct_rec (j).rct_paymt_mode,
                                     v_rct_rec (j).rct_paymt_memo,
                                     v_rct_rec (j).rct_discount,
                                     tqc_interfaces_pkg.username (
                                         v_rct_rec (j).rct_captured_by),
                                     v_rct_rec (j).rct_date);
                    END IF;

                    gis_accounts_utilities.undo_pdr_rcpt (v_prev_mtran_no);
                    -- UNDOING PDR ALLOACTIONS

                    /*FOR cur_coms IN cur_commissions (v_prev_mtran_no)
                      LOOP
                         IF NVL (cur_coms.cop_net_comm, 0) != 0
                         THEN
                            /*gis_accounts_utilities.update_commission
                                                      (cur_coms.cop_cr_mtran_no,
                                                       cur_coms.cop_cr_ref_no,
                                                       cur_coms.cop_dr_mtran_no,
                                                       cur_coms.cop_dr_ref_no,
                                                       -NVL (cur_coms.cop_net_comm,0),
                                                       cur_coms.cop_brn_code,
                                                       cur_coms.cop_agn_code,
                                                       v_rct_rec (j).rct_cur_code
                                                      );

                               v_comm_allocated := Gis_Accounts_Utilities.update_commission
                                          (cur_coms.cop_cr_mtran_no,
                                           cur_coms.cop_cr_ref_no,
                                           cur_coms.cop_dr_mtran_no,
                                           cur_coms.cop_dr_ref_no,
                                           -NVL (cur_coms.cop_net_comm,0),
                                           cur_coms.cop_brn_code,
                                           cur_coms.cop_agn_code,
                                           v_rct_rec (j).rct_cur_code
                                          );
                                -- raise_error('here');


                         END IF;
                      END LOOP;*/
                    gis_accounts_utilities.undo_trans_allocation (
                        v_prev_mtran_no);
                    gis_accounts_utilities.undo_pa_rcpt (v_prev_mtran_no,
                                                         v_mtran_no,
                                                         NULL);

                    FOR i IN 1 .. v_tran_mapping.COUNT
                    LOOP
                        -- RAISE_ERROR('v_prev_mtran_no'||v_prev_mtran_no);
                        IF     NVL (v_net_com_param, 'N') = 'Y'
                           AND v_rct_rec (j).rct_acct_type_id <> 'D'
                        THEN
                            gis_accounts_utilities.auth_comm_pymnts (
                                v_prev_mtran_no,
                                NULL,                           -- v_mtran_no,
                                NULL,
                                'CHQ',
                                'N',
                                tqc_interfaces_pkg.username (
                                    v_rct_rec (j).rct_captured_by),
                                NVL (v_tran_mapping (i).tmap_inv_vat, 'N'));
                        END IF;
                    END LOOP;

                    --***************************************************** WHY IS THIS HERE
                    --RAISE_APPLICATION_ERROR (-20001,'{}');
                    --****************************************************
                    SELECT ABS (NVL (mtran_balance, 0)),
                             ABS (NVL (mtran_commission, 0))
                           - (  ABS (NVL (mtran_comm_paid, 0))
                              + ABS (NVL (mtran_comm_payable, 0)))
                      INTO v_bal_amt, v_dr_comm_due
                      FROM gin_master_transactions
                     WHERE mtran_no = v_prev_mtran_no;

                    IF ABS (v_bal_amt) > NVL (v_rct_rec (j).rct_amount, 0)
                    THEN
                        v_allocate_amt := NVL (v_rct_rec (j).rct_amount, 0);
                    ELSE
                        v_allocate_amt := ABS (v_bal_amt);
                    END IF;

                    gis_accounts_utilities.knock_trans (
                        v_prev_mtran_no,
                        v_prev_mtran_ref_no,
                        v_mtran_no,
                        v_rct_rec (j).rct_brh_rct_code || '/CN',
                        v_rct_rec (j).rct_date,
                        v_allocate_amt);
                END IF;
            END LOOP;
        ELSIF NVL (v_rct_type, 'XXX') = ('TRVD')
        THEN                                        -- TRAVEL DEPOSIT RECEIPTS
            -- Introducing a table to hold deposit
            FOR j IN 1 .. v_rct_rec.COUNT
            LOOP
                FOR i IN 1 .. v_tran_mapping.COUNT
                LOOP
                    INSERT INTO gin_receipt_deposits (rde_code,
                                                      rde_clnt_code,
                                                      rde_drcr,
                                                      rde_pol_policy_no,
                                                      rde_amount,
                                                      rde_allocated_amt,
                                                      rde_balance,
                                                      rde_received_from,
                                                      rde_captured_by,
                                                      rde_captured_date,
                                                      rde_remarks,
                                                      rde_rct_no,
                                                      rde_brh_code,
                                                      rde_ggt_trans_no,
                                                      rde_date,
                                                      rde_receipt_no,
                                                      rde_tran_type,
                                                      rde_cancelled,
                                                      rde_cancel_dt,
                                                      rde_cancel_by)
                             VALUES (
                                 TO_NUMBER (
                                        TO_CHAR (SYSDATE, 'RRRR')
                                     || gin_rde_code_seq.NEXTVAL),
                                 v_rct_rec (j).rct_act_code,
                                 DECODE (v_cancel,  'Y', 'D',  'N', 'C'),
                                 v_tran_mapping (i).tmap_check_mtran_ref_no,
                                 v_tran_mapping (i).tmap_amount,
                                 0,
                                 v_tran_mapping (i).tmap_amount,
                                 v_rct_rec (j).rct_paid_by,
                                 v_rct_rec (j).rct_captured_by,
                                 v_rct_rec (j).rct_date,
                                 v_rct_rec (j).rct_desc,
                                 v_rct_rec (j).rct_no,
                                 v_rct_rec (j).rct_brh_code,
                                 NULL,
                                 SYSDATE,
                                 v_tran_mapping (i).tmap_mtran_ref_no,
                                 'TRVL',
                                 DECODE (v_cancel_rct,  'Y', 'D',  'N', 'C'),
                                 DECODE (v_cancel, 'Y', SYSDATE, NULL),
                                 DECODE (v_cancel,
                                         'Y', v_rct_rec (j).rct_captured_by,
                                         NULL));
                END LOOP;
            END LOOP;
        ELSE
            FOR j IN 1 .. v_rct_rec.COUNT
            LOOP
                FOR i IN 1 .. v_tran_mapping.COUNT
                LOOP
                    IF NVL (v_salvage_rct_param, 'N') != 'Y'
                    THEN
                        IF NVL (v_rct_rec (j).rct_acct_type_id, 'XX') = 'SV'
                        THEN
                            v_clm_os_reserve :=
                                gin_stp_claims_pkg.get_clm_os_reserve (
                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                    'Y');

                            IF NVL (v_clm_os_reserve, 0) != 0
                            THEN
                                raise_error (
                                    'Error- Full Claim Payment NOT DONE, Cannot  Continue');
                            END IF;
                        END IF;
                    END IF;

                    --RAISE_APPLICATION_ERROR (-20001,'V_MTRAN_REF = '||V_TRAN_MAPPING(i).TMAP_CHECK_MTRAN_REF_NO||';'||v_rct_rec (j).rct_no);
                    IF v_cancel = 'Y'
                    THEN
                        SELECT COUNT ('X')
                          INTO v_rec_count
                          FROM gin_recovery_rcts
                         WHERE rrc_receipt_no = v_rct_rec (j).rct_no;

                        IF v_rec_count = 0
                        THEN
                            v_cancel_rct := 'N';
                        END IF;
                    END IF;

                    SELECT NVL (MAX (rrc_code), 0) + 1
                      INTO v_rrc_code
                      FROM gin_recovery_rcts;

                    --RAISE_ERROR('mtran_ref_no-'||v_tran_mapping (i).tmap_check_mtran_ref_no||' = '|| 'mtran_no-'||v_tran_mapping (i).tmap_mtran_no);
                    INSERT INTO gin_recovery_rcts (rrc_code,
                                                   rrc_claim_no,
                                                   rrc_recovery_type,
                                                   rrc_drcr,
                                                   rrc_amount,
                                                   rrc_received_from,
                                                   rrc_received_by,
                                                   rrc_receved_date,
                                                   rrc_remarks,
                                                   rrc_rct_no,
                                                   rrc_brh_code,
                                                   rrc_receipt_no,
                                                   rrc_status)
                             VALUES (
                                 v_rrc_code,
                                 v_tran_mapping (i).tmap_check_mtran_ref_no,
                                 --RRC_CLAIM_NO,
                                 v_rct_rec (j).rct_acct_type_id,
                                 DECODE (v_cancel_rct,  'Y', 'D',  'N', 'C'),
                                 v_tran_mapping (i).tmap_amount,
                                 v_rct_rec (j).rct_paid_by,
                                 v_rct_rec (j).rct_captured_by,
                                 v_rct_rec (j).rct_date,
                                 v_rct_rec (j).rct_desc,
                                 DECODE (
                                     v_cancel_rct,
                                     'N', v_tran_mapping (i).tmap_mtran_ref_no,
                                        v_tran_mapping (i).tmap_mtran_ref_no
                                     || '/CN'),
                                 v_rct_rec (j).rct_brh_code,
                                 v_rct_rec (j).rct_no,
                                 DECODE (v_cancel_rct,  'Y', 'C',  'N', 'A'));

                    -- PROCESS SALVAGE TRANSACTIONS
                    BEGIN
                        SELECT clmp_limit_amt, clmp_per_pt_code
                          INTO v_limit_amt, v_per_pt_code
                          FROM gin_claim_perils
                         WHERE clmp_code = v_tran_mapping (i).tmap_mtran_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'Error determining claim peril...tmap_mtran_no'
                                || v_tran_mapping (i).tmap_mtran_no);
                    END;

                    SELECT DECODE (v_rct_rec (j).rct_acct_type_id,
                                   'SV', 'CS',
                                   'CR')
                      INTO v_trans_type
                      FROM DUAL;

                    SELECT DECODE (v_trans_type, 'CS', 'S', 'R')
                      INTO v_rec_tran_type
                      FROM DUAL;

                    IF v_trans_type = 'CS'
                    THEN
                        BEGIN
                            SELECT COUNT (*)
                              INTO v_cnt
                              FROM gin_clm_salvages
                             WHERE     csd_clmp_code =
                                       v_tran_mapping (i).tmap_mtran_no
                                   AND csd_cmb_claim_no =
                                       v_tran_mapping (i).tmap_check_mtran_ref_no;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                NULL;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'ERROR FETCHING SALVAGE DETAILS...');
                        END;

                        UPDATE gin_gis_transmitals
                           SET ggts_rct_amt = v_tran_mapping (i).tmap_amount
                         WHERE     ggts_cmb_claim_no =
                                   v_tran_mapping (i).tmap_check_mtran_ref_no
                               AND ggts_clmp_code =
                                   v_tran_mapping (i).tmap_mtran_no
                               AND ggts_csd_code IS NOT NULL;
                    ELSE
                        v_cnt := 1;

                        UPDATE gin_gis_transmitals
                           SET ggts_rct_amt = v_tran_mapping (i).tmap_amount
                         WHERE     ggts_cmb_claim_no =
                                   v_tran_mapping (i).tmap_check_mtran_ref_no
                               AND ggts_clmp_code =
                                   v_tran_mapping (i).tmap_mtran_no
                               AND ggts_csd_code IS NULL;
                    END IF;

                    IF NVL (v_cnt, 0) > 0
                    THEN
                        --RAISE_ERROR('CLAIM NUMBER ='||v_tran_mapping (i).tmap_check_mtran_ref_no);
                        BEGIN
                            SELECT reg_clmt_code, reg_third_party
                              INTO v_clmt_code, v_clmnt_type
                              FROM gin_rgstd_claimants, tqc_clients
                             WHERE     reg_third_party = 'S'
                                   AND reg_cld_code = clnt_code
                                   AND reg_cmb_claim_no =
                                       v_tran_mapping (i).tmap_check_mtran_ref_no;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                BEGIN
                                    SELECT cmb_prp_code, 'S'
                                      INTO v_clmt_code, v_clmnt_type
                                      FROM gin_claim_master_bookings
                                     WHERE cmb_claim_no =
                                           v_tran_mapping (i).tmap_check_mtran_ref_no;
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                               'Error determining claimant 1='
                                            || v_tran_mapping (i).tmap_check_mtran_ref_no);
                                END;
                            WHEN OTHERS
                            THEN
                                raise_error (
                                       'Error determining claimant='
                                    || v_tran_mapping (i).tmap_check_mtran_ref_no);
                        END;

                        -- RAISE_ERROR('HERE='||(v_tran_mapping (i).tmap_amount)||';'||v_limit_amt);
                        IF NVL (v_tran_mapping (i).tmap_amount, 0) = 0
                        THEN
                            raise_error (
                                'Error:- Receipt amount not provided...');
                        END IF;

                        IF v_cancel != 'Y'
                        THEN
                            BEGIN
                                gin_claim_utilities.auto_create_clm_salv_recovry (
                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                    --v_clmno IN VARCHAR2,
                                    NULL,              --v_trans_no IN NUMBER,
                                    TRUNC (SYSDATE),
                                    --v_date IN DATE DEFAULT TRUNC(SYSDATE),
                                    v_trans_type,  --v_trans_type IN VARCHAR2,
                                    v_clmt_code,      --v_clmt_code in number,
                                    NULL,             --v_clmr_code IN NUMBER,
                                    NVL (v_rct_rec (j).rct_paymt_memo,
                                         v_rct_rec (j).rct_desc),
                                    --v_description in  varchar2, -- salvage description or recovery description
                                    SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
                                    --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
                                    v_rec_tran_type,
                                    --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
                                    v_rct_rec (j).rct_desc, --v_remarks IN VARCHAR2,
                                    'A',             --v_add_edit IN VARCHAR2,
                                    v_tran_mapping (i).tmap_mtran_no,
                                    --v_per_pt_code,--v_per_code IN NUMBER,
                                    v_tran_mapping (i).tmap_amount,
                                    --v_per_amount IN NUMBER,
                                    tqc_interfaces_pkg.username (
                                        v_rct_rec (j).rct_captured_by), --v_user IN VARCHAR2,
                                    v_ggt_trans_no, --v_new_trans_no OUT NUMBER,
                                    v_clmnt_type,  --v_clmnt_type IN VARCHAR2,
                                    v_rrc_code,
                                    --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
                                    v_rct_rec (j).rct_no--v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
                                                        );
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error ('Error...');
                            -- creating claim transaction
                            END;
                        ELSE
                            BEGIN
                                gin_claim_utilities.auto_create_clmsalv_rec_contra (
                                    v_tran_mapping (i).tmap_check_mtran_ref_no,
                                    --v_clmno IN VARCHAR2,
                                    NULL,              --v_trans_no IN NUMBER,
                                    TRUNC (SYSDATE),
                                    --v_date IN DATE DEFAULT TRUNC(SYSDATE),
                                    v_trans_type,  --v_trans_type IN VARCHAR2,
                                    v_clmt_code,      --v_clmt_code in number,
                                    NULL,             --v_clmr_code IN NUMBER,
                                    NVL (v_rct_rec (j).rct_paymt_memo,
                                         v_rct_rec (j).rct_desc),
                                    --v_description in  varchar2, -- salvage description or recovery description
                                    SUBSTR (v_rct_rec (j).rct_paid_by, 1, 60),
                                    --v_contact     in varchar2, -- Name of salvage buyer or recovery received from
                                    v_rec_tran_type,
                                    --'R',-- v_rct_rec (j).rct_acct_type_id,--v_rec_type   in varchar2,
                                    v_rct_rec (j).rct_desc, --v_remarks IN VARCHAR2,
                                    'A',             --v_add_edit IN VARCHAR2,
                                    v_tran_mapping (i).tmap_mtran_no,
                                    --v_per_pt_code,--v_per_code IN NUMBER,
                                    v_tran_mapping (i).tmap_amount,
                                    --v_per_amount IN NUMBER,
                                    tqc_interfaces_pkg.username (
                                        v_rct_rec (j).rct_captured_by), --v_user IN VARCHAR2,
                                    v_ggt_trans_no, --v_new_trans_no OUT NUMBER,
                                    v_clmnt_type,  --v_clmnt_type IN VARCHAR2,
                                    v_rrc_code,
                                    --v_rrc_code  IN gin_recovery_Rcts.RRC_CODE%TYPE,
                                    v_rct_rec (j).rct_no--v_rrc_rct_no  IN gin_recovery_Rcts.RRC_RCT_NO%TYPE
                                                        );
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    raise_error ('Error...');
                            -- creating claim transaction
                            END;
                        END IF;
                    ELSE
                        NULL;
                    -- CREATE A TICKET TO BE ASSIGNED TO DEFAULT CLAIMS USER, TO PROCESS THE SALVAGE TRANSACTION FROM THE RECEIPT CREATED.....SOLO
                    END IF;
                END LOOP;
            END LOOP;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'POSTING GIS 2RCT :-' || SQLERRM (SQLCODE));
    END post_gis_rct191815;

    --PROCEDURE create_gl_voucher (
    --                              v_gltran_tran_no   NUMBER,
    --                              v_description      VARCHAR2,
    --                              v_user_name        VARCHAR2,
    --                              v_agent_code       NUMBER,
    --                              v_uw_or_clm        VARCHAR2 := 'U',
    --                              v_pol_batch_no     NUMBER DEFAULT NULL,
    --                              v_other_ref        VARCHAR2 DEFAULT NULL
    --                           )
    --                           IS
    --      vgl_trans               Fms_Vouchers_Pkg.tgl_rec_type;
    --      v_gl_cur_code           NUMBER;
    --      v_gl_brn_code           NUMBER;
    --      v_scl_desc              GIN_SUB_CLASSES.SCL_DESC%TYPE;

    --      CURSOR c_gl_brh
    --      IS
    --         SELECT DISTINCT gltran_cur_code,gltran_cur_rate, gltran_brn_code, gltran_auth_date,
    --         gltran_pdl_code,gltran_unit_code,gltran_location_code
    --                    FROM GIN_GL_TRANSACTIONS
    --                   WHERE gltran_tran_no = v_gltran_tran_no
    --                     AND NVL (gltran_posted, 'N') = 'N';

    --      --GROUP BY GLTRAN_BRN_CODE,GLTRAN_CUR_CODE;
    --      /*GLTRAN_BRN_CODE IS NOT NULL  AND
    --      GLTRAN_CUR_CODE IS NOT NULL
    --      */
    --
    --      CURSOR c_gl_trans
    --      IS
    --         SELECT gltran_no,gltran_tran_no, gltran_dc, gltran_trnt_code, gltran_amount,
    --                gltran_gltran_acc, gltran_contra_acc, gltran_cur_code,
    --                gltran_brn_code, gltran_posted, gltran_scl_code,
    --                gltran_pol_policy_no, gltran_level, gltran_auth_date,
    --                gltran_pdl_code,gltran_unit_code, gltran_location_code
    --           FROM GIN_GL_TRANSACTIONS
    --          WHERE gltran_tran_no = v_gltran_tran_no
    --            AND NVL (gltran_posted, 'N') = 'N'
    --            AND gltran_brn_code = v_gl_brn_code
    --            AND gltran_cur_code = v_gl_cur_code;

    --      v_no                    NUMBER                        := -1;
    --      v_brh_code              NUMBER;
    --      vgl_code                NUMBER;
    --      v_cur_code              NUMBER;
    --      v_user_code             NUMBER;
    --      exc_user_error          EXCEPTION;
    --      v_control_acc           VARCHAR2 (20);
    --      v_pol_agnt_agent_code   NUMBER;
    --      v_client_type           VARCHAR2 (10);
    --      v_act_code              NUMBER;
    --      v_org_code              NUMBER;
    --      v_brh_name              VARCHAR2 (200);
    --      v_contra_acc            VARCHAR2 (20);
    --      retval                  BOOLEAN;
    --      v_agnt_sht_desc        tqc_agencies.agn_sht_desc%TYPE;
    --   BEGIN
    --      v_user_code := Fms_Interfaces_Pkg.get_usercode (UPPER (v_user_name));

    --         IF v_user_code IS NULL
    --      THEN
    --         raise_error (   'THE SPECIFIED USERNAME ( '
    --                      || v_user_name
    --                      || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    --                     );
    --      END IF;
    ----RAISE_ERROR ('dot='|| v_agent_code );
    --   --  BEGIN
    --  -- COMMIT;
    --         FOR b IN c_gl_brh
    --         LOOP
    --            v_gl_cur_code := b.gltran_cur_code;
    --            v_gl_brn_code := b.gltran_brn_code;
    --            --RAISE_APPLICATION_ERROR (-20001, v_gl_brn_code);
    --            v_org_code := Fms_Interfaces_Pkg.get_org (b.gltran_brn_code);
    --            FOR i IN c_gl_trans
    --            LOOP
    --
    --
    --               IF v_uw_or_clm = 'U'
    --               THEN
    --                  IF i.gltran_level = 'U'
    --                  THEN
    --                     IF NVL (v_agent_code, 0) = 0
    --                     THEN
    --                        v_client_type := 'D';
    --                     ELSE
    --                        BEGIN
    --                           SELECT agn_act_code, agn_sht_desc
    --                             INTO v_act_code, v_agnt_sht_desc
    --                             FROM tqc_agencies
    --                            WHERE agn_code = v_agent_code;

    --                           IF v_act_code IN (2, 9, 10, 16,32,40)
    --                           THEN
    --                              v_client_type := 'A';
    --                              ELSIF v_act_code = 3
    --                           THEN
    --                              v_client_type  :='B';
    --                           ELSIF v_act_code = 4
    --                           THEN
    --                              v_client_type := 'FI';
    --                           ELSIF v_act_code = 5
    --                           THEN
    --                              v_client_type := 'I';
    --                           ELSIF v_act_code = 6
    --                           THEN
    --                              v_client_type := 'R';
    --                           ELSIF v_act_code = 7
    --                           THEN
    --                              v_client_type := 'FO';
    --                           ELSE
    --                              RAISE_APPLICATION_ERROR
    --                                              (-20001,
    --                                                  'UNDEFINED ACCOUNT TYPE - '
    --                                               || v_act_code
    --                                               || ' -FOR AGENT '
    --                                               || v_agnt_sht_desc
    --                                              );
    --                           END IF;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              RAISE_APPLICATION_ERROR (-20021,
    --                                                          'AGENT - '
    --                                                       || v_agent_code
    --                                                       || ' NOT FOUND '
    --                                                      );
    --                           WHEN OTHERS
    --                           THEN
    --                              RAISE_APPLICATION_ERROR (-20022,
    --                                                          'AGENT INFO '
    --                                                       || SQLERRM (SQLCODE)
    --                                                      );
    --                        END;
    --                     END IF;

    --                     IF v_client_type IS NULL
    --                     THEN
    --                        RAISE_APPLICATION_ERROR
    --                                              (-20023,
    --                                               'CANNOT POST NULL CLIENT TYPE'
    --                                              );
    --                     ELSE
    --                        IF i.gltran_trnt_code IN ('PREMTAX','WTHVAT','UPR','MUPR','COPHFUND' ,'PRMTX-U')
    --                        THEN
    --                           v_control_acc := i.gltran_gltran_acc;
    --                        ELSE
    --                           v_control_acc :=
    --                              Fms_Interfaces_Pkg.sl_control_acc
    --                                                               ('GIS',
    --                                                                v_client_type
    --                                                               );
    --                        END IF;
    --                     END IF;

    --                     v_contra_acc := i.gltran_contra_acc;
    --                  ELSIF i.gltran_level IN ('MAN', 'FSTSUP', 'SECSUP', 'QST','POOL','XOL')
    --                  THEN                                 --QST  ADDED BY WAIYAKI
    --                     v_control_acc := i.gltran_gltran_acc;

    --                     IF v_control_acc IS NULL
    --                     THEN
    --                        v_control_acc :=
    --                           Fms_Interfaces_Pkg.sl_control_acc ('GIS',
    --                                                              'R',
    --                                                              i.gltran_level
    --                                                             );
    --                     END IF;

    --                     v_contra_acc := i.gltran_contra_acc;
    --                  ELSIF i.gltran_level IN ('FO', 'FI', 'I')
    --                  THEN                                   --FI ADDED BY WAIYAKI
    --                     IF i.gltran_level = 'I'
    --                     THEN
    --                        v_control_acc := i.gltran_gltran_acc;

    --                        IF NVL (v_control_acc, 'DEF') = 'DEF'
    --                        THEN
    --                           v_control_acc :=
    --                              Fms_Interfaces_Pkg.sl_control_acc ('GIS', 'FI');
    --                        END IF;
    --                     --CHANGED BY MAYNARD.WRONG ACC. BEING PICKED IN FMS WHEREAS THE ACCOUNT HAS ALREADY BEEN DEFINED IN GIS. ---v_Control_Acc := FMS_INTERFACES_PKG.SL_CONTROL_ACC('GIS','FI');
    --                     ELSE
    --                        v_control_acc := i.gltran_gltran_acc;

    --                        IF NVL (v_control_acc, 'DEF') = 'DEF'
    --                        THEN
    --                           v_control_acc :=
    --                              Fms_Interfaces_Pkg.sl_control_acc
    --                                                              ('GIS',
    --                                                               i.gltran_level
    --                                                              );
    --                        END IF;
    --                     --CHANGED BY MAYNARD.WRONG ACC. BEING PICKED IN FMS WHEREAS THE ACCOUNT HAS ALREADY BEEN DEFINED IN GIS. ---v_Control_Acc := FMS_INTERFACES_PKG.SL_CONTROL_ACC('GIS',I.GLTRAN_LEVEL);
    --                     END IF;

    --                     v_contra_acc := i.gltran_contra_acc;
    --                  ELSE
    --                     RAISE_APPLICATION_ERROR (-20024,
    --                                                 'TRANSACTION LEVEL '
    --                                              || i.gltran_level
    --                                              || 'NOT KNOWN BY THE SYSTEM..'
    --                                             );
    --                  END IF;
    --               ELSE
    --                  v_contra_acc := i.gltran_gltran_acc;

    --                  IF i.gltran_level IN ('U', 'FI')
    --                  THEN
    --                     v_control_acc := i.gltran_contra_acc;
    --              -- raise_error('hehehehe');
    --                  ELSIF i.gltran_level IN ('MAN', 'FSTSUP', 'SECSUP', 'QST','POOL','XOL')
    --                  THEN                                 --QST  ADDED BY WAIYAKI
    --                     v_control_acc := i.gltran_contra_acc;

    --                     IF v_control_acc IS NULL
    --                     THEN
    --                        v_control_acc :=
    --                           Fms_Interfaces_Pkg.sl_control_acc ('GIS',
    --                                                              'R',
    --                                                              i.gltran_level
    --                                                             );
    --                     END IF;
    --                  ELSIF i.gltran_level IN ('FO')
    --                  THEN                                   --FI ADDED BY WAIYAKI
    --                     v_control_acc := i.gltran_contra_acc;
    ----raise_error('hehe='||v_control_acc);
    --                     IF v_control_acc IS NULL
    --                     THEN
    --            -- raise_error('hehehre=');
    --                        v_control_acc :=
    --                           Fms_Interfaces_Pkg.sl_control_acc ('GIS',
    --                                                              i.gltran_level
    --                                                             );
    --                     END IF;
    --                  --CHANGED BY MAYNARD.WRONG ACC. BEING PICKED IN FMS WHEREAS THE ACCOUNT HAS ALREADY BEEN DEFINED IN GIS. ---v_Control_Acc := FMS_INTERFACES_PKG.SL_CONTROL_ACC('GIS',I.GLTRAN_LEVEL);
    --                  ELSE
    --                     RAISE_APPLICATION_ERROR (-20025,
    --                                                 'TRANSACTION LEVEL '
    --                                              || i.gltran_level
    --                                              || 'NOT KNOWN BY THE SYSTEM..'
    --                                             );
    --                  END IF;
    --               END IF;

    --             --  RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
    --                  -- IF  i.GLTRAN_TRNT_CODE ='MPSD' THEN
    --                  -- RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||' HERE'|| i.GLTRAN_TRNT_CODE||' LEVEL = '||I.GLTRAN_LEVEL
    --                  -- ||'  = '||i.GLTRAN_TRAN_NO);
    --                  -- END IF;
    --                BEGIN
    --                    SELECT SCL_DESC
    --                    INTO v_scl_desc
    --                    FROM GIN_SUB_CLASSES
    --                    WHERE SCL_CODE=i.gltran_scl_code;
    --                EXCEPTION
    --                WHEN OTHERS THEN
    --                   --RAISE_ERROR('ERROR GETTING SUB CLAS');
    --                   NULL;
    --                END;
    --
    --               IF Fms_Interfaces_Pkg.valid_trns_acc (v_contra_acc,
    --                                                     v_org_code,
    --                                                     b.gltran_brn_code
    --                                                    ) = FALSE
    --               THEN
    --             --  RAISE_eRROR('['||v_contra_acc||']=['||v_org_code||']=['||b.gltran_brn_code||']');
    --             ---RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
    --                  v_brh_name := Fms_Interfaces_Pkg.brh_name (b.gltran_brn_code);
    --                   raise_error (   ' GL A/C - '
    --                               || v_contra_acc
    --                               || ' UNDEFINED IN  '
    --                               || v_brh_name
    --                               || ' CODE '
    --                               || i.gltran_trnt_code
    --                               || ' CLASS = '
    --                               || NVL(v_scl_desc,i.gltran_scl_code)
    --                               || ' LVL ='
    --                               || i.gltran_level
    --                               || ' CLIENT TYPE - '
    --                               || v_client_type
    --                               || 'gltran_brn_code'
    --                               ||b.gltran_brn_code
    --                              );
    --               END IF;

    ----RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE);
    --               IF Fms_Interfaces_Pkg.valid_trns_acc (v_control_acc,
    --                                                     v_org_code,
    --                                                     b.gltran_brn_code
    --                                                    ) = FALSE
    --               THEN
    --                  --RAISE_APPLICATION_ERROR (-20021, v_Control_Acc||'='||v_org_code||'='||b.GLTRAN_BRN_CODE||'='||I.GLTRAN_LEVEL||'='||b.GLTRAN_BRN_CODE);
    --        --  RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
    --                  v_brh_name :=
    --                              Fms_Interfaces_Pkg.brh_name (b.gltran_brn_code);
    ----                  raise_error (   ' GL A/C - '
    ----                               || v_control_acc
    ----                               || ' UNDEFINED IN '
    ----                               || v_brh_name
    ----                               || ' CODE '
    ----                               || i.gltran_trnt_code
    ----                               || ' CLASS = '
    ----                               || NVL(v_scl_desc,i.gltran_scl_code)
    ----                               || ' LVL ='
    ----                               || i.gltran_level
    ----                               || ' CLIENT TYPE - '
    ----                               || v_client_type
    ----                              );
    --               END IF;

    --               BEGIN
    --                  v_no := v_no + 2;
    --                  --RAISE_ERROR('VGL_CODE ='||vgl_trans.count ||'V_CONTRA_ACC   '||v_contra_acc||'  = '||B.GLTRAN_BRN_CODE);
    --                  Interface_append_gl(v_gltran_tran_no,
    --                                      i.gltran_trnt_code,--v_trans_code           NUMBER,
    --                                      v_user_name,--v_raise_by          VARCHAR2,
    --                                      v_pol_batch_no,--v_pol_code          NUMBER,
    --                                      i.gltran_scl_code,--v_prod_code         NUMBER,
    --                                      NULL,--v_vchr_no             VARCHAR2,
    --                                      NULL,--v_opr_code          NUMBER,
    --                                      NULL,--v_oppr_code         NUMBER,
    --                                      NULL,--v_rcpt_no             VARCHAR2,
    --                                      v_no,--v_count             NUMBER,
    --                                      'GL TRANS ' || i.gltran_trnt_code,--v_narrative         VARCHAR2,
    --                                      ABS (i.gltran_amount),--v_amount            NUMBER,
    --                                      i.gltran_dc,--v_drcr              VARCHAR2,
    --                                      v_contra_acc,--v_acc_number1          VARCHAR2,
    --                                      v_control_acc,--v_acc_number2          VARCHAR2,
    --                                      i.gltran_brn_code,--v_branch_code       NUMBER,
    --                                      vgl_trans,--v_trn_rec   IN OUT  Fms_Vouchers_Pkg.Tgl_rec_type,
    --                                      i.gltran_pdl_code,
    --                                      i.gltran_unit_code,
    --                                      i.gltran_location_code
    --                                      );
    --                  /*Fms_Vouchers_Pkg.append_gl_trans
    --                            (v_no,
    --                             'GL TRANS ' || i.gltran_trnt_code,  --v_narrative
    --                             ABS (i.gltran_amount),                 --v_amount
    --                             i.gltran_dc,                             --v_drcr
    --                             v_contra_acc,                        --v_account1
    --                             v_control_acc, --i.GLTRAN_CONTRA_ACC,--v_account2
    --                             i.gltran_brn_code,                     --v_branch
    --                             vgl_trans
    --                            );*/

    --                  UPDATE GIN_GL_TRANSACTIONS
    --                     SET gltran_posted = 'Y'
    --                   WHERE gltran_tran_no = i.gltran_tran_no;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     RAISE_APPLICATION_ERROR
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || i.gltran_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END LOOP;
    --
    --               Interface_update_vgl(v_gltran_tran_no,
    --                                  'VARIOUS',--v_trans_code     NUMBER,
    --                                  v_user_name,--v_raise_by          VARCHAR2,
    --                                  v_pol_batch_no,--v_pol_code          NUMBER,
    --                                  b.gltran_auth_date,--v_date              DATE,
    --                                  NULL,--v_opr_code          NUMBER,
    --                                  NULL,--v_oppr_code         NUMBER,
    --                                  'GIS TRANS',--v_btc_description   VARCHAR2,
    --                                  'JV',--v_btc_type             VARCHAR2,
    --                                  b.gltran_brn_code,--v_branch_code       NUMBER,
    --                                  NVL (v_description, 'GIS TRANSACTIONS VOUCHER'),--v_description       VARCHAR2,
    --                                  NVL(v_other_ref,'GIS'),--v_ref             VARCHAR2,
    --                                  vgl_trans,--v_gl_trans  IN OUT  Fms_Vouchers_Pkg.Tgl_rec_type
    --                                  v_uw_or_clm,
    --                                  v_agent_code,
    --                                  b.gltran_cur_code,
    --                                  b.gltran_cur_rate,
    --                                  b.gltran_pdl_code,
    --                                      b.gltran_unit_code,
    --                                      b.gltran_location_code);
    ----            vgl_code :=
    ----               Fms_Vouchers_Pkg.update_vgl('GIS TRANS',                            --V_BTC_DESCRIPTION
    ----                                           'JV',                                --V_BTC_TYPE varchar2,
    ----                                           b.gltran_brn_code,                     --V_BRH_CODE number,
    ----                                           b.gltran_auth_date,
    ----                        /*CHANGED BY mAYNARD. added authorisation date instead of sysdate*/
    ----                                                                     ---TRUNC(SYSDATE),   --V_DT date,
    ----                                           NVL (v_description, 'GIS TRANSACTIONS VOUCHER'),
    ----                                                                             --V_DESCRIPTION varchar2,
    ----                                           'GIS',                                    --V_REF varchar2,
    ----                                           v_user_code,                          --V_RAISED_BY number,
    ----                                           b.gltran_cur_code,                     --V_CUR_CODE number,
    ----                                           vgl_trans ,                        --V_TRANS IN tgl_rec_type
    ----                                           b.gltran_cur_rate
    ----                                          );
    ----            Fms_Interfaces_Pkg.post_je (vgl_code, v_user_code);
    ----raise_error('out');
    --            UPDATE GIN_GL_TRANSACTIONS
    --               SET gltran_posted = 'Y'
    --             WHERE gltran_tran_no = v_gltran_tran_no
    --               AND NVL (gltran_posted, 'N') = 'N';
    --         END LOOP;
    --         -- ADDED BY WAIYAKI ON APR-04-2006 to LOG those trans that are not posted to finance
    --         IF vgl_code IS NULL
    --         THEN
    --            INSERT INTO GIN_GL_TRANS_NOT_POSTED
    --                        (gltran_tran_no, description, user_name,
    --                         agent_code, uw_or_clm
    --                        )
    --                 VALUES (v_gltran_tran_no, v_description, v_user_name,
    --                         v_agent_code, v_uw_or_clm
    --                        );
    --         END IF;
    ----      EXCEPTION
    ----         WHEN exc_user_error
    ----         THEN
    ----            RAISE_APPLICATION_ERROR
    ----                                 (-20027,
    ----                                     'THE SPECIFIED USERNAME ( '
    ----                                  || v_user_name
    ----                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    ----                                 );
    ----         WHEN OTHERS
    ----         THEN
    ----            RAISE_APPLICATION_ERROR (-20028,
    ----                                     'POST GL :- ' || SQLERRM (SQLCODE)
    ----                                    );
    ----      END;
    --   END;
    PROCEDURE create_gl_voucher (v_gltran_tran_no   NUMBER,
                                 v_description      VARCHAR2,
                                 v_user_name        VARCHAR2,
                                 v_agent_code       NUMBER,
                                 v_uw_or_clm        VARCHAR2:= 'U',
                                 v_pol_batch_no     NUMBER DEFAULT NULL,
                                 v_other_ref        VARCHAR2 DEFAULT NULL)
    IS
        vgl_trans               fms_vouchers_pkg.tgl_rec_type;
        v_gl_cur_code           NUMBER;
        v_gl_brn_code           NUMBER;
        v_scl_desc              gin_sub_classes.scl_desc%TYPE;
        v_account_no            NUMBER;

        CURSOR c_gl_brh IS
            SELECT DISTINCT gltran_cur_code,
                            gltran_cur_rate,
                            gltran_brn_code,
                            gltran_auth_date,
                            gltran_pdl_code,
                            gltran_unit_code,
                            gltran_location_code
              FROM gin_gl_transactions
             WHERE     gltran_tran_no = v_gltran_tran_no
                   AND NVL (gltran_posted, 'N') = 'N';

        --GROUP BY GLTRAN_BRN_CODE,GLTRAN_CUR_CODE;
        /*GLTRAN_BRN_CODE IS NOT NULL  AND
        GLTRAN_CUR_CODE IS NOT NULL
        */
        CURSOR c_gl_trans IS
            SELECT gltran_no,
                   gltran_tran_no,
                   gltran_dc,
                   gltran_trnt_code,
                   gltran_amount,
                   gltran_gltran_acc,
                   gltran_contra_acc,
                   gltran_cur_code,
                   gltran_brn_code,
                   gltran_posted,
                   gltran_scl_code,
                   gltran_pol_policy_no,
                   gltran_level,
                   gltran_auth_date,
                   gltran_pdl_code,
                   gltran_unit_code,
                   gltran_location_code
              FROM gin_gl_transactions
             WHERE     gltran_tran_no = v_gltran_tran_no
                   AND NVL (gltran_posted, 'N') = 'N'
                   AND gltran_brn_code = v_gl_brn_code
                   AND gltran_cur_code = v_gl_cur_code;

        v_no                    NUMBER := -1;
        v_brh_code              NUMBER;
        vgl_code                NUMBER;
        v_cur_code              NUMBER;
        v_user_code             NUMBER;
        exc_user_error          EXCEPTION;
        v_control_acc           VARCHAR2 (20);
        v_pol_agnt_agent_code   NUMBER;
        v_client_type           VARCHAR2 (10);
        v_act_code              NUMBER;
        v_org_code              NUMBER;
        v_brh_name              VARCHAR2 (200);
        v_contra_acc            VARCHAR2 (20);
        retval                  BOOLEAN;
        THIS                    BOOLEAN;
        v_agnt_sht_desc         tqc_agencies.agn_sht_desc%TYPE;
    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            raise_error (
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        END IF;

        --RAISE_ERROR ('dot='|| v_agent_code );
        --  BEGIN
        -- COMMIT;
        FOR b IN c_gl_brh
        LOOP
            v_gl_cur_code := b.gltran_cur_code;
            v_gl_brn_code := b.gltran_brn_code;
            --RAISE_APPLICATION_ERROR (-20001, v_gl_brn_code);
            v_org_code := fms_interfaces_pkg.get_org (b.gltran_brn_code);

            --        RAISE_ERROR(v_gl_cur_code||' ; '||v_gl_brn_code||' ; '||v_gltran_tran_no);
            FOR i IN c_gl_trans
            LOOP
                IF v_uw_or_clm = 'U'
                THEN
                    IF i.gltran_level = 'U'
                    THEN
                        IF NVL (v_agent_code, 0) = 0
                        THEN
                            v_client_type := 'D';
                        ELSE
                            BEGIN
                                SELECT agn_act_code, agn_sht_desc, agn_acc_no
                                  INTO v_act_code,
                                       v_agnt_sht_desc,
                                       v_account_no
                                  FROM tqc_agencies
                                 WHERE agn_code = v_agent_code;

                                IF v_act_code IN (2,
                                                  9,
                                                  10,
                                                  16,
                                                  32,
                                                  40)
                                THEN
                                    v_client_type := 'A';
                                ELSIF v_act_code = 3
                                THEN
                                    v_client_type := 'B';
                                ELSIF v_act_code = 4
                                THEN
                                    v_client_type := 'FI';
                                ELSIF v_act_code = 5
                                THEN
                                    v_client_type := 'I';
                                ELSIF v_act_code = 6
                                THEN
                                    v_client_type := 'R';
                                ELSIF v_act_code = 7
                                THEN
                                    v_client_type := 'FO';
                                ELSE
                                    raise_application_error (
                                        -20001,
                                           'UNDEFINED ACCOUNT TYPE - '
                                        || v_act_code
                                        || ' -FOR AGENT '
                                        || v_agnt_sht_desc);
                                END IF;
                            EXCEPTION
                                WHEN NO_DATA_FOUND
                                THEN
                                    raise_application_error (
                                        -20021,
                                           'AGENT - '
                                        || v_agent_code
                                        || ' NOT FOUND ');
                                WHEN OTHERS
                                THEN
                                    raise_application_error (
                                        -20022,
                                        'AGENT INFO ' || SQLERRM (SQLCODE));
                            END;
                        END IF;

                        --RAISE_ERROR(v_client_type);
                        IF v_client_type IS NULL
                        THEN
                            raise_application_error (
                                -20023,
                                'CANNOT POST NULL CLIENT TYPE');
                        ELSE
                            v_control_acc := i.gltran_gltran_acc;

                            IF v_control_acc IS NULL
                            THEN
                                IF     v_account_no IS NOT NULL
                                   AND v_client_type = 'R'
                                THEN
                                    v_control_acc := v_account_no;
                                ELSE
                                    v_control_acc :=
                                        fms_interfaces_pkg.sl_control_acc (
                                            'GIS',
                                            v_client_type);
                                END IF;
                            END IF;
                        END IF;

                        v_contra_acc := i.gltran_contra_acc;
                    --                  IF i.GLTRAN_TRNT_CODE LIKE 'SERV%' THEN
                    --RAISE_ERROR(v_contra_acc);
                    --                IF v_contra_acc='30001014'
                    --                THEN
                    --                RAISE_ERROR('DDFFFF HERE');
                    --                END IF;
                    --                  END IF;
                    --    RAISE_ERROR(v_control_acc||';'||v_contra_acc);
                    ELSIF i.gltran_level IN ('MAN',
                                             'FSTSUP',
                                             'SECSUP',
                                             'QST',
                                             'POOL',
                                             'XOL')
                    THEN                               --QST  ADDED BY WAIYAKI
                        v_control_acc := i.gltran_gltran_acc;

                        IF v_control_acc IS NULL
                        THEN
                            v_control_acc :=
                                fms_interfaces_pkg.sl_control_acc (
                                    'GIS',
                                    'R',
                                    i.gltran_level);
                        END IF;

                        v_contra_acc := i.gltran_contra_acc;
                    ELSIF i.gltran_level IN ('FO', 'FI', 'I')
                    THEN                                 --FI ADDED BY WAIYAKI
                        IF i.gltran_level = 'I'
                        THEN
                            v_control_acc := i.gltran_gltran_acc;

                            IF NVL (v_control_acc, 'DEF') = 'DEF'
                            THEN
                                v_control_acc :=
                                    fms_interfaces_pkg.sl_control_acc ('GIS',
                                                                       'FI');
                            END IF;
                        --CHANGED BY MAYNARD.WRONG ACC. BEING PICKED IN FMS WHEREAS THE ACCOUNT HAS ALREADY BEEN DEFINED IN GIS. ---v_Control_Acc := FMS_INTERFACES_PKG.SL_CONTROL_ACC('GIS','FI');
                        ELSE
                            v_control_acc := i.gltran_gltran_acc;

                            IF NVL (v_control_acc, 'DEF') = 'DEF'
                            THEN
                                v_control_acc :=
                                    fms_interfaces_pkg.sl_control_acc (
                                        'GIS',
                                        i.gltran_level);
                            END IF;
                        --CHANGED BY MAYNARD.WRONG ACC. BEING PICKED IN FMS WHEREAS THE ACCOUNT HAS ALREADY BEEN DEFINED IN GIS. ---v_Control_Acc := FMS_INTERFACES_PKG.SL_CONTROL_ACC('GIS',I.GLTRAN_LEVEL);
                        END IF;

                        v_contra_acc := i.gltran_contra_acc;
                    ELSE
                        raise_application_error (
                            -20024,
                               'TRANSACTION LEVEL '
                            || i.gltran_level
                            || 'NOT KNOWN BY THE SYSTEM..');
                    END IF;
                ELSE
                    v_contra_acc := i.gltran_gltran_acc;

                    IF i.gltran_level IN ('U', 'FI')
                    THEN
                        v_control_acc := i.gltran_contra_acc;
                    -- raise_error('hehehehe');
                    ELSIF i.gltran_level IN ('MAN',
                                             'FSTSUP',
                                             'SECSUP',
                                             'QST',
                                             'POOL',
                                             'XOL')
                    THEN                               --QST  ADDED BY WAIYAKI
                        v_control_acc := i.gltran_contra_acc;

                        IF v_control_acc IS NULL
                        THEN
                            v_control_acc :=
                                fms_interfaces_pkg.sl_control_acc (
                                    'GIS',
                                    'R',
                                    i.gltran_level);
                        END IF;
                    ELSIF i.gltran_level IN ('FO')
                    THEN                                 --FI ADDED BY WAIYAKI
                        v_control_acc := i.gltran_contra_acc;


                        IF v_control_acc IS NULL
                        THEN
                            -- raise_error('hehehre=');
                            v_control_acc :=
                                fms_interfaces_pkg.sl_control_acc (
                                    'GIS',
                                    i.gltran_level);
                        END IF;
                    --CHANGED BY MAYNARD.WRONG ACC. BEING PICKED IN FMS WHEREAS THE ACCOUNT HAS ALREADY BEEN DEFINED IN GIS. ---v_Control_Acc := FMS_INTERFACES_PKG.SL_CONTROL_ACC('GIS',I.GLTRAN_LEVEL);
                    ELSE
                        raise_application_error (
                            -20025,
                               'TRANSACTION LEVEL '
                            || i.gltran_level
                            || 'NOT KNOWN BY THE SYSTEM..');
                    END IF;
                END IF;

                --     RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
                --      IF  i.GLTRAN_TRNT_CODE LIKE '%SERV%' THEN
                --      RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||' HERE'|| i.GLTRAN_TRNT_CODE||' LEVEL = '||I.GLTRAN_LEVEL
                --      ||'  = '||i.GLTRAN_TRAN_NO);
                --      END IF;

                BEGIN
                    SELECT scl_desc
                      INTO v_scl_desc
                      FROM gin_sub_classes
                     WHERE scl_code = i.gltran_scl_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        --RAISE_ERROR('ERROR GETTING SUB CLAS');
                        NULL;
                END;

                --RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
                IF fms_interfaces_pkg.valid_trns_acc (v_contra_acc,
                                                      v_org_code,
                                                      b.gltran_brn_code) =
                   FALSE
                THEN
                    --RAISE_eRROR('['||v_contra_acc||']=['||v_org_code||']=['||b.gltran_brn_code||']');
                    ---RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
                    v_brh_name :=
                        fms_interfaces_pkg.brh_name (b.gltran_brn_code);
                    --  raise_ERROR('gltran_trnt_code'||I.gltran_gltran_acc);
                    raise_error (
                           ' GL CONTRAS A/C - ='
                        || v_contra_acc
                        || ' UNDEFINED IN  '
                        || v_org_code
                        || ' CODE '
                        || b.gltran_brn_code
                        || ' CLASS = '
                        || NVL (v_scl_desc, i.gltran_scl_code)
                        || ' LVL ='
                        || i.gltran_level
                        || ' CLIENT TYPE - '
                        || v_client_type);
                END IF;

                --RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'v_org_code='||v_org_code);
                IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
                                                      v_org_code,
                                                      b.gltran_brn_code) =
                   FALSE
                THEN
                    --RAISE_APPLICATION_ERROR (-20021, v_Control_Acc||'='||v_org_code||'='||b.GLTRAN_BRN_CODE||'='||I.GLTRAN_LEVEL||'='||b.GLTRAN_BRN_CODE);
                    --  RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
                    v_brh_name :=
                        fms_interfaces_pkg.brh_name (b.gltran_brn_code);
                    raise_error (
                           ' GL CONTROL A/C -= '
                        || v_control_acc
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || i.gltran_trnt_code
                        || ' CLASS = '
                        || NVL (v_scl_desc, i.gltran_scl_code)
                        || ' LVL ='
                        || i.gltran_level
                        || ' CLIENT TYPE - '
                        || v_client_type);
                END IF;

                BEGIN
                    v_no := v_no + 2;
                    --        RAISE_ERROR('V_CONTRA_ACC   '||v_contra_acc||'v_control_acc=='||v_control_acc);
                    interface_append_gl (v_gltran_tran_no,
                                         i.gltran_trnt_code, --v_trans_code           NUMBER,
                                         v_user_name, --v_raise_by          VARCHAR2,
                                         v_pol_batch_no, --v_pol_code          NUMBER,
                                         i.gltran_scl_code, --v_prod_code         NUMBER,
                                         NULL, --v_vchr_no             VARCHAR2,
                                         NULL,   --v_opr_code          NUMBER,
                                         NULL,   --v_oppr_code         NUMBER,
                                         NULL, --v_rcpt_no             VARCHAR2,
                                         v_no,   --v_count             NUMBER,
                                         'GL TRANS ' || i.gltran_trnt_code,
                                         --v_narrative         VARCHAR2,
                                         ABS (i.gltran_amount), --v_amount            NUMBER,
                                         i.gltran_dc, --v_drcr              VARCHAR2,
                                         v_contra_acc, --v_acc_number1          VARCHAR2,
                                         v_control_acc, --v_acc_number2          VARCHAR2,
                                         i.gltran_brn_code, --v_branch_code       NUMBER,
                                         vgl_trans,
                                         --v_trn_rec   IN OUT  Fms_Vouchers_Pkg.Tgl_rec_type,
                                         i.gltran_pdl_code,
                                         i.gltran_unit_code,
                                         i.gltran_location_code);

                    /*Fms_Vouchers_Pkg.append_gl_trans
                              (v_no,
                               'GL TRANS ' || i.gltran_trnt_code,  --v_narrative
                               ABS (i.gltran_amount),                 --v_amount
                               i.gltran_dc,                             --v_drcr
                               v_contra_acc,                        --v_account1
                               v_control_acc, --i.GLTRAN_CONTRA_ACC,--v_account2
                               i.gltran_brn_code,                     --v_branch
                               vgl_trans
                              );*/
                    UPDATE gin_gl_transactions
                       SET gltran_posted = 'Y'
                     WHERE gltran_tran_no = i.gltran_tran_no;
                --            EXCEPTION
                --               WHEN OTHERS
                --               THEN
                --                  raise_application_error (-20026,
                --                                              'ERROR POSTING GL TRANS FOR '
                --                                           || i.gltran_trnt_code
                --                                           || ':- '
                --                                           || SQLERRM (SQLCODE)
                --                                          );
                END;
            END LOOP;

            interface_update_vgl (
                v_gltran_tran_no,
                'VARIOUS',                          --v_trans_code     NUMBER,
                v_user_name,                   --v_raise_by          VARCHAR2,
                v_pol_batch_no,                  --v_pol_code          NUMBER,
                b.gltran_auth_date,                --v_date              DATE,
                NULL,                            --v_opr_code          NUMBER,
                NULL,                            --v_oppr_code         NUMBER,
                'GIS TRANS',                   --v_btc_description   VARCHAR2,
                'JV',                       --v_btc_type             VARCHAR2,
                b.gltran_brn_code,
                --v_branch_code       NUMBER,
                NVL (v_description, 'GIS TRANSACTIONS VOUCHER'),
                --v_description       VARCHAR2,
                NVL (v_other_ref, 'GIS'),
                --v_ref             VARCHAR2,
                vgl_trans,
                --v_gl_trans  IN OUT  Fms_Vouchers_Pkg.Tgl_rec_type
                v_uw_or_clm,
                v_agent_code,
                b.gltran_cur_code,
                b.gltran_cur_rate,
                b.gltran_pdl_code,
                b.gltran_unit_code,
                b.gltran_location_code);

            --            vgl_code :=
            --               Fms_Vouchers_Pkg.update_vgl('GIS TRANS',                            --V_BTC_DESCRIPTION
            --                                           'JV',                                --V_BTC_TYPE varchar2,
            --                                           b.gltran_brn_code,                     --V_BRH_CODE number,
            --                                           b.gltran_auth_date,
            --                        /*CHANGED BY mAYNARD. added authorisation date instead of sysdate*/
            --                                                                     ---TRUNC(SYSDATE),   --V_DT date,
            --                                           NVL (v_description, 'GIS TRANSACTIONS VOUCHER'),
            --                                                                             --V_DESCRIPTION varchar2,
            --                                           'GIS',                                    --V_REF varchar2,
            --                                           v_user_code,                          --V_RAISED_BY number,
            --                                           b.gltran_cur_code,                     --V_CUR_CODE number,
            --                                           vgl_trans ,                        --V_TRANS IN tgl_rec_type
            --                                           b.gltran_cur_rate
            --                                          );
            --            Fms_Interfaces_Pkg.post_je (vgl_code, v_user_code);
            --raise_error('out');
            UPDATE gin_gl_transactions
               SET gltran_posted = 'Y'
             WHERE     gltran_tran_no = v_gltran_tran_no
                   AND NVL (gltran_posted, 'N') = 'N';
        END LOOP;

        -- ADDED BY WAIYAKI ON APR-04-2006 to LOG those trans that are not posted to finance
        IF vgl_code IS NULL
        THEN
            INSERT INTO gin_gl_trans_not_posted (gltran_tran_no,
                                                 description,
                                                 user_name,
                                                 agent_code,
                                                 uw_or_clm)
                 VALUES (v_gltran_tran_no,
                         v_description,
                         v_user_name,
                         v_agent_code,
                         v_uw_or_clm);
        END IF;
    --      EXCEPTION
    --         WHEN exc_user_error
    --         THEN
    --            RAISE_APPLICATION_ERROR
    --                                 (-20027,
    --                                     'THE SPECIFIED USERNAME ( '
    --                                  || v_user_name
    --                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    --                                 );
    --         WHEN OTHERS
    --         THEN
    --            RAISE_APPLICATION_ERROR (-20028,
    --                                     'POST GL :- ' || SQLERRM (SQLCODE)
    --                                    );
    --      END;
    END;

    PROCEDURE create_gl_voucher291015 (
        v_gltran_tran_no   NUMBER,
        v_description      VARCHAR2,
        v_user_name        VARCHAR2,
        v_agent_code       NUMBER,
        v_uw_or_clm        VARCHAR2:= 'U',
        v_pol_batch_no     NUMBER DEFAULT NULL,
        v_other_ref        VARCHAR2 DEFAULT NULL)
    IS
        vgl_trans               fms_vouchers_pkg.tgl_rec_type;
        v_gl_cur_code           NUMBER;
        v_gl_brn_code           NUMBER;
        v_scl_desc              gin_sub_classes.scl_desc%TYPE;

        CURSOR c_gl_brh IS
            SELECT DISTINCT gltran_cur_code,
                            gltran_cur_rate,
                            gltran_brn_code,
                            gltran_auth_date,
                            gltran_pdl_code,
                            gltran_unit_code,
                            gltran_location_code
              FROM gin_gl_transactions
             WHERE     gltran_tran_no = v_gltran_tran_no
                   AND NVL (gltran_posted, 'N') = 'N';

        --GROUP BY GLTRAN_BRN_CODE,GLTRAN_CUR_CODE;
        /*GLTRAN_BRN_CODE IS NOT NULL  AND
        GLTRAN_CUR_CODE IS NOT NULL
        */
        CURSOR c_gl_trans IS
            SELECT gltran_no,
                   gltran_tran_no,
                   gltran_dc,
                   gltran_trnt_code,
                   gltran_amount,
                   gltran_gltran_acc,
                   gltran_contra_acc,
                   gltran_cur_code,
                   gltran_brn_code,
                   gltran_posted,
                   gltran_scl_code,
                   gltran_pol_policy_no,
                   gltran_level,
                   gltran_auth_date,
                   gltran_pdl_code,
                   gltran_unit_code,
                   gltran_location_code
              FROM gin_gl_transactions
             WHERE     gltran_tran_no = v_gltran_tran_no
                   AND NVL (gltran_posted, 'N') = 'N'
                   AND gltran_brn_code = v_gl_brn_code
                   AND gltran_cur_code = v_gl_cur_code;

        v_no                    NUMBER := -1;
        v_brh_code              NUMBER;
        vgl_code                NUMBER;
        v_cur_code              NUMBER;
        v_user_code             NUMBER;
        exc_user_error          EXCEPTION;
        v_control_acc           VARCHAR2 (20);
        v_pol_agnt_agent_code   NUMBER;
        v_client_type           VARCHAR2 (10);
        v_act_code              NUMBER;
        v_org_code              NUMBER;
        v_brh_name              VARCHAR2 (200);
        v_contra_acc            VARCHAR2 (20);
        retval                  BOOLEAN;
        v_agnt_sht_desc         tqc_agencies.agn_sht_desc%TYPE;
    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            raise_error (
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        END IF;

        --RAISE_ERROR ('dot='|| v_agent_code );
        --  BEGIN
        -- COMMIT;
        FOR b IN c_gl_brh
        LOOP
            v_gl_cur_code := b.gltran_cur_code;
            v_gl_brn_code := b.gltran_brn_code;
            --RAISE_APPLICATION_ERROR (-20001, v_gl_brn_code);
            v_org_code := fms_interfaces_pkg.get_org (b.gltran_brn_code);

            FOR i IN c_gl_trans
            LOOP
                IF v_uw_or_clm = 'U'
                THEN
                    IF i.gltran_level = 'U'
                    THEN
                        IF NVL (v_agent_code, 0) = 0
                        THEN
                            v_client_type := 'D';
                        ELSE
                            BEGIN
                                SELECT agn_act_code, agn_sht_desc
                                  INTO v_act_code, v_agnt_sht_desc
                                  FROM tqc_agencies
                                 WHERE agn_code = v_agent_code;

                                IF v_act_code IN (2,
                                                  9,
                                                  10,
                                                  16,
                                                  32,
                                                  40)
                                THEN
                                    v_client_type := 'A';
                                ELSIF v_act_code = 3
                                THEN
                                    v_client_type := 'B';
                                ELSIF v_act_code = 4
                                THEN
                                    v_client_type := 'FI';
                                ELSIF v_act_code = 5
                                THEN
                                    v_client_type := 'I';
                                ELSIF v_act_code = 6
                                THEN
                                    v_client_type := 'R';
                                ELSIF v_act_code = 7
                                THEN
                                    v_client_type := 'FO';
                                ELSE
                                    raise_application_error (
                                        -20001,
                                           'UNDEFINED ACCOUNT TYPE - '
                                        || v_act_code
                                        || ' -FOR AGENT '
                                        || v_agnt_sht_desc);
                                END IF;
                            EXCEPTION
                                WHEN NO_DATA_FOUND
                                THEN
                                    raise_application_error (
                                        -20021,
                                           'AGENT - '
                                        || v_agent_code
                                        || ' NOT FOUND ');
                                WHEN OTHERS
                                THEN
                                    raise_application_error (
                                        -20022,
                                        'AGENT INFO ' || SQLERRM (SQLCODE));
                            END;
                        END IF;

                        IF v_client_type IS NULL
                        THEN
                            raise_application_error (
                                -20023,
                                'CANNOT POST NULL CLIENT TYPE');
                        ELSE
                            --                        IF i.gltran_trnt_code IN ('PREMTAX','WTHVAT','UPR','MUPR','COPHFUND' ,'PRMTX-U') THEN
                            --                           v_control_acc := i.gltran_gltran_acc;
                            --                        ELSE
                            --                           v_control_acc := Fms_Interfaces_Pkg.sl_control_acc   ('GIS',  v_client_type  );
                            --                        END IF;
                            /*
                            Always pick the gl account from gis mapping for all transaction types before looking at external interface in fms. Solo for union to achieve commission payable mapping
                            */
                            v_control_acc := i.gltran_gltran_acc;

                            IF v_control_acc IS NULL
                            THEN
                                v_control_acc :=
                                    fms_interfaces_pkg.sl_control_acc (
                                        'GIS',
                                        v_client_type);
                            END IF;
                        END IF;

                        v_contra_acc := i.gltran_contra_acc;
                    ELSIF i.gltran_level IN ('MAN',
                                             'FSTSUP',
                                             'SECSUP',
                                             'QST',
                                             'POOL',
                                             'XOL')
                    THEN                               --QST  ADDED BY WAIYAKI
                        v_control_acc := i.gltran_gltran_acc;

                        IF v_control_acc IS NULL
                        THEN
                            v_control_acc :=
                                fms_interfaces_pkg.sl_control_acc (
                                    'GIS',
                                    'R',
                                    i.gltran_level);
                        END IF;

                        v_contra_acc := i.gltran_contra_acc;
                    ELSIF i.gltran_level IN ('FO', 'FI', 'I')
                    THEN                                 --FI ADDED BY WAIYAKI
                        IF i.gltran_level = 'I'
                        THEN
                            v_control_acc := i.gltran_gltran_acc;

                            IF NVL (v_control_acc, 'DEF') = 'DEF'
                            THEN
                                v_control_acc :=
                                    fms_interfaces_pkg.sl_control_acc ('GIS',
                                                                       'FI');
                            END IF;
                        --CHANGED BY MAYNARD.WRONG ACC. BEING PICKED IN FMS WHEREAS THE ACCOUNT HAS ALREADY BEEN DEFINED IN GIS. ---v_Control_Acc := FMS_INTERFACES_PKG.SL_CONTROL_ACC('GIS','FI');
                        ELSE
                            v_control_acc := i.gltran_gltran_acc;

                            IF NVL (v_control_acc, 'DEF') = 'DEF'
                            THEN
                                v_control_acc :=
                                    fms_interfaces_pkg.sl_control_acc (
                                        'GIS',
                                        i.gltran_level);
                            END IF;
                        --CHANGED BY MAYNARD.WRONG ACC. BEING PICKED IN FMS WHEREAS THE ACCOUNT HAS ALREADY BEEN DEFINED IN GIS. ---v_Control_Acc := FMS_INTERFACES_PKG.SL_CONTROL_ACC('GIS',I.GLTRAN_LEVEL);
                        END IF;

                        v_contra_acc := i.gltran_contra_acc;
                    ELSE
                        raise_application_error (
                            -20024,
                               'TRANSACTION LEVEL '
                            || i.gltran_level
                            || 'NOT KNOWN BY THE SYSTEM..');
                    END IF;
                ELSE
                    v_contra_acc := i.gltran_gltran_acc;

                    IF i.gltran_level IN ('U', 'FI')
                    THEN
                        v_control_acc := i.gltran_contra_acc;
                    -- raise_error('hehehehe');
                    ELSIF i.gltran_level IN ('MAN',
                                             'FSTSUP',
                                             'SECSUP',
                                             'QST',
                                             'POOL',
                                             'XOL')
                    THEN                               --QST  ADDED BY WAIYAKI
                        v_control_acc := i.gltran_contra_acc;

                        IF v_control_acc IS NULL
                        THEN
                            v_control_acc :=
                                fms_interfaces_pkg.sl_control_acc (
                                    'GIS',
                                    'R',
                                    i.gltran_level);
                        END IF;
                    ELSIF i.gltran_level IN ('FO')
                    THEN                                 --FI ADDED BY WAIYAKI
                        v_control_acc := i.gltran_contra_acc;

                        --raise_error('hehe='||v_control_acc);
                        IF v_control_acc IS NULL
                        THEN
                            -- raise_error('hehehre=');
                            v_control_acc :=
                                fms_interfaces_pkg.sl_control_acc (
                                    'GIS',
                                    i.gltran_level);
                        END IF;
                    --CHANGED BY MAYNARD.WRONG ACC. BEING PICKED IN FMS WHEREAS THE ACCOUNT HAS ALREADY BEEN DEFINED IN GIS. ---v_Control_Acc := FMS_INTERFACES_PKG.SL_CONTROL_ACC('GIS',I.GLTRAN_LEVEL);
                    ELSE
                        raise_application_error (
                            -20025,
                               'TRANSACTION LEVEL '
                            || i.gltran_level
                            || 'NOT KNOWN BY THE SYSTEM..');
                    END IF;
                END IF;

                --  RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
                -- IF  i.GLTRAN_TRNT_CODE ='MPSD' THEN
                -- RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||' HERE'|| i.GLTRAN_TRNT_CODE||' LEVEL = '||I.GLTRAN_LEVEL
                -- ||'  = '||i.GLTRAN_TRAN_NO);
                -- END IF;
                BEGIN
                    SELECT scl_desc
                      INTO v_scl_desc
                      FROM gin_sub_classes
                     WHERE scl_code = i.gltran_scl_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        --RAISE_ERROR('ERROR GETTING SUB CLAS');
                        NULL;
                END;

                IF fms_interfaces_pkg.valid_trns_acc (v_contra_acc,
                                                      v_org_code,
                                                      b.gltran_brn_code) =
                   FALSE
                THEN
                    --  RAISE_eRROR('['||v_contra_acc||']=['||v_org_code||']=['||b.gltran_brn_code||']');
                    ---RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
                    v_brh_name :=
                        fms_interfaces_pkg.brh_name (b.gltran_brn_code);
                    raise_error (
                           ' GL A/C - '
                        || v_contra_acc
                        || ' UNDEFINED IN  '
                        || v_brh_name
                        || ' CODE '
                        || i.gltran_trnt_code
                        || ' CLASS = '
                        || NVL (v_scl_desc, i.gltran_scl_code)
                        || ' LVL ='
                        || i.gltran_level
                        || ' CLIENT TYPE - '
                        || v_client_type);
                END IF;

                --RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE);
                IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
                                                      v_org_code,
                                                      b.gltran_brn_code) =
                   FALSE
                THEN
                    --RAISE_APPLICATION_ERROR (-20021, v_Control_Acc||'='||v_org_code||'='||b.GLTRAN_BRN_CODE||'='||I.GLTRAN_LEVEL||'='||b.GLTRAN_BRN_CODE);
                    --  RAISE_ERROR('V_CONTRA_ACC  = '||v_contra_acc||'&'||v_Control_Acc||'  = '||b.GLTRAN_BRN_CODE||'client'||v_client_type);
                    v_brh_name :=
                        fms_interfaces_pkg.brh_name (b.gltran_brn_code);
                --                  raise_error (   ' GL A/C - '
                --                               || v_control_acc
                --                               || ' UNDEFINED IN '
                --                               || v_brh_name
                --                               || ' CODE '
                --                               || i.gltran_trnt_code
                --                               || ' CLASS = '
                --                               || NVL(v_scl_desc,i.gltran_scl_code)
                --                               || ' LVL ='
                --                               || i.gltran_level
                --                               || ' CLIENT TYPE - '
                --                               || v_client_type
                --                              );
                END IF;

                BEGIN
                    v_no := v_no + 2;
                    --RAISE_ERROR('VGL_CODE ='||vgl_trans.count ||'V_CONTRA_ACC   '||v_contra_acc||'  = '||B.GLTRAN_BRN_CODE);
                    interface_append_gl (v_gltran_tran_no,
                                         i.gltran_trnt_code, --v_trans_code           NUMBER,
                                         v_user_name, --v_raise_by          VARCHAR2,
                                         v_pol_batch_no, --v_pol_code          NUMBER,
                                         i.gltran_scl_code, --v_prod_code         NUMBER,
                                         NULL, --v_vchr_no             VARCHAR2,
                                         NULL,   --v_opr_code          NUMBER,
                                         NULL,   --v_oppr_code         NUMBER,
                                         NULL, --v_rcpt_no             VARCHAR2,
                                         v_no,   --v_count             NUMBER,
                                         'GL TRANS ' || i.gltran_trnt_code,
                                         --v_narrative         VARCHAR2,
                                         ABS (i.gltran_amount), --v_amount            NUMBER,
                                         i.gltran_dc, --v_drcr              VARCHAR2,
                                         v_contra_acc, --v_acc_number1          VARCHAR2,
                                         v_control_acc, --v_acc_number2          VARCHAR2,
                                         i.gltran_brn_code, --v_branch_code       NUMBER,
                                         vgl_trans,
                                         --v_trn_rec   IN OUT  Fms_Vouchers_Pkg.Tgl_rec_type,
                                         i.gltran_pdl_code,
                                         i.gltran_unit_code,
                                         i.gltran_location_code);

                    /*Fms_Vouchers_Pkg.append_gl_trans
                              (v_no,
                               'GL TRANS ' || i.gltran_trnt_code,  --v_narrative
                               ABS (i.gltran_amount),                 --v_amount
                               i.gltran_dc,                             --v_drcr
                               v_contra_acc,                        --v_account1
                               v_control_acc, --i.GLTRAN_CONTRA_ACC,--v_account2
                               i.gltran_brn_code,                     --v_branch
                               vgl_trans
                              );*/
                    UPDATE gin_gl_transactions
                       SET gltran_posted = 'Y'
                     WHERE gltran_tran_no = i.gltran_tran_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20026,
                               'ERROR POSTING GL TRANS FOR '
                            || i.gltran_trnt_code
                            || ':- '
                            || SQLERRM (SQLCODE));
                END;
            END LOOP;

            interface_update_vgl (
                v_gltran_tran_no,
                'VARIOUS',                          --v_trans_code     NUMBER,
                v_user_name,                   --v_raise_by          VARCHAR2,
                v_pol_batch_no,                  --v_pol_code          NUMBER,
                b.gltran_auth_date,                --v_date              DATE,
                NULL,                            --v_opr_code          NUMBER,
                NULL,                            --v_oppr_code         NUMBER,
                'GIS TRANS',                   --v_btc_description   VARCHAR2,
                'JV',                       --v_btc_type             VARCHAR2,
                b.gltran_brn_code,
                --v_branch_code       NUMBER,
                NVL (v_description, 'GIS TRANSACTIONS VOUCHER'),
                --v_description       VARCHAR2,
                NVL (v_other_ref, 'GIS'),
                --v_ref             VARCHAR2,
                vgl_trans,
                --v_gl_trans  IN OUT  Fms_Vouchers_Pkg.Tgl_rec_type
                v_uw_or_clm,
                v_agent_code,
                b.gltran_cur_code,
                b.gltran_cur_rate,
                b.gltran_pdl_code,
                b.gltran_unit_code,
                b.gltran_location_code);

            --            vgl_code :=
            --               Fms_Vouchers_Pkg.update_vgl('GIS TRANS',                            --V_BTC_DESCRIPTION
            --                                           'JV',                                --V_BTC_TYPE varchar2,
            --                                           b.gltran_brn_code,                     --V_BRH_CODE number,
            --                                           b.gltran_auth_date,
            --                        /*CHANGED BY mAYNARD. added authorisation date instead of sysdate*/
            --                                                                     ---TRUNC(SYSDATE),   --V_DT date,
            --                                           NVL (v_description, 'GIS TRANSACTIONS VOUCHER'),
            --                                                                             --V_DESCRIPTION varchar2,
            --                                           'GIS',                                    --V_REF varchar2,
            --                                           v_user_code,                          --V_RAISED_BY number,
            --                                           b.gltran_cur_code,                     --V_CUR_CODE number,
            --                                           vgl_trans ,                        --V_TRANS IN tgl_rec_type
            --                                           b.gltran_cur_rate
            --                                          );
            --            Fms_Interfaces_Pkg.post_je (vgl_code, v_user_code);
            --raise_error('out');
            UPDATE gin_gl_transactions
               SET gltran_posted = 'Y'
             WHERE     gltran_tran_no = v_gltran_tran_no
                   AND NVL (gltran_posted, 'N') = 'N';
        END LOOP;

        -- ADDED BY WAIYAKI ON APR-04-2006 to LOG those trans that are not posted to finance
        IF vgl_code IS NULL
        THEN
            INSERT INTO gin_gl_trans_not_posted (gltran_tran_no,
                                                 description,
                                                 user_name,
                                                 agent_code,
                                                 uw_or_clm)
                 VALUES (v_gltran_tran_no,
                         v_description,
                         v_user_name,
                         v_agent_code,
                         v_uw_or_clm);
        END IF;
    --      EXCEPTION
    --         WHEN exc_user_error
    --         THEN
    --            RAISE_APPLICATION_ERROR
    --                                 (-20027,
    --                                     'THE SPECIFIED USERNAME ( '
    --                                  || v_user_name
    --                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    --                                 );
    --         WHEN OTHERS
    --         THEN
    --            RAISE_APPLICATION_ERROR (-20028,
    --                                     'POST GL :- ' || SQLERRM (SQLCODE)
    --                                    );
    --      END;
    END;

    PROCEDURE check_valid_gl_acc (v_gl_acc      IN VARCHAR2,
                                  v_org_code    IN NUMBER,
                                  v_brh_code    IN NUMBER,
                                  v_brh_name    IN VARCHAR2,
                                  v_trnt_code   IN VARCHAR2,
                                  v_scl_code    IN NUMBER)
    IS
    BEGIN
        IF    NVL (v_gl_acc, 'DEF') = 'DEF'
           OR fms_interfaces_pkg.valid_trns_acc (v_gl_acc,
                                                 v_org_code,
                                                 v_brh_code) =
              FALSE
        THEN
            raise_application_error (
                -20001,
                   'GL A/C - '
                || v_gl_acc
                || ' UNDEFINED IN '
                || v_brh_name
                || ' CODE '
                || v_trnt_code
                || ' CLS - '
                || v_scl_code);
        END IF;
    END;

    --   PROCEDURE process_claim_pymt (
    --      v_clmrg_claim_no   VARCHAR2,
    --      v_trans_no         NUMBER,
    --      v_user_name        VARCHAR2,
    --      v_pay_method       VARCHAR2 DEFAULT 'CHQ'
    --   )
    --   IS
    --      v_cmb_claim_no              NUMBER;
    --      v_cqr_bnk_dtls              fms_cheques_pkg.type_bnk_dtls_table;

    --      CURSOR c_claim
    --      IS
    --         SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
    --                gin_clm_payment_vouchers.cpv_vchr_cur_code,
    --                gin_clm_payment_vouchers.cpv_cur_code,
    --                gin_clm_payment_vouchers.cpv_voucher_no,
    --                gin_clm_payment_vouchers.cpv_amount_bcur,
    --                gin_clm_payment_vouchers.cpv_apco_cor_code,
    --                gin_clm_payment_vouchers.cpv_date,
    --                gin_clm_payment_vouchers.cpv_authorised,
    --                gin_clm_payment_vouchers.cpv_authorised_by,
    --                gin_clm_payment_vouchers.cpv_account_type,
    --                gin_clm_payment_vouchers.cpv_agnt_agent_code,
    --                cpv_authorised_dt, cpv_amount cpv_amount,
    --                gin_clm_payment_vouchers.cpv_payee,
    --                gin_clm_payment_vouchers.cpv_raise_by,
    --                gin_claim_master_bookings.cmb_cur_code,
    --                gin_claim_master_bookings.cmb_brn_code,
    --                gin_clm_payment_vouchers.cpv_drcr_no, cpv_comp_retention,
    --                cpv_man_amount, cpv_quota_amount, cpv_fstsup_amount,
    --                cpv_secsup_amount, cpv_facre_amount,
    --                SUBSTR (cpv_tran_type, 0, 2) cpv_tran_type,
    --                gin_claim_master_bookings.cmb_scl_code,
    --                NVL (cpv_vat_amnt, 0) cpv_vat_amnt,
    --                NVL (cpv_whtx_amnt, 0) cpv_whtx_amnt,
    --                NVL (cpv_net_paid, 0) cpv_net_paid, cpv_bcur_net_paid,
    --                cpv_bcur_vat_amnt, cpv_bcur_whtx_amnt, cpv_post_dated,
    --                cpv_post_dated_date, cpv_rein_amount, cpv_rein_amount_bcur,
    --                cpv_excess_amount, cpv_excess_amount_bcur, cpv_ret_salvage,
    --                cpv_ret_salvage_bcur, NULL cpv_disc_amt, cpv_claimant_type,
    --                cpv_reg_cld_code, cpv_cbp_code, cpv_reg_clmt_code,
    --                cpv_exciseduty_amnt cpv_exciseduty_amnt,
    --                cpv_bcur_exciseduty_amnt, cmb_coin_pay_type,
    --                cpv_coin_tot_net_paid, cpv_coin_tot_vat_amnt,
    --                cpv_coin_tot_whtx_amnt, cpv_coin_tot_exciseduty_amnt,
    --                cpv_coin_tot_amt, cpv_coin_tot_amt_bcur, cmb_pol_policy_type,
    --                cmb_location_code, cmb_unit_code,
    --                cpv_coin_vattowithhold_amnt, cpv_bcur_vattowithhold_amnt,
    --                cpv_coin_vattowithhold_amnt cpv_vattowithhold_amnt
    --           FROM gin_claim_master_bookings, gin_clm_payment_vouchers
    --          WHERE cmb_claim_no = cpv_cmb_claim_no
    --            AND cmb_claim_no = v_clmrg_claim_no
    --            AND cpv_ggt_trans_no = v_trans_no;

    --      v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
    --      v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
    --      v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
    --      v_cqr_brh_code              NUMBER;
    --      v_user_code                 NUMBER;
    --      v_cqr_source_auth_by        NUMBER;
    --      v_cqr_source_auth_dt        DATE;
    --      exc_user_error              EXCEPTION;
    --      v_brh_name                  VARCHAR2 (100);
    --      v_bct_code                  NUMBER;
    --      v_bct_brh_code              NUMBER;
    --      v_crt_acc_number            VARCHAR2 (20);
    --      v_crt_acc_org_code          NUMBER;
    --      v_trnt_gl_code              VARCHAR2 (20);
    --      v_trnt_contra_gl_code       VARCHAR2 (20);
    --      v_trnt_code                 VARCHAR2 (20);
    --      v_acc_type                  VARCHAR2 (20);
    --      v_cqr_source                NUMBER;
    --      v_rec_count                 NUMBER                                  := 0;
    --      v_org_code                  NUMBER;
    --      v_exch_rate                 NUMBER;
    --      v_exch_rate2                NUMBER;
    --      v_rnd                       NUMBER;
    --      v_bcur_rnd                  NUMBER;
    --      v_cur_code                  NUMBER;
    --      v_paymnt_brh_code           NUMBER;
    --      v_trt_man_amt               NUMBER;
    --      v_trt_qs_amt                NUMBER;
    --      v_trt_fst_amt               NUMBER;
    --      v_trt_sec_amt               NUMBER;
    --      v_trt_fac_amt               NUMBER;
    --      v_lvl                       VARCHAR2 (15);
    --      rev_type                    VARCHAR2 (15);
    --      v_payment_amt               gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
    --      v_ripool_amt                NUMBER;
    --      v_net_amt                   NUMBER;
    --      v_vat_amt                   NUMBER;
    --      v_whtx_amt                  NUMBER;
    --      v_tot_amt                   NUMBER;
    --      v_disc_amt                  NUMBER;
    --      v_rein_amt                  NUMBER;
    --      v_excess_amt                NUMBER;
    --      v_control_acc               VARCHAR2 (30);
    --      v_client_type               VARCHAR2 (5);
    --      v_act_code                  NUMBER;
    --      v_agnt_sht_desc             VARCHAR2 (25);
    --      v_salv_amt                  NUMBER;
    --      v_per_code                  NUMBER;
    --      v_charge_servp_wthtax       VARCHAR2 (1);
    --      v_auto_auth                 VARCHAR2 (1);
    --      v_eft_enabled               VARCHAR2 (1);
    --      v_bnk_account               VARCHAR2 (30);
    --      v_bnk_bbr_code              VARCHAR2 (30);
    --      v_auth_param                VARCHAR2 (1);
    --      v_sms_tel                   VARCHAR2 (30);
    --      v_ref_no                    VARCHAR2 (30);
    --      v_mpt_code                  NUMBER;
    --      v_exciseduty_amt            NUMBER;
    --      v_ccop_amount_bcur          NUMBER;
    --      v_coin_amount               NUMBER;
    --      v_ccop_amount               NUMBER;
    --      v_coin_client_type          VARCHAR2 (5);
    --      --variable added by kim kahunja to reference tqc_bank_branches pk to be passed on cheque requisition
    --      v_bnk_bbr_pk                NUMBER;
    --      v_trt_lvl                   VARCHAR2 (1)                          := 'P';
    --      v_facre_gl_acc_no           VARCHAR2 (30);
    --      v_frgn_or_local             VARCHAR2 (30);
    --      v_clmfee_garage_param       VARCHAR2 (1)                          := 'N';
    --      v_spr_cnt                   NUMBER;
    --      v_trt_rcry_gl_param         VARCHAR2 (1);
    --      v_vattowithhold_app_param   VARCHAR2 (1)                          := 'N';
    --      v_vattowithhold_amnt        NUMBER;

    --      CURSOR c_treaties
    --      IS
    --         SELECT   SUM
    --                     (DECODE (trs_trtg_code,
    --                              1001, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_man_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              1003, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_qs_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10041, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_fst_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10042, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_sec_amt,
    --                  DECODE
    --                     (NVL (v_trt_lvl, 'T'),
    --                      'T', NULL,
    --                      NVL (trpa_gl_rcvbl_account,
    --                           DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                   'N', trpa_gl_account,
    --                                   NULL
    --                                  )
    --                          )
    --                     ) trpa_gl_account,
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ) account_name,
    --                  rei_local_forgn
    --             FROM gin_clm_treaty_recoveries,
    --                  gin_treaty_setups,
    --                  gin_treaty_participants,
    --                  gin_treaties,
    --                  tqc_agencies
    --            WHERE ctrtr_rei_code = rei_code
    --              AND trpa_rei_code = rei_code
    --              AND ctrtr_trs_code = trs_code
    --              AND trpa_agnt_agent_code = agn_code
    --              AND ctrtr_ggt_trans_no = v_trans_no
    --         GROUP BY DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          NVL (trpa_gl_rcvbl_account,
    --                               DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                       'N', trpa_gl_account,
    --                                       NULL
    --                                      )
    --                              )
    --                         ),
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ),
    --                  rei_local_forgn;

    --      CURSOR c_facre
    --      IS
    --         SELECT   SUM (DECODE (cfrr_pol_cur_code,
    --                               cfrr_trt_cur_code, NVL (cfrr_amount, 0),
    --                               NVL (cfrr_amount_bcur, 0)
    --                              )
    --                      ) cfrr_amount,
    --                  DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ) agn_acc_no,
    --                  agn_sht_desc, agn_name
    --             FROM gin_clm_facre_recoveries, tqc_agencies
    --            WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --              AND cfrr_ggt_trans_no = v_trans_no
    --              AND cfrc_agnt_agent_code = agn_code
    --         GROUP BY DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ),
    --                  agn_sht_desc,
    --                  agn_name;
    --   BEGIN
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('AUTO_AUTH_CLM_PYMTS')
    --           INTO v_auth_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_auth_param := 'Y';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching AUTO_AUTH_CLM_PYMTS parameter...');
    --      END;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                        ('SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL')
    --           INTO v_trt_rcry_gl_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_trt_rcry_gl_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --               ('Error fetching SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL parameter...'
    --               );
    --      END;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('CLMFEE_GARAGE_VAT')
    --           INTO v_clmfee_garage_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_clmfee_garage_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching CLMFEE_GARAGE_VAT parameter...');
    --      END;

    --      BEGIN
    --         SELECT param_value
    --           INTO v_vattowithhold_app_param
    --           FROM gin_parameters
    --          WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_vattowithhold_app_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                       ('Error getting VATTOWITHHOLD_APPLICABLE parameters..');
    --      END;

    --      IF NVL (v_pay_method, 'CHQ') = 'JE'
    --      THEN
    --         v_auto_auth := 'N';
    --      ELSE
    --         IF NVL (v_auth_param, 'N') = 'Y'
    --         THEN
    --            v_auto_auth := 'Y';
    --         ELSE
    --            v_auto_auth := 'N';
    --         END IF;
    --      END IF;

    --      v_rec_count := 0;

    --      FOR i IN c_claim
    --      LOOP
    --         v_exch_rate :=
    --                   get_currexch_rate (i.cpv_vchr_cur_code, v_rnd, v_bcur_rnd);

    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'O'
    --         THEN
    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_net_paid;
    --               v_vat_amt := i.cpv_vat_amnt;
    --               v_whtx_amt := i.cpv_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;

    --               IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --               THEN
    --                  v_tot_amt :=
    --                     ROUND (  NVL (v_vat_amt, 0)
    --                            + NVL (v_whtx_amt, 0)
    --                            + NVL (v_exciseduty_amt, 0)
    --                            + NVL (v_salv_amt, 0)
    --                            + NVL (v_excess_amt, 0)
    --                            + NVL (v_net_amt, 0),
    --                            0
    --                           );
    --               ELSE
    --                  v_tot_amt :=
    --                     ROUND (  NVL (v_net_amt, 0)
    --                            + NVL (v_whtx_amt, 0)
    --                            + NVL (v_exciseduty_amt, 0)
    --                            + NVL (v_salv_amt, 0)
    --                            + NVL (v_excess_amt, 0)
    --                            + NVL (v_vattowithhold_amnt, 0),
    --                            0
    --                           );
    --               END IF;
    --            ELSE
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_bcur_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         --- NVL (v_vattowithhold_amnt, 0)
    --                         + NVL (v_net_amt, 0),
    --                         0
    --                        );
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         ELSIF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            SELECT   SUM (NVL (ccop_amount, 0)),
    --                     SUM (NVL (ccop_amount_bcur, 0)), act_type_sht_desc
    --                INTO v_ccop_amount,
    --                     v_ccop_amount_bcur, v_coin_client_type
    --                FROM gin_clm_coin_payments, tqc_agencies, tqc_account_types
    --               WHERE agn_code = ccop_agnt_agent_code
    --                 AND agn_act_code = act_code
    --                 AND ccop_cpv_voucher_no = i.cpv_voucher_no
    --            GROUP BY act_type_sht_desc;

    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_coin_tot_net_paid;
    --               v_vat_amt := i.cpv_coin_tot_vat_amnt;
    --               v_whtx_amt := i.cpv_coin_tot_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_coin_tot_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := NVL (v_ccop_amount, 0);
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         --- NVL (v_vattowithhold_amnt, 0)
    --                         + NVL (v_exciseduty_amt, 0)
    --                         + NVL (v_net_amt, 0)
    --                         - NVL (v_coin_amount, 0),
    --                         0
    --                        );
    --            ELSE
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := v_ccop_amount_bcur;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         --- NVL (v_vattowithhold_amnt, 0)
    --                         + NVL (v_exciseduty_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         + NVL (v_net_amt, 0)
    --                         - NVL (v_coin_amount, 0),
    --                         0
    --                        );
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         END IF;

    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
    --         v_paymnt_brh_code := i.cmb_brn_code;
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --         fms_interfaces_pkg.trans_bct ('CLM',
    --                                       v_cqr_source,
    --                                       v_paymnt_brh_code,
    --                                       v_cur_code,
    --                                       v_bct_code,
    --                                       v_bct_brh_code
    --                                      );

    --         IF     NVL (v_clmfee_garage_param, 'N') = 'Y'
    --            AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --         THEN
    --            BEGIN
    --               SELECT COUNT (*)
    --                 INTO v_spr_cnt
    --                 FROM tqc_service_provider_reg
    --                WHERE sreg_spr_code = i.cpv_apco_cor_code;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_spr_cnt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  v_spr_cnt := 0;
    --            END;

    --            --raise_Error(v_spr_cnt||' = '||v_tot_amt||'='||v_vat_amt||'='||v_net_amt);
    --            IF NVL (v_spr_cnt, 0) > 0
    --            THEN
    --               v_tot_amt := NVL (v_tot_amt, 0) - NVL (v_vat_amt, 0);
    --               v_net_amt := NVL (v_net_amt, 0) + NVL (v_vat_amt, 0);
    --            END IF;
    --         END IF;

    --         IF ROUND (NVL (v_payment_amt, 0), 0) != v_tot_amt
    --         THEN
    --            raise_application_error
    --                            (-20001,
    --                                'THE NET CHEQUE AMOUNT '
    --                             || NVL (v_net_amt, 0)
    --                             || ' PLUS VAT '
    --                             || NVL (v_vat_amt, 0)
    --                             || ' AND WHTTAX '
    --                             || NVL (v_whtx_amt, 0)
    --                             || ' PLUS EXCISE DUTY '
    --                             || NVL (v_exciseduty_amt, 0)
    --                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                             || v_payment_amt
    --                             || 'v_tot_amt'
    --                             || v_tot_amt
    --                            );
    --         END IF;

    ----          raise_application_error
    ----                            (-20001,
    ----                                'THE NET CHEQUE AMOUNT '
    ----                             || NVL (v_net_amt, 0)
    ----                             || ' PLUS VAT '
    ----                             || NVL (v_vat_amt, 0)
    ----                             || ' AND WHTTAX '
    ----                             || NVL (v_whtx_amt, 0)
    ----                             || ' PLUS EXCISE DUTY '
    ----                             || NVL (v_exciseduty_amt, 0)
    ----                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    ----                             || v_payment_amt
    ----                             || 'v_tot_amt'
    ----                             || v_tot_amt
    ----                            );

    --         --         IF  NVL(v_vattowithhold_app_param,'N')='Y'   THEN
    ----           v_payment_amt:=NVL(v_payment_amt,0)-NVL(v_vat_amt,0)+NVL(v_vattowithhold_amnt,0);
    ----         END IF;
    --         IF i.cpv_tran_type = 'CF'
    --         THEN
    --            rev_type := 'CF';

    --            BEGIN
    --               IF NVL (v_disc_amt, 0) > 0
    --               THEN
    --                  SELECT voud_per_code
    --                    INTO v_per_code
    --                    FROM gin_voucher_details
    --                   WHERE voud_cpv_voucher_no = i.cpv_voucher_no;

    --                  gin_stp_claims_pkg.create_srv_prvdr_reserve
    --                                                         (v_clmrg_claim_no,
    --                                                          v_per_code,
    --                                                          -v_disc_amt,
    --                                                          NULL,
    --                                                          v_user_name,
    --                                                          i.cpv_apco_cor_code,
    --                                                          NULL,
    --                                                          'A'
    --                                                         );
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (   'Error creating Discount Revision '
    --                               || SQLERRM (SQLCODE)
    --                              );
    --            END;
    --         ELSE
    --            rev_type := 'CP';
    --         END IF;

    --         IF NVL (v_payment_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );

    ----                     RAISE_ERROR(v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code);

    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               BEGIN
    --                  v_eft_enabled := 'N';

    --                  /*NOTES
    --                  1. SERVICE PROVIDES
    --                  2. CLIENTS
    --                  3. CLAIMANTS
    --                  4. BUSINESS PERSONS
    --                  5. ACCOUNTS*/
    --                  --raise_error('i.cpv_claimant_type '||i.cpv_claimant_type || ' rev_type '||rev_type);
    --                  IF rev_type = 'CP'
    --                  THEN
    --                     IF NVL (i.cpv_claimant_type, 'S') = 'O'
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled (bnk_bbr_code (i.cpv_cbp_code, 4));
    --                        v_bnk_account := bnk_account (i.cpv_cbp_code, 4);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              4
    --                                                             )
    --                                               );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 4);

    --                        -- raise_error('acc....'||bnk_bbr_code (i.cpv_cbp_code, 4)||' i.cpv_cbp_code '||i.cpv_cbp_code);
    --                        BEGIN
    --                           IF v_eft_enabled = 'N'
    --                           THEN
    --                              IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                              THEN
    --                                 v_eft_enabled :=
    --                                    account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                                 v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                                 v_bnk_bbr_code :=
    --                                    tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           3
    --                                                          )
    --                                            );
    --                                 v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                              END IF;
    --                           END IF;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              v_eft_enabled := 'N';
    --                        END;

    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_cbp_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              1
    --                                                             )
    --                                               );
    --                              v_bnk_account := bnk_account (i.cpv_cbp_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                                (bnk_bbr_code (i.cpv_cbp_code,
    --                                                               1
    --                                                              )
    --                                                );
    --                              v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 1);
    --                           END IF;
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'T'
    --                     THEN
    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                        THEN
    --                           -- RAISE_ERROR('BANK BRANCH CODE..'||bnk_bbr_code (i.cpv_apco_cor_code, 1));
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_code :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'S'
    --                     THEN
    --                     -- RAISE_ERROR('i.cpv_reg_cld_code'||i.cpv_reg_cld_code);
    --                        IF i.cpv_apco_cor_code IS NOT NULL
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                              v_bnk_account :=
    --                                          bnk_account (i.cpv_apco_cor_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                              v_bnk_bbr_pk :=
    --                                         bnk_bbr_code (i.cpv_apco_cor_code, 1);

    --                           END IF;
    --                           END IF;

    --                            IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                            );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;

    --                     ELSE

    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                            );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;
    --                     END IF;
    --                  ELSE
    --                     IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                        v_bnk_account := bnk_account (i.cpv_apco_cor_code, 1);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_apco_cor_code, 1);

    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_agnt_agent_code, 5) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                        (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                       5
    --                                                      )
    --                                        );
    --                              v_bnk_account :=
    --                                        bnk_account (i.cpv_agnt_agent_code, 5);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                         (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                        5
    --                                                       )
    --                                         );
    --                              v_bnk_bbr_pk :=
    --                                       bnk_bbr_code (i.cpv_agnt_agent_code, 5);
    --                           END IF;
    --                        END IF;
    --                     END IF;
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR GETTING BANK ACC INFO... ');
    --               END;

    --               IF v_eft_enabled = 'N'
    --               THEN
    --                  raise_application_error
    --                                   (-20001,
    --                                       'BANK BRANCH NOT ENABLED TO TRANSACT '
    --                                    || v_pay_method
    --                                    || '  ADAS  '
    --                                    || i.cpv_claimant_type
    --                                    || ' PAYMENTS'
    --                                    || i.cpv_reg_cld_code
    --                                    || ' ; '
    --                                    || rev_type
    --                                    || ' ; '
    --                                    || i.cpv_agnt_agent_code
    --                                   );
    --               END IF;
    --            END IF;

    --            v_rec_count := v_rec_count + 1;

    --            --raise_Error('v_payment_amt='||v_payment_amt);
    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               fms_cheques_pkg.append_eft_payees
    --                     (v_rec_count,        --v_no                       NUMBER,
    --                      i.cpv_voucher_no,   --v_ref1                   VARCHAR2,
    --                      ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                      i.cpv_payee,      --v_narrative                VARCHAR2,
    --                      v_bnk_bbr_code,
    --                      --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                      v_bnk_account,    --v_bnk_account              VARCHAR2,
    --                      i.cpv_cmb_claim_no, --v_ref2                   VARCHAR2,
    --                      v_payee_eft_dtls
    --                     );
    --               fms_cheques_pkg.append_chq_trans
    --                                               (v_rec_count,
    --                                                ROUND (v_payment_amt, v_rnd),
    --                                                   'CLAIM PAYMENT GROSS AMT '
    --                                                || v_pay_method,
    --                                                --narrative,
    --                                                v_trnt_gl_code,
    --                                                -- crt_acc_number
    --                                                v_org_code,
    --                                                --crt_acc_org_code ,
    --                                                i.cmb_brn_code,

    --                                                ---commented by Solo v_paymnt_brh_code
    --                                                'D',                --v_dr_cr,
    --                                                v_chq_dtls,
    --                                                NULL,
    --                                                NULL,
    --                                                i.cmb_unit_code,
    --                                                i.cmb_location_code
    --                                               );
    --            ELSIF v_pay_method IN ('MOB')
    --            --Added by Masinde to take care of mobile payments 30052015
    --            THEN
    --               IF i.cpv_tran_type = 'CP'
    --               THEN
    --                  --RAISE_ERROR(i.cpv_reg_clmt_code);
    --                  BEGIN
    --                     SELECT NVL (cld_mobile_no, cld_mobile_phone), cld_id_no
    --                       INTO v_sms_tel, v_ref_no
    --                       FROM gin_rgstd_claimants, gin_claimants
    --                      WHERE cld_code = reg_cld_code
    --                        AND reg_cmb_claim_no = v_clmrg_claim_no
    --                        AND reg_clmt_code = i.cpv_reg_clmt_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting Claimants Mobile Payment details'
    --                            || i.cpv_reg_clmt_code
    --                           );
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     SELECT NVL (spr_sms_number, spr_mobile_no),
    --                            NVL (spr_pin_number, spr_pin)
    --                       INTO v_sms_tel,
    --                            v_ref_no
    --                       FROM tqc_service_providers
    --                      WHERE spr_code = i.cpv_apco_cor_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting service providers Mobile Payment details'
    --                            || i.cpv_apco_cor_code
    --                           );
    --                  END;
    --               END IF;

    --               IF v_sms_tel IS NOT NULL
    --               THEN
    --                  SELECT mpt_code
    --                    INTO v_mpt_code
    --                    FROM tqc_mob_pymnt_types_prefixes, tqc_mobile_pymnt_types
    --                   WHERE mptp_mpt_code = mpt_code
    --                     AND mptp_mob_no_prefix = SUBSTR (v_sms_tel, 1, 4);
    --               ELSE
    --                  raise_application_error
    --                     (-20001,
    --                      'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..'
    --                     );
    --               END IF;

    --               BEGIN
    --                  v_payee_mft_dtls (1) :=
    --                     fms_cheques_pkg.append_mft_payees
    --                                    (v_rec_count,
    --                                     i.cpv_voucher_no,
    --                                     ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                     ---v_amount,
    --                                     i.cpv_payee,               --v_narrative,
    --                                     v_sms_tel,

    --                                     --v_credit_id                                                                                 ,
    --                                     'Mobile Phone Number', --v_credit_id_type
    --                                     v_ref_no,               --v_validation_id
    --                                     'REFERENCE NO'     --v_validation_id_type
    --                                    );
    --                  fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                    ROUND (v_payment_amt,
    --                                                           v_rnd
    --                                                          ),
    --                                                    'CLAIM',      --narrative,
    --                                                    v_trnt_gl_code,
    --                                                    -- crt_acc_number
    --                                                    v_org_code,
    --                                                    --crt_acc_org_code ,
    --                                                    v_paymnt_brh_code,

    --                                                    --i.cmb_brn_code,          --v_brh_code,
    --                                                    'D',            --v_dr_cr,
    --                                                    v_chq_dtls
    --                                                   );
    --               --fms_chq_mftfile_dtls
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error (   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
    --                                  || i.cpv_voucher_no
    --                                 );
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                               (   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
    --                                || i.cpv_voucher_no
    --                               );
    --               END;
    --            ELSE
    --               fms_cheques_pkg.append_chq_trans
    --                  (v_rec_count,
    --                   ROUND (v_payment_amt, v_rnd),
    --                   'CLAIM PAYMENT GROSS AMT',                     --narrative,
    --                   v_trnt_gl_code,                           -- crt_acc_number
    --                   v_org_code,                            --crt_acc_org_code ,
    --                   v_paymnt_brh_code, --i.cmb_brn_code,          --v_brh_code,
    --                   'D',                                             --v_dr_cr,
    --                   v_chq_dtls,
    --                   NULL,
    --                   NULL,
    --                   i.cmb_unit_code,
    --                   i.cmb_location_code
    --                  );
    --            END IF;
    --         END IF;

    ----******************************SALVAGE *******************************
    --         IF NVL (v_salv_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CS',                         --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (v_salv_amt, v_rnd),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,

    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;

    ----************************EXCESS************************
    --         IF NVL (v_excess_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CRE',                        --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_excess_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM EXCESS',     --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,

    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;

    ----************************REINSURANCE************************
    --         IF NVL (v_rein_amt, 0) > 0
    --         THEN
    --            IF NVL (i.cpv_rein_amount, 0) != 0
    --            THEN
    --               IF NVL (i.cpv_account_type, 'D') = 'D'
    --               THEN
    --                  v_client_type := 'D';
    --               ELSE
    --                  BEGIN
    --                     SELECT agn_act_code, agn_sht_desc
    --                       INTO v_act_code, v_agnt_sht_desc
    --                       FROM tqc_agencies
    --                      WHERE agn_code = i.cpv_agnt_agent_code;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        raise_application_error (-20021,
    --                                                    'AGENT - '
    --                                                 || v_client_type
    --                                                 || ' NOT FOUND '
    --                                                );
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_application_error (-20022,
    --                                                    'AGENT INFO '
    --                                                 || SQLERRM (SQLCODE)
    --                                                );
    --                  END;

    --                  IF v_act_code IN (2, 9, 10, 16)
    --                  THEN
    --                     v_client_type := 'A';
    --                  ELSIF v_act_code = 3
    --                  THEN
    --                     v_client_type := 'B';
    --                  ELSIF v_act_code = 4
    --                  THEN
    --                     v_client_type := 'FI';
    --                  ELSIF v_act_code = 5
    --                  THEN
    --                     v_client_type := 'I';
    --                  ELSIF v_act_code = 6
    --                  THEN
    --                     v_client_type := 'R';
    --                  ELSIF v_act_code = 7
    --                  THEN
    --                     v_client_type := 'FO';
    --                  ELSE
    --                     raise_application_error (-20001,
    --                                                 'UNDEFINED ACCOUNT TYPE - '
    --                                              || v_act_code
    --                                              || ' -FOR AGENT '
    --                                              || v_agnt_sht_desc
    --                                              || 'i.CPV_ACCOUNT_TYPE '
    --                                              || i.cpv_account_type
    --                                              || 'v_clmrg_claim_no ='
    --                                              || v_clmrg_claim_no
    --                                             );
    --                  END IF;
    --               END IF;

    --               IF v_client_type IS NULL
    --               THEN
    --                  raise_application_error (-20023,
    --                                           'CANNOT POST NULL CLIENT TYPE'
    --                                          );
    --               ELSE
    --                  v_control_acc :=
    --                     fms_interfaces_pkg.sl_control_acc ('GIS', v_client_type);
    --               END IF;

    --               gin_interfaces_pkg.get_gl_acct_code
    --                                          (rev_type,
    --                                                    --v_trnt_type IN VARCHAR2,
    --                                           i.cmb_scl_code,

    --                                           --v_scl_code IN NUMBER,
    --                                           'U',  --     v_app_lvl IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_btr_trans_code IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                                           v_trnt_code,
    --                                           --          v_trnt_code OUT VARCHAR2,
    --                                           v_trnt_gl_code,
    --                                           --          v_trnt_gl_code OUT VARCHAR2,
    --                                           v_trnt_contra_gl_code
    --                                          --          v_trnt_contra_gl_code OUT VARCHAR2
    --                                          );

    --               IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL CTRL A/C - '
    --                                           || v_control_acc
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;

    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL A/C - '
    --                                           || v_trnt_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;

    --               v_rec_count := v_rec_count + 1;

    --               BEGIN
    --                  fms_cheques_pkg.append_chq_trans
    --                                            (v_rec_count,
    --                                             ROUND (NVL (i.cpv_rein_amount, 0),
    --                                                    v_bcur_rnd
    --                                                   ),
    --                                             'GL TRANS' || v_trnt_code,
    --                                             --narrative,
    --                                             v_trnt_gl_code,
    --                                             -- crt_acc_number
    --                                             v_org_code,  --crt_acc_org_code ,
    --                                             v_paymnt_brh_code,

    --                                             --i.cmb_brn_code,          --v_brh_code,
    --                                             'C',                   --v_dr_cr,
    --                                             v_chq_dtls
    --                                            );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || v_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END IF;
    --         END IF;

    ----************************VAT************************
    --         IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --         THEN
    --            IF NVL (v_vat_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHVAT',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    ----RAISE_eRROR(v_vat_amt||' = '||v_vattowithhold_app_param);
    --               v_rec_count := v_rec_count + 1;

    --               IF     (   NVL (v_clmfee_garage_param, 'N') = 'Y'
    --                       OR NVL (v_vattowithhold_app_param, 'N') = 'Y'
    --                      )
    --                  AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --               THEN
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,

    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               ELSE
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,

    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               END IF;
    --            END IF;
    --         END IF;

    ----************************VATTOWTH************************
    ----raise_error('v_vattowithhold_amnt='||v_vattowithhold_amnt);
    --         IF NVL (v_vattowithhold_amnt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('VATTOWTH',                   --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    ----RAISE_eRROR(v_trnt_gl_code||' = '||v_trnt_contra_gl_code);
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                          (v_rec_count,
    --                                           ROUND (NVL (v_vattowithhold_amnt,
    --                                                       0),
    --                                                  v_rnd
    --                                                 ),
    --                                           'CLAIM PAYMENT VATTOWTH AMT',
    --                                           --narrative,
    --                                           v_trnt_gl_code,---basv_trnt_contra_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,

    --                                           --i.cmb_brn_code,          --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls,
    --                                           NULL,
    --                                           NULL,
    --                                           i.cmb_unit_code,
    --                                           i.cmb_location_code
    --                                          );
    --         END IF;

    --         --************************WITHHOLDING TAX************************
    --         IF NVL (v_whtx_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_whtx_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM PAYMENT WHTAX AMT',
    --                                              --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         --************************EXCISE DUTY************************
    --         IF NVL (v_exciseduty_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('EXDTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_exciseduty_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;

    ----************************REINSURANCE************************
    --         FOR c_treaty_rec IN c_treaties
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND c_treaty_rec.TRPA_GL_ACCOUNT IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||c_treaty_rec.ACCOUNT_NAME);
    ----             END IF;
    --            IF c_treaty_rec.trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;

    --            --**************************** Update Quota Revision Amount***************************
    --            IF c_treaty_rec.trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_gl_code,     -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_contra_gl_code,
    --                                         -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --            END IF;

    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;

    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;
    --         END LOOP;

    --         --**************************** Update Facultative Revision Amount***************************
    --         FOR f IN c_facre
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND f.AGN_ACC_NO IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||f.AGN_NAME);
    ----             END IF;
    --            IF f.cfrr_amount <> 0
    --            THEN
    --               v_lvl := 'FO';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := f.agn_acc_no;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, null);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END LOOP;

    --         BEGIN
    --            SELECT SUM (NVL (crpr_amt, 0))
    --              INTO v_ripool_amt
    --              FROM gin_clm_ri_pool_recoveries
    --             WHERE crpr_ggt_tran_no = v_trans_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --         END;

    --         IF v_ripool_amt <> 0                              -- reinsurance pool
    --         THEN
    --            v_lvl := 'POOL';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         IF gin_parameters_pkg.get_param_varchar ('REVISE_GL_ON_CLAIM_PYMT') =
    --                                                                           'Y'
    --         THEN
    --            rev_type := 'LRV';

    --            BEGIN
    --               SELECT   SUM (DECODE (trs_trtg_code,
    --                                     1001, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     1003, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10041, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10042, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        rei_local_forgn
    --                   INTO v_trt_man_amt,
    --                        v_trt_qs_amt,
    --                        v_trt_fst_amt,
    --                        v_trt_sec_amt,
    --                        v_frgn_or_local
    --                   FROM gin_clm_treaty_recoveries,
    --                        gin_treaties,
    --                        gin_treaty_setups
    --                  WHERE ctrtr_trs_code = trs_code
    --                    AND ctrtr_cmb_claim_no = v_clmrg_claim_no
    --                    AND ctrtr_ggt_trans_no = v_trans_no
    --                    AND rei_code = ctrtr_rei_code
    --               GROUP BY rei_local_forgn;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_trt_man_amt := 0;
    --                  v_trt_qs_amt := 0;
    --                  v_trt_fst_amt := 0;
    --                  v_trt_sec_amt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'SYSTEM COULD NOT RETRIEVE TREATY RI APPORTIONMENT '
    --                      || ';'
    --                      || v_clmrg_claim_no
    --                      || ';'
    --                      || v_trans_no
    --                     );
    --            END;

    --            IF NVL (v_payment_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            IF v_trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update Quota Revision Amount***************************
    --            --RAISE_ERROR('v_trt_qs_amt='||v_trt_qs_amt);
    --            IF v_trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               --  Raise_error(v_trnt_gl_code);
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF v_trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code := fms_interfaces_pkg.sl_control_acc('GIS', 'R','FSTSUP') ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF v_trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update Facultative Revision Amount***************************
    --            BEGIN
    --               SELECT SUM (NVL (cfrr_amount, 0))
    --                 INTO v_trt_fac_amt
    --                 FROM gin_clm_facre_recoveries
    --                WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --                  AND cfrr_ggt_trans_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                         ('SYSTEM COULD NOT RETRIEVE FACRE RI APPORTIONMENT ');
    --            END;

    --            IF v_trt_fac_amt <> 0
    --            THEN
    --               v_lvl := 'FO';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code:=fms_interfaces_pkg.sl_control_acc('GIS', 'FO')  ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            BEGIN
    --               SELECT SUM (NVL (crpr_amt, 0))
    --                 INTO v_ripool_amt
    --                 FROM gin_clm_ri_pool_recoveries
    --                WHERE crpr_ggt_tran_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --            END;

    --            IF v_ripool_amt <> 0
    --            THEN                                           -- reinsurance pool
    --               v_lvl := 'POOL';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END IF;

    --         --****************COINSURANCE PAY FULL FOR LEADER COMBINED*************************
    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            IF NVL (v_ccop_amount, 0) != 0
    --            THEN
    --               SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
    --                                                         v_coin_client_type
    --                                                        )
    --                 INTO v_trnt_contra_gl_code
    --                 FROM DUAL;

    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
    --                                                     v_org_code,
    --                                                     i.cmb_brn_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'COIN GL CONTROL A/C - '
    --                                           || v_trnt_contra_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                          );
    --               END IF;

    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                 ROUND (NVL (v_ccop_amount,
    --                                                             v_rnd
    --                                                            )
    --                                                       ),
    --                                                 'CLAIM',
    --                                                 v_trnt_contra_gl_code,
    --                                                 v_org_code,
    --                                                 v_paymnt_brh_code,
    --                                                 'D',
    --                                                 v_chq_dtls,
    --                                                 NULL,
    --                                                 NULL,
    --                                                 i.cmb_unit_code,
    --                                                 i.cmb_location_code
    --                                                );
    --            END IF;
    --         END IF;

    ----************************************************************
    --         IF v_pay_method IN ('EFT', 'RTGS')
    --         THEN
    --            --RAISE_ERROR(v_net_amt||' ; '||ROUND (NVL (v_net_amt, 0), v_bcur_rnd));
    --            BEGIN
    --               fms_cheques_pkg.create_reqn
    --                  (
    --                  v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),
    --                   i.cpv_cmb_claim_no,
    --                   --'gis claim',             --narrative V
    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                                -- v_net_amt,     --cqr_amount
    --                   i.cpv_payee,
    --                   v_pay_method,
    --                   NULL,
    --                   v_bnk_bbr_pk,                                          --12
    --                   i.cmb_cur_code,
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    --                                                   ),
    --                   i.cpv_authorised_dt,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-CLAIM',                                 -- pmt_type  ,
    --                   v_chq_dtls,
    --                   v_payee_eft_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   v_bnk_bbr_code,
    --                   v_bnk_account,
    --                   NULL,
    --                   'N'                                           --v_auto_auth
    --                  );
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error (   'ERROR ON CREATING PAYMENT REQUISITION < '
    ----                               || v_pay_method
    ----                               || '> FOR.'
    ----                               || i.cpv_payee
    ----                               || SQLERRM (SQLCODE)
    ----                              );
    --            END;
    --         ELSIF v_pay_method IN ('MOB')
    --         THEN
    --            BEGIN
    --               fms_cheques_pkg.create_reqn
    --                  (v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),
    --                   i.cpv_cmb_claim_no,
    --                   --'gis claim',             --narrative V
    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),        --cqr_amount
    --                   i.cpv_payee,
    --                   i.cmb_cur_code,
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    --                                                   ),
    --                   i.cpv_authorised_dt,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-CLAIM',                                 -- pmt_type  ,
    --                   v_chq_dtls,
    --                   v_payee_mft_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   v_mpt_code,
    --                   'N'                                           --v_auto_auth
    --                  );
    --            END;
    --         ELSE
    --            BEGIN
    --               -- RAISE_eRROR(v_net_amt||' = '||i.cmb_coin_pay_type);
    --               fms_cheques_pkg.create_reqn
    --                  (
    --                  v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),
    --                   i.cpv_cmb_claim_no,
    --                   --'GIS Claim',             --narrative V
    --                   v_paymnt_brh_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (v_net_amt, 0), v_rnd),             --cqr_amount
    --                   i.cpv_payee,
    --                   i.cpv_vchr_cur_code,
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    --                                                   ),
    --                   i.cpv_authorised_dt,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-CLAIM',                                 -- pmt_type  ,
    --                   v_chq_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   v_cqr_bnk_dtls,
    --                   v_auto_auth

    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   v_paymnt_brh_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_rnd),             --cqr_amount
    ----                   i.cpv_payee,
    ----                   i.cpv_vchr_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by) ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                 --  v_cqr_bnk_dtls,
    ----                   v_auto_auth



    --                  );
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_application_error (-20001,
    ----                                              'CREATE_REQN :- '
    ----                                           || v_net_amt
    ----                                           || ' $ '||v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code
    ----                                           || SQLERRM (SQLCODE)
    ----                                          );
    --            END;
    --         END IF;
    --      END LOOP;

    --      IF v_rec_count = 0
    --      THEN
    --         raise_application_error (-20001,
    --                                     'CLM REQN NOT CREATED FOR CLAIM # '
    --                                  || v_clmrg_claim_no
    --                                 );
    --      END IF;
    --   END;
    -- PROCEDURE process_claim_pymt (
    --      v_clmrg_claim_no   VARCHAR2,
    --      v_trans_no         NUMBER,
    --      v_user_name        VARCHAR2,
    --      v_pay_method       VARCHAR2 DEFAULT 'CHQ'
    --   )
    --   IS
    --      v_cmb_claim_no              NUMBER;
    --      v_cqr_bnk_dtls              fms_cheques_pkg.type_bnk_dtls_table;

    --      CURSOR c_claim
    --      IS
    --         SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
    --                gin_clm_payment_vouchers.cpv_vchr_cur_code,
    --                gin_clm_payment_vouchers.cpv_cur_code,
    --                gin_clm_payment_vouchers.cpv_voucher_no,
    --                gin_clm_payment_vouchers.cpv_amount_bcur,
    --                gin_clm_payment_vouchers.cpv_apco_cor_code,
    --                gin_clm_payment_vouchers.cpv_date,
    --                gin_clm_payment_vouchers.cpv_authorised,
    --                gin_clm_payment_vouchers.cpv_authorised_by,
    --                gin_clm_payment_vouchers.cpv_account_type,
    --                gin_clm_payment_vouchers.cpv_agnt_agent_code,
    --                cpv_authorised_dt, cpv_amount cpv_amount,
    --                gin_clm_payment_vouchers.cpv_payee,
    --                gin_clm_payment_vouchers.cpv_raise_by,
    --                gin_claim_master_bookings.cmb_cur_code,
    --                gin_claim_master_bookings.cmb_brn_code,
    --                gin_clm_payment_vouchers.cpv_drcr_no, cpv_comp_retention,
    --                cpv_man_amount, cpv_quota_amount, cpv_fstsup_amount,
    --                cpv_secsup_amount, cpv_facre_amount,
    --                SUBSTR (cpv_tran_type, 0, 2) cpv_tran_type,
    --                gin_claim_master_bookings.cmb_scl_code,
    --                NVL (cpv_vat_amnt, 0) cpv_vat_amnt,
    --                NVL (cpv_whtx_amnt, 0) cpv_whtx_amnt,
    --                NVL (cpv_net_paid, 0) cpv_net_paid, cpv_bcur_net_paid,
    --                cpv_bcur_vat_amnt, cpv_bcur_whtx_amnt, cpv_post_dated,
    --                cpv_post_dated_date, cpv_rein_amount, cpv_rein_amount_bcur,
    --                cpv_excess_amount, cpv_excess_amount_bcur, cpv_ret_salvage,
    --                cpv_ret_salvage_bcur, NULL cpv_disc_amt, cpv_claimant_type,
    --                cpv_reg_cld_code, cpv_cbp_code, cpv_reg_clmt_code,
    --                cpv_exciseduty_amnt cpv_exciseduty_amnt,
    --                cpv_bcur_exciseduty_amnt, cmb_coin_pay_type,
    --                cpv_coin_tot_net_paid, cpv_coin_tot_vat_amnt,
    --                cpv_coin_tot_whtx_amnt, cpv_coin_tot_exciseduty_amnt,
    --                cpv_coin_tot_amt, cpv_coin_tot_amt_bcur, cmb_pol_policy_type,
    --                cmb_location_code, cmb_unit_code,
    --                cpv_coin_vattowithhold_amnt, cpv_bcur_vattowithhold_amnt,
    --                cpv_coin_vattowithhold_amnt cpv_vattowithhold_amnt
    --           FROM gin_claim_master_bookings, gin_clm_payment_vouchers
    --          WHERE cmb_claim_no = cpv_cmb_claim_no
    --            AND cmb_claim_no = v_clmrg_claim_no
    --            AND cpv_ggt_trans_no = v_trans_no;

    --      v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
    --      v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
    --      v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
    --      v_cqr_brh_code              NUMBER;
    --      v_user_code                 NUMBER;
    --      v_cqr_source_auth_by        NUMBER;
    --      v_cqr_source_auth_dt        DATE;
    --      exc_user_error              EXCEPTION;
    --      v_brh_name                  VARCHAR2 (100);
    --      v_bct_code                  NUMBER;
    --      v_bct_brh_code              NUMBER;
    --      v_crt_acc_number            VARCHAR2 (20);
    --      v_crt_acc_org_code          NUMBER;
    --      v_trnt_gl_code              VARCHAR2 (20);
    --      v_trnt_contra_gl_code       VARCHAR2 (20);
    --      v_trnt_code                 VARCHAR2 (20);
    --      v_acc_type                  VARCHAR2 (20);
    --      v_cqr_source                NUMBER;
    --      v_rec_count                 NUMBER                                  := 0;
    --      v_org_code                  NUMBER;
    --      v_exch_rate                 NUMBER;
    --      v_exch_rate2                NUMBER;
    --      v_rnd                       NUMBER;
    --      v_bcur_rnd                  NUMBER;
    --      v_cur_code                  NUMBER;
    --      v_paymnt_brh_code           NUMBER;
    --      v_trt_man_amt               NUMBER;
    --      v_trt_qs_amt                NUMBER;
    --      v_trt_fst_amt               NUMBER;
    --      v_trt_sec_amt               NUMBER;
    --      v_trt_fac_amt               NUMBER;
    --      v_lvl                       VARCHAR2 (15);
    --      rev_type                    VARCHAR2 (15);
    --      v_payment_amt               gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
    --      v_ripool_amt                NUMBER;
    --      v_net_amt                   NUMBER;
    --      v_vat_amt                   NUMBER;
    --      v_whtx_amt                  NUMBER;
    --      v_tot_amt                   NUMBER;
    --      v_disc_amt                  NUMBER;
    --      v_rein_amt                  NUMBER;
    --      v_excess_amt                NUMBER;
    --      v_control_acc               VARCHAR2 (30);
    --      v_client_type               VARCHAR2 (5);
    --      v_act_code                  NUMBER;
    --      v_agnt_sht_desc             VARCHAR2 (25);
    --      v_salv_amt                  NUMBER;
    --      v_per_code                  NUMBER;
    --      v_charge_servp_wthtax       VARCHAR2 (1);
    --      v_auto_auth                 VARCHAR2 (1);
    --      v_eft_enabled               VARCHAR2 (1);
    --      v_bnk_account               VARCHAR2 (30);
    --      v_bnk_bbr_code              VARCHAR2 (30);
    --      v_auth_param                VARCHAR2 (1);
    --      v_sms_tel                   VARCHAR2 (30);
    --      v_ref_no                    VARCHAR2 (30);
    --      v_mpt_code                  NUMBER;
    --      v_exciseduty_amt            NUMBER;
    --      v_ccop_amount_bcur          NUMBER;
    --      v_coin_amount               NUMBER;
    --      v_ccop_amount               NUMBER;
    --      v_coin_client_type          VARCHAR2 (5);
    --      --variable added by kim kahunja to reference tqc_bank_branches pk to be passed on cheque requisition
    --      v_bnk_bbr_pk                NUMBER;
    --      v_trt_lvl                   VARCHAR2 (1)                          := 'P';
    --      v_facre_gl_acc_no           VARCHAR2 (30);
    --      v_frgn_or_local             VARCHAR2 (30);
    --      v_clmfee_garage_param       VARCHAR2 (1)                          := 'N';
    --      v_spr_cnt                   NUMBER;
    --      v_trt_rcry_gl_param         VARCHAR2 (1);
    --      v_vattowithhold_app_param   VARCHAR2 (1)                          := 'N';
    --      v_vattowithhold_amnt        NUMBER;

    --      CURSOR c_treaties
    --      IS
    --         SELECT   SUM
    --                     (DECODE (trs_trtg_code,
    --                              1001, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_man_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              1003, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_qs_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10041, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_fst_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10042, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_sec_amt,
    --                  DECODE
    --                     (NVL (v_trt_lvl, 'T'),
    --                      'T', NULL,
    --                      NVL (trpa_gl_rcvbl_account,
    --                           DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                   'N', trpa_gl_account,
    --                                   NULL
    --                                  )
    --                          )
    --                     ) trpa_gl_account,
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ) account_name,
    --                  rei_local_forgn
    --             FROM gin_clm_treaty_recoveries,
    --                  gin_treaty_setups,
    --                  gin_treaty_participants,
    --                  gin_treaties,
    --                  tqc_agencies
    --            WHERE ctrtr_rei_code = rei_code
    --              AND trpa_rei_code = rei_code
    --              AND ctrtr_trs_code = trs_code
    --              AND trpa_agnt_agent_code = agn_code
    --              AND ctrtr_ggt_trans_no = v_trans_no
    --         GROUP BY DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          NVL (trpa_gl_rcvbl_account,
    --                               DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                       'N', trpa_gl_account,
    --                                       NULL
    --                                      )
    --                              )
    --                         ),
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ),
    --                  rei_local_forgn;

    --      CURSOR c_facre
    --      IS
    --         SELECT   SUM (DECODE (cfrr_pol_cur_code,
    --                               cfrr_trt_cur_code, NVL (cfrr_amount, 0),
    --                               NVL (cfrr_amount_bcur, 0)
    --                              )
    --                      ) cfrr_amount,
    --                  DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ) agn_acc_no,
    --                  agn_sht_desc, agn_name
    --             FROM gin_clm_facre_recoveries, tqc_agencies
    --            WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --              AND cfrr_ggt_trans_no = v_trans_no
    --              AND cfrc_agnt_agent_code = agn_code
    --         GROUP BY DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ),
    --                  agn_sht_desc,
    --                  agn_name;
    --   BEGIN
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('AUTO_AUTH_CLM_PYMTS')
    --           INTO v_auth_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_auth_param := 'Y';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching AUTO_AUTH_CLM_PYMTS parameter...');
    --      END;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                        ('SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL')
    --           INTO v_trt_rcry_gl_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_trt_rcry_gl_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --               ('Error fetching SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL parameter...'
    --               );
    --      END;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('CLMFEE_GARAGE_VAT')
    --           INTO v_clmfee_garage_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_clmfee_garage_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching CLMFEE_GARAGE_VAT parameter...');
    --      END;

    --      BEGIN
    --         SELECT param_value
    --           INTO v_vattowithhold_app_param
    --           FROM gin_parameters
    --          WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_vattowithhold_app_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                       ('Error getting VATTOWITHHOLD_APPLICABLE parameters..');
    --      END;

    --      IF NVL (v_pay_method, 'CHQ') = 'JE'
    --      THEN
    --         v_auto_auth := 'N';
    --      ELSE
    --         IF NVL (v_auth_param, 'N') = 'Y'
    --         THEN
    --            v_auto_auth := 'Y';
    --         ELSE
    --            v_auto_auth := 'N';
    --         END IF;
    --      END IF;

    --      v_rec_count := 0;

    --      FOR i IN c_claim
    --      LOOP
    --         v_exch_rate :=
    --                   get_currexch_rate (i.cpv_vchr_cur_code, v_rnd, v_bcur_rnd);

    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'O'
    --         THEN
    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_net_paid;
    --               v_vat_amt := i.cpv_vat_amnt;
    --               v_whtx_amt := i.cpv_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;

    --               IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --               THEN
    --                  v_tot_amt :=
    --                     ROUND (  NVL (v_vat_amt, 0)
    --                            + NVL (v_whtx_amt, 0)
    --                            + NVL (v_exciseduty_amt, 0)
    --                            + NVL (v_salv_amt, 0)
    --                            + NVL (v_excess_amt, 0)
    --                            + NVL (v_net_amt, 0),
    --                            0
    --                           );
    --               ELSE
    --                  v_tot_amt :=
    --                     ROUND (  NVL (v_net_amt, 0)
    --                            + NVL (v_whtx_amt, 0)
    --                            + NVL (v_exciseduty_amt, 0)
    --                            + NVL (v_salv_amt, 0)
    --                            + NVL (v_excess_amt, 0)
    --                            + NVL (v_vattowithhold_amnt, 0),
    --                            0
    --                           );
    --               END IF;
    --            ELSE
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_bcur_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         --- NVL (v_vattowithhold_amnt, 0)
    --                         + NVL (v_net_amt, 0),
    --                         0
    --                        );
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         ELSIF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            SELECT   SUM (NVL (ccop_amount, 0)),
    --                     SUM (NVL (ccop_amount_bcur, 0)), act_type_sht_desc
    --                INTO v_ccop_amount,
    --                     v_ccop_amount_bcur, v_coin_client_type
    --                FROM gin_clm_coin_payments, tqc_agencies, tqc_account_types
    --               WHERE agn_code = ccop_agnt_agent_code
    --                 AND agn_act_code = act_code
    --                 AND ccop_cpv_voucher_no = i.cpv_voucher_no
    --            GROUP BY act_type_sht_desc;

    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_coin_tot_net_paid;
    --               v_vat_amt := i.cpv_coin_tot_vat_amnt;
    --               v_whtx_amt := i.cpv_coin_tot_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_coin_tot_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := NVL (v_ccop_amount, 0);
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         --- NVL (v_vattowithhold_amnt, 0)
    --                         + NVL (v_exciseduty_amt, 0)
    --                         + NVL (v_net_amt, 0)
    --                         - NVL (v_coin_amount, 0),
    --                         0
    --                        );
    --            ELSE
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := v_ccop_amount_bcur;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         --- NVL (v_vattowithhold_amnt, 0)
    --                         + NVL (v_exciseduty_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         + NVL (v_net_amt, 0)
    --                         - NVL (v_coin_amount, 0),
    --                         0
    --                        );
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         END IF;

    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
    --         v_paymnt_brh_code := i.cmb_brn_code;
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --         fms_interfaces_pkg.trans_bct ('CLM',
    --                                       v_cqr_source,
    --                                       v_paymnt_brh_code,
    --                                       v_cur_code,
    --                                       v_bct_code,
    --                                       v_bct_brh_code
    --                                      );

    --         IF     NVL (v_clmfee_garage_param, 'N') = 'Y'
    --            AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --         THEN
    --            BEGIN
    --               SELECT COUNT (*)
    --                 INTO v_spr_cnt
    --                 FROM tqc_service_provider_reg
    --                WHERE sreg_spr_code = i.cpv_apco_cor_code;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_spr_cnt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  v_spr_cnt := 0;
    --            END;

    --            --raise_Error(v_spr_cnt||' = '||v_tot_amt||'='||v_vat_amt||'='||v_net_amt);
    --            IF NVL (v_spr_cnt, 0) > 0
    --            THEN
    --               v_tot_amt := NVL (v_tot_amt, 0) - NVL (v_vat_amt, 0);
    --               v_net_amt := NVL (v_net_amt, 0) + NVL (v_vat_amt, 0);
    --            END IF;
    --         END IF;

    --         IF ROUND (NVL (v_payment_amt, 0), 0) != v_tot_amt
    --         THEN
    --            raise_application_error
    --                            (-20001,
    --                                'THE NET CHEQUE AMOUNT '
    --                             || NVL (v_net_amt, 0)
    --                             || ' PLUS VAT '
    --                             || NVL (v_vat_amt, 0)
    --                             || ' AND WHTTAX '
    --                             || NVL (v_whtx_amt, 0)
    --                             || ' PLUS EXCISE DUTY '
    --                             || NVL (v_exciseduty_amt, 0)
    --                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                             || v_payment_amt
    --                             || 'v_tot_amt'
    --                             || v_tot_amt
    --                            );
    --         END IF;

    ----          raise_application_error
    ----                            (-20001,
    ----                                'THE NET CHEQUE AMOUNT '
    ----                             || NVL (v_net_amt, 0)
    ----                             || ' PLUS VAT '
    ----                             || NVL (v_vat_amt, 0)
    ----                             || ' AND WHTTAX '
    ----                             || NVL (v_whtx_amt, 0)
    ----                             || ' PLUS EXCISE DUTY '
    ----                             || NVL (v_exciseduty_amt, 0)
    ----                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    ----                             || v_payment_amt
    ----                             || 'v_tot_amt'
    ----                             || v_tot_amt
    ----                            );

    --         --         IF  NVL(v_vattowithhold_app_param,'N')='Y'   THEN
    ----           v_payment_amt:=NVL(v_payment_amt,0)-NVL(v_vat_amt,0)+NVL(v_vattowithhold_amnt,0);
    ----         END IF;
    --         IF i.cpv_tran_type = 'CF'
    --         THEN
    --            rev_type := 'CF';

    --            BEGIN
    --               IF NVL (v_disc_amt, 0) > 0
    --               THEN
    --                  SELECT voud_per_code
    --                    INTO v_per_code
    --                    FROM gin_voucher_details
    --                   WHERE voud_cpv_voucher_no = i.cpv_voucher_no;

    --                  gin_stp_claims_pkg.create_srv_prvdr_reserve
    --                                                         (v_clmrg_claim_no,
    --                                                          v_per_code,
    --                                                          -v_disc_amt,
    --                                                          NULL,
    --                                                          v_user_name,
    --                                                          i.cpv_apco_cor_code,
    --                                                          NULL,
    --                                                          'A'
    --                                                         );
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (   'Error creating Discount Revision '
    --                               || SQLERRM (SQLCODE)
    --                              );
    --            END;
    --         ELSE
    --            rev_type := 'CP';
    --         END IF;

    --         IF NVL (v_payment_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );

    ----                     RAISE_ERROR(v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code);

    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               BEGIN
    --                  v_eft_enabled := 'N';

    --                  /*NOTES
    --                  1. SERVICE PROVIDES
    --                  2. CLIENTS
    --                  3. CLAIMANTS
    --                  4. BUSINESS PERSONS
    --                  5. ACCOUNTS*/
    --                  --raise_error('i.cpv_claimant_type '||i.cpv_claimant_type || ' rev_type '||rev_type);
    --                  IF rev_type = 'CP'
    --                  THEN
    --                     IF NVL (i.cpv_claimant_type, 'S') = 'O'
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled (bnk_bbr_code (i.cpv_cbp_code, 4));
    --                        v_bnk_account := bnk_account (i.cpv_cbp_code, 4);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              4
    --                                                             )
    --                                               );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 4);

    --                        -- raise_error('acc....'||bnk_bbr_code (i.cpv_cbp_code, 4)||' i.cpv_cbp_code '||i.cpv_cbp_code);
    --                        BEGIN
    --                           IF v_eft_enabled = 'N'
    --                           THEN
    --                              IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                              THEN
    --                                 v_eft_enabled :=
    --                                    account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                                 v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                                 v_bnk_bbr_code :=
    --                                    tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           3
    --                                                          )
    --                                            );
    --                                 v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                              END IF;
    --                           END IF;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              v_eft_enabled := 'N';
    --                        END;

    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_cbp_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              1
    --                                                             )
    --                                               );
    --                              v_bnk_account := bnk_account (i.cpv_cbp_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                                (bnk_bbr_code (i.cpv_cbp_code,
    --                                                               1
    --                                                              )
    --                                                );
    --                              v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 1);
    --                           END IF;
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'T'
    --                     THEN
    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                        THEN
    --                           -- RAISE_ERROR('BANK BRANCH CODE..'||bnk_bbr_code (i.cpv_apco_cor_code, 1));
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_code :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'S'
    --                     THEN
    --                     -- RAISE_ERROR('i.cpv_reg_cld_code'||i.cpv_reg_cld_code);
    --                        IF i.cpv_apco_cor_code IS NOT NULL
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                              v_bnk_account :=
    --                                          bnk_account (i.cpv_apco_cor_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                              v_bnk_bbr_pk :=
    --                                         bnk_bbr_code (i.cpv_apco_cor_code, 1);

    --                           END IF;
    --                           END IF;

    --                            IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                            );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;

    --                     ELSE

    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                            );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;
    --                     END IF;
    --                  ELSE
    --                     IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                        v_bnk_account := bnk_account (i.cpv_apco_cor_code, 1);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_apco_cor_code, 1);

    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_agnt_agent_code, 5) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                        (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                       5
    --                                                      )
    --                                        );
    --                              v_bnk_account :=
    --                                        bnk_account (i.cpv_agnt_agent_code, 5);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                         (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                        5
    --                                                       )
    --                                         );
    --                              v_bnk_bbr_pk :=
    --                                       bnk_bbr_code (i.cpv_agnt_agent_code, 5);
    --                           END IF;
    --                        END IF;
    --                     END IF;
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR GETTING BANK ACC INFO... ');
    --               END;

    --               IF v_eft_enabled = 'N'
    --               THEN
    --                  raise_application_error
    --                                   (-20001,
    --                                       'BANK BRANCH NOT ENABLED TO TRANSACT '
    --                                    || v_pay_method
    --                                    || '  ADAS  '
    --                                    || i.cpv_claimant_type
    --                                    || ' PAYMENTS'
    --                                    || i.cpv_reg_cld_code
    --                                    || ' ; '
    --                                    || rev_type
    --                                    || ' ; '
    --                                    || i.cpv_agnt_agent_code
    --                                   );
    --               END IF;
    --            END IF;

    --            v_rec_count := v_rec_count + 1;

    --            --raise_Error('v_payment_amt='||v_payment_amt);
    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               fms_cheques_pkg.append_eft_payees
    --                     (v_rec_count,        --v_no                       NUMBER,
    --                      i.cpv_voucher_no,   --v_ref1                   VARCHAR2,
    --                      ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                      i.cpv_payee,      --v_narrative                VARCHAR2,
    --                      v_bnk_bbr_code,
    --                      --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                      v_bnk_account,    --v_bnk_account              VARCHAR2,
    --                      i.cpv_cmb_claim_no, --v_ref2                   VARCHAR2,
    --                      v_payee_eft_dtls
    --                     );
    --               fms_cheques_pkg.append_chq_trans
    --                                               (v_rec_count,
    --                                                ROUND (v_payment_amt, v_rnd),
    --                                                   'CLAIM PAYMENT GROSS AMT '
    --                                                || v_pay_method,
    --                                                --narrative,
    --                                                v_trnt_gl_code,
    --                                                -- crt_acc_number
    --                                                v_org_code,
    --                                                --crt_acc_org_code ,
    --                                                i.cmb_brn_code,

    --                                                ---commented by Solo v_paymnt_brh_code
    --                                                'D',                --v_dr_cr,
    --                                                v_chq_dtls,
    --                                                NULL,
    --                                                NULL,
    --                                                i.cmb_unit_code,
    --                                                i.cmb_location_code
    --                                               );
    --            ELSIF v_pay_method IN ('MOB')
    --            --Added by Masinde to take care of mobile payments 30052015
    --            THEN
    --               IF i.cpv_tran_type = 'CP'
    --               THEN
    --                  --RAISE_ERROR(i.cpv_reg_clmt_code);
    --                  BEGIN
    --                  SELECT MOBILENO,cld_id_no
    --                       INTO v_sms_tel, v_ref_no
    --                       FROM(
    --                     SELECT NVL (cld_mobile_no, cld_mobile_phone)MOBILENO, cld_id_no
    --                       FROM gin_rgstd_claimants, gin_claimants
    --                      WHERE cld_code = reg_cld_code
    --                        AND reg_cmb_claim_no = v_clmrg_claim_no
    --                        and REG_THIRD_PARTY='T'
    --                        AND reg_clmt_code = i.cpv_reg_clmt_code
    --                        union
    --                       SELECT NVL (CLNT_TEL, CLNT_SMS_TEL)MOBILENO, CLNT_ID_REG_NO cld_id_no
    --                       FROM gin_rgstd_claimants, tqc_clients
    --                      WHERE CLNT_CODE = reg_cld_code
    --                        AND reg_cmb_claim_no = v_clmrg_claim_no
    --                        and REG_THIRD_PARTY='S'
    --                        AND reg_clmt_code = i.cpv_reg_clmt_code);
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting Claimants Mobile Payment details'
    --                            || i.cpv_reg_clmt_code
    --                           );
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     SELECT NVL (spr_sms_number, spr_mobile_no),
    --                            NVL (spr_pin_number, spr_pin)
    --                       INTO v_sms_tel,
    --                            v_ref_no
    --                       FROM tqc_service_providers
    --                      WHERE spr_code = i.cpv_apco_cor_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting service providers Mobile Payment details'
    --                            || i.cpv_apco_cor_code
    --                           );
    --                  END;
    --               END IF;

    --               IF v_sms_tel IS NOT NULL
    --               THEN
    --                  SELECT mpt_code
    --                    INTO v_mpt_code
    --                    FROM tqc_mob_pymnt_types_prefixes, tqc_mobile_pymnt_types
    --                   WHERE mptp_mpt_code = mpt_code
    --                     AND mptp_mob_no_prefix = SUBSTR (v_sms_tel, 1, 4);
    --               ELSE
    --                  raise_application_error
    --                     (-20001,
    --                      'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..'
    --                     );
    --               END IF;

    --               BEGIN
    --                  v_payee_mft_dtls (1) :=
    --                     fms_cheques_pkg.append_mft_payees
    --                                    (v_rec_count,
    --                                     i.cpv_voucher_no,
    --                                     ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                     ---v_amount,
    --                                     i.cpv_payee,               --v_narrative,
    --                                     v_sms_tel,

    --                                     --v_credit_id                                                                                 ,
    --                                     'Mobile Phone Number', --v_credit_id_type
    --                                     v_ref_no,               --v_validation_id
    --                                     'REFERENCE NO'     --v_validation_id_type
    --                                    );
    --                  fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                    ROUND (v_payment_amt,
    --                                                           v_rnd
    --                                                          ),
    --                                                    'CLAIM',      --narrative,
    --                                                    v_trnt_gl_code,
    --                                                    -- crt_acc_number
    --                                                    v_org_code,
    --                                                    --crt_acc_org_code ,
    --                                                    v_paymnt_brh_code,

    --                                                    --i.cmb_brn_code,          --v_brh_code,
    --                                                    'D',            --v_dr_cr,
    --                                                    v_chq_dtls
    --                                                   );
    --               --fms_chq_mftfile_dtls
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error (   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
    --                                  || i.cpv_voucher_no
    --                                 );
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                               (   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
    --                                || i.cpv_voucher_no
    --                               );
    --               END;
    --            ELSE
    --               fms_cheques_pkg.append_chq_trans
    --                  (v_rec_count,
    --                   ROUND (v_payment_amt, v_rnd),
    --                   'CLAIM PAYMENT GROSS AMT',                     --narrative,
    --                   v_trnt_gl_code,                           -- crt_acc_number
    --                   v_org_code,                            --crt_acc_org_code ,
    --                   v_paymnt_brh_code, --i.cmb_brn_code,          --v_brh_code,
    --                   'D',                                             --v_dr_cr,
    --                   v_chq_dtls,
    --                   NULL,
    --                   NULL,
    --                   i.cmb_unit_code,
    --                   i.cmb_location_code
    --                  );
    --            END IF;
    --         END IF;

    ----******************************SALVAGE *******************************
    --         IF NVL (v_salv_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CS',                         --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (v_salv_amt, v_rnd),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,

    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;

    ----************************EXCESS************************
    --         IF NVL (v_excess_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CRE',                        --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_excess_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM EXCESS',     --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,

    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;

    ----************************REINSURANCE************************
    --         IF NVL (v_rein_amt, 0) > 0
    --         THEN
    --            IF NVL (i.cpv_rein_amount, 0) != 0
    --            THEN
    --               IF NVL (i.cpv_account_type, 'D') = 'D'
    --               THEN
    --                  v_client_type := 'D';
    --               ELSE
    --                  BEGIN
    --                     SELECT agn_act_code, agn_sht_desc
    --                       INTO v_act_code, v_agnt_sht_desc
    --                       FROM tqc_agencies
    --                      WHERE agn_code = i.cpv_agnt_agent_code;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        raise_application_error (-20021,
    --                                                    'AGENT - '
    --                                                 || v_client_type
    --                                                 || ' NOT FOUND '
    --                                                );
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_application_error (-20022,
    --                                                    'AGENT INFO '
    --                                                 || SQLERRM (SQLCODE)
    --                                                );
    --                  END;

    --                  IF v_act_code IN (2, 9, 10, 16)
    --                  THEN
    --                     v_client_type := 'A';
    --                  ELSIF v_act_code = 3
    --                  THEN
    --                     v_client_type := 'B';
    --                  ELSIF v_act_code = 4
    --                  THEN
    --                     v_client_type := 'FI';
    --                  ELSIF v_act_code = 5
    --                  THEN
    --                     v_client_type := 'I';
    --                  ELSIF v_act_code = 6
    --                  THEN
    --                     v_client_type := 'R';
    --                  ELSIF v_act_code = 7
    --                  THEN
    --                     v_client_type := 'FO';
    --                  ELSE
    --                     raise_application_error (-20001,
    --                                                 'UNDEFINED ACCOUNT TYPE - '
    --                                              || v_act_code
    --                                              || ' -FOR AGENT '
    --                                              || v_agnt_sht_desc
    --                                              || 'i.CPV_ACCOUNT_TYPE '
    --                                              || i.cpv_account_type
    --                                              || 'v_clmrg_claim_no ='
    --                                              || v_clmrg_claim_no
    --                                             );
    --                  END IF;
    --               END IF;

    --               IF v_client_type IS NULL
    --               THEN
    --                  raise_application_error (-20023,
    --                                           'CANNOT POST NULL CLIENT TYPE'
    --                                          );
    --               ELSE
    --                  v_control_acc :=
    --                     fms_interfaces_pkg.sl_control_acc ('GIS', v_client_type);
    --               END IF;

    --               gin_interfaces_pkg.get_gl_acct_code
    --                                          (rev_type,
    --                                                    --v_trnt_type IN VARCHAR2,
    --                                           i.cmb_scl_code,

    --                                           --v_scl_code IN NUMBER,
    --                                           'U',  --     v_app_lvl IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_btr_trans_code IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                                           v_trnt_code,
    --                                           --          v_trnt_code OUT VARCHAR2,
    --                                           v_trnt_gl_code,
    --                                           --          v_trnt_gl_code OUT VARCHAR2,
    --                                           v_trnt_contra_gl_code
    --                                          --          v_trnt_contra_gl_code OUT VARCHAR2
    --                                          );

    --               IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL CTRL A/C - '
    --                                           || v_control_acc
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;

    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL A/C - '
    --                                           || v_trnt_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;

    --               v_rec_count := v_rec_count + 1;

    --               BEGIN
    --                  fms_cheques_pkg.append_chq_trans
    --                                            (v_rec_count,
    --                                             ROUND (NVL (i.cpv_rein_amount, 0),
    --                                                    v_bcur_rnd
    --                                                   ),
    --                                             'GL TRANS' || v_trnt_code,
    --                                             --narrative,
    --                                             v_trnt_gl_code,
    --                                             -- crt_acc_number
    --                                             v_org_code,  --crt_acc_org_code ,
    --                                             v_paymnt_brh_code,

    --                                             --i.cmb_brn_code,          --v_brh_code,
    --                                             'C',                   --v_dr_cr,
    --                                             v_chq_dtls
    --                                            );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || v_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END IF;
    --         END IF;

    ----************************VAT************************
    --         IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --         THEN
    --            IF NVL (v_vat_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHVAT',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    ----RAISE_eRROR(v_vat_amt||' = '||v_vattowithhold_app_param);
    --               v_rec_count := v_rec_count + 1;

    --               IF     (   NVL (v_clmfee_garage_param, 'N') = 'Y'
    --                       OR NVL (v_vattowithhold_app_param, 'N') = 'Y'
    --                      )
    --                  AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --               THEN
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,

    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               ELSE
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,

    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               END IF;
    --            END IF;
    --         END IF;

    ----************************VATTOWTH************************
    ----raise_error('v_vattowithhold_amnt='||v_vattowithhold_amnt);
    --         IF NVL (v_vattowithhold_amnt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('VATTOWTH',                   --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    ----RAISE_eRROR(v_trnt_gl_code||' = '||v_trnt_contra_gl_code);
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                          (v_rec_count,
    --                                           ROUND (NVL (v_vattowithhold_amnt,
    --                                                       0),
    --                                                  v_rnd
    --                                                 ),
    --                                           'CLAIM PAYMENT VATTOWTH AMT',
    --                                           --narrative,
    --                                           v_trnt_gl_code,---basv_trnt_contra_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,

    --                                           --i.cmb_brn_code,          --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls,
    --                                           NULL,
    --                                           NULL,
    --                                           i.cmb_unit_code,
    --                                           i.cmb_location_code
    --                                          );
    --         END IF;

    --         --************************WITHHOLDING TAX************************
    --         IF NVL (v_whtx_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_whtx_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM PAYMENT WHTAX AMT',
    --                                              --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         --************************EXCISE DUTY************************
    --         IF NVL (v_exciseduty_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('EXDTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_exciseduty_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;

    ----************************REINSURANCE************************
    --         FOR c_treaty_rec IN c_treaties
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND c_treaty_rec.TRPA_GL_ACCOUNT IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||c_treaty_rec.ACCOUNT_NAME);
    ----             END IF;
    --            IF c_treaty_rec.trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;

    --            --**************************** Update Quota Revision Amount***************************
    --            IF c_treaty_rec.trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_gl_code,     -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_contra_gl_code,
    --                                         -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --            END IF;

    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;

    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;
    --         END LOOP;

    --         --**************************** Update Facultative Revision Amount***************************
    --         FOR f IN c_facre
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND f.AGN_ACC_NO IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||f.AGN_NAME);
    ----             END IF;
    --            IF f.cfrr_amount <> 0
    --            THEN
    --               v_lvl := 'FO';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := f.agn_acc_no;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, null);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END LOOP;

    --         BEGIN
    --            SELECT SUM (NVL (crpr_amt, 0))
    --              INTO v_ripool_amt
    --              FROM gin_clm_ri_pool_recoveries
    --             WHERE crpr_ggt_tran_no = v_trans_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --         END;

    --         IF v_ripool_amt <> 0                              -- reinsurance pool
    --         THEN
    --            v_lvl := 'POOL';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         IF gin_parameters_pkg.get_param_varchar ('REVISE_GL_ON_CLAIM_PYMT') =
    --                                                                           'Y'
    --         THEN
    --            rev_type := 'LRV';

    --            BEGIN
    --               SELECT   SUM (DECODE (trs_trtg_code,
    --                                     1001, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     1003, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10041, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10042, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        rei_local_forgn
    --                   INTO v_trt_man_amt,
    --                        v_trt_qs_amt,
    --                        v_trt_fst_amt,
    --                        v_trt_sec_amt,
    --                        v_frgn_or_local
    --                   FROM gin_clm_treaty_recoveries,
    --                        gin_treaties,
    --                        gin_treaty_setups
    --                  WHERE ctrtr_trs_code = trs_code
    --                    AND ctrtr_cmb_claim_no = v_clmrg_claim_no
    --                    AND ctrtr_ggt_trans_no = v_trans_no
    --                    AND rei_code = ctrtr_rei_code
    --               GROUP BY rei_local_forgn;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_trt_man_amt := 0;
    --                  v_trt_qs_amt := 0;
    --                  v_trt_fst_amt := 0;
    --                  v_trt_sec_amt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'SYSTEM COULD NOT RETRIEVE TREATY RI APPORTIONMENT '
    --                      || ';'
    --                      || v_clmrg_claim_no
    --                      || ';'
    --                      || v_trans_no
    --                     );
    --            END;

    --            IF NVL (v_payment_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            IF v_trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update Quota Revision Amount***************************
    --            --RAISE_ERROR('v_trt_qs_amt='||v_trt_qs_amt);
    --            IF v_trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               --  Raise_error(v_trnt_gl_code);
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF v_trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code := fms_interfaces_pkg.sl_control_acc('GIS', 'R','FSTSUP') ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF v_trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update Facultative Revision Amount***************************
    --            BEGIN
    --               SELECT SUM (NVL (cfrr_amount, 0))
    --                 INTO v_trt_fac_amt
    --                 FROM gin_clm_facre_recoveries
    --                WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --                  AND cfrr_ggt_trans_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                         ('SYSTEM COULD NOT RETRIEVE FACRE RI APPORTIONMENT ');
    --            END;

    --            IF v_trt_fac_amt <> 0
    --            THEN
    --               v_lvl := 'FO';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code:=fms_interfaces_pkg.sl_control_acc('GIS', 'FO')  ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            BEGIN
    --               SELECT SUM (NVL (crpr_amt, 0))
    --                 INTO v_ripool_amt
    --                 FROM gin_clm_ri_pool_recoveries
    --                WHERE crpr_ggt_tran_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --            END;

    --            IF v_ripool_amt <> 0
    --            THEN                                           -- reinsurance pool
    --               v_lvl := 'POOL';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END IF;

    --         --****************COINSURANCE PAY FULL FOR LEADER COMBINED*************************
    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            IF NVL (v_ccop_amount, 0) != 0
    --            THEN
    --               SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
    --                                                         v_coin_client_type
    --                                                        )
    --                 INTO v_trnt_contra_gl_code
    --                 FROM DUAL;

    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
    --                                                     v_org_code,
    --                                                     i.cmb_brn_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'COIN GL CONTROL A/C - '
    --                                           || v_trnt_contra_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                          );
    --               END IF;

    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                 ROUND (NVL (v_ccop_amount,
    --                                                             v_rnd
    --                                                            )
    --                                                       ),
    --                                                 'CLAIM',
    --                                                 v_trnt_contra_gl_code,
    --                                                 v_org_code,
    --                                                 v_paymnt_brh_code,
    --                                                 'D',
    --                                                 v_chq_dtls,
    --                                                 NULL,
    --                                                 NULL,
    --                                                 i.cmb_unit_code,
    --                                                 i.cmb_location_code
    --                                                );
    --            END IF;
    --         END IF;

    ----************************************************************
    --         IF v_pay_method IN ('EFT', 'RTGS')
    --         THEN
    --            --RAISE_ERROR(v_net_amt||' ; '||ROUND (NVL (v_net_amt, 0), v_bcur_rnd));
    --            BEGIN
    --               fms_cheques_pkg.create_reqn
    --                  (
    --                  v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),
    --                   i.cpv_cmb_claim_no,
    --                   --'gis claim',             --narrative V
    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                                -- v_net_amt,     --cqr_amount
    --                   i.cpv_payee,
    --                   v_pay_method,
    --                   NULL,
    --                   v_bnk_bbr_pk,                                          --12
    --                   i.cmb_cur_code,
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    --                                                   ),
    --                   i.cpv_authorised_dt,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-CLAIM',                                 -- pmt_type  ,
    --                   v_chq_dtls,
    --                   v_payee_eft_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   v_bnk_bbr_code,
    --                   v_bnk_account,
    --                   NULL,
    --                   'N'                                           --v_auto_auth
    --                  );
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error (   'ERROR ON CREATING PAYMENT REQUISITION < '
    ----                               || v_pay_method
    ----                               || '> FOR.'
    ----                               || i.cpv_payee
    ----                               || SQLERRM (SQLCODE)
    ----                              );
    --            END;
    --         ELSIF v_pay_method IN ('MOB')
    --         THEN
    --            BEGIN
    --               fms_cheques_pkg.create_reqn
    --                  (v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),
    --                   i.cpv_cmb_claim_no,
    --                   --'gis claim',             --narrative V
    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),        --cqr_amount
    --                   i.cpv_payee,
    --                   i.cmb_cur_code,
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    --                                                   ),
    --                   i.cpv_authorised_dt,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-CLAIM',                                 -- pmt_type  ,
    --                   v_chq_dtls,
    --                   v_payee_mft_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   v_mpt_code,
    --                   'N'                                           --v_auto_auth
    --                  );
    --            END;
    --         ELSE
    --            BEGIN
    --               -- RAISE_eRROR(v_net_amt||' = '||i.cmb_coin_pay_type);
    --               fms_cheques_pkg.create_reqn
    --                  (
    --                  v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),
    --                   i.cpv_cmb_claim_no,
    --                   --'GIS Claim',             --narrative V
    --                   v_paymnt_brh_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (v_net_amt, 0), v_rnd),             --cqr_amount
    --                   i.cpv_payee,
    --                   i.cpv_vchr_cur_code,
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    --                                                   ),
    --                   i.cpv_authorised_dt,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-CLAIM',                                 -- pmt_type  ,
    --                   v_chq_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   v_cqr_bnk_dtls,
    --                   v_auto_auth

    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   v_paymnt_brh_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_rnd),             --cqr_amount
    ----                   i.cpv_payee,
    ----                   i.cpv_vchr_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by) ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                 --  v_cqr_bnk_dtls,
    ----                   v_auto_auth



    --                  );
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_application_error (-20001,
    ----                                              'CREATE_REQN :- '
    ----                                           || v_net_amt
    ----                                           || ' $ '||v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code
    ----                                           || SQLERRM (SQLCODE)
    ----                                          );
    --            END;
    --         END IF;
    --      END LOOP;

    --      IF v_rec_count = 0
    --      THEN
    --         raise_application_error (-20001,
    --                                     'CLM REQN NOT CREATED FOR CLAIM # '
    --                                  || v_clmrg_claim_no
    --                                 );
    --      END IF;
    --   END;
    --PROCEDURE process_claim_pymt (
    --      v_clmrg_claim_no   VARCHAR2,
    --      v_trans_no         NUMBER,
    --      v_user_name        VARCHAR2,
    --      v_pay_method       VARCHAR2 DEFAULT 'CHQ'
    --   )
    --   IS
    --      v_cmb_claim_no              NUMBER;
    --      v_cqr_bnk_dtls              fms_cheques_pkg.type_bnk_dtls_table;

    --      CURSOR c_claim
    --      IS
    --         SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
    --                 gin_clm_payment_vouchers.cpv_invoice_no,
    --                gin_clm_payment_vouchers.cpv_vchr_cur_code,
    --                gin_clm_payment_vouchers.cpv_cur_code,
    --                gin_clm_payment_vouchers.cpv_voucher_no,
    --                gin_clm_payment_vouchers.cpv_amount_bcur,
    --                gin_clm_payment_vouchers.cpv_apco_cor_code,
    --                gin_clm_payment_vouchers.cpv_date,
    --                gin_clm_payment_vouchers.cpv_authorised,
    --                gin_clm_payment_vouchers.cpv_authorised_by,
    --                gin_clm_payment_vouchers.cpv_account_type,
    --                gin_clm_payment_vouchers.cpv_agnt_agent_code,
    --                cpv_authorised_dt, cpv_amount cpv_amount,
    --                gin_clm_payment_vouchers.cpv_payee,
    --                gin_clm_payment_vouchers.cpv_raise_by,
    --                gin_claim_master_bookings.cmb_cur_code,
    --                gin_claim_master_bookings.cmb_brn_code,
    --                gin_clm_payment_vouchers.cpv_drcr_no, cpv_comp_retention,
    --                cpv_man_amount, cpv_quota_amount, cpv_fstsup_amount,
    --                cpv_secsup_amount, cpv_facre_amount,
    --                SUBSTR (cpv_tran_type, 0, 2) cpv_tran_type,
    --                gin_claim_master_bookings.cmb_scl_code,
    --                NVL (cpv_vat_amnt, 0) cpv_vat_amnt,
    --                NVL (cpv_whtx_amnt, 0) cpv_whtx_amnt,
    --                NVL (cpv_net_paid, 0) cpv_net_paid, cpv_bcur_net_paid,
    --                cpv_bcur_vat_amnt, cpv_bcur_whtx_amnt, cpv_post_dated,
    --                cpv_post_dated_date, cpv_rein_amount, cpv_rein_amount_bcur,
    --                cpv_excess_amount, cpv_excess_amount_bcur, cpv_ret_salvage,
    --                cpv_ret_salvage_bcur, NULL cpv_disc_amt, cpv_claimant_type,
    --                cpv_reg_cld_code, cpv_cbp_code, cpv_reg_clmt_code,
    --                cpv_exciseduty_amnt cpv_exciseduty_amnt,
    --                cpv_bcur_exciseduty_amnt, cmb_coin_pay_type,
    --                cpv_coin_tot_net_paid, cpv_coin_tot_vat_amnt,
    --                cpv_coin_tot_whtx_amnt, cpv_coin_tot_exciseduty_amnt,
    --                cpv_coin_tot_amt, cpv_coin_tot_amt_bcur, cmb_pol_policy_type,
    --                cmb_location_code, cmb_unit_code,
    --                cpv_coin_vattowithhold_amnt, cpv_bcur_vattowithhold_amnt,
    --                cpv_coin_vattowithhold_amnt cpv_vattowithhold_amnt,
    --                gin_clm_payment_vouchers.cpv_cur_rate cpv_cur_rate
    --           FROM gin_claim_master_bookings, gin_clm_payment_vouchers
    --          WHERE cmb_claim_no = cpv_cmb_claim_no
    --            AND cmb_claim_no = v_clmrg_claim_no
    --            AND cpv_ggt_trans_no = v_trans_no;

    --      v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
    --      v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
    --      v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
    --      v_cqr_brh_code              NUMBER;
    --      v_user_code                 NUMBER;
    --      v_cqr_source_auth_by        NUMBER;
    --      v_cqr_source_auth_dt        DATE;
    --      exc_user_error              EXCEPTION;
    --      v_brh_name                  VARCHAR2 (100);
    --      v_bct_code                  NUMBER;
    --      v_bct_brh_code              NUMBER;
    --      v_crt_acc_number            VARCHAR2 (20);
    --      v_crt_acc_org_code          NUMBER;
    --      v_trnt_gl_code              VARCHAR2 (20);
    --      v_trnt_contra_gl_code       VARCHAR2 (20);
    --      v_trnt_code                 VARCHAR2 (20);
    --      v_acc_type                  VARCHAR2 (20);
    --      v_cqr_source                NUMBER;
    --      v_rec_count                 NUMBER                                  := 0;
    --      v_org_code                  NUMBER;
    --      v_exch_rate                 NUMBER;
    --      v_exch_rate2                NUMBER;
    --      v_rnd                       NUMBER;
    --      v_bcur_rnd                  NUMBER;
    --      v_cur_code                  NUMBER;
    --      v_paymnt_brh_code           NUMBER;
    --      v_trt_man_amt               NUMBER;
    --      v_trt_qs_amt                NUMBER;
    --      v_trt_fst_amt               NUMBER;
    --      v_trt_sec_amt               NUMBER;
    --      v_trt_fac_amt               NUMBER;
    --      v_lvl                       VARCHAR2 (15);
    --      rev_type                    VARCHAR2 (15);
    --      v_payment_amt               gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
    --      v_ripool_amt                NUMBER;
    --      v_net_amt                   NUMBER;
    --      v_vat_amt                   NUMBER;
    --      v_whtx_amt                  NUMBER;
    --      v_tot_amt                   NUMBER;
    --      v_disc_amt                  NUMBER;
    --      v_rein_amt                  NUMBER;
    --      v_excess_amt                NUMBER;
    --      v_control_acc               VARCHAR2 (30);
    --      v_client_type               VARCHAR2 (5);
    --      v_act_code                  NUMBER;
    --      v_agnt_sht_desc             VARCHAR2 (25);
    --      v_salv_amt                  NUMBER;
    --      v_per_code                  NUMBER;
    --      v_charge_servp_wthtax       VARCHAR2 (1);
    --      v_auto_auth                 VARCHAR2 (1);
    --      v_eft_enabled               VARCHAR2 (1);
    --      v_bnk_account               VARCHAR2 (30);
    --      v_bnk_bbr_code              VARCHAR2 (30);
    --      v_auth_param                VARCHAR2 (1);
    --      v_sms_tel                   VARCHAR2 (30);
    --      v_ref_no                    VARCHAR2 (30);
    --      v_mpt_code                  NUMBER;
    --      v_exciseduty_amt            NUMBER;
    --      v_ccop_amount_bcur          NUMBER;
    --      v_coin_amount               NUMBER;
    --      v_ccop_amount               NUMBER;
    --      v_coin_client_type          VARCHAR2 (5);
    --      --variable added by kim kahunja to reference tqc_bank_branches pk to be passed on cheque requisition
    --      v_bnk_bbr_pk                NUMBER;
    --      v_trt_lvl                   VARCHAR2 (1)                          := 'P';
    --      v_facre_gl_acc_no           VARCHAR2 (30);
    --      v_frgn_or_local             VARCHAR2 (30);
    --      v_clmfee_garage_param       VARCHAR2 (1)                          := 'N';
    --      v_spr_cnt                   NUMBER;
    --      v_trt_rcry_gl_param         VARCHAR2 (1);
    --      v_vattowithhold_app_param   VARCHAR2 (1)                          := 'N';
    --      v_vattowithhold_amnt        NUMBER;

    --      CURSOR c_treaties
    --      IS
    --         SELECT   SUM
    --                     (DECODE (trs_trtg_code,
    --                              1001, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_man_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              1003, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_qs_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10041, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_fst_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10042, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_sec_amt,
    --                  DECODE
    --                     (NVL (v_trt_lvl, 'T'),
    --                      'T', NULL,
    --                      NVL (trpa_gl_rcvbl_account,
    --                           DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                   'N', trpa_gl_account,
    --                                   NULL
    --                                  )
    --                          )
    --                     ) trpa_gl_account,
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ) account_name,
    --                  rei_local_forgn
    --             FROM gin_clm_treaty_recoveries,
    --                  gin_treaty_setups,
    --                  gin_treaty_participants,
    --                  gin_treaties,
    --                  tqc_agencies
    --            WHERE ctrtr_rei_code = rei_code
    --              AND trpa_rei_code = rei_code
    --              AND ctrtr_trs_code = trs_code
    --              AND trpa_agnt_agent_code = agn_code
    --              AND ctrtr_ggt_trans_no = v_trans_no
    --         GROUP BY DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          NVL (trpa_gl_rcvbl_account,
    --                               DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                       'N', trpa_gl_account,
    --                                       NULL
    --                                      )
    --                              )
    --                         ),
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ),
    --                  rei_local_forgn;

    --      CURSOR c_facre
    --      IS
    --         SELECT   SUM (DECODE (cfrr_pol_cur_code,
    --                               cfrr_trt_cur_code, NVL (cfrr_amount, 0),
    --                               NVL (cfrr_amount_bcur, 0)
    --                              )
    --                      ) cfrr_amount,
    --                  DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ) agn_acc_no,
    --                  agn_sht_desc, agn_name
    --             FROM gin_clm_facre_recoveries, tqc_agencies
    --            WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --              AND cfrr_ggt_trans_no = v_trans_no
    --              AND cfrc_agnt_agent_code = agn_code
    --         GROUP BY DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ),
    --                  agn_sht_desc,
    --                  agn_name;
    --   BEGIN
    --
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('AUTO_AUTH_CLM_PYMTS')
    --           INTO v_auth_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_auth_param := 'Y';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching AUTO_AUTH_CLM_PYMTS parameter...');
    --      END;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                        ('SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL')
    --           INTO v_trt_rcry_gl_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_trt_rcry_gl_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --               ('Error fetching SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL parameter...'
    --               );
    --      END;

    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('CLMFEE_GARAGE_VAT')
    --           INTO v_clmfee_garage_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_clmfee_garage_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching CLMFEE_GARAGE_VAT parameter...');
    --      END;

    --      BEGIN
    --         SELECT param_value
    --           INTO v_vattowithhold_app_param
    --           FROM gin_parameters
    --          WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_vattowithhold_app_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                       ('Error getting VATTOWITHHOLD_APPLICABLE parameters..');
    --      END;

    --      IF NVL (v_pay_method, 'CHQ') = 'JE'
    --      THEN
    --         v_auto_auth := 'N';
    --      ELSE
    --         IF NVL (v_auth_param, 'N') = 'Y'
    --         THEN
    --            v_auto_auth := 'Y';
    --         ELSE
    --            v_auto_auth := 'N';
    --         END IF;
    --      END IF;

    --      v_rec_count := 0;
    --    --RAISE_ERROR('v_clmrg_claim_no'||v_clmrg_claim_no||'v_trans_no'||v_trans_no);
    --      FOR i IN c_claim
    --      LOOP
    --         v_exch_rate :=
    --                   get_currexch_rate (i.cpv_vchr_cur_code, v_rnd, v_bcur_rnd);
    --

    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'O'
    --         THEN
    --
    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_net_paid;
    --               v_vat_amt := i.cpv_vat_amnt;
    --               v_whtx_amt := i.cpv_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --
    --               IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --               THEN
    --
    --                  v_tot_amt :=
    --                     ROUND (  NVL (v_vat_amt, 0)
    --                            + NVL (v_whtx_amt, 0)
    --                            + NVL (v_exciseduty_amt, 0)
    --                            + NVL (v_salv_amt, 0)
    --                            + NVL (v_excess_amt, 0)
    --                            + NVL (v_net_amt, 0),
    --                            0
    --                           );
    --               ELSE
    --                --RAISE_ERROR('v_net_amt'||v_payment_amt||'v_tot_amt'||v_tot_amt);
    --                  v_tot_amt :=
    --                     ROUND (  NVL (v_net_amt, 0)
    --                            + NVL (v_whtx_amt, 0)
    --                            + NVL (v_exciseduty_amt, 0)
    --                            + NVL (v_salv_amt, 0)
    --                            + NVL (v_excess_amt, 0)
    --                            + NVL (v_vattowithhold_amnt, 0),
    --                            0
    --                           );
    --
    --               END IF;
    --            ELSE
    --
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_bcur_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         --- NVL (v_vattowithhold_amnt, 0)
    --                         + NVL (v_net_amt, 0),
    --                         0
    --                        );
    --
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         ELSIF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            SELECT   SUM (NVL (ccop_amount, 0)),
    --                     SUM (NVL (ccop_amount_bcur, 0)), act_type_sht_desc
    --                INTO v_ccop_amount,
    --                     v_ccop_amount_bcur, v_coin_client_type
    --                FROM gin_clm_coin_payments, tqc_agencies, tqc_account_types
    --               WHERE agn_code = ccop_agnt_agent_code
    --                 AND agn_act_code = act_code
    --                 AND ccop_cpv_voucher_no = i.cpv_voucher_no
    --            GROUP BY act_type_sht_desc;

    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_coin_tot_net_paid;
    --               v_vat_amt := i.cpv_coin_tot_vat_amnt;
    --               v_whtx_amt := i.cpv_coin_tot_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_coin_tot_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := NVL (v_ccop_amount, 0);
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         --- NVL (v_vattowithhold_amnt, 0)
    --                         + NVL (v_exciseduty_amt, 0)
    --                         + NVL (v_net_amt, 0)
    --                         - NVL (v_coin_amount, 0),
    --                         0
    --                        );
    --            ELSE
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := v_ccop_amount_bcur;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         --- NVL (v_vattowithhold_amnt, 0)
    --                         + NVL (v_exciseduty_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         + NVL (v_net_amt, 0)
    --                         - NVL (v_coin_amount, 0),
    --                         0
    --                        );
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         END IF;

    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
    --         v_paymnt_brh_code := i.cmb_brn_code;
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --         fms_interfaces_pkg.trans_bct ('CLM',
    --                                       v_cqr_source,
    --                                       v_paymnt_brh_code,
    --                                       v_cur_code,
    --                                       v_bct_code,
    --                                       v_bct_brh_code
    --                                      );

    --         IF     NVL (v_clmfee_garage_param, 'N') = 'Y'
    --            AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --         THEN
    --            BEGIN
    --               SELECT COUNT (*)
    --                 INTO v_spr_cnt
    --                 FROM tqc_service_provider_reg
    --                WHERE sreg_spr_code = i.cpv_apco_cor_code;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_spr_cnt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  v_spr_cnt := 0;
    --            END;

    --
    --            IF NVL (v_spr_cnt, 0) > 0
    --            THEN
    --               v_tot_amt := NVL (v_tot_amt, 0) - NVL (v_vat_amt, 0);
    --               v_net_amt := NVL (v_net_amt, 0) + NVL (v_vat_amt, 0);
    --            END IF;
    --         END IF;
    --
    --         IF ROUND (NVL (v_payment_amt, 0), 0) != v_tot_amt
    --         THEN
    --            raise_application_error
    --                            (-20001,
    --                                'THE NET CHEQUE AMOUNT '
    --                             || NVL (v_net_amt, 0)
    --                             || ' PLUS VAT '
    --                             || NVL (v_vat_amt, 0)
    --                             || ' AND WHTTAX '
    --                             || NVL (v_whtx_amt, 0)
    --                             || ' PLUS EXCISE DUTY '
    --                             || NVL (v_exciseduty_amt, 0)
    --                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                             || v_payment_amt
    --                             || 'v_tot_amt'
    --                             || v_tot_amt
    --                            );
    --         END IF;

    ----          raise_application_error
    ----                            (-20001,
    ----                                'THE NET CHEQUE AMOUNT '
    ----                             || NVL (v_net_amt, 0)
    ----                             || ' PLUS VAT '
    ----                             || NVL (v_vat_amt, 0)
    ----                             || ' AND WHTTAX '
    ----                             || NVL (v_whtx_amt, 0)
    ----                             || ' PLUS EXCISE DUTY '
    ----                             || NVL (v_exciseduty_amt, 0)
    ----                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    ----                             || v_payment_amt
    ----                             || 'v_tot_amt'
    ----                             || v_tot_amt
    ----                            );

    --         --         IF  NVL(v_vattowithhold_app_param,'N')='Y'   THEN
    ----           v_payment_amt:=NVL(v_payment_amt,0)-NVL(v_vat_amt,0)+NVL(v_vattowithhold_amnt,0);
    ----         END IF;
    --         IF i.cpv_tran_type = 'CF'
    --         THEN
    --            rev_type := 'CF';

    --            BEGIN
    --               IF NVL (v_disc_amt, 0) > 0
    --               THEN
    --                  SELECT voud_per_code
    --                    INTO v_per_code
    --                    FROM gin_voucher_details
    --                   WHERE voud_cpv_voucher_no = i.cpv_voucher_no;

    --                  gin_stp_claims_pkg.create_srv_prvdr_reserve
    --                                                         (v_clmrg_claim_no,
    --                                                          v_per_code,
    --                                                          -v_disc_amt,
    --                                                          NULL,
    --                                                          v_user_name,
    --                                                          i.cpv_apco_cor_code,
    --                                                          NULL,
    --                                                          'A',
    --                                                          NULL,
    --                                                          NULL,
    --                                                          NULL
    --                                                         );
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (   'Error creating Discount Revision '
    --                               || SQLERRM (SQLCODE)
    --                              );
    --            END;
    --         ELSE
    --            rev_type := 'CP';
    --         END IF;

    --         IF NVL (v_payment_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );

    ----                     RAISE_ERROR(v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code);

    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               BEGIN
    --                  v_eft_enabled := 'N';

    --                  /*NOTES
    --                  1. SERVICE PROVIDES
    --                  2. CLIENTS
    --                  3. CLAIMANTS
    --                  4. BUSINESS PERSONS
    --                  5. ACCOUNTS*/
    --                  --raise_error('i.cpv_claimant_type '||i.cpv_claimant_type || ' rev_type '||rev_type);
    --                  IF rev_type = 'CP'
    --                  THEN
    --                --raise_error('cpv_claimant_type='||i.cpv_claimant_type);
    --                     IF NVL (i.cpv_claimant_type, 'S') = 'O'
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled (bnk_bbr_code (i.cpv_cbp_code, 4));
    --                        v_bnk_account := bnk_account (i.cpv_cbp_code, 4);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              4
    --                                                             )
    --                                               );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 4);

    --                        -- raise_error('acc....'||bnk_bbr_code (i.cpv_cbp_code, 4)||' i.cpv_cbp_code '||i.cpv_cbp_code);
    --                        BEGIN
    --                           IF v_eft_enabled = 'N'
    --                           THEN
    --                              IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                              THEN
    --                                 v_eft_enabled :=
    --                                    account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                                 v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                                 v_bnk_bbr_code :=
    --                                    tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           3
    --                                                          )
    --                                            );
    --                                 v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                              END IF;
    --                           END IF;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              v_eft_enabled := 'N';
    --                        END;

    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_cbp_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              1
    --                                                             )
    --                                               );
    --                              v_bnk_account := bnk_account (i.cpv_cbp_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                                (bnk_bbr_code (i.cpv_cbp_code,
    --                                                               1
    --                                                              )
    --                                                );
    --                              v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 1);
    --                           END IF;
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'T'
    --                     THEN
    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                        THEN
    ----                            RAISE_ERROR('BANK BRANCH CODE..'||bnk_bbr_code (i.cpv_apco_cor_code, 1));
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_code :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'S'
    --                     THEN
    --

    --                        IF i.cpv_apco_cor_code IS NOT NULL
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                              v_bnk_account :=
    --                                          bnk_account (i.cpv_apco_cor_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                              v_bnk_bbr_pk :=
    --                                         bnk_bbr_code (i.cpv_apco_cor_code, 1);

    --                           END IF;
    --                           END IF;
    ----RAISE_ERROR('i.cpv_apco_cor_code'||bnk_bbr_code (i.cpv_reg_cld_code, 2) );
    --                            IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                            );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;

    --                     ELSE
    ----  RAISE_ERROR('i.cpv_apco_cor_code'||i.cpv_reg_cld_code);
    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                           --   tqc_interfaces_pkg.bank_ref
    --                                        --    (
    --                                            bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                        --    )
    --                                            ;
    --                        --RAISE_ERROR('CHECKING CLAIM PAYMENT='|| v_bnk_bbr_code );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;
    --                     END IF;
    --                  ELSE
    --
    --                     IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                        v_bnk_account := bnk_account (i.cpv_apco_cor_code, 1);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_apco_cor_code, 1);
    --
    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --
    --                           IF bnk_bbr_code (i.cpv_agnt_agent_code, 5) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                        (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                       5
    --                                                      )
    --                                        );
    --                              v_bnk_account :=
    --                                        bnk_account (i.cpv_agnt_agent_code, 5);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                         (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                        5
    --                                                       )
    --                                         );
    --                              v_bnk_bbr_pk :=
    --                                       bnk_bbr_code (i.cpv_agnt_agent_code, 5);
    --                           END IF;
    --                        END IF;
    --
    --                     END IF;
    --
    --                  END IF;
    --
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR GETTING BANK ACC INFO... ');
    --               END;
    ----raise_error('v_eft_enabled++'||v_eft_enabled||'v_bnk_bbr_code+++'||v_bnk_bbr_code||'v_bnk_account+++'||v_bnk_account);
    ----raise_error('v_eft_enabled++'||v_eft_enabled||'v_bnk_bbr_code+++'||v_bnk_bbr_code||'v_bnk_account+++'||v_bnk_account||' i.cpv_payee++'|| i.cpv_payee);
    --               IF v_eft_enabled = 'N'
    --               THEN
    --                  raise_application_error
    --                                   (-20001,
    --                                       'BANK BRANCH NOT ENABLED TO TRANSACT '
    --                                    || v_pay_method
    --                                    || '  ADAS  '
    --                                    || i.cpv_claimant_type
    --                                    || ' PAYMENTS'
    --                                    || i.cpv_reg_cld_code
    --                                    || ' ; '
    --                                    || rev_type
    --                                    || ' ; '
    --                                    || i.cpv_agnt_agent_code
    --                                   );
    --               END IF;
    --            END IF;

    --            v_rec_count := v_rec_count + 1;

    --            --raise_Error('v_payment_amt='||v_payment_amt);
    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               fms_cheques_pkg.append_eft_payees
    --                     (v_rec_count,        --v_no                       NUMBER,
    --                      i.cpv_voucher_no,   --v_ref1                   VARCHAR2,
    --                      ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                      i.cpv_payee,      --v_narrative                VARCHAR2,
    --                      v_bnk_bbr_code,
    --                      --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                      v_bnk_account,    --v_bnk_account              VARCHAR2,
    --                      i.cpv_cmb_claim_no, --v_ref2                   VARCHAR2,
    --                      v_payee_eft_dtls
    --                     );
    --               fms_cheques_pkg.append_chq_trans
    --                                               (v_rec_count,
    --                                                ROUND (v_payment_amt, v_rnd),
    --                                                   'CLAIM PAYMENT GROSS AMT '
    --                                                || v_pay_method,
    --                                                --narrative,
    --                                                v_trnt_gl_code,
    --                                                -- crt_acc_number
    --                                                v_org_code,
    --                                                --crt_acc_org_code ,
    --                                                i.cmb_brn_code,

    --                                                ---commented by Solo v_paymnt_brh_code
    --                                                'D',                --v_dr_cr,
    --                                                v_chq_dtls,
    --                                                NULL,
    --                                                NULL,
    --                                                i.cmb_unit_code,
    --                                                i.cmb_location_code
    --                                               );
    --            ELSIF v_pay_method IN ('MOB')
    --            --Added by Masinde to take care of mobile payments 30052015
    --            THEN
    --               IF i.cpv_tran_type = 'CP'
    --               THEN
    --                  --RAISE_ERROR(i.cpv_reg_clmt_code);
    --                  BEGIN
    --                  SELECT MOBILENO,cld_id_no
    --                       INTO v_sms_tel, v_ref_no
    --                       FROM(
    --                     SELECT NVL (cld_mobile_no, cld_mobile_phone)MOBILENO, cld_id_no
    --                       FROM gin_rgstd_claimants, gin_claimants
    --                      WHERE cld_code = reg_cld_code
    --                        AND reg_cmb_claim_no = v_clmrg_claim_no
    --                        and REG_THIRD_PARTY='T'
    --                        AND reg_clmt_code = i.cpv_reg_clmt_code
    --                        union
    --                       SELECT NVL (CLNT_TEL, CLNT_SMS_TEL)MOBILENO, CLNT_ID_REG_NO cld_id_no
    --                       FROM gin_rgstd_claimants, tqc_clients
    --                      WHERE CLNT_CODE = reg_cld_code
    --                        AND reg_cmb_claim_no = v_clmrg_claim_no
    --                        and REG_THIRD_PARTY='S'
    --                        AND reg_clmt_code = i.cpv_reg_clmt_code);
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting Claimants Mobile Payment details'
    --                            || i.cpv_reg_clmt_code
    --                           );
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     SELECT NVL (spr_sms_number, spr_mobile_no),
    --                            NVL (spr_pin_number, spr_pin)
    --                       INTO v_sms_tel,
    --                            v_ref_no
    --                       FROM tqc_service_providers
    --                      WHERE spr_code = i.cpv_apco_cor_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting service providers Mobile Payment details'
    --                            || i.cpv_apco_cor_code
    --                           );
    --                  END;
    --               END IF;

    --               IF v_sms_tel IS NOT NULL
    --               THEN
    --                  SELECT mpt_code
    --                    INTO v_mpt_code
    --                    FROM tqc_mob_pymnt_types_prefixes, tqc_mobile_pymnt_types
    --                   WHERE mptp_mpt_code = mpt_code
    --                     AND mptp_mob_no_prefix = '0'||SUBSTR (v_sms_tel, 5, 3);
    --               ELSE
    --                  raise_application_error
    --                     (-20001,
    --                      'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..'
    --                     );
    --               END IF;

    --               BEGIN
    --                  v_payee_mft_dtls (1) :=
    --                     fms_cheques_pkg.append_mft_payees
    --                                    (v_rec_count,
    --                                     i.cpv_voucher_no,
    --                                     ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                     ---v_amount,
    --                                     i.cpv_payee,               --v_narrative,
    --                                     v_sms_tel,

    --                                     --v_credit_id                                                                                 ,
    --                                     'Mobile Phone Number', --v_credit_id_type
    --                                     v_ref_no,               --v_validation_id
    --                                     'REFERENCE NO'     --v_validation_id_type
    --                                    );
    --                  fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                    ROUND (v_payment_amt,
    --                                                           v_rnd
    --                                                          ),
    --                                                    'CLAIM',      --narrative,
    --                                                    v_trnt_gl_code,
    --                                                    -- crt_acc_number
    --                                                    v_org_code,
    --                                                    --crt_acc_org_code ,
    --                                                    v_paymnt_brh_code,

    --                                                    --i.cmb_brn_code,          --v_brh_code,
    --                                                    'D',            --v_dr_cr,
    --                                                    v_chq_dtls
    --                                                   );
    --               --fms_chq_mftfile_dtls
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error (   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
    --                                  || i.cpv_voucher_no
    --                                 );
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                               (   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
    --                                || i.cpv_voucher_no
    --                               );
    --               END;
    --            ELSE
    --               fms_cheques_pkg.append_chq_trans
    --                  (v_rec_count,
    --                   ROUND (v_payment_amt, v_rnd),
    --                   'CLAIM PAYMENT GROSS AMT',                     --narrative,
    --                   v_trnt_gl_code,                           -- crt_acc_number
    --                   v_org_code,                            --crt_acc_org_code ,
    --                   v_paymnt_brh_code, --i.cmb_brn_code,          --v_brh_code,
    --                   'D',                                             --v_dr_cr,
    --                   v_chq_dtls,
    --                   NULL,
    --                   NULL,
    --                   i.cmb_unit_code,
    --                   i.cmb_location_code
    --                  );
    --            END IF;
    --         END IF;

    ----******************************SALVAGE *******************************
    --         IF NVL (v_salv_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CS',                         --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (v_salv_amt, v_rnd),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,

    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;

    ----************************EXCESS************************
    --         IF NVL (v_excess_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CRE',                        --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_excess_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM EXCESS',     --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,

    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;

    ----************************REINSURANCE************************
    --         IF NVL (v_rein_amt, 0) > 0
    --         THEN
    --            IF NVL (i.cpv_rein_amount, 0) != 0
    --            THEN
    --               IF NVL (i.cpv_account_type, 'D') = 'D'
    --               THEN
    --                  v_client_type := 'D';
    --               ELSE
    --                  BEGIN
    --                     SELECT agn_act_code, agn_sht_desc
    --                       INTO v_act_code, v_agnt_sht_desc
    --                       FROM tqc_agencies
    --                      WHERE agn_code = i.cpv_agnt_agent_code;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        raise_application_error (-20021,
    --                                                    'AGENT - '
    --                                                 || v_client_type
    --                                                 || ' NOT FOUND '
    --                                                );
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_application_error (-20022,
    --                                                    'AGENT INFO '
    --                                                 || SQLERRM (SQLCODE)
    --                                                );
    --                  END;

    --                  IF v_act_code IN (2, 9, 10, 16)
    --                  THEN
    --                     v_client_type := 'A';
    --                  ELSIF v_act_code = 3
    --                  THEN
    --                     v_client_type := 'B';
    --                  ELSIF v_act_code = 4
    --                  THEN
    --                     v_client_type := 'FI';
    --                  ELSIF v_act_code = 5
    --                  THEN
    --                     v_client_type := 'I';
    --                  ELSIF v_act_code = 6
    --                  THEN
    --                     v_client_type := 'R';
    --                  ELSIF v_act_code = 7
    --                  THEN
    --                     v_client_type := 'FO';
    --                  ELSE
    --                     raise_application_error (-20001,
    --                                                 'UNDEFINED ACCOUNT TYPE - '
    --                                              || v_act_code
    --                                              || ' -FOR AGENT '
    --                                              || v_agnt_sht_desc
    --                                              || 'i.CPV_ACCOUNT_TYPE '
    --                                              || i.cpv_account_type
    --                                              || 'v_clmrg_claim_no ='
    --                                              || v_clmrg_claim_no
    --                                             );
    --                  END IF;
    --               END IF;

    --               IF v_client_type IS NULL
    --               THEN
    --                  raise_application_error (-20023,
    --                                           'CANNOT POST NULL CLIENT TYPE'
    --                                          );
    --               ELSE
    --                  v_control_acc :=
    --                     fms_interfaces_pkg.sl_control_acc ('GIS', v_client_type);
    --               END IF;

    --               gin_interfaces_pkg.get_gl_acct_code
    --                                          (rev_type,
    --                                                    --v_trnt_type IN VARCHAR2,
    --                                           i.cmb_scl_code,

    --                                           --v_scl_code IN NUMBER,
    --                                           'U',  --     v_app_lvl IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_btr_trans_code IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                                           v_trnt_code,
    --                                           --          v_trnt_code OUT VARCHAR2,
    --                                           v_trnt_gl_code,
    --                                           --          v_trnt_gl_code OUT VARCHAR2,
    --                                           v_trnt_contra_gl_code
    --                                          --          v_trnt_contra_gl_code OUT VARCHAR2
    --                                          );

    --               IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL CTRL A/C - '
    --                                           || v_control_acc
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;

    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL A/C - '
    --                                           || v_trnt_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;

    --               v_rec_count := v_rec_count + 1;

    --               BEGIN
    --                  fms_cheques_pkg.append_chq_trans
    --                                            (v_rec_count,
    --                                             ROUND (NVL (i.cpv_rein_amount, 0),
    --                                                    v_bcur_rnd
    --                                                   ),
    --                                             'GL TRANS' || v_trnt_code,
    --                                             --narrative,
    --                                             v_trnt_gl_code,
    --                                             -- crt_acc_number
    --                                             v_org_code,  --crt_acc_org_code ,
    --                                             v_paymnt_brh_code,

    --                                             --i.cmb_brn_code,          --v_brh_code,
    --                                             'C',                   --v_dr_cr,
    --                                             v_chq_dtls
    --                                            );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || v_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END IF;
    --         END IF;

    ----************************VAT************************
    --         IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --         THEN
    --            IF NVL (v_vat_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHVAT',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    ----RAISE_eRROR(v_vat_amt||' = '||v_vattowithhold_app_param);
    --               v_rec_count := v_rec_count + 1;

    --               IF     (   NVL (v_clmfee_garage_param, 'N') = 'Y'
    --                       OR NVL (v_vattowithhold_app_param, 'N') = 'Y'
    --                      )
    --                  AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --               THEN
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,

    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               ELSE
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,

    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               END IF;
    --            END IF;
    --         END IF;

    ----************************VATTOWTH************************
    ----raise_error('v_vattowithhold_amnt='||v_vattowithhold_amnt);
    --         IF NVL (v_vattowithhold_amnt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('VATTOWTH',                   --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    ----RAISE_eRROR(v_trnt_gl_code||' = '||v_trnt_contra_gl_code);
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                          (v_rec_count,
    --                                           ROUND (NVL (v_vattowithhold_amnt,
    --                                                       0),
    --                                                  v_rnd
    --                                                 ),
    --                                           'CLAIM PAYMENT VATTOWTH AMT',
    --                                           --narrative,
    --                                           v_trnt_gl_code,---basv_trnt_contra_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,

    --                                           --i.cmb_brn_code,          --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls,
    --                                           NULL,
    --                                           NULL,
    --                                           i.cmb_unit_code,
    --                                           i.cmb_location_code
    --                                          );
    --         END IF;

    --         --************************WITHHOLDING TAX************************
    --         IF NVL (v_whtx_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_whtx_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM PAYMENT WHTAX AMT',
    --                                              --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         --************************EXCISE DUTY************************
    --         IF NVL (v_exciseduty_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('EXDTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_exciseduty_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;

    ----************************REINSURANCE************************
    --         FOR c_treaty_rec IN c_treaties
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND c_treaty_rec.TRPA_GL_ACCOUNT IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||c_treaty_rec.ACCOUNT_NAME);
    ----             END IF;
    --            IF c_treaty_rec.trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;

    --            --**************************** Update Quota Revision Amount***************************
    --            IF c_treaty_rec.trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_gl_code,     -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_contra_gl_code,
    --                                         -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --            END IF;

    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;

    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;
    --         END LOOP;

    --         --**************************** Update Facultative Revision Amount***************************
    --         FOR f IN c_facre
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND f.AGN_ACC_NO IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||f.AGN_NAME);
    ----             END IF;
    --            IF f.cfrr_amount <> 0
    --            THEN
    --               v_lvl := 'FO';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := f.agn_acc_no;

    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, null);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END LOOP;

    --         BEGIN
    --            SELECT SUM (NVL (crpr_amt, 0))
    --              INTO v_ripool_amt
    --              FROM gin_clm_ri_pool_recoveries
    --             WHERE crpr_ggt_tran_no = v_trans_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --         END;

    --         IF v_ripool_amt <> 0                              -- reinsurance pool
    --         THEN
    --            v_lvl := 'POOL';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         IF gin_parameters_pkg.get_param_varchar ('REVISE_GL_ON_CLAIM_PYMT') =
    --                                                                           'Y'
    --         THEN
    --            rev_type := 'LRV';

    --            BEGIN
    --               SELECT   SUM (DECODE (trs_trtg_code,
    --                                     1001, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     1003, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10041, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10042, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        rei_local_forgn
    --                   INTO v_trt_man_amt,
    --                        v_trt_qs_amt,
    --                        v_trt_fst_amt,
    --                        v_trt_sec_amt,
    --                        v_frgn_or_local
    --                   FROM gin_clm_treaty_recoveries,
    --                        gin_treaties,
    --                        gin_treaty_setups
    --                  WHERE ctrtr_trs_code = trs_code
    --                    AND ctrtr_cmb_claim_no = v_clmrg_claim_no
    --                    AND ctrtr_ggt_trans_no = v_trans_no
    --                    AND rei_code = ctrtr_rei_code
    --               GROUP BY rei_local_forgn;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_trt_man_amt := 0;
    --                  v_trt_qs_amt := 0;
    --                  v_trt_fst_amt := 0;
    --                  v_trt_sec_amt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'SYSTEM COULD NOT RETRIEVE TREATY RI APPORTIONMENT '
    --                      || ';'
    --                      || v_clmrg_claim_no
    --                      || ';'
    --                      || v_trans_no
    --                     );
    --            END;

    --            IF NVL (v_payment_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            IF v_trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update Quota Revision Amount***************************
    --            --RAISE_ERROR('v_trt_qs_amt='||v_trt_qs_amt);
    --            IF v_trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               --  Raise_error(v_trnt_gl_code);
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF v_trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code := fms_interfaces_pkg.sl_control_acc('GIS', 'R','FSTSUP') ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF v_trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            --**************************** Update Facultative Revision Amount***************************
    --            BEGIN
    --               SELECT SUM (NVL (cfrr_amount, 0))
    --                 INTO v_trt_fac_amt
    --                 FROM gin_clm_facre_recoveries
    --                WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --                  AND cfrr_ggt_trans_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                         ('SYSTEM COULD NOT RETRIEVE FACRE RI APPORTIONMENT ');
    --            END;

    --            IF v_trt_fac_amt <> 0
    --            THEN
    --               v_lvl := 'FO';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code:=fms_interfaces_pkg.sl_control_acc('GIS', 'FO')  ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;

    --            BEGIN
    --               SELECT SUM (NVL (crpr_amt, 0))
    --                 INTO v_ripool_amt
    --                 FROM gin_clm_ri_pool_recoveries
    --                WHERE crpr_ggt_tran_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --            END;

    --            IF v_ripool_amt <> 0
    --            THEN                                           -- reinsurance pool
    --               v_lvl := 'POOL';

    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;

    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END IF;

    --         --****************COINSURANCE PAY FULL FOR LEADER COMBINED*************************
    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            IF NVL (v_ccop_amount, 0) != 0
    --            THEN
    --               SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
    --                                                         v_coin_client_type
    --                                                        )
    --                 INTO v_trnt_contra_gl_code
    --                 FROM DUAL;

    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
    --                                                     v_org_code,
    --                                                     i.cmb_brn_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'COIN GL CONTROL A/C - '
    --                                           || v_trnt_contra_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                          );
    --               END IF;

    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                 ROUND (NVL (v_ccop_amount,
    --                                                             v_rnd
    --                                                            )
    --                                                       ),
    --                                                 'CLAIM',
    --                                                 v_trnt_contra_gl_code,
    --                                                 v_org_code,
    --                                                 v_paymnt_brh_code,
    --                                                 'D',
    --                                                 v_chq_dtls,
    --                                                 NULL,
    --                                                 NULL,
    --                                                 i.cmb_unit_code,
    --                                                 i.cmb_location_code
    --                                                );
    --            END IF;
    --         END IF;

    ----************************************************************
    --         IF v_pay_method IN ('EFT', 'RTGS')
    --         THEN
    --            --RAISE_ERROR(v_net_amt||' ; '||ROUND (NVL (v_net_amt, 0), v_bcur_rnd));
    --            BEGIN
    ----               fms_cheques_pkg.create_reqn
    ----                  (
    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   --'gis claim',             --narrative V
    ----                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----                                                -- v_net_amt,     --cqr_amount
    ----                   i.cpv_payee,
    ----                   v_pay_method,
    ----                   NULL,
    ----                   v_bnk_bbr_pk,                                          --12
    ----                   i.cmb_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    ----                                                   ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   v_payee_eft_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   v_bnk_bbr_code,
    ----                   v_bnk_account,
    ----                   NULL,
    ----                   'N'                                           --v_auto_auth
    ----                  );
    --
    --                  FMS_INTERFACES_PKG.create_EftRtgs_reqn(
    --                          v_cqr_source,               -- v_cqr_source,
    --                          i.cpv_voucher_no,                       -- v_cqr_ref,
    --                          i.cpv_cmb_claim_no,                     -- v_cqr_ref2,
    --                          TRUNC (SYSDATE),             -- v_cqr_ref_date,
    --                          i.cpv_cmb_claim_no,           -- v_cqr_narrative,
    --                          v_paymnt_brh_code,          -- v_cqr_brh_code,
    --                          v_bct_brh_code, -- v_cqr_bct_brh_code,
    --                          ROUND (NVL (v_net_amt, 0), v_bcur_rnd),                 -- v_cqr_amount,
    --                          i.cpv_payee,                   -- v_cqr_payee,
    --                          v_pay_method,         -- v_cqr_pay_method,
    --                          i.cmb_cur_code,             -- v_cqr_cur_code,
    --                          i.cpv_cur_rate,---i.cpv_cur_rate,
    --                          v_bct_code,---
    --                          fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)),
    --                          i.cpv_authorised_dt,
    --                          v_user_code,                 -- v_cqr_req_by,
    --                          'GIS-CLAIM',             -- v_cqr_pmt_type,
    --                          v_bnk_bbr_code,--v_payee_bank_branch_code,
    --                          v_bnk_account,--v_payee_bank_acc_no,
    --                          v_chq_dtls,             -- v_dtls_table,
    --                          v_payee_eft_dtls,         --v_payee_eft_rec
    --                          NULL,--v_cqr_physical_address
    --                          NULL, ---v_cqr_postal_address
    --                          v_trans_no,--v_itfc_trans_code
    --                          null,--v_itfc_ref3
    --                          null,--v_payee_source_pk,
    --                          null,--v_payee_source_type,
    --                          'N',--v_auto_auth,
    --                          null,--v_num_val_1,
    --                          null,---v_invoice_no,
    --                          null,---v_invoice_date,
    --                          null,---v_auto_consolidate,
    --                          null,---v_batch_no,
    --                          null---v_payee_spr_code
    --                       );
    --
    --
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error (   'ERROR ON CREATING PAYMENT REQUISITION < '
    ----                               || v_pay_method
    ----                               || '> FOR.'
    ----                               || i.cpv_payee
    ----                               || SQLERRM (SQLCODE)
    ----                              );
    --            END;
    --         ELSIF v_pay_method IN ('MOB')
    --         THEN
    --            BEGIN
    --            --RAISE_ERROR('v_bct_code'||v_bct_code);
    --               Fms_Interfaces_Pkg.create_Mob_reqn
    --                  ( v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),
    --                   i.cpv_cmb_claim_no,
    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),        --cqr_amount
    --                   i.cpv_payee,
    --                   v_pay_method,
    --                   i.cmb_cur_code,
    --                    i.cpv_cur_rate,-
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by) ),
    --                   i.cpv_authorised_dt,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-CLAIM',                                 -- pmt_type  ,
    --                   v_mpt_code,
    --                   v_chq_dtls,
    --                   v_payee_mft_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                     'N',
    --                 NULL,
    --                 NULL,
    --                NULL,
    --                 'N',
    --                NULL
    --                  );
    --            END;
    --         ELSE
    --            BEGIN
    --
    ----               fms_cheques_pkg.create_reqn
    ----                  (
    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   --'GIS Claim',             --narrative V
    ----                   v_paymnt_brh_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_rnd),             --cqr_amount
    ----                   i.cpv_payee,
    ----                   i.cpv_vchr_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    ----                                                   ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   v_cqr_bnk_dtls,
    ----                   v_auto_auth
    ----                  );
    --
    --               FMS_INTERFACES_PKG.create_Chq_reqn
    --                  (v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),----
    --                   i.cpv_cmb_claim_no,----
    --                   --'GIS Claim',             --narrative V
    --                   v_paymnt_brh_code,-----
    --                   v_bct_brh_code,----
    --                   v_net_amt,----
    --                   --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
    --                   i.cpv_payee,----
    --                   v_pay_method,---'CHQ',----
    --                   v_cur_code,
    --                   i.cpv_cur_rate,--  --                             --i.cmb_cur_code,
    --                   v_bct_code,---
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    --                                                   ),----
    --                   i.cpv_authorised_dt,-----
    --                   v_user_code,   ----                           --v_cqr_req_by  ,
    --                   'GIS-CLAIM',   ----                              -- pmt_type  ,
    --                   v_chq_dtls,----
    --                   null,--v_cqr_physical_address,
    --                  null,--v_cqr_postal_address,
    --                  null,---v_itfc_trans_code,
    --                  null,--v_itfc_ref3,
    --                  null,--v_payee_source_pk,
    --                  null,--v_payee_source_type,
    --                  v_auto_auth,
    --                  null,--v_num_val_1,
    --                  null,--v_invoice_no,
    --                  null,--v_invoice_date,
    --                  null,--v_auto_consolidate,
    --                  null--v_batch_no
    --                  );
    --
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CREATE_REQN :- '
    --                                           || v_net_amt
    --                                           || ' $ '||v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    --         END IF;
    --      END LOOP;

    --      IF v_rec_count = 0
    --      THEN
    --         raise_application_error (-20001,
    --                                     'CLM REQN NOT CREATED FOR CLAIM # '
    --                                  || v_clmrg_claim_no
    --                                 );
    --      END IF;
    --   END;

    /********************************GIN_INTERFACES_PKG*******************************/
    --PROCEDURE process_claim_pymt (----COMMENTED Out on 18th Sept 2018 to new one to sort out USD claim payments
    --      v_clmrg_claim_no   VARCHAR2,
    --      v_trans_no         NUMBER,
    --      v_user_name        VARCHAR2,
    --      v_pay_method       VARCHAR2 DEFAULT 'CHQ'
    --   )
    --   IS
    --      v_cmb_claim_no              NUMBER;
    --      v_cqr_bnk_dtls              fms_cheques_pkg.type_bnk_dtls_table;
    --
    --      CURSOR c_claim
    --      IS
    --         SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
    --                 gin_clm_payment_vouchers.cpv_invoice_no,
    --                gin_clm_payment_vouchers.cpv_vchr_cur_code,
    --                gin_clm_payment_vouchers.cpv_cur_code,
    --                gin_clm_payment_vouchers.cpv_voucher_no,
    --                gin_clm_payment_vouchers.cpv_amount_bcur,
    --                gin_clm_payment_vouchers.cpv_apco_cor_code,
    --                gin_clm_payment_vouchers.cpv_date,
    --                gin_clm_payment_vouchers.cpv_authorised,
    --                gin_clm_payment_vouchers.cpv_authorised_by,
    --                gin_clm_payment_vouchers.cpv_account_type,
    --                gin_clm_payment_vouchers.cpv_agnt_agent_code,
    --                cpv_authorised_dt, cpv_amount cpv_amount,
    --                gin_clm_payment_vouchers.cpv_payee,
    --                gin_clm_payment_vouchers.cpv_raise_by,
    --                gin_claim_master_bookings.cmb_cur_code,
    --                gin_claim_master_bookings.cmb_brn_code,
    --                gin_clm_payment_vouchers.cpv_drcr_no, cpv_comp_retention,
    --                cpv_man_amount, cpv_quota_amount, cpv_fstsup_amount,
    --                cpv_secsup_amount, cpv_facre_amount,
    --                SUBSTR (cpv_tran_type, 0, 2) cpv_tran_type,
    --                gin_claim_master_bookings.cmb_scl_code,
    --                NVL (cpv_vat_amnt, 0) cpv_vat_amnt,
    --                NVL (cpv_whtx_amnt, 0) cpv_whtx_amnt,
    --                NVL (cpv_net_paid, 0) cpv_net_paid, cpv_bcur_net_paid,
    --                cpv_bcur_vat_amnt, cpv_bcur_whtx_amnt, cpv_post_dated,
    --                cpv_post_dated_date, cpv_rein_amount, cpv_rein_amount_bcur,
    --                cpv_excess_amount, cpv_excess_amount_bcur, cpv_ret_salvage,
    --                cpv_ret_salvage_bcur, NULL cpv_disc_amt, cpv_claimant_type,
    --                cpv_reg_cld_code, cpv_cbp_code, cpv_reg_clmt_code,
    --                cpv_exciseduty_amnt cpv_exciseduty_amnt,
    --                cpv_bcur_exciseduty_amnt, cmb_coin_pay_type,
    --                cpv_coin_tot_net_paid, cpv_coin_tot_vat_amnt,
    --                cpv_coin_tot_whtx_amnt, cpv_coin_tot_exciseduty_amnt,
    --                cpv_coin_tot_amt, cpv_coin_tot_amt_bcur, cmb_pol_policy_type,
    --                cmb_location_code, cmb_unit_code,
    --                cpv_coin_vattowithhold_amnt, cpv_bcur_vattowithhold_amnt,
    --                cpv_coin_vattowithhold_amnt cpv_vattowithhold_amnt,
    --                gin_clm_payment_vouchers.cpv_cur_rate cpv_cur_rate,cpv_inv_date
    --           FROM gin_claim_master_bookings, gin_clm_payment_vouchers
    --          WHERE cmb_claim_no = cpv_cmb_claim_no
    --            AND cmb_claim_no = v_clmrg_claim_no
    --            AND cpv_ggt_trans_no = v_trans_no;
    --
    --      v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
    --      v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
    --      v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
    --      v_cqr_brh_code              NUMBER;
    --      v_user_code                 NUMBER;
    --      v_cqr_source_auth_by        NUMBER;
    --      v_cqr_source_auth_dt        DATE;
    --      exc_user_error              EXCEPTION;
    --      v_brh_name                  VARCHAR2 (100);
    --      v_bct_code                  NUMBER;
    --      v_bct_brh_code              NUMBER;
    --      v_crt_acc_number            VARCHAR2 (20);
    --      v_crt_acc_org_code          NUMBER;
    --      v_trnt_gl_code              VARCHAR2 (20);
    --      v_trnt_contra_gl_code       VARCHAR2 (20);
    --      v_trnt_code                 VARCHAR2 (20);
    --      v_acc_type                  VARCHAR2 (20);
    --      v_cqr_source                NUMBER;
    --      v_rec_count                 NUMBER                                  := 0;
    --      v_org_code                  NUMBER;
    --      v_exch_rate                 NUMBER;
    --      v_exch_rate2                NUMBER;
    --      v_rnd                       NUMBER;
    --      v_bcur_rnd                  NUMBER;
    --      v_cur_code                  NUMBER;
    --      v_paymnt_brh_code           NUMBER;
    --      v_trt_man_amt               NUMBER;
    --      v_trt_qs_amt                NUMBER;
    --      v_trt_fst_amt               NUMBER;
    --      v_trt_sec_amt               NUMBER;
    --      v_trt_fac_amt               NUMBER;
    --      v_lvl                       VARCHAR2 (15);
    --      rev_type                    VARCHAR2 (15);
    --      v_payment_amt               gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
    --      v_ripool_amt                NUMBER;
    --      v_net_amt                   NUMBER;
    --      v_vat_amt                   NUMBER;
    --      v_whtx_amt                  NUMBER;
    --      v_tot_amt                   NUMBER;
    --      v_disc_amt                  NUMBER;
    --      v_rein_amt                  NUMBER;
    --      v_excess_amt                NUMBER;
    --      v_control_acc               VARCHAR2 (30);
    --      v_client_type               VARCHAR2 (5);
    --      v_act_code                  NUMBER;
    --      v_agnt_sht_desc             VARCHAR2 (25);
    --      v_salv_amt                  NUMBER;
    --      v_per_code                  NUMBER;
    --      v_charge_servp_wthtax       VARCHAR2 (1);
    --      v_auto_auth                 VARCHAR2 (1);
    --      v_eft_enabled               VARCHAR2 (1);
    --      v_bnk_account               VARCHAR2 (30);
    --      v_bnk_bbr_code              VARCHAR2 (30);
    --      v_auth_param                VARCHAR2 (1);
    --      v_sms_tel                   VARCHAR2 (30);
    --      v_ref_no                    VARCHAR2 (30);
    --      v_mpt_code                  NUMBER;
    --      v_exciseduty_amt            NUMBER;
    --      v_ccop_amount_bcur          NUMBER;
    --      v_coin_amount               NUMBER;
    --      v_ccop_amount               NUMBER;
    --      v_coin_client_type          VARCHAR2 (5);
    --      --variable added by kim kahunja to reference tqc_bank_branches pk to be passed on cheque requisition
    --      v_bnk_bbr_pk                NUMBER;
    --      v_trt_lvl                   VARCHAR2 (1)                          := 'P';
    --      v_facre_gl_acc_no           VARCHAR2 (30);
    --      v_frgn_or_local             VARCHAR2 (30);
    --      v_clmfee_garage_param       VARCHAR2 (1)                          := 'N';
    --      v_spr_cnt                   NUMBER;
    --      v_trt_rcry_gl_param         VARCHAR2 (1);
    --      v_vattowithhold_app_param   VARCHAR2 (1)                          := 'N';
    --      v_vattowithhold_amnt        NUMBER;
    --       v_authorized varchar2(1);
    --       v_amt_to_cede  NUMBER;
    --
    --      CURSOR c_treaties
    --      IS
    --         SELECT   SUM
    --                     (DECODE (trs_trtg_code,
    --                              1001, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_man_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              1003, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_qs_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10041, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_fst_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10042, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_sec_amt,
    --                  DECODE
    --                     (NVL (v_trt_lvl, 'T'),
    --                      'T', NULL,
    --                      NVL (trpa_gl_rcvbl_account,
    --                           DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                   'N', trpa_gl_account,
    --                                   NULL
    --                                  )
    --                          )
    --                     ) trpa_gl_account,
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ) account_name,
    --                  rei_local_forgn
    --             FROM gin_clm_treaty_recoveries,
    --                  gin_treaty_setups,
    --                  gin_treaty_participants,
    --                  gin_treaties,
    --                  tqc_agencies
    --            WHERE ctrtr_rei_code = rei_code
    --              AND trpa_rei_code = rei_code
    --              AND ctrtr_trs_code = trs_code
    --              AND trpa_agnt_agent_code = agn_code
    --              AND ctrtr_ggt_trans_no = v_trans_no
    --         GROUP BY DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          NVL (trpa_gl_rcvbl_account,
    --                               DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                       'N', trpa_gl_account,
    --                                       NULL
    --                                      )
    --                              )
    --                         ),
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ),
    --                  rei_local_forgn;
    --
    --      CURSOR c_facre
    --      IS
    --         SELECT   SUM (DECODE (cfrr_pol_cur_code,
    --                               cfrr_trt_cur_code, NVL (cfrr_amount, 0),
    --                               NVL (cfrr_amount_bcur, 0)
    --                              )
    --                      ) cfrr_amount,
    --                  DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ) agn_acc_no,
    --                  agn_sht_desc, agn_name
    --             FROM gin_clm_facre_recoveries, tqc_agencies
    --            WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --              AND cfrr_ggt_trans_no = v_trans_no
    --              AND cfrc_agnt_agent_code = agn_code
    --         GROUP BY DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ),
    --                  agn_sht_desc,
    --                  agn_name;
    --
    ----    CURSOR cur_xol_amnts (v_trn_no in number)
    ----      IS
    ----        SELECT   NVL (cxtd_amt_to_cede, 0) gross_amt,
    ----                  DECODE (xolp_part_type,
    ----                          'D', xolp_agnt_agent_code,
    ----                          'B', xolp_br_agn_code
    ----                         ) xolp_agnt_agent_code,
    ----                  agn_name,
    ----                  DECODE (xolp_part_type,
    ----                          'D', xolp_agnt_sht_desc,
    ----                          'B', xolp_br_agn_sht_desc
    ----                         ) xolp_agnt_sht_desc,
    ----                  xolp_rate, xolp_gl_account, cxtd_scl_code, xols_cur_code,
    ----                  xol_code,
    ------                  ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)
    ------                        )
    ----                 ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) part_amount,
    ----                  cxtd_clm_no
    ----             FROM gin_claim_xol_treaty_details,
    ----                  gin_xol_treaty_setups,
    ----                  gin_xol_participants,
    ----                  gin_xol_treaties,
    ----                  tqc_agencies
    ----            WHERE cxtd_xols_code = xols_code
    ----              AND xolp_agnt_agent_code = agn_code
    ----              AND cxtd_xol_code = xol_code
    ----              AND xolp_xols_code = xols_code
    ----              AND xols_xol_code = xol_code
    ----              AND cxtd_ggt_trans_no = v_trn_no
    ----              AND cxtd_authorized = 'P'
    ----              AND cxtd_ggt_trans_no IN (SELECT ggt_trans_no
    ----                                          FROM gin_gis_transactions)
    ----              AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) <> 0
    ----             -- AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)) <> 0
    ----         GROUP BY cxtd_clm_no,
    ----                  NVL (cxtd_amt_to_cede, 0),
    ----                  DECODE (xolp_part_type,
    ----                          'D', xolp_agnt_agent_code,
    ----                          'B', xolp_br_agn_code
    ----                         ),
    ----                  agn_name,
    ----                  DECODE (xolp_part_type,
    ----                          'D', xolp_agnt_sht_desc,
    ----                          'B', xolp_br_agn_sht_desc
    ----                         ),
    ----                  xolp_rate,
    ----                  xolp_gl_account,
    ----                  cxtd_scl_code,
    ----                  xols_cur_code,
    ----                  xol_code,
    ----                  --ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0))
    ----                  ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0))
    ----
    ----                  ;
    --
    --   BEGIN
    --
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));
    --
    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('AUTO_AUTH_CLM_PYMTS')
    --           INTO v_auth_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_auth_param := 'Y';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching AUTO_AUTH_CLM_PYMTS parameter...');
    --      END;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                        ('SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL')
    --           INTO v_trt_rcry_gl_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_trt_rcry_gl_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --               ('Error fetching SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL parameter...'
    --               );
    --      END;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('CLMFEE_GARAGE_VAT')
    --           INTO v_clmfee_garage_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_clmfee_garage_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching CLMFEE_GARAGE_VAT parameter...');
    --      END;
    --
    --      BEGIN
    --         SELECT param_value
    --           INTO v_vattowithhold_app_param
    --           FROM gin_parameters
    --          WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_vattowithhold_app_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                       ('Error getting VATTOWITHHOLD_APPLICABLE parameters..');
    --      END;
    --
    --      IF NVL (v_pay_method, 'CHQ') = 'JE'
    --      THEN
    --         v_auto_auth := 'N';
    --      ELSE
    --         IF NVL (v_auth_param, 'N') = 'Y'
    --         THEN
    --            v_auto_auth := 'Y';
    --         ELSE
    --            v_auto_auth := 'N';
    --         END IF;
    --      END IF;
    --
    --      v_rec_count := 0;
    --    --RAISE_ERROR('v_clmrg_claim_no'||v_clmrg_claim_no||'v_trans_no'||v_trans_no);
    --      FOR i IN c_claim
    --      LOOP
    --         v_exch_rate :=
    --                   get_currexch_rate (i.cpv_vchr_cur_code, v_rnd, v_bcur_rnd);
    --
    --
    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'O'
    --         THEN
    --
    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_net_paid;
    --               v_vat_amt := i.cpv_vat_amnt;
    --               v_whtx_amt := i.cpv_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --
    ----               IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    ----               THEN
    ----
    ----                  v_tot_amt :=
    ----                     ROUND (  NVL (v_vat_amt, 0)
    ----                            + NVL (v_whtx_amt, 0)
    ----                            + NVL (v_exciseduty_amt, 0)
    ----                            + NVL (v_salv_amt, 0)
    ----                            + NVL (v_excess_amt, 0)
    ----                            + NVL (v_net_amt, 0),
    ----                            0
    ----                           );
    ----               ELSE
    ----                --RAISE_ERROR('v_net_amt'||v_payment_amt||'v_tot_amt'||v_tot_amt);
    ----                  v_tot_amt :=
    ----                     ROUND (  NVL (v_net_amt, 0)
    ----                            + NVL (v_whtx_amt, 0)
    ----                            + NVL (v_exciseduty_amt, 0)
    ----                            + NVL (v_salv_amt, 0)
    ----                            + NVL (v_excess_amt, 0)
    ----                            + NVL (v_vattowithhold_amnt, 0),
    ----                            0
    ----                           );
    ----
    ----               END IF;
    --            ELSE
    --
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_bcur_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    ----               v_tot_amt :=
    ----                  ROUND (  NVL (v_vat_amt, 0)
    ----                         + NVL (v_whtx_amt, 0)
    ----                         + NVL (v_salv_amt, 0)
    ----                         + NVL (v_excess_amt, 0)
    ----                         --- NVL (v_vattowithhold_amnt, 0)
    ----                         + NVL (v_net_amt, 0),
    ----                         0
    ----                        );
    --
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         ELSIF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            SELECT   SUM (NVL (ccop_amount, 0)),
    --                     SUM (NVL (ccop_amount_bcur, 0)), act_type_sht_desc
    --                INTO v_ccop_amount,
    --                     v_ccop_amount_bcur, v_coin_client_type
    --                FROM gin_clm_coin_payments, tqc_agencies, tqc_account_types
    --               WHERE agn_code = ccop_agnt_agent_code
    --                 AND agn_act_code = act_code
    --                 AND ccop_cpv_voucher_no = i.cpv_voucher_no
    --            GROUP BY act_type_sht_desc;
    --
    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_coin_tot_net_paid;
    --               v_vat_amt := i.cpv_coin_tot_vat_amnt;
    --               v_whtx_amt := i.cpv_coin_tot_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_coin_tot_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := NVL (v_ccop_amount, 0);
    ----               v_tot_amt :=
    ----                  ROUND (  NVL (v_vat_amt, 0)
    ----                         + NVL (v_whtx_amt, 0)
    ----                         + NVL (v_salv_amt, 0)
    ----                         + NVL (v_excess_amt, 0)
    ----                         --- NVL (v_vattowithhold_amnt, 0)
    ----                         + NVL (v_exciseduty_amt, 0)
    ----                         + NVL (v_net_amt, 0)
    ----                         - NVL (v_coin_amount, 0),
    ----                         0
    ----                        );
    --            ELSE
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := v_ccop_amount_bcur;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    ----               v_tot_amt :=
    ----                  ROUND (  NVL (v_vat_amt, 0)
    ----                         + NVL (v_whtx_amt, 0)
    ----                         + NVL (v_salv_amt, 0)
    ----                         --- NVL (v_vattowithhold_amnt, 0)
    ----                         + NVL (v_exciseduty_amt, 0)
    ----                         + NVL (v_excess_amt, 0)
    ----                         + NVL (v_net_amt, 0)
    ----                         - NVL (v_coin_amount, 0),
    ----                         0
    ----                        );
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         END IF;
    --         DBMS_OUTPUT.PUT_LINE('v_vattowithhold_app_param='||v_vattowithhold_app_param);
    --         DBMS_OUTPUT.PUT_LINE('v_vat_amt='||v_vat_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_whtx_amt='||v_whtx_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_exciseduty_amt='||v_exciseduty_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_salv_amt='||v_salv_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_excess_amt='||v_excess_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_net_amt='||v_net_amt);
    --         IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --           THEN
    --
    --              v_tot_amt :=
    --                 ROUND (  NVL (v_vat_amt, 0)
    --                        + NVL (v_whtx_amt, 0)
    --                        + NVL (v_exciseduty_amt, 0)
    --                        + NVL (v_salv_amt, 0)
    --                        + NVL (v_excess_amt, 0)
    --                        + NVL (v_net_amt, 0),
    --                        0
    --                       );
    --           ELSE
    --            --RAISE_ERROR('v_net_amt'||v_payment_amt||'v_tot_amt'||v_tot_amt);
    --              v_tot_amt :=
    --                 ROUND (  NVL (v_net_amt, 0)
    --                        + NVL (v_whtx_amt, 0)
    --                        + NVL (v_exciseduty_amt, 0)
    --                        + NVL (v_salv_amt, 0)
    --                        + NVL (v_excess_amt, 0)
    --                        + NVL (v_vattowithhold_amnt, 0),
    --                        0
    --                       );
    --
    --           END IF;
    --DBMS_OUTPUT.PUT_LINE('v_tot_amt='||v_tot_amt);
    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
    --         v_paymnt_brh_code := i.cmb_brn_code;
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --         fms_interfaces_pkg.trans_bct ('CLM',
    --                                       v_cqr_source,
    --                                       v_paymnt_brh_code,
    --                                       v_cur_code,
    --                                       v_bct_code,
    --                                       v_bct_brh_code,
    --                                       v_pay_method
    --                                      );
    --
    --         IF     NVL (v_clmfee_garage_param, 'N') = 'Y'
    --            AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --         THEN
    --            BEGIN
    --               SELECT COUNT (*)
    --                 INTO v_spr_cnt
    --                 FROM tqc_service_provider_reg
    --                WHERE sreg_spr_code = i.cpv_apco_cor_code;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_spr_cnt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  v_spr_cnt := 0;
    --            END;
    --
    --
    --            IF NVL (v_spr_cnt, 0) > 0
    --            THEN
    --               v_tot_amt := NVL (v_tot_amt, 0) - NVL (v_vat_amt, 0);
    --               v_net_amt := NVL (v_net_amt, 0) + NVL (v_vat_amt, 0);
    --            END IF;
    --         END IF;
    --
    --         IF ROUND (NVL (v_payment_amt, 0), 0) != v_tot_amt
    --         THEN
    --            raise_application_error
    --                            (-20001,
    --                                'THE NET CHEQUE AMOUNT '
    --                             || NVL (v_net_amt, 0)
    --                             || ' PLUS VAT '
    --                             || NVL (v_vat_amt, 0)
    --                             || ' AND WHTTAX '
    --                             || NVL (v_whtx_amt, 0)
    --                             || ' PLUS EXCISE DUTY '
    --                             || NVL (v_exciseduty_amt, 0)
    --                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                             || v_payment_amt
    --                             || 'v_tot_amt'
    --                             || v_tot_amt
    --                            );
    --         END IF;
    --
    ----          raise_application_error
    ----                            (-20001,
    ----                                'THE NET CHEQUE AMOUNT '
    ----                             || NVL (v_net_amt, 0)
    ----                             || ' PLUS VAT '
    ----                             || NVL (v_vat_amt, 0)
    ----                             || ' AND WHTTAX '
    ----                             || NVL (v_whtx_amt, 0)
    ----                             || ' PLUS EXCISE DUTY '
    ----                             || NVL (v_exciseduty_amt, 0)
    ----                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    ----                             || v_payment_amt
    ----                             || 'v_tot_amt'
    ----                             || v_tot_amt
    ----                            );
    --
    --         --         IF  NVL(v_vattowithhold_app_param,'N')='Y'   THEN
    ----           v_payment_amt:=NVL(v_payment_amt,0)-NVL(v_vat_amt,0)+NVL(v_vattowithhold_amnt,0);
    ----         END IF;
    --         IF i.cpv_tran_type = 'CF'
    --         THEN
    --            rev_type := 'CF';
    --
    --            BEGIN
    --               IF NVL (v_disc_amt, 0) > 0
    --               THEN
    --                  SELECT voud_per_code
    --                    INTO v_per_code
    --                    FROM gin_voucher_details
    --                   WHERE voud_cpv_voucher_no = i.cpv_voucher_no;
    --
    --                  gin_stp_claims_pkg.create_srv_prvdr_reserve
    --                                                         (v_clmrg_claim_no,
    --                                                          v_per_code,
    --                                                          -v_disc_amt,
    --                                                          NULL,
    --                                                          v_user_name,
    --                                                          i.cpv_apco_cor_code,
    --                                                          NULL,
    --                                                          'A',
    --                                                          NULL,
    --                                                          NULL,
    --                                                          NULL
    --                                                         );
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (   'Error creating Discount Revision '
    --                               || SQLERRM (SQLCODE)
    --                              );
    --            END;
    --         ELSE
    --            rev_type := 'CP';
    --         END IF;
    --
    --         IF NVL (v_payment_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --
    ----                   RAISE_ERROR(v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code);
    --
    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               BEGIN
    --                  v_eft_enabled := 'N';
    --
    --                  /*NOTES
    --                  1. SERVICE PROVIDES
    --                  2. CLIENTS
    --                  3. CLAIMANTS
    --                  4. BUSINESS PERSONS
    --                  5. ACCOUNTS*/
    --                  --raise_error('i.cpv_claimant_type '||i.cpv_claimant_type || ' rev_type '||rev_type);
    --                  IF rev_type = 'CP'
    --                  THEN
    --                --raise_error('cpv_claimant_type='||i.cpv_claimant_type);
    --                     IF NVL (i.cpv_claimant_type, 'S') = 'O'
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled (bnk_bbr_code (i.cpv_cbp_code, 4));
    --                        v_bnk_account := bnk_account (i.cpv_cbp_code, 4);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              4
    --                                                             )
    --                                               );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 4);
    --
    --                        -- raise_error('acc....'||bnk_bbr_code (i.cpv_cbp_code, 4)||' i.cpv_cbp_code '||i.cpv_cbp_code);
    --                        BEGIN
    --                           IF v_eft_enabled = 'N'
    --                           THEN
    --                              IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                              THEN
    --                                 v_eft_enabled :=
    --                                    account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                                 v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                                 v_bnk_bbr_code :=
    --                                    tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           3
    --                                                          )
    --                                            );
    --                                 v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                              END IF;
    --                           END IF;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              v_eft_enabled := 'N';
    --                        END;
    --
    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_cbp_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              1
    --                                                             )
    --                                               );
    --                              v_bnk_account := bnk_account (i.cpv_cbp_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                                (bnk_bbr_code (i.cpv_cbp_code,
    --                                                               1
    --                                                              )
    --                                                );
    --                              v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 1);
    --                           END IF;
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'T'
    --                     THEN
    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                        THEN
    ----                            RAISE_ERROR('BANK BRANCH CODE..'||bnk_bbr_code (i.cpv_apco_cor_code, 1));
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_code :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'S'
    --                     THEN
    --
    --
    --                        IF i.cpv_apco_cor_code IS NOT NULL
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                              v_bnk_account :=
    --                                          bnk_account (i.cpv_apco_cor_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                              v_bnk_bbr_pk :=
    --                                         bnk_bbr_code (i.cpv_apco_cor_code, 1);
    --
    --                           END IF;
    --                           END IF;
    ----RAISE_ERROR('i.cpv_apco_cor_code'||bnk_bbr_code (i.cpv_reg_cld_code, 2) );
    --                            IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                            );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;
    --
    --                     ELSE
    ----  RAISE_ERROR('i.cpv_apco_cor_code'||i.cpv_reg_cld_code);
    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                           --   tqc_interfaces_pkg.bank_ref
    --                                        --    (
    --                                            bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                        --    )
    --                                            ;
    --                        --RAISE_ERROR('CHECKING CLAIM PAYMENT='|| v_bnk_bbr_code );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;
    --                     END IF;
    --                  ELSE
    --
    --                     IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                        v_bnk_account := bnk_account (i.cpv_apco_cor_code, 1);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_apco_cor_code, 1);
    --
    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --
    --                           IF bnk_bbr_code (i.cpv_agnt_agent_code, 5) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                        (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                       5
    --                                                      )
    --                                        );
    --                              v_bnk_account :=
    --                                        bnk_account (i.cpv_agnt_agent_code, 5);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                         (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                        5
    --                                                       )
    --                                         );
    --                              v_bnk_bbr_pk :=
    --                                       bnk_bbr_code (i.cpv_agnt_agent_code, 5);
    --                           END IF;
    --                        END IF;
    --
    --                     END IF;
    --
    --                  END IF;
    --
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR GETTING BANK ACC INFO... ');
    --               END;
    ----raise_error('v_eft_enabled++'||v_eft_enabled||'v_bnk_bbr_code+++'||v_bnk_bbr_code||'v_bnk_account+++'||v_bnk_account);
    ----raise_error('v_eft_enabled++'||v_eft_enabled||'v_bnk_bbr_code+++'||v_bnk_bbr_code||'v_bnk_account+++'||v_bnk_account||' i.cpv_payee++'|| i.cpv_payee);
    --               IF v_eft_enabled = 'N'
    --               THEN
    --                  raise_application_error
    --                                   (-20001,
    --                                       'BANK BRANCH NOT ENABLED TO TRANSACT '
    --                                    || v_pay_method
    --                                    || '  ADAS  '
    --                                    || i.cpv_claimant_type
    --                                    || ' PAYMENTS'
    --                                    || i.cpv_reg_cld_code
    --                                    || ' ; '
    --                                    || rev_type
    --                                    || ' ; '
    --                                    || i.cpv_agnt_agent_code
    --                                   );
    --               END IF;
    --            END IF;
    --
    --            v_rec_count := v_rec_count + 1;
    --
    --            --raise_Error('v_payment_amt='||v_payment_amt);
    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               fms_cheques_pkg.append_eft_payees
    --                     (v_rec_count,        --v_no                       NUMBER,
    --                      i.cpv_voucher_no,   --v_ref1                   VARCHAR2,
    --                      ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                      i.cpv_payee,      --v_narrative                VARCHAR2,
    --                      v_bnk_bbr_code,
    --                      --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                      v_bnk_account,    --v_bnk_account              VARCHAR2,
    --                      i.cpv_cmb_claim_no, --v_ref2                   VARCHAR2,
    --                      v_payee_eft_dtls
    --                     );
    --               fms_cheques_pkg.append_chq_trans
    --                                               (v_rec_count,
    --                                                ROUND (v_payment_amt, v_rnd),
    --                                                   'CLAIM PAYMENT GROSS AMT '
    --                                                || v_pay_method,
    --                                                --narrative,
    --                                                v_trnt_gl_code,
    --                                                -- crt_acc_number
    --                                                v_org_code,
    --                                                --crt_acc_org_code ,
    --                                                i.cmb_brn_code,
    --
    --                                                ---commented by Solo v_paymnt_brh_code
    --                                                'D',                --v_dr_cr,
    --                                                v_chq_dtls,
    --                                                NULL,
    --                                                NULL,
    --                                                i.cmb_unit_code,
    --                                                i.cmb_location_code
    --                                               );
    --            ELSIF v_pay_method IN ('MOB')
    --            --Added by Masinde to take care of mobile payments 30052015
    --            THEN
    --               IF i.cpv_tran_type = 'CP'
    --               THEN
    --                  --RAISE_ERROR(i.cpv_reg_clmt_code);
    --                  BEGIN
    --                  SELECT MOBILENO,cld_id_no
    --                       INTO v_sms_tel, v_ref_no
    --                       FROM(
    --                     SELECT NVL (cld_mobile_no, cld_mobile_phone)MOBILENO, cld_id_no
    --                       FROM gin_rgstd_claimants, gin_claimants
    --                      WHERE cld_code = reg_cld_code
    --                        AND reg_cmb_claim_no = v_clmrg_claim_no
    --                        and REG_THIRD_PARTY='T'
    --                        AND reg_clmt_code = i.cpv_reg_clmt_code
    --                        union
    --                       SELECT NVL (CLNT_TEL, CLNT_SMS_TEL)MOBILENO, CLNT_ID_REG_NO cld_id_no
    --                       FROM gin_rgstd_claimants, tqc_clients
    --                      WHERE CLNT_CODE = reg_cld_code
    --                        AND reg_cmb_claim_no = v_clmrg_claim_no
    --                        and REG_THIRD_PARTY='S'
    --                        AND reg_clmt_code = i.cpv_reg_clmt_code);
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting Claimants Mobile Payment details'
    --                            || i.cpv_reg_clmt_code
    --                           );
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     SELECT NVL (spr_sms_number, spr_mobile_no),
    --                            NVL (spr_pin_number, spr_pin)
    --                       INTO v_sms_tel,
    --                            v_ref_no
    --                       FROM tqc_service_providers
    --                      WHERE spr_code = i.cpv_apco_cor_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting service providers Mobile Payment details'
    --                            || i.cpv_apco_cor_code
    --                           );
    --                  END;
    --               END IF;
    --
    --               IF v_sms_tel IS NOT NULL
    --               THEN
    --                  SELECT mpt_code
    --                    INTO v_mpt_code
    --                    FROM tqc_mob_pymnt_types_prefixes, tqc_mobile_pymnt_types
    --                   WHERE mptp_mpt_code = mpt_code
    --                     AND mptp_mob_no_prefix = '0'||SUBSTR (v_sms_tel, 5, 3);
    --               ELSE
    --                  raise_application_error
    --                     (-20001,
    --                      'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..'
    --                     );
    --               END IF;
    --
    --               BEGIN
    --                  v_payee_mft_dtls (1) :=
    --                     fms_cheques_pkg.append_mft_payees
    --                                    (v_rec_count,
    --                                     i.cpv_voucher_no,
    --                                     ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                     ---v_amount,
    --                                     i.cpv_payee,               --v_narrative,
    --                                     v_sms_tel,
    --
    --                                     --v_credit_id                                                                                 ,
    --                                     'Mobile Phone Number', --v_credit_id_type
    --                                     v_ref_no,               --v_validation_id
    --                                     'REFERENCE NO'     --v_validation_id_type
    --                                    );
    --                  fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                    ROUND (v_payment_amt,
    --                                                           v_rnd
    --                                                          ),
    --                                                    'CLAIM',      --narrative,
    --                                                    v_trnt_gl_code,
    --                                                    -- crt_acc_number
    --                                                    v_org_code,
    --                                                    --crt_acc_org_code ,
    --                                                    v_paymnt_brh_code,
    --
    --                                                    --i.cmb_brn_code,          --v_brh_code,
    --                                                    'D',            --v_dr_cr,
    --                                                    v_chq_dtls
    --                                                   );
    --               --fms_chq_mftfile_dtls
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error (   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
    --                                  || i.cpv_voucher_no
    --                                 );
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                               (   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
    --                                || i.cpv_voucher_no
    --                               );
    --               END;
    --            ELSE
    --               fms_cheques_pkg.append_chq_trans
    --                  (v_rec_count,
    --                   ROUND (v_payment_amt, v_rnd),
    --                   'CLAIM PAYMENT GROSS AMT',                     --narrative,
    --                   v_trnt_gl_code,                           -- crt_acc_number
    --                   v_org_code,                            --crt_acc_org_code ,
    --                   v_paymnt_brh_code, --i.cmb_brn_code,          --v_brh_code,
    --                   'D',                                             --v_dr_cr,
    --                   v_chq_dtls,
    --                   NULL,
    --                   NULL,
    --                   i.cmb_unit_code,
    --                   i.cmb_location_code
    --                  );
    --            END IF;
    --         END IF;
    --
    ----******************************SALVAGE *******************************
    --         IF NVL (v_salv_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CS',                         --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (v_salv_amt, v_rnd),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,
    --
    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;
    --
    ----************************EXCESS************************
    --         IF NVL (v_excess_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CRE',                        --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_excess_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM EXCESS',     --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,
    --
    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;
    --
    ----************************REINSURANCE************************
    --         IF NVL (v_rein_amt, 0) > 0
    --         THEN
    --            IF NVL (i.cpv_rein_amount, 0) != 0
    --            THEN
    --               IF NVL (i.cpv_account_type, 'D') = 'D'
    --               THEN
    --                  v_client_type := 'D';
    --               ELSE
    --                  BEGIN
    --                     SELECT agn_act_code, agn_sht_desc
    --                       INTO v_act_code, v_agnt_sht_desc
    --                       FROM tqc_agencies
    --                      WHERE agn_code = i.cpv_agnt_agent_code;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        raise_application_error (-20021,
    --                                                    'AGENT - '
    --                                                 || v_client_type
    --                                                 || ' NOT FOUND '
    --                                                );
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_application_error (-20022,
    --                                                    'AGENT INFO '
    --                                                 || SQLERRM (SQLCODE)
    --                                                );
    --                  END;
    --
    --                  IF v_act_code IN (2, 9, 10, 16)
    --                  THEN
    --                     v_client_type := 'A';
    --                  ELSIF v_act_code = 3
    --                  THEN
    --                     v_client_type := 'B';
    --                  ELSIF v_act_code = 4
    --                  THEN
    --                     v_client_type := 'FI';
    --                  ELSIF v_act_code = 5
    --                  THEN
    --                     v_client_type := 'I';
    --                  ELSIF v_act_code = 6
    --                  THEN
    --                     v_client_type := 'R';
    --                  ELSIF v_act_code = 7
    --                  THEN
    --                     v_client_type := 'FO';
    --                  ELSE
    --                     raise_application_error (-20001,
    --                                                 'UNDEFINED ACCOUNT TYPE - '
    --                                              || v_act_code
    --                                              || ' -FOR AGENT '
    --                                              || v_agnt_sht_desc
    --                                              || 'i.CPV_ACCOUNT_TYPE '
    --                                              || i.cpv_account_type
    --                                              || 'v_clmrg_claim_no ='
    --                                              || v_clmrg_claim_no
    --                                             );
    --                  END IF;
    --               END IF;
    --
    --               IF v_client_type IS NULL
    --               THEN
    --                  raise_application_error (-20023,
    --                                           'CANNOT POST NULL CLIENT TYPE'
    --                                          );
    --               ELSE
    --                  v_control_acc :=
    --                     fms_interfaces_pkg.sl_control_acc ('GIS', v_client_type);
    --               END IF;
    --
    --               gin_interfaces_pkg.get_gl_acct_code
    --                                          (rev_type,
    --                                                    --v_trnt_type IN VARCHAR2,
    --                                           i.cmb_scl_code,
    --
    --                                           --v_scl_code IN NUMBER,
    --                                           'U',  --     v_app_lvl IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_btr_trans_code IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                                           v_trnt_code,
    --                                           --          v_trnt_code OUT VARCHAR2,
    --                                           v_trnt_gl_code,
    --                                           --          v_trnt_gl_code OUT VARCHAR2,
    --                                           v_trnt_contra_gl_code
    --                                          --          v_trnt_contra_gl_code OUT VARCHAR2
    --                                          );
    --
    --               IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL CTRL A/C - '
    --                                           || v_control_acc
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;
    --
    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL A/C - '
    --                                           || v_trnt_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;
    --
    --               v_rec_count := v_rec_count + 1;
    --
    --               BEGIN
    --                  fms_cheques_pkg.append_chq_trans
    --                                            (v_rec_count,
    --                                             ROUND (NVL (i.cpv_rein_amount, 0),
    --                                                    v_bcur_rnd
    --                                                   ),
    --                                             'GL TRANS' || v_trnt_code,
    --                                             --narrative,
    --                                             v_trnt_gl_code,
    --                                             -- crt_acc_number
    --                                             v_org_code,  --crt_acc_org_code ,
    --                                             v_paymnt_brh_code,
    --
    --                                             --i.cmb_brn_code,          --v_brh_code,
    --                                             'C',                   --v_dr_cr,
    --                                             v_chq_dtls
    --                                            );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || v_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END IF;
    --         END IF;
    ----
    ----         SELECT  cxtd_authorized,cxtd_amt_to_cede  INTO  v_authorized,v_amt_to_cede
    ----             FROM gin_claim_xol_treaty_details,
    ----                  gin_xol_treaty_setups,
    ----                  gin_xol_participants,
    ----                  gin_xol_treaties,
    ----                  tqc_agencies
    ----            WHERE cxtd_xols_code = xols_code
    ----              AND xolp_agnt_agent_code = agn_code
    ----              AND cxtd_xol_code = xol_code
    ----              AND xolp_xols_code = xols_code
    ----              AND xols_xol_code = xol_code
    ----              AND cxtd_ggt_trans_no = v_trans_no
    ----            --  AND cxtd_authorized = 'Y'
    ----              AND cxtd_ggt_trans_no IN (SELECT ggt_trans_no
    ----                                          FROM gin_gis_transactions)
    ----              --AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) <> 0
    ----             -- AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)) <> 0
    ----         GROUP BY cxtd_authorized,cxtd_amt_to_cede ;
    --
    ----         RAISE_ERROR('v_trans_no='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
    ----       FOR c_xol_rec IN cur_xol_amnts(v_trans_no)
    ----         LOOP
    ----           BEGIN
    ------            RAISE_ERROR('v_trans_no='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
    ------         raise_error('ERROR GETTING CLAIM DETAILS  MMMMM'||v_trans_no);
    ----     IF i.cpv_tran_type = 'CP'  THEN
    ----               gin_interfaces_pkg.get_gl_acct_code
    ----                     ('CP',                     --v_trnt_type IN VARCHAR2,
    ----                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    ----                      'XOL',                     --     v_app_lvl IN VARCHAR2,
    ----                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    ----                      NULL,
    ----                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    ----                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    ----                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    ----                      v_trnt_contra_gl_code
    ----                     --          v_trnt_contra_gl_code OUT VARCHAR2
    ----                     );
    ----         ELSIF i.cpv_tran_type = 'CF'  THEN
    ----           gin_interfaces_pkg.get_gl_acct_code
    ----                     ('CF',                     --v_trnt_type IN VARCHAR2,
    ----                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    ----                      'XOL',                     --     v_app_lvl IN VARCHAR2,
    ----                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    ----                      NULL,
    ----                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    ----                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    ----                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    ----                      v_trnt_contra_gl_code
    ----                     --          v_trnt_contra_gl_code OUT VARCHAR2
    ----                     );
    ----
    ----          END IF;
    --
    ----               IF c_xol_rec.xolp_gl_account IS NOT NULL
    ----               THEN
    ----               v_trnt_contra_gl_code := c_xol_rec.xolp_gl_account;
    ----               ELSE
    ----               raise_error('Error GL account not provided for XOL account transaction No'||v_trans_no);--v_trnt_contra_gl_code := gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, NULL);
    ----               END IF;
    --
    ----
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error
    ----                     (   'CLAIM PAYMENT XOL AMOUNT REVENUE ITEM FOR SUB CLASS '
    ----                      || i.cmb_scl_code
    ----                      || ' IS NOT DEFINED..'
    ----                     );
    ----            END;
    ----            --RAISE_ERROR('c_xol_rec.xolp_gl_account'||c_xol_rec.xolp_gl_account);
    ----             check_valid_gl_acc (v_trnt_gl_code,
    ----                             v_org_code,
    ----                             v_paymnt_brh_code,
    ----                             v_brh_name,
    ----                             v_trnt_code,
    ----                             i.cmb_scl_code
    ----                            );
    ----            check_valid_gl_acc (v_trnt_contra_gl_code,
    ----                                v_org_code,
    ----                                v_paymnt_brh_code,
    ----                                v_brh_name,
    ----                                v_trnt_code,
    ----                                i.cmb_scl_code
    ----                               );
    ----         v_rec_count := v_rec_count + 1;
    ----         fms_cheques_pkg.append_chq_trans (v_rec_count,
    ----                                           ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
    ----                                           'CLAIM PAYMENT XOL',
    ----                                           --narrative,
    ----                                           v_trnt_gl_code,
    ----                                           -- crt_acc_number
    ----                                           v_org_code,    --crt_acc_org_code ,
    ----                                           v_paymnt_brh_code,    --v_brh_code,
    ----                                           'C',                     --v_dr_cr,
    ----                                           v_chq_dtls,
    ----                                           NULL,
    ----                                           NULL,
    ----                                           i.cmb_unit_code,
    ----                                           i.cmb_location_code
    ----                                          );
    ----             v_rec_count := v_rec_count + 1;
    ----            fms_cheques_pkg.append_chq_trans
    ----                                       (v_rec_count,
    ----                                       ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
    ----                                       'CLAIM PAYMENT XOL',                 --narrative,
    ----                                        v_trnt_contra_gl_code,
    ----                                        -- crt_acc_number
    ----                                        v_org_code,       --crt_acc_org_code ,
    ----                                        v_paymnt_brh_code,       --v_brh_code,
    ----                                        'D',                        --v_dr_cr,
    ----                                        v_chq_dtls,
    ----                                        NULL,
    ----                                        NULL,
    ----                                        i.cmb_unit_code,
    ----                                        i.cmb_location_code
    ----                                       );
    ----
    ----
    ----         END LOOP;
    --
    --
    ----************************VAT************************
    --         IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --         THEN
    --            IF NVL (v_vat_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHVAT',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    ----RAISE_eRROR(v_vat_amt||' = '||v_vattowithhold_app_param);
    --               v_rec_count := v_rec_count + 1;
    --
    --               IF     (   NVL (v_clmfee_garage_param, 'N') = 'Y'
    --                       OR NVL (v_vattowithhold_app_param, 'N') = 'Y'
    --                      )
    --                  AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --               THEN
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,
    --
    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               ELSE
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,
    --
    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               END IF;
    --            END IF;
    --         END IF;
    --
    ----************************VATTOWTH************************
    ----raise_error('v_vattowithhold_amnt='||v_vattowithhold_amnt);
    --         IF NVL (v_vattowithhold_amnt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('VATTOWTH',                   --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    ----RAISE_eRROR(v_trnt_gl_code||' = '||v_trnt_contra_gl_code);
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                          (v_rec_count,
    --                                           ROUND (NVL (v_vattowithhold_amnt,
    --                                                       0),
    --                                                  v_rnd
    --                                                 ),
    --                                           'CLAIM PAYMENT VATTOWTH AMT',
    --                                           --narrative,
    --                                           v_trnt_gl_code,---basv_trnt_contra_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,
    --
    --                                           --i.cmb_brn_code,          --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls,
    --                                           NULL,
    --                                           NULL,
    --                                           i.cmb_unit_code,
    --                                           i.cmb_location_code
    --                                          );
    --         END IF;
    --
    --         --************************WITHHOLDING TAX************************
    --         IF NVL (v_whtx_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_whtx_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM PAYMENT WHTAX AMT',
    --                                              --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;
    --
    --         --************************EXCISE DUTY************************
    --         IF NVL (v_exciseduty_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('EXDTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_exciseduty_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;
    --
    ----************************REINSURANCE************************
    --         FOR c_treaty_rec IN c_treaties
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND c_treaty_rec.TRPA_GL_ACCOUNT IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||c_treaty_rec.ACCOUNT_NAME);
    ----             END IF;
    --            IF c_treaty_rec.trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;
    --
    --            --**************************** Update Quota Revision Amount***************************
    --            IF c_treaty_rec.trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_gl_code,     -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_contra_gl_code,
    --                                         -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --            END IF;
    --
    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;
    --
    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;
    --         END LOOP;
    --
    --         --**************************** Update Facultative Revision Amount***************************
    --         FOR f IN c_facre
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND f.AGN_ACC_NO IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||f.AGN_NAME);
    ----             END IF;
    --            IF f.cfrr_amount <> 0
    --            THEN
    --               v_lvl := 'FO';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := f.agn_acc_no;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, null);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END LOOP;
    --
    --         BEGIN
    --            SELECT SUM (NVL (crpr_amt, 0))
    --              INTO v_ripool_amt
    --              FROM gin_clm_ri_pool_recoveries
    --             WHERE crpr_ggt_tran_no = v_trans_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --         END;
    --
    --         IF v_ripool_amt <> 0                              -- reinsurance pool
    --         THEN
    --            v_lvl := 'POOL';
    --
    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;
    --
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;
    --
    --         IF gin_parameters_pkg.get_param_varchar ('REVISE_GL_ON_CLAIM_PYMT') =
    --                                                                           'Y'
    --         THEN
    --            rev_type := 'LRV';
    --
    --            BEGIN
    --               SELECT   SUM (DECODE (trs_trtg_code,
    --                                     1001, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     1003, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10041, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10042, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        rei_local_forgn
    --                   INTO v_trt_man_amt,
    --                        v_trt_qs_amt,
    --                        v_trt_fst_amt,
    --                        v_trt_sec_amt,
    --                        v_frgn_or_local
    --                   FROM gin_clm_treaty_recoveries,
    --                        gin_treaties,
    --                        gin_treaty_setups
    --                  WHERE ctrtr_trs_code = trs_code
    --                    AND ctrtr_cmb_claim_no = v_clmrg_claim_no
    --                    AND ctrtr_ggt_trans_no = v_trans_no
    --                    AND rei_code = ctrtr_rei_code
    --               GROUP BY rei_local_forgn;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_trt_man_amt := 0;
    --                  v_trt_qs_amt := 0;
    --                  v_trt_fst_amt := 0;
    --                  v_trt_sec_amt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'SYSTEM COULD NOT RETRIEVE TREATY RI APPORTIONMENT '
    --                      || ';'
    --                      || v_clmrg_claim_no
    --                      || ';'
    --                      || v_trans_no
    --                     );
    --            END;
    --
    --            IF NVL (v_payment_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            IF v_trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            --**************************** Update Quota Revision Amount***************************
    --            --RAISE_ERROR('v_trt_qs_amt='||v_trt_qs_amt);
    --            IF v_trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               --  Raise_error(v_trnt_gl_code);
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF v_trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code := fms_interfaces_pkg.sl_control_acc('GIS', 'R','FSTSUP') ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF v_trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            --**************************** Update Facultative Revision Amount***************************
    --            BEGIN
    --               SELECT SUM (NVL (cfrr_amount, 0))
    --                 INTO v_trt_fac_amt
    --                 FROM gin_clm_facre_recoveries
    --                WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --                  AND cfrr_ggt_trans_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                         ('SYSTEM COULD NOT RETRIEVE FACRE RI APPORTIONMENT ');
    --            END;
    --
    --            IF v_trt_fac_amt <> 0
    --            THEN
    --               v_lvl := 'FO';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code:=fms_interfaces_pkg.sl_control_acc('GIS', 'FO')  ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            BEGIN
    --               SELECT SUM (NVL (crpr_amt, 0))
    --                 INTO v_ripool_amt
    --                 FROM gin_clm_ri_pool_recoveries
    --                WHERE crpr_ggt_tran_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --            END;
    --
    --            IF v_ripool_amt <> 0
    --            THEN                                           -- reinsurance pool
    --               v_lvl := 'POOL';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END IF;
    --
    --         --****************COINSURANCE PAY FULL FOR LEADER COMBINED*************************
    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            IF NVL (v_ccop_amount, 0) != 0
    --            THEN
    --               SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
    --                                                         v_coin_client_type
    --                                                        )
    --                 INTO v_trnt_contra_gl_code
    --                 FROM DUAL;
    --
    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
    --                                                     v_org_code,
    --                                                     i.cmb_brn_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'COIN GL CONTROL A/C - '
    --                                           || v_trnt_contra_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                          );
    --               END IF;
    --
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                 ROUND (NVL (v_ccop_amount,
    --                                                             v_rnd
    --                                                            )
    --                                                       ),
    --                                                 'CLAIM',
    --                                                 v_trnt_contra_gl_code,
    --                                                 v_org_code,
    --                                                 v_paymnt_brh_code,
    --                                                 'D',
    --                                                 v_chq_dtls,
    --                                                 NULL,
    --                                                 NULL,
    --                                                 i.cmb_unit_code,
    --                                                 i.cmb_location_code
    --                                                );
    --            END IF;
    --         END IF;
    --
    ----************************************************************
    --         IF v_pay_method IN ('EFT', 'RTGS')
    --         THEN
    --            --RAISE_ERROR(v_net_amt||' ; '||ROUND (NVL (v_net_amt, 0), v_bcur_rnd));
    --            BEGIN
    ----               fms_cheques_pkg.create_reqn
    ----                  (
    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   --'gis claim',             --narrative V
    ----                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----                                                -- v_net_amt,     --cqr_amount
    ----                   i.cpv_payee,
    ----                   v_pay_method,
    ----                   NULL,
    ----                   v_bnk_bbr_pk,                                          --12
    ----                   i.cmb_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    ----                                                   ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   v_payee_eft_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   v_bnk_bbr_code,
    ----                   v_bnk_account,
    ----                   NULL,
    ----                   'N'                                           --v_auto_auth
    ----                  );
    --
    --                  FMS_INTERFACES_PKG.create_EftRtgs_reqn(
    --                          v_cqr_source,               -- v_cqr_source,
    --                          i.cpv_voucher_no,                       -- v_cqr_ref,
    --                          i.cpv_cmb_claim_no,                     -- v_cqr_ref2,
    --                          TRUNC (SYSDATE),             -- v_cqr_ref_date,
    --                          i.cpv_cmb_claim_no,           -- v_cqr_narrative,
    --                          v_paymnt_brh_code,          -- v_cqr_brh_code,
    --                          v_bct_brh_code, -- v_cqr_bct_brh_code,
    --                          ROUND (NVL (v_net_amt, 0), v_bcur_rnd),                 -- v_cqr_amount,
    --                          i.cpv_payee,                   -- v_cqr_payee,
    --                          v_pay_method,         -- v_cqr_pay_method,
    --                          i.cmb_cur_code,             -- v_cqr_cur_code,
    --                          i.cpv_cur_rate,---i.cpv_cur_rate,
    --                          v_bct_code,---
    --                          fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)),
    --                          i.cpv_authorised_dt,
    --                          v_user_code,                 -- v_cqr_req_by,
    --                          'GIS-CLAIM',             -- v_cqr_pmt_type,
    --                          v_bnk_bbr_code,--v_payee_bank_branch_code,
    --                          v_bnk_account,--v_payee_bank_acc_no,
    --                          v_chq_dtls,             -- v_dtls_table,
    --                          v_payee_eft_dtls,         --v_payee_eft_rec
    --                          NULL,--v_cqr_physical_address
    --                          NULL, ---v_cqr_postal_address
    --                          v_trans_no,--v_itfc_trans_code
    --                          null,--v_itfc_ref3
    --                          null,--v_payee_source_pk,
    --                          null,--v_payee_source_type,
    --                          'N',--v_auto_auth,
    --                          null,--v_num_val_1,
    --                          i.cpv_invoice_no,---v_invoice_no,
    --                          i.cpv_inv_date,---v_invoice_date,
    --                          null,---v_auto_consolidate,
    --                          null,---v_batch_no,
    --                          null---v_payee_spr_code
    --                       );
    --
    --
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error (   'ERROR ON CREATING PAYMENT REQUISITION < '
    ----                               || v_pay_method
    ----                               || '> FOR.'
    ----                               || i.cpv_payee
    ----                               || SQLERRM (SQLCODE)
    ----                              );
    --            END;
    --         ELSIF v_pay_method IN ('MOB')
    --         THEN
    --            BEGIN
    --            --RAISE_ERROR('v_bct_code'||v_bct_code);
    --               Fms_Interfaces_Pkg.create_Mob_reqn
    --                  ( v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),
    --                   i.cpv_cmb_claim_no,
    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),        --cqr_amount
    --                   i.cpv_payee,
    --                   v_pay_method,
    --                   i.cmb_cur_code,
    --                    i.cpv_cur_rate,-
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by) ),
    --                   i.cpv_authorised_dt,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-CLAIM',                                 -- pmt_type  ,
    --                   v_mpt_code,
    --                   v_chq_dtls,
    --                   v_payee_mft_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                     'N',
    --                 NULL,
    --                 i.cpv_invoice_no,---v_invoice_no,
    --                 i.cpv_inv_date,---v_invoice_date,
    --                 'N',
    --                NULL
    --                  );
    --            END;
    --         ELSE
    --            BEGIN
    --
    ----               fms_cheques_pkg.create_reqn
    ----                  (
    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   --'GIS Claim',             --narrative V
    ----                   v_paymnt_brh_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_rnd),             --cqr_amount
    ----                   i.cpv_payee,
    ----                   i.cpv_vchr_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    ----                                                   ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   v_cqr_bnk_dtls,
    ----                   v_auto_auth
    ----                  );
    --
    --               FMS_INTERFACES_PKG.create_Chq_reqn
    --                  (v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),----
    --                   i.cpv_cmb_claim_no,----
    --                   --'GIS Claim',             --narrative V
    --                   v_paymnt_brh_code,-----
    --                   v_bct_brh_code,----
    --                   v_net_amt,----
    --                   --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
    --                   i.cpv_payee,----
    --                   v_pay_method,---'CHQ',----
    --                   v_cur_code,
    --                   i.cpv_cur_rate,--  --                             --i.cmb_cur_code,
    --                   v_bct_code,---
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    --                                                   ),----
    --                   i.cpv_authorised_dt,-----
    --                   v_user_code,   ----                           --v_cqr_req_by  ,
    --                   'GIS-CLAIM',   ----                              -- pmt_type  ,
    --                   v_chq_dtls,----
    --                   null,--v_cqr_physical_address,
    --                  null,--v_cqr_postal_address,
    --                  null,---v_itfc_trans_code,
    --                  null,--v_itfc_ref3,
    --                  null,--v_payee_source_pk,
    --                  null,--v_payee_source_type,
    --                  v_auto_auth,
    --                  null,--v_num_val_1,
    --                  i.cpv_invoice_no,---v_invoice_no,
    --                  i.cpv_inv_date,---v_invoice_date,
    --                  null,--v_auto_consolidate,
    --                  null--v_batch_no
    --                  );
    --
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_application_error (-20001,
    ----                                              'CREATE_REQN :- '
    ----                                           || v_net_amt
    ----                                           || ' $ '||v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code
    ----                                           || SQLERRM (SQLCODE)
    ----                                          );
    --            END;
    --         END IF;
    --      END LOOP;
    --
    --      IF v_rec_count = 0
    --      THEN
    --         raise_application_error (-20001,
    --                                     'CLM REQN NOT CREATED FOR CLAIM # '
    --                                  || v_clmrg_claim_no
    --                                 );
    --      END IF;
    --
    ----       RAISE_ERROR('v_trans_no4456='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
    --   END;
    --PROCEDURE process_claim_pymt (----commented out on 10th July 2019---salvage double posting resolve
    --      v_clmrg_claim_no   VARCHAR2,
    --      v_trans_no         NUMBER,
    --      v_user_name        VARCHAR2,
    --      v_pay_method       VARCHAR2 DEFAULT 'CHQ'
    --   )
    --   IS
    --      v_cmb_claim_no              NUMBER;
    --      v_cqr_bnk_dtls              fms_cheques_pkg.type_bnk_dtls_table;
    --
    --      CURSOR c_claim
    --      IS
    --         SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
    --                 gin_clm_payment_vouchers.cpv_invoice_no,
    --                gin_clm_payment_vouchers.cpv_vchr_cur_code,
    --                gin_clm_payment_vouchers.cpv_cur_code,
    --                gin_clm_payment_vouchers.cpv_voucher_no,
    --                gin_clm_payment_vouchers.cpv_amount_bcur,
    --                gin_clm_payment_vouchers.cpv_apco_cor_code,
    --                gin_clm_payment_vouchers.cpv_date,
    --                gin_clm_payment_vouchers.cpv_authorised,
    --                gin_clm_payment_vouchers.cpv_authorised_by,
    --                gin_clm_payment_vouchers.cpv_account_type,
    --                gin_clm_payment_vouchers.cpv_agnt_agent_code,
    --                cpv_authorised_dt, cpv_amount cpv_amount,
    --                gin_clm_payment_vouchers.cpv_payee,
    --                gin_clm_payment_vouchers.cpv_raise_by,
    --                gin_claim_master_bookings.cmb_cur_code,
    --                gin_claim_master_bookings.cmb_brn_code,
    --                gin_clm_payment_vouchers.cpv_drcr_no, cpv_comp_retention,
    --                cpv_man_amount, cpv_quota_amount, cpv_fstsup_amount,
    --                cpv_secsup_amount, cpv_facre_amount,
    --                SUBSTR (cpv_tran_type, 0, 2) cpv_tran_type,
    --                gin_claim_master_bookings.cmb_scl_code,
    --                NVL (cpv_vat_amnt, 0) cpv_vat_amnt,
    --                NVL (cpv_whtx_amnt, 0) cpv_whtx_amnt,
    --                NVL (cpv_net_paid, 0) cpv_net_paid, cpv_bcur_net_paid,
    --                cpv_bcur_vat_amnt, cpv_bcur_whtx_amnt, cpv_post_dated,
    --                cpv_post_dated_date, cpv_rein_amount, cpv_rein_amount_bcur,
    --                cpv_excess_amount, cpv_excess_amount_bcur, cpv_ret_salvage,
    --                cpv_ret_salvage_bcur, NULL cpv_disc_amt, cpv_claimant_type,
    --                cpv_reg_cld_code, cpv_cbp_code, cpv_reg_clmt_code,
    --                cpv_exciseduty_amnt cpv_exciseduty_amnt,
    --                cpv_bcur_exciseduty_amnt, cmb_coin_pay_type,
    --                cpv_coin_tot_net_paid, cpv_coin_tot_vat_amnt,
    --                cpv_coin_tot_whtx_amnt, cpv_coin_tot_exciseduty_amnt,
    --                cpv_coin_tot_amt, cpv_coin_tot_amt_bcur, cmb_pol_policy_type,
    --                cmb_location_code, cmb_unit_code,
    --                cpv_coin_vattowithhold_amnt, cpv_bcur_vattowithhold_amnt,
    --                cpv_coin_vattowithhold_amnt cpv_vattowithhold_amnt,
    --                gin_clm_payment_vouchers.cpv_cur_rate cpv_cur_rate,cpv_inv_date
    --           FROM gin_claim_master_bookings, gin_clm_payment_vouchers
    --          WHERE cmb_claim_no = cpv_cmb_claim_no
    --            AND cmb_claim_no = v_clmrg_claim_no
    --            AND cpv_ggt_trans_no = v_trans_no;
    --
    --      v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
    --      v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
    --      v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
    --      v_cqr_brh_code              NUMBER;
    --      v_user_code                 NUMBER;
    --      v_cqr_source_auth_by        NUMBER;
    --      v_cqr_source_auth_dt        DATE;
    --      exc_user_error              EXCEPTION;
    --      v_brh_name                  VARCHAR2 (100);
    --      v_bct_code                  NUMBER;
    --      v_bct_brh_code              NUMBER;
    --      v_crt_acc_number            VARCHAR2 (20);
    --      v_crt_acc_org_code          NUMBER;
    --      v_trnt_gl_code              VARCHAR2 (20);
    --      v_trnt_contra_gl_code       VARCHAR2 (20);
    --      v_trnt_code                 VARCHAR2 (20);
    --      v_acc_type                  VARCHAR2 (20);
    --      v_cqr_source                NUMBER;
    --      v_rec_count                 NUMBER                                  := 0;
    --      v_org_code                  NUMBER;
    --      v_exch_rate                 NUMBER;
    --      v_exch_rate2                NUMBER;
    --      v_rnd                       NUMBER;
    --      v_bcur_rnd                  NUMBER;
    --      v_cur_code                  NUMBER;
    --      v_paymnt_brh_code           NUMBER;
    --      v_trt_man_amt               NUMBER;
    --      v_trt_qs_amt                NUMBER;
    --      v_trt_fst_amt               NUMBER;
    --      v_trt_sec_amt               NUMBER;
    --      v_trt_fac_amt               NUMBER;
    --      v_lvl                       VARCHAR2 (15);
    --      rev_type                    VARCHAR2 (15);
    --      v_payment_amt               gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
    --      v_ripool_amt                NUMBER;
    --      v_net_amt                   NUMBER;
    --      v_vat_amt                   NUMBER;
    --      v_whtx_amt                  NUMBER;
    --      v_tot_amt                   NUMBER;
    --      v_disc_amt                  NUMBER;
    --      v_rein_amt                  NUMBER;
    --      v_excess_amt                NUMBER;
    --      v_control_acc               VARCHAR2 (30);
    --      v_client_type               VARCHAR2 (5);
    --      v_act_code                  NUMBER;
    --      v_agnt_sht_desc             VARCHAR2 (25);
    --      v_salv_amt                  NUMBER;
    --      v_per_code                  NUMBER;
    --      v_charge_servp_wthtax       VARCHAR2 (1);
    --      v_auto_auth                 VARCHAR2 (1);
    --      v_eft_enabled               VARCHAR2 (1);
    --      v_bnk_account               VARCHAR2 (30);
    --      v_bnk_bbr_code              VARCHAR2 (30);
    --      v_auth_param                VARCHAR2 (1);
    --      v_sms_tel                   VARCHAR2 (30);
    --      v_ref_no                    VARCHAR2 (30);
    --      v_mpt_code                  NUMBER;
    --      v_exciseduty_amt            NUMBER;
    --      v_ccop_amount_bcur          NUMBER;
    --      v_coin_amount               NUMBER;
    --      v_ccop_amount               NUMBER;
    --      v_coin_client_type          VARCHAR2 (5);
    --      --variable added by kim kahunja to reference tqc_bank_branches pk to be passed on cheque requisition
    --      v_bnk_bbr_pk                NUMBER;
    --      v_trt_lvl                   VARCHAR2 (1)                          := 'P';
    --      v_facre_gl_acc_no           VARCHAR2 (30);
    --      v_frgn_or_local             VARCHAR2 (30);
    --      v_clmfee_garage_param       VARCHAR2 (1)                          := 'N';
    --      v_spr_cnt                   NUMBER;
    --      v_trt_rcry_gl_param         VARCHAR2 (1);
    --      v_vattowithhold_app_param   VARCHAR2 (1)                          := 'N';
    --      v_vattowithhold_amnt        NUMBER;
    --       v_authorized varchar2(1);
    --       v_amt_to_cede  NUMBER;
    --
    --      CURSOR c_treaties
    --      IS
    --         SELECT   SUM
    --                     (DECODE (trs_trtg_code,
    --                              1001, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_man_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              1003, DECODE (NVL (v_trt_lvl, 'T'),
    --                                            'T', NULL,
    --                                            ROUND (  trpa_comp_rate
    --                                                   / 100
    --                                                   * NVL (ctrtr_trt_amt_pcur,
    --                                                          0
    --                                                         )
    --                                                  )
    --                                           ),
    --                              0
    --                             )
    --                     ) trt_qs_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10041, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_fst_amt,
    --                  SUM
    --                     (DECODE (trs_trtg_code,
    --                              10042, DECODE (NVL (v_trt_lvl, 'T'),
    --                                             'T', NULL,
    --                                             ROUND (  trpa_comp_rate
    --                                                    / 100
    --                                                    * NVL (ctrtr_trt_amt_pcur,
    --                                                           0
    --                                                          )
    --                                                   )
    --                                            ),
    --                              0
    --                             )
    --                     ) trt_sec_amt,
    --                  DECODE
    --                     (NVL (v_trt_lvl, 'T'),
    --                      'T', NULL,
    --                      NVL (trpa_gl_rcvbl_account,
    --                           DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                   'N', trpa_gl_account,
    --                                   NULL
    --                                  )
    --                          )
    --                     ) trpa_gl_account,
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ) account_name,
    --                  rei_local_forgn
    --             FROM gin_clm_treaty_recoveries,
    --                  gin_treaty_setups,
    --                  gin_treaty_participants,
    --                  gin_treaties,
    --                  tqc_agencies
    --            WHERE ctrtr_rei_code = rei_code
    --              AND trpa_rei_code = rei_code
    --              AND ctrtr_trs_code = trs_code
    --              AND trpa_agnt_agent_code = agn_code
    --              AND ctrtr_ggt_trans_no = v_trans_no
    --         GROUP BY DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          NVL (trpa_gl_rcvbl_account,
    --                               DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                       'N', trpa_gl_account,
    --                                       NULL
    --                                      )
    --                              )
    --                         ),
    --                  DECODE (NVL (v_trt_lvl, 'T'),
    --                          'T', NULL,
    --                          agn_sht_desc || '-' || agn_name
    --                         ),
    --                  rei_local_forgn;
    --
    --      CURSOR c_facre
    --      IS
    --         SELECT   SUM (DECODE (cfrr_pol_cur_code,
    --                               cfrr_trt_cur_code, NVL (cfrr_amount, 0),
    --                               NVL (cfrr_amount_bcur, 0)
    --                              )
    --                      ) cfrr_amount,
    --                  DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ) agn_acc_no,
    --                  agn_sht_desc, agn_name
    --             FROM gin_clm_facre_recoveries, tqc_agencies
    --            WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --              AND cfrr_ggt_trans_no = v_trans_no
    --              AND cfrc_agnt_agent_code = agn_code
    --         GROUP BY DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                          'N', agn_acc_no,
    --                          agn_gl_rcvbl_acc_no
    --                         ),
    --                  agn_sht_desc,
    --                  agn_name;
    --
    ----    CURSOR cur_xol_amnts (v_trn_no in number)
    ----      IS
    ----        SELECT   NVL (cxtd_amt_to_cede, 0) gross_amt,
    ----                  DECODE (xolp_part_type,
    ----                          'D', xolp_agnt_agent_code,
    ----                          'B', xolp_br_agn_code
    ----                         ) xolp_agnt_agent_code,
    ----                  agn_name,
    ----                  DECODE (xolp_part_type,
    ----                          'D', xolp_agnt_sht_desc,
    ----                          'B', xolp_br_agn_sht_desc
    ----                         ) xolp_agnt_sht_desc,
    ----                  xolp_rate, xolp_gl_account, cxtd_scl_code, xols_cur_code,
    ----                  xol_code,
    ------                  ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)
    ------                        )
    ----                 ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) part_amount,
    ----                  cxtd_clm_no
    ----             FROM gin_claim_xol_treaty_details,
    ----                  gin_xol_treaty_setups,
    ----                  gin_xol_participants,
    ----                  gin_xol_treaties,
    ----                  tqc_agencies
    ----            WHERE cxtd_xols_code = xols_code
    ----              AND xolp_agnt_agent_code = agn_code
    ----              AND cxtd_xol_code = xol_code
    ----              AND xolp_xols_code = xols_code
    ----              AND xols_xol_code = xol_code
    ----              AND cxtd_ggt_trans_no = v_trn_no
    ----              AND cxtd_authorized = 'P'
    ----              AND cxtd_ggt_trans_no IN (SELECT ggt_trans_no
    ----                                          FROM gin_gis_transactions)
    ----              AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) <> 0
    ----             -- AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)) <> 0
    ----         GROUP BY cxtd_clm_no,
    ----                  NVL (cxtd_amt_to_cede, 0),
    ----                  DECODE (xolp_part_type,
    ----                          'D', xolp_agnt_agent_code,
    ----                          'B', xolp_br_agn_code
    ----                         ),
    ----                  agn_name,
    ----                  DECODE (xolp_part_type,
    ----                          'D', xolp_agnt_sht_desc,
    ----                          'B', xolp_br_agn_sht_desc
    ----                         ),
    ----                  xolp_rate,
    ----                  xolp_gl_account,
    ----                  cxtd_scl_code,
    ----                  xols_cur_code,
    ----                  xol_code,
    ----                  --ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0))
    ----                  ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0))
    ----
    ----                  ;
    --
    --   BEGIN
    --
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));
    --
    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('AUTO_AUTH_CLM_PYMTS')
    --           INTO v_auth_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_auth_param := 'Y';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching AUTO_AUTH_CLM_PYMTS parameter...');
    --      END;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar
    --                                        ('SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL')
    --           INTO v_trt_rcry_gl_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_trt_rcry_gl_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --               ('Error fetching SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL parameter...'
    --               );
    --      END;
    --
    --      BEGIN
    --         SELECT gin_parameters_pkg.get_param_varchar ('CLMFEE_GARAGE_VAT')
    --           INTO v_clmfee_garage_param
    --           FROM DUAL;
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_clmfee_garage_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching CLMFEE_GARAGE_VAT parameter...');
    --      END;
    --
    --      BEGIN
    --         SELECT param_value
    --           INTO v_vattowithhold_app_param
    --           FROM gin_parameters
    --          WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_vattowithhold_app_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                       ('Error getting VATTOWITHHOLD_APPLICABLE parameters..');
    --      END;
    --
    --      IF NVL (v_pay_method, 'CHQ') = 'JE'
    --      THEN
    --         v_auto_auth := 'N';
    --      ELSE
    --         IF NVL (v_auth_param, 'N') = 'Y'
    --         THEN
    --            v_auto_auth := 'Y';
    --         ELSE
    --            v_auto_auth := 'N';
    --         END IF;
    --      END IF;
    --
    --      v_rec_count := 0;
    --    --RAISE_ERROR('v_clmrg_claim_no'||v_clmrg_claim_no||'v_trans_no'||v_trans_no);
    --      FOR i IN c_claim
    --      LOOP
    --         v_exch_rate :=
    --                   get_currexch_rate (i.cpv_vchr_cur_code, v_rnd, v_bcur_rnd);
    --
    --
    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'O'
    --         THEN
    --
    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_net_paid;
    --               v_vat_amt := i.cpv_vat_amnt;
    --               v_whtx_amt := i.cpv_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --
    ----               IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    ----               THEN
    ----
    ----                  v_tot_amt :=
    ----                     ROUND (  NVL (v_vat_amt, 0)
    ----                            + NVL (v_whtx_amt, 0)
    ----                            + NVL (v_exciseduty_amt, 0)
    ----                            + NVL (v_salv_amt, 0)
    ----                            + NVL (v_excess_amt, 0)
    ----                            + NVL (v_net_amt, 0),
    ----                            0
    ----                           );
    ----               ELSE
    ----                --RAISE_ERROR('v_net_amt'||v_payment_amt||'v_tot_amt'||v_tot_amt);
    ----                  v_tot_amt :=
    ----                     ROUND (  NVL (v_net_amt, 0)
    ----                            + NVL (v_whtx_amt, 0)
    ----                            + NVL (v_exciseduty_amt, 0)
    ----                            + NVL (v_salv_amt, 0)
    ----                            + NVL (v_excess_amt, 0)
    ----                            + NVL (v_vattowithhold_amnt, 0),
    ----                            0
    ----                           );
    ----
    ----               END IF;
    --            ELSE
    --
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_bcur_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    ----               v_tot_amt :=
    ----                  ROUND (  NVL (v_vat_amt, 0)
    ----                         + NVL (v_whtx_amt, 0)
    ----                         + NVL (v_salv_amt, 0)
    ----                         + NVL (v_excess_amt, 0)
    ----                         --- NVL (v_vattowithhold_amnt, 0)
    ----                         + NVL (v_net_amt, 0),
    ----                         0
    ----                        );
    --
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         ELSIF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            SELECT   SUM (NVL (ccop_amount, 0)),
    --                     SUM (NVL (ccop_amount_bcur, 0)), act_type_sht_desc
    --                INTO v_ccop_amount,
    --                     v_ccop_amount_bcur, v_coin_client_type
    --                FROM gin_clm_coin_payments, tqc_agencies, tqc_account_types
    --               WHERE agn_code = ccop_agnt_agent_code
    --                 AND agn_act_code = act_code
    --                 AND ccop_cpv_voucher_no = i.cpv_voucher_no
    --            GROUP BY act_type_sht_desc;
    --
    --            IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --            THEN
    --               v_payment_amt := i.cpv_amount;
    --               v_net_amt := i.cpv_coin_tot_net_paid;
    --               v_vat_amt := i.cpv_coin_tot_vat_amnt;
    --               v_whtx_amt := i.cpv_coin_tot_whtx_amnt;
    --               v_disc_amt := i.cpv_disc_amt;
    --               v_rein_amt := i.cpv_rein_amount;
    --               v_excess_amt := i.cpv_excess_amount;
    --               v_salv_amt := i.cpv_ret_salvage;
    --               v_exciseduty_amt := i.cpv_coin_tot_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := NVL (v_ccop_amount, 0);
    ----               v_tot_amt :=
    ----                  ROUND (  NVL (v_vat_amt, 0)
    ----                         + NVL (v_whtx_amt, 0)
    ----                         + NVL (v_salv_amt, 0)
    ----                         + NVL (v_excess_amt, 0)
    ----                         --- NVL (v_vattowithhold_amnt, 0)
    ----                         + NVL (v_exciseduty_amt, 0)
    ----                         + NVL (v_net_amt, 0)
    ----                         - NVL (v_coin_amount, 0),
    ----                         0
    ----                        );
    --            ELSE
    --               v_payment_amt := i.cpv_amount_bcur;
    --               v_net_amt := i.cpv_bcur_net_paid;
    --               v_vat_amt := i.cpv_bcur_vat_amnt;
    --               v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --               v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --               v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --               v_cur_code := i.cpv_vchr_cur_code;
    --               v_coin_amount := v_ccop_amount_bcur;
    --               v_salv_amt := i.cpv_ret_salvage_bcur;
    --               v_excess_amt := i.cpv_excess_amount_bcur;
    ----               v_tot_amt :=
    ----                  ROUND (  NVL (v_vat_amt, 0)
    ----                         + NVL (v_whtx_amt, 0)
    ----                         + NVL (v_salv_amt, 0)
    ----                         --- NVL (v_vattowithhold_amnt, 0)
    ----                         + NVL (v_exciseduty_amt, 0)
    ----                         + NVL (v_excess_amt, 0)
    ----                         + NVL (v_net_amt, 0)
    ----                         - NVL (v_coin_amount, 0),
    ----                         0
    ----                        );
    --               v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --               v_rein_amt := i.cpv_rein_amount_bcur;
    --            END IF;
    --         END IF;
    --         DBMS_OUTPUT.PUT_LINE('v_vattowithhold_app_param='||v_vattowithhold_app_param);
    --         DBMS_OUTPUT.PUT_LINE('v_vat_amt='||v_vat_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_whtx_amt='||v_whtx_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_exciseduty_amt='||v_exciseduty_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_salv_amt='||v_salv_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_excess_amt='||v_excess_amt);
    --         DBMS_OUTPUT.PUT_LINE('v_net_amt='||v_net_amt);
    --         IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --           THEN
    --
    --              v_tot_amt :=
    --                 ROUND (  NVL (v_vat_amt, 0)
    --                        + NVL (v_whtx_amt, 0)
    --                        + NVL (v_exciseduty_amt, 0)
    --                        + NVL (v_salv_amt, 0)
    --                        + NVL (v_excess_amt, 0)
    --                        + NVL (v_net_amt, 0),
    --                        0
    --                       );
    --           ELSE
    --            --RAISE_ERROR('v_net_amt'||v_payment_amt||'v_tot_amt'||v_tot_amt);
    --              v_tot_amt :=
    --                 ROUND (  NVL (v_net_amt, 0)
    --                        + NVL (v_whtx_amt, 0)
    --                        + NVL (v_exciseduty_amt, 0)
    --                        + NVL (v_salv_amt, 0)
    --                        + NVL (v_excess_amt, 0)
    --                        + NVL (v_vattowithhold_amnt, 0),
    --                        0
    --                       );
    --
    --           END IF;
    --DBMS_OUTPUT.PUT_LINE('v_tot_amt='||v_tot_amt);
    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
    --         v_paymnt_brh_code := i.cmb_brn_code;
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --         fms_interfaces_pkg.trans_bct ('CLM',
    --                                       v_cqr_source,
    --                                       v_paymnt_brh_code,
    --                                       v_cur_code,
    --                                       v_bct_code,
    --                                       v_bct_brh_code,
    --                                       v_pay_method
    --                                      );
    --
    --         IF     NVL (v_clmfee_garage_param, 'N') = 'Y'
    --            AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --         THEN
    --            BEGIN
    --               SELECT COUNT (*)
    --                 INTO v_spr_cnt
    --                 FROM tqc_service_provider_reg
    --                WHERE sreg_spr_code = i.cpv_apco_cor_code;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_spr_cnt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  v_spr_cnt := 0;
    --            END;
    --
    --
    --            IF NVL (v_spr_cnt, 0) > 0
    --            THEN
    --               v_tot_amt := NVL (v_tot_amt, 0) - NVL (v_vat_amt, 0);
    --               v_net_amt := NVL (v_net_amt, 0) + NVL (v_vat_amt, 0);
    --            END IF;
    --         END IF;
    --
    --         IF ROUND (NVL (v_payment_amt, 0), 0) != v_tot_amt
    --         THEN
    --            raise_application_error
    --                            (-20001,
    --                                'THE NET CHEQUE AMOUNT '
    --                             || NVL (v_net_amt, 0)
    --                             || ' PLUS VAT '
    --                             || NVL (v_vat_amt, 0)
    --                             || ' AND WHTTAX '
    --                             || NVL (v_whtx_amt, 0)
    --                             || ' PLUS EXCISE DUTY '
    --                             || NVL (v_exciseduty_amt, 0)
    --                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                             || v_payment_amt
    --                             || 'v_tot_amt'
    --                             || v_tot_amt
    --                            );
    --         END IF;
    --
    ----          raise_application_error
    ----                            (-20001,
    ----                                'THE NET CHEQUE AMOUNT '
    ----                             || NVL (v_net_amt, 0)
    ----                             || ' PLUS VAT '
    ----                             || NVL (v_vat_amt, 0)
    ----                             || ' AND WHTTAX '
    ----                             || NVL (v_whtx_amt, 0)
    ----                             || ' PLUS EXCISE DUTY '
    ----                             || NVL (v_exciseduty_amt, 0)
    ----                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    ----                             || v_payment_amt
    ----                             || 'v_tot_amt'
    ----                             || v_tot_amt
    ----                            );
    --
    --         --         IF  NVL(v_vattowithhold_app_param,'N')='Y'   THEN
    ----           v_payment_amt:=NVL(v_payment_amt,0)-NVL(v_vat_amt,0)+NVL(v_vattowithhold_amnt,0);
    ----         END IF;
    --         IF i.cpv_tran_type = 'CF'
    --         THEN
    --            rev_type := 'CF';
    --
    --            BEGIN
    --               IF NVL (v_disc_amt, 0) > 0
    --               THEN
    --                  SELECT voud_per_code
    --                    INTO v_per_code
    --                    FROM gin_voucher_details
    --                   WHERE voud_cpv_voucher_no = i.cpv_voucher_no;
    --
    --                  gin_stp_claims_pkg.create_srv_prvdr_reserve
    --                                                         (v_clmrg_claim_no,
    --                                                          v_per_code,
    --                                                          -v_disc_amt,
    --                                                          NULL,
    --                                                          v_user_name,
    --                                                          i.cpv_apco_cor_code,
    --                                                          NULL,
    --                                                          'A',
    --                                                          NULL,
    --                                                          NULL,
    --                                                          NULL
    --                                                         );
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (   'Error creating Discount Revision '
    --                               || SQLERRM (SQLCODE)
    --                              );
    --            END;
    --         ELSE
    --            rev_type := 'CP';
    --         END IF;
    --
    --         IF NVL (v_payment_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --
    ----                   RAISE_ERROR(v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code);
    --
    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               BEGIN
    --                  v_eft_enabled := 'N';
    --
    --                  /*NOTES
    --                  1. SERVICE PROVIDES
    --                  2. CLIENTS
    --                  3. CLAIMANTS
    --                  4. BUSINESS PERSONS
    --                  5. ACCOUNTS*/
    --                  --raise_error('i.cpv_claimant_type '||i.cpv_claimant_type || ' rev_type '||rev_type);
    --                  IF rev_type = 'CP'
    --                  THEN
    --                --raise_error('cpv_claimant_type='||i.cpv_claimant_type);
    --                     IF NVL (i.cpv_claimant_type, 'S') = 'O'
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled (bnk_bbr_code (i.cpv_cbp_code, 4));
    --                        v_bnk_account := bnk_account (i.cpv_cbp_code, 4);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              4
    --                                                             )
    --                                               );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 4);
    --
    --                        -- raise_error('acc....'||bnk_bbr_code (i.cpv_cbp_code, 4)||' i.cpv_cbp_code '||i.cpv_cbp_code);
    --                        BEGIN
    --                           IF v_eft_enabled = 'N'
    --                           THEN
    --                              IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                              THEN
    --                                 v_eft_enabled :=
    --                                    account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                                 v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                                 v_bnk_bbr_code :=
    --                                    tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           3
    --                                                          )
    --                                            );
    --                                 v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                              END IF;
    --                           END IF;
    --                        EXCEPTION
    --                           WHEN NO_DATA_FOUND
    --                           THEN
    --                              v_eft_enabled := 'N';
    --                        END;
    --
    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_cbp_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              1
    --                                                             )
    --                                               );
    --                              v_bnk_account := bnk_account (i.cpv_cbp_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                                (bnk_bbr_code (i.cpv_cbp_code,
    --                                                               1
    --                                                              )
    --                                                );
    --                              v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 1);
    --                           END IF;
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'T'
    --                     THEN
    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                        THEN
    ----                            RAISE_ERROR('BANK BRANCH CODE..'||bnk_bbr_code (i.cpv_apco_cor_code, 1));
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_code :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                        END IF;
    --                     ELSIF NVL (i.cpv_claimant_type, 'S') = 'S'
    --                     THEN
    --
    --
    --                        IF i.cpv_apco_cor_code IS NOT NULL
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                              v_bnk_account :=
    --                                          bnk_account (i.cpv_apco_cor_code, 1);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                              v_bnk_bbr_pk :=
    --                                         bnk_bbr_code (i.cpv_apco_cor_code, 1);
    --
    --                           END IF;
    --                           END IF;
    ----RAISE_ERROR('i.cpv_apco_cor_code'||bnk_bbr_code (i.cpv_reg_cld_code, 2) );
    --                            IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                            );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;
    --
    --                     ELSE
    ----  RAISE_ERROR('i.cpv_apco_cor_code'||i.cpv_reg_cld_code);
    --                        IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                           v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 2);
    --                           v_bnk_bbr_code :=
    --                           --   tqc_interfaces_pkg.bank_ref
    --                                        --    (
    --                                            bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                        --    )
    --                                            ;
    --                        --RAISE_ERROR('CHECKING CLAIM PAYMENT='|| v_bnk_bbr_code );
    --                           v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                        END IF;
    --                     END IF;
    --                  ELSE
    --
    --                     IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                        v_bnk_account := bnk_account (i.cpv_apco_cor_code, 1);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_apco_cor_code, 1);
    --
    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --
    --                           IF bnk_bbr_code (i.cpv_agnt_agent_code, 5) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                        (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                       5
    --                                                      )
    --                                        );
    --                              v_bnk_account :=
    --                                        bnk_account (i.cpv_agnt_agent_code, 5);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                         (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                        5
    --                                                       )
    --                                         );
    --                              v_bnk_bbr_pk :=
    --                                       bnk_bbr_code (i.cpv_agnt_agent_code, 5);
    --                           END IF;
    --                        END IF;
    --
    --                     END IF;
    --
    --                  END IF;
    --
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR GETTING BANK ACC INFO... ');
    --               END;
    ----raise_error('v_eft_enabled++'||v_eft_enabled||'v_bnk_bbr_code+++'||v_bnk_bbr_code||'v_bnk_account+++'||v_bnk_account);
    ----raise_error('v_eft_enabled++'||v_eft_enabled||'v_bnk_bbr_code+++'||v_bnk_bbr_code||'v_bnk_account+++'||v_bnk_account||' i.cpv_payee++'|| i.cpv_payee);
    --               IF v_eft_enabled = 'N'
    --               THEN
    --                  raise_application_error
    --                                   (-20001,
    --                                       'BANK BRANCH NOT ENABLED TO TRANSACT '
    --                                    || v_pay_method
    --                                    || '  ADAS  '
    --                                    || i.cpv_claimant_type
    --                                    || ' PAYMENTS'
    --                                    || i.cpv_reg_cld_code
    --                                    || ' ; '
    --                                    || rev_type
    --                                    || ' ; '
    --                                    || i.cpv_agnt_agent_code
    --                                   );
    --               END IF;
    --            END IF;
    --
    --            v_rec_count := v_rec_count + 1;
    --
    --            --raise_Error('v_payment_amt='||v_payment_amt);
    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               fms_cheques_pkg.append_eft_payees
    --                     (v_rec_count,        --v_no                       NUMBER,
    --                      i.cpv_voucher_no,   --v_ref1                   VARCHAR2,
    --                      ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                      i.cpv_payee,      --v_narrative                VARCHAR2,
    --                      v_bnk_bbr_code,
    --                      --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                      v_bnk_account,    --v_bnk_account              VARCHAR2,
    --                      i.cpv_cmb_claim_no, --v_ref2                   VARCHAR2,
    --                      v_payee_eft_dtls
    --                     );
    --               fms_cheques_pkg.append_chq_trans
    --                                               (v_rec_count,
    --                                                ROUND (v_payment_amt, v_rnd),
    --                                                   'CLAIM PAYMENT GROSS AMT '
    --                                                || v_pay_method,
    --                                                --narrative,
    --                                                v_trnt_gl_code,
    --                                                -- crt_acc_number
    --                                                v_org_code,
    --                                                --crt_acc_org_code ,
    --                                                i.cmb_brn_code,
    --
    --                                                ---commented by Solo v_paymnt_brh_code
    --                                                'D',                --v_dr_cr,
    --                                                v_chq_dtls,
    --                                                NULL,
    --                                                NULL,
    --                                                i.cmb_unit_code,
    --                                                i.cmb_location_code
    --                                               );
    --            ELSIF v_pay_method IN ('MOB')
    --            --Added by Masinde to take care of mobile payments 30052015
    --            THEN
    --               IF i.cpv_tran_type = 'CP'
    --               THEN
    --                  --RAISE_ERROR(i.cpv_reg_clmt_code);
    --                  BEGIN
    --                  SELECT MOBILENO,cld_id_no
    --                       INTO v_sms_tel, v_ref_no
    --                       FROM(
    --                     SELECT NVL (cld_mobile_no, cld_mobile_phone)MOBILENO, cld_id_no
    --                       FROM gin_rgstd_claimants, gin_claimants
    --                      WHERE cld_code = reg_cld_code
    --                        AND reg_cmb_claim_no = v_clmrg_claim_no
    --                        and REG_THIRD_PARTY='T'
    --                        AND reg_clmt_code = i.cpv_reg_clmt_code
    --                        union
    --                       SELECT NVL (CLNT_TEL, CLNT_SMS_TEL)MOBILENO, CLNT_ID_REG_NO cld_id_no
    --                       FROM gin_rgstd_claimants, tqc_clients
    --                      WHERE CLNT_CODE = reg_cld_code
    --                        AND reg_cmb_claim_no = v_clmrg_claim_no
    --                        and REG_THIRD_PARTY='S'
    --                        AND reg_clmt_code = i.cpv_reg_clmt_code);
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting Claimants Mobile Payment details'
    --                            || i.cpv_reg_clmt_code
    --                           );
    --                  END;
    --               ELSE
    --                  BEGIN
    --                     SELECT NVL (spr_sms_number, spr_mobile_no),
    --                            NVL (spr_pin_number, spr_pin)
    --                       INTO v_sms_tel,
    --                            v_ref_no
    --                       FROM tqc_service_providers
    --                      WHERE spr_code = i.cpv_apco_cor_code;
    --                  EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_error
    --                           (   'Error getting service providers Mobile Payment details'
    --                            || i.cpv_apco_cor_code
    --                           );
    --                  END;
    --               END IF;
    --
    --               IF v_sms_tel IS NOT NULL
    --               THEN
    --                  SELECT mpt_code
    --                    INTO v_mpt_code
    --                    FROM tqc_mob_pymnt_types_prefixes, tqc_mobile_pymnt_types
    --                   WHERE mptp_mpt_code = mpt_code
    --                     AND mptp_mob_no_prefix = '0'||SUBSTR (v_sms_tel, 5, 3);
    --               ELSE
    --                  raise_application_error
    --                     (-20001,
    --                      'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..'
    --                     );
    --               END IF;
    --
    --               BEGIN
    --                  v_payee_mft_dtls (1) :=
    --                     fms_cheques_pkg.append_mft_payees
    --                                    (v_rec_count,
    --                                     i.cpv_voucher_no,
    --                                     ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                     ---v_amount,
    --                                     i.cpv_payee,               --v_narrative,
    --                                     v_sms_tel,
    --
    --                                     --v_credit_id                                                                                 ,
    --                                     'Mobile Phone Number', --v_credit_id_type
    --                                     v_ref_no,               --v_validation_id
    --                                     'REFERENCE NO'     --v_validation_id_type
    --                                    );
    --                  fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                    ROUND (v_payment_amt,
    --                                                           v_rnd
    --                                                          ),
    --                                                    'CLAIM',      --narrative,
    --                                                    v_trnt_gl_code,
    --                                                    -- crt_acc_number
    --                                                    v_org_code,
    --                                                    --crt_acc_org_code ,
    --                                                    v_paymnt_brh_code,
    --
    --                                                    --i.cmb_brn_code,          --v_brh_code,
    --                                                    'D',            --v_dr_cr,
    --                                                    v_chq_dtls
    --                                                   );
    --               --fms_chq_mftfile_dtls
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error (   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
    --                                  || i.cpv_voucher_no
    --                                 );
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                               (   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
    --                                || i.cpv_voucher_no
    --                               );
    --               END;
    --            ELSE
    --               fms_cheques_pkg.append_chq_trans
    --                  (v_rec_count,
    --                   ROUND (v_payment_amt, v_rnd),
    --                   'CLAIM PAYMENT GROSS AMT',                     --narrative,
    --                   v_trnt_gl_code,                           -- crt_acc_number
    --                   v_org_code,                            --crt_acc_org_code ,
    --                   v_paymnt_brh_code, --i.cmb_brn_code,          --v_brh_code,
    --                   'D',                                             --v_dr_cr,
    --                   v_chq_dtls,
    --                   NULL,
    --                   NULL,
    --                   i.cmb_unit_code,
    --                   i.cmb_location_code
    --                  );
    --            END IF;
    --         END IF;
    --
    ----******************************SALVAGE *******************************
    --         IF NVL (v_salv_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CS',                         --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (v_salv_amt, v_rnd),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,
    --
    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;
    --
    ----************************EXCESS************************
    --         IF NVL (v_excess_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('CRE',                        --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_excess_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM EXCESS',     --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code,
    --
    --                                              --i.cmb_brn_code,          --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;
    --
    ----************************REINSURANCE************************
    --         IF NVL (v_rein_amt, 0) > 0
    --         THEN
    --            IF NVL (i.cpv_rein_amount, 0) != 0
    --            THEN
    --               IF NVL (i.cpv_account_type, 'D') = 'D'
    --               THEN
    --                  v_client_type := 'D';
    --               ELSE
    --                  BEGIN
    --                     SELECT agn_act_code, agn_sht_desc
    --                       INTO v_act_code, v_agnt_sht_desc
    --                       FROM tqc_agencies
    --                      WHERE agn_code = i.cpv_agnt_agent_code;
    --                  EXCEPTION
    --                     WHEN NO_DATA_FOUND
    --                     THEN
    --                        raise_application_error (-20021,
    --                                                    'AGENT - '
    --                                                 || v_client_type
    --                                                 || ' NOT FOUND '
    --                                                );
    --                     WHEN OTHERS
    --                     THEN
    --                        raise_application_error (-20022,
    --                                                    'AGENT INFO '
    --                                                 || SQLERRM (SQLCODE)
    --                                                );
    --                  END;
    --
    --                  IF v_act_code IN (2, 9, 10, 16)
    --                  THEN
    --                     v_client_type := 'A';
    --                  ELSIF v_act_code = 3
    --                  THEN
    --                     v_client_type := 'B';
    --                  ELSIF v_act_code = 4
    --                  THEN
    --                     v_client_type := 'FI';
    --                  ELSIF v_act_code = 5
    --                  THEN
    --                     v_client_type := 'I';
    --                  ELSIF v_act_code = 6
    --                  THEN
    --                     v_client_type := 'R';
    --                  ELSIF v_act_code = 7
    --                  THEN
    --                     v_client_type := 'FO';
    --                  ELSE
    --                     raise_application_error (-20001,
    --                                                 'UNDEFINED ACCOUNT TYPE - '
    --                                              || v_act_code
    --                                              || ' -FOR AGENT '
    --                                              || v_agnt_sht_desc
    --                                              || 'i.CPV_ACCOUNT_TYPE '
    --                                              || i.cpv_account_type
    --                                              || 'v_clmrg_claim_no ='
    --                                              || v_clmrg_claim_no
    --                                             );
    --                  END IF;
    --               END IF;
    --
    --               IF v_client_type IS NULL
    --               THEN
    --                  raise_application_error (-20023,
    --                                           'CANNOT POST NULL CLIENT TYPE'
    --                                          );
    --               ELSE
    --                  v_control_acc :=
    --                     fms_interfaces_pkg.sl_control_acc ('GIS', v_client_type);
    --               END IF;
    --
    --               gin_interfaces_pkg.get_gl_acct_code
    --                                          (rev_type,
    --                                                    --v_trnt_type IN VARCHAR2,
    --                                           i.cmb_scl_code,
    --
    --                                           --v_scl_code IN NUMBER,
    --                                           'U',  --     v_app_lvl IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_btr_trans_code IN VARCHAR2,
    --                                           NULL,
    --                                           --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                                           v_trnt_code,
    --                                           --          v_trnt_code OUT VARCHAR2,
    --                                           v_trnt_gl_code,
    --                                           --          v_trnt_gl_code OUT VARCHAR2,
    --                                           v_trnt_contra_gl_code
    --                                          --          v_trnt_contra_gl_code OUT VARCHAR2
    --                                          );
    --
    --               IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL CTRL A/C - '
    --                                           || v_control_acc
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;
    --
    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'CP GL A/C - '
    --                                           || v_trnt_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || i.cmb_scl_code
    --                                          );
    --               END IF;
    --
    --               v_rec_count := v_rec_count + 1;
    --
    --               BEGIN
    --                  fms_cheques_pkg.append_chq_trans
    --                                            (v_rec_count,
    --                                             ROUND (NVL (i.cpv_rein_amount, 0),
    --                                                    v_bcur_rnd
    --                                                   ),
    --                                             'GL TRANS' || v_trnt_code,
    --                                             --narrative,
    --                                             v_trnt_gl_code,
    --                                             -- crt_acc_number
    --                                             v_org_code,  --crt_acc_org_code ,
    --                                             v_paymnt_brh_code,
    --
    --                                             --i.cmb_brn_code,          --v_brh_code,
    --                                             'C',                   --v_dr_cr,
    --                                             v_chq_dtls
    --                                            );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || v_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END IF;
    --         END IF;
    ----
    ----         SELECT  cxtd_authorized,cxtd_amt_to_cede  INTO  v_authorized,v_amt_to_cede
    ----             FROM gin_claim_xol_treaty_details,
    ----                  gin_xol_treaty_setups,
    ----                  gin_xol_participants,
    ----                  gin_xol_treaties,
    ----                  tqc_agencies
    ----            WHERE cxtd_xols_code = xols_code
    ----              AND xolp_agnt_agent_code = agn_code
    ----              AND cxtd_xol_code = xol_code
    ----              AND xolp_xols_code = xols_code
    ----              AND xols_xol_code = xol_code
    ----              AND cxtd_ggt_trans_no = v_trans_no
    ----            --  AND cxtd_authorized = 'Y'
    ----              AND cxtd_ggt_trans_no IN (SELECT ggt_trans_no
    ----                                          FROM gin_gis_transactions)
    ----              --AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) <> 0
    ----             -- AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)) <> 0
    ----         GROUP BY cxtd_authorized,cxtd_amt_to_cede ;
    --
    ----         RAISE_ERROR('v_trans_no='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
    ----       FOR c_xol_rec IN cur_xol_amnts(v_trans_no)
    ----         LOOP
    ----           BEGIN
    ------            RAISE_ERROR('v_trans_no='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
    ------         raise_error('ERROR GETTING CLAIM DETAILS  MMMMM'||v_trans_no);
    ----     IF i.cpv_tran_type = 'CP'  THEN
    ----               gin_interfaces_pkg.get_gl_acct_code
    ----                     ('CP',                     --v_trnt_type IN VARCHAR2,
    ----                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    ----                      'XOL',                     --     v_app_lvl IN VARCHAR2,
    ----                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    ----                      NULL,
    ----                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    ----                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    ----                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    ----                      v_trnt_contra_gl_code
    ----                     --          v_trnt_contra_gl_code OUT VARCHAR2
    ----                     );
    ----         ELSIF i.cpv_tran_type = 'CF'  THEN
    ----           gin_interfaces_pkg.get_gl_acct_code
    ----                     ('CF',                     --v_trnt_type IN VARCHAR2,
    ----                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    ----                      'XOL',                     --     v_app_lvl IN VARCHAR2,
    ----                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    ----                      NULL,
    ----                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    ----                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    ----                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    ----                      v_trnt_contra_gl_code
    ----                     --          v_trnt_contra_gl_code OUT VARCHAR2
    ----                     );
    ----
    ----          END IF;
    --
    ----               IF c_xol_rec.xolp_gl_account IS NOT NULL
    ----               THEN
    ----               v_trnt_contra_gl_code := c_xol_rec.xolp_gl_account;
    ----               ELSE
    ----               raise_error('Error GL account not provided for XOL account transaction No'||v_trans_no);--v_trnt_contra_gl_code := gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, NULL);
    ----               END IF;
    --
    ----
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error
    ----                     (   'CLAIM PAYMENT XOL AMOUNT REVENUE ITEM FOR SUB CLASS '
    ----                      || i.cmb_scl_code
    ----                      || ' IS NOT DEFINED..'
    ----                     );
    ----            END;
    ----            --RAISE_ERROR('c_xol_rec.xolp_gl_account'||c_xol_rec.xolp_gl_account);
    ----             check_valid_gl_acc (v_trnt_gl_code,
    ----                             v_org_code,
    ----                             v_paymnt_brh_code,
    ----                             v_brh_name,
    ----                             v_trnt_code,
    ----                             i.cmb_scl_code
    ----                            );
    ----            check_valid_gl_acc (v_trnt_contra_gl_code,
    ----                                v_org_code,
    ----                                v_paymnt_brh_code,
    ----                                v_brh_name,
    ----                                v_trnt_code,
    ----                                i.cmb_scl_code
    ----                               );
    ----         v_rec_count := v_rec_count + 1;
    ----         fms_cheques_pkg.append_chq_trans (v_rec_count,
    ----                                           ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
    ----                                           'CLAIM PAYMENT XOL',
    ----                                           --narrative,
    ----                                           v_trnt_gl_code,
    ----                                           -- crt_acc_number
    ----                                           v_org_code,    --crt_acc_org_code ,
    ----                                           v_paymnt_brh_code,    --v_brh_code,
    ----                                           'C',                     --v_dr_cr,
    ----                                           v_chq_dtls,
    ----                                           NULL,
    ----                                           NULL,
    ----                                           i.cmb_unit_code,
    ----                                           i.cmb_location_code
    ----                                          );
    ----             v_rec_count := v_rec_count + 1;
    ----            fms_cheques_pkg.append_chq_trans
    ----                                       (v_rec_count,
    ----                                       ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
    ----                                       'CLAIM PAYMENT XOL',                 --narrative,
    ----                                        v_trnt_contra_gl_code,
    ----                                        -- crt_acc_number
    ----                                        v_org_code,       --crt_acc_org_code ,
    ----                                        v_paymnt_brh_code,       --v_brh_code,
    ----                                        'D',                        --v_dr_cr,
    ----                                        v_chq_dtls,
    ----                                        NULL,
    ----                                        NULL,
    ----                                        i.cmb_unit_code,
    ----                                        i.cmb_location_code
    ----                                       );
    ----
    ----
    ----         END LOOP;
    --
    --
    ----************************VAT************************
    --         IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --         THEN
    --            IF NVL (v_vat_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHVAT',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    ----RAISE_eRROR(v_vat_amt||' = '||v_vattowithhold_app_param);
    --               v_rec_count := v_rec_count + 1;
    --
    --               IF     (   NVL (v_clmfee_garage_param, 'N') = 'Y'
    --                       OR NVL (v_vattowithhold_app_param, 'N') = 'Y'
    --                      )
    --                  AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --               THEN
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,
    --
    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               ELSE
    --                  fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,
    --
    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               END IF;
    --            END IF;
    --         END IF;
    --
    ----************************VATTOWTH************************
    ----raise_error('v_vattowithhold_amnt='||v_vattowithhold_amnt);
    --         IF NVL (v_vattowithhold_amnt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('VATTOWTH',                   --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    ----RAISE_eRROR(v_trnt_gl_code||' = '||v_trnt_contra_gl_code);
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                          (v_rec_count,
    --                                           ROUND (NVL (v_vattowithhold_amnt,
    --                                                       0),
    --                                                  v_rnd
    --                                                 ),
    --                                           'CLAIM PAYMENT VATTOWTH AMT',
    --                                           --narrative,
    --                                           v_trnt_gl_code,---basv_trnt_contra_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,
    --
    --                                           --i.cmb_brn_code,          --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls,
    --                                           NULL,
    --                                           NULL,
    --                                           i.cmb_unit_code,
    --                                           i.cmb_location_code
    --                                          );
    --         END IF;
    --
    --         --************************WITHHOLDING TAX************************
    --         IF NVL (v_whtx_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_whtx_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM PAYMENT WHTAX AMT',
    --                                              --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;
    --
    --         --************************EXCISE DUTY************************
    --         IF NVL (v_exciseduty_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('EXDTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_exciseduty_amt, 0),
    --                                                     v_rnd
    --                                                    ),
    --                                              'CLAIM',            --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls
    --                                             );
    --         END IF;
    --
    ----************************REINSURANCE************************
    --         FOR c_treaty_rec IN c_treaties
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND c_treaty_rec.TRPA_GL_ACCOUNT IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||c_treaty_rec.ACCOUNT_NAME);
    ----             END IF;
    --            IF c_treaty_rec.trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;
    --
    --            --**************************** Update Quota Revision Amount***************************
    --            IF c_treaty_rec.trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_gl_code,     -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_contra_gl_code,
    --                                         -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --            END IF;
    --
    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;
    --
    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF c_treaty_rec.trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            END IF;
    --         END LOOP;
    --
    --         --**************************** Update Facultative Revision Amount***************************
    --         FOR f IN c_facre
    --         LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND f.AGN_ACC_NO IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||f.AGN_NAME);
    ----             END IF;
    --            IF f.cfrr_amount <> 0
    --            THEN
    --               v_lvl := 'FO';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --                  --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --                  v_trnt_contra_gl_code := f.agn_acc_no;
    --
    --                  IF v_trnt_contra_gl_code IS NULL
    --                  THEN
    --                     v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, null);
    --                  END IF;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END LOOP;
    --
    --         BEGIN
    --            SELECT SUM (NVL (crpr_amt, 0))
    --              INTO v_ripool_amt
    --              FROM gin_clm_ri_pool_recoveries
    --             WHERE crpr_ggt_tran_no = v_trans_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --         END;
    --
    --         IF v_ripool_amt <> 0                              -- reinsurance pool
    --         THEN
    --            v_lvl := 'POOL';
    --
    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;
    --
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;
    --
    --         IF gin_parameters_pkg.get_param_varchar ('REVISE_GL_ON_CLAIM_PYMT') =
    --                                                                           'Y'
    --         THEN
    --            rev_type := 'LRV';
    --
    --            BEGIN
    --               SELECT   SUM (DECODE (trs_trtg_code,
    --                                     1001, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     1003, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10041, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        SUM (DECODE (trs_trtg_code,
    --                                     10042, NVL (ctrtr_trt_amt_pcur, 0),
    --                                     0
    --                                    )
    --                            ),
    --                        rei_local_forgn
    --                   INTO v_trt_man_amt,
    --                        v_trt_qs_amt,
    --                        v_trt_fst_amt,
    --                        v_trt_sec_amt,
    --                        v_frgn_or_local
    --                   FROM gin_clm_treaty_recoveries,
    --                        gin_treaties,
    --                        gin_treaty_setups
    --                  WHERE ctrtr_trs_code = trs_code
    --                    AND ctrtr_cmb_claim_no = v_clmrg_claim_no
    --                    AND ctrtr_ggt_trans_no = v_trans_no
    --                    AND rei_code = ctrtr_rei_code
    --               GROUP BY rei_local_forgn;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  v_trt_man_amt := 0;
    --                  v_trt_qs_amt := 0;
    --                  v_trt_fst_amt := 0;
    --                  v_trt_sec_amt := 0;
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'SYSTEM COULD NOT RETRIEVE TREATY RI APPORTIONMENT '
    --                      || ';'
    --                      || v_clmrg_claim_no
    --                      || ';'
    --                      || v_trans_no
    --                     );
    --            END;
    --
    --            IF NVL (v_payment_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            IF v_trt_man_amt <> 0
    --            THEN
    --               v_lvl := 'MAN';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            --**************************** Update Quota Revision Amount***************************
    --            --RAISE_ERROR('v_trt_qs_amt='||v_trt_qs_amt);
    --            IF v_trt_qs_amt <> 0
    --            THEN
    --               v_lvl := 'QST';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               --  Raise_error(v_trnt_gl_code);
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            --**************************** Update FIRST SURPLUS Revision Amount***************************
    --            IF v_trt_fst_amt <> 0
    --            THEN
    --               v_lvl := 'FSTSUP';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code := fms_interfaces_pkg.sl_control_acc('GIS', 'R','FSTSUP') ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            --**************************** Update SECOND SURPLUS Revision Amount***************************
    --            IF v_trt_sec_amt <> 0
    --            THEN
    --               v_lvl := 'SECSUP';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            --**************************** Update Facultative Revision Amount***************************
    --            BEGIN
    --               SELECT SUM (NVL (cfrr_amount, 0))
    --                 INTO v_trt_fac_amt
    --                 FROM gin_clm_facre_recoveries
    --                WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --                  AND cfrr_ggt_trans_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                         ('SYSTEM COULD NOT RETRIEVE FACRE RI APPORTIONMENT ');
    --            END;
    --
    --            IF v_trt_fac_amt <> 0
    --            THEN
    --               v_lvl := 'FO';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               -- v_trnt_contra_gl_code:=fms_interfaces_pkg.sl_control_acc('GIS', 'FO')  ;
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --
    --            BEGIN
    --               SELECT SUM (NVL (crpr_amt, 0))
    --                 INTO v_ripool_amt
    --                 FROM gin_clm_ri_pool_recoveries
    --                WHERE crpr_ggt_tran_no = v_trans_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --            END;
    --
    --            IF v_ripool_amt <> 0
    --            THEN                                           -- reinsurance pool
    --               v_lvl := 'POOL';
    --
    --               BEGIN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_when_others
    --                        (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                         || i.cmb_scl_code
    --                         || ' IS NOT DEFINED..'
    --                        );
    --               END;
    --
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans
    --                                             (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            END IF;
    --         END IF;
    --
    --         --****************COINSURANCE PAY FULL FOR LEADER COMBINED*************************
    --         IF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --         THEN
    --            IF NVL (v_ccop_amount, 0) != 0
    --            THEN
    --               SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
    --                                                         v_coin_client_type
    --                                                        )
    --                 INTO v_trnt_contra_gl_code
    --                 FROM DUAL;
    --
    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
    --                                                     v_org_code,
    --                                                     i.cmb_brn_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'COIN GL CONTROL A/C - '
    --                                           || v_trnt_contra_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                          );
    --               END IF;
    --
    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                 ROUND (NVL (v_ccop_amount,
    --                                                             v_rnd
    --                                                            )
    --                                                       ),
    --                                                 'CLAIM',
    --                                                 v_trnt_contra_gl_code,
    --                                                 v_org_code,
    --                                                 v_paymnt_brh_code,
    --                                                 'D',
    --                                                 v_chq_dtls,
    --                                                 NULL,
    --                                                 NULL,
    --                                                 i.cmb_unit_code,
    --                                                 i.cmb_location_code
    --                                                );
    --            END IF;
    --         END IF;
    --
    ----************************************************************
    --         IF v_pay_method IN ('EFT', 'RTGS')
    --         THEN
    --            --RAISE_ERROR(v_net_amt||' ; '||ROUND (NVL (v_net_amt, 0), v_bcur_rnd));
    --            BEGIN
    ----               fms_cheques_pkg.create_reqn
    ----                  (
    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   --'gis claim',             --narrative V
    ----                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----                                                -- v_net_amt,     --cqr_amount
    ----                   i.cpv_payee,
    ----                   v_pay_method,
    ----                   NULL,
    ----                   v_bnk_bbr_pk,                                          --12
    ----                   i.cmb_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    ----                                                   ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   v_payee_eft_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   v_bnk_bbr_code,
    ----                   v_bnk_account,
    ----                   NULL,
    ----                   'N'                                           --v_auto_auth
    ----                  );
    --
    --                  FMS_INTERFACES_PKG.create_EftRtgs_reqn(
    --                          v_cqr_source,               -- v_cqr_source,
    --                          i.cpv_voucher_no,                       -- v_cqr_ref,
    --                          i.cpv_cmb_claim_no,                     -- v_cqr_ref2,
    --                          TRUNC (SYSDATE),             -- v_cqr_ref_date,
    --                          i.cpv_cmb_claim_no,           -- v_cqr_narrative,
    --                          v_paymnt_brh_code,          -- v_cqr_brh_code,
    --                          v_bct_brh_code, -- v_cqr_bct_brh_code,
    --                          ROUND (NVL (v_net_amt, 0), v_bcur_rnd),                 -- v_cqr_amount,
    --                          i.cpv_payee,                   -- v_cqr_payee,
    --                          v_pay_method,         -- v_cqr_pay_method,
    --                          i.cmb_cur_code,             -- v_cqr_cur_code,
    --                          i.cpv_cur_rate,---i.cpv_cur_rate,
    --                          v_bct_code,---
    --                          fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)),
    --                          i.cpv_authorised_dt,
    --                          v_user_code,                 -- v_cqr_req_by,
    --                          'GIS-CLAIM',             -- v_cqr_pmt_type,
    --                          v_bnk_bbr_code,--v_payee_bank_branch_code,
    --                          v_bnk_account,--v_payee_bank_acc_no,
    --                          v_chq_dtls,             -- v_dtls_table,
    --                          v_payee_eft_dtls,         --v_payee_eft_rec
    --                          NULL,--v_cqr_physical_address
    --                          NULL, ---v_cqr_postal_address
    --                          v_trans_no,--v_itfc_trans_code
    --                          null,--v_itfc_ref3
    --                          null,--v_payee_source_pk,
    --                          null,--v_payee_source_type,
    --                          'N',--v_auto_auth,
    --                          null,--v_num_val_1,
    --                          i.cpv_invoice_no,---v_invoice_no,
    --                          i.cpv_inv_date,---v_invoice_date,
    --                          null,---v_auto_consolidate,
    --                          null,---v_batch_no,
    --                          null---v_payee_spr_code
    --                       );
    --
    --
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error (   'ERROR ON CREATING PAYMENT REQUISITION < '
    ----                               || v_pay_method
    ----                               || '> FOR.'
    ----                               || i.cpv_payee
    ----                               || SQLERRM (SQLCODE)
    ----                              );
    --            END;
    --         ELSIF v_pay_method IN ('MOB')
    --         THEN
    --            BEGIN
    --            --RAISE_ERROR('v_bct_code'||v_bct_code);
    --               Fms_Interfaces_Pkg.create_Mob_reqn
    --                  ( v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),
    --                   i.cpv_cmb_claim_no,
    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),        --cqr_amount
    --                   i.cpv_payee,
    --                   v_pay_method,
    --                   i.cmb_cur_code,
    --                    i.cpv_cur_rate,-
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by) ),
    --                   i.cpv_authorised_dt,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-CLAIM',                                 -- pmt_type  ,
    --                   v_mpt_code,
    --                   v_chq_dtls,
    --                   v_payee_mft_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                     'N',
    --                 NULL,
    --                 i.cpv_invoice_no,---v_invoice_no,
    --                 i.cpv_inv_date,---v_invoice_date,
    --                 'N',
    --                NULL
    --                  );
    --            END;
    --         ELSE
    --            BEGIN
    --
    ----               fms_cheques_pkg.create_reqn
    ----                  (
    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   --'GIS Claim',             --narrative V
    ----                   v_paymnt_brh_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_rnd),             --cqr_amount
    ----                   i.cpv_payee,
    ----                   i.cpv_vchr_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    ----                                                   ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   v_cqr_bnk_dtls,
    ----                   v_auto_auth
    ----                  );
    --
    --               FMS_INTERFACES_PKG.create_Chq_reqn
    --                  (v_cqr_source,
    --                   i.cpv_voucher_no,                                     --ref
    --                   i.cpv_cmb_claim_no,                                -- ref2,
    --                   TRUNC (SYSDATE),----
    --                   i.cpv_cmb_claim_no,----
    --                   --'GIS Claim',             --narrative V
    --                   v_paymnt_brh_code,-----
    --                   v_bct_brh_code,----
    --                   ROUND (NVL(v_net_amt,0),v_bcur_rnd),----
    --                   --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
    --                   i.cpv_payee,----
    --                   v_pay_method,---'CHQ',----
    --                   v_cur_code,
    --                   i.cpv_cur_rate,--  --                             --i.cmb_cur_code,
    --                   v_bct_code,---
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    --                                                   ),----
    --                   i.cpv_authorised_dt,-----
    --                   v_user_code,   ----                           --v_cqr_req_by  ,
    --                   'GIS-CLAIM',   ----                              -- pmt_type  ,
    --                   v_chq_dtls,----
    --                   null,--v_cqr_physical_address,
    --                  null,--v_cqr_postal_address,
    --                  null,---v_itfc_trans_code,
    --                  null,--v_itfc_ref3,
    --                  null,--v_payee_source_pk,
    --                  null,--v_payee_source_type,
    --                  v_auto_auth,
    --                  null,--v_num_val_1,
    --                  i.cpv_invoice_no,---v_invoice_no,
    --                  i.cpv_inv_date,---v_invoice_date,
    --                  null,--v_auto_consolidate,
    --                  null--v_batch_no
    --                  );
    --
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_application_error (-20001,
    ----                                              'CREATE_REQN :- '
    ----                                           || v_net_amt
    ----                                           || ' $ '||v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code
    ----                                           || SQLERRM (SQLCODE)
    ----                                          );
    --            END;
    --         END IF;
    --      END LOOP;
    --
    --      IF v_rec_count = 0
    --      THEN
    --         raise_application_error (-20001,
    --                                     'CLM REQN NOT CREATED FOR CLAIM # '
    --                                  || v_clmrg_claim_no
    --                                 );
    --      END IF;
    --
    ----       RAISE_ERROR('v_trans_no4456='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
    --   END;
    PROCEDURE process_claim_pymt (v_clmrg_claim_no   VARCHAR2,
                                  v_trans_no         NUMBER,
                                  v_user_name        VARCHAR2,
                                  v_pay_method       VARCHAR2 DEFAULT 'CHQ')
    IS
        v_cmb_claim_no              NUMBER;
        v_cqr_bnk_dtls              fms_cheques_pkg.type_bnk_dtls_table;

        CURSOR c_claim IS
            SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
                   gin_clm_payment_vouchers.cpv_invoice_no,
                   gin_clm_payment_vouchers.cpv_vchr_cur_code,
                   gin_clm_payment_vouchers.cpv_cur_code,
                   gin_clm_payment_vouchers.cpv_voucher_no,
                   gin_clm_payment_vouchers.cpv_amount_bcur,
                   gin_clm_payment_vouchers.cpv_apco_cor_code,
                   gin_clm_payment_vouchers.cpv_date,
                   gin_clm_payment_vouchers.cpv_authorised,
                   gin_clm_payment_vouchers.cpv_authorised_by,
                   gin_clm_payment_vouchers.cpv_account_type,
                   gin_clm_payment_vouchers.cpv_agnt_agent_code,
                   cpv_authorised_dt,
                   cpv_amount                                cpv_amount,
                   gin_clm_payment_vouchers.cpv_payee,
                   gin_clm_payment_vouchers.cpv_raise_by,
                   gin_claim_master_bookings.cmb_cur_code,
                   gin_claim_master_bookings.cmb_brn_code,
                   gin_clm_payment_vouchers.cpv_drcr_no,
                   cpv_comp_retention,
                   cpv_man_amount,
                   cpv_quota_amount,
                   cpv_fstsup_amount,
                   cpv_secsup_amount,
                   cpv_facre_amount,
                   SUBSTR (cpv_tran_type, 0, 2)              cpv_tran_type,
                   gin_claim_master_bookings.cmb_scl_code,
                   NVL (cpv_vat_amnt, 0)                     cpv_vat_amnt,
                   NVL (cpv_whtx_amnt, 0)                    cpv_whtx_amnt,
                   NVL (cpv_net_paid, 0)                     cpv_net_paid,
                   cpv_bcur_net_paid,
                   cpv_bcur_vat_amnt,
                   cpv_bcur_whtx_amnt,
                   cpv_post_dated,
                   cpv_post_dated_date,
                   cpv_rein_amount,
                   cpv_rein_amount_bcur,
                   cpv_excess_amount,
                   cpv_excess_amount_bcur,
                   cpv_ret_salvage,
                   cpv_ret_salvage_bcur,
                   NULL                                      cpv_disc_amt,
                   cpv_claimant_type,
                   cpv_reg_cld_code,
                   cpv_cbp_code,
                   cpv_reg_clmt_code,
                   cpv_exciseduty_amnt                       cpv_exciseduty_amnt,
                   cpv_bcur_exciseduty_amnt,
                   cmb_coin_pay_type,
                   cpv_coin_tot_net_paid,
                   cpv_coin_tot_vat_amnt,
                   cpv_coin_tot_whtx_amnt,
                   cpv_coin_tot_exciseduty_amnt,
                   cpv_coin_tot_amt,
                   cpv_coin_tot_amt_bcur,
                   cmb_pol_policy_type,
                   cmb_location_code,
                   cmb_unit_code,
                   cpv_coin_vattowithhold_amnt,
                   cpv_bcur_vattowithhold_amnt,
                   cpv_coin_vattowithhold_amnt               cpv_vattowithhold_amnt,
                   gin_clm_payment_vouchers.cpv_cur_rate     cpv_cur_rate,
                   cpv_inv_date
              FROM gin_claim_master_bookings, gin_clm_payment_vouchers
             WHERE     cmb_claim_no = cpv_cmb_claim_no
                   AND cmb_claim_no = v_clmrg_claim_no
                   AND cpv_ggt_trans_no = v_trans_no;

        v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
        v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
        v_cqr_brh_code              NUMBER;
        v_user_code                 NUMBER;
        v_cqr_source_auth_by        NUMBER;
        v_cqr_source_auth_dt        DATE;
        exc_user_error              EXCEPTION;
        v_brh_name                  VARCHAR2 (100);
        v_bct_code                  NUMBER;
        v_bct_brh_code              NUMBER;
        v_crt_acc_number            VARCHAR2 (20);
        v_crt_acc_org_code          NUMBER;
        v_trnt_gl_code              VARCHAR2 (20);
        v_trnt_contra_gl_code       VARCHAR2 (20);
        v_trnt_code                 VARCHAR2 (20);
        v_acc_type                  VARCHAR2 (20);
        v_cqr_source                NUMBER;
        v_rec_count                 NUMBER := 0;
        v_org_code                  NUMBER;
        v_exch_rate                 NUMBER;
        v_exch_rate2                NUMBER;
        v_rnd                       NUMBER;
        v_bcur_rnd                  NUMBER;
        v_cur_code                  NUMBER;
        v_paymnt_brh_code           NUMBER;
        v_trt_man_amt               NUMBER;
        v_trt_qs_amt                NUMBER;
        v_trt_fst_amt               NUMBER;
        v_trt_sec_amt               NUMBER;
        v_trt_fac_amt               NUMBER;
        v_lvl                       VARCHAR2 (15);
        rev_type                    VARCHAR2 (15);
        v_payment_amt               gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
        v_ripool_amt                NUMBER;
        v_net_amt                   NUMBER;
        v_vat_amt                   NUMBER;
        v_whtx_amt                  NUMBER;
        v_tot_amt                   NUMBER;
        v_disc_amt                  NUMBER;
        v_rein_amt                  NUMBER;
        v_excess_amt                NUMBER;
        v_control_acc               VARCHAR2 (30);
        v_client_type               VARCHAR2 (5);
        v_act_code                  NUMBER;
        v_agnt_sht_desc             VARCHAR2 (25);
        v_salv_amt                  NUMBER;
        v_per_code                  NUMBER;
        v_charge_servp_wthtax       VARCHAR2 (1);
        v_auto_auth                 VARCHAR2 (1);
        v_eft_enabled               VARCHAR2 (1);
        v_bnk_account               VARCHAR2 (30);
        v_bnk_bbr_code              VARCHAR2 (30);
        v_auth_param                VARCHAR2 (1);
        v_sms_tel                   VARCHAR2 (30);
        v_ref_no                    VARCHAR2 (30);
        v_mpt_code                  NUMBER;
        v_exciseduty_amt            NUMBER;
        v_ccop_amount_bcur          NUMBER;
        v_coin_amount               NUMBER;
        v_ccop_amount               NUMBER;
        v_coin_client_type          VARCHAR2 (5);
        --variable added by kim kahunja to reference tqc_bank_branches pk to be passed on cheque requisition
        v_bnk_bbr_pk                NUMBER;
        v_trt_lvl                   VARCHAR2 (1) := 'P';
        v_facre_gl_acc_no           VARCHAR2 (30);
        v_frgn_or_local             VARCHAR2 (30);
        v_clmfee_garage_param       VARCHAR2 (1) := 'N';
        v_spr_cnt                   NUMBER;
        v_trt_rcry_gl_param         VARCHAR2 (1);
        v_vattowithhold_app_param   VARCHAR2 (1) := 'N';
        v_vattowithhold_amnt        NUMBER;
        v_authorized                VARCHAR2 (1);
        v_amt_to_cede               NUMBER;

        CURSOR c_treaties IS
              SELECT SUM (
                         DECODE (
                             trs_trtg_code,
                             1001, DECODE (
                                       NVL (v_trt_lvl, 'T'),
                                       'T', NULL,
                                       ROUND (
                                             trpa_comp_rate
                                           / 100
                                           * NVL (ctrtr_trt_amt_pcur, 0))),
                             0))                                 trt_man_amt,
                     SUM (
                         DECODE (
                             trs_trtg_code,
                             1003, DECODE (
                                       NVL (v_trt_lvl, 'T'),
                                       'T', NULL,
                                       ROUND (
                                             trpa_comp_rate
                                           / 100
                                           * NVL (ctrtr_trt_amt_pcur, 0))),
                             0))                                 trt_qs_amt,
                     SUM (
                         DECODE (
                             trs_trtg_code,
                             10041, DECODE (
                                        NVL (v_trt_lvl, 'T'),
                                        'T', NULL,
                                        ROUND (
                                              trpa_comp_rate
                                            / 100
                                            * NVL (ctrtr_trt_amt_pcur, 0))),
                             0))                                 trt_fst_amt,
                     SUM (
                         DECODE (
                             trs_trtg_code,
                             10042, DECODE (
                                        NVL (v_trt_lvl, 'T'),
                                        'T', NULL,
                                        ROUND (
                                              trpa_comp_rate
                                            / 100
                                            * NVL (ctrtr_trt_amt_pcur, 0))),
                             0))                                 trt_sec_amt,
                     DECODE (
                         NVL (v_trt_lvl, 'T'),
                         'T', NULL,
                         NVL (
                             trpa_gl_rcvbl_account,
                             DECODE (NVL (v_trt_rcry_gl_param, 'N'),
                                     'N', trpa_gl_account,
                                     NULL)))                     trpa_gl_account,
                     DECODE (NVL (v_trt_lvl, 'T'),
                             'T', NULL,
                             agn_sht_desc || '-' || agn_name)    account_name,
                     rei_local_forgn
                FROM gin_clm_treaty_recoveries,
                     gin_treaty_setups,
                     gin_treaty_participants,
                     gin_treaties,
                     tqc_agencies
               WHERE     ctrtr_rei_code = rei_code
                     AND trpa_rei_code = rei_code
                     AND ctrtr_trs_code = trs_code
                     AND trpa_agnt_agent_code = agn_code
                     AND ctrtr_ggt_trans_no = v_trans_no
            GROUP BY DECODE (
                         NVL (v_trt_lvl, 'T'),
                         'T', NULL,
                         NVL (
                             trpa_gl_rcvbl_account,
                             DECODE (NVL (v_trt_rcry_gl_param, 'N'),
                                     'N', trpa_gl_account,
                                     NULL))),
                     DECODE (NVL (v_trt_lvl, 'T'),
                             'T', NULL,
                             agn_sht_desc || '-' || agn_name),
                     rei_local_forgn;

        CURSOR c_facre IS
              SELECT SUM (
                         DECODE (cfrr_pol_cur_code,
                                 cfrr_trt_cur_code, NVL (cfrr_amount, 0),
                                 NVL (cfrr_amount_bcur, 0)))    cfrr_amount,
                     DECODE (NVL (v_trt_rcry_gl_param, 'N'),
                             'N', agn_acc_no,
                             agn_gl_rcvbl_acc_no)               agn_acc_no,
                     agn_sht_desc,
                     agn_name
                FROM gin_clm_facre_recoveries, tqc_agencies
               WHERE     cfrr_cmb_claim_no = v_clmrg_claim_no
                     AND cfrr_ggt_trans_no = v_trans_no
                     AND cfrc_agnt_agent_code = agn_code
            GROUP BY DECODE (NVL (v_trt_rcry_gl_param, 'N'),
                             'N', agn_acc_no,
                             agn_gl_rcvbl_acc_no),
                     agn_sht_desc,
                     agn_name;
    --    CURSOR cur_xol_amnts (v_trn_no in number)
    --      IS
    --        SELECT   NVL (cxtd_amt_to_cede, 0) gross_amt,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_agent_code,
    --                          'B', xolp_br_agn_code
    --                         ) xolp_agnt_agent_code,
    --                  agn_name,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_sht_desc,
    --                          'B', xolp_br_agn_sht_desc
    --                         ) xolp_agnt_sht_desc,
    --                  xolp_rate, xolp_gl_account, cxtd_scl_code, xols_cur_code,
    --                  xol_code,
    ----                  ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)
    ----                        )
    --                 ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) part_amount,
    --                  cxtd_clm_no
    --             FROM gin_claim_xol_treaty_details,
    --                  gin_xol_treaty_setups,
    --                  gin_xol_participants,
    --                  gin_xol_treaties,
    --                  tqc_agencies
    --            WHERE cxtd_xols_code = xols_code
    --              AND xolp_agnt_agent_code = agn_code
    --              AND cxtd_xol_code = xol_code
    --              AND xolp_xols_code = xols_code
    --              AND xols_xol_code = xol_code
    --              AND cxtd_ggt_trans_no = v_trn_no
    --              AND cxtd_authorized = 'P'
    --              AND cxtd_ggt_trans_no IN (SELECT ggt_trans_no
    --                                          FROM gin_gis_transactions)
    --              AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) <> 0
    --             -- AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)) <> 0
    --         GROUP BY cxtd_clm_no,
    --                  NVL (cxtd_amt_to_cede, 0),
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_agent_code,
    --                          'B', xolp_br_agn_code
    --                         ),
    --                  agn_name,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_sht_desc,
    --                          'B', xolp_br_agn_sht_desc
    --                         ),
    --                  xolp_rate,
    --                  xolp_gl_account,
    --                  cxtd_scl_code,
    --                  xols_cur_code,
    --                  xol_code,
    --                  --ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0))
    --                  ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0))
    --
    --                  ;

    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'AUTO_AUTH_CLM_PYMTS')
              INTO v_auth_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_auth_param := 'Y';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching AUTO_AUTH_CLM_PYMTS parameter...');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar (
                       'SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL')
              INTO v_trt_rcry_gl_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_trt_rcry_gl_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error fetching SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL parameter...');
        END;

        BEGIN
            SELECT gin_parameters_pkg.get_param_varchar ('CLMFEE_GARAGE_VAT')
              INTO v_clmfee_garage_param
              FROM DUAL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_clmfee_garage_param := 'N';
            WHEN OTHERS
            THEN
                raise_error ('Error fetching CLMFEE_GARAGE_VAT parameter...');
        END;

        BEGIN
            SELECT param_value
              INTO v_vattowithhold_app_param
              FROM gin_parameters
             WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_vattowithhold_app_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error getting VATTOWITHHOLD_APPLICABLE parameters..');
        END;

        IF NVL (v_pay_method, 'CHQ') = 'JE'
        THEN
            v_auto_auth := 'N';
        ELSE
            IF NVL (v_auth_param, 'N') = 'Y'
            THEN
                v_auto_auth := 'Y';
            ELSE
                v_auto_auth := 'N';
            END IF;
        END IF;

        v_rec_count := 0;

        --RAISE_ERROR('v_clmrg_claim_no'||v_clmrg_claim_no||'v_trans_no'||v_trans_no);
        FOR i IN c_claim
        LOOP
            v_exch_rate :=
                get_currexch_rate (i.cpv_vchr_cur_code, v_rnd, v_bcur_rnd);


            IF NVL (i.cmb_coin_pay_type, 'O') = 'O'
            THEN
                IF i.cpv_cur_code = i.cpv_vchr_cur_code
                THEN
                    v_payment_amt := i.cpv_amount;
                    v_net_amt := i.cpv_net_paid;
                    v_vat_amt := i.cpv_vat_amnt;
                    v_whtx_amt := i.cpv_whtx_amnt;
                    v_disc_amt := i.cpv_disc_amt;
                    v_rein_amt := i.cpv_rein_amount;
                    v_excess_amt := i.cpv_excess_amount;
                    v_salv_amt := i.cpv_ret_salvage;
                    v_exciseduty_amt := i.cpv_exciseduty_amnt;
                    v_vattowithhold_amnt := i.cpv_vattowithhold_amnt;
                    v_cur_code := i.cpv_vchr_cur_code;
                --               IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
                --               THEN
                --
                --                  v_tot_amt :=
                --                     ROUND (  NVL (v_vat_amt, 0)
                --                            + NVL (v_whtx_amt, 0)
                --                            + NVL (v_exciseduty_amt, 0)
                --                            + NVL (v_salv_amt, 0)
                --                            + NVL (v_excess_amt, 0)
                --                            + NVL (v_net_amt, 0),
                --                            0
                --                           );
                --               ELSE
                --                --RAISE_ERROR('v_net_amt'||v_payment_amt||'v_tot_amt'||v_tot_amt);
                --                  v_tot_amt :=
                --                     ROUND (  NVL (v_net_amt, 0)
                --                            + NVL (v_whtx_amt, 0)
                --                            + NVL (v_exciseduty_amt, 0)
                --                            + NVL (v_salv_amt, 0)
                --                            + NVL (v_excess_amt, 0)
                --                            + NVL (v_vattowithhold_amnt, 0),
                --                            0
                --                           );
                --
                --               END IF;
                ELSE
                    v_payment_amt := i.cpv_amount_bcur;
                    v_net_amt := i.cpv_bcur_net_paid;
                    v_vat_amt := i.cpv_bcur_vat_amnt;
                    v_whtx_amt := i.cpv_bcur_whtx_amnt;
                    v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
                    v_vattowithhold_amnt := i.cpv_bcur_vattowithhold_amnt;
                    v_cur_code := i.cpv_vchr_cur_code;
                    v_salv_amt := i.cpv_ret_salvage_bcur;
                    v_excess_amt := i.cpv_excess_amount_bcur;
                    --               v_tot_amt :=
                    --                  ROUND (  NVL (v_vat_amt, 0)
                    --                         + NVL (v_whtx_amt, 0)
                    --                         + NVL (v_salv_amt, 0)
                    --                         + NVL (v_excess_amt, 0)
                    --                         --- NVL (v_vattowithhold_amnt, 0)
                    --                         + NVL (v_net_amt, 0),
                    --                         0
                    --                        );

                    v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
                    v_rein_amt := i.cpv_rein_amount_bcur;
                END IF;
            ELSIF NVL (i.cmb_coin_pay_type, 'O') = 'F'
            THEN
                  SELECT SUM (NVL (ccop_amount, 0)),
                         SUM (NVL (ccop_amount_bcur, 0)),
                         act_type_sht_desc
                    INTO v_ccop_amount, v_ccop_amount_bcur, v_coin_client_type
                    FROM gin_clm_coin_payments, tqc_agencies, tqc_account_types
                   WHERE     agn_code = ccop_agnt_agent_code
                         AND agn_act_code = act_code
                         AND ccop_cpv_voucher_no = i.cpv_voucher_no
                GROUP BY act_type_sht_desc;

                IF i.cpv_cur_code = i.cpv_vchr_cur_code
                THEN
                    v_payment_amt := i.cpv_amount;
                    v_net_amt := i.cpv_coin_tot_net_paid;
                    v_vat_amt := i.cpv_coin_tot_vat_amnt;
                    v_whtx_amt := i.cpv_coin_tot_whtx_amnt;
                    v_disc_amt := i.cpv_disc_amt;
                    v_rein_amt := i.cpv_rein_amount;
                    v_excess_amt := i.cpv_excess_amount;
                    v_salv_amt := i.cpv_ret_salvage;
                    v_exciseduty_amt := i.cpv_coin_tot_exciseduty_amnt;
                    v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
                    v_cur_code := i.cpv_vchr_cur_code;
                    v_coin_amount := NVL (v_ccop_amount, 0);
                --               v_tot_amt :=
                --                  ROUND (  NVL (v_vat_amt, 0)
                --                         + NVL (v_whtx_amt, 0)
                --                         + NVL (v_salv_amt, 0)
                --                         + NVL (v_excess_amt, 0)
                --                         --- NVL (v_vattowithhold_amnt, 0)
                --                         + NVL (v_exciseduty_amt, 0)
                --                         + NVL (v_net_amt, 0)
                --                         - NVL (v_coin_amount, 0),
                --                         0
                --                        );
                ELSE
                    v_payment_amt := i.cpv_amount_bcur;
                    v_net_amt := i.cpv_bcur_net_paid;
                    v_vat_amt := i.cpv_bcur_vat_amnt;
                    v_whtx_amt := i.cpv_bcur_whtx_amnt;
                    v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
                    v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
                    v_cur_code := i.cpv_vchr_cur_code;
                    v_coin_amount := v_ccop_amount_bcur;
                    v_salv_amt := i.cpv_ret_salvage_bcur;
                    v_excess_amt := i.cpv_excess_amount_bcur;
                    --               v_tot_amt :=
                    --                  ROUND (  NVL (v_vat_amt, 0)
                    --                         + NVL (v_whtx_amt, 0)
                    --                         + NVL (v_salv_amt, 0)
                    --                         --- NVL (v_vattowithhold_amnt, 0)
                    --                         + NVL (v_exciseduty_amt, 0)
                    --                         + NVL (v_excess_amt, 0)
                    --                         + NVL (v_net_amt, 0)
                    --                         - NVL (v_coin_amount, 0),
                    --                         0
                    --                        );
                    v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
                    v_rein_amt := i.cpv_rein_amount_bcur;
                END IF;
            END IF;

            DBMS_OUTPUT.PUT_LINE (
                'v_vattowithhold_app_param=' || v_vattowithhold_app_param);
            DBMS_OUTPUT.PUT_LINE ('v_vat_amt=' || v_vat_amt);
            DBMS_OUTPUT.PUT_LINE ('v_whtx_amt=' || v_whtx_amt);
            DBMS_OUTPUT.PUT_LINE ('v_exciseduty_amt=' || v_exciseduty_amt);
            DBMS_OUTPUT.PUT_LINE ('v_salv_amt=' || v_salv_amt);
            DBMS_OUTPUT.PUT_LINE ('v_excess_amt=' || v_excess_amt);
            DBMS_OUTPUT.PUT_LINE ('v_net_amt=' || v_net_amt);

            IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
            THEN
                v_tot_amt :=
                    ROUND (
                          NVL (v_vat_amt, 0)
                        + NVL (v_whtx_amt, 0)
                        + NVL (v_exciseduty_amt, 0)
                        + NVL (v_salv_amt, 0)
                        + NVL (v_excess_amt, 0)
                        + NVL (v_net_amt, 0),
                        0);
            ELSE
                --RAISE_ERROR('v_net_amt'||v_payment_amt||'v_tot_amt'||v_tot_amt);
                v_tot_amt :=
                    ROUND (
                          NVL (v_net_amt, 0)
                        + NVL (v_whtx_amt, 0)
                        + NVL (v_exciseduty_amt, 0)
                        + NVL (v_salv_amt, 0)
                        + NVL (v_excess_amt, 0)
                        + NVL (v_vattowithhold_amnt, 0),
                        0);
            END IF;

            DBMS_OUTPUT.PUT_LINE ('v_tot_amt=' || v_tot_amt);
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
            v_paymnt_brh_code := i.cmb_brn_code;
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            fms_interfaces_pkg.trans_bct ('CLM',
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);

            IF     NVL (v_clmfee_garage_param, 'N') = 'Y'
               AND NVL (i.cpv_tran_type, 'CP') = 'CF'
            THEN
                BEGIN
                    SELECT COUNT (*)
                      INTO v_spr_cnt
                      FROM tqc_service_provider_reg
                     WHERE sreg_spr_code = i.cpv_apco_cor_code;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_spr_cnt := 0;
                    WHEN OTHERS
                    THEN
                        v_spr_cnt := 0;
                END;


                IF NVL (v_spr_cnt, 0) > 0
                THEN
                    v_tot_amt := NVL (v_tot_amt, 0) - NVL (v_vat_amt, 0);
                    v_net_amt := NVL (v_net_amt, 0) + NVL (v_vat_amt, 0);
                END IF;
            END IF;

            IF ROUND (NVL (v_payment_amt, 0), 0) != v_tot_amt
            THEN
                raise_application_error (
                    -20001,
                       'THE NET CHEQUE AMOUNT '
                    || NVL (v_net_amt, 0)
                    || ' PLUS VAT '
                    || NVL (v_vat_amt, 0)
                    || ' AND WHTTAX '
                    || NVL (v_whtx_amt, 0)
                    || ' PLUS EXCISE DUTY '
                    || NVL (v_exciseduty_amt, 0)
                    || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                    || v_payment_amt
                    || 'v_tot_amt'
                    || v_tot_amt);
            END IF;

            --          raise_application_error
            --                            (-20001,
            --                                'THE NET CHEQUE AMOUNT '
            --                             || NVL (v_net_amt, 0)
            --                             || ' PLUS VAT '
            --                             || NVL (v_vat_amt, 0)
            --                             || ' AND WHTTAX '
            --                             || NVL (v_whtx_amt, 0)
            --                             || ' PLUS EXCISE DUTY '
            --                             || NVL (v_exciseduty_amt, 0)
            --                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
            --                             || v_payment_amt
            --                             || 'v_tot_amt'
            --                             || v_tot_amt
            --                            );

            --         IF  NVL(v_vattowithhold_app_param,'N')='Y'   THEN
            --           v_payment_amt:=NVL(v_payment_amt,0)-NVL(v_vat_amt,0)+NVL(v_vattowithhold_amnt,0);
            --         END IF;
            IF i.cpv_tran_type = 'CF'
            THEN
                rev_type := 'CF';

                BEGIN
                    IF NVL (v_disc_amt, 0) > 0
                    THEN
                        SELECT voud_per_code
                          INTO v_per_code
                          FROM gin_voucher_details
                         WHERE voud_cpv_voucher_no = i.cpv_voucher_no;

                        gin_stp_claims_pkg.create_srv_prvdr_reserve (
                            v_clmrg_claim_no,
                            v_per_code,
                            -v_disc_amt,
                            NULL,
                            v_user_name,
                            i.cpv_apco_cor_code,
                            NULL,
                            'A',
                            NULL,
                            NULL,
                            NULL);
                    END IF;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error creating Discount Revision '
                            || SQLERRM (SQLCODE));
                END;
            ELSE
                rev_type := 'CP';
            END IF;

            IF NVL (v_payment_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code (rev_type, --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);

                --                   RAISE_ERROR(v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code);

                IF v_pay_method IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        v_eft_enabled := 'N';

                        /*NOTES
                        1. SERVICE PROVIDES
                        2. CLIENTS
                        3. CLAIMANTS
                        4. BUSINESS PERSONS
                        5. ACCOUNTS*/
                        --raise_error('i.cpv_claimant_type '||i.cpv_claimant_type || ' rev_type '||rev_type);
                        IF rev_type = 'CP'
                        THEN
                            --raise_error('cpv_claimant_type='||i.cpv_claimant_type);
                            IF NVL (i.cpv_claimant_type, 'S') = 'O'
                            THEN
                                v_eft_enabled :=
                                    account_enabled (
                                        bnk_bbr_code (i.cpv_cbp_code, 4));
                                v_bnk_account :=
                                    bnk_account (i.cpv_cbp_code, 4);
                                v_bnk_bbr_code :=
                                    tqc_interfaces_pkg.bank_ref (
                                        bnk_bbr_code (i.cpv_cbp_code, 4));
                                v_bnk_bbr_pk :=
                                    bnk_bbr_code (i.cpv_cbp_code, 4);

                                -- raise_error('acc....'||bnk_bbr_code (i.cpv_cbp_code, 4)||' i.cpv_cbp_code '||i.cpv_cbp_code);
                                BEGIN
                                    IF v_eft_enabled = 'N'
                                    THEN
                                        IF bnk_bbr_code (i.cpv_reg_cld_code,
                                                         3)
                                               IS NOT NULL
                                        THEN
                                            v_eft_enabled :=
                                                account_enabled (
                                                    bnk_bbr_code (
                                                        i.cpv_reg_cld_code,
                                                        3));
                                            v_bnk_account :=
                                                bnk_account (
                                                    i.cpv_reg_cld_code,
                                                    3);
                                            v_bnk_bbr_code :=
                                                tqc_interfaces_pkg.bank_ref (
                                                    bnk_bbr_code (
                                                        i.cpv_reg_cld_code,
                                                        3));
                                            v_bnk_bbr_pk :=
                                                bnk_bbr_code (
                                                    i.cpv_reg_cld_code,
                                                    3);
                                        END IF;
                                    END IF;
                                EXCEPTION
                                    WHEN NO_DATA_FOUND
                                    THEN
                                        v_eft_enabled := 'N';
                                END;

                                IF v_eft_enabled = 'N'
                                THEN
                                    IF bnk_bbr_code (i.cpv_cbp_code, 1)
                                           IS NOT NULL
                                    THEN
                                        v_eft_enabled :=
                                            account_enabled (
                                                bnk_bbr_code (i.cpv_cbp_code,
                                                              1));
                                        v_bnk_account :=
                                            bnk_account (i.cpv_cbp_code, 1);
                                        v_bnk_bbr_code :=
                                            tqc_interfaces_pkg.bank_ref (
                                                bnk_bbr_code (i.cpv_cbp_code,
                                                              1));
                                        v_bnk_bbr_pk :=
                                            bnk_bbr_code (i.cpv_cbp_code, 1);
                                    END IF;
                                END IF;
                            ELSIF NVL (i.cpv_claimant_type, 'S') = 'T'
                            THEN
                                IF bnk_bbr_code (i.cpv_reg_cld_code, 3)
                                       IS NOT NULL
                                THEN
                                    --                            RAISE_ERROR('BANK BRANCH CODE..'||bnk_bbr_code (i.cpv_apco_cor_code, 1));
                                    v_eft_enabled :=
                                        account_enabled (
                                            bnk_bbr_code (i.cpv_reg_cld_code,
                                                          3));
                                    v_bnk_account :=
                                        bnk_account (i.cpv_reg_cld_code, 3);
                                    v_bnk_bbr_code :=
                                        bnk_bbr_code (i.cpv_reg_cld_code, 3);
                                    v_bnk_bbr_pk :=
                                        bnk_bbr_code (i.cpv_reg_cld_code, 3);
                                END IF;
                            ELSIF NVL (i.cpv_claimant_type, 'S') = 'S'
                            THEN
                                IF i.cpv_apco_cor_code IS NOT NULL
                                THEN
                                    IF bnk_bbr_code (i.cpv_apco_cor_code, 1)
                                           IS NOT NULL
                                    THEN
                                        v_eft_enabled :=
                                            account_enabled (
                                                bnk_bbr_code (
                                                    i.cpv_apco_cor_code,
                                                    1));
                                        v_bnk_account :=
                                            bnk_account (i.cpv_apco_cor_code,
                                                         1);
                                        v_bnk_bbr_code :=
                                            tqc_interfaces_pkg.bank_ref (
                                                bnk_bbr_code (
                                                    i.cpv_apco_cor_code,
                                                    1));
                                        v_bnk_bbr_pk :=
                                            bnk_bbr_code (
                                                i.cpv_apco_cor_code,
                                                1);
                                    END IF;
                                END IF;

                                --RAISE_ERROR('i.cpv_apco_cor_code'||bnk_bbr_code (i.cpv_reg_cld_code, 2) );
                                IF bnk_bbr_code (i.cpv_reg_cld_code, 2)
                                       IS NOT NULL
                                THEN
                                    v_eft_enabled :=
                                        account_enabled (
                                            bnk_bbr_code (i.cpv_reg_cld_code,
                                                          2));
                                    v_bnk_account :=
                                        bnk_account (i.cpv_reg_cld_code, 2);
                                    v_bnk_bbr_code :=
                                        tqc_interfaces_pkg.bank_ref (
                                            bnk_bbr_code (i.cpv_reg_cld_code,
                                                          2));
                                    v_bnk_bbr_pk :=
                                        bnk_bbr_code (i.cpv_reg_cld_code, 2);
                                END IF;
                            ELSE
                                --  RAISE_ERROR('i.cpv_apco_cor_code'||i.cpv_reg_cld_code);
                                IF bnk_bbr_code (i.cpv_reg_cld_code, 2)
                                       IS NOT NULL
                                THEN
                                    v_eft_enabled :=
                                        account_enabled (
                                            bnk_bbr_code (i.cpv_reg_cld_code,
                                                          2));
                                    v_bnk_account :=
                                        bnk_account (i.cpv_reg_cld_code, 2);
                                    v_bnk_bbr_code :=
                                        --   tqc_interfaces_pkg.bank_ref
                                        --    (
                                         bnk_bbr_code (i.cpv_reg_cld_code, 2)--    )
                                                                             ;
                                    --RAISE_ERROR('CHECKING CLAIM PAYMENT='|| v_bnk_bbr_code );
                                    v_bnk_bbr_pk :=
                                        bnk_bbr_code (i.cpv_reg_cld_code, 2);
                                END IF;
                            END IF;
                        ELSE
                            IF bnk_bbr_code (i.cpv_apco_cor_code, 1)
                                   IS NOT NULL
                            THEN
                                v_eft_enabled :=
                                    account_enabled (
                                        bnk_bbr_code (i.cpv_apco_cor_code, 1));
                                v_bnk_account :=
                                    bnk_account (i.cpv_apco_cor_code, 1);
                                v_bnk_bbr_code :=
                                    tqc_interfaces_pkg.bank_ref (
                                        bnk_bbr_code (i.cpv_apco_cor_code, 1));
                                v_bnk_bbr_pk :=
                                    bnk_bbr_code (i.cpv_apco_cor_code, 1);

                                IF v_eft_enabled = 'N'
                                THEN
                                    IF bnk_bbr_code (i.cpv_agnt_agent_code,
                                                     5)
                                           IS NOT NULL
                                    THEN
                                        v_eft_enabled :=
                                            account_enabled (
                                                bnk_bbr_code (
                                                    i.cpv_agnt_agent_code,
                                                    5));
                                        v_bnk_account :=
                                            bnk_account (
                                                i.cpv_agnt_agent_code,
                                                5);
                                        v_bnk_bbr_code :=
                                            tqc_interfaces_pkg.bank_ref (
                                                bnk_bbr_code (
                                                    i.cpv_agnt_agent_code,
                                                    5));
                                        v_bnk_bbr_pk :=
                                            bnk_bbr_code (
                                                i.cpv_agnt_agent_code,
                                                5);
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR GETTING BANK ACC INFO... ');
                    END;

                    --raise_error('v_eft_enabled++'||v_eft_enabled||'v_bnk_bbr_code+++'||v_bnk_bbr_code||'v_bnk_account+++'||v_bnk_account);
                    --raise_error('v_eft_enabled++'||v_eft_enabled||'v_bnk_bbr_code+++'||v_bnk_bbr_code||'v_bnk_account+++'||v_bnk_account||' i.cpv_payee++'|| i.cpv_payee);
                    IF v_eft_enabled = 'N'
                    THEN
                        raise_application_error (
                            -20001,
                               'BANK BRANCH NOT ENABLED TO TRANSACT '
                            || v_pay_method
                            || '  ADAS  '
                            || i.cpv_claimant_type
                            || ' PAYMENTS'
                            || i.cpv_reg_cld_code
                            || ' ; '
                            || rev_type
                            || ' ; '
                            || i.cpv_agnt_agent_code);
                    END IF;
                END IF;

                v_rec_count := v_rec_count + 1;

                --raise_Error('v_payment_amt='||v_payment_amt);
                IF v_pay_method IN ('EFT', 'RTGS')
                THEN
                    fms_cheques_pkg.append_eft_payees (
                        v_rec_count,      --v_no                       NUMBER,
                        i.cpv_voucher_no, --v_ref1                   VARCHAR2,
                        ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                        --ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
                        i.cpv_payee,    --v_narrative                VARCHAR2,
                        v_bnk_bbr_code,
                        --v_ref_code,--v_bbr_ref_code             VARCHAR2,
                        v_bnk_account,  --v_bnk_account              VARCHAR2,
                        i.cpv_cmb_claim_no, --v_ref2                   VARCHAR2,
                        v_payee_eft_dtls);
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (v_payment_amt, v_rnd),
                        'CLAIM PAYMENT GROSS AMT ' || v_pay_method,
                        --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        i.cmb_brn_code,
                        ---commented by Solo v_paymnt_brh_code
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                ELSIF v_pay_method IN ('MOB')
                --Added by Masinde to take care of mobile payments 30052015
                THEN
                    IF i.cpv_tran_type = 'CP'
                    THEN
                        --RAISE_ERROR(i.cpv_reg_clmt_code);
                        BEGIN
                            SELECT MOBILENO, cld_id_no
                              INTO v_sms_tel, v_ref_no
                              FROM (SELECT NVL (cld_mobile_no,
                                                cld_mobile_phone)
                                               MOBILENO,
                                           cld_id_no
                                      FROM gin_rgstd_claimants, gin_claimants
                                     WHERE     cld_code = reg_cld_code
                                           AND reg_cmb_claim_no =
                                               v_clmrg_claim_no
                                           AND REG_THIRD_PARTY = 'T'
                                           AND reg_clmt_code =
                                               i.cpv_reg_clmt_code
                                    UNION
                                    SELECT NVL (CLNT_TEL, CLNT_SMS_TEL)
                                               MOBILENO,
                                           CLNT_ID_REG_NO
                                               cld_id_no
                                      FROM gin_rgstd_claimants, tqc_clients
                                     WHERE     CLNT_CODE = reg_cld_code
                                           AND reg_cmb_claim_no =
                                               v_clmrg_claim_no
                                           AND REG_THIRD_PARTY = 'S'
                                           AND reg_clmt_code =
                                               i.cpv_reg_clmt_code);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                       'Error getting Claimants Mobile Payment details'
                                    || i.cpv_reg_clmt_code);
                        END;
                    ELSE
                        BEGIN
                            SELECT NVL (spr_sms_number, spr_mobile_no),
                                   NVL (spr_pin_number, spr_pin)
                              INTO v_sms_tel, v_ref_no
                              FROM tqc_service_providers
                             WHERE spr_code = i.cpv_apco_cor_code;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                       'Error getting service providers Mobile Payment details'
                                    || i.cpv_apco_cor_code);
                        END;
                    END IF;

                    IF v_sms_tel IS NOT NULL
                    THEN
                        SELECT mpt_code
                          INTO v_mpt_code
                          FROM tqc_mob_pymnt_types_prefixes,
                               tqc_mobile_pymnt_types
                         WHERE     mptp_mpt_code = mpt_code
                               AND mptp_mob_no_prefix =
                                   '0' || SUBSTR (v_sms_tel, 5, 3);
                    ELSE
                        raise_application_error (
                            -20001,
                            'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..');
                    END IF;

                    BEGIN
                        v_payee_mft_dtls (1) :=
                            fms_cheques_pkg.append_mft_payees (
                                v_rec_count,
                                i.cpv_voucher_no,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                                ---v_amount,
                                i.cpv_payee,                    --v_narrative,
                                v_sms_tel,
                                --v_credit_id                                                                                 ,
                                'Mobile Phone Number',      --v_credit_id_type
                                v_ref_no,                    --v_validation_id
                                'REFERENCE NO'          --v_validation_id_type
                                              );
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (v_payment_amt, v_rnd),
                            'CLAIM',                              --narrative,
                            v_trnt_gl_code,
                            -- crt_acc_number
                            v_org_code,
                            --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    --fms_chq_mftfile_dtls
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
                                || i.cpv_voucher_no);
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
                                || i.cpv_voucher_no);
                    END;
                ELSE
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (v_payment_amt, v_rnd),
                        'CLAIM PAYMENT GROSS AMT',                --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code, --i.cmb_brn_code,          --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;
            END IF;

            --******************************SALVAGE *******************************
            IF NVL (v_salv_amt, 0) != 0
            THEN
                /*gin_interfaces_pkg.get_gl_acct_code
                         ('CS',                         --v_trnt_type IN VARCHAR2,
                          i.cmb_scl_code,                  --v_scl_code IN NUMBER,
                          'U',                       --     v_app_lvl IN VARCHAR2,
                          NULL,          --          v_btr_trans_code IN VARCHAR2,
                          NULL,
                          --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                          v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
                          v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                          v_trnt_contra_gl_code
                         --          v_trnt_contra_gl_code OUT VARCHAR2
                         );*/
                v_trnt_gl_code :=
                    fms_interfaces_pkg.sl_control_acc ('GIS', 'SV');
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (v_rec_count,
                                                  ROUND (v_salv_amt, v_rnd),
                                                  'CLAIM',        --narrative,
                                                  v_trnt_gl_code,
                                                  -- crt_acc_number
                                                  v_org_code, --crt_acc_org_code ,
                                                  v_paymnt_brh_code,
                                                  --i.cmb_brn_code,          --v_brh_code,
                                                  'C',              --v_dr_cr,
                                                  v_chq_dtls);
            END IF;

            --************************EXCESS************************
            IF NVL (v_excess_amt, 0) != 0
            THEN
                /*gin_interfaces_pkg.get_gl_acct_code
                         ('CRE',                        --v_trnt_type IN VARCHAR2,
                          i.cmb_scl_code,                  --v_scl_code IN NUMBER,
                          'U',                       --     v_app_lvl IN VARCHAR2,
                          NULL,          --          v_btr_trans_code IN VARCHAR2,
                          NULL,
                          --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                          v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
                          v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                          v_trnt_contra_gl_code
                         --          v_trnt_contra_gl_code OUT VARCHAR2
                         );*/

                v_trnt_gl_code :=
                    fms_interfaces_pkg.sl_control_acc ('GIS', 'XS');
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_excess_amt, 0), v_rnd),
                    'CLAIM EXCESS',                               --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,
                    --i.cmb_brn_code,          --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            --************************REINSURANCE************************
            IF NVL (v_rein_amt, 0) > 0
            THEN
                IF NVL (i.cpv_rein_amount, 0) != 0
                THEN
                    IF NVL (i.cpv_account_type, 'D') = 'D'
                    THEN
                        v_client_type := 'D';
                    ELSE
                        BEGIN
                            SELECT agn_act_code, agn_sht_desc
                              INTO v_act_code, v_agnt_sht_desc
                              FROM tqc_agencies
                             WHERE agn_code = i.cpv_agnt_agent_code;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                raise_application_error (
                                    -20021,
                                       'AGENT - '
                                    || v_client_type
                                    || ' NOT FOUND ');
                            WHEN OTHERS
                            THEN
                                raise_application_error (
                                    -20022,
                                    'AGENT INFO ' || SQLERRM (SQLCODE));
                        END;

                        IF v_act_code IN (2,
                                          9,
                                          10,
                                          16)
                        THEN
                            v_client_type := 'A';
                        ELSIF v_act_code = 3
                        THEN
                            v_client_type := 'B';
                        ELSIF v_act_code = 4
                        THEN
                            v_client_type := 'FI';
                        ELSIF v_act_code = 5
                        THEN
                            v_client_type := 'I';
                        ELSIF v_act_code = 6
                        THEN
                            v_client_type := 'R';
                        ELSIF v_act_code = 7
                        THEN
                            v_client_type := 'FO';
                        ELSE
                            raise_application_error (
                                -20001,
                                   'UNDEFINED ACCOUNT TYPE - '
                                || v_act_code
                                || ' -FOR AGENT '
                                || v_agnt_sht_desc
                                || 'i.CPV_ACCOUNT_TYPE '
                                || i.cpv_account_type
                                || 'v_clmrg_claim_no ='
                                || v_clmrg_claim_no);
                        END IF;
                    END IF;

                    IF v_client_type IS NULL
                    THEN
                        raise_application_error (
                            -20023,
                            'CANNOT POST NULL CLIENT TYPE');
                    ELSE
                        v_control_acc :=
                            fms_interfaces_pkg.sl_control_acc ('GIS',
                                                               v_client_type);
                    END IF;

                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,
                        --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,
                        --v_scl_code IN NUMBER,
                        'U',                     --     v_app_lvl IN VARCHAR2,
                        NULL,
                        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,
                        --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code,
                        --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'CP GL CTRL A/C - '
                            || v_control_acc
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || i.cmb_scl_code);
                    END IF;

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'CP GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || i.cmb_scl_code);
                    END IF;

                    v_rec_count := v_rec_count + 1;

                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.cpv_rein_amount, 0), v_bcur_rnd),
                            'GL TRANS' || v_trnt_code,
                            --narrative,
                            v_trnt_gl_code,
                            -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'C',                                    --v_dr_cr,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20026,
                                   'ERROR POSTING GL TRANS FOR '
                                || v_trnt_code
                                || ':- '
                                || SQLERRM (SQLCODE));
                    END;
                END IF;
            END IF;

            --
            --         SELECT  cxtd_authorized,cxtd_amt_to_cede  INTO  v_authorized,v_amt_to_cede
            --             FROM gin_claim_xol_treaty_details,
            --                  gin_xol_treaty_setups,
            --                  gin_xol_participants,
            --                  gin_xol_treaties,
            --                  tqc_agencies
            --            WHERE cxtd_xols_code = xols_code
            --              AND xolp_agnt_agent_code = agn_code
            --              AND cxtd_xol_code = xol_code
            --              AND xolp_xols_code = xols_code
            --              AND xols_xol_code = xol_code
            --              AND cxtd_ggt_trans_no = v_trans_no
            --            --  AND cxtd_authorized = 'Y'
            --              AND cxtd_ggt_trans_no IN (SELECT ggt_trans_no
            --                                          FROM gin_gis_transactions)
            --              --AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) <> 0
            --             -- AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)) <> 0
            --         GROUP BY cxtd_authorized,cxtd_amt_to_cede ;

            --         RAISE_ERROR('v_trans_no='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
            --       FOR c_xol_rec IN cur_xol_amnts(v_trans_no)
            --         LOOP
            --           BEGIN
            ----            RAISE_ERROR('v_trans_no='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
            ----         raise_error('ERROR GETTING CLAIM DETAILS  MMMMM'||v_trans_no);
            --     IF i.cpv_tran_type = 'CP'  THEN
            --               gin_interfaces_pkg.get_gl_acct_code
            --                     ('CP',                     --v_trnt_type IN VARCHAR2,
            --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
            --                      'XOL',                     --     v_app_lvl IN VARCHAR2,
            --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
            --                      NULL,
            --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
            --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
            --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
            --                      v_trnt_contra_gl_code
            --                     --          v_trnt_contra_gl_code OUT VARCHAR2
            --                     );
            --         ELSIF i.cpv_tran_type = 'CF'  THEN
            --           gin_interfaces_pkg.get_gl_acct_code
            --                     ('CF',                     --v_trnt_type IN VARCHAR2,
            --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
            --                      'XOL',                     --     v_app_lvl IN VARCHAR2,
            --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
            --                      NULL,
            --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
            --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
            --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
            --                      v_trnt_contra_gl_code
            --                     --          v_trnt_contra_gl_code OUT VARCHAR2
            --                     );
            --
            --          END IF;

            --               IF c_xol_rec.xolp_gl_account IS NOT NULL
            --               THEN
            --               v_trnt_contra_gl_code := c_xol_rec.xolp_gl_account;
            --               ELSE
            --               raise_error('Error GL account not provided for XOL account transaction No'||v_trans_no);--v_trnt_contra_gl_code := gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, NULL);
            --               END IF;

            --
            --            EXCEPTION
            --               WHEN OTHERS
            --               THEN
            --                  raise_error
            --                     (   'CLAIM PAYMENT XOL AMOUNT REVENUE ITEM FOR SUB CLASS '
            --                      || i.cmb_scl_code
            --                      || ' IS NOT DEFINED..'
            --                     );
            --            END;
            --            --RAISE_ERROR('c_xol_rec.xolp_gl_account'||c_xol_rec.xolp_gl_account);
            --             check_valid_gl_acc (v_trnt_gl_code,
            --                             v_org_code,
            --                             v_paymnt_brh_code,
            --                             v_brh_name,
            --                             v_trnt_code,
            --                             i.cmb_scl_code
            --                            );
            --            check_valid_gl_acc (v_trnt_contra_gl_code,
            --                                v_org_code,
            --                                v_paymnt_brh_code,
            --                                v_brh_name,
            --                                v_trnt_code,
            --                                i.cmb_scl_code
            --                               );
            --         v_rec_count := v_rec_count + 1;
            --         fms_cheques_pkg.append_chq_trans (v_rec_count,
            --                                           ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
            --                                           'CLAIM PAYMENT XOL',
            --                                           --narrative,
            --                                           v_trnt_gl_code,
            --                                           -- crt_acc_number
            --                                           v_org_code,    --crt_acc_org_code ,
            --                                           v_paymnt_brh_code,    --v_brh_code,
            --                                           'C',                     --v_dr_cr,
            --                                           v_chq_dtls,
            --                                           NULL,
            --                                           NULL,
            --                                           i.cmb_unit_code,
            --                                           i.cmb_location_code
            --                                          );
            --             v_rec_count := v_rec_count + 1;
            --            fms_cheques_pkg.append_chq_trans
            --                                       (v_rec_count,
            --                                       ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
            --                                       'CLAIM PAYMENT XOL',                 --narrative,
            --                                        v_trnt_contra_gl_code,
            --                                        -- crt_acc_number
            --                                        v_org_code,       --crt_acc_org_code ,
            --                                        v_paymnt_brh_code,       --v_brh_code,
            --                                        'D',                        --v_dr_cr,
            --                                        v_chq_dtls,
            --                                        NULL,
            --                                        NULL,
            --                                        i.cmb_unit_code,
            --                                        i.cmb_location_code
            --                                       );
            --
            --
            --         END LOOP;


            --************************VAT************************
            IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
            THEN
                IF NVL (v_vat_amt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'WTHVAT',                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        'U',                     --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    --RAISE_eRROR(v_vat_amt||' = '||v_vattowithhold_app_param);
                    v_rec_count := v_rec_count + 1;

                    IF     (   NVL (v_clmfee_garage_param, 'N') = 'Y'
                            OR NVL (v_vattowithhold_app_param, 'N') = 'Y')
                       AND NVL (i.cpv_tran_type, 'CP') = 'CF'
                    THEN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (v_vat_amt, 0), v_rnd),
                            'CLAIM PAYMENT VAT AMT',              --narrative,
                            v_trnt_gl_code,
                            --v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls,
                            NULL,
                            NULL,
                            i.cmb_unit_code,
                            i.cmb_location_code);
                    ELSE
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (v_vat_amt, 0), v_rnd),
                            'CLAIM PAYMENT VAT AMT',              --narrative,
                            v_trnt_gl_code,
                            --v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'C',                                    --v_dr_cr,
                            v_chq_dtls,
                            NULL,
                            NULL,
                            i.cmb_unit_code,
                            i.cmb_location_code);
                    END IF;
                END IF;
            END IF;

            --************************VATTOWTH************************
            --raise_error('v_vattowithhold_amnt='||v_vattowithhold_amnt);
            IF NVL (v_vattowithhold_amnt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('VATTOWTH', --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                --RAISE_eRROR(v_trnt_gl_code||' = '||v_trnt_contra_gl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_vattowithhold_amnt, 0), v_rnd),
                    'CLAIM PAYMENT VATTOWTH AMT',
                    --narrative,
                    v_trnt_gl_code,               ---basv_trnt_contra_gl_code,
                    --v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,
                    --i.cmb_brn_code,          --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls,
                    NULL,
                    NULL,
                    i.cmb_unit_code,
                    i.cmb_location_code);
            END IF;

            --************************WITHHOLDING TAX************************
            IF NVL (v_whtx_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('WTHTPY', --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_whtx_amt, 0), v_rnd),
                    'CLAIM PAYMENT WHTAX AMT',
                    --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls,
                    NULL,
                    NULL,
                    i.cmb_unit_code,
                    i.cmb_location_code);
            END IF;

            --************************EXCISE DUTY************************
            IF NVL (v_exciseduty_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('EXDTPY', --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_exciseduty_amt, 0), v_rnd),
                    'CLAIM',                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            --************************REINSURANCE************************
            FOR c_treaty_rec IN c_treaties
            LOOP
                --             IF NVL(v_trt_lvl,'T') = 'P' AND c_treaty_rec.TRPA_GL_ACCOUNT IS NULL THEN
                --                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||c_treaty_rec.ACCOUNT_NAME);
                --             END IF;
                IF c_treaty_rec.trt_man_amt <> 0
                THEN
                    v_lvl := 'MAN';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            c_treaty_rec.rei_local_forgn,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                        --IF NVL(v_trt_lvl,'T') = 'P' THEN
                        v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

                        IF v_trnt_contra_gl_code IS NULL
                        THEN
                            v_trnt_contra_gl_code :=
                                gin_interfaces_pkg.sl_control_acc ('GIS',
                                                                   'R',
                                                                   v_lvl);
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (c_treaty_rec.trt_man_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (c_treaty_rec.trt_man_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;

                --**************************** Update Quota Revision Amount***************************
                IF c_treaty_rec.trt_qs_amt <> 0
                THEN
                    v_lvl := 'QST';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            c_treaty_rec.rei_local_forgn,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                        --IF NVL(v_trt_lvl,'T') = 'P' THEN
                        v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

                        IF v_trnt_contra_gl_code IS NULL
                        THEN
                            v_trnt_contra_gl_code :=
                                gin_interfaces_pkg.sl_control_acc ('GIS',
                                                                   'R',
                                                                   v_lvl);
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (c_treaty_rec.trt_qs_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (c_treaty_rec.trt_qs_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;

                --**************************** Update FIRST SURPLUS Revision Amount***************************
                IF c_treaty_rec.trt_fst_amt <> 0
                THEN
                    v_lvl := 'FSTSUP';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            c_treaty_rec.rei_local_forgn,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                        -- IF NVL(v_trt_lvl,'T') = 'P' THEN
                        v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

                        IF v_trnt_contra_gl_code IS NULL
                        THEN
                            v_trnt_contra_gl_code :=
                                gin_interfaces_pkg.sl_control_acc ('GIS',
                                                                   'R',
                                                                   v_lvl);
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (c_treaty_rec.trt_fst_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (c_treaty_rec.trt_fst_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;

                --**************************** Update SECOND SURPLUS Revision Amount***************************
                IF c_treaty_rec.trt_sec_amt <> 0
                THEN
                    v_lvl := 'SECSUP';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            c_treaty_rec.rei_local_forgn,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                        -- IF NVL(v_trt_lvl,'T') = 'P' THEN
                        v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

                        IF v_trnt_contra_gl_code IS NULL
                        THEN
                            v_trnt_contra_gl_code :=
                                gin_interfaces_pkg.sl_control_acc ('GIS',
                                                                   'R',
                                                                   v_lvl);
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (c_treaty_rec.trt_sec_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (c_treaty_rec.trt_sec_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;
            END LOOP;

            --**************************** Update Facultative Revision Amount***************************
            FOR f IN c_facre
            LOOP
                --             IF NVL(v_trt_lvl,'T') = 'P' AND f.AGN_ACC_NO IS NULL THEN
                --                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||f.AGN_NAME);
                --             END IF;
                IF f.cfrr_amount <> 0
                THEN
                    v_lvl := 'FO';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                        --IF NVL(v_trt_lvl,'T') = 'P' THEN
                        v_trnt_contra_gl_code := f.agn_acc_no;

                        IF v_trnt_contra_gl_code IS NULL
                        THEN
                            v_trnt_contra_gl_code :=
                                gin_interfaces_pkg.sl_control_acc ('GIS',
                                                                   v_lvl,
                                                                   NULL);
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (f.cfrr_amount, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (f.cfrr_amount, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;
            END LOOP;

            BEGIN
                SELECT SUM (NVL (crpr_amt, 0))
                  INTO v_ripool_amt
                  FROM gin_clm_ri_pool_recoveries
                 WHERE crpr_ggt_tran_no = v_trans_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'System could not retrieve FACRE RI apportionment ');
            END;

            IF v_ripool_amt <> 0                           -- reinsurance pool
            THEN
                v_lvl := 'POOL';

                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others (
                               'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
                            || i.cmb_scl_code
                            || ' IS NOT DEFINED..');
                END;

                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                check_valid_gl_acc (v_trnt_contra_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_ripool_amt, v_rnd)),
                    'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls,
                    NULL,
                    NULL,
                    i.cmb_unit_code,
                    i.cmb_location_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_ripool_amt, v_rnd)),
                    'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                    v_trnt_contra_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls,
                    NULL,
                    NULL,
                    i.cmb_unit_code,
                    i.cmb_location_code);
            END IF;

            IF gin_parameters_pkg.get_param_varchar (
                   'REVISE_GL_ON_CLAIM_PYMT') =
               'Y'
            THEN
                rev_type := 'LRV';

                BEGIN
                      SELECT SUM (
                                 DECODE (trs_trtg_code,
                                         1001, NVL (ctrtr_trt_amt_pcur, 0),
                                         0)),
                             SUM (
                                 DECODE (trs_trtg_code,
                                         1003, NVL (ctrtr_trt_amt_pcur, 0),
                                         0)),
                             SUM (
                                 DECODE (trs_trtg_code,
                                         10041, NVL (ctrtr_trt_amt_pcur, 0),
                                         0)),
                             SUM (
                                 DECODE (trs_trtg_code,
                                         10042, NVL (ctrtr_trt_amt_pcur, 0),
                                         0)),
                             rei_local_forgn
                        INTO v_trt_man_amt,
                             v_trt_qs_amt,
                             v_trt_fst_amt,
                             v_trt_sec_amt,
                             v_frgn_or_local
                        FROM gin_clm_treaty_recoveries,
                             gin_treaties,
                             gin_treaty_setups
                       WHERE     ctrtr_trs_code = trs_code
                             AND ctrtr_cmb_claim_no = v_clmrg_claim_no
                             AND ctrtr_ggt_trans_no = v_trans_no
                             AND rei_code = ctrtr_rei_code
                    GROUP BY rei_local_forgn;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_trt_man_amt := 0;
                        v_trt_qs_amt := 0;
                        v_trt_fst_amt := 0;
                        v_trt_sec_amt := 0;
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'SYSTEM COULD NOT RETRIEVE TREATY RI APPORTIONMENT '
                            || ';'
                            || v_clmrg_claim_no
                            || ';'
                            || v_trans_no);
                END;

                IF NVL (v_payment_amt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        'U',                     --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_payment_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-GROSS', --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_payment_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-GROSS', --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;

                IF v_trt_man_amt <> 0
                THEN
                    v_lvl := 'MAN';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            v_frgn_or_local,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_man_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_man_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;

                --**************************** Update Quota Revision Amount***************************
                --RAISE_ERROR('v_trt_qs_amt='||v_trt_qs_amt);
                IF v_trt_qs_amt <> 0
                THEN
                    v_lvl := 'QST';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            v_frgn_or_local,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    --  Raise_error(v_trnt_gl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_qs_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_qs_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;

                --**************************** Update FIRST SURPLUS Revision Amount***************************
                IF v_trt_fst_amt <> 0
                THEN
                    v_lvl := 'FSTSUP';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            v_frgn_or_local,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    -- v_trnt_contra_gl_code := fms_interfaces_pkg.sl_control_acc('GIS', 'R','FSTSUP') ;
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_fst_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_fst_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;

                --**************************** Update SECOND SURPLUS Revision Amount***************************
                IF v_trt_sec_amt <> 0
                THEN
                    v_lvl := 'SECSUP';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            v_frgn_or_local,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_sec_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_sec_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;

                --**************************** Update Facultative Revision Amount***************************
                BEGIN
                    SELECT SUM (NVL (cfrr_amount, 0))
                      INTO v_trt_fac_amt
                      FROM gin_clm_facre_recoveries
                     WHERE     cfrr_cmb_claim_no = v_clmrg_claim_no
                           AND cfrr_ggt_trans_no = v_trans_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others (
                            'SYSTEM COULD NOT RETRIEVE FACRE RI APPORTIONMENT ');
                END;

                IF v_trt_fac_amt <> 0
                THEN
                    v_lvl := 'FO';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    -- v_trnt_contra_gl_code:=fms_interfaces_pkg.sl_control_acc('GIS', 'FO')  ;
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_fac_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_trt_fac_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;

                BEGIN
                    SELECT SUM (NVL (crpr_amt, 0))
                      INTO v_ripool_amt
                      FROM gin_clm_ri_pool_recoveries
                     WHERE crpr_ggt_tran_no = v_trans_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'System could not retrieve FACRE RI apportionment ');
                END;

                IF v_ripool_amt <> 0
                THEN                                       -- reinsurance pool
                    v_lvl := 'POOL';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
                                || i.cmb_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_ripool_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_ripool_amt, v_rnd)),
                        'CLAIM PAYMENT ' || rev_type || '-' || v_lvl, --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;
            END IF;

            --****************COINSURANCE PAY FULL FOR LEADER COMBINED*************************
            IF NVL (i.cmb_coin_pay_type, 'O') = 'F'
            THEN
                IF NVL (v_ccop_amount, 0) != 0
                THEN
                    SELECT gin_interfaces_pkg.sl_control_acc (
                               'GIS',
                               v_coin_client_type)
                      INTO v_trnt_contra_gl_code
                      FROM DUAL;

                    IF fms_interfaces_pkg.valid_trns_acc (
                           v_trnt_contra_gl_code,
                           v_org_code,
                           i.cmb_brn_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'COIN GL CONTROL A/C - '
                            || v_trnt_contra_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_ccop_amount, v_rnd)),
                        'CLAIM',
                        v_trnt_contra_gl_code,
                        v_org_code,
                        v_paymnt_brh_code,
                        'D',
                        v_chq_dtls,
                        NULL,
                        NULL,
                        i.cmb_unit_code,
                        i.cmb_location_code);
                END IF;
            END IF;

            --************************************************************
            IF v_pay_method IN ('EFT', 'RTGS')
            THEN
                --RAISE_ERROR(v_net_amt||' ; '||ROUND (NVL (v_net_amt, 0), v_bcur_rnd));
                BEGIN
                    --               fms_cheques_pkg.create_reqn
                    --                  (
                    --                  v_cqr_source,
                    --                   i.cpv_voucher_no,                                     --ref
                    --                   i.cpv_cmb_claim_no,                                -- ref2,
                    --                   TRUNC (SYSDATE),
                    --                   i.cpv_cmb_claim_no,
                    --                   --'gis claim',             --narrative V
                    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
                    --                   v_bct_brh_code,
                    --                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                    --                                                -- v_net_amt,     --cqr_amount
                    --                   i.cpv_payee,
                    --                   v_pay_method,
                    --                   NULL,
                    --                   v_bnk_bbr_pk,                                          --12
                    --                   i.cmb_cur_code,
                    --                   v_bct_code,
                    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
                    --                                                   ),
                    --                   i.cpv_authorised_dt,
                    --                   v_user_code,                              --v_cqr_req_by  ,
                    --                   'GIS-CLAIM',                                 -- pmt_type  ,
                    --                   v_chq_dtls,
                    --                   v_payee_eft_dtls,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   v_bnk_bbr_code,
                    --                   v_bnk_account,
                    --                   NULL,
                    --                   'N'                                           --v_auto_auth
                    --                  );

                    FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                        v_cqr_source,                         -- v_cqr_source,
                        i.cpv_voucher_no,                        -- v_cqr_ref,
                        i.cpv_cmb_claim_no,                     -- v_cqr_ref2,
                        TRUNC (SYSDATE),                    -- v_cqr_ref_date,
                        i.cpv_cmb_claim_no,                -- v_cqr_narrative,
                        v_paymnt_brh_code,                  -- v_cqr_brh_code,
                        v_bct_brh_code,                 -- v_cqr_bct_brh_code,
                        ROUND (NVL (v_net_amt, 0), v_bcur_rnd), -- v_cqr_amount,
                        i.cpv_payee,                           -- v_cqr_payee,
                        v_pay_method,                     -- v_cqr_pay_method,
                        i.cmb_cur_code,                     -- v_cqr_cur_code,
                        i.cpv_cur_rate,                     ---i.cpv_cur_rate,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (
                            UPPER (i.cpv_authorised_by)),
                        i.cpv_authorised_dt,
                        v_user_code,                          -- v_cqr_req_by,
                        'GIS-CLAIM',                        -- v_cqr_pmt_type,
                        v_bnk_bbr_code,            --v_payee_bank_branch_code,
                        v_bnk_account,                  --v_payee_bank_acc_no,
                        v_chq_dtls,                           -- v_dtls_table,
                        v_payee_eft_dtls,                    --v_payee_eft_rec
                        NULL,                         --v_cqr_physical_address
                        NULL,                          ---v_cqr_postal_address
                        v_trans_no,                        --v_itfc_trans_code
                        NULL,                                    --v_itfc_ref3
                        NULL,                             --v_payee_source_pk,
                        NULL,                           --v_payee_source_type,
                        'N',                                    --v_auto_auth,
                        NULL,                                   --v_num_val_1,
                        i.cpv_invoice_no,                     ---v_invoice_no,
                        i.cpv_inv_date,                     ---v_invoice_date,
                        NULL,                           ---v_auto_consolidate,
                        NULL,                                   ---v_batch_no,
                        NULL                               ---v_payee_spr_code
                            );
                --            EXCEPTION
                --               WHEN OTHERS
                --               THEN
                --                  raise_error (   'ERROR ON CREATING PAYMENT REQUISITION < '
                --                               || v_pay_method
                --                               || '> FOR.'
                --                               || i.cpv_payee
                --                               || SQLERRM (SQLCODE)
                --                              );
                END;
            ELSIF v_pay_method IN ('MOB')
            THEN
                BEGIN
                    --RAISE_ERROR('v_bct_code'||v_bct_code);
                    Fms_Interfaces_Pkg.create_Mob_reqn (
                        v_cqr_source,
                        i.cpv_voucher_no,                                --ref
                        i.cpv_cmb_claim_no,                           -- ref2,
                        TRUNC (SYSDATE),
                        i.cpv_cmb_claim_no,
                        v_paymnt_brh_code,                   --i.cmb_brn_code,
                        v_bct_brh_code,
                        ROUND (NVL (v_net_amt, 0), v_bcur_rnd),   --cqr_amount
                        i.cpv_payee,
                        v_pay_method,
                        i.cmb_cur_code,
                        i.cpv_cur_rate,
                        -v_bct_code,
                        fms_interfaces_pkg.get_usercode (
                            UPPER (i.cpv_authorised_by)),
                        i.cpv_authorised_dt,
                        v_user_code,                         --v_cqr_req_by  ,
                        'GIS-CLAIM',                            -- pmt_type  ,
                        v_mpt_code,
                        v_chq_dtls,
                        v_payee_mft_dtls,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        'N',
                        NULL,
                        i.cpv_invoice_no,                     ---v_invoice_no,
                        i.cpv_inv_date,                     ---v_invoice_date,
                        'N',
                        NULL);
                END;
            ELSE
                BEGIN
                    --               fms_cheques_pkg.create_reqn
                    --                  (
                    --                  v_cqr_source,
                    --                   i.cpv_voucher_no,                                     --ref
                    --                   i.cpv_cmb_claim_no,                                -- ref2,
                    --                   TRUNC (SYSDATE),
                    --                   i.cpv_cmb_claim_no,
                    --                   --'GIS Claim',             --narrative V
                    --                   v_paymnt_brh_code,
                    --                   v_bct_brh_code,
                    --                   ROUND (NVL (v_net_amt, 0), v_rnd),             --cqr_amount
                    --                   i.cpv_payee,
                    --                   i.cpv_vchr_cur_code,
                    --                   v_bct_code,
                    --                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
                    --                                                   ),
                    --                   i.cpv_authorised_dt,
                    --                   v_user_code,                              --v_cqr_req_by  ,
                    --                   'GIS-CLAIM',                                 -- pmt_type  ,
                    --                   v_chq_dtls,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   v_cqr_bnk_dtls,
                    --                   v_auto_auth
                    --                  );

                    FMS_INTERFACES_PKG.create_Chq_reqn (
                        v_cqr_source,
                        i.cpv_voucher_no,                                --ref
                        i.cpv_cmb_claim_no,                           -- ref2,
                        TRUNC (SYSDATE),                                  ----
                        i.cpv_cmb_claim_no,                               ----
                        --'GIS Claim',             --narrative V
                        v_paymnt_brh_code,                               -----
                        v_bct_brh_code,                                   ----
                        ROUND (NVL (v_net_amt, 0), v_bcur_rnd),           ----
                        --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
                        i.cpv_payee,                                      ----
                        v_pay_method,                            ---'CHQ',----
                        v_cur_code,
                        i.cpv_cur_rate, --  --                             --i.cmb_cur_code,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (
                            UPPER (i.cpv_authorised_by)),                 ----
                        i.cpv_authorised_dt,                             -----
                        v_user_code, ----                           --v_cqr_req_by  ,
                        'GIS-CLAIM', ----                              -- pmt_type  ,
                        v_chq_dtls,                                       ----
                        NULL,                        --v_cqr_physical_address,
                        NULL,                          --v_cqr_postal_address,
                        NULL,                            ---v_itfc_trans_code,
                        NULL,                                   --v_itfc_ref3,
                        NULL,                             --v_payee_source_pk,
                        NULL,                           --v_payee_source_type,
                        v_auto_auth,
                        NULL,                                   --v_num_val_1,
                        i.cpv_invoice_no,                     ---v_invoice_no,
                        i.cpv_inv_date,                     ---v_invoice_date,
                        NULL,                            --v_auto_consolidate,
                        NULL                                      --v_batch_no
                            );
                --            EXCEPTION
                --               WHEN OTHERS
                --               THEN
                --                  raise_application_error (-20001,
                --                                              'CREATE_REQN :- '
                --                                           || v_net_amt
                --                                           || ' $ '||v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code
                --                                           || SQLERRM (SQLCODE)
                --                                          );
                END;
            END IF;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'CLM REQN NOT CREATED FOR CLAIM # ' || v_clmrg_claim_no);
        END IF;
    --       RAISE_ERROR('v_trans_no4456='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
    END;

    --PROCEDURE process_claim_pymt (
    --   v_clmrg_claim_no   VARCHAR2,
    --   v_trans_no         NUMBER,
    --   v_user_name        VARCHAR2,
    --   v_pay_method       VARCHAR2 DEFAULT 'CHQ'
    --)
    --IS
    --   v_cmb_claim_no              NUMBER;
    --   v_cqr_bnk_dtls              fms_cheques_pkg.type_bnk_dtls_table;

    --   CURSOR c_claim
    --   IS
    --      SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
    --             gin_clm_payment_vouchers.cpv_vchr_cur_code,
    --             gin_clm_payment_vouchers.cpv_cur_code,
    --             gin_clm_payment_vouchers.cpv_voucher_no,
    --             gin_clm_payment_vouchers.cpv_amount_bcur,
    --             gin_clm_payment_vouchers.cpv_apco_cor_code,
    --             gin_clm_payment_vouchers.cpv_date,
    --             gin_clm_payment_vouchers.cpv_authorised,
    --             gin_clm_payment_vouchers.cpv_authorised_by,
    --             gin_clm_payment_vouchers.cpv_account_type,
    --             gin_clm_payment_vouchers.cpv_agnt_agent_code, cpv_authorised_dt,
    --             cpv_amount cpv_amount, gin_clm_payment_vouchers.cpv_payee,
    --             gin_clm_payment_vouchers.cpv_raise_by,
    --             gin_claim_master_bookings.cmb_cur_code,
    --             gin_claim_master_bookings.cmb_brn_code,
    --             gin_clm_payment_vouchers.cpv_drcr_no, cpv_comp_retention,
    --             cpv_man_amount, cpv_quota_amount, cpv_fstsup_amount,
    --             cpv_secsup_amount, cpv_facre_amount,CPV_XOL_AMOUNT,
    --             SUBSTR (cpv_tran_type, 0, 2) cpv_tran_type,
    --             gin_claim_master_bookings.cmb_scl_code,
    --             NVL (cpv_vat_amnt, 0) cpv_vat_amnt,
    --             NVL (cpv_whtx_amnt, 0) cpv_whtx_amnt,
    --             NVL (cpv_net_paid, 0) cpv_net_paid, cpv_bcur_net_paid,
    --             cpv_bcur_vat_amnt, cpv_bcur_whtx_amnt, cpv_post_dated,
    --             cpv_post_dated_date, cpv_rein_amount, cpv_rein_amount_bcur,
    --             cpv_excess_amount, cpv_excess_amount_bcur, cpv_ret_salvage,
    --             cpv_ret_salvage_bcur, NULL cpv_disc_amt, cpv_claimant_type,
    --             cpv_reg_cld_code, cpv_cbp_code, cpv_reg_clmt_code,
    --             cpv_exciseduty_amnt cpv_exciseduty_amnt,
    --             cpv_bcur_exciseduty_amnt, cmb_coin_pay_type,
    --             cpv_coin_tot_net_paid, cpv_coin_tot_vat_amnt,
    --             cpv_coin_tot_whtx_amnt, cpv_coin_tot_exciseduty_amnt,
    --             cpv_coin_tot_amt, cpv_coin_tot_amt_bcur, cmb_pol_policy_type,
    --             cmb_location_code, cmb_unit_code, cpv_coin_vattowithhold_amnt,
    --             cpv_bcur_vattowithhold_amnt,
    --             cpv_coin_vattowithhold_amnt cpv_vattowithhold_amnt,
    --             gin_clm_payment_vouchers.cpv_cur_rate cpv_cur_rate
    --        FROM gin_claim_master_bookings, gin_clm_payment_vouchers
    --       WHERE cmb_claim_no = cpv_cmb_claim_no
    --         AND cmb_claim_no = v_clmrg_claim_no
    --         AND cpv_ggt_trans_no = v_trans_no;

    --   v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
    --   v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
    --   v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
    --   v_cqr_brh_code              NUMBER;
    --   v_user_code                 NUMBER;
    --   v_cqr_source_auth_by        NUMBER;
    --   v_cqr_source_auth_dt        DATE;
    --   exc_user_error              EXCEPTION;
    --   v_brh_name                  VARCHAR2 (100);
    --   v_bct_code                  NUMBER;
    --   v_bct_brh_code              NUMBER;
    --   v_crt_acc_number            VARCHAR2 (20);
    --   v_crt_acc_org_code          NUMBER;
    --   v_trnt_gl_code              VARCHAR2 (20);
    --   v_trnt_contra_gl_code       VARCHAR2 (20);
    --   v_trnt_code                 VARCHAR2 (20);
    --   v_acc_type                  VARCHAR2 (20);
    --   v_cqr_source                NUMBER;
    --   v_rec_count                 NUMBER                                     := 0;
    --   v_org_code                  NUMBER;
    --   v_exch_rate                 NUMBER;
    --   v_exch_rate2                NUMBER;
    --   v_rnd                       NUMBER;
    --   v_bcur_rnd                  NUMBER;
    --   v_cur_code                  NUMBER;
    --   v_paymnt_brh_code           NUMBER;
    --   v_trt_man_amt               NUMBER;
    --   v_trt_qs_amt                NUMBER;
    --   v_trt_fst_amt               NUMBER;
    --   v_trt_sec_amt               NUMBER;
    --   v_trt_fac_amt               NUMBER;
    --   v_lvl                       VARCHAR2 (15);
    --   rev_type                    VARCHAR2 (15);
    --   v_payment_amt               gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
    --   v_ripool_amt                NUMBER;
    --   v_net_amt                   NUMBER;
    --   v_vat_amt                   NUMBER;
    --   v_whtx_amt                  NUMBER;
    --   v_tot_amt                   NUMBER;
    --   v_disc_amt                  NUMBER;
    --   v_rein_amt                  NUMBER;
    --   v_excess_amt                NUMBER;
    --   v_control_acc               VARCHAR2 (30);
    --   v_client_type               VARCHAR2 (5);
    --   v_act_code                  NUMBER;
    --   v_agnt_sht_desc             VARCHAR2 (25);
    --   v_salv_amt                  NUMBER;
    --   v_per_code                  NUMBER;
    --   v_charge_servp_wthtax       VARCHAR2 (1);
    --   v_auto_auth                 VARCHAR2 (1);
    --   v_eft_enabled               VARCHAR2 (1);
    --   v_bnk_account               VARCHAR2 (30);
    --   v_bnk_bbr_code              VARCHAR2 (30);
    --   v_auth_param                VARCHAR2 (1);
    --   v_sms_tel                   VARCHAR2 (30);
    --   v_ref_no                    VARCHAR2 (30);
    --   v_mpt_code                  NUMBER;
    --   v_exciseduty_amt            NUMBER;
    --   v_ccop_amount_bcur          NUMBER;
    --   v_coin_amount               NUMBER;
    --   v_ccop_amount               NUMBER;
    --   v_coin_client_type          VARCHAR2 (5);
    --   --variable added by kim kahunja to reference tqc_bank_branches pk to be passed on cheque requisition
    --   v_bnk_bbr_pk                NUMBER;
    --   v_trt_lvl                   VARCHAR2 (1)                             := 'P';
    --   v_facre_gl_acc_no           VARCHAR2 (30);
    --   v_frgn_or_local             VARCHAR2 (30);
    --   v_clmfee_garage_param       VARCHAR2 (1)                             := 'N';
    --   v_spr_cnt                   NUMBER;
    --   v_trt_rcry_gl_param         VARCHAR2 (1);
    --   v_vattowithhold_app_param   VARCHAR2 (1)                             := 'N';
    --   v_vattowithhold_amnt        NUMBER;
    --
    --   CURSOR c_treaties
    --   IS
    --      SELECT   SUM
    --                  (DECODE (trs_trtg_code,
    --                           1001, DECODE (NVL (v_trt_lvl, 'T'),
    --                                         'T', NULL,
    --                                         ROUND (  trpa_comp_rate
    --                                                / 100
    --                                                * NVL (ctrtr_trt_amt_pcur, 0)
    --                                               )
    --                                        ),
    --                           0
    --                          )
    --                  ) trt_man_amt,
    --               SUM
    --                  (DECODE (trs_trtg_code,
    --                           1003, DECODE (NVL (v_trt_lvl, 'T'),
    --                                         'T', NULL,
    --                                         ROUND (  trpa_comp_rate
    --                                                / 100
    --                                                * NVL (ctrtr_trt_amt_pcur, 0)
    --                                               )
    --                                        ),
    --                           0
    --                          )
    --                  ) trt_qs_amt,
    --               SUM
    --                  (DECODE (trs_trtg_code,
    --                           10041, DECODE (NVL (v_trt_lvl, 'T'),
    --                                          'T', NULL,
    --                                          ROUND (  trpa_comp_rate
    --                                                 / 100
    --                                                 * NVL (ctrtr_trt_amt_pcur, 0)
    --                                                )
    --                                         ),
    --                           0
    --                          )
    --                  ) trt_fst_amt,
    --               SUM
    --                  (DECODE (trs_trtg_code,
    --                           10042, DECODE (NVL (v_trt_lvl, 'T'),
    --                                          'T', NULL,
    --                                          ROUND (  trpa_comp_rate
    --                                                 / 100
    --                                                 * NVL (ctrtr_trt_amt_pcur, 0)
    --                                                )
    --                                         ),
    --                           0
    --                          )
    --                  ) trt_sec_amt,
    --               DECODE
    --                     (NVL (v_trt_lvl, 'T'),
    --                      'T', NULL,
    --                      NVL (trpa_gl_rcvbl_account,
    --                           DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                   'N', trpa_gl_account,
    --                                   NULL
    --                                  )
    --                          )
    --                     ) trpa_gl_account,
    --               DECODE (NVL (v_trt_lvl, 'T'),
    --                       'T', NULL,
    --                       agn_sht_desc || '-' || agn_name
    --                      ) account_name,
    --               rei_local_forgn
    --          FROM gin_clm_treaty_recoveries,
    --               gin_treaty_setups,
    --               gin_treaty_participants,
    --               gin_treaties,
    --               tqc_agencies
    --         WHERE ctrtr_rei_code = rei_code
    --           AND trpa_rei_code = rei_code
    --           AND ctrtr_trs_code = trs_code
    --           AND trpa_agnt_agent_code = agn_code
    --           AND ctrtr_ggt_trans_no = v_trans_no
    --      GROUP BY DECODE (NVL (v_trt_lvl, 'T'),
    --                       'T', NULL,
    --                       NVL (trpa_gl_rcvbl_account,
    --                            DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                                    'N', trpa_gl_account,
    --                                    NULL
    --                                   )
    --                           )
    --                      ),
    --               DECODE (NVL (v_trt_lvl, 'T'),
    --                       'T', NULL,
    --                       agn_sht_desc || '-' || agn_name
    --                      ),
    --               rei_local_forgn;

    --   CURSOR c_facre
    --   IS
    --      SELECT   SUM (DECODE (cfrr_pol_cur_code,
    --                            cfrr_trt_cur_code, NVL (cfrr_amount, 0),
    --                            NVL (cfrr_amount_bcur, 0)
    --                           )
    --                   ) cfrr_amount,
    --               DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                       'N', agn_acc_no,
    --                       agn_gl_rcvbl_acc_no
    --                      ) agn_acc_no,
    --               agn_sht_desc, agn_name
    --          FROM gin_clm_facre_recoveries, tqc_agencies
    --         WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --           AND cfrr_ggt_trans_no = v_trans_no
    --           AND cfrc_agnt_agent_code = agn_code
    --      GROUP BY DECODE (NVL (v_trt_rcry_gl_param, 'N'),
    --                       'N', agn_acc_no,
    --                       agn_gl_rcvbl_acc_no
    --                      ),
    --               agn_sht_desc,
    --               agn_name;
    --
    --   CURSOR cur_xol_amnts
    --      IS
    --        SELECT   NVL (cxtd_amt_to_cede, 0) gross_amt,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_agent_code,
    --                          'B', xolp_br_agn_code
    --                         ) xolp_agnt_agent_code,
    --                  agn_name,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_sht_desc,
    --                          'B', xolp_br_agn_sht_desc
    --                         ) xolp_agnt_sht_desc,
    --                  xolp_rate, xolp_gl_account, cxtd_scl_code, xols_cur_code,
    --                  xol_code,
    --                  ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)
    --                        ) part_amount,
    --                  cxtd_clm_no
    --             FROM gin_claim_xol_treaty_details,
    --                  gin_xol_treaty_setups,
    --                  gin_xol_participants,
    --                  gin_xol_treaties,
    --                  tqc_agencies
    --            WHERE cxtd_xols_code = xols_code
    --              AND xolp_agnt_agent_code = agn_code
    --              AND cxtd_xol_code = xol_code
    --              AND xolp_xols_code = xols_code
    --              AND xols_xol_code = xol_code
    --              AND cxtd_ggt_trans_no = v_trans_no
    --              AND cxtd_authorized = 'N'
    --              AND cxtd_ggt_trans_no IN (SELECT ggt_trans_no
    --                                          FROM gin_gis_transactions)
    --              AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) <> 0
    --         GROUP BY cxtd_clm_no,
    --                  NVL (cxtd_amt_to_cede, 0),
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_agent_code,
    --                          'B', xolp_br_agn_code
    --                         ),
    --                  agn_name,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_sht_desc,
    --                          'B', xolp_br_agn_sht_desc
    --                         ),
    --                  xolp_rate,
    --                  xolp_gl_account,
    --                  cxtd_scl_code,
    --                  xols_cur_code,
    --                  xol_code,
    --                  ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0));
    --BEGIN
    ----raise_error('interfraces here we are'||'v_clmrg_claim_no='||v_clmrg_claim_no||'v_trans_no'||v_trans_no);
    --   v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

    --   IF v_user_code IS NULL
    --   THEN
    --      RAISE exc_user_error;
    --   END IF;

    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('AUTO_AUTH_CLM_PYMTS')
    --        INTO v_auth_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_auth_param := 'Y';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching AUTO_AUTH_CLM_PYMTS parameter...');
    --   END;

    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar
    --                                        ('SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL')
    --        INTO v_trt_rcry_gl_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_trt_rcry_gl_param := 'N';
    --      WHEN OTHERS
    --      THEN
    --         raise_error
    --            ('Error fetching SEPARATE_TRT_PRM_GL_FRM_TRT_RCRY_GL parameter...'
    --            );
    --   END;

    --   BEGIN
    --      SELECT gin_parameters_pkg.get_param_varchar ('CLMFEE_GARAGE_VAT')
    --        INTO v_clmfee_garage_param
    --        FROM DUAL;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_clmfee_garage_param := 'N';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error fetching CLMFEE_GARAGE_VAT parameter...');
    --   END;

    --   BEGIN
    --      SELECT param_value
    --        INTO v_vattowithhold_app_param
    --        FROM gin_parameters
    --       WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         v_vattowithhold_app_param := 'N';
    --      WHEN OTHERS
    --      THEN
    --         raise_error ('Error getting VATTOWITHHOLD_APPLICABLE parameters..');
    --   END;

    --   IF NVL (v_pay_method, 'CHQ') = 'JE'
    --   THEN
    --      v_auto_auth := 'N';
    --   ELSE
    --      IF NVL (v_auth_param, 'N') = 'Y'
    --      THEN
    --         v_auto_auth := 'Y';
    --      ELSE
    --         v_auto_auth := 'N';
    --      END IF;
    --   END IF;

    --   v_rec_count := 0;

    --   FOR i IN c_claim
    --   LOOP
    --      v_exch_rate :=
    --                   get_currexch_rate (i.cpv_vchr_cur_code, v_rnd, v_bcur_rnd);
    --       -- raise_error('i.cpv_rein_amount=='||i.cpv_rein_amount||'i.cpv_vchr_cur_code'||i.cpv_vchr_cur_code||'v_rein_amt=='||v_rein_amt||'i.cmb_coin_pay_type'||i.cmb_coin_pay_type);
    --      IF NVL (i.cmb_coin_pay_type, 'O') = 'O'
    --      THEN
    --         IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --         THEN
    --            v_payment_amt := i.cpv_amount;
    --            v_net_amt := i.cpv_net_paid;
    --            v_vat_amt := i.cpv_vat_amnt;
    --            v_whtx_amt := i.cpv_whtx_amnt;
    --            v_disc_amt := i.cpv_disc_amt;
    --            v_rein_amt := i.cpv_rein_amount;
    --            v_excess_amt := i.cpv_excess_amount;
    --            v_salv_amt := i.cpv_ret_salvage;
    --            v_exciseduty_amt := i.cpv_exciseduty_amnt;
    --            v_vattowithhold_amnt := i.cpv_vattowithhold_amnt;
    --            v_cur_code := i.cpv_vchr_cur_code;

    --            IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --            THEN
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_vat_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_exciseduty_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         + NVL (v_net_amt, 0),
    --                         0
    --                        );
    --            ELSE
    --               v_tot_amt :=
    --                  ROUND (  NVL (v_net_amt, 0)
    --                         + NVL (v_whtx_amt, 0)
    --                         + NVL (v_exciseduty_amt, 0)
    --                         + NVL (v_salv_amt, 0)
    --                         + NVL (v_excess_amt, 0)
    --                         + NVL (v_vattowithhold_amnt, 0),
    --                         0
    --                        );
    --            END IF;
    --         ELSE
    --            v_payment_amt := i.cpv_amount_bcur;
    --            v_net_amt := i.cpv_bcur_net_paid;
    --            v_vat_amt := i.cpv_bcur_vat_amnt;
    --            v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --            v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --            v_vattowithhold_amnt := i.cpv_bcur_vattowithhold_amnt;
    --            v_cur_code := i.cpv_vchr_cur_code;
    --            v_salv_amt := i.cpv_ret_salvage_bcur;
    --            v_excess_amt := i.cpv_excess_amount_bcur;
    --            v_tot_amt :=
    --               ROUND (  NVL (v_vat_amt, 0)
    --                      + NVL (v_whtx_amt, 0)
    --                      + NVL (v_salv_amt, 0)
    --                      + NVL (v_excess_amt, 0)
    --                      --- NVL (v_vattowithhold_amnt, 0)
    --                      + NVL (v_net_amt, 0),
    --                      0
    --                     );
    --            v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --            v_rein_amt := i.cpv_rein_amount_bcur;
    --         END IF;
    --      ELSIF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --      THEN
    --         SELECT   SUM (NVL (ccop_amount, 0)),
    --                  SUM (NVL (ccop_amount_bcur, 0)), act_type_sht_desc
    --             INTO v_ccop_amount,
    --                  v_ccop_amount_bcur, v_coin_client_type
    --             FROM gin_clm_coin_payments, tqc_agencies, tqc_account_types
    --            WHERE agn_code = ccop_agnt_agent_code
    --              AND agn_act_code = act_code
    --              AND ccop_cpv_voucher_no = i.cpv_voucher_no
    --         GROUP BY act_type_sht_desc;
    --
    --         IF i.cpv_cur_code = i.cpv_vchr_cur_code
    --         THEN
    --            v_payment_amt := i.cpv_amount;
    --            v_net_amt := i.cpv_coin_tot_net_paid;
    --            v_vat_amt := i.cpv_coin_tot_vat_amnt;
    --            v_whtx_amt := i.cpv_coin_tot_whtx_amnt;
    --            v_disc_amt := i.cpv_disc_amt;
    --            v_rein_amt := i.cpv_rein_amount;
    --            v_excess_amt := i.cpv_excess_amount;
    --            v_salv_amt := i.cpv_ret_salvage;
    --            v_exciseduty_amt := i.cpv_coin_tot_exciseduty_amnt;
    --            v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --            v_cur_code := i.cpv_vchr_cur_code;
    --            v_coin_amount := NVL (v_ccop_amount, 0);
    --            v_tot_amt :=
    --               ROUND (  NVL (v_vat_amt, 0)
    --                      + NVL (v_whtx_amt, 0)
    --                      + NVL (v_salv_amt, 0)
    --                      + NVL (v_excess_amt, 0)
    --                      --- NVL (v_vattowithhold_amnt, 0)
    --                      + NVL (v_exciseduty_amt, 0)
    --                      + NVL (v_net_amt, 0)
    --                      - NVL (v_coin_amount, 0),
    --                      0
    --                     );
    --         ELSE
    --            v_payment_amt := i.cpv_amount_bcur;
    --            v_net_amt := i.cpv_bcur_net_paid;
    --            v_vat_amt := i.cpv_bcur_vat_amnt;
    --            v_whtx_amt := i.cpv_bcur_whtx_amnt;
    --            v_exciseduty_amt := i.cpv_bcur_exciseduty_amnt;
    --            v_vattowithhold_amnt := i.cpv_coin_vattowithhold_amnt;
    --            v_cur_code := i.cpv_vchr_cur_code;
    --            v_coin_amount := v_ccop_amount_bcur;
    --            v_salv_amt := i.cpv_ret_salvage_bcur;
    --            v_excess_amt := i.cpv_excess_amount_bcur;
    --            v_tot_amt :=
    --               ROUND (  NVL (v_vat_amt, 0)
    --                      + NVL (v_whtx_amt, 0)
    --                      + NVL (v_salv_amt, 0)
    --                      --- NVL (v_vattowithhold_amnt, 0)
    --                      + NVL (v_exciseduty_amt, 0)
    --                      + NVL (v_excess_amt, 0)
    --                      + NVL (v_net_amt, 0)
    --                      - NVL (v_coin_amount, 0),
    --                      0
    --                     );
    --            v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
    --            v_rein_amt := i.cpv_rein_amount_bcur;
    --         END IF;
    --      END IF;

    --      v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --      v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
    --      v_paymnt_brh_code := i.cmb_brn_code;
    --      v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --      fms_interfaces_pkg.trans_bct ('CLM',
    --                                    v_cqr_source,
    --                                    v_paymnt_brh_code,
    --                                    v_cur_code,
    --                                    v_bct_code,
    --                                    v_bct_brh_code
    --                                   );

    --      IF     NVL (v_clmfee_garage_param, 'N') = 'Y'
    --         AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --      THEN
    --         BEGIN
    --            SELECT COUNT (*)
    --              INTO v_spr_cnt
    --              FROM tqc_service_provider_reg
    --             WHERE sreg_spr_code = i.cpv_apco_cor_code;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               v_spr_cnt := 0;
    --            WHEN OTHERS
    --            THEN
    --               v_spr_cnt := 0;
    --         END;

    --         --raise_Error(v_spr_cnt||' = '||v_tot_amt||'='||v_vat_amt||'='||v_net_amt);
    --         IF NVL (v_spr_cnt, 0) > 0
    --         THEN
    --            v_tot_amt := NVL (v_tot_amt, 0) - NVL (v_vat_amt, 0);
    --            v_net_amt := NVL (v_net_amt, 0) + NVL (v_vat_amt, 0);
    --         END IF;
    --      END IF;

    --      IF ROUND (NVL (v_payment_amt, 0), 0) != v_tot_amt
    --      THEN
    --         raise_application_error
    --                            (-20001,
    --                                'THE NET CHEQUE AMOUNT '
    --                             || NVL (v_net_amt, 0)
    --                             || ' PLUS VAT '
    --                             || NVL (v_vat_amt, 0)
    --                             || ' AND WHTTAX '
    --                             || NVL (v_whtx_amt, 0)
    --                             || ' PLUS EXCISE DUTY '
    --                             || NVL (v_exciseduty_amt, 0)
    --                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                             || v_payment_amt
    --                             || 'v_tot_amt'
    --                             || v_tot_amt
    --                            );
    --      END IF;

    ----          raise_application_error
    ----                            (-20001,
    ----                                'THE NET CHEQUE AMOUNT '
    ----                             || NVL (v_net_amt, 0)
    ----                             || ' PLUS VAT '
    ----                             || NVL (v_vat_amt, 0)
    ----                             || ' AND WHTTAX '
    ----                             || NVL (v_whtx_amt, 0)
    ----                             || ' PLUS EXCISE DUTY '
    ----                             || NVL (v_exciseduty_amt, 0)
    ----                             || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    ----                             || v_payment_amt
    ----                             || 'v_tot_amt'
    ----                             || v_tot_amt
    ----                            );

    --      --         IF  NVL(v_vattowithhold_app_param,'N')='Y'   THEN
    ----           v_payment_amt:=NVL(v_payment_amt,0)-NVL(v_vat_amt,0)+NVL(v_vattowithhold_amnt,0);
    ----         END IF;
    --      IF i.cpv_tran_type = 'CF'
    --      THEN
    --         rev_type := 'CF';

    --         BEGIN
    --            IF NVL (v_disc_amt, 0) > 0
    --            THEN
    --               SELECT voud_per_code
    --                 INTO v_per_code
    --                 FROM gin_voucher_details
    --                WHERE voud_cpv_voucher_no = i.cpv_voucher_no;

    --               gin_stp_claims_pkg.create_srv_prvdr_reserve
    --                                                         (v_clmrg_claim_no,
    --                                                          v_per_code,
    --                                                          -v_disc_amt,
    --                                                          NULL,
    --                                                          v_user_name,
    --                                                          i.cpv_apco_cor_code,
    --                                                          NULL,
    --                                                          'A'
    --                                                         );
    --            END IF;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error (   'Error creating Discount Revision '
    --                            || SQLERRM (SQLCODE)
    --                           );
    --         END;
    --      ELSE
    --         rev_type := 'CP';
    --      END IF;

    --      IF NVL (v_payment_amt, 0) != 0
    --      THEN
    --         gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --         check_valid_gl_acc (v_trnt_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             i.cmb_scl_code
    --                            );

    ----                     RAISE_ERROR(v_trnt_code||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code);
    --         IF v_pay_method IN ('EFT', 'RTGS')
    --         THEN
    --            BEGIN
    --               v_eft_enabled := 'N';

    --               /*NOTES
    --               1. SERVICE PROVIDES
    --               2. CLIENTS
    --               3. CLAIMANTS
    --               4. BUSINESS PERSONS
    --               5. ACCOUNTS*/
    --               --raise_error('i.cpv_claimant_type '||i.cpv_claimant_type || ' rev_type '||rev_type);
    --               IF rev_type = 'CP'
    --               THEN
    --                  IF NVL (i.cpv_claimant_type, 'S') = 'O'
    --                  THEN
    --                     v_eft_enabled :=
    --                           account_enabled (bnk_bbr_code (i.cpv_cbp_code, 4));
    --                     v_bnk_account := bnk_account (i.cpv_cbp_code, 4);
    --                     v_bnk_bbr_code :=
    --                        tqc_interfaces_pkg.bank_ref
    --                                               (bnk_bbr_code (i.cpv_cbp_code,
    --                                                              4
    --                                                             )
    --                                               );
    --                     v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 4);

    --                     -- raise_error('acc....'||bnk_bbr_code (i.cpv_cbp_code, 4)||' i.cpv_cbp_code '||i.cpv_cbp_code);
    --                     BEGIN
    --                        IF v_eft_enabled = 'N'
    --                        THEN
    --                           IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                           THEN
    --                              v_eft_enabled :=
    --                                 account_enabled
    --                                           (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                              v_bnk_account :=
    --                                           bnk_account (i.cpv_reg_cld_code, 3);
    --                              v_bnk_bbr_code :=
    --                                 tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           3
    --                                                          )
    --                                            );
    --                              v_bnk_bbr_pk :=
    --                                          bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                           END IF;
    --                        END IF;
    --                     EXCEPTION
    --                        WHEN NO_DATA_FOUND
    --                        THEN
    --                           v_eft_enabled := 'N';
    --                     END;

    --                     IF v_eft_enabled = 'N'
    --                     THEN
    --                        IF bnk_bbr_code (i.cpv_cbp_code, 1) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled (bnk_bbr_code (i.cpv_cbp_code,
    --                                                             1)
    --                                              );
    --                           v_bnk_account := bnk_account (i.cpv_cbp_code, 1);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                                (bnk_bbr_code (i.cpv_cbp_code,
    --                                                               1
    --                                                              )
    --                                                );
    --                           v_bnk_bbr_pk := bnk_bbr_code (i.cpv_cbp_code, 1);
    --                        END IF;
    --                     END IF;
    --                  ELSIF NVL (i.cpv_claimant_type, 'S') = 'T'
    --                  THEN
    --                     IF bnk_bbr_code (i.cpv_reg_cld_code, 3) IS NOT NULL
    --                     THEN
    --                        -- RAISE_ERROR('BANK BRANCH CODE..'||bnk_bbr_code (i.cpv_apco_cor_code, 1));
    --                        v_eft_enabled :=
    --                           account_enabled (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          3
    --                                                         )
    --                                           );
    --                        v_bnk_account := bnk_account (i.cpv_reg_cld_code, 3);
    --                        v_bnk_bbr_code := bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_reg_cld_code, 3);
    --                     END IF;
    --                  ELSIF NVL (i.cpv_claimant_type, 'S') = 'S'
    --                  THEN
    --                     -- RAISE_ERROR('i.cpv_reg_cld_code'||i.cpv_reg_cld_code);
    --                     IF i.cpv_apco_cor_code IS NOT NULL
    --                     THEN
    --                        IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                          (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                         1
    --                                                        )
    --                                          );
    --                           v_bnk_account :=
    --                                          bnk_account (i.cpv_apco_cor_code, 1);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                           v_bnk_bbr_pk :=
    --                                         bnk_bbr_code (i.cpv_apco_cor_code, 1);
    --                        END IF;
    --                     END IF;

    --                     IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                        v_bnk_account := bnk_account (i.cpv_reg_cld_code, 2);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                            );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                     END IF;
    --                  ELSE
    --                     IF bnk_bbr_code (i.cpv_reg_cld_code, 2) IS NOT NULL
    --                     THEN
    --                        v_eft_enabled :=
    --                           account_enabled (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                          2
    --                                                         )
    --                                           );
    --                        v_bnk_account := bnk_account (i.cpv_reg_cld_code, 2);
    --                        v_bnk_bbr_code :=
    --                           tqc_interfaces_pkg.bank_ref
    --                                            (bnk_bbr_code (i.cpv_reg_cld_code,
    --                                                           2
    --                                                          )
    --                                            );
    --                        v_bnk_bbr_pk := bnk_bbr_code (i.cpv_reg_cld_code, 2);
    --                     END IF;
    --                  END IF;
    --               ELSE
    --                  IF bnk_bbr_code (i.cpv_apco_cor_code, 1) IS NOT NULL
    --                  THEN
    --                     v_eft_enabled :=
    --                        account_enabled (bnk_bbr_code (i.cpv_apco_cor_code, 1)
    --                                        );
    --                     v_bnk_account := bnk_account (i.cpv_apco_cor_code, 1);
    --                     v_bnk_bbr_code :=
    --                        tqc_interfaces_pkg.bank_ref
    --                                           (bnk_bbr_code (i.cpv_apco_cor_code,
    --                                                          1
    --                                                         )
    --                                           );
    --                     v_bnk_bbr_pk := bnk_bbr_code (i.cpv_apco_cor_code, 1);

    --                     IF v_eft_enabled = 'N'
    --                     THEN
    --                        IF bnk_bbr_code (i.cpv_agnt_agent_code, 5) IS NOT NULL
    --                        THEN
    --                           v_eft_enabled :=
    --                              account_enabled
    --                                        (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                       5
    --                                                      )
    --                                        );
    --                           v_bnk_account :=
    --                                        bnk_account (i.cpv_agnt_agent_code, 5);
    --                           v_bnk_bbr_code :=
    --                              tqc_interfaces_pkg.bank_ref
    --                                         (bnk_bbr_code (i.cpv_agnt_agent_code,
    --                                                        5
    --                                                       )
    --                                         );
    --                           v_bnk_bbr_pk :=
    --                                       bnk_bbr_code (i.cpv_agnt_agent_code, 5);
    --                        END IF;
    --                     END IF;
    --                  END IF;
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('ERROR GETTING BANK ACC INFO... ');
    --            END;

    --            IF v_eft_enabled = 'N'
    --            THEN
    --               raise_application_error
    --                                   (-20001,
    --                                       'BANK BRANCH NOT ENABLED TO TRANSACT '
    --                                    || v_pay_method
    --                                    || '  ADAS  '
    --                                    || i.cpv_claimant_type
    --                                    || ' PAYMENTS'
    --                                    || i.cpv_reg_cld_code
    --                                    || ' ; '
    --                                    || rev_type
    --                                    || ' ; '
    --                                    || i.cpv_agnt_agent_code
    --                                   );
    --            END IF;
    --         END IF;

    --         v_rec_count := v_rec_count + 1;

    --         --raise_Error('v_payment_amt='||v_payment_amt);
    --         IF v_pay_method IN ('EFT', 'RTGS')
    --         THEN
    --            fms_cheques_pkg.append_eft_payees
    --                     (v_rec_count,        --v_no                       NUMBER,
    --                      i.cpv_voucher_no,   --v_ref1                   VARCHAR2,
    --                      ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                      i.cpv_payee,      --v_narrative                VARCHAR2,
    --                      v_bnk_bbr_code,
    --                      --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                      v_bnk_account,    --v_bnk_account              VARCHAR2,
    --                      i.cpv_cmb_claim_no, --v_ref2                   VARCHAR2,
    --                      v_payee_eft_dtls
    --                     );
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (v_payment_amt, v_rnd),
    --                                                 'CLAIM PAYMENT GROSS AMT '
    --                                              || v_pay_method,
    --                                              --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code,
    --                                              --crt_acc_org_code ,
    --                                              i.cmb_brn_code,
    --
    --                                              ---commented by Solo v_paymnt_brh_code
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         ELSIF v_pay_method IN ('MOB')
    --         --Added by Masinde to take care of mobile payments 30052015
    --         THEN
    --            IF i.cpv_tran_type = 'CP'
    --            THEN
    --               --RAISE_ERROR(i.cpv_reg_clmt_code);
    --               BEGIN
    --                  SELECT mobileno, cld_id_no
    --                    INTO v_sms_tel, v_ref_no
    --                    FROM (SELECT NVL (cld_mobile_no,
    --                                      cld_mobile_phone
    --                                     ) mobileno,
    --                                 cld_id_no
    --                            FROM gin_rgstd_claimants, gin_claimants
    --                           WHERE cld_code = reg_cld_code
    --                             AND reg_cmb_claim_no = v_clmrg_claim_no
    --                             AND reg_third_party = 'T'
    --                             AND reg_clmt_code = i.cpv_reg_clmt_code
    --                          UNION
    --                          SELECT NVL (clnt_tel, clnt_sms_tel) mobileno,
    --                                 clnt_id_reg_no cld_id_no
    --                            FROM gin_rgstd_claimants, tqc_clients
    --                           WHERE clnt_code = reg_cld_code
    --                             AND reg_cmb_claim_no = v_clmrg_claim_no
    --                             AND reg_third_party = 'S'
    --                             AND reg_clmt_code = i.cpv_reg_clmt_code);
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                         (   'Error getting Claimants Mobile Payment details'
    --                          || i.cpv_reg_clmt_code
    --                         );
    --               END;
    --            ELSE
    --               BEGIN
    --                  SELECT NVL (spr_sms_number, spr_mobile_no),
    --                         NVL (spr_pin_number, spr_pin)
    --                    INTO v_sms_tel,
    --                         v_ref_no
    --                    FROM tqc_service_providers
    --                   WHERE spr_code = i.cpv_apco_cor_code;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        (   'Error getting service providers Mobile Payment details'
    --                         || i.cpv_apco_cor_code
    --                        );
    --               END;
    --            END IF;

    --            IF v_sms_tel IS NOT NULL
    --            THEN
    --               SELECT mpt_code
    --                 INTO v_mpt_code
    --                 FROM tqc_mob_pymnt_types_prefixes, tqc_mobile_pymnt_types
    --                WHERE mptp_mpt_code = mpt_code
    --                  AND mptp_mob_no_prefix = '0' || SUBSTR (v_sms_tel, 5, 3);
    --            ELSE
    --               raise_application_error
    --                  (-20001,
    --                   'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..'
    --                  );
    --            END IF;

    --            BEGIN
    --               v_payee_mft_dtls (1) :=
    --                  fms_cheques_pkg.append_mft_payees
    --                                    (v_rec_count,
    --                                     i.cpv_voucher_no,
    --                                     ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                     ---v_amount,
    --                                     i.cpv_payee,               --v_narrative,
    --                                     v_sms_tel,
    --
    --                                     --v_credit_id                                                                                 ,
    --                                     'Mobile Phone Number', --v_credit_id_type
    --                                     v_ref_no,               --v_validation_id
    --                                     'REFERENCE NO'     --v_validation_id_type
    --                                    );
    --               fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                 ROUND (v_payment_amt, v_rnd),
    --                                                 'CLAIM',         --narrative,
    --                                                 v_trnt_gl_code,
    --                                                 -- crt_acc_number
    --                                                 v_org_code,
    --                                                 --crt_acc_org_code ,
    --                                                 v_paymnt_brh_code,
    --
    --                                                 --i.cmb_brn_code,          --v_brh_code,
    --                                                 'D',               --v_dr_cr,
    --                                                 v_chq_dtls
    --                                                );
    --            --fms_chq_mftfile_dtls
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  raise_error (   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
    --                               || i.cpv_voucher_no
    --                              );
    --               WHEN OTHERS
    --               THEN
    --                  raise_error (   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
    --                               || i.cpv_voucher_no
    --                              );
    --            END;
    --         ELSE
    --            fms_cheques_pkg.append_chq_trans
    --                  (v_rec_count,
    --                   ROUND (v_payment_amt, v_rnd),
    --                   'CLAIM PAYMENT GROSS AMT',                     --narrative,
    --                   v_trnt_gl_code,                           -- crt_acc_number
    --                   v_org_code,                            --crt_acc_org_code ,
    --                   v_paymnt_brh_code, --i.cmb_brn_code,          --v_brh_code,
    --                   'D',                                             --v_dr_cr,
    --                   v_chq_dtls,
    --                   NULL,
    --                   NULL,
    --                   i.cmb_unit_code,
    --                   i.cmb_location_code
    --                  );
    --         END IF;
    --      END IF;

    ----******************************SALVAGE *******************************
    --      IF NVL (v_salv_amt, 0) != 0
    --      THEN
    --         gin_interfaces_pkg.get_gl_acct_code
    --                     ('CS',                         --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --         check_valid_gl_acc (v_trnt_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             i.cmb_scl_code
    --                            );
    --         v_rec_count := v_rec_count + 1;
    --         fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                           ROUND (v_salv_amt, v_rnd),
    --                                           'CLAIM',               --narrative,
    --                                           v_trnt_gl_code,
    --                                           -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,
    --
    --                                           --i.cmb_brn_code,          --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls
    --                                          );
    --      END IF;

    ----************************EXCESS************************
    --      IF NVL (v_excess_amt, 0) != 0
    --      THEN
    --         gin_interfaces_pkg.get_gl_acct_code
    --                     ('CRE',                        --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --         check_valid_gl_acc (v_trnt_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             i.cmb_scl_code
    --                            );
    --         v_rec_count := v_rec_count + 1;
    --         fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                           ROUND (NVL (v_excess_amt, 0),
    --                                                  v_rnd),
    --                                           'CLAIM EXCESS',        --narrative,
    --                                           v_trnt_gl_code,
    --                                           -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,
    --
    --                                           --i.cmb_brn_code,          --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls
    --                                          );
    --      END IF;

    ----************************REINSURANCE************************
    --
    --      IF NVL (v_rein_amt, 0) > 0
    --      THEN
    --         IF NVL (i.cpv_rein_amount, 0) != 0
    --         THEN
    --            IF NVL (i.cpv_account_type, 'D') = 'D'
    --            THEN
    --               v_client_type := 'D';
    --            ELSE
    --               BEGIN
    --                  SELECT agn_act_code, agn_sht_desc
    --                    INTO v_act_code, v_agnt_sht_desc
    --                    FROM tqc_agencies
    --                   WHERE agn_code = i.cpv_agnt_agent_code;
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_application_error (-20021,
    --                                                 'AGENT - '
    --                                              || v_client_type
    --                                              || ' NOT FOUND '
    --                                             );
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error (-20022,
    --                                                 'AGENT INFO '
    --                                              || SQLERRM (SQLCODE)
    --                                             );
    --               END;

    --               IF v_act_code IN (2, 9, 10, 16)
    --               THEN
    --                  v_client_type := 'A';
    --               ELSIF v_act_code = 3
    --               THEN
    --                  v_client_type := 'B';
    --               ELSIF v_act_code = 4
    --               THEN
    --                  v_client_type := 'FI';
    --               ELSIF v_act_code = 5
    --               THEN
    --                  v_client_type := 'I';
    --               ELSIF v_act_code = 6
    --               THEN
    --                  v_client_type := 'R';
    --               ELSIF v_act_code = 7
    --               THEN
    --                  v_client_type := 'FO';
    --               ELSE
    --                  raise_application_error (-20001,
    --                                              'UNDEFINED ACCOUNT TYPE - '
    --                                           || v_act_code
    --                                           || ' -FOR AGENT '
    --                                           || v_agnt_sht_desc
    --                                           || 'i.CPV_ACCOUNT_TYPE '
    --                                           || i.cpv_account_type
    --                                           || 'v_clmrg_claim_no ='
    --                                           || v_clmrg_claim_no
    --                                          );
    --               END IF;
    --            END IF;

    --            IF v_client_type IS NULL
    --            THEN
    --               raise_application_error (-20023,
    --                                        'CANNOT POST NULL CLIENT TYPE'
    --                                       );
    --            ELSE
    --               v_control_acc :=
    --                     fms_interfaces_pkg.sl_control_acc ('GIS', v_client_type);
    --            END IF;

    --            gin_interfaces_pkg.get_gl_acct_code
    --                                            (rev_type,
    --                                             --v_trnt_type IN VARCHAR2,
    --                                             i.cmb_scl_code,
    --
    --                                             --v_scl_code IN NUMBER,
    --                                             'U',
    --                                                 --     v_app_lvl IN VARCHAR2,
    --                                             NULL,
    --                                             --          v_btr_trans_code IN VARCHAR2,
    --                                             NULL,
    --                                             --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                                             v_trnt_code,
    --                                             --          v_trnt_code OUT VARCHAR2,
    --                                             v_trnt_gl_code,
    --                                             --          v_trnt_gl_code OUT VARCHAR2,
    --                                             v_trnt_contra_gl_code
    --                                            --          v_trnt_contra_gl_code OUT VARCHAR2
    --                                            );

    --            IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
    --                                                  v_org_code,
    --                                                  v_paymnt_brh_code
    --                                                 ) = FALSE
    --            THEN
    --               raise_application_error (-20001,
    --                                           'CP GL CTRL A/C - '
    --                                        || v_control_acc
    --                                        || ' UNDEFINED IN '
    --                                        || v_brh_name
    --                                        || ' CODE '
    --                                        || v_trnt_code
    --                                        || ' CLS - '
    --                                        || i.cmb_scl_code
    --                                       );
    --            END IF;

    --            IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                  v_org_code,
    --                                                  v_paymnt_brh_code
    --                                                 ) = FALSE
    --            THEN
    --               raise_application_error (-20001,
    --                                           'CP GL A/C - '
    --                                        || v_trnt_gl_code
    --                                        || ' UNDEFINED IN '
    --                                        || v_brh_name
    --                                        || ' CODE '
    --                                        || v_trnt_code
    --                                        || ' CLS - '
    --                                        || i.cmb_scl_code
    --                                       );
    --            END IF;

    --            v_rec_count := v_rec_count + 1;

    --            BEGIN
    --               fms_cheques_pkg.append_chq_trans
    --                                            (v_rec_count,
    --                                             ROUND (NVL (i.cpv_rein_amount, 0),
    --                                                    v_bcur_rnd
    --                                                   ),
    --                                             'GL TRANS' || v_trnt_code,
    --                                             --narrative,
    --                                             v_trnt_gl_code,
    --                                             -- crt_acc_number
    --                                             v_org_code,  --crt_acc_org_code ,
    --                                             v_paymnt_brh_code,
    --
    --                                             --i.cmb_brn_code,          --v_brh_code,
    --                                             'C',                   --v_dr_cr,
    --                                             v_chq_dtls
    --                                            );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20026,
    --                                              'ERROR POSTING GL TRANS FOR '
    --                                           || v_trnt_code
    --                                           || ':- '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    --         END IF;
    --      END IF;
    --      --*******************************POSTING XOL******************************************************
    --         FOR c_xol_rec IN cur_xol_amnts
    --         LOOP
    --           BEGIN
    --
    --
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     ('XOL',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --
    --               IF c_xol_rec.xolp_gl_account IS NOT NULL
    --               THEN
    --               v_trnt_contra_gl_code := c_xol_rec.xolp_gl_account;
    --               END IF;

    --
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'CLAIM PAYMENT XOL AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;
    --            --RAISE_ERROR('c_xol_rec.xolp_gl_account'||c_xol_rec.xolp_gl_account);
    --             check_valid_gl_acc (v_trnt_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             i.cmb_scl_code
    --                            );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --         v_rec_count := v_rec_count + 1;
    --         fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                           ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
    --                                           'CLAIM PAYMENT XOL AMT',
    --                                           --narrative,
    --                                           v_trnt_gl_code,
    --                                           -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,    --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls,
    --                                           NULL,
    --                                           NULL,
    --                                           i.cmb_unit_code,
    --                                           i.cmb_location_code
    --                                          );
    --             v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                       ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
    --                                       'CLAIM PAYMENT XOL AMT',                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --
    --
    --         END LOOP;
    ----************************VAT************************
    --      IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --      THEN
    --         IF NVL (v_vat_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHVAT',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    ----RAISE_eRROR(v_vat_amt||' = '||v_vattowithhold_app_param);
    --            v_rec_count := v_rec_count + 1;

    --            IF     (   NVL (v_clmfee_garage_param, 'N') = 'Y'
    --                    OR NVL (v_vattowithhold_app_param, 'N') = 'Y'
    --                   )
    --               AND NVL (i.cpv_tran_type, 'CP') = 'CF'
    --            THEN
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    --                                        --v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,
    --
    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --            ELSE
    --               fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (v_vat_amt, 0), v_rnd),
    --                                         'CLAIM PAYMENT VAT AMT', --narrative,
    --                                         v_trnt_gl_code,
    --                                        --v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,
    --
    --                                         --i.cmb_brn_code,          --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --            END IF;
    --         END IF;
    --      END IF;

    ----************************VATTOWTH************************
    ----raise_error('v_vattowithhold_amnt='||v_vattowithhold_amnt);
    --      IF NVL (v_vattowithhold_amnt, 0) != 0
    --      THEN
    --         gin_interfaces_pkg.get_gl_acct_code
    --                     ('VATTOWTH',                   --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --         check_valid_gl_acc (v_trnt_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             i.cmb_scl_code
    --                            );
    ----RAISE_eRROR(v_trnt_gl_code||' = '||v_trnt_contra_gl_code);
    --         v_rec_count := v_rec_count + 1;
    --         fms_cheques_pkg.append_chq_trans
    --                                  (v_rec_count,
    --                                   ROUND (NVL (v_vattowithhold_amnt, 0),
    --                                          v_rnd),
    --                                   'CLAIM PAYMENT VATTOWTH AMT',
    --                                   --narrative,
    --                                   v_trnt_gl_code,
    --                                                  ---basv_trnt_contra_gl_code,
    ----v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
    --                                   v_org_code,            --crt_acc_org_code ,
    --                                   v_paymnt_brh_code,
    --
    --                                   --i.cmb_brn_code,          --v_brh_code,
    --                                   'C',                             --v_dr_cr,
    --                                   v_chq_dtls,
    --                                   NULL,
    --                                   NULL,
    --                                   i.cmb_unit_code,
    --                                   i.cmb_location_code
    --                                  );
    --      END IF;

    --      --************************WITHHOLDING TAX************************
    --      IF NVL (v_whtx_amt, 0) != 0
    --      THEN
    --         gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --         check_valid_gl_acc (v_trnt_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             i.cmb_scl_code
    --                            );
    --         v_rec_count := v_rec_count + 1;
    --         fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                           ROUND (NVL (v_whtx_amt, 0), v_rnd),
    --                                           'CLAIM PAYMENT WHTAX AMT',
    --                                           --narrative,
    --                                           v_trnt_gl_code,
    --                                           -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,    --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls,
    --                                           NULL,
    --                                           NULL,
    --                                           i.cmb_unit_code,
    --                                           i.cmb_location_code
    --                                          );
    --      END IF;

    --      --************************EXCISE DUTY************************
    --      IF NVL (v_exciseduty_amt, 0) != 0
    --      THEN
    --         gin_interfaces_pkg.get_gl_acct_code
    --                     ('EXDTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --         check_valid_gl_acc (v_trnt_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             i.cmb_scl_code
    --                            );
    --         v_rec_count := v_rec_count + 1;
    --         fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                           ROUND (NVL (v_exciseduty_amt, 0),
    --                                                  v_rnd
    --                                                 ),
    --                                           'CLAIM',               --narrative,
    --                                           v_trnt_gl_code,
    --                                           -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,    --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls
    --                                          );
    --      END IF;
    --
    --
    ----************************REINSURANCE************************
    --      FOR c_treaty_rec IN c_treaties
    --      LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND c_treaty_rec.TRPA_GL_ACCOUNT IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||c_treaty_rec.ACCOUNT_NAME);
    ----             END IF;
    --         IF c_treaty_rec.trt_man_amt <> 0
    --         THEN
    --            v_lvl := 'MAN';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --               v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --               IF v_trnt_contra_gl_code IS NULL
    --               THEN
    --                  v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_man_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --         END IF;

    --         --**************************** Update Quota Revision Amount***************************
    --         IF c_treaty_rec.trt_qs_amt <> 0
    --         THEN
    --            v_lvl := 'QST';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --               v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --               IF v_trnt_contra_gl_code IS NULL
    --               THEN
    --                  v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_gl_code,     -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'C',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                        (v_rec_count,
    --                                         ROUND (NVL (c_treaty_rec.trt_qs_amt,
    --                                                     v_rnd
    --                                                    )
    --                                               ),
    --                                            'CLAIM PAYMENT '
    --                                         || rev_type
    --                                         || '-'
    --                                         || v_lvl,                --narrative,
    --                                         v_trnt_contra_gl_code,
    --                                         -- crt_acc_number
    --                                         v_org_code,      --crt_acc_org_code ,
    --                                         v_paymnt_brh_code,      --v_brh_code,
    --                                         'D',                       --v_dr_cr,
    --                                         v_chq_dtls,
    --                                         NULL,
    --                                         NULL,
    --                                         i.cmb_unit_code,
    --                                         i.cmb_location_code
    --                                        );
    --         END IF;

    --         --**************************** Update FIRST SURPLUS Revision Amount***************************
    --         IF c_treaty_rec.trt_fst_amt <> 0
    --         THEN
    --            v_lvl := 'FSTSUP';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --               v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --               IF v_trnt_contra_gl_code IS NULL
    --               THEN
    --                  v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,      -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_fst_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --         END IF;

    --         --**************************** Update SECOND SURPLUS Revision Amount***************************
    --         IF c_treaty_rec.trt_sec_amt <> 0
    --         THEN
    --            v_lvl := 'SECSUP';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      c_treaty_rec.rei_local_forgn,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               -- IF NVL(v_trt_lvl,'T') = 'P' THEN
    --               v_trnt_contra_gl_code := c_treaty_rec.trpa_gl_account;

    --               IF v_trnt_contra_gl_code IS NULL
    --               THEN
    --                  v_trnt_contra_gl_code :=
    --                        gin_interfaces_pkg.sl_control_acc ('GIS', 'R', v_lvl);
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'C',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans
    --                                       (v_rec_count,
    --                                        ROUND (NVL (c_treaty_rec.trt_sec_amt,
    --                                                    v_rnd
    --                                                   )
    --                                              ),
    --                                           'CLAIM PAYMENT '
    --                                        || rev_type
    --                                        || '-'
    --                                        || v_lvl,                 --narrative,
    --                                        v_trnt_contra_gl_code,
    --                                        -- crt_acc_number
    --                                        v_org_code,       --crt_acc_org_code ,
    --                                        v_paymnt_brh_code,       --v_brh_code,
    --                                        'D',                        --v_dr_cr,
    --                                        v_chq_dtls,
    --                                        NULL,
    --                                        NULL,
    --                                        i.cmb_unit_code,
    --                                        i.cmb_location_code
    --                                       );
    --         END IF;
    --      END LOOP;

    --      --**************************** Update Facultative Revision Amount***************************
    --      FOR f IN c_facre
    --      LOOP
    ----             IF NVL(v_trt_lvl,'T') = 'P' AND f.AGN_ACC_NO IS NULL THEN
    ----                RAISE_ERROR('Reinsurance posting level has been set to Participant Level and Account for '||f.AGN_NAME);
    ----             END IF;
    --         IF f.cfrr_amount <> 0
    --         THEN
    --            v_lvl := 'FO';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               --IF NVL(v_trt_lvl,'T') = 'P' THEN
    --               v_trnt_contra_gl_code := f.agn_acc_no;

    --               IF v_trnt_contra_gl_code IS NULL
    --               THEN
    --                  v_trnt_contra_gl_code :=
    --                       gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, NULL);
    --               END IF;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (f.cfrr_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;
    --      END LOOP;

    --      BEGIN
    --         SELECT SUM (NVL (crpr_amt, 0))
    --           INTO v_ripool_amt
    --           FROM gin_clm_ri_pool_recoveries
    --          WHERE crpr_ggt_tran_no = v_trans_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('System could not retrieve FACRE RI apportionment ');
    --      END;

    --      IF v_ripool_amt <> 0                                 -- reinsurance pool
    --      THEN
    --         v_lvl := 'POOL';

    --         BEGIN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_when_others
    --                  (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                   || i.cmb_scl_code
    --                   || ' IS NOT DEFINED..'
    --                  );
    --         END;

    --         check_valid_gl_acc (v_trnt_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             i.cmb_scl_code
    --                            );
    --         check_valid_gl_acc (v_trnt_contra_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             i.cmb_scl_code
    --                            );
    --         v_rec_count := v_rec_count + 1;
    --         fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                           ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                              'CLAIM PAYMENT '
    --                                           || rev_type
    --                                           || '-'
    --                                           || v_lvl,              --narrative,
    --                                           v_trnt_gl_code,
    --                                           -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,    --v_brh_code,
    --                                           'C',                     --v_dr_cr,
    --                                           v_chq_dtls,
    --                                           NULL,
    --                                           NULL,
    --                                           i.cmb_unit_code,
    --                                           i.cmb_location_code
    --                                          );
    --         v_rec_count := v_rec_count + 1;
    --         fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                           ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                              'CLAIM PAYMENT '
    --                                           || rev_type
    --                                           || '-'
    --                                           || v_lvl,              --narrative,
    --                                           v_trnt_contra_gl_code,
    --                                           -- crt_acc_number
    --                                           v_org_code,    --crt_acc_org_code ,
    --                                           v_paymnt_brh_code,    --v_brh_code,
    --                                           'D',                     --v_dr_cr,
    --                                           v_chq_dtls,
    --                                           NULL,
    --                                           NULL,
    --                                           i.cmb_unit_code,
    --                                           i.cmb_location_code
    --                                          );
    --      END IF;

    --      IF gin_parameters_pkg.get_param_varchar ('REVISE_GL_ON_CLAIM_PYMT') =
    --                                                                           'Y'
    --      THEN
    --         rev_type := 'LRV';

    --         BEGIN
    --            SELECT   SUM (DECODE (trs_trtg_code,
    --                                  1001, NVL (ctrtr_trt_amt_pcur, 0),
    --                                  0
    --                                 )
    --                         ),
    --                     SUM (DECODE (trs_trtg_code,
    --                                  1003, NVL (ctrtr_trt_amt_pcur, 0),
    --                                  0
    --                                 )
    --                         ),
    --                     SUM (DECODE (trs_trtg_code,
    --                                  10041, NVL (ctrtr_trt_amt_pcur, 0),
    --                                  0
    --                                 )
    --                         ),
    --                     SUM (DECODE (trs_trtg_code,
    --                                  10042, NVL (ctrtr_trt_amt_pcur, 0),
    --                                  0
    --                                 )
    --                         ),
    --                     rei_local_forgn
    --                INTO v_trt_man_amt,
    --                     v_trt_qs_amt,
    --                     v_trt_fst_amt,
    --                     v_trt_sec_amt,
    --                     v_frgn_or_local
    --                FROM gin_clm_treaty_recoveries,
    --                     gin_treaties,
    --                     gin_treaty_setups
    --               WHERE ctrtr_trs_code = trs_code
    --                 AND ctrtr_cmb_claim_no = v_clmrg_claim_no
    --                 AND ctrtr_ggt_trans_no = v_trans_no
    --                 AND rei_code = ctrtr_rei_code
    --            GROUP BY rei_local_forgn;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               v_trt_man_amt := 0;
    --               v_trt_qs_amt := 0;
    --               v_trt_fst_amt := 0;
    --               v_trt_sec_amt := 0;
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                     (   'SYSTEM COULD NOT RETRIEVE TREATY RI APPORTIONMENT '
    --                      || ';'
    --                      || v_clmrg_claim_no
    --                      || ';'
    --                      || v_trans_no
    --                     );
    --         END;

    --         IF NVL (v_payment_amt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_payment_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-GROSS',        --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         IF v_trt_man_amt <> 0
    --         THEN
    --            v_lvl := 'MAN';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_man_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         --**************************** Update Quota Revision Amount***************************
    --         --RAISE_ERROR('v_trt_qs_amt='||v_trt_qs_amt);
    --         IF v_trt_qs_amt <> 0
    --         THEN
    --            v_lvl := 'QST';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            --  Raise_error(v_trnt_gl_code);
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_qs_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         --**************************** Update FIRST SURPLUS Revision Amount***************************
    --         IF v_trt_fst_amt <> 0
    --         THEN
    --            v_lvl := 'FSTSUP';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            -- v_trnt_contra_gl_code := fms_interfaces_pkg.sl_control_acc('GIS', 'R','FSTSUP') ;
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_fst_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         --**************************** Update SECOND SURPLUS Revision Amount***************************
    --         IF v_trt_sec_amt <> 0
    --         THEN
    --            v_lvl := 'SECSUP';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      v_frgn_or_local,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_sec_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         --**************************** Update Facultative Revision Amount***************************
    --         BEGIN
    --            SELECT SUM (NVL (cfrr_amount, 0))
    --              INTO v_trt_fac_amt
    --              FROM gin_clm_facre_recoveries
    --             WHERE cfrr_cmb_claim_no = v_clmrg_claim_no
    --               AND cfrr_ggt_trans_no = v_trans_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_when_others
    --                         ('SYSTEM COULD NOT RETRIEVE FACRE RI APPORTIONMENT ');
    --         END;

    --         IF v_trt_fac_amt <> 0
    --         THEN
    --            v_lvl := 'FO';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            -- v_trnt_contra_gl_code:=fms_interfaces_pkg.sl_control_acc('GIS', 'FO')  ;
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_trt_fac_amt,
    --                                                          v_rnd)
    --                                                    ),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;

    --         BEGIN
    --            SELECT SUM (NVL (crpr_amt, 0))
    --              INTO v_ripool_amt
    --              FROM gin_clm_ri_pool_recoveries
    --             WHERE crpr_ggt_tran_no = v_trans_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error
    --                         ('System could not retrieve FACRE RI apportionment ');
    --         END;

    --         IF v_ripool_amt <> 0
    --         THEN                                              -- reinsurance pool
    --            v_lvl := 'POOL';

    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_when_others
    --                     (   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
    --                      || i.cmb_scl_code
    --                      || ' IS NOT DEFINED..'
    --                     );
    --            END;

    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            check_valid_gl_acc (v_trnt_contra_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'D',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ripool_amt, v_rnd)),
    --                                                 'CLAIM PAYMENT '
    --                                              || rev_type
    --                                              || '-'
    --                                              || v_lvl,           --narrative,
    --                                              v_trnt_contra_gl_code,
    --                                              -- crt_acc_number
    --                                              v_org_code, --crt_acc_org_code ,
    --                                              v_paymnt_brh_code, --v_brh_code,
    --                                              'C',                  --v_dr_cr,
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;
    --      END IF;

    --      --****************COINSURANCE PAY FULL FOR LEADER COMBINED*************************
    --      IF NVL (i.cmb_coin_pay_type, 'O') = 'F'
    --      THEN
    --         IF NVL (v_ccop_amount, 0) != 0
    --         THEN
    --            SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
    --                                                      v_coin_client_type
    --                                                     )
    --              INTO v_trnt_contra_gl_code
    --              FROM DUAL;

    --            IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
    --                                                  v_org_code,
    --                                                  i.cmb_brn_code
    --                                                 ) = FALSE
    --            THEN
    --               raise_application_error (-20001,
    --                                           'COIN GL CONTROL A/C - '
    --                                        || v_trnt_contra_gl_code
    --                                        || ' UNDEFINED IN '
    --                                        || v_brh_name
    --                                        || ' CODE '
    --                                        || v_trnt_code
    --                                       );
    --            END IF;

    --            v_rec_count := v_rec_count + 1;
    --            fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                              ROUND (NVL (v_ccop_amount,
    --                                                          v_rnd)
    --                                                    ),
    --                                              'CLAIM',
    --                                              v_trnt_contra_gl_code,
    --                                              v_org_code,
    --                                              v_paymnt_brh_code,
    --                                              'D',
    --                                              v_chq_dtls,
    --                                              NULL,
    --                                              NULL,
    --                                              i.cmb_unit_code,
    --                                              i.cmb_location_code
    --                                             );
    --         END IF;
    --      END IF;

    ----************************************************************
    --      IF v_pay_method IN ('EFT', 'RTGS')
    --      THEN
    --         --RAISE_ERROR(v_net_amt||' ; '||ROUND (NVL (v_net_amt, 0), v_bcur_rnd));
    --         BEGIN
    ----               fms_cheques_pkg.create_reqn
    ----                  (
    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   --'gis claim',             --narrative V
    ----                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    ----                                                -- v_net_amt,     --cqr_amount
    ----                   i.cpv_payee,
    ----                   v_pay_method,
    ----                   NULL,
    ----                   v_bnk_bbr_pk,                                          --12
    ----                   i.cmb_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    ----                                                   ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   v_payee_eft_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   v_bnk_bbr_code,
    ----                   v_bnk_account,
    ----                   NULL,
    ----                   'N'                                           --v_auto_auth
    ----                  );
    --            fms_interfaces_pkg.create_eftrtgs_reqn
    --                (v_cqr_source,                                -- v_cqr_source,
    --                 i.cpv_voucher_no,                               -- v_cqr_ref,
    --                 i.cpv_cmb_claim_no,                            -- v_cqr_ref2,
    --                 TRUNC (SYSDATE),                           -- v_cqr_ref_date,
    --                 i.cpv_cmb_claim_no,                       -- v_cqr_narrative,
    --                 v_paymnt_brh_code,                         -- v_cqr_brh_code,
    --                 v_bct_brh_code,                        -- v_cqr_bct_brh_code,
    --                 ROUND (NVL (v_net_amt, 0), v_bcur_rnd),      -- v_cqr_amount,
    --                 i.cpv_payee,                                  -- v_cqr_payee,
    --                 v_pay_method,                            -- v_cqr_pay_method,
    --                 i.cmb_cur_code,                            -- v_cqr_cur_code,
    --                 i.cpv_cur_rate,                            ---i.cpv_cur_rate,
    --                 v_bct_code,                                               ---
    --                 fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)),
    --                 i.cpv_authorised_dt,
    --                 v_user_code,                                 -- v_cqr_req_by,
    --                 'GIS-CLAIM',                               -- v_cqr_pmt_type,
    --                 v_bnk_bbr_code,                   --v_payee_bank_branch_code,
    --                 v_bnk_account,                         --v_payee_bank_acc_no,
    --                 v_chq_dtls,                                  -- v_dtls_table,
    --                 v_payee_eft_dtls,                           --v_payee_eft_rec
    --                 NULL,                                --v_cqr_physical_address
    --                 NULL,                                 ---v_cqr_postal_address
    --                 v_trans_no,                               --v_itfc_trans_code
    --                 NULL,                                           --v_itfc_ref3
    --                 NULL,                                    --v_payee_source_pk,
    --                 NULL,                                  --v_payee_source_type,
    --                 'N',                                           --v_auto_auth,
    --                 NULL,                                          --v_num_val_1,
    --                 NULL,                                        ---v_invoice_no,
    --                 NULL,                                      ---v_invoice_date,
    --                 NULL,                                  ---v_auto_consolidate,
    --                 NULL,                                          ---v_batch_no,
    --                 NULL                                      ---v_payee_spr_code
    --                );
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error (   'ERROR ON CREATING PAYMENT REQUISITION < '
    ----                               || v_pay_method
    ----                               || '> FOR.'
    ----                               || i.cpv_payee
    ----                               || SQLERRM (SQLCODE)
    ----                              );
    --         END;
    --      ELSIF v_pay_method IN ('MOB')
    --      THEN
    --         BEGIN
    --            fms_cheques_pkg.create_reqn
    --                (v_cqr_source,
    --                 i.cpv_voucher_no,                                       --ref
    --                 i.cpv_cmb_claim_no,                                  -- ref2,
    --                 TRUNC (SYSDATE),
    --                 i.cpv_cmb_claim_no,
    --                 --'gis claim',             --narrative V
    --                 v_paymnt_brh_code,                          --i.cmb_brn_code,
    --                 v_bct_brh_code,
    --                 ROUND (NVL (v_net_amt, 0), v_bcur_rnd),          --cqr_amount
    --                 i.cpv_payee,
    --                 i.cmb_cur_code,
    --                 v_bct_code,
    --                 fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)),
    --                 i.cpv_authorised_dt,
    --                 v_user_code,                                --v_cqr_req_by  ,
    --                 'GIS-CLAIM',                                   -- pmt_type  ,
    --                 v_chq_dtls,
    --                 v_payee_mft_dtls,
    --                 NULL,
    --                 NULL,
    --                 NULL,
    --                 NULL,
    --                 v_mpt_code,
    --                 'N'                                             --v_auto_auth
    --                );
    --         END;
    --      ELSE
    --         BEGIN
    ----               fms_cheques_pkg.create_reqn
    ----                  (
    ----                  v_cqr_source,
    ----                   i.cpv_voucher_no,                                     --ref
    ----                   i.cpv_cmb_claim_no,                                -- ref2,
    ----                   TRUNC (SYSDATE),
    ----                   i.cpv_cmb_claim_no,
    ----                   --'GIS Claim',             --narrative V
    ----                   v_paymnt_brh_code,
    ----                   v_bct_brh_code,
    ----                   ROUND (NVL (v_net_amt, 0), v_rnd),             --cqr_amount
    ----                   i.cpv_payee,
    ----                   i.cpv_vchr_cur_code,
    ----                   v_bct_code,
    ----                   fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)
    ----                                                   ),
    ----                   i.cpv_authorised_dt,
    ----                   v_user_code,                              --v_cqr_req_by  ,
    ----                   'GIS-CLAIM',                                 -- pmt_type  ,
    ----                   v_chq_dtls,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   NULL,
    ----                   v_cqr_bnk_dtls,
    ----                   v_auto_auth
    ----                  );
    --            fms_interfaces_pkg.create_chq_reqn
    --               (v_cqr_source,
    --                i.cpv_voucher_no,                                        --ref
    --                i.cpv_cmb_claim_no,                                   -- ref2,
    --                TRUNC (SYSDATE),                                          ----
    --                i.cpv_cmb_claim_no,                                       ----
    --                --'GIS Claim',             --narrative V
    --                v_paymnt_brh_code,                                       -----
    --                v_bct_brh_code,                                           ----
    --                v_net_amt,                                                ----
    --                --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
    --                i.cpv_payee,                                              ----
    --                v_pay_method,                                    ---'CHQ',----
    --                v_cur_code,
    --                i.cpv_cur_rate,
    --                          --  --                             --i.cmb_cur_code,
    --                v_bct_code,                                                ---
    --                fms_interfaces_pkg.get_usercode (UPPER (i.cpv_authorised_by)),
    --                                                                          ----
    --                i.cpv_authorised_dt,                                     -----
    --                v_user_code,  ----                           --v_cqr_req_by  ,
    --                'GIS-CLAIM',  ----                              -- pmt_type  ,
    --                v_chq_dtls,                                               ----
    --                NULL,                                --v_cqr_physical_address,
    --                NULL,                                  --v_cqr_postal_address,
    --                NULL,                                    ---v_itfc_trans_code,
    --                NULL,                                           --v_itfc_ref3,
    --                NULL,                                     --v_payee_source_pk,
    --                NULL,                                   --v_payee_source_type,
    --                v_auto_auth,
    --                NULL,                                           --v_num_val_1,
    --                NULL,                                          --v_invoice_no,
    --                NULL,                                        --v_invoice_date,
    --                NULL,
    --                --v_auto_consolidate,
    --                NULL                                              --v_batch_no
    --               );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_application_error (-20001,
    --                                           'CREATE_REQN :- '
    --                                        || v_net_amt
    --                                        || ' $ '
    --                                        || v_trnt_code
    --                                        || ';'
    --                                        || v_trnt_gl_code
    --                                        || ';'
    --                                        || v_trnt_contra_gl_code
    --                                        || SQLERRM (SQLCODE)
    --                                       );
    --         END;
    --      END IF;
    --   END LOOP;

    --   IF v_rec_count = 0
    --   THEN
    --      raise_application_error (-20001,
    --                                  'CLM REQN NOT CREATED FOR CLAIM # '
    --                               || v_clmrg_claim_no
    --                              );
    --   END IF;
    --END;
    --   PROCEDURE process_clm_creditnote (
    --      v_clmrg_claim_no        VARCHAR2,
    --      v_trans_no              NUMBER,
    --      v_user_name             VARCHAR2,
    --      v_auth_date        IN   DATE DEFAULT TRUNC (SYSDATE)
    --   )
    --   IS
    --      --v_cmb_claim_no          NUMBER;
    --      CURSOR c_claim
    --      IS
    --         SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
    --                gin_clm_payment_vouchers.cpv_voucher_no,
    --                gin_clm_payment_vouchers.cpv_date,
    --                gin_clm_payment_vouchers.cpv_authorised,
    --                gin_clm_payment_vouchers.cpv_authorised_by,
    --                cpv_authorised_dt, gin_clm_payment_vouchers.cpv_amount,
    --                gin_clm_payment_vouchers.cpv_payee,
    --                gin_clm_payment_vouchers.cpv_raise_by,
    --                gin_claim_master_bookings.cmb_cur_code,
    --                gin_claim_master_bookings.cmb_brn_code,
    --                gin_clm_payment_vouchers.cpv_drcr_no, cpv_comp_retention,
    --                cpv_man_amount, cpv_quota_amount, cpv_fstsup_amount,
    --                cpv_secsup_amount, cpv_facre_amount,
    --                SUBSTR (cpv_tran_type, 0, 2) cpv_tran_type,
    --                gin_claim_master_bookings.cmb_scl_code, cpv_vat_amnt,
    --                cpv_whtx_amnt, cpv_net_paid, cpv_agnt_agent_code,
    --                cpv_account_type
    --           FROM gin_claim_master_bookings, gin_clm_payment_vouchers
    --          WHERE cmb_claim_no = cpv_cmb_claim_no
    --            AND cmb_claim_no = v_clmrg_claim_no
    --            AND
    --                --CPV_AUTHORISED = 'Y' AND
    --                cpv_ggt_trans_no = v_trans_no;
    --
    --      CURSOR cur_part_amnts
    --      IS
    --         SELECT   NVL (ctrtr_trt_amt_pcur, 0) gross_amt,
    --                  DECODE (trpa_part_type,
    --                          'D', trpa_agnt_agent_code,
    --                          'B', trpa_br_agn_code
    --                         ) trpa_agnt_agent_code,
    --                  DECODE (trpa_part_type,
    --                          'D', trpa_agnt_sht_desc,
    --                          'B', trpa_br_agn_sht_desc
    --                         ) trpa_agnt_sht_desc,
    --                  trpa_comp_rate, trpa_gl_account,
    --                  ROUND (trpa_comp_rate / 100 * NVL (ctrtr_trt_amt_pcur, 0)
    --                        ) part_amount,
    --                  trs_trtg_code
    --             FROM gin_clm_treaty_recoveries,
    --                  gin_treaty_setups,
    --                  gin_treaty_participants,
    --                  gin_treaties
    --            WHERE ctrtr_rei_code = rei_code
    --              AND trpa_rei_code = rei_code
    --              AND ctrtr_trs_code = trs_code
    --              AND ctrtr_cmb_claim_no = v_clmrg_claim_no
    --              AND ctrtr_ggt_trans_no = v_trans_no
    --         GROUP BY NVL (ctrtr_trt_amt_pcur, 0),
    --                  DECODE (trpa_part_type,
    --                          'D', trpa_agnt_agent_code,
    --                          'B', trpa_br_agn_code
    --                         ),
    --                  DECODE (trpa_part_type,
    --                          'D', trpa_agnt_sht_desc,
    --                          'B', trpa_br_agn_sht_desc
    --                         ),
    --                  trpa_comp_rate,
    --                  trpa_gl_account,
    --                  ROUND (trpa_comp_rate / 100 * NVL (ctrtr_trt_amt_pcur, 0)),
    --                  trs_trtg_code
    --          HAVING ROUND (trpa_comp_rate / 100 * NVL (ctrtr_trt_amt_pcur, 0)
    --                        ) <>0;
    --
    --      CURSOR cur_facre
    --      IS
    --         SELECT NVL (cfrr_amount, 0) cfrr_amount, agn_acc_no, agn_code,
    --                agn_sht_desc
    --           FROM gin_clm_facre_recoveries, tqc_agencies
    --          WHERE cfrc_agnt_agent_code = agn_code
    --            AND cfrr_cmb_claim_no = v_clmrg_claim_no
    --            AND cfrr_ggt_trans_no = v_trans_no;
    --
    --      vgl_trans               fms_vouchers_pkg.tgl_rec_type;
    --      v_user_code             NUMBER;
    --      exc_user_error          EXCEPTION;
    --      v_brh_name              VARCHAR2 (100);
    --      v_crt_acc_number        VARCHAR2 (20);
    --      v_crt_acc_org_code      NUMBER;
    --      v_trnt_gl_code          VARCHAR2 (20);
    --      v_trnt_contra_gl_code   VARCHAR2 (20);
    --      v_trnt_code             VARCHAR2 (20);
    --      v_acc_type              VARCHAR2 (20);
    --      v_cqr_source            NUMBER;
    --      v_rec_count             NUMBER                        := 0;
    --      v_org_code              NUMBER;
    --      v_exch_rate             NUMBER;
    --      v_rnd                   NUMBER;
    --      v_bcur_rnd              NUMBER;
    --      v_cur_code              NUMBER;
    --      v_paymnt_brh_code       NUMBER;
    --      v_trt_man_amt           NUMBER;
    --      v_trt_qs_amt            NUMBER;
    --      v_trt_fst_amt           NUMBER;
    --      v_trt_sec_amt           NUMBER;
    --      v_trt_fac_amt           NUMBER;
    --      v_lvl                   VARCHAR2 (15);
    --      rev_type                VARCHAR2 (15);
    --      v_control_acc           VARCHAR2 (30);
    --      v_client_type           VARCHAR2 (5);
    --      v_act_code              NUMBER;
    --      v_agnt_sht_desc         VARCHAR2 (25);
    --      vgl_code                NUMBER;
    --      v_description           VARCHAR2 (25)          := 'CLAIM CREDIT PAYMENT';
    --   BEGIN
    ----  raise_error(v_clmrg_claim_no||';'||v_trans_no);
    --      BEGIN
    --         SELECT cmb_cur_code
    --           INTO v_cur_code
    --           FROM gin_claim_master_bookings
    --          WHERE cmb_claim_no = v_clmrg_claim_no;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Claim No does not exist.');
    --      END;
    --
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));
    --
    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;
    --
    --      --vgl_trans.delete;
    --      v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --      v_rec_count := -1;
    --
    --      FOR i IN c_claim
    --      LOOP
    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
    --         v_paymnt_brh_code := (i.cmb_brn_code);
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --
    --         IF ROUND (NVL (i.cpv_amount, 0), v_bcur_rnd) !=
    --               ROUND (  NVL (i.cpv_vat_amnt, 0)
    --                      + NVL (i.cpv_whtx_amnt, 0)
    --                      + NVL (i.cpv_net_paid, 0),
    --                      v_bcur_rnd
    --                     )
    --         THEN
    --            raise_application_error
    --                               (-20001,
    --                                   'THE NET CHEQUE AMOUNT '
    --                                || NVL (i.cpv_net_paid, 0)
    --                                || ' PLUS VAT '
    --                                || NVL (i.cpv_vat_amnt, 0)
    --                                || ' AND WHTTAX '
    --                                || NVL (i.cpv_whtx_amnt, 0)
    --                                || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                               );
    --         END IF;
    --
    --         IF i.cpv_tran_type = 'CF'
    --         THEN
    --            rev_type := 'CF';
    --         ELSE
    --            rev_type := 'CP';
    --         END IF;
    --
    --         --, CPV_ACCOUNT_TYPE
    --         IF NVL (i.cpv_account_type, 0) = 'D'
    --         THEN
    --            v_client_type := 'D';
    --         ELSIF NVL (i.cpv_account_type, 0) = 'M'
    --         THEN
    --            v_client_type := 'M';                              -- FOR MEDICAL
    --         ELSE
    --            BEGIN
    --               SELECT agn_act_code, agn_sht_desc
    --                 INTO v_act_code, v_agnt_sht_desc
    --                 FROM tqc_agencies
    --                WHERE agn_code = i.cpv_agnt_agent_code;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  raise_application_error (-20021,
    --                                              'AGENT - '
    --                                           || i.cpv_agnt_agent_code
    --                                           || ' NOT FOUND '
    --                                          );
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20022,
    --                                           'AGENT INFO ' || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    --
    --            IF v_act_code IN (2, 9, 10, 16)
    --            THEN
    --               v_client_type := 'A';
    --            ELSIF v_act_code = 3
    --            THEN
    --               v_client_type := 'B';
    --            ELSIF v_act_code = 4
    --            THEN
    --               v_client_type := 'FI';
    --            ELSIF v_act_code = 5
    --            THEN
    --               v_client_type := 'I';
    --            ELSIF v_act_code = 6
    --            THEN
    --               v_client_type := 'R';
    --            ELSIF v_act_code = 7
    --            THEN
    --               v_client_type := 'FO';
    --            ELSE
    --               raise_application_error (-20001,
    --                                           'UNDEFINED ACCOUNT TYPE - '
    --                                        || v_act_code
    --                                        || ' -FOR AGENT '
    --                                        || v_agnt_sht_desc
    --                                        || 'i.CPV_ACCOUNT_TYPE '
    --                                        || i.cpv_account_type
    --                                        || 'v_clmrg_claim_no ='
    --                                        || v_clmrg_claim_no
    --                                       );
    --            END IF;
    --         END IF;
    --
    --         --RAISE_ERROR(i.CPV_ACCOUNT_TYPE||'='||v_client_type);
    --         IF v_client_type IS NULL
    --         THEN
    --            raise_application_error (-20023, 'CANNOT POST NULL CLIENT TYPE');
    --         ELSIF v_client_type = 'M'
    --         THEN                                             -- PICK THE SUSP A/C
    --            gin_interfaces_pkg.get_gl_acct_code
    --                      ('CPM',                       --v_trnt_type IN VARCHAR2,
    --                       NULL,         --i.cmb_scl_code, --v_scl_code IN NUMBER,
    --                       'U',                      --     v_app_lvl IN VARCHAR2,
    --                       NULL,         --          v_btr_trans_code IN VARCHAR2,
    --                       NULL,
    --                       --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                       v_trnt_code,      --          v_trnt_code OUT VARCHAR2,
    --                       v_control_acc, --          v_trnt_gl_code OUT VARCHAR2,
    --                       v_trnt_contra_gl_code
    --                      --          v_trnt_contra_gl_code OUT VARCHAR2
    --                      );
    --         ELSE
    --            v_control_acc :=
    --                     fms_interfaces_pkg.sl_control_acc ('GIS', v_client_type);
    --         END IF;
    --
    --         --RAISE_ERROR(i.CPV_ACCOUNT_TYPE||'='||v_client_type||';'||v_trnt_code||';v_trnt_gl_code='||v_trnt_gl_code||';'||v_trnt_contra_gl_code);
    --         IF NVL (i.cpv_amount, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    ----            Get_Gl_Code (rev_type,                ---'CP', --CLAIM PAID NORMAL
    ----                                 i.cmb_scl_code,
    ----                                 'U',                         --v_app_lvl IN VARCHAR2,
    ----                                 v_trnt_code,                                 -- OUT ,
    ----                                 v_trnt_gl_code,                               --OUT ,
    ----                                 v_trnt_contra_gl_code                           --OUT
    ----                                );
    --            v_rec_count := v_rec_count + 2;
    --
    --            BEGIN
    --               fms_vouchers_pkg.append_gl_trans
    --                            (v_rec_count,
    --                             'GL TRANS' || v_trnt_code,          --v_narrative
    --                             ABS (ROUND (NVL (i.cpv_amount, 0), v_bcur_rnd)),
    --
    --                             --v_amount
    --                             'D',                                     --v_drcr
    --                             v_trnt_gl_code,                      --v_account1
    --                             v_control_acc, --i.GLTRAN_CONTRA_ACC,--v_account2
    --                             v_paymnt_brh_code,                     --v_branch
    --                             vgl_trans
    --                            );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20026,
    --                                              'ERROR POSTING GL TRANS FOR '
    --                                           || v_trnt_code
    --                                           || ':- '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    --         END IF;
    --
    --         IF NVL (i.cpv_vat_amnt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHVAT',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    ----            Get_Gl_Code ('WTHVAT',                         --CLAIM PAID NORMAL
    ----                         i.cmb_scl_code,
    ----                         'U',                         --v_app_lvl IN VARCHAR2,
    ----                         v_trnt_code,                                 -- OUT ,
    ----                         v_trnt_gl_code,                               --OUT ,
    ----                         v_trnt_contra_gl_code                           --OUT
    ----                        );
    --            v_rec_count := v_rec_count + 2;
    --
    --            BEGIN
    --               fms_vouchers_pkg.append_gl_trans
    --                            (v_rec_count,
    --                             'CLAIM CR ' || v_trnt_code,         --v_narrative
    --                             ABS (ROUND (NVL (i.cpv_vat_amnt, 0), v_bcur_rnd)),
    --
    --                             --v_amount
    --                             'C',                                     --v_drcr
    --                             v_trnt_gl_code,                      --v_account1
    --                             v_control_acc, --i.GLTRAN_CONTRA_ACC,--v_account2
    --                             v_paymnt_brh_code,                     --v_branch
    --                             vgl_trans
    --                            );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20026,
    --                                              'ERROR POSTING GL TRANS FOR '
    --                                           || v_trnt_code
    --                                           || ':- '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    --         END IF;
    --
    --         IF NVL (i.cpv_whtx_amnt, 0) != 0
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHTPY',                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      'U',                       --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --            check_valid_gl_acc (v_trnt_gl_code,
    --                                v_org_code,
    --                                v_paymnt_brh_code,
    --                                v_brh_name,
    --                                v_trnt_code,
    --                                i.cmb_scl_code
    --                               );
    ----            Get_Gl_Code ('WTHTPY',                         --CLAIM PAID NORMAL
    ----                         i.cmb_scl_code,
    ----                         'U',                         --v_app_lvl IN VARCHAR2,
    ----                         v_trnt_code,                                 -- OUT ,
    ----                         v_trnt_gl_code,                               --OUT ,
    ----                         v_trnt_contra_gl_code                           --OUT
    ----                        );
    --            v_rec_count := v_rec_count + 2;
    --
    --            BEGIN
    --               fms_vouchers_pkg.append_gl_trans
    --                            (v_rec_count,
    --                             'CLAIM CR ' || v_trnt_code,         --v_narrative
    --                             ABS (ROUND (NVL (i.cpv_whtx_amnt, 0), v_bcur_rnd)),
    --
    --                             --v_amount
    --                             'C',                                     --v_drcr
    --                             v_trnt_gl_code,                      --v_account1
    --                             v_control_acc, --i.GLTRAN_CONTRA_ACC,--v_account2
    --                             v_paymnt_brh_code,                     --v_branch
    --                             vgl_trans
    --                            );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20026,
    --                                              'ERROR POSTING GL TRANS FOR '
    --                                           || v_trnt_code
    --                                           || ':- '
    --                                           || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    --         END IF;
    --
    --         --*************************POST TREATY REVISIONS***************************************
    --         FOR cur_part_amnts_rec IN cur_part_amnts
    --         LOOP
    --            IF cur_part_amnts_rec.trs_trtg_code = 1001
    --            THEN
    --               v_lvl := 'MAN';
    --            ELSIF cur_part_amnts_rec.trs_trtg_code = 1003
    --            THEN
    --               v_lvl := 'QST';
    --            ELSIF cur_part_amnts_rec.trs_trtg_code = 10041
    --            THEN
    --               v_lvl := 'FSTSUP';
    --            ELSIF cur_part_amnts_rec.trs_trtg_code = 10042
    --            THEN
    --               v_lvl := 'SECSUP';
    --            END IF;
    --        --RAISE_ERROR('rev_type'||rev_type||'v_trnt_gl_code'||v_trnt_gl_code);
    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    ----                Get_Gl_Code (rev_type,i.cmb_scl_code, v_lvl,v_trnt_code,
    ----                    v_trnt_gl_code,v_trnt_contra_gl_code);
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'Claim Payment Mandatory Treaty Amount Revenue Item for Sub Class '
    --                      || i.cmb_scl_code
    --                      || ' is not defined..'
    --                     );
    --            END;
    --
    --            --RAISE_ERROR('HERE=='||v_trt_lvl||';'||cur_part_amnts_rec.TRPA_GL_ACCOUNT||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code);
    --            IF v_trnt_contra_gl_code IS NULL
    --            THEN
    --               v_trnt_contra_gl_code := cur_part_amnts_rec.trpa_gl_account;
    --            END IF;
    --
    --            v_rec_count := v_rec_count + 2;
    --
    --            IF NVL (cur_part_amnts_rec.part_amount, 0) <> 0
    --            THEN
    --               BEGIN
    --                  fms_vouchers_pkg.append_gl_trans
    --                     (v_rec_count,
    --                      'CLAIM CR ' || v_trnt_code,                --v_narrative
    --                      ABS (ROUND (NVL (cur_part_amnts_rec.part_amount, 0),
    --                                  v_bcur_rnd
    --                                 )
    --                          ),                                        --v_amount
    --                      'C',                                            --v_drcr
    --                      v_trnt_gl_code,                             --v_account1
    --                      v_trnt_contra_gl_code,
    --                      --i.GLTRAN_CONTRA_ACC,--v_account2
    --                      v_paymnt_brh_code,                            --v_branch
    --                      vgl_trans
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || v_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END IF;
    --         END LOOP;
    --
    --         --**************************** Update Facultative Revision Amount***************************
    --         FOR cur_facre_rec IN cur_facre
    --         LOOP
    --            v_lvl := 'FO';
    --
    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    ----                Get_Gl_Code (rev_type,i.cmb_scl_code, v_lvl,v_trnt_code, v_trnt_gl_code,v_trnt_contra_gl_code);
    --               v_trnt_contra_gl_code :=
    --                               fms_interfaces_pkg.sl_control_acc ('GIS', 'FO');
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'Claim Payment Facultative Out Revenue Item for  Sub Class '
    --                      || i.cmb_scl_code
    --                      || ' is not defined..'
    --                     );
    --            END;
    --
    --            --  RAISE_ERROR(v_trnt_gl_code||';'||v_trnt_contra_gl_code||';'||cur_facre_rec.AGN_ACC_NO);
    --            IF v_trnt_contra_gl_code IS NULL
    --            THEN
    --               v_trnt_contra_gl_code := cur_facre_rec.agn_acc_no;
    --            END IF;
    --
    --            v_rec_count := v_rec_count + 2;
    --
    --            IF NVL (cur_facre_rec.cfrr_amount, 0) <> 0
    --            THEN
    --               BEGIN
    --                  fms_vouchers_pkg.append_gl_trans
    --                     (v_rec_count,
    --                      'CLAIM CR ' || v_trnt_code,                --v_narrative
    --                      ABS (ROUND (NVL (cur_facre_rec.cfrr_amount, 0),
    --                                  v_bcur_rnd
    --                                 )
    --                          ),                                        --v_amount
    --                      'C',                                            --v_drcr
    --                      v_trnt_gl_code,                             --v_account1
    --                      v_trnt_contra_gl_code,
    --                      --i.GLTRAN_CONTRA_ACC,--v_account2
    --                      v_paymnt_brh_code,                            --v_branch
    --                      vgl_trans
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || v_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END IF;
    --         END LOOP;
    --
    ----************************************************************
    --         vgl_code :=
    --            fms_vouchers_pkg.update_vgl
    --                                      ('GIS CLAIMS TRANS', --V_BTC_DESCRIPTION
    --                                       'JV',            --V_BTC_TYPE varchar2,
    --                                       v_paymnt_brh_code,
    --                                       --V_BRH_CODE number,
    --                                       v_auth_date,
    --                                       NVL (   v_description
    --                                            || ' / '
    --                                            || v_clmrg_claim_no
    --                                            || ' / '
    --                                            || i.cpv_voucher_no,
    --                                            'GIS CLAIMS TRANSACTIONS VOUCHER'
    --                                           ),
    --
    --                                       --V_DESCRIPTION varchar2,
    --                                       'GIS',                --V_REF varchar2,
    --                                       v_user_code,      --V_RAISED_BY number,
    --                                       i.cmb_cur_code,
    --                                       --V_CUR_CODE number,
    --                                       vgl_trans
    --                                      --V_TRANS IN tgl_rec_type
    --                                      );
    --         -- RAISE_ERROR('==HERE==HERE==');
    --         fms_interfaces_pkg.post_je (vgl_code, v_user_code);
    --      END LOOP;
    --
    --      IF v_rec_count = 0
    --      THEN
    --         raise_application_error
    --                       (-20001,
    --                           'CLM CREDIT NOTE VOUCHER NOT CREATED FOR CLAIM # '
    --                        || v_clmrg_claim_no
    --                       );
    --      END IF;
    --   --RAISE_APPLICATION_ERROR (-20001, ' &^&*#$^&*#'  );
    ----   EXCEPTION
    ----      WHEN exc_user_error
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                     'THE SPECIFIED USERNAME ( '
    ----                                  || v_user_name
    ----                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    ----                                 );
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                     'ERROR CREATING REQUISITION :- '
    ----                                  || SQLERRM (SQLCODE)
    ----                                 );
    --   END;

    --gin_interfaces_pkg.process_clm_creditnote

    PROCEDURE process_clm_creditnote (
        v_clmrg_claim_no      VARCHAR2,
        v_trans_no            NUMBER,
        v_user_name           VARCHAR2,
        v_auth_date        IN DATE DEFAULT TRUNC (SYSDATE))
    IS
        --v_cmb_claim_no          NUMBER;
        CURSOR c_claim IS
            SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
                   gin_clm_payment_vouchers.cpv_voucher_no,
                   gin_clm_payment_vouchers.cpv_date,
                   gin_clm_payment_vouchers.cpv_authorised,
                   gin_clm_payment_vouchers.cpv_authorised_by,
                   cpv_authorised_dt,
                   gin_clm_payment_vouchers.cpv_amount,
                   gin_clm_payment_vouchers.cpv_payee,
                   gin_clm_payment_vouchers.cpv_raise_by,
                   gin_claim_master_bookings.cmb_cur_code,
                   gin_claim_master_bookings.cmb_brn_code,
                   gin_clm_payment_vouchers.cpv_drcr_no,
                   cpv_comp_retention,
                   cpv_man_amount,
                   cpv_quota_amount,
                   cpv_fstsup_amount,
                   cpv_secsup_amount,
                   cpv_facre_amount,
                   SUBSTR (cpv_tran_type, 0, 2)     cpv_tran_type,
                   gin_claim_master_bookings.cmb_scl_code,
                   cpv_vat_amnt,
                   cpv_whtx_amnt,
                   cpv_net_paid,
                   cpv_agnt_agent_code,
                   cpv_account_type,
                   cpv_tran_type                    cpv_tran_types
              FROM gin_claim_master_bookings, gin_clm_payment_vouchers
             WHERE     cmb_claim_no = cpv_cmb_claim_no
                   AND cmb_claim_no = v_clmrg_claim_no
                   AND --CPV_AUTHORISED = 'Y' AND
                       cpv_ggt_trans_no = v_trans_no;

        CURSOR cur_part_amnts IS
              SELECT NVL (ctrtr_trt_amt_pcur, 0)
                         gross_amt,
                     DECODE (trpa_part_type,
                             'D', trpa_agnt_agent_code,
                             'B', trpa_br_agn_code)
                         trpa_agnt_agent_code,
                     DECODE (trpa_part_type,
                             'D', trpa_agnt_sht_desc,
                             'B', trpa_br_agn_sht_desc)
                         trpa_agnt_sht_desc,
                     trpa_comp_rate,
                     trpa_gl_account,
                     ROUND (trpa_comp_rate / 100 * NVL (ctrtr_trt_amt_pcur, 0))
                         part_amount,
                     trs_trtg_code
                FROM gin_clm_treaty_recoveries,
                     gin_treaty_setups,
                     gin_treaty_participants,
                     gin_treaties
               WHERE     ctrtr_rei_code = rei_code
                     AND trpa_rei_code = rei_code
                     AND ctrtr_trs_code = trs_code
                     AND ctrtr_cmb_claim_no = v_clmrg_claim_no
                     AND ctrtr_ggt_trans_no = v_trans_no
            GROUP BY NVL (ctrtr_trt_amt_pcur, 0),
                     DECODE (trpa_part_type,
                             'D', trpa_agnt_agent_code,
                             'B', trpa_br_agn_code),
                     DECODE (trpa_part_type,
                             'D', trpa_agnt_sht_desc,
                             'B', trpa_br_agn_sht_desc),
                     trpa_comp_rate,
                     trpa_gl_account,
                     ROUND (
                         trpa_comp_rate / 100 * NVL (ctrtr_trt_amt_pcur, 0)),
                     trs_trtg_code
              HAVING ROUND (
                         trpa_comp_rate / 100 * NVL (ctrtr_trt_amt_pcur, 0)) <>
                     0;

        CURSOR cur_facre IS
            SELECT NVL (cfrr_amount, 0)     cfrr_amount,
                   agn_acc_no,
                   agn_code,
                   agn_sht_desc
              FROM gin_clm_facre_recoveries, tqc_agencies
             WHERE     cfrc_agnt_agent_code = agn_code
                   AND cfrr_cmb_claim_no = v_clmrg_claim_no
                   AND cfrr_ggt_trans_no = v_trans_no;

        vgl_trans               fms_vouchers_pkg.tgl_rec_type;
        v_user_code             NUMBER;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_trt_man_amt           NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (15);
        rev_type                VARCHAR2 (15);
        v_control_acc           VARCHAR2 (30);
        v_client_type           VARCHAR2 (5);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (25);
        vgl_code                NUMBER;
        v_description           VARCHAR2 (25) := 'CLAIM CREDIT PAYMENT';
    BEGIN
        -- raise_error(v_clmrg_claim_no||';'||v_trans_no);
        BEGIN
            SELECT cmb_cur_code
              INTO v_cur_code
              FROM gin_claim_master_bookings
             WHERE cmb_claim_no = v_clmrg_claim_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Claim No does not exist.');
        END;

        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        --vgl_trans.delete;
        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
        v_rec_count := -1;

        FOR i IN c_claim
        LOOP
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
            v_paymnt_brh_code := (i.cmb_brn_code);
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');

            IF ROUND (NVL (i.cpv_amount, 0), v_bcur_rnd) !=
               ROUND (
                     NVL (i.cpv_vat_amnt, 0)
                   + NVL (i.cpv_whtx_amnt, 0)
                   + NVL (i.cpv_net_paid, 0),
                   v_bcur_rnd)
            THEN
                raise_application_error (
                    -20001,
                       'THE NET CHEQUE AMOUNT '
                    || NVL (i.cpv_net_paid, 0)
                    || ' PLUS VAT '
                    || NVL (i.cpv_vat_amnt, 0)
                    || ' AND WHTTAX '
                    || NVL (i.cpv_whtx_amnt, 0)
                    || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..');
            END IF;

            IF i.cpv_tran_type = 'CF'
            THEN
                rev_type := 'CF';
            ELSE
                rev_type := 'CP';
            END IF;

            --, CPV_ACCOUNT_TYPE
            IF NVL (i.cpv_account_type, 0) = 'D'
            THEN
                v_client_type := 'D';
            ELSIF NVL (i.cpv_account_type, 0) = 'M'
            THEN
                v_client_type := 'M';                           -- FOR MEDICAL
            ELSE
                BEGIN
                    SELECT agn_act_code, agn_sht_desc
                      INTO v_act_code, v_agnt_sht_desc
                      FROM tqc_agencies
                     WHERE agn_code = i.cpv_agnt_agent_code;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_application_error (
                            -20021,
                               'AGENT - '
                            || i.cpv_agnt_agent_code
                            || ' NOT FOUND ');
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20022,
                            'AGENT INFO ' || SQLERRM (SQLCODE));
                END;

                IF v_act_code IN (2,
                                  9,
                                  10,
                                  16)
                THEN
                    v_client_type := 'A';
                ELSIF v_act_code = 3
                THEN
                    v_client_type := 'B';
                ELSIF v_act_code = 4
                THEN
                    v_client_type := 'FI';
                ELSIF v_act_code = 5
                THEN
                    v_client_type := 'I';
                ELSIF v_act_code = 6
                THEN
                    v_client_type := 'R';
                ELSIF v_act_code = 7
                THEN
                    v_client_type := 'FO';
                ELSE
                    raise_application_error (
                        -20001,
                           'UNDEFINED ACCOUNT TYPE - '
                        || v_act_code
                        || ' -FOR AGENT '
                        || v_agnt_sht_desc
                        || 'i.CPV_ACCOUNT_TYPE '
                        || i.cpv_account_type
                        || 'v_clmrg_claim_no ='
                        || v_clmrg_claim_no);
                END IF;
            END IF;

            --RAISE_ERROR(i.CPV_ACCOUNT_TYPE||'='||v_client_type);
            IF v_client_type IS NULL
            THEN
                raise_application_error (-20023,
                                         'CANNOT POST NULL CLIENT TYPE');
            ELSIF v_client_type = 'M'
            THEN                                          -- PICK THE SUSP A/C
                gin_interfaces_pkg.get_gl_acct_code ('CPM', --v_trnt_type IN VARCHAR2,
                                                     NULL, --i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_control_acc, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
            ELSE
                v_control_acc :=
                    fms_interfaces_pkg.sl_control_acc ('GIS', v_client_type);
            END IF;

            --RAISE_ERROR(i.CPV_ACCOUNT_TYPE||'='||v_client_type||';'||v_trnt_code||';v_trnt_gl_code='||v_trnt_gl_code||';'||v_trnt_contra_gl_code);
            IF NVL (i.cpv_amount, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code (rev_type, --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                --            Get_Gl_Code (rev_type,                ---'CP', --CLAIM PAID NORMAL
                --                                 i.cmb_scl_code,
                --                                 'U',                         --v_app_lvl IN VARCHAR2,
                --                                 v_trnt_code,                                 -- OUT ,
                --                                 v_trnt_gl_code,                               --OUT ,
                --                                 v_trnt_contra_gl_code                           --OUT
                --                                );
                v_rec_count := v_rec_count + 2;

                --RAISE_ERROR('v_control_acc '||v_control_acc||'i.cmb_scl_code'||i.cmb_scl_code);


                BEGIN
                    --RAISE_eRROR('CHECKING THIS FIRST'||'TYPE='||i.cpv_tran_types||'v_trnt_gl_code='||v_trnt_gl_code||'v_control_acc='||v_control_acc);
                    IF i.cpv_tran_types IN ('CFI', 'CPI')
                    THEN
                        fms_vouchers_pkg.append_gl_trans (
                            v_rec_count,
                            'GL TRANS' || v_trnt_code,           --v_narrative
                            ABS (ROUND (NVL (i.cpv_amount, 0), v_bcur_rnd)),
                            --v_amount
                            'C',                                      --v_drcr
                            v_trnt_gl_code,                       --v_account1
                            v_control_acc,  --i.GLTRAN_CONTRA_ACC,--v_account2
                            v_paymnt_brh_code,                      --v_branch
                            vgl_trans);
                    ELSE
                        fms_vouchers_pkg.append_gl_trans (
                            v_rec_count,
                            'GL TRANS' || v_trnt_code,           --v_narrative
                            ABS (ROUND (NVL (i.cpv_amount, 0), v_bcur_rnd)),
                            --v_amount
                            'D',                                      --v_drcr
                            v_trnt_gl_code,                       --v_account1
                            v_control_acc,  --i.GLTRAN_CONTRA_ACC,--v_account2
                            v_paymnt_brh_code,                      --v_branch
                            vgl_trans);
                    END IF;
                --            EXCEPTION
                --               WHEN OTHERS
                --               THEN
                --                  raise_application_error (-20026,
                --                                              'ERROR POSTING GL TRANS FOR '
                --                                           || v_trnt_code
                --                                           || ':- '
                --                                           || SQLERRM (SQLCODE)
                --                                          );
                END;
            END IF;

            IF NVL (i.cpv_vat_amnt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('WTHVAT', --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                --            Get_Gl_Code ('WTHVAT',                         --CLAIM PAID NORMAL
                --                         i.cmb_scl_code,
                --                         'U',                         --v_app_lvl IN VARCHAR2,
                --                         v_trnt_code,                                 -- OUT ,
                --                         v_trnt_gl_code,                               --OUT ,
                --                         v_trnt_contra_gl_code                           --OUT
                --                        );
                v_rec_count := v_rec_count + 2;

                BEGIN
                    fms_vouchers_pkg.append_gl_trans (
                        v_rec_count,
                        'CLAIM CR ' || v_trnt_code,              --v_narrative
                        ABS (ROUND (NVL (i.cpv_vat_amnt, 0), v_bcur_rnd)),
                        --v_amount
                        'C',                                          --v_drcr
                        v_trnt_gl_code,                           --v_account1
                        v_control_acc,      --i.GLTRAN_CONTRA_ACC,--v_account2
                        v_paymnt_brh_code,                          --v_branch
                        vgl_trans);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20026,
                               'ERROR POSTING GL TRANS FOR '
                            || v_trnt_code
                            || ':- '
                            || SQLERRM (SQLCODE));
                END;
            END IF;

            IF NVL (i.cpv_whtx_amnt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('WTHTPY', --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                --            Get_Gl_Code ('WTHTPY',                         --CLAIM PAID NORMAL
                --                         i.cmb_scl_code,
                --                         'U',                         --v_app_lvl IN VARCHAR2,
                --                         v_trnt_code,                                 -- OUT ,
                --                         v_trnt_gl_code,                               --OUT ,
                --                         v_trnt_contra_gl_code                           --OUT
                --                        );
                v_rec_count := v_rec_count + 2;

                BEGIN
                    fms_vouchers_pkg.append_gl_trans (
                        v_rec_count,
                        'CLAIM CR ' || v_trnt_code,              --v_narrative
                        ABS (ROUND (NVL (i.cpv_whtx_amnt, 0), v_bcur_rnd)),
                        --v_amount
                        'C',                                          --v_drcr
                        v_trnt_gl_code,                           --v_account1
                        v_control_acc,      --i.GLTRAN_CONTRA_ACC,--v_account2
                        v_paymnt_brh_code,                          --v_branch
                        vgl_trans);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20026,
                               'ERROR POSTING GL TRANS FOR '
                            || v_trnt_code
                            || ':- '
                            || SQLERRM (SQLCODE));
                END;
            END IF;

            --*************************POST TREATY REVISIONS***************************************
            FOR cur_part_amnts_rec IN cur_part_amnts
            LOOP
                IF cur_part_amnts_rec.trs_trtg_code = 1001
                THEN
                    v_lvl := 'MAN';
                ELSIF cur_part_amnts_rec.trs_trtg_code = 1003
                THEN
                    v_lvl := 'QST';
                ELSIF cur_part_amnts_rec.trs_trtg_code = 10041
                THEN
                    v_lvl := 'FSTSUP';
                ELSIF cur_part_amnts_rec.trs_trtg_code = 10042
                THEN
                    v_lvl := 'SECSUP';
                END IF;

                --RAISE_ERROR('rev_type'||rev_type||'v_trnt_gl_code'||v_trnt_gl_code);
                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                --                Get_Gl_Code (rev_type,i.cmb_scl_code, v_lvl,v_trnt_code,
                --                    v_trnt_gl_code,v_trnt_contra_gl_code);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Claim Payment Mandatory Treaty Amount Revenue Item for Sub Class '
                            || i.cmb_scl_code
                            || ' is not defined..');
                END;

                --RAISE_ERROR('HERE=='||v_trt_lvl||';'||cur_part_amnts_rec.TRPA_GL_ACCOUNT||';'||v_trnt_gl_code||';'||v_trnt_contra_gl_code);
                IF v_trnt_contra_gl_code IS NULL
                THEN
                    v_trnt_contra_gl_code :=
                        cur_part_amnts_rec.trpa_gl_account;
                END IF;

                v_rec_count := v_rec_count + 2;

                IF NVL (cur_part_amnts_rec.part_amount, 0) <> 0
                THEN
                    BEGIN
                        fms_vouchers_pkg.append_gl_trans (
                            v_rec_count,
                            'CLAIM CR ' || v_trnt_code,          --v_narrative
                            ABS (
                                ROUND (
                                    NVL (cur_part_amnts_rec.part_amount, 0),
                                    v_bcur_rnd)),                   --v_amount
                            'C',                                      --v_drcr
                            v_trnt_gl_code,                       --v_account1
                            v_trnt_contra_gl_code,
                            --i.GLTRAN_CONTRA_ACC,--v_account2
                            v_paymnt_brh_code,                      --v_branch
                            vgl_trans);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20026,
                                   'ERROR POSTING GL TRANS FOR '
                                || v_trnt_code
                                || ':- '
                                || SQLERRM (SQLCODE));
                    END;
                END IF;
            END LOOP;

            --**************************** Update Facultative Revision Amount***************************
            FOR cur_facre_rec IN cur_facre
            LOOP
                v_lvl := 'FO';

                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                    --                Get_Gl_Code (rev_type,i.cmb_scl_code, v_lvl,v_trnt_code, v_trnt_gl_code,v_trnt_contra_gl_code);
                    v_trnt_contra_gl_code :=
                        fms_interfaces_pkg.sl_control_acc ('GIS', 'FO');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Claim Payment Facultative Out Revenue Item for  Sub Class '
                            || i.cmb_scl_code
                            || ' is not defined..');
                END;

                --  RAISE_ERROR(v_trnt_gl_code||';'||v_trnt_contra_gl_code||';'||cur_facre_rec.AGN_ACC_NO);
                IF v_trnt_contra_gl_code IS NULL
                THEN
                    v_trnt_contra_gl_code := cur_facre_rec.agn_acc_no;
                END IF;

                v_rec_count := v_rec_count + 2;

                IF NVL (cur_facre_rec.cfrr_amount, 0) <> 0
                THEN
                    BEGIN
                        fms_vouchers_pkg.append_gl_trans (
                            v_rec_count,
                            'CLAIM CR ' || v_trnt_code,          --v_narrative
                            ABS (
                                ROUND (NVL (cur_facre_rec.cfrr_amount, 0),
                                       v_bcur_rnd)),                --v_amount
                            'C',                                      --v_drcr
                            v_trnt_gl_code,                       --v_account1
                            v_trnt_contra_gl_code,
                            --i.GLTRAN_CONTRA_ACC,--v_account2
                            v_paymnt_brh_code,                      --v_branch
                            vgl_trans);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20026,
                                   'ERROR POSTING GL TRANS FOR '
                                || v_trnt_code
                                || ':- '
                                || SQLERRM (SQLCODE));
                    END;
                END IF;
            END LOOP;

            --************************************************************
            vgl_code :=
                fms_vouchers_pkg.update_vgl (
                    'GIS CLAIMS TRANS',                    --V_BTC_DESCRIPTION
                    'JV',                               --V_BTC_TYPE varchar2,
                    v_paymnt_brh_code,
                    --V_BRH_CODE number,
                    v_auth_date,
                    NVL (
                           v_description
                        || ' / '
                        || v_clmrg_claim_no
                        || ' / '
                        || i.cpv_voucher_no,
                        'GIS CLAIMS TRANSACTIONS VOUCHER'),
                    --V_DESCRIPTION varchar2,
                    'GIS',                                   --V_REF varchar2,
                    v_user_code,                         --V_RAISED_BY number,
                    i.cmb_cur_code,
                    --V_CUR_CODE number,
                    vgl_trans--V_TRANS IN tgl_rec_type
                             );
            -- RAISE_ERROR('==HERE==HERE==');
            fms_interfaces_pkg.post_je (vgl_code, v_user_code);
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                   'CLM CREDIT NOTE VOUCHER NOT CREATED FOR CLAIM # '
                || v_clmrg_claim_no);
        END IF;
    --RAISE_APPLICATION_ERROR (-20001, ' &^&*#$^&*#'  );
    --   EXCEPTION
    --      WHEN exc_user_error
    --      THEN
    --         raise_application_error (-20001,
    --                                     'THE SPECIFIED USERNAME ( '
    --                                  || v_user_name
    --                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    --                                 );
    --      WHEN OTHERS
    --      THEN
    --         raise_application_error (-20001,
    --                                     'ERROR CREATING REQUISITION :- '
    --                                  || SQLERRM (SQLCODE)
    --                                 );
    END;

    PROCEDURE process_exes_ref_pymt (v_clmrg_claim_no   VARCHAR2,
                                     v_trans_no         NUMBER,
                                     v_user_name        VARCHAR2)
    IS
        v_cmb_claim_no          NUMBER;

        CURSOR c_claim IS
            SELECT gin_claim_recoveries.clmr_cmb_claim_no,
                   gin_claim_recoveries.clmr_code,
                   gin_claim_recoveries.clmr_date,
                   gin_claim_recoveries.clmr_authorised,
                   gin_claim_recoveries.clmr_authorised_by,
                   clmr_date_authorised,
                   gin_claim_recoveries.clmr_amount,
                   gin_claim_recoveries.clmr_salvage_buyer,
                   --GIN_CLAIM_RECOVERIES.CLMR_RAISE_BY,
                   gin_claim_master_bookings.cmb_cur_code,
                   gin_claim_master_bookings.cmb_brn_code,
                   clmr_comp_retention,
                   clmr_man_amount,
                   clmr_quota_amount,
                   clmr_fstsup_amount,
                   clmr_secsup_amount,
                   clmr_facre_amount,
                   gin_claim_master_bookings.cmb_scl_code
              FROM gin_claim_master_bookings, gin_claim_recoveries
             WHERE     cmb_claim_no = clmr_cmb_claim_no
                   AND cmb_claim_no = v_clmrg_claim_no
                   AND --CPV_AUTHORISED = 'Y' AND
                       clmr_ggt_trans_no = v_trans_no;

        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        FOR i IN c_claim
        LOOP
            --RAISE_APPLICATION_ERROR (-20001,i.cpv_authorised_by);
            v_rec_count := 1;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_brh_name := fms_interfaces_pkg.brh_name (i.cmb_brn_code, 'S');
            v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
            fms_interfaces_pkg.trans_bct ('CLM',
                                          v_cqr_source,
                                          i.cmb_brn_code,
                                          i.cmb_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code);

            --v_cheq_amt :=
            IF NVL (i.clmr_amount, 0) != 0
            THEN
                get_gl_code ('XR',                         --CLAIM PAID NORMAL
                             i.cmb_scl_code,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      i.cmb_brn_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           ' GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || i.cmb_scl_code);
                END IF;

                fms_cheques_pkg.append_chq_trans (
                    1,
                    ABS (NVL (i.clmr_amount, 0)),
                    'EXCESS REFUND',                              --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    i.cmb_brn_code,                              --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            fms_cheques_pkg.create_reqn (
                v_cqr_source,
                i.clmr_code,                                             --ref
                i.clmr_cmb_claim_no,                                  -- ref2,
                TRUNC (SYSDATE),
                i.clmr_cmb_claim_no,   --'GIS Claim',            --narrative V
                i.cmb_brn_code,
                v_bct_brh_code,
                ABS (NVL (i.clmr_amount, 0)),                     --cqr_amount
                i.clmr_salvage_buyer,
                i.cmb_cur_code,
                v_bct_code,
                fms_interfaces_pkg.get_usercode (
                    UPPER (i.clmr_authorised_by)),
                i.clmr_date_authorised,
                v_user_code,                                 --v_cqr_req_by  ,
                'GIS-CLAIM',                                    -- pmt_type  ,
                v_chq_dtls);
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'CLM REQN NOT CREATED FOR CLAIM # ' || v_clmrg_claim_no);
        END IF;
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR CREATING REQUISITION :- ' || SQLERRM (SQLCODE));
    END;

    FUNCTION sl_control_acc (v_sys        VARCHAR2,
                             v_acc_type   VARCHAR2,
                             v_sl_trans   VARCHAR2 DEFAULT NULL)
        RETURN VARCHAR2
    IS
    BEGIN
        RETURN fms_interfaces_pkg.sl_control_acc (v_sys,
                                                  v_acc_type,
                                                  v_sl_trans);
    END;

    --   PROCEDURE cancel_gis_rct (
    --      v_rct_code                NUMBER,
    --      v_rct_rec                 fms_interfaces_pkg.type_receipts_table,
    --      v_tran_mapping   IN OUT   fms_interfaces_pkg.tran_mapping_type,
    --      v_rct_type                VARCHAR2,
    --      v_user_name               VARCHAR2,
    --      v_mtran_ref_no            VARCHAR2 DEFAULT NULL
    --   )
    --   IS
    --   BEGIN
    --      post_gis_rct (v_rct_code,
    --                    v_rct_rec,
    --                    v_tran_mapping,
    --                    v_rct_type,
    --                    v_user_name,
    --                    'Y',
    --                    NVL (v_mtran_ref_no,
    --                         gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no)
    --                        )
    --                   );
    --      -- raise_error('v_mtran_ref_no='||v_mtran_ref_no||';'||v_user_name);
    --      gin_manage_alerts_pkg.proc_cancelledreceipt_alert (v_mtran_ref_no,
    --                                                         v_user_name
    --                                                        );
    --   EXCEPTION
    --      WHEN OTHERS
    --      THEN
    --         raise_application_error (-20001,
    --                                  'CANCELLING GIS RCT.' || SQLERRM (SQLCODE)
    --                                 );
    --   END;

    PROCEDURE cancel_gis_rct (
        v_rct_code              NUMBER,
        v_rct_rec               fms_interfaces_pkg.type_receipts_table,
        v_tran_mapping   IN OUT fms_interfaces_pkg.tran_mapping_type,
        v_rct_type              VARCHAR2,
        v_user_name             VARCHAR2,
        v_mtran_ref_no          VARCHAR2 DEFAULT NULL)
    IS
    BEGIN
        --   RAISE_ERROR('HERE......');
        post_gis_rct (
            v_rct_code,
            v_rct_rec,
            v_tran_mapping,
            v_rct_type,
            v_user_name,
            'Y',
            NVL (v_mtran_ref_no,
                 gin_interfaces_pkg.getpolicybatchno (v_mtran_ref_no)));

        gin_manage_alerts_pkg.proc_cancelledreceipt_alert (v_mtran_ref_no,
                                                           v_user_name);
    --    raise_error('v_mtran_ref_no='||v_mtran_ref_no||';'||v_user_name);
    --   EXCEPTION
    --      WHEN OTHERS
    --      THEN
    --         raise_application_error (-20001,
    --                                  'CANCELLING GIS RCT.' || SQLERRM (SQLCODE)
    --                                 );
    END;

    FUNCTION trans_voucher (v_code VARCHAR2)
        RETURN VARCHAR2
    IS
        v_vchr_no   VARCHAR2 (20);
    BEGIN
        SELECT    v_code
               || '/'
               || gin_vchr_no_seq.NEXTVAL
               || '/'
               || TO_CHAR (SYSDATE, 'RR')
          INTO v_vchr_no
          FROM DUAL;

        RETURN v_vchr_no;
    END trans_voucher;

    FUNCTION get_chq_status (v_vchrno      IN NUMBER,
                             v_claim_no    IN VARCHAR2,
                             v_pymt_type   IN VARCHAR2)
        RETURN VARCHAR2
    IS
        v_cqr_source   NUMBER := fms_interfaces_pkg.systemcode ('GIS');
    BEGIN
        --       RAISE_ERROR('TEDDY IS HERE '||v_vchrno||':::'||v_claim_no||':::'||v_pymt_type);
        RETURN fms_cheques_pkg.cheque_status (v_cqr_source,
                                              v_vchrno,
                                              v_claim_no,
                                              v_pymt_type);
    END;


    PROCEDURE cancel_mdp_chq_payment (v_trans_no   IN NUMBER,
                                      v_username   IN VARCHAR2)
    IS
        v_cqr_source   NUMBER := fms_interfaces_pkg.systemcode ('GIS');
        v_user_code    NUMBER;
        v_user_name    VARCHAR2 (20);
        v_voucher_no   NUMBER;
        v_cqr_no       NUMBER;

        CURSOR mdp IS
            SELECT MTRAN_NO,
                   MTRAN_TRAN_TYPE || '/' || MTRAN_NO     refno,
                   mtran_tran_type                        premtype
              FROM GIN_MASTER_TRANSACTIONS
             WHERE MTRAN_GGT_TRAN_NO = v_trans_no;
    BEGIN
        --   RAISE_ERROR('v_trans_no='||v_trans_no);
        FOR m IN mdp
        LOOP
            BEGIN
                v_user_name :=
                    NVL (
                        v_username,
                        pkg_global_vars.get_pvarchar2 (
                            'PKG_GLOBAL_VARS.PVG_USERNAME'));
                v_user_code :=
                    fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

                --      raise_error('v_cqr_source='||v_cqr_source);
                --      fms_cheques_pkg.withraw_cheque (v_cqr_source,
                --                                      m.refno,
                --                                      v_user_code,
                --                                      'WITHDRAWN FROM FMS BY ' || v_user_name,
                --                                      m.premtype
                --                                     );
                BEGIN
                    SELECT CQR_NO
                      INTO v_cqr_no
                      FROM FMS_CHEQUES
                     WHERE CQR_REF = m.refno;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error getting check details for CQR_REF='
                            || m.refno);
                END;

                fms_cheques_pkg.withraw_cheque_from_system (v_cqr_no,
                                                            v_user_code);
            EXCEPTION
                WHEN OTHERS
                THEN
                    RAISE_ERROR (
                           'CANCEL CHQ..REF NO ='
                        || m.refno
                        || ' SOURCE='
                        || v_cqr_source
                        || SQLERRM (SQLCODE));
            END;
        END LOOP;
    END;



    PROCEDURE update_claim_chq (cvchrno       VARCHAR2,
                                vchequeno     VARCHAR2,
                                voption       VARCHAR2 DEFAULT 'PAID',
                                dchequedate   DATE)
    IS
        v_cnt   NUMBER (8);
    BEGIN
        BEGIN
            SELECT COUNT (1)
              INTO v_cnt
              FROM gis_cheques_status
             WHERE gcs_chq_voucher_no = cvchrno AND gcs_chq_no IS NULL;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_cnt := 0;
            WHEN OTHERS
            THEN
                raise_application_error (
                    -20001,
                       'ERROR:- UNABLE TO SECURE IF CHEQUE EXISTS IN GIS..'
                    || SQLERRM (SQLCODE));
        END;

        IF v_cnt = 0
        THEN
            IF vchequeno IS NULL
            THEN
                BEGIN
                    UPDATE gis_cheques_status
                       SET gcs_chq_status = voption
                     WHERE gcs_chq_voucher_no = cvchrno;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20001,
                               'ERROR:- UNABLE TO SECURE CHEQUE NO IN THE GIS..'
                            || SQLERRM (SQLCODE));
                END;
            ELSE
                BEGIN
                    UPDATE gis_cheques_status
                       SET gcs_chq_status = voption,
                           gcs_chq_no = vchequeno,
                           gcs_chq_dt = dchequedate,
                           gcs_chq_status_dt = SYSDATE
                     WHERE gcs_chq_voucher_no = cvchrno;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20001,
                               'ERROR:- UNABLE TO UPDATE CHEQUE NO..'
                            || SQLERRM (SQLCODE));
                END;
            END IF;
        ELSE
            IF voption IN ('C',
                           'CAP',
                           'CAS',
                           'CBP',
                           'CBT')
            THEN
                ---'CANCELLED''CANCELLED AFTER PRINTING''CANCELLED AFTER SIGNING''CANCELLED BEFORE PRINTING''CANCELLED BEFORE TRANSFER'
                BEGIN
                    UPDATE gis_cheques_status
                       SET gcs_chq_status = voption,
                           gcs_chq_no = voption || '/' || vchequeno,
                           gcs_chq_status_dt = SYSDATE
                     WHERE gcs_chq_voucher_no = cvchrno;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20001,
                               'ERROR:- UNABLE TO UPDATE CANCELLED STATUS'
                            || SQLERRM (SQLCODE));
                END;
            ELSE
                BEGIN
                    UPDATE gis_cheques_status
                       SET gcs_chq_status = voption,
                           gcs_chq_status_dt = SYSDATE
                     WHERE gcs_chq_voucher_no = cvchrno;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20001,
                               'ERROR:- UNABLE TO UPDATE CHEQUE STATUS'
                            || SQLERRM (SQLCODE));
                END;
            END IF;
        END IF;
    END update_claim_chq;

    PROCEDURE cancel_chq_payment (v_trans_no IN NUMBER)
    IS
        v_cqr_source   NUMBER := fms_interfaces_pkg.systemcode ('GIS');
        v_user_code    NUMBER;
        v_username     VARCHAR2 (20);
        v_voucher_no   NUMBER;
    BEGIN
        BEGIN
            SELECT cpv_voucher_no
              INTO v_voucher_no
              FROM gin_clm_payment_vouchers
             WHERE cpv_ggt_trans_no = v_trans_no;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                --            tqc_error_manager.raise_error
                --               (370701900,
                --                text_in      => 'Voucher Number for the transaction to be contra''''d not found'
                --               );
                raise_error (
                    'Voucher Number for the transaction to be contra''''d not found');
            WHEN TOO_MANY_ROWS
            THEN
                --            tqc_error_manager.raise_error
                --               (370701901,
                --                text_in      => 'More than one Voucher Number for the transaction to be contra''''d found'
                --               );
                raise_error (
                    'More than one Voucher Number for the transaction to be contra''''d found');
            WHEN OTHERS
            THEN
                --            tqc_error_manager.raise_error
                --                              (370701902,
                --                               text_in      => 'Error retrieving voucher number..'
                --                              );
                raise_error ('Error retrieving voucher number..');
        END;

        v_username :=
            pkg_global_vars.get_pvarchar2 ('PKG_GLOBAL_VARS.PVG_USERNAME');
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_username));
        fms_cheques_pkg.withraw_cheque (
            v_cqr_source,
            TO_CHAR (v_voucher_no),
            v_user_code,
            'WITHDRAWN FROM GIS BY ' || v_username,
            'GIS_CLAIM');
    EXCEPTION
        WHEN OTHERS
        THEN
            tqc_error_manager.raise_unanticipated (
                text_in   => 'CANCEL CHQ..' || SQLERRM (SQLCODE));
    END;

    --   PROCEDURE contra_claim_pymnt (
    --      v_voucher_no   IN   VARCHAR2,
    --      v_claim_no     IN   VARCHAR2,
    --      v_user         IN   VARCHAR2
    --   )
    --   IS
    --      /*
    --           A procedure to implement contra of payment transctions upon cancelling a cheque printed successfully from finance.
    --           It automatically creates the payemnt contra transction ie 'cpi' or 'cfi' and authorizes.
    --           Challenges -- authorization of the transction. The fms users without rights in claims cannot complete the cancellation
    --           process. Solution. Come up with backend tickets to automatically assisgn the ticket to claims department.
    --           This procedure is called from fms Fms_Cheques_Pkg.update_cheque_cancelled
    --                   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    --      */
    --      v_new_trans_no    NUMBER;
    --      v_old_tran_no     NUMBER;
    --      v_new_cpv_no      NUMBER;
    --      v_cr_trans_no     NUMBER;
    --      v_tran_type       VARCHAR2 (5);
    --      v_cpv_cptv_code   NUMBER;
    --      v_cptv_code_seq   NUMBER;
    --      v_cnt             NUMBER;

    --      CURSOR cur_clm_fee
    --      IS
    --         SELECT *
    --           FROM gin_clm_pymnt_tax_vouchers
    --          WHERE cptv_code = v_voucher_no;

    --      CURSOR cur_clm_fee_dtls (v_cptv_code NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_clm_payment_vouchers
    --          WHERE cpv_cptv_code = v_cptv_code;
    --   BEGIN
    --      BEGIN
    --         SELECT COUNT (1)
    --           INTO v_cnt
    --           FROM gin_clm_pymnt_tax_vouchers
    --          WHERE cptv_code = TO_NUMBER (v_voucher_no);
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_cnt := 0;
    --         WHEN OTHERS
    --         THEN
    --            raise_error ('Error fetching claim voucher to contra...');
    --      END;

    ----      raise_Error('v_cntdgsdggs='||v_voucher_no||':::::'||v_claim_no);
    --      IF NVL (v_cnt, 0) = 0
    --      THEN
    --         BEGIN
    --            SELECT cpv_ggt_trans_no, cpv_tran_type
    --              INTO v_old_tran_no, v_tran_type
    --              FROM gin_clm_payment_vouchers
    --             WHERE cpv_voucher_no = TO_NUMBER (v_voucher_no)
    --               AND cpv_cmb_claim_no = v_claim_no;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error fetching claim voucher to contra1...'||v_claim_no);
    --         END;

    --         BEGIN
    --            gin_stp_claims_pkg.create_trans_contra (v_claim_no,
    --                                                    TRUNC (SYSDATE),
    --                                                    v_old_tran_no,
    --                                                    v_new_trans_no,
    --                                                    v_user,
    --                                                    v_new_cpv_no
    --                                                   );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error creating payment contra...');
    --         END;

    --         -- assign an auto ticket for claims department to authorize the contra, for now, just auto authorize
    --         -- the user cancelling the cheque from fms must have rights to authorize contra transactions in gis
    --         --GIS-12250 updating claims status to P on cheque cancellation/reversal
    --         BEGIN
    --            gin_stp_claims_pkg.authorise_clm_pymnt (v_claim_no,
    --                                                    v_new_trans_no,
    --                                                    'N',
    --                                                    'N',
    --                                                    'N',
    --                                                    v_user,
    --                                                    v_cr_trans_no
    --                                                   );

    --            UPDATE gin_claim_master_bookings
    --               SET cmb_claim_status = 'P',
    --                   cmb_status_date = TRUNC (SYSDATE)
    --             WHERE cmb_claim_no = v_claim_no;
    ----         EXCEPTION
    ----            WHEN OTHERS
    ----            THEN
    ----               raise_error ('Error authorizing contra transaction...');
    --         END;
    --      ELSIF NVL (v_cnt, 0) > 0
    --      THEN
    --         FOR cur_clm_fee_rec IN cur_clm_fee
    --         LOOP
    --            FOR cur_clm_fee_dtls_rec IN
    --               cur_clm_fee_dtls (cur_clm_fee_rec.cptv_code)
    --            LOOP
    --               UPDATE gin_clm_payment_vouchers
    --                  SET cpv_checked = 'N',
    --                      cpv_cptv_code = NULL
    --                WHERE cpv_cptv_code = cur_clm_fee_rec.cptv_code;
    --            END LOOP;

    --            BEGIN
    --               SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
    --                      || gin_cptv_code_seq.NEXTVAL
    --                 INTO v_cptv_code_seq
    --                 FROM DUAL;

    --               INSERT INTO gin_clm_pymnt_tax_vouchers
    --                           (cptv_code,
    --                            cptv_whtx_amount,
    --                            cptv_vat_amount,
    --                            cptv_apco_cor_code,
    --                            cptv_cur_code, cptv_date,
    --                            cptv_payee, cptv_authorised,
    --                            cptv_clm_gross_fee_amount,
    --                            cptv_clm_net_fee_amount,
    --                            cptv_scl_code,
    --                            cptv_quota_amount,
    --                            cptv_fstsup_amount,
    --                            cptv_secsup_amount,
    --                            cptv_facre_amount,
    --                            cptv_pool_amount,
    --                            cptv_mand_amount,
    --                            cptv_rein_amount, cptv_withdrawn,
    --                            cptv_withdrawn_by, cptv_withdrawn_date
    --                           )
    --                    VALUES (v_cptv_code_seq,
    --                            -cur_clm_fee_rec.cptv_whtx_amount,
    --                            -cur_clm_fee_rec.cptv_vat_amount,
    --                            cur_clm_fee_rec.cptv_apco_cor_code,
    --                            cur_clm_fee_rec.cptv_cur_code, TRUNC (SYSDATE),
    --                            cur_clm_fee_rec.cptv_payee, 'Y',
    --                            -cur_clm_fee_rec.cptv_clm_gross_fee_amount,
    --                            -cur_clm_fee_rec.cptv_clm_net_fee_amount,
    --                            cur_clm_fee_rec.cptv_scl_code,
    --                            -cur_clm_fee_rec.cptv_quota_amount,
    --                            -cur_clm_fee_rec.cptv_fstsup_amount,
    --                            -cur_clm_fee_rec.cptv_secsup_amount,
    --                            -cur_clm_fee_rec.cptv_facre_amount,
    --                            -cur_clm_fee_rec.cptv_pool_amount,
    --                            -cur_clm_fee_rec.cptv_mand_amount,
    --                            -cur_clm_fee_rec.cptv_rein_amount, 'Y',
    --                            v_user, TRUNC (SYSDATE)
    --                           );

    --               UPDATE gin_clm_pymnt_tax_vouchers
    --                  SET cptv_withdrawn = 'Y',
    --                      cptv_withdrawn_by = v_user,
    --                      cptv_withdrawn_date = TRUNC (SYSDATE)
    --                WHERE cptv_code = cur_clm_fee_rec.cptv_code;
    --            --  RAISE_eRROR('v_cntdgssdgsd='||v_cnt||' = '||v_voucher_no);
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error creating TAX voucher details....');
    --            END;
    --         END LOOP;
    --      END IF;
    --   --raise_error ('Error creating TAX voucher details....');
    --   END;

    PROCEDURE contra_claim_pymnt (v_voucher_no   IN VARCHAR2,
                                  v_claim_no     IN VARCHAR2,
                                  v_user         IN VARCHAR2)
    IS
        /*
             A procedure to implement contra of payment transctions upon cancelling a cheque printed successfully from finance.
             It automatically creates the payemnt contra transction ie 'cpi' or 'cfi' and authorizes.
             Challenges -- authorization of the transction. The fms users without rights in claims cannot complete the cancellation
             process. Solution. Come up with backend tickets to automatically assisgn the ticket to claims department.
             This procedure is called from fms Fms_Cheques_Pkg.update_cheque_cancelled
                     &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
        */
        v_new_trans_no    NUMBER;
        v_old_tran_no     NUMBER;
        v_new_cpv_no      NUMBER;
        v_cr_trans_no     NUMBER;
        v_tran_type       VARCHAR2 (5);
        v_cpv_cptv_code   NUMBER;
        v_cptv_code_seq   NUMBER;
        v_cnt             NUMBER;
        v_auth_status     VARCHAR2 (5);
        v_cur_rate        NUMBER;

        CURSOR cur_clm_fee IS
            SELECT *
              FROM gin_clm_pymnt_tax_vouchers
             WHERE cptv_code = v_voucher_no;

        CURSOR cur_clm_fee_dtls (v_cptv_code NUMBER)
        IS
            SELECT *
              FROM gin_clm_payment_vouchers
             WHERE cpv_cptv_code = v_cptv_code;
    BEGIN
        BEGIN
            SELECT COUNT (1)
              INTO v_cnt
              FROM gin_clm_pymnt_tax_vouchers
             WHERE cptv_code = TO_NUMBER (v_voucher_no);
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_cnt := 0;
            WHEN OTHERS
            THEN
                raise_error ('Error fetching claim voucher to contra...');
        END;

        --raise_Error('v_cntdgsdggs='||v_cnt);
        IF NVL (v_cnt, 0) = 0
        THEN
            BEGIN
                SELECT cpv_ggt_trans_no,
                       cpv_tran_type,
                       cpv_authorised,
                       cpv_cur_rate
                  INTO v_old_tran_no,
                       v_tran_type,
                       v_auth_status,
                       v_cur_rate
                  FROM gin_clm_payment_vouchers
                 WHERE     cpv_voucher_no = TO_NUMBER (v_voucher_no)
                       AND cpv_cmb_claim_no = v_claim_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error fetching claim voucher to contra...');
            END;

            IF NVL (v_auth_status, 'N') = 'Y'
            THEN
                BEGIN
                    gin_stp_claims_pkg.create_trans_contra (v_claim_no,
                                                            TRUNC (SYSDATE),
                                                            v_old_tran_no,
                                                            v_new_trans_no,
                                                            v_user,
                                                            v_new_cpv_no);
                --         EXCEPTION
                --            WHEN OTHERS
                --            THEN
                --               raise_error ('Error creating payment contra...');
                END;

                -- assign an auto ticket for claims department to authorize the contra, for now, just auto authorize
                -- the user cancelling the cheque from fms must have rights to authorize contra transactions in gis
                --GIS-12250 updating claims status to P on cheque cancellation/reversal
                BEGIN
                    gin_stp_claims_pkg.authorise_clm_pymnt (v_claim_no,
                                                            v_new_trans_no,
                                                            'N',
                                                            'N',
                                                            'N',
                                                            v_user,
                                                            v_cr_trans_no);

                    GIN_STP_CLAIMS_PKG.post_pymnt_clms_xol (v_claim_no,
                                                            v_new_trans_no,
                                                            v_cur_rate);
                    process_clm_pymt_xol (v_claim_no,
                                          v_new_trans_no,
                                          v_user,
                                          TRUNC (SYSDATE));
                    GIN_STP_CLAIMS_PKG.update_xol_auth_status (
                        v_new_trans_no,
                        'Y',
                        v_user,
                        TRUNC (SYSDATE));

                    UPDATE gin_claim_master_bookings
                       SET cmb_claim_status = 'P',
                           cmb_status_date = TRUNC (SYSDATE)
                     WHERE cmb_claim_no = v_claim_no;

                    --         EXCEPTION
                    --            WHEN OTHERS
                    --            THEN
                    --               raise_error ('Error authorizing contra transaction...');

                    BEGIN
                        UPDATE GIN_MASTER_TRANSACTIONS
                           SET MTRAN_DATE = TRUNC (SYSDATE),
                               MTRAN_AUTHORISED = 'Y',
                               MTRAN_AUTHORISED_BY = v_user
                         WHERE     MTRAN_CMB_CLAIM_NO = v_claim_no
                               AND MTRAN_GGT_TRAN_NO = v_new_trans_no;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR MASTER TRANSACTIONS...');
                    END;
                END;
            ELSE
                UPDATE gin_claim_master_bookings
                   SET cmb_claim_status = 'P',
                       cmb_status_date = TRUNC (SYSDATE)
                 WHERE cmb_claim_no = v_claim_no;

                UPDATE gin_clm_payment_vouchers
                   SET CPV_AUTHORISED = 'W'                   -- FOR WITHDRWAN
                 WHERE     cpv_ggt_trans_no = v_old_tran_no
                       AND cpv_cmb_claim_no = v_claim_no;

                BEGIN
                    UPDATE GIN_MASTER_TRANSACTIONS
                       SET MTRAN_DATE = TRUNC (SYSDATE),
                           MTRAN_AUTHORISED = 'R'
                     WHERE     MTRAN_CMB_CLAIM_NO = v_claim_no
                           AND MTRAN_GGT_TRAN_NO = v_old_tran_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('ERROR MASTER TRANSACTIONS...');
                END;
            END IF;
        ELSIF NVL (v_cnt, 0) > 0
        THEN
            FOR cur_clm_fee_rec IN cur_clm_fee
            LOOP
                FOR cur_clm_fee_dtls_rec
                    IN cur_clm_fee_dtls (cur_clm_fee_rec.cptv_code)
                LOOP
                    UPDATE gin_clm_payment_vouchers
                       SET cpv_checked = 'N', cpv_cptv_code = NULL
                     WHERE cpv_cptv_code = cur_clm_fee_rec.cptv_code;
                END LOOP;

                BEGIN
                    SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                           || gin_cptv_code_seq.NEXTVAL
                      INTO v_cptv_code_seq
                      FROM DUAL;

                    INSERT INTO gin_clm_pymnt_tax_vouchers (
                                    cptv_code,
                                    cptv_whtx_amount,
                                    cptv_vat_amount,
                                    cptv_apco_cor_code,
                                    cptv_cur_code,
                                    cptv_date,
                                    cptv_payee,
                                    cptv_authorised,
                                    cptv_clm_gross_fee_amount,
                                    cptv_clm_net_fee_amount,
                                    cptv_scl_code,
                                    cptv_quota_amount,
                                    cptv_fstsup_amount,
                                    cptv_secsup_amount,
                                    cptv_facre_amount,
                                    cptv_pool_amount,
                                    cptv_mand_amount,
                                    cptv_rein_amount,
                                    cptv_withdrawn,
                                    cptv_withdrawn_by,
                                    cptv_withdrawn_date)
                         VALUES (v_cptv_code_seq,
                                 -cur_clm_fee_rec.cptv_whtx_amount,
                                 -cur_clm_fee_rec.cptv_vat_amount,
                                 cur_clm_fee_rec.cptv_apco_cor_code,
                                 cur_clm_fee_rec.cptv_cur_code,
                                 TRUNC (SYSDATE),
                                 cur_clm_fee_rec.cptv_payee,
                                 'Y',
                                 -cur_clm_fee_rec.cptv_clm_gross_fee_amount,
                                 -cur_clm_fee_rec.cptv_clm_net_fee_amount,
                                 cur_clm_fee_rec.cptv_scl_code,
                                 -cur_clm_fee_rec.cptv_quota_amount,
                                 -cur_clm_fee_rec.cptv_fstsup_amount,
                                 -cur_clm_fee_rec.cptv_secsup_amount,
                                 -cur_clm_fee_rec.cptv_facre_amount,
                                 -cur_clm_fee_rec.cptv_pool_amount,
                                 -cur_clm_fee_rec.cptv_mand_amount,
                                 -cur_clm_fee_rec.cptv_rein_amount,
                                 'Y',
                                 v_user,
                                 TRUNC (SYSDATE));

                    UPDATE gin_clm_pymnt_tax_vouchers
                       SET cptv_withdrawn = 'Y',
                           cptv_withdrawn_by = v_user,
                           cptv_withdrawn_date = TRUNC (SYSDATE)
                     WHERE cptv_code = cur_clm_fee_rec.cptv_code;
                --  RAISE_eRROR('v_cntdgssdgsd='||v_cnt||' = '||v_voucher_no);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error creating TAX voucher details....');
                END;
            END LOOP;
        END IF;
    --raise_error ('Error creating TAX voucher details....');
    END;

    PROCEDURE clm_chq_contra_vchr (v_clmrg_claim_no   VARCHAR2,
                                   v_trans_no         NUMBER,
                                   v_user_name        VARCHAR2)
    IS
        v_cmb_claim_no          NUMBER;
        vgl_code                NUMBER;
        vgl_trans               fms_vouchers_pkg.tgl_rec_type;

        CURSOR c_claim IS
            SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
                   gin_clm_payment_vouchers.cpv_voucher_no,
                   gin_clm_payment_vouchers.cpv_date,
                   gin_clm_payment_vouchers.cpv_authorised,
                   gin_clm_payment_vouchers.cpv_authorised_by,
                   cpv_authorised_dt,
                   gin_clm_payment_vouchers.cpv_amount,
                   gin_clm_payment_vouchers.cpv_payee,
                   gin_clm_payment_vouchers.cpv_raise_by,
                   gin_claim_master_bookings.cmb_cur_code,
                   gin_claim_master_bookings.cmb_brn_code,
                   gin_clm_payment_vouchers.cpv_drcr_no,
                   cpv_comp_retention,
                   cpv_man_amount,
                   cpv_quota_amount,
                   cpv_fstsup_amount,
                   cpv_secsup_amount,
                   cpv_facre_amount,
                   gin_claim_master_bookings.cmb_scl_code,
                   cpv_vat_amnt,
                   cpv_whtx_amnt,
                   cpv_net_paid
              FROM gin_claim_master_bookings, gin_clm_payment_vouchers
             WHERE     cmb_claim_no = cpv_cmb_claim_no
                   AND cmb_claim_no = v_clmrg_claim_no
                   AND --CPV_AUTHORISED = 'Y' AND
                       cpv_ggt_trans_no = v_trans_no;

        --v_chq_dtls fms_cheques_pkg.type_rqn_dtls_table;
        --v_cqr_brh_code NUMBER;
        v_user_code             NUMBER;
        --v_cqr_source_auth_by NUMBER;
        --v_cqr_source_auth_dt DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        --v_bct_code   NUMBER;
        --v_bct_brh_code  NUMBER;
        --v_crt_acc_number VARCHAR2(20);
        --v_crt_acc_org_code  NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        --v_acc_type VARCHAR2(20);
        --v_cqr_source NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        FOR i IN c_claim
        LOOP
            --RAISE_APPLICATION_ERROR (-20001,i.cpv_authorised_by);
            v_rec_count := 1;
            --v_cqr_source := FMS_INTERFACES_PKG.SYSTEMCODE('GIS');
            v_brh_name := fms_interfaces_pkg.brh_name (i.cmb_brn_code, 'S');
            v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);

            --FMS_INTERFACES_PKG.TRANS_BCT('CLM', v_cqr_source,i.cmb_brn_code,v_bct_code   ,v_bct_brh_code  ) ;
            --v_cheq_amt :=
            IF NVL (i.cpv_amount, 0) !=
               (  NVL (i.cpv_vat_amnt, 0)
                + NVL (i.cpv_whtx_amnt, 0)
                + NVL (i.cpv_net_paid, 0))
            THEN
                raise_application_error (
                    -20001,
                       'THE NET CHEQUE AMOUNT'
                    || NVL (i.cpv_net_paid, 0)
                    || ' PLUS VAT '
                    || NVL (i.cpv_vat_amnt, 0)
                    || ' AND WHTTAX '
                    || NVL (i.cpv_whtx_amnt, 0)
                    || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT '
                    || NVL (i.cpv_amount, 0));
            END IF;

            IF NVL (i.cpv_amount, 0) != 0
            THEN
                get_gl_code ('CP',                         --CLAIM PAID NORMAL
                             i.cmb_scl_code,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      i.cmb_brn_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           ' GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || i.cmb_scl_code);
                END IF;

                fms_vouchers_pkg.append_gl_trans (1,
                                                  'CLAIM CHECK REVERSAL',
                                                  --v_narrative
                                                  NVL (i.cpv_amount, 0),
                                                  --v_amount
                                                  'C',                --v_drcr
                                                  v_trnt_gl_code, --v_account1
                                                  i.cmb_brn_code,   --v_branch
                                                  vgl_trans);
            END IF;

            IF NVL (i.cpv_vat_amnt, 0) != 0
            THEN
                get_gl_code ('WTHVAT',                     --CLAIM PAID NORMAL
                             i.cmb_scl_code,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      i.cmb_brn_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           ' GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || i.cmb_scl_code);
                END IF;

                fms_vouchers_pkg.append_gl_trans (2,
                                                  'CLAIM CHECK REVERSAL',
                                                  --v_narrative
                                                  i.cpv_vat_amnt,   --v_amount
                                                  'D',                --v_drcr
                                                  v_trnt_gl_code, --v_account1
                                                  i.cmb_brn_code,   --v_branch
                                                  vgl_trans);
            END IF;

            IF NVL (i.cpv_whtx_amnt, 0) != 0
            THEN
                get_gl_code ('WTHTPY',                     --CLAIM PAID NORMAL
                             i.cmb_scl_code,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      i.cmb_brn_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           ' GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || i.cmb_scl_code);
                END IF;

                fms_vouchers_pkg.append_gl_trans (3,
                                                  'CLAIM CHECK REVERSAL',
                                                  --v_narrative
                                                  i.cpv_whtx_amnt,  --v_amount
                                                  'D',                --v_drcr
                                                  v_trnt_gl_code, --v_account1
                                                  i.cmb_brn_code,   --v_branch
                                                  vgl_trans);
            END IF;

            IF NVL (i.cpv_net_paid, 0) != 0
            THEN
                get_gl_code ('CLMREF',                     --CLAIM PAID NORMAL
                             i.cmb_scl_code,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      i.cmb_brn_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           ' GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || i.cmb_scl_code);
                END IF;

                fms_vouchers_pkg.append_gl_trans (
                    4,
                    'CLAIM REFUND-' || i.cpv_payee,
                    --v_narrative
                    NVL (i.cpv_net_paid, 0),
                    --v_amount
                    'D',                                              --v_drcr
                    v_trnt_gl_code,                               --v_account1
                    i.cmb_brn_code,                                 --v_branch
                    vgl_trans);
            END IF;

            vgl_code :=
                fms_vouchers_pkg.update_vgl ('CLAIMS REVERSALS',
                                             --V_BTC_DESCRIPTION
                                             'JV',      --V_BTC_TYPE varchar2,
                                             i.cmb_brn_code, --V_BRH_CODE number,
                                             TRUNC (SYSDATE),     --V_DT date,
                                             'GIS TRANSACTION VOUCHER',
                                             --V_DESCRIPTION varchar2,
                                             'GIS',          --V_REF varchar2,
                                             v_user_code, --V_RAISED_BY number,
                                             i.cmb_cur_code, --V_CUR_CODE number,
                                             vgl_trans --V_TRANS IN tgl_rec_type
                                                      );
            fms_interfaces_pkg.post_je (vgl_code, v_user_code);
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'CLM REQN NOT REVERSED FOR CLAIM # ' || v_clmrg_claim_no);
        END IF;
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR REVERSING REQUISITION :- ' || SQLERRM (SQLCODE));
    END;

    FUNCTION contract_status (v_con_code VARCHAR2)
        RETURN VARCHAR2
    IS
    BEGIN
        raise_application_error (-20001,
                                 'ERROR. I HAVE REMOVED THE HRMS SECTION');
    ----RETURN TQ_HRMS.XHRMS_INTERFACES_PKG.Contract_status(v_con_code );
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_application_error (-20001, SQLERRM (SQLCODE));
    END;

    FUNCTION account_enabled (v_bbr_code    NUMBER,
                              v_raise_err   VARCHAR2 DEFAULT 'Y')
        RETURN VARCHAR2
    IS
        v_eft_support   VARCHAR2 (1) := 'N';
    BEGIN
        --       raise_error('v_bbr_code '||v_bbr_code);
        SELECT tqc_interfaces_pkg.eft_enabled (v_bbr_code)
          INTO v_eft_support
          FROM DUAL;

        RETURN v_eft_support;
    EXCEPTION
        WHEN OTHERS
        THEN
            IF SQLCODE = -20001
            THEN
                IF v_raise_err = 'Y'
                THEN
                    raise_application_error (SQLCODE, SQLERRM);
                ELSE
                    RETURN 'REF UNDEFINED';
                END IF;
            END IF;
    END;

    FUNCTION bnk_account (naccno NUMBER, ntype NUMBER)
        RETURN VARCHAR2
    IS
        vretval   VARCHAR2 (30);
    BEGIN
        --RAISE_ERROR(naccno||'='||ntype);
        IF ((ntype IS NULL) OR (naccno IS NULL))
        THEN
            RETURN NULL;
        END IF;

        IF ntype = 1
        THEN                                               -- SERVICE PROVIDER
            SELECT spr_bank_acc_no
              INTO vretval
              FROM tqc_service_providers
             WHERE spr_code = naccno;
        ELSIF ntype = 2
        THEN                                                  -- SCHEME HOLDER
            SELECT clnt_bank_acc_no
              INTO vretval
              FROM tqc_clients
             WHERE clnt_code = naccno;
        ELSIF ntype = 3
        THEN                                              --  PRINCIPAL MEMBER
            SELECT cld_bank_acc_no
              INTO vretval
              FROM gin_claimants
             WHERE cld_code = naccno;
        ELSIF ntype = 4
        THEN
            SELECT cbp_bank_acc_no
              INTO vretval
              FROM gin_clm_business_persons
             WHERE cbp_code = naccno;
        ELSIF ntype NOT IN (1,
                            2,
                            3,
                            4)
        THEN                                                  --  INTERMEDIARY
            SELECT agn_bank_acc_no
              INTO vretval
              FROM tqc_agencies
             WHERE agn_code = naccno;
        ELSE
            raise_application_error (-20001,
                                     'UNDEFINED PAYEE TYPE || ' || ntype);
        END IF;

        RETURN vretval;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN NULL;
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'GETTING BNK ACC ID ' || naccno || ' TYPE ' || ntype);
    END;

    FUNCTION bnk_bbr_code (naccno NUMBER, ntype NUMBER)
        RETURN NUMBER
    IS
        vretval   NUMBER;
    BEGIN
        IF ((ntype IS NULL) OR (naccno IS NULL))
        THEN
            raise_error (
                'PAYEE TYPE NOT PASSED...' || ntype || ' ; ' || naccno);
        END IF;

        --RAISE_eRROR('naccno='||naccno||'='||ntype);
        IF ntype = 1
        THEN                                               -- SERVICE PROVIDER
            SELECT spr_bbr_code
              INTO vretval
              FROM tqc_service_providers
             WHERE spr_code = naccno;
        ELSIF ntype = 2
        THEN                                                  -- SCHEME HOLDER
            SELECT clnt_bbr_code
              INTO vretval
              FROM tqc_clients
             WHERE clnt_code = naccno;
        ELSIF ntype = 3
        THEN                                              --  PRINCIPAL MEMBER
            SELECT cld_bbr_code
              INTO vretval
              FROM gin_claimants
             WHERE cld_code = naccno;
        ELSIF ntype IN (5,
                        7,
                        6,
                        16)
        THEN                                                --  INTERMEDIARIES
            SELECT agn_bbr_code
              INTO vretval
              FROM tqc_agencies
             WHERE agn_code = naccno;
        ELSIF ntype = 4
        THEN
            -- raise_error('buffing....');
            SELECT cbp_bbr_code
              INTO vretval
              FROM gin_clm_business_persons
             WHERE cbp_code = naccno;
        ELSE
            raise_application_error (-20001,
                                     'UNDEFINED PAYEE TYPE || ' || ntype);
        END IF;

        RETURN vretval;
    --   EXCEPTION
    --      WHEN NO_DATA_FOUND
    --      THEN
    --         RETURN NULL;
    --      WHEN OTHERS
    --      THEN
    --         RAISE_APPLICATION_ERROR (-20001, 'GETTING BNK BRH ' || naccno || ' TYPE ' || ntype   );
    END;

    ---************************************************--------------------------
    --COMMISSION PAYMENTS 30032007--
    ---************************************************--------------------------
    PROCEDURE prc_com_pymt ( ---new procedure not working---mombasa payments missing front-end----12/09/2018
                            v_cop_code     VARCHAR2,
                            v_trans_no     NUMBER,
                            v_user_name    VARCHAR2,
                            v_pay_method   VARCHAR2 DEFAULT 'CHQ')
    IS
        CURSOR c_comm IS
            SELECT *
              FROM gin_commission_pymts
             WHERE cop_code = v_cop_code;

        v_drno                  VARCHAR2 (30);
        v_app_lvl               VARCHAR2 (2);
        v_scl_code              gin_sub_classes.scl_code%TYPE;
        v_agnt                  VARCHAR2 (60);
        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        --v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_client_type           VARCHAR2 (20);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (20);
        v_eft_enabled           VARCHAR2 (1);
        v_serv_prov_code        NUMBER;
        v_payee                 VARCHAR2 (300);
        v_cnt                   NUMBER := 0;
        v_net_amt               NUMBER;
    BEGIN
        -- raise_error('v_trans_no=== '||v_trans_no||' v_cop_code '||v_cop_code);
        SELECT cop_cur_code
          INTO v_cur_code
          FROM gin_commission_pymts
         WHERE cop_code = v_cop_code;

        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        FOR i IN c_comm
        LOOP
            v_cnt := v_cnt + 1;

            IF NVL (i.cop_agn_code, 0) = 0
            THEN
                v_client_type := 'D';
            ELSE
                BEGIN
                    SELECT agn_act_code,
                           agn_sht_desc,
                           NVL (agn_payee, agn_name)           --,agn_bbr_code
                      INTO v_act_code, v_agnt_sht_desc, v_payee  --,v_bbr_code
                      FROM tqc_agencies
                     WHERE agn_code = i.cop_agn_code;

                    IF v_act_code IN (2,
                                      9,
                                      10,
                                      16)
                    THEN
                        v_client_type := 'A';
                    ELSIF v_act_code = 3
                    THEN
                        v_client_type := 'B';
                    ELSIF v_act_code IN (10)
                    THEN
                        v_client_type := 'MK';
                    ELSIF v_act_code = 4
                    THEN
                        v_client_type := 'FI';
                    ELSIF v_act_code = 5
                    THEN
                        v_client_type := 'I';
                    ELSIF v_act_code = 6
                    THEN
                        v_client_type := 'R';
                    ELSIF v_act_code = 7
                    THEN
                        v_client_type := 'FO';
                    ELSE
                        raise_application_error (
                            -20001,
                               'UNDEFINED ACCOUNT TYPE - '
                            || v_act_code
                            || ' -FOR AGENCIES '
                            || v_agnt_sht_desc);
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_application_error (
                            -20021,
                            'AGENCY - ' || i.cop_agn_code || ' NOT FOUND ');
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20022,
                            'AGENCY INFO ' || SQLERRM (SQLCODE));
                END;
            END IF;

            v_rec_count := 0;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_brh_name := fms_interfaces_pkg.brh_name (i.cop_brn_code, 'S');
            v_org_code := fms_interfaces_pkg.get_org (i.cop_brn_code);
            -- RAISE_APPLICATION_ERROR (-20001,' v_cur_code'|| v_cur_code);
            fms_interfaces_pkg.trans_bct ('COM',
                                          v_cqr_source,
                                          i.cop_brn_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);
            --retrieve the bank account based on the transaction and the branch---
            v_net_amt :=
                  (NVL (i.cop_comm_amt, 0))
                + (NVL (i.cop_whdtax_amt, 0))
                + (NVL (i.cop_ovride_comm_amt, 0))
                + (NVL (i.cop_ovride_whdtax_amt, 0));

            IF ROUND (NVL (v_net_amt, 0), v_bcur_rnd) <= 0
            THEN
                raise_application_error (
                    -20001,
                       'THE NET COMMISSION AMOUNT '
                    || NVL (v_net_amt, 0)
                    || ' IS EITHER ZERO OR LESS THAN ZERO');
            END IF;

            IF NVL (v_net_amt, 0) != 0
            THEN
                --RAISE_APPLICATION_ERROR (-20001,' v_bct_code '||v_bct_code||' v_bct_brh_code '||v_bct_brh_code);
                /*Get_Gl_Code ('UC',                             --CLAIM PAID NORMAL
                             v_scl_code,
                             v_app_lvl,
                             v_trnt_code,                                 -- OUT ,
                             v_trnt_gl_code,                               --OUT ,
                             v_trnt_contra_gl_code                           --OUT
                            );*/
                IF v_trnt_contra_gl_code IS NULL
                THEN
                    SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
                                                              v_client_type)
                      INTO v_trnt_contra_gl_code
                      FROM DUAL;
                END IF;

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
                                                      v_org_code,
                                                      i.cop_brn_code--i.COPDT_BRN_CODE
                                                                    ) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'COM GL CONTROL A/C - '
                        || v_trnt_contra_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || v_scl_code);
                END IF;

                -------
                IF v_pay_method = 'EFT'
                THEN
                    BEGIN
                        v_eft_enabled := 'N';
                        v_eft_enabled :=
                            account_enabled (
                                bnk_bbr_code (i.cop_agn_code, 4));
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR GETTING BANK ACC INFO... ');
                    END;

                    IF v_eft_enabled = 'N'
                    THEN
                        raise_application_error (
                            -20001,
                            'BANK BRANCH NOT ENABLED TO TRANSACT EFT PAYMENTS');
                    END IF;
                END IF;

                v_rec_count := v_rec_count + 1;

                IF v_pay_method NOT IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                            'COM',                                --narrative,
                            v_trnt_contra_gl_code,           -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            i.cop_brn_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR POSTING PAYMENT DETAILS FOR'
                                || i.cop_cr_mtran_no);
                    END;
                ELSE
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                            'COM',                                --narrative,
                            v_trnt_contra_gl_code,           -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            i.cop_brn_code,                      --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    --                           Fms_Cheques_Pkg.append_eft_payees(
                    --                                                  v_rec_count,--v_no                       NUMBER,
                    --                                                  i.cop_code, --v_ref1                   VARCHAR2,
                    --                                                  ROUND (NVL (i.cop_comm_amt, 0),
                    --                                                     v_bcur_rnd
                    --                                                    ),--v_amount                   NUMBER,
                    --                                                  'COMMISSION '||i.cop_dr_ref_no,--v_narrative                VARCHAR2,
                    --                                                  bnk_bbr_code (i.cop_agn_code, 4),--v_ref_code,--v_bbr_ref_code             VARCHAR2,
                    --                                                  bnk_account (i.cop_agn_code, 4),--v_bnk_account              VARCHAR2,
                    --                                                  i.cop_dr_ref_no,--v_ref2                   VARCHAR2,
                    --                                                  v_payee_eft_dtls);--v_payee_eft_rec   IN OUT   type_payee_eft_table
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR POSTING PAYMENT DETAILS FOR'
                                || i.cop_dr_ref_no);
                    END;
                END IF;

                IF v_pay_method IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        v_payee_eft_dtls (1) :=
                            fms_cheques_pkg.append_eft_payees (
                                v_rec_count,
                                i.cop_code,                          ---v_ref,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd), ---v_amount,
                                v_payee,                           ---v_payee,
                                bnk_bbr_code (i.cop_agn_code, 4),
                                ---v_payee_bank_branch_code,
                                bnk_account (i.cop_agn_code, 4),
                                ---v_payee_bank_acc_no,
                                i.cop_cr_mtran_no                  ---v_ref2);
                                                 );
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                   'FAILED TO SECURE EFT PAYEE DETAILS FOR'
                                || i.cop_code);
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR ON POSTING EFT CLAIM DETAILS FOR'
                                || i.cop_code);
                    END;
                END IF;

                IF v_pay_method IN ('EFT', 'RTGS', 'MOB')
                THEN
                    IF v_pay_method IN ('EFT', 'RTGS')
                    THEN
                        BEGIN
                            --raise_error('v_user_name='||v_user_code||';'||v_cqr_source||';'||v_bct_brh_code||';'||I.COP_BRN_CODE);

                            -- tqc_agencies
                            fms_cheques_pkg.create_reqn (
                                v_cqr_source,
                                i.cop_code,                              --ref
                                i.cop_dr_mtran_no,                    -- ref2,
                                TRUNC (SYSDATE),
                                   'COMMISSION FOR DEBIT NO. '
                                || i.cop_dr_ref_no,
                                --'gis claim',             --narrative V
                                i.cop_brn_code,
                                v_bct_brh_code,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd), --cqr_amount
                                v_payee,
                                i.cop_cur_code,
                                v_bct_code,
                                fms_interfaces_pkg.get_usercode (
                                    UPPER (v_user_name)),
                                TRUNC (SYSDATE),
                                v_user_code,                 --v_cqr_req_by  ,
                                'GIS-COMM',                     -- pmt_type  ,
                                v_chq_dtls,
                                v_payee_eft_dtls,
                                ---          IN OUT   type_payee_eft_table,
                                NULL,                      ---physical_address
                                NULL,                       --- postal_address
                                NULL                           ---use_bnk_code
                                    --                                                    NULL,--v_invoice_no                         VARCHAR2 DEFAULT NULL,
                                    --                                                    NULL--v_invoice_date
                                    );
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error .' || v_payee || SQLERRM (SQLCODE));
                        --ON CREATING PAYMENT REQUISITION <EFT> FOR
                        END;
                    ELSIF v_pay_method IN ('MOB')
                    THEN
                        BEGIN
                            NULL;
                        -- uncomment after fms have updated this functionality
                        /*Fms_Cheques_Pkg.create_reqn(v_cqr_source,
                                                    i.cop_code,                                        --ref
                                                     i.cop_trans_no,                        -- ref2,
                                                     TRUNC (SYSDATE),
                                                     i.cop_trans_no,    --'GIS Claim',             --narrative V
                                                     i.COP_BRN_CODE,
                                                     v_bct_brh_code,
                                                     ROUND (NVL (i.cop_net_comm, 0), v_bcur_rnd),    --cqr_amount
                                                     v_agnt,
                                                     i.COP_cur_code,
                                                     v_bct_code,
                                                     Fms_Interfaces_Pkg.get_usercode (UPPER (v_user_name)),
                                                     trunc(sysdate),
                                                     v_user_code,                               --v_cqr_req_by  ,
                                                     'GIS-COMM',                                   -- pmt_type  ,
                                                     v_chq_dtls,
                                                     v_payee_eft_dtls,   ---          IN OUT   type_payee_eft_table,
                                                     null,-- v_cqr_physical_address               VARCHAR2 DEFAULT NULL,
                                                     null,--v_cqr_postal_address                 VARCHAR2 DEFAULT NULL,
                                                     null,--v_use_bnk_code                       VARCHAR2 DEFAULT NULL,                         NUMBER DEFAULT NULL,
                                                     --null,--i.CPV_INVOICE_NO,--v_invoice_no                         VARCHAR2 DEFAULT NULL,
                                                     v_serv_prov_code--v_mpt_code                           NUMBER DEFAULT NULL
                                                    ); */
                        END;
                    END IF;
                ELSE
                    --raise_error('v_user_name='||v_user_code||';'||v_cqr_source||';'||v_bct_brh_code||';'||i.COP_cur_code);
                    fms_cheques_pkg.create_reqn (
                        v_cqr_source,
                        i.cop_code,                                      --ref
                        i.cop_dr_ref_no,                              -- ref2,
                        TRUNC (SYSDATE),
                        'COMMISSION FOR DEBIT NO. ' || i.cop_dr_ref_no,
                        --'GIS Claim',             --narrative V
                        i.cop_brn_code,                    --i.COPDT_BRN_CODE,
                        v_bct_brh_code,
                        ROUND (NVL (v_net_amt, 0), v_bcur_rnd),   --cqr_amount
                        v_payee,
                        i.cop_cur_code,
                        v_bct_code,
                        fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                        TRUNC (SYSDATE),
                        v_user_code,                         --v_cqr_req_by  ,
                        'GIS-COMM',                             -- pmt_type  ,
                        v_chq_dtls);
                END IF;
            END IF;
        END LOOP;

        -- raise_error('v_cnt========'||v_cnt||'  v_rec_count '||v_rec_count);
        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'COM REQN NOT CREATED FOR COMMISSION # ' || v_drno);
        END IF;
    --   EXCEPTION
    --      WHEN exc_user_error
    --      THEN
    --         RAISE_APPLICATION_ERROR (-20001,
    --                                     'THE SPECIFIED USERNAME ( '
    --                                  || v_user_name
    --                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    --                                 );
    --      WHEN OTHERS
    --      THEN
    --         RAISE_APPLICATION_ERROR (-20001,
    --                                     'ERROR CREATING REQUISITION :- '
    --                                  || SQLERRM (SQLCODE)
    --                                 );
    END;

    --  PROCEDURE prc_com_pymt (
    --      v_copdt_code     NUMBER,
    --      v_user_name    VARCHAR2,
    --      v_pay_method   VARCHAR2-- DEFAULT 'CHQ'
    --   )
    --   IS
    --       CURSOR c_comm
    --      IS
    --             SELECT *
    --               FROM   gin_comm_pymt_dtls
    --               WHERE copdt_code = v_copdt_code
    --               AND NVL(copdt_authorized,'N') != 'Y';

    --      v_drno                  VARCHAR2 (30);
    --      v_app_lvl               VARCHAR2 (2);
    --      v_scl_code              GIN_SUB_CLASSES.SCL_CODE%TYPE;
    --      v_agnt                  VARCHAR2 (60);
    --      v_chq_dtls              Fms_Cheques_Pkg.type_rqn_dtls_table;
    --      v_payee_eft_dtls        Fms_Cheques_Pkg.type_payee_eft_table;
    --      v_payee_mft_dtls        fms_cheques_pkg.type_payee_mft_table;
    --      v_cqr_brh_code          NUMBER;
    --      v_user_code             NUMBER;
    --      v_cqr_source_auth_by    NUMBER;
    --      v_cqr_source_auth_dt    DATE;
    --      exc_user_error          EXCEPTION;
    --      v_brh_name              VARCHAR2 (100);
    --      v_bct_code              NUMBER;
    --      v_bct_brh_code          NUMBER;
    --      v_crt_acc_number        VARCHAR2 (20);
    --      v_crt_acc_org_code      NUMBER;
    --      --v_trnt_gl_code          VARCHAR2 (20);
    --      v_trnt_contra_gl_code   VARCHAR2 (20);
    --      v_trnt_code             VARCHAR2 (20);
    --      v_acc_type              VARCHAR2 (20);
    --      v_cqr_source            NUMBER;
    --      v_rec_count             NUMBER                              := 0;
    --      v_org_code              NUMBER;
    --      v_exch_rate             NUMBER;
    --      v_rnd                   NUMBER;
    --      v_bcur_rnd              NUMBER;
    --      v_cur_code              NUMBER;
    --      v_client_type           VARCHAR2 (20);
    --      v_act_code               NUMBER;
    --      v_agnt_sht_desc          VARCHAR2 (20);
    --      v_eft_enabled           VARCHAR2(1);
    --      v_serv_prov_code        NUMBER;
    --      v_payee               VARCHAR2 (300);
    --      v_cnt NUMBER:=0;
    --      v_net_amt            NUMBER;
    --      v_bnk_account VARCHAR2 (50);
    --      v_bnk_bbr_code VARCHAR2 (50);
    --      v_tel_pay               VARCHAR2 (30);
    --      v_ref_no                 VARCHAR2 (30);
    --      v_mpt_code NUMBER;
    --      v_agn_name VARCHAR2 (100);
    --      v_pay_mode VARCHAR2 (100);
    --   BEGIN
    --
    --      SELECT copdt_cur_code,agn_name,cpm_sht_desc
    --        INTO v_cur_code,v_agn_name,v_pay_mode
    --        FROM gin_comm_pymt_dtls,tqc_agencies,tqc_clm_payment_modes
    --       WHERE copdt_agn_code=agn_code
    --       AND copdt_cpm_code=cpm_code(+)
    --       AND copdt_code = v_copdt_code;
    --
    --       IF v_pay_mode IS NULL THEN
    --          v_pay_mode:=v_pay_method;
    --       END IF;

    --      v_user_code := Fms_Interfaces_Pkg.get_usercode (UPPER (v_user_name));

    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;

    --      v_exch_rate := Get_Currexch_Rate (v_cur_code, v_rnd, v_bcur_rnd);

    --      FOR i IN c_comm
    --      LOOP
    --      v_cnt:=v_cnt + 1;
    --            IF NVL (i.copdt_agn_code, 0) = 0  THEN
    --                            v_client_type := 'D';
    --            ELSE
    --                    BEGIN
    --                       SELECT agn_act_code, agn_sht_desc,agn_name--,agn_bbr_code
    --                         INTO v_act_code, v_agnt_sht_desc,v_payee--,v_bbr_code
    --                         FROM tqc_agencies
    --                        WHERE agn_code = i.copdt_agn_code;

    --                       IF v_act_code IN (2, 9, 10, 16)
    --                       THEN
    --                            v_client_type := 'A';
    --                       ELSIF v_act_code = 3
    --                       THEN
    --                            v_client_type  :='B';
    --                       ELSIF v_act_code IN (10)
    --                       THEN
    --                          v_client_type := 'MK';
    --                       ELSIF v_act_code = 4
    --                       THEN
    --                          v_client_type := 'FI';
    --                       ELSIF v_act_code = 5
    --                       THEN
    --                          v_client_type := 'I';
    --                       ELSIF v_act_code = 6
    --                       THEN
    --                          v_client_type := 'R';
    --                       ELSIF v_act_code = 7
    --                       THEN
    --                          v_client_type := 'FO';
    --                       ELSE
    --                          RAISE_APPLICATION_ERROR
    --                                          (-20001,
    --                                              'UNDEFINED ACCOUNT TYPE - '
    --                                           || v_act_code
    --                                           || ' -FOR AGENCIES '
    --                                           || v_agnt_sht_desc
    --                                          );
    --                       END IF;
    --                    EXCEPTION
    --                       WHEN NO_DATA_FOUND
    --                       THEN
    --                          RAISE_APPLICATION_ERROR (-20021,
    --                                                      'AGENCY - '
    --                                                   || i.copdt_agn_code
    --                                                   || ' NOT FOUND '
    --                                                  );
    --                       WHEN OTHERS
    --                       THEN
    --                          RAISE_APPLICATION_ERROR (-20022,
    --                                                      'AGENCY INFO '
    --                                                   || SQLERRM (SQLCODE)
    --                                                  );
    --                    END;
    --            END IF;

    --         v_rec_count := 0;
    --         v_cqr_source := Fms_Interfaces_Pkg.systemcode ('GIS');
    --         v_brh_name := Fms_Interfaces_Pkg.brh_name (i.copdt_brn_code, 'S');
    --         v_org_code := Fms_Interfaces_Pkg.get_org (i.copdt_brn_code);
    --         Fms_Interfaces_Pkg.trans_bct ('COM',
    --                                       v_cqr_source,
    --                                       i.copdt_brn_code,
    --                                       v_cur_code,
    --                                       v_bct_code,
    --                                       v_bct_brh_code
    --                                      );
    --        --retrieve the bank account based on the transaction and the branch--- GIN_COMM_PYMT_DTLS
    --         v_net_amt :=  (NVL (i.copdt_payable_net_comm, 0));
    --
    --        -- v_net_amt :=  (NVL (i.copdt_comm_amt, 0)) + (NVL (i.copdt_whdtax_amt, 0));
    --        -- IF  ROUND(nvl (i.copdt_net_comm, 0),v_rnd)  !=  ROUND( (nvl (i.copdt_whdtax_amt, 0) + nvl (i.copdt_comm_amt, 0) ),v_rnd)
    --         IF   ROUND(nvl (i.copdt_net_comm, 0),v_rnd)  -  ROUND( (nvl (i.copdt_whdtax_amt, 0) + nvl (i.copdt_comm_amt, 0) ),v_rnd)>2
    --         THEN
    --            RAISE_APPLICATION_ERROR (-20001,
    --                                      ' THE NET COMMISSION AMOUNT '
    --                                     || NVL (i.COPDT_NET_COMM, 0)
    --                                     || ' PLUS WHDTAX '
    --                                     || NVL (i.COPDT_WHDTAX_AMT, 0)||' + '||i.copdt_comm_amt
    --                                     || '  DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                                    );
    --         END IF;
    --
    --         IF ROUND (NVL (v_net_amt, 0), v_bcur_rnd) <= 0
    --         THEN
    --            RAISE_APPLICATION_ERROR (-20001,
    --                                        'THE NET COMMISSION AMOUNT '
    --                                     || NVL (v_net_amt, 0)
    --                                     || ' IS EITHER ZERO OR LESS THAN ZERO'
    --                                    );
    --         END IF;
    ----RAISE_eRROR('v_net_amt='||v_net_amt);
    --         IF NVL (v_net_amt, 0) != 0
    --         THEN
    --           -- RAISE_APPLICATION_ERROR (-20001,'SCL IS '||v_scl_code||' AND V_APP_LVL = '||v_app_lvl);
    --            /*Get_Gl_Code ('UC',                             --CLAIM PAID NORMAL
    --                         v_scl_code,
    --                         v_app_lvl,
    --                         v_trnt_code,                                 -- OUT ,
    --                         v_trnt_gl_code,                               --OUT ,
    --                         v_trnt_contra_gl_code                           --OUT
    --                        );*/

    --            IF v_trnt_contra_gl_code IS NULL THEN
    --                 SELECT GIN_INTERFACES_PKG.SL_CONTROL_ACC('GIS',v_client_type) INTO v_trnt_contra_gl_code  FROM DUAL;
    --            END IF;
    --
    --            IF Fms_Interfaces_Pkg.valid_trns_acc (v_trnt_contra_gl_code,
    --                                                  v_org_code,
    --                                                  i.copdt_brn_code--i.COPDT_BRN_CODE
    --                                                 ) = FALSE
    --            THEN
    --               RAISE_APPLICATION_ERROR (-20001,
    --                                           'COM GL CONTROL A/C - '
    --                                        || v_trnt_contra_gl_code
    --                                        || ' UNDEFINED IN '
    --                                        || v_brh_name
    --                                        || ' CODE '
    --                                        || v_trnt_code
    --                                        || ' CLS - '
    --                                        || v_scl_code
    --                                       );
    --            END IF;
    --            -------
    --            IF v_pay_mode = 'EFT' THEN
    --                   /*BEGIN
    --                      v_eft_enabled := 'N';
    --                      v_eft_enabled := account_enabled (bnk_bbr_code (i.copdt_agn_code, 5));
    --                   EXCEPTION
    --                      WHEN OTHERS THEN
    --                         raise_error ('ERROR GETTING BANK ACC INFO... ');
    --                   END;*/
    --
    --
    --                  v_eft_enabled := 'N';
    --
    --                  IF bnk_bbr_code (i.copdt_agn_code, 5) IS NOT NULL THEN
    --                       v_eft_enabled := account_enabled (bnk_bbr_code (i.copdt_agn_code, 5));
    --                       v_bnk_account := bnk_account (i.copdt_agn_code, 5);
    --                       v_bnk_bbr_code := tqc_interfaces_pkg.bank_ref(bnk_bbr_code (i.copdt_agn_code, 5));
    --                  END IF;
    --
    --                  IF v_eft_enabled = 'N' THEN
    --                      RAISE_APPLICATION_ERROR (-20001, 'BANK BRANCH NOT FOR '||v_agn_name||'
    --                      NOT ENABLED TO TRANSACT EFT PAYMENTS' ||i.copdt_cpm_code);
    --                  END IF;
    --            END IF;
    --
    --            v_rec_count := v_rec_count + 1;
    --
    --            IF v_pay_mode NOT IN ('EFT','RTGS') THEN
    --                   BEGIN
    --                    Fms_Cheques_Pkg.append_chq_trans(v_rec_count,
    --                                                    ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                                    'COM', --narrative,
    --                                                    v_trnt_contra_gl_code,-- crt_acc_number
    --                                                    v_org_code, --crt_acc_org_code ,
    --                                                    i.copdt_brn_code, --i.cmb_brn_code,          --v_brh_code,
    --                                                    'D',                                            --v_dr_cr,
    --                                                    v_chq_dtls
    --                                                    );
    --                      EXCEPTION
    --                       WHEN OTHERS
    --                       THEN
    --                          raise_error (   'ERROR POSTING PAYMENT DETAILS FOR'
    --                                       || i.copdt_code
    --                                       || i.copdt_payee
    --                                      );
    --                    END;
    --            ELSE
    --                    BEGIN
    --                       Fms_Cheques_Pkg.append_chq_trans
    --                                                 (v_rec_count,
    --                                                  ROUND (NVL (v_net_amt, 0),v_bcur_rnd),
    --                                                  'COM',             --narrative,
    --                                                  v_trnt_contra_gl_code, -- crt_acc_number
    --                                                  v_org_code,  --crt_acc_org_code ,
    --                                                  i.copdt_brn_code,     --v_brh_code,
    --                                                  'D',                   --v_dr_cr,
    --                                                  v_chq_dtls
    --                                                 );
    --
    ----                           Fms_Cheques_Pkg.append_eft_payees(
    ----                                                  v_rec_count,--v_no                       NUMBER,
    ----                                                  i.cop_code, --v_ref1                   VARCHAR2,
    ----                                                  ROUND (NVL (i.cop_comm_amt, 0),
    ----                                                     v_bcur_rnd
    ----                                                    ),--v_amount                   NUMBER,
    ----                                                  'COMMISSION '||i.cop_dr_ref_no,--v_narrative                VARCHAR2,
    ----                                                  bnk_bbr_code (i.cop_agn_code, 4),--v_ref_code,--v_bbr_ref_code             VARCHAR2,
    ----                                                  bnk_account (i.cop_agn_code, 4),--v_bnk_account              VARCHAR2,
    ----                                                  i.cop_dr_ref_no,--v_ref2                   VARCHAR2,
    ----                                                  v_payee_eft_dtls);--v_payee_eft_rec   IN OUT   type_payee_eft_table
    --                    EXCEPTION
    --                       WHEN OTHERS
    --                       THEN
    --                          raise_error (   'ERROR POSTING PAYMENT DETAILS FOR'
    --                                       || i.copdt_code
    --                                       || i.copdt_payee
    --                                      );
    --                    END;
    --             END IF;
    --
    --            IF v_pay_mode  IN ('EFT','RTGS') THEN
    --                   BEGIN
    --                      v_payee_eft_dtls (1) :=
    --                      Fms_Cheques_Pkg.append_eft_payees(v_rec_count,
    --                                                         i.copdt_code ,  ---v_ref,
    --                                                         ROUND (NVL (v_net_amt, 0), v_bcur_rnd),---v_amount,
    --                                                         v_payee,  ---v_payee,
    --                                                         v_bnk_bbr_code,--bnk_bbr_code (i.copdt_agn_code, 5),---v_payee_bank_branch_code,
    --                                                         bnk_account (i.copdt_agn_code, 5),  ---v_payee_bank_acc_no,
    --                                                         i.copdt_trans_no                      ---v_ref2);
    --                                                        );
    --                EXCEPTION
    --                  WHEN NO_DATA_FOUND THEN
    --                     raise_error ('FAILED TO SECURE EFT PAYEE DETAILS FOR'|| i.copdt_code||'='|| i.copdt_payee);
    --                   WHEN OTHERS THEN
    --                     raise_error ('ERROR ON POSTING EFT CLAIM DETAILS FOR'|| i.copdt_code||'='|| i.copdt_payee);
    --                   END;
    --            ELSIF v_pay_mode IN ('MOB')
    --            THEN
    --              SELECT  agn_tel_pay,agn_id_no
    --                INTO  v_tel_pay,v_ref_no
    --                FROM tqc_agencies
    --               WHERE agn_code=i.copdt_agn_code;
    --
    --               IF v_tel_pay IS NOT NULL  THEN
    --                   SELECT  mpt_code
    --                   INTO v_mpt_code
    --                   FROM tqc_mob_pymnt_types_prefixes,tqc_mobile_pymnt_types
    --                   WHERE mptp_mpt_code = mpt_code
    --                   AND mptp_mob_no_prefix='0'||SUBSTR(REPLACE(v_tel_pay,'+',''),4,3);
    --               ELSE
    --                RAISE_APPLICATION_ERROR ( -20001,'INTERMEDIARY NOT ENABLED TO TRANSACT MOBILE PYMT..');
    --               END IF;
    --               --raise_Error(' v_ref_no= '||v_ref_no);
    --               BEGIN
    --                  v_payee_mft_dtls (1) :=
    --                     fms_cheques_pkg.append_mft_payees
    --                        (v_rec_count,
    --                         i.copdt_code, ---v_ref,
    --                         ROUND (NVL (v_net_amt, 0), v_bcur_rnd),  ---v_amount,
    --                         v_payee,  --v_narrative,
    --                         v_tel_pay,--v_credit_id                                                                                 ,
    --                         'Mobile Phone Number', --v_credit_id_type
    --                         v_ref_no,  --v_validation_id
    --                         'REFERENCE NO' --v_validation_id_type
    --                        );
    --               --fms_chq_mftfile_dtls
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error (   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
    --                                  || i.copdt_code
    --                                  || '='
    --                                  || i.copdt_payee
    --                                 );
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
    --                                  || i.copdt_code
    --                                  || '='
    --                                  || i.copdt_payee
    --                                 );
    --               END;
    --            END IF;
    --
    --            IF v_pay_mode IN ('EFT','RTGS','MOB') THEN
    --                    IF v_pay_mode IN ('EFT','RTGS') THEN
    --                          BEGIN
    --                               Fms_Cheques_Pkg.create_reqn
    --                                                (v_cqr_source,
    --                                                i.copdt_code,                                       --ref
    --                                                i.copdt_trans_no,                                  -- ref2,
    --                                                TRUNC (SYSDATE),
    --                                                'COMMISSION FOR TRANS NO. '||i.copdt_trans_no,
    --                                                i.copdt_brn_code,
    --                                                v_bct_brh_code,
    --                                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd),     --cqr_amount
    --                                                v_payee,
    --                                                i.copdt_cur_code,
    --                                                v_bct_code,
    --                                                fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
    --                                                trunc(sysdate),
    --                                                v_user_code,                                --v_cqr_req_by  ,
    --                                                'GIS-COMM',                                   -- pmt_type  ,
    --                                                v_chq_dtls,
    --                                                v_payee_eft_dtls,  ---          IN OUT   type_payee_eft_table,
    --                                                NULL,  ---physical_address
    --                                                NULL,  --- postal_address
    --                                                NULL,  ---use_bnk_code
    --                                                NULL,--v_invoice_no
    --                                                NULL,--v_invoice_date
    --                                                NULL,
    --                                                'N',--NULL,
    --                                                NULL,
    --                                                NULL,
    --                                                NULL,
    --                                                i.copdt_instant_automated_com,
    --                                                i.copdt_trans_no
    --                                                );
    ----                             EXCEPTION
    ----                                 WHEN OTHERS
    ----                                  THEN
    ----                                   raise_error ('Error .'|| v_payee||sqlerrm(sqlcode));--ON CREATING PAYMENT REQUISITION <EFT> FOR
    ----
    --                           END;
    --                    ELSIF v_pay_mode IN ('MOB') THEN
    --                      --raise_error('v_mpt_code='||v_mpt_code);
    --                         BEGIN
    --                          fms_cheques_pkg.create_reqn
    --                               (v_cqr_source,
    --                                    i.copdt_code,                                   --ref
    --                                    i.copdt_trans_no,                            -- ref2,
    --                                    TRUNC (SYSDATE),
    --                                    'COMMISSION FOR TRANS NO. ' || i.copdt_trans_no,--'GIS Claim',
    --                                    i.copdt_brn_code,
    --                                    v_bct_brh_code,
    --                                    ROUND (NVL (v_net_amt, 0), v_bcur_rnd),  --cqr_amount
    --                                    v_payee,                                    --v_agnt,
    --                                    i.copdt_cur_code,
    --                                    v_bct_code,
    --                                    fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
    --                                    TRUNC (SYSDATE),
    --                                    v_user_code,                        --v_cqr_req_by  ,
    --                                    'GIS-COMM',                            -- pmt_type  ,
    --                                    v_chq_dtls,
    --                                    v_payee_mft_dtls,
    --                                    NULL,-- v_cqr_physical_address
    --                                    NULL,--v_cqr_postal_address
    --                                    NULL,--v_use_bnk_code
    --                                    NULL,
    --                                    v_mpt_code,
    --                                    NULL,
    --                                    NULL,
    --                                    NULL,
    --                                    NULL,
    --                                    i.copdt_instant_automated_com,
    --                                    i.copdt_trans_no)   ;
    --
    --                         END;
    --
    --                    END IF;
    --            ELSE
    --               Fms_Cheques_Pkg.create_reqn(v_cqr_source,
    --                                i.copdt_code,                                        --ref
    --                                i.copdt_trans_no,                        -- ref2,
    --                                TRUNC (SYSDATE),
    --                                'COMMISSION FOR TRANS NO. '||i.COPDT_TRANS_NO,    --'GIS Claim',             --narrative V
    --                                I.copdt_brn_code,--i.COPDT_BRN_CODE,
    --                                v_bct_brh_code,
    --                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd),    --cqr_amount
    --                                v_payee,
    --                                i.copdt_cur_code,
    --                                v_bct_code,
    --                                Fms_Interfaces_Pkg.get_usercode (UPPER (v_user_name)),
    --                                trunc(sysdate),
    --                                v_user_code,                               --v_cqr_req_by  ,
    --                                'GIS-COMM',                                   -- pmt_type  ,
    --                                v_chq_dtls,--,
    --                                '',
    --                                null,
    --                                TO_NUMBER(null),
    --                                TO_NUMBER(null),
    --                                TO_NUMBER(null),
    --                                null,
    --                                TO_NUMBER(null),
    --                                'N',
    --                                TO_NUMBER(null),
    --                                null,
    --                                null,
    --                                i.copdt_instant_automated_com,
    --                                i.copdt_trans_no
    --                                );
    --
    --            END IF;
    --         END IF;
    --      END LOOP;
    ---- raise_error('v_cnt========'||v_cnt||'  v_rec_count '||v_rec_count);
    --      IF v_rec_count = 0
    --      THEN
    --         RAISE_APPLICATION_ERROR (-20001,
    --                                     'COM REQN NOT CREATED FOR COMMISSION # '
    --                                  || v_drno
    --                                 );
    --      END IF;
    --   EXCEPTION
    --      WHEN exc_user_error
    --      THEN
    --         RAISE_APPLICATION_ERROR (-20001,
    --                                     'THE SPECIFIED USERNAME ( '
    --                                  || v_user_name
    --                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    --                                 );
    ----      WHEN OTHERS
    ----      THEN
    ----         RAISE_APPLICATION_ERROR (-20001,
    ----                                     'ERROR CREATING REQUISITION :- '
    ----                                  || SQLERRM (SQLCODE)
    ----                                 );
    ----   END;

    --------The last one------------------------------
    --   PROCEDURE prc_com_pymt (---commented out on 6th Sept 2018 - sorting out momobasa branch commissions---
    --      v_copdt_code   NUMBER,
    --      v_user_name    VARCHAR2,
    --      v_pay_method   VARCHAR2
    --   )
    --   IS
    --      CURSOR c_comm
    --      IS
    --         SELECT *
    --           FROM gin_comm_pymt_dtls
    --          WHERE copdt_code = v_copdt_code
    --            AND NVL (copdt_authorized, 'N') != 'Y';
    --
    --      v_drno                  VARCHAR2 (30);
    --      v_app_lvl               VARCHAR2 (2);
    --      v_scl_code              gin_sub_classes.scl_code%TYPE;
    --      v_agnt                  VARCHAR2 (60);
    --      v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
    --      v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
    --      v_payee_mft_dtls        fms_cheques_pkg.type_payee_mft_table;
    --      v_cqr_brh_code          NUMBER;
    --      v_user_code             NUMBER;
    --      v_cqr_source_auth_by    NUMBER;
    --      v_cqr_source_auth_dt    DATE;
    --      exc_user_error          EXCEPTION;
    --      v_brh_name              VARCHAR2 (100);
    --      v_bct_code              NUMBER;
    --      v_bct_brh_code          NUMBER;
    --      v_crt_acc_number        VARCHAR2 (20);
    --      v_crt_acc_org_code      NUMBER;
    --      --v_trnt_gl_code          VARCHAR2 (20);
    --      v_trnt_contra_gl_code   VARCHAR2 (20);
    --      v_trnt_code             VARCHAR2 (20);
    --      v_acc_type              VARCHAR2 (20);
    --      v_cqr_source            NUMBER;
    --      v_rec_count             NUMBER                               := 0;
    --      v_org_code              NUMBER;
    --      v_exch_rate             NUMBER;
    --      v_rnd                   NUMBER;
    --      v_bcur_rnd              NUMBER;
    --      v_cur_code              NUMBER;
    --      v_client_type           VARCHAR2 (20);
    --      v_act_code              NUMBER;
    --      v_agnt_sht_desc         VARCHAR2 (20);
    --      v_eft_enabled           VARCHAR2 (1);
    --      v_serv_prov_code        NUMBER;
    --      v_payee                 VARCHAR2 (300);
    --      v_cnt                   NUMBER                               := 0;
    --      v_net_amt               NUMBER;
    --      v_bnk_account           VARCHAR2 (50);
    --      v_bnk_bbr_code          VARCHAR2 (50);
    --      v_tel_pay               VARCHAR2 (30);
    --      v_ref_no                VARCHAR2 (30);
    --      v_mpt_code              NUMBER;
    --      v_agn_name              VARCHAR2 (100);
    --      v_pay_mode              VARCHAR2 (100);
    --      v_batch_no              NUMBER;
    --      v_bnk_bbr_pk            NUMBER;
    --      v_paymnt_brh_code  NUMBER;
    --   BEGIN
    --      SELECT copdt_cur_code, agn_name, cpm_sht_desc
    --        INTO v_cur_code, v_agn_name, v_pay_mode
    --        FROM gin_comm_pymt_dtls, tqc_agencies, tqc_clm_payment_modes
    --       WHERE copdt_agn_code = agn_code
    --         AND copdt_cpm_code = cpm_code(+)
    --         AND copdt_code = v_copdt_code;
    --
    --      IF v_pay_method IS NOT NULL
    --      THEN
    --         v_pay_mode := v_pay_method;
    --      END IF;
    --
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));
    --
    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;
    --
    --      v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --
    --      FOR i IN c_comm
    --      LOOP
    --         v_cnt := v_cnt + 1;
    --
    --         IF NVL (i.copdt_agn_code, 0) = 0
    --         THEN
    --            v_client_type := 'D';
    --         ELSE
    --            BEGIN
    --               SELECT agn_act_code, agn_sht_desc, agn_name     --,agn_bbr_code
    --                 INTO v_act_code, v_agnt_sht_desc, v_payee       --,v_bbr_code
    --                 FROM tqc_agencies
    --                WHERE agn_code = i.copdt_agn_code;
    --
    --               IF v_act_code IN (2, 9, 10, 16)
    --               THEN
    --                  v_client_type := 'A';
    --               ELSIF v_act_code = 3
    --               THEN
    --                  v_client_type := 'B';
    --               ELSIF v_act_code IN (10)
    --               THEN
    --                  v_client_type := 'MK';
    --               ELSIF v_act_code = 4
    --               THEN
    --                  v_client_type := 'FI';
    --               ELSIF v_act_code = 5
    --               THEN
    --                  v_client_type := 'I';
    --               ELSIF v_act_code = 6
    --               THEN
    --                  v_client_type := 'R';
    --               ELSIF v_act_code = 7
    --               THEN
    --                  v_client_type := 'FO';
    --               ELSE
    --                  raise_application_error (-20001,
    --                                              'UNDEFINED ACCOUNT TYPE - '
    --                                           || v_act_code
    --                                           || ' -FOR AGENCIES '
    --                                           || v_agnt_sht_desc
    --                                          );
    --               END IF;
    --            EXCEPTION
    --               WHEN NO_DATA_FOUND
    --               THEN
    --                  raise_application_error (-20021,
    --                                              'AGENCY - '
    --                                           || i.copdt_agn_code
    --                                           || ' NOT FOUND '
    --                                          );
    --               WHEN OTHERS
    --               THEN
    --                  raise_application_error (-20022,
    --                                           'AGENCY INFO ' || SQLERRM (SQLCODE)
    --                                          );
    --            END;
    --         END IF;
    --
    --         v_rec_count := 0;
    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
    --         v_brh_name := fms_interfaces_pkg.brh_name (/*i.copdt_brn_code*/v_paymnt_brh_code, 'S');
    --         v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code/*i.copdt_brn_code*/);
    --         fms_interfaces_pkg.trans_bct ('COM',
    --                                       v_cqr_source,
    --                                     v_paymnt_brh_code, -- i.copdt_brn_code,
    --                                       v_cur_code,
    --                                       v_bct_code,
    --                                       v_bct_brh_code,
    --                                       v_pay_method
    --                                      );
    --         --retrieve the bank account based on the transaction and the branch--- GIN_COMM_PYMT_DTLS
    --         v_net_amt := (NVL (i.copdt_payable_net_comm, 0));
    --
    ----raise_error(v_bct_code||';'||v_bct_brh_code||';'||v_cqr_source||';'||i.copdt_brn_code||';'||v_cur_code);
    --         -- v_net_amt :=  (NVL (i.copdt_comm_amt, 0)) + (NVL (i.copdt_whdtax_amt, 0));
    --         -- IF  ROUND(nvl (i.copdt_net_comm, 0),v_rnd)  !=  ROUND( (nvl (i.copdt_whdtax_amt, 0) + nvl (i.copdt_comm_amt, 0) ),v_rnd)
    --         IF   ROUND (NVL (i.copdt_net_comm, 0), v_rnd)
    --            - ROUND ((NVL (i.copdt_whdtax_amt, 0) + NVL (i.copdt_comm_amt, 0)
    --                     ),
    --                     v_rnd
    --                    ) > 2
    --         THEN
    --            raise_application_error
    --                                 (-20001,
    --                                     ' THE NET COMMISSION AMOUNT '
    --                                  || NVL (i.copdt_net_comm, 0)
    --                                  || ' PLUS WHDTAX '
    --                                  || NVL (i.copdt_whdtax_amt, 0)
    --                                  || ' DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                                  || i.copdt_comm_amt
    --                                 );
    --         END IF;
    --
    --         IF ROUND (NVL (v_net_amt, 0), v_bcur_rnd) <= 0
    --         THEN
    --            raise_application_error (-20001,
    --                                        'THE NET COMMISSION AMOUNT '
    --                                     || NVL (v_net_amt, 0)
    --                                     || ' IS EITHER ZERO OR LESS THAN ZERO'
    --                                    );
    --         END IF;
    --
    --         IF NVL (v_net_amt, 0) != 0
    --         THEN
    --            -- RAISE_APPLICATION_ERROR (-20001,'SCL IS '||v_scl_code||' AND V_APP_LVL = '||v_app_lvl);
    --             /*Get_Gl_Code ('UC',                             --CLAIM PAID NORMAL
    --                          v_scl_code,
    --                          v_app_lvl,
    --                          v_trnt_code,                                 -- OUT ,
    --                          v_trnt_gl_code,                               --OUT ,
    --                          v_trnt_contra_gl_code                           --OUT
    --                         );*/
    --            IF v_trnt_contra_gl_code IS NULL
    --            THEN
    --               SELECT gin_interfaces_pkg.sl_control_acc ('GIS', v_client_type)
    --                 INTO v_trnt_contra_gl_code
    --                 FROM DUAL;
    --            END IF;
    --
    --            IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
    --                                                  v_org_code,
    --                                                 v_paymnt_brh_code--, i.copdt_brn_code
    --                                                 ) = FALSE
    --            THEN
    --               raise_application_error (-20001,
    --                                           'COM GL CONTROL A/C - '
    --                                        || v_trnt_contra_gl_code
    --                                        || ' UNDEFINED IN '
    --                                        || v_brh_name
    --                                        || ' CODE '
    --                                        || v_trnt_code
    --                                        || ' CLS - '
    --                                        || v_scl_code
    --                                       );
    --            END IF;
    --
    --            -------
    --            IF v_pay_mode IN  ('EFT','RTGS')
    --            THEN
    --               /*BEGIN
    --                  v_eft_enabled := 'N';
    --                  v_eft_enabled := account_enabled (bnk_bbr_code (i.copdt_agn_code, 5));
    --               EXCEPTION
    --                  WHEN OTHERS THEN
    --                     raise_error ('ERROR GETTING BANK ACC INFO... ');
    --               END;*/
    --               v_eft_enabled := 'N';
    --
    --               IF bnk_bbr_code (i.copdt_agn_code, 5) IS NOT NULL
    --               THEN
    --                  v_eft_enabled :=
    --                         account_enabled (bnk_bbr_code (i.copdt_agn_code, 5));
    --                  v_bnk_account := bnk_account (i.copdt_agn_code, 5);
    --                  v_bnk_bbr_code :=
    --                     tqc_interfaces_pkg.bank_ref
    --                                             (bnk_bbr_code (i.copdt_agn_code,
    --                                                            5
    --                                                           )
    --                                             );
    --                  v_bnk_bbr_pk := bnk_bbr_code (i.copdt_agn_code, 5);
    --               END IF;
    --
    --               IF v_eft_enabled = 'N'
    --               THEN
    --                  raise_application_error
    --                     (-20001,
    --                         'BANK BRANCH NOT FOR '
    --                      || v_agn_name
    --                      || '
    --                      NOT ENABLED TO TRANSACT EFT PAYMENTS'
    --                      || i.copdt_cpm_code
    --                     );
    --               END IF;
    --            END IF;
    --
    --            v_rec_count := v_rec_count + 1;
    --
    --            IF v_pay_mode NOT IN ('EFT', 'RTGS')
    --            THEN
    --               BEGIN
    --                  fms_cheques_pkg.append_chq_trans
    --                                     (v_rec_count,
    --                                      ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                      'COM',                      --narrative,
    --                                      v_trnt_contra_gl_code, -- crt_acc_number
    --                                      v_org_code,         --crt_acc_org_code ,
    --                                     v_paymnt_brh_code,-- i.copdt_brn_code,
    --
    --                                      --i.cmb_brn_code,          --v_brh_code,
    --                                      'D',                          --v_dr_cr,
    --                                      v_chq_dtls
    --                                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'ERROR POSTING PAYMENT DETAILS FOR'
    --                                  || i.copdt_code
    --                                  || i.copdt_payee
    --                                 );
    --               END;
    --            ELSE
    --               BEGIN
    --                  fms_cheques_pkg.append_chq_trans
    --                                     (v_rec_count,
    --                                      ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                      'COM',                      --narrative,
    --                                      v_trnt_contra_gl_code, -- crt_acc_number
    --                                      v_org_code,         --crt_acc_org_code ,
    --                                      v_paymnt_brh_code,--i.copdt_brn_code,          --v_brh_code,
    --                                      'D',                          --v_dr_cr,
    --                                      v_chq_dtls
    --                                     );
    ----                           Fms_Cheques_Pkg.append_eft_payees(
    ----                                                  v_rec_count,--v_no                       NUMBER,
    ----                                                  i.cop_code, --v_ref1                   VARCHAR2,
    ----                                                  ROUND (NVL (i.cop_comm_amt, 0),
    ----                                                     v_bcur_rnd
    ----                                                    ),--v_amount                   NUMBER,
    ----                                                  'COMMISSION '||i.cop_dr_ref_no,--v_narrative                VARCHAR2,
    ----                                                  bnk_bbr_code (i.cop_agn_code, 4),--v_ref_code,--v_bbr_ref_code             VARCHAR2,
    ----                                                  bnk_account (i.cop_agn_code, 4),--v_bnk_account              VARCHAR2,
    ----                                                  i.cop_dr_ref_no,--v_ref2                   VARCHAR2,
    ----                                                  v_payee_eft_dtls);--v_payee_eft_rec   IN OUT   type_payee_eft_table
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'ERROR POSTING PAYMENT DETAILS FOR'
    --                                  || i.copdt_code
    --                                  || i.copdt_payee
    --                                 );
    --               END;
    --            END IF;
    --
    --            IF v_pay_mode IN ('EFT', 'RTGS')
    --            THEN
    --               BEGIN
    --                  v_payee_eft_dtls (1) :=
    --                     fms_cheques_pkg.append_eft_payees
    --                                 (v_rec_count,
    --                                  i.copdt_code,                      ---v_ref,
    --                                  ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                  ---v_amount,
    --                                  v_payee,                         ---v_payee,
    --                                  v_bnk_bbr_code, ---v_payee_bank_branch_code,
    --                                  bnk_account (i.copdt_agn_code, 5),
    --                                  ---v_payee_bank_acc_no,
    --                                  i.copdt_trans_no                 ---v_ref2);
    --                                 );
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error (   'FAILED TO SECURE EFT PAYEE DETAILS FOR'
    --                                  || i.copdt_code
    --                                  || '='
    --                                  || i.copdt_payee
    --                                 );
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error (   'ERROR ON POSTING EFT CLAIM DETAILS FOR'
    --                                  || i.copdt_code
    --                                  || '='
    --                                  || i.copdt_payee
    --                                 );
    --               END;
    --            ELSIF v_pay_mode IN ('MOB')
    --            THEN
    --               SELECT agn_tel_pay, agn_id_no
    --                 INTO v_tel_pay, v_ref_no
    --                 FROM tqc_agencies
    --                WHERE agn_code = i.copdt_agn_code;
    --
    --               IF v_tel_pay IS NOT NULL
    --               THEN
    --                  SELECT mpt_code
    --                    INTO v_mpt_code
    --                    FROM tqc_mob_pymnt_types_prefixes, tqc_mobile_pymnt_types
    --                   WHERE mptp_mpt_code = mpt_code
    --                     AND mptp_mob_no_prefix =
    --                            '0' || SUBSTR (REPLACE (v_tel_pay, '+', ''), 4, 3);
    --               ELSE
    --                  raise_application_error
    --                        (-20001,
    --                         'INTERMEDIARY NOT ENABLED TO TRANSACT MOBILE PYMT..'
    --                        );
    --               END IF;
    --
    --               BEGIN
    --                  v_payee_mft_dtls (1) :=
    --                     fms_cheques_pkg.append_mft_payees
    --                                    (v_rec_count,
    --                                     i.copdt_code,                   ---v_ref,
    --                                     ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
    --                                     ---v_amount,
    --                                     v_payee,                   --v_narrative,
    --                                     v_tel_pay,
    --
    ----v_credit_id                                                                                 ,
    --                                     'Mobile Phone Number', --v_credit_id_type
    --                                     v_ref_no,               --v_validation_id
    --                                     'REFERENCE NO'     --v_validation_id_type
    --                                    );
    --               --fms_chq_mftfile_dtls
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error (   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
    --                                  || i.copdt_code
    --                                  || '='
    --                                  || i.copdt_payee
    --                                 );
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                               (   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
    --                                || i.copdt_code
    --                                || '='
    --                                || i.copdt_payee
    --                               );
    --               END;
    --            END IF;
    --
    --            IF NVL (i.copdt_instant_automated_com, 'N') = 'Y'
    --            THEN
    --               v_batch_no := i.copdt_trans_no;
    --            ELSE
    --               v_batch_no := NULL;
    --            END IF;
    --
    --            IF v_pay_mode IN ('EFT', 'RTGS', 'MOB')
    --            THEN
    --               IF v_pay_mode IN ('EFT', 'RTGS')
    --               THEN
    ----               raise_error('here=='||v_bnk_bbr_code||';'||v_bnk_bbr_pk);
    ----      tqc_bank_branches
    --                  BEGIN
    --
    --                   FMS_INTERFACES_PKG.create_EftRtgs_reqn(
    --                          v_cqr_source,               -- v_cqr_source,
    --                          i.copdt_code,                       -- v_cqr_ref,
    --                          i.copdt_trans_no,                     -- v_cqr_ref2,
    --                          TRUNC (SYSDATE),             -- v_cqr_ref_date,
    --                          'COMMISSION FOR TRANS NO. ' || i.copdt_trans_no,
    --                          v_paymnt_brh_code,          -- v_cqr_brh_code,
    --                          v_bct_brh_code, -- v_cqr_bct_brh_code,
    --                          ROUND (NVL (v_net_amt, 0), v_bcur_rnd),  --cqr_amount
    --                          v_payee,                   -- v_cqr_payee,
    --                          v_pay_mode,
    --                          i.copdt_cur_code,             -- v_cqr_cur_code,
    --                          null,---i.cpv_cur_rate,
    --                          v_bct_code,---
    --                          fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
    --                          TRUNC (SYSDATE),--i.cpv_authorised_dt,
    --                          v_user_code,                 -- v_cqr_req_by,
    --                          'GIS-COMM',             -- v_cqr_pmt_type,
    --                          v_bnk_bbr_code,--v_payee_bank_branch_code,
    --                          v_bnk_account,--v_payee_bank_acc_no,
    --                          v_chq_dtls,             -- v_dtls_table,
    --                          v_payee_eft_dtls,         --v_payee_eft_rec
    --                          NULL,--v_cqr_physical_address
    --                          NULL, ---v_cqr_postal_address
    --                          i.copdt_trans_no,--v_itfc_trans_code
    --                          null,--v_itfc_ref3
    --                          null,--v_payee_source_pk,
    --                          null,--v_payee_source_type,
    --                          'N',--v_auto_auth,
    --                          null,--v_num_val_1,
    --                          null,---v_invoice_no,
    --                          null,---v_invoice_date,
    --                          null,---v_auto_consolidate,
    --                          null,---v_batch_no,
    --                          null---v_payee_spr_code
    --                       );
    --
    --
    ----                     fms_cheques_pkg.create_reqn
    ----                        (v_cqr_source,
    ----                         i.copdt_code,                                   --ref
    ----                         i.copdt_trans_no,                            -- ref2,
    ----                         TRUNC (SYSDATE),
    ----                         'COMMISSION FOR TRANS NO. ' || i.copdt_trans_no,
    ----                        v_paymnt_brh_code,-- i.copdt_brn_code,
    ----                         v_bct_brh_code,
    ----                         ROUND (NVL (v_net_amt, 0), v_bcur_rnd),  --cqr_amount
    ----                         v_payee,
    ----                         v_pay_mode,
    ----                         NULL,
    ----                         v_bnk_bbr_pk,
    ----                         i.copdt_cur_code,
    ----                         v_bct_code,
    ----                         fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
    ----                         TRUNC (SYSDATE),
    ----                         v_user_code,                        --v_cqr_req_by  ,
    ----                         'GIS-COMM',                            -- pmt_type  ,
    ----                         v_chq_dtls,
    ----                         v_payee_eft_dtls,
    ----                         ---          IN OUT   type_payee_eft_table,
    ----                         NULL,                             ---physical_address
    ----                         NULL,                               ---postal_address
    ----                         NULL,                                 ---use_bnk_code
    ----                         NULL,
    ----                         NULL,
    ----                         v_bnk_bbr_code,                    --v_payee_bbr_code
    ----                         v_bnk_account,                       --v_payee_acc_no
    ----                         NULL,                             --v_payee_source_pk
    ----                         'N',                                   --v_auto_auth,
    ----                         NULL,                                   --v_num_val_1
    ----                         NULL,                                  --v_invoice_no
    ----                         NULL,                                --v_invoice_date
    ----                         i.copdt_instant_automated_com,     --v_auto_comm_proc
    ----                         v_batch_no             --i.copdt_trans_no--v_batch_no
    ----                        );
    ----                  EXCEPTION
    ----                     WHEN OTHERS
    ----                     THEN
    ----                        raise_error ('Error .' || v_payee || SQLERRM (SQLCODE)
    --                           --         );
    --                  --ON CREATING PAYMENT REQUISITION <EFT> FOR
    --                  END;
    --               ELSIF v_pay_mode IN ('MOB')
    --               THEN
    --                  --raise_error('v_mpt_code='||v_mpt_code);
    --                  BEGIN
    --                     fms_cheques_pkg.create_reqn
    --                        (v_cqr_source,
    --                         i.copdt_code,                                   --ref
    --                         i.copdt_trans_no,                            -- ref2,
    --                         TRUNC (SYSDATE),
    --                         'COMMISSION FOR TRANS NO. ' || i.copdt_trans_no,
    --                         --'GIS Claim',
    --                         v_paymnt_brh_code,--i.copdt_brn_code,
    --                         v_bct_brh_code,
    --                         ROUND (NVL (v_net_amt, 0), v_bcur_rnd),  --cqr_amount
    --                         v_payee,                                    --v_agnt,
    --                         i.copdt_cur_code,
    --                         v_bct_code,
    --                         fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
    --                         TRUNC (SYSDATE),
    --                         v_user_code,                        --v_cqr_req_by  ,
    --                         'GIS-COMM',                            -- pmt_type  ,
    --                         v_chq_dtls,
    --                         v_payee_mft_dtls,
    --                         NULL,                       -- v_cqr_physical_address
    --                         NULL,                          --v_cqr_postal_address
    --                         NULL,                                --v_use_bnk_code
    --                         NULL,
    --                         v_mpt_code,
    --                         NULL,
    --                         NULL,
    --                         NULL,
    --                         NULL,
    --                         i.copdt_instant_automated_com,
    --                         v_batch_no                         --i.copdt_trans_no
    --                        );
    --                  END;
    --               END IF;
    --            ELSE
    --               fms_cheques_pkg.create_reqn
    --                        (v_cqr_source,
    --                         i.copdt_code,                                   --ref
    --                         i.copdt_trans_no,                            -- ref2,
    --                         TRUNC (SYSDATE),
    --                         'COMMISSION FOR TRANS NO. ' || i.copdt_trans_no,
    --                         --'GIS Claim',             --narrative V
    --                         v_paymnt_brh_code,--i.copdt_brn_code,                 --i.COPDT_BRN_CODE,
    --                         v_bct_brh_code,
    --                         ROUND (NVL (v_net_amt, 0), v_bcur_rnd),  --cqr_amount
    --                         v_payee,
    --                         i.copdt_cur_code,
    --                         v_bct_code,
    --                         fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
    --                         TRUNC (SYSDATE),
    --                         v_user_code,                        --v_cqr_req_by  ,
    --                         'GIS-COMM',                            -- pmt_type  ,
    --                         v_chq_dtls,                                       --,
    --                         '',
    --                         NULL,
    --                         TO_NUMBER (NULL),
    --                         TO_NUMBER (NULL),
    --                         TO_NUMBER (NULL),
    --                         NULL,
    --                         TO_NUMBER (NULL),
    --                         'N',
    --                         TO_NUMBER (NULL),
    --                         NULL,
    --                         NULL,
    --                         i.copdt_instant_automated_com,
    --                         v_batch_no                         --i.copdt_trans_no
    --                        );
    --            END IF;
    --         END IF;
    --      END LOOP;
    --
    --      IF v_rec_count = 0
    --      THEN
    --         raise_application_error (-20001,
    --                                     'COM REQN NOT CREATED FOR COMMISSION # '
    --                                  || v_drno
    --                                 );
    --      END IF;
    ----   EXCEPTION
    ----      WHEN exc_user_error
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                     'THE SPECIFIED USERNAME ( '
    ----                                  || v_user_name
    ----                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    ----                                 );
    ----      WHEN OTHERS
    ----      THEN
    ----         raise_application_error (-20001,
    ----                                     'ERROR CREATING REQUISITION :- '
    ----                                  || SQLERRM (SQLCODE)
    ----                                 );
    --   END;
    PROCEDURE prc_com_pymt (v_copdt_code   NUMBER,
                            v_user_name    VARCHAR2,
                            v_pay_method   VARCHAR2)
    IS
        CURSOR c_comm IS
            SELECT *
              FROM gin_comm_pymt_dtls
             WHERE     copdt_code = v_copdt_code
                   AND NVL (copdt_authorized, 'N') != 'Y';

        v_drno                  VARCHAR2 (30);
        v_app_lvl               VARCHAR2 (2);
        v_scl_code              gin_sub_classes.scl_code%TYPE;
        v_agnt                  VARCHAR2 (60);
        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_payee_mft_dtls        fms_cheques_pkg.type_payee_mft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        --v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_client_type           VARCHAR2 (20);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (20);
        v_eft_enabled           VARCHAR2 (1);
        v_serv_prov_code        NUMBER;
        v_payee                 VARCHAR2 (300);
        v_cnt                   NUMBER := 0;
        v_net_amt               NUMBER;
        v_bnk_account           VARCHAR2 (50);
        v_bnk_bbr_code          VARCHAR2 (50);
        v_tel_pay               VARCHAR2 (30);
        v_ref_no                VARCHAR2 (30);
        v_mpt_code              NUMBER;
        v_agn_name              VARCHAR2 (100);
        v_pay_mode              VARCHAR2 (100);
        v_batch_no              NUMBER;
        v_bnk_bbr_pk            NUMBER;
        v_paymnt_brh_code       NUMBER;
    BEGIN
        --   RAISE_ERROR('2222222222222222222....v_copdt_code='||v_copdt_code);
        SELECT copdt_cur_code, agn_name, cpm_sht_desc
          INTO v_cur_code, v_agn_name, v_pay_mode
          FROM gin_comm_pymt_dtls, tqc_agencies, tqc_clm_payment_modes
         WHERE     copdt_agn_code = agn_code
               AND copdt_cpm_code = cpm_code(+)
               AND copdt_code = v_copdt_code;

        IF v_pay_method IS NOT NULL
        THEN
            v_pay_mode := v_pay_method;
        END IF;

        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        FOR i IN c_comm
        LOOP
            v_cnt := v_cnt + 1;

            IF NVL (i.copdt_agn_code, 0) = 0
            THEN
                v_client_type := 'D';
            ELSE
                BEGIN
                    SELECT agn_act_code, agn_sht_desc, agn_name --,agn_bbr_code
                      INTO v_act_code, v_agnt_sht_desc, v_payee  --,v_bbr_code
                      FROM tqc_agencies
                     WHERE agn_code = i.copdt_agn_code;

                    IF v_act_code IN (2,
                                      9,
                                      10,
                                      16)
                    THEN
                        v_client_type := 'A';
                    ELSIF v_act_code = 3
                    THEN
                        v_client_type := 'B';
                    ELSIF v_act_code IN (10)
                    THEN
                        v_client_type := 'MK';
                    ELSIF v_act_code = 4
                    THEN
                        v_client_type := 'FI';
                    ELSIF v_act_code = 5
                    THEN
                        v_client_type := 'I';
                    ELSIF v_act_code = 6
                    THEN
                        v_client_type := 'R';
                    ELSIF v_act_code = 7
                    THEN
                        v_client_type := 'FO';
                    ELSE
                        raise_application_error (
                            -20001,
                               'UNDEFINED ACCOUNT TYPE - '
                            || v_act_code
                            || ' -FOR AGENCIES '
                            || v_agnt_sht_desc);
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_application_error (
                            -20021,
                            'AGENCY - ' || i.copdt_agn_code || ' NOT FOUND ');
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20022,
                            'AGENCY INFO ' || SQLERRM (SQLCODE));
                END;
            END IF;

            v_rec_count := 0;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');

            --v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
            IF i.copdt_brn_code IS NULL
            THEN
                v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
            ELSE
                v_paymnt_brh_code := i.copdt_brn_code;
            END IF;

            --         raise_Error('v_paymnt_brh_code='||v_paymnt_brh_code||'i.copdt_brn_code='||i.copdt_brn_code);
            --v_brh_name := fms_interfaces_pkg.brh_name (/*i.copdt_brn_code*/v_paymnt_brh_code, 'S');
            v_brh_name := Fms_Interfaces_Pkg.brh_name (i.copdt_brn_code, 'S');
            v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code /*i.copdt_brn_code*/
                                                                       );


            --         v_org_code := Fms_Interfaces_Pkg.get_org (i.copdt_brn_code);
            --         Fms_Interfaces_Pkg.trans_bct ('COM',
            --                                       v_cqr_source,
            --                                       i.copdt_brn_code,
            --                                       v_cur_code,
            --                                       v_bct_code,
            --                                       v_bct_brh_code
            --                                      );


            fms_interfaces_pkg.trans_bct ('COM',
                                          v_cqr_source,
                                          v_paymnt_brh_code, -- i.copdt_brn_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);
            --retrieve the bank account based on the transaction and the branch--- GIN_COMM_PYMT_DTLS
            v_net_amt := (NVL (i.copdt_payable_net_comm, 0));

            --raise_error(v_bct_code||';'||v_bct_brh_code||';'||v_cqr_source||';'||i.copdt_brn_code||';'||v_cur_code);
            -- v_net_amt :=  (NVL (i.copdt_comm_amt, 0)) + (NVL (i.copdt_whdtax_amt, 0));
            -- IF  ROUND(nvl (i.copdt_net_comm, 0),v_rnd)  !=  ROUND( (nvl (i.copdt_whdtax_amt, 0) + nvl (i.copdt_comm_amt, 0) ),v_rnd)
            IF   ROUND (NVL (i.copdt_net_comm, 0), v_rnd)
               - ROUND (
                     (NVL (i.copdt_whdtax_amt, 0) + NVL (i.copdt_comm_amt, 0)),
                     v_rnd) >
               2
            THEN
                raise_application_error (
                    -20001,
                       ' THE NET COMMISSION AMOUNT '
                    || NVL (i.copdt_net_comm, 0)
                    || ' PLUS WHDTAX '
                    || NVL (i.copdt_whdtax_amt, 0)
                    || ' DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                    || i.copdt_comm_amt);
            END IF;

            IF ROUND (NVL (v_net_amt, 0), v_bcur_rnd) <= 0
            THEN
                raise_application_error (
                    -20001,
                       'THE NET COMMISSION AMOUNT '
                    || NVL (v_net_amt, 0)
                    || ' IS EITHER ZERO OR LESS THAN ZERO');
            END IF;

            IF NVL (v_net_amt, 0) != 0
            THEN
                -- RAISE_APPLICATION_ERROR (-20001,'SCL IS '||v_scl_code||' AND V_APP_LVL = '||v_app_lvl);
                /*Get_Gl_Code ('UC',                             --CLAIM PAID NORMAL
                             v_scl_code,
                             v_app_lvl,
                             v_trnt_code,                                 -- OUT ,
                             v_trnt_gl_code,                               --OUT ,
                             v_trnt_contra_gl_code                           --OUT
                            );*/
                IF v_trnt_contra_gl_code IS NULL
                THEN
                    SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
                                                              v_client_type)
                      INTO v_trnt_contra_gl_code
                      FROM DUAL;
                END IF;

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code --, i.copdt_brn_code
                                                                       ) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'COM GL CONTROL A/C - '
                        || v_trnt_contra_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || v_scl_code);
                END IF;

                -------
                IF v_pay_mode IN ('EFT', 'RTGS')
                THEN
                    /*BEGIN
                       v_eft_enabled := 'N';
                       v_eft_enabled := account_enabled (bnk_bbr_code (i.copdt_agn_code, 5));
                    EXCEPTION
                       WHEN OTHERS THEN
                          raise_error ('ERROR GETTING BANK ACC INFO... ');
                    END;*/
                    v_eft_enabled := 'N';

                    IF bnk_bbr_code (i.copdt_agn_code, 5) IS NOT NULL
                    THEN
                        v_eft_enabled :=
                            account_enabled (
                                bnk_bbr_code (i.copdt_agn_code, 5));
                        v_bnk_account := bnk_account (i.copdt_agn_code, 5);
                        v_bnk_bbr_code :=
                            tqc_interfaces_pkg.bank_ref (
                                bnk_bbr_code (i.copdt_agn_code, 5));
                        v_bnk_bbr_pk := bnk_bbr_code (i.copdt_agn_code, 5);
                    END IF;

                    IF v_eft_enabled = 'N'
                    THEN
                        raise_application_error (
                            -20001,
                               'BANK BRANCH NOT FOR '
                            || v_agn_name
                            || '
                      NOT ENABLED TO TRANSACT EFT PAYMENTS'
                            || i.copdt_cpm_code);
                    END IF;
                END IF;

                v_rec_count := v_rec_count + 1;

                IF v_pay_mode NOT IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                            'COM',                                --narrative,
                            v_trnt_contra_gl_code,           -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            v_paymnt_brh_code,            -- i.copdt_brn_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR POSTING PAYMENT DETAILS FOR'
                                || i.copdt_code
                                || i.copdt_payee);
                    END;
                ELSE
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                            'COM',                                --narrative,
                            v_trnt_contra_gl_code,           -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            v_paymnt_brh_code, --i.copdt_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    --                           Fms_Cheques_Pkg.append_eft_payees(
                    --                                                  v_rec_count,--v_no                       NUMBER,
                    --                                                  i.cop_code, --v_ref1                   VARCHAR2,
                    --                                                  ROUND (NVL (i.cop_comm_amt, 0),
                    --                                                     v_bcur_rnd
                    --                                                    ),--v_amount                   NUMBER,
                    --                                                  'COMMISSION '||i.cop_dr_ref_no,--v_narrative                VARCHAR2,
                    --                                                  bnk_bbr_code (i.cop_agn_code, 4),--v_ref_code,--v_bbr_ref_code             VARCHAR2,
                    --                                                  bnk_account (i.cop_agn_code, 4),--v_bnk_account              VARCHAR2,
                    --                                                  i.cop_dr_ref_no,--v_ref2                   VARCHAR2,
                    --                                                  v_payee_eft_dtls);--v_payee_eft_rec   IN OUT   type_payee_eft_table
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR POSTING PAYMENT DETAILS FOR'
                                || i.copdt_code
                                || i.copdt_payee);
                    END;
                END IF;

                IF v_pay_mode IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        v_payee_eft_dtls (1) :=
                            fms_cheques_pkg.append_eft_payees (
                                v_rec_count,
                                i.copdt_code,                        ---v_ref,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                                ---v_amount,
                                v_payee,                           ---v_payee,
                                v_bnk_bbr_code,   ---v_payee_bank_branch_code,
                                bnk_account (i.copdt_agn_code, 5),
                                ---v_payee_bank_acc_no,
                                i.copdt_trans_no                   ---v_ref2);
                                                );
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                   'FAILED TO SECURE EFT PAYEE DETAILS FOR'
                                || i.copdt_code
                                || '='
                                || i.copdt_payee);
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR ON POSTING EFT CLAIM DETAILS FOR'
                                || i.copdt_code
                                || '='
                                || i.copdt_payee);
                    END;
                ELSIF v_pay_mode IN ('MOB')
                THEN
                    SELECT agn_tel_pay, agn_id_no
                      INTO v_tel_pay, v_ref_no
                      FROM tqc_agencies
                     WHERE agn_code = i.copdt_agn_code;

                    IF v_tel_pay IS NOT NULL
                    THEN
                        SELECT mpt_code
                          INTO v_mpt_code
                          FROM tqc_mob_pymnt_types_prefixes,
                               tqc_mobile_pymnt_types
                         WHERE     mptp_mpt_code = mpt_code
                               AND mptp_mob_no_prefix =
                                      '0'
                                   || SUBSTR (REPLACE (v_tel_pay, '+', ''),
                                              4,
                                              3);
                    ELSE
                        raise_application_error (
                            -20001,
                            'INTERMEDIARY NOT ENABLED TO TRANSACT MOBILE PYMT..');
                    END IF;

                    BEGIN
                        v_payee_mft_dtls (1) :=
                            fms_cheques_pkg.append_mft_payees (
                                v_rec_count,
                                i.copdt_code,                        ---v_ref,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                                ---v_amount,
                                v_payee,                        --v_narrative,
                                v_tel_pay,
                                --v_credit_id                                                                                 ,
                                'Mobile Phone Number',      --v_credit_id_type
                                v_ref_no,                    --v_validation_id
                                'REFERENCE NO'          --v_validation_id_type
                                              );
                    --fms_chq_mftfile_dtls
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
                                || i.copdt_code
                                || '='
                                || i.copdt_payee);
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
                                || i.copdt_code
                                || '='
                                || i.copdt_payee);
                    END;
                END IF;

                IF NVL (i.copdt_instant_automated_com, 'N') = 'Y'
                THEN
                    v_batch_no := i.copdt_trans_no;
                ELSE
                    v_batch_no := NULL;
                END IF;

                IF v_pay_mode IN ('EFT', 'RTGS', 'MOB')
                THEN
                    IF v_pay_mode IN ('EFT', 'RTGS')
                    THEN
                        --               raise_error('here=='||v_bnk_bbr_code||';'||v_bnk_bbr_pk);
                        --      tqc_bank_branches
                        BEGIN
                            FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                                v_cqr_source,                 -- v_cqr_source,
                                i.copdt_code,                    -- v_cqr_ref,
                                i.copdt_trans_no,               -- v_cqr_ref2,
                                TRUNC (SYSDATE),            -- v_cqr_ref_date,
                                   'COMMISSION FOR TRANS NO. '
                                || i.copdt_trans_no,
                                v_paymnt_brh_code,          -- v_cqr_brh_code,
                                v_bct_brh_code,         -- v_cqr_bct_brh_code,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd), --cqr_amount
                                v_payee,                       -- v_cqr_payee,
                                v_pay_mode,
                                i.copdt_cur_code,           -- v_cqr_cur_code,
                                NULL,                       ---i.cpv_cur_rate,
                                v_bct_code,                                ---
                                fms_interfaces_pkg.get_usercode (
                                    UPPER (v_user_name)),
                                TRUNC (SYSDATE),        --i.cpv_authorised_dt,
                                v_user_code,                  -- v_cqr_req_by,
                                'GIS-COMM',                 -- v_cqr_pmt_type,
                                v_bnk_bbr_code,    --v_payee_bank_branch_code,
                                v_bnk_account,          --v_payee_bank_acc_no,
                                v_chq_dtls,                   -- v_dtls_table,
                                v_payee_eft_dtls,            --v_payee_eft_rec
                                NULL,                 --v_cqr_physical_address
                                NULL,                  ---v_cqr_postal_address
                                i.copdt_trans_no,          --v_itfc_trans_code
                                NULL,                            --v_itfc_ref3
                                NULL,                     --v_payee_source_pk,
                                NULL,                   --v_payee_source_type,
                                'N',                            --v_auto_auth,
                                NULL,                           --v_num_val_1,
                                NULL,                         ---v_invoice_no,
                                NULL,                       ---v_invoice_date,
                                NULL,                   ---v_auto_consolidate,
                                NULL,                           ---v_batch_no,
                                NULL                       ---v_payee_spr_code
                                    );
                        --                     fms_cheques_pkg.create_reqn
                        --                        (v_cqr_source,
                        --                         i.copdt_code,                                   --ref
                        --                         i.copdt_trans_no,                            -- ref2,
                        --                         TRUNC (SYSDATE),
                        --                         'COMMISSION FOR TRANS NO. ' || i.copdt_trans_no,
                        --                        v_paymnt_brh_code,-- i.copdt_brn_code,
                        --                         v_bct_brh_code,
                        --                         ROUND (NVL (v_net_amt, 0), v_bcur_rnd),  --cqr_amount
                        --                         v_payee,
                        --                         v_pay_mode,
                        --                         NULL,
                        --                         v_bnk_bbr_pk,
                        --                         i.copdt_cur_code,
                        --                         v_bct_code,
                        --                         fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                        --                         TRUNC (SYSDATE),
                        --                         v_user_code,                        --v_cqr_req_by  ,
                        --                         'GIS-COMM',                            -- pmt_type  ,
                        --                         v_chq_dtls,
                        --                         v_payee_eft_dtls,
                        --                         ---          IN OUT   type_payee_eft_table,
                        --                         NULL,                             ---physical_address
                        --                         NULL,                               ---postal_address
                        --                         NULL,                                 ---use_bnk_code
                        --                         NULL,
                        --                         NULL,
                        --                         v_bnk_bbr_code,                    --v_payee_bbr_code
                        --                         v_bnk_account,                       --v_payee_acc_no
                        --                         NULL,                             --v_payee_source_pk
                        --                         'N',                                   --v_auto_auth,
                        --                         NULL,                                   --v_num_val_1
                        --                         NULL,                                  --v_invoice_no
                        --                         NULL,                                --v_invoice_date
                        --                         i.copdt_instant_automated_com,     --v_auto_comm_proc
                        --                         v_batch_no             --i.copdt_trans_no--v_batch_no
                        --                        );
                        --                  EXCEPTION
                        --                     WHEN OTHERS
                        --                     THEN
                        --                        raise_error ('Error .' || v_payee || SQLERRM (SQLCODE)
                        --         );
                        --ON CREATING PAYMENT REQUISITION <EFT> FOR
                        END;
                    ELSIF v_pay_mode IN ('MOB')
                    THEN
                        --raise_error('v_mpt_code='||v_mpt_code);
                        BEGIN
                            fms_cheques_pkg.create_reqn (
                                v_cqr_source,
                                i.copdt_code,                            --ref
                                i.copdt_trans_no,                     -- ref2,
                                TRUNC (SYSDATE),
                                   'COMMISSION FOR TRANS NO. '
                                || i.copdt_trans_no,
                                --'GIS Claim',
                                v_paymnt_brh_code,         --i.copdt_brn_code,
                                v_bct_brh_code,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd), --cqr_amount
                                v_payee,                             --v_agnt,
                                i.copdt_cur_code,
                                v_bct_code,
                                fms_interfaces_pkg.get_usercode (
                                    UPPER (v_user_name)),
                                TRUNC (SYSDATE),
                                v_user_code,                 --v_cqr_req_by  ,
                                'GIS-COMM',                     -- pmt_type  ,
                                v_chq_dtls,
                                v_payee_mft_dtls,
                                NULL,                -- v_cqr_physical_address
                                NULL,                   --v_cqr_postal_address
                                NULL,                         --v_use_bnk_code
                                NULL,
                                v_mpt_code,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                i.copdt_instant_automated_com,
                                v_batch_no                  --i.copdt_trans_no
                                          );
                        END;
                    END IF;
                ELSE
                    --               fms_cheques_pkg.create_reqn
                    --                        (v_cqr_source,
                    --                         i.copdt_code,                                   --ref
                    --                         i.copdt_trans_no,                            -- ref2,
                    --                         TRUNC (SYSDATE),
                    --                         'COMMISSION FOR TRANS NO. ' || i.copdt_trans_no,
                    --                         --'GIS Claim',             --narrative V
                    --                         v_paymnt_brh_code,--i.copdt_brn_code,                 --i.COPDT_BRN_CODE,
                    --                         v_bct_brh_code,
                    --                         ROUND (NVL (v_net_amt, 0), v_bcur_rnd),  --cqr_amount
                    --                         v_payee,
                    --                         i.copdt_cur_code,
                    --                         v_bct_code,
                    --                         fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                    --                         TRUNC (SYSDATE),
                    --                         v_user_code,                        --v_cqr_req_by  ,
                    --                         'GIS-COMM',                            -- pmt_type  ,
                    --                         v_chq_dtls,                                       --,
                    --                         '',
                    --                         NULL,
                    --                         TO_NUMBER (NULL),
                    --                         TO_NUMBER (NULL),
                    --                         TO_NUMBER (NULL),
                    --                         NULL,
                    --                         TO_NUMBER (NULL),
                    --                         'N',
                    --                         TO_NUMBER (NULL),
                    --                         NULL,
                    --                         NULL,
                    --                         i.copdt_instant_automated_com,
                    --                         v_batch_no                         --i.copdt_trans_no
                    --                        );
                    --                RAISE_ERROR('v_payee='||v_payee);
                    fms_interfaces_pkg.create_chq_reqn (
                        v_cqr_source,
                        i.copdt_code,                                    --ref
                        i.copdt_trans_no,                             -- ref2,
                        TRUNC (SYSDATE),                                  ----
                        'COMMISSION FOR TRANS NO. ' || i.copdt_trans_no,  ----
                        --'GIS Claim',             --narrative V
                        v_paymnt_brh_code,                               -----
                        v_bct_brh_code,                                   ----
                        ROUND (NVL (v_net_amt, 0), v_bcur_rnd),           ----
                        --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
                        v_payee,                                          ----
                        v_pay_mode,                              ---'CHQ',----
                        i.copdt_cur_code,
                        NULL,                                --i.cpv_cur_rate,
                          --  --                             --i.cmb_cur_code,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                        ----
                        TRUNC (SYSDATE),                                 -----
                        v_user_code, ----                           --v_cqr_req_by  ,
                        'GIS-COMM', ----                              -- pmt_type  ,
                        v_chq_dtls,                                       ----
                        NULL,                        --v_cqr_physical_address,
                        NULL,                          --v_cqr_postal_address,
                        NULL,                            ---v_itfc_trans_code,
                        NULL,                                   --v_itfc_ref3,
                        NULL,                             --v_payee_source_pk,
                        NULL,                           --v_payee_source_type,
                        'N',
                        NULL,                                   --v_num_val_1,
                        NULL,                                  --v_invoice_no,
                        NULL,                                --v_invoice_date,
                        NULL,
                        --v_auto_consolidate,
                        NULL                                      --v_batch_no
                            );
                END IF;
            END IF;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'COM REQN NOT CREATED FOR COMMISSION # ' || v_drno);
        END IF;
    --   EXCEPTION
    --      WHEN exc_user_error
    --      THEN
    --         raise_application_error (-20001,
    --                                     'THE SPECIFIED USERNAME ( '
    --                                  || v_user_name
    --                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    --                                 );
    --      WHEN OTHERS
    --      THEN
    --         raise_application_error (-20001,
    --                                     'ERROR CREATING REQUISITION :- '
    --                                  || SQLERRM (SQLCODE)
    --                                 );
    END;

    PROCEDURE prc_com_pymt291015 (v_copdt_code   NUMBER,
                                  v_user_name    VARCHAR2,
                                  v_pay_method   VARCHAR2     -- DEFAULT 'CHQ'
                                                         )
    IS
        CURSOR c_comm IS
            SELECT *
              FROM gin_comm_pymt_dtls
             WHERE     copdt_code = v_copdt_code
                   AND NVL (copdt_authorized, 'N') != 'Y';

        v_drno                  VARCHAR2 (30);
        v_app_lvl               VARCHAR2 (2);
        v_scl_code              gin_sub_classes.scl_code%TYPE;
        v_agnt                  VARCHAR2 (60);
        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_payee_mft_dtls        fms_cheques_pkg.type_payee_mft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        --v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_client_type           VARCHAR2 (20);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (20);
        v_eft_enabled           VARCHAR2 (1);
        v_serv_prov_code        NUMBER;
        v_payee                 VARCHAR2 (300);
        v_cnt                   NUMBER := 0;
        v_net_amt               NUMBER;
        v_bnk_account           VARCHAR2 (50);
        v_bnk_bbr_code          VARCHAR2 (50);
        v_tel_pay               VARCHAR2 (30);
        v_ref_no                VARCHAR2 (30);
        v_mpt_code              NUMBER;
        v_agn_name              VARCHAR2 (100);
        v_pay_mode              VARCHAR2 (100);
        v_batch_no              NUMBER;
    BEGIN
        SELECT copdt_cur_code, agn_name, cpm_sht_desc
          INTO v_cur_code, v_agn_name, v_pay_mode
          FROM gin_comm_pymt_dtls, tqc_agencies, tqc_clm_payment_modes
         WHERE     copdt_agn_code = agn_code
               AND copdt_cpm_code = cpm_code(+)
               AND copdt_code = v_copdt_code;

        IF v_pay_mode IS NULL
        THEN
            v_pay_mode := v_pay_method;
        END IF;

        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        FOR i IN c_comm
        LOOP
            v_cnt := v_cnt + 1;

            IF NVL (i.copdt_agn_code, 0) = 0
            THEN
                v_client_type := 'D';
            ELSE
                BEGIN
                    SELECT agn_act_code, agn_sht_desc, agn_name --,agn_bbr_code
                      INTO v_act_code, v_agnt_sht_desc, v_payee  --,v_bbr_code
                      FROM tqc_agencies
                     WHERE agn_code = i.copdt_agn_code;

                    IF v_act_code IN (2,
                                      9,
                                      10,
                                      16)
                    THEN
                        v_client_type := 'A';
                    ELSIF v_act_code = 3
                    THEN
                        v_client_type := 'B';
                    ELSIF v_act_code IN (10)
                    THEN
                        v_client_type := 'MK';
                    ELSIF v_act_code = 4
                    THEN
                        v_client_type := 'FI';
                    ELSIF v_act_code = 5
                    THEN
                        v_client_type := 'I';
                    ELSIF v_act_code = 6
                    THEN
                        v_client_type := 'R';
                    ELSIF v_act_code = 7
                    THEN
                        v_client_type := 'FO';
                    ELSE
                        raise_application_error (
                            -20001,
                               'UNDEFINED ACCOUNT TYPE - '
                            || v_act_code
                            || ' -FOR AGENCIES '
                            || v_agnt_sht_desc);
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_application_error (
                            -20021,
                            'AGENCY - ' || i.copdt_agn_code || ' NOT FOUND ');
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20022,
                            'AGENCY INFO ' || SQLERRM (SQLCODE));
                END;
            END IF;

            v_rec_count := 0;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_brh_name := fms_interfaces_pkg.brh_name (i.copdt_brn_code, 'S');
            v_org_code := fms_interfaces_pkg.get_org (i.copdt_brn_code);
            fms_interfaces_pkg.trans_bct ('COM',
                                          v_cqr_source,
                                          i.copdt_brn_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);
            --retrieve the bank account based on the transaction and the branch--- GIN_COMM_PYMT_DTLS
            v_net_amt := (NVL (i.copdt_payable_net_comm, 0));

            -- v_net_amt :=  (NVL (i.copdt_comm_amt, 0)) + (NVL (i.copdt_whdtax_amt, 0));
            -- IF  ROUND(nvl (i.copdt_net_comm, 0),v_rnd)  !=  ROUND( (nvl (i.copdt_whdtax_amt, 0) + nvl (i.copdt_comm_amt, 0) ),v_rnd)
            IF   ROUND (NVL (i.copdt_net_comm, 0), v_rnd)
               - ROUND (
                     (  NVL (i.copdt_whdtax_amt, 0)
                      + NVL (i.copdt_comm_amt, 0)
                      + NVL (i.copdt_vat_amt, 0)),
                     v_rnd) >
               2
            THEN
                raise_application_error (
                    -20001,
                       ' THE NET COMMISSION AMOUNT '
                    || NVL (i.copdt_net_comm, 0)
                    || ' PLUS WHDTAX '
                    || NVL (i.copdt_whdtax_amt, 0)
                    || ' + '
                    || i.copdt_comm_amt
                    || '  DOES NOT ADD UP TO THE TOTAL AMOUNT..');
            END IF;

            IF ROUND (NVL (v_net_amt, 0), v_bcur_rnd) <= 0
            THEN
                raise_application_error (
                    -20001,
                       'THE NET COMMISSION AMOUNT '
                    || NVL (v_net_amt, 0)
                    || ' IS EITHER ZERO OR LESS THAN ZERO');
            END IF;

            --RAISE_eRROR('v_net_amt='||v_net_amt);
            IF NVL (v_net_amt, 0) != 0
            THEN
                -- RAISE_APPLICATION_ERROR (-20001,'SCL IS '||v_scl_code||' AND V_APP_LVL = '||v_app_lvl);
                /*Get_Gl_Code ('UC',                             --CLAIM PAID NORMAL
                             v_scl_code,
                             v_app_lvl,
                             v_trnt_code,                                 -- OUT ,
                             v_trnt_gl_code,                               --OUT ,
                             v_trnt_contra_gl_code                           --OUT
                            );*/
                IF v_trnt_contra_gl_code IS NULL
                THEN
                    SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
                                                              v_client_type)
                      INTO v_trnt_contra_gl_code
                      FROM DUAL;
                END IF;

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
                                                      v_org_code,
                                                      i.copdt_brn_code--i.COPDT_BRN_CODE
                                                                      ) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'COM GL CONTROL A/C - '
                        || v_trnt_contra_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || v_scl_code);
                END IF;

                -------
                IF v_pay_mode = 'EFT'
                THEN
                    /*BEGIN
                       v_eft_enabled := 'N';
                       v_eft_enabled := account_enabled (bnk_bbr_code (i.copdt_agn_code, 5));
                    EXCEPTION
                       WHEN OTHERS THEN
                          raise_error ('ERROR GETTING BANK ACC INFO... ');
                    END;*/
                    v_eft_enabled := 'N';

                    IF bnk_bbr_code (i.copdt_agn_code, 5) IS NOT NULL
                    THEN
                        v_eft_enabled :=
                            account_enabled (
                                bnk_bbr_code (i.copdt_agn_code, 5));
                        v_bnk_account := bnk_account (i.copdt_agn_code, 5);
                        v_bnk_bbr_code :=
                            tqc_interfaces_pkg.bank_ref (
                                bnk_bbr_code (i.copdt_agn_code, 5));
                    END IF;

                    IF v_eft_enabled = 'N'
                    THEN
                        raise_application_error (
                            -20001,
                               'BANK BRANCH NOT FOR '
                            || v_agn_name
                            || '
                      NOT ENABLED TO TRANSACT EFT PAYMENTS'
                            || i.copdt_cpm_code);
                    END IF;
                END IF;

                v_rec_count := v_rec_count + 1;

                IF v_pay_mode NOT IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                            'COM',                                --narrative,
                            v_trnt_contra_gl_code,           -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            i.copdt_brn_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR POSTING PAYMENT DETAILS FOR'
                                || i.copdt_code
                                || i.copdt_payee);
                    END;
                ELSE
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                            'COM',                                --narrative,
                            v_trnt_contra_gl_code,           -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            i.copdt_brn_code,                    --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    --                           Fms_Cheques_Pkg.append_eft_payees(
                    --                                                  v_rec_count,--v_no                       NUMBER,
                    --                                                  i.cop_code, --v_ref1                   VARCHAR2,
                    --                                                  ROUND (NVL (i.cop_comm_amt, 0),
                    --                                                     v_bcur_rnd
                    --                                                    ),--v_amount                   NUMBER,
                    --                                                  'COMMISSION '||i.cop_dr_ref_no,--v_narrative                VARCHAR2,
                    --                                                  bnk_bbr_code (i.cop_agn_code, 4),--v_ref_code,--v_bbr_ref_code             VARCHAR2,
                    --                                                  bnk_account (i.cop_agn_code, 4),--v_bnk_account              VARCHAR2,
                    --                                                  i.cop_dr_ref_no,--v_ref2                   VARCHAR2,
                    --                                                  v_payee_eft_dtls);--v_payee_eft_rec   IN OUT   type_payee_eft_table
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR POSTING PAYMENT DETAILS FOR'
                                || i.copdt_code
                                || i.copdt_payee);
                    END;
                END IF;

                IF v_pay_mode IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        v_payee_eft_dtls (1) :=
                            fms_cheques_pkg.append_eft_payees (
                                v_rec_count,
                                i.copdt_code,                        ---v_ref,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd), ---v_amount,
                                v_payee,                           ---v_payee,
                                v_bnk_bbr_code,
                                --bnk_bbr_code (i.copdt_agn_code, 5),---v_payee_bank_branch_code,
                                bnk_account (i.copdt_agn_code, 5),
                                ---v_payee_bank_acc_no,
                                i.copdt_trans_no                   ---v_ref2);
                                                );
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                   'FAILED TO SECURE EFT PAYEE DETAILS FOR'
                                || i.copdt_code
                                || '='
                                || i.copdt_payee);
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR ON POSTING EFT CLAIM DETAILS FOR'
                                || i.copdt_code
                                || '='
                                || i.copdt_payee);
                    END;
                ELSIF v_pay_mode IN ('MOB')
                THEN
                    SELECT agn_tel_pay, agn_id_no
                      INTO v_tel_pay, v_ref_no
                      FROM tqc_agencies
                     WHERE agn_code = i.copdt_agn_code;

                    IF v_tel_pay IS NOT NULL
                    THEN
                        SELECT mpt_code
                          INTO v_mpt_code
                          FROM tqc_mob_pymnt_types_prefixes,
                               tqc_mobile_pymnt_types
                         WHERE     mptp_mpt_code = mpt_code
                               AND mptp_mob_no_prefix =
                                      '0'
                                   || SUBSTR (REPLACE (v_tel_pay, '+', ''),
                                              4,
                                              3);
                    ELSE
                        raise_application_error (
                            -20001,
                            'INTERMEDIARY NOT ENABLED TO TRANSACT MOBILE PYMT..');
                    END IF;

                    --raise_Error(' v_ref_no= '||v_ref_no);
                    BEGIN
                        v_payee_mft_dtls (1) :=
                            fms_cheques_pkg.append_mft_payees (
                                v_rec_count,
                                i.copdt_code,                        ---v_ref,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
                                ---v_amount,
                                v_payee,                        --v_narrative,
                                v_tel_pay,
                                --v_credit_id                                                                                 ,
                                'Mobile Phone Number',      --v_credit_id_type
                                v_ref_no,                    --v_validation_id
                                'REFERENCE NO'          --v_validation_id_type
                                              );
                    --fms_chq_mftfile_dtls
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                   'FAILED TO SECURE MFT PAYEE DETAILS FOR'
                                || i.copdt_code
                                || '='
                                || i.copdt_payee);
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR ON POSTING MFT PAYMENT DETAILS FOR'
                                || i.copdt_code
                                || '='
                                || i.copdt_payee);
                    END;
                END IF;

                IF NVL (i.copdt_instant_automated_com, 'N') = 'Y'
                THEN
                    v_batch_no := i.copdt_trans_no;
                ELSE
                    v_batch_no := NULL;
                END IF;

                IF v_pay_mode IN ('EFT', 'RTGS', 'MOB')
                THEN
                    IF v_pay_mode IN ('EFT', 'RTGS')
                    THEN
                        BEGIN
                            fms_cheques_pkg.create_reqn (
                                v_cqr_source,
                                i.copdt_code,                            --ref
                                i.copdt_trans_no,                     -- ref2,
                                TRUNC (SYSDATE),
                                   'COMMISSION FOR TRANS NO. '
                                || i.copdt_trans_no,
                                i.copdt_brn_code,
                                v_bct_brh_code,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd), --cqr_amount
                                v_payee,
                                i.copdt_cur_code,
                                v_bct_code,
                                fms_interfaces_pkg.get_usercode (
                                    UPPER (v_user_name)),
                                TRUNC (SYSDATE),
                                v_user_code,                 --v_cqr_req_by  ,
                                'GIS-COMM',                     -- pmt_type  ,
                                v_chq_dtls,
                                v_payee_eft_dtls,
                                ---          IN OUT   type_payee_eft_table,
                                NULL,                      ---physical_address
                                NULL,                       --- postal_address
                                NULL,                          ---use_bnk_code
                                NULL,                           --v_invoice_no
                                NULL,                         --v_invoice_date
                                NULL,
                                'N',                                   --NULL,
                                NULL,
                                NULL,
                                NULL,
                                i.copdt_instant_automated_com,
                                v_batch_no                  --i.copdt_trans_no
                                          );
                        --                             EXCEPTION
                        --                                 WHEN OTHERS
                        --                                  THEN
                        --                                   raise_error ('Error .'|| v_payee||sqlerrm(sqlcode));--ON CREATING PAYMENT REQUISITION <EFT> FOR
                        --
                        END;
                    ELSIF v_pay_mode IN ('MOB')
                    THEN
                        --raise_error('v_mpt_code='||v_mpt_code);
                        BEGIN
                            fms_cheques_pkg.create_reqn (
                                v_cqr_source,
                                i.copdt_code,                            --ref
                                i.copdt_trans_no,                     -- ref2,
                                TRUNC (SYSDATE),
                                   'COMMISSION FOR TRANS NO. '
                                || i.copdt_trans_no,
                                --'GIS Claim',
                                i.copdt_brn_code,
                                v_bct_brh_code,
                                ROUND (NVL (v_net_amt, 0), v_bcur_rnd), --cqr_amount
                                v_payee,                             --v_agnt,
                                i.copdt_cur_code,
                                v_bct_code,
                                fms_interfaces_pkg.get_usercode (
                                    UPPER (v_user_name)),
                                TRUNC (SYSDATE),
                                v_user_code,                 --v_cqr_req_by  ,
                                'GIS-COMM',                     -- pmt_type  ,
                                v_chq_dtls,
                                v_payee_mft_dtls,
                                NULL,                -- v_cqr_physical_address
                                NULL,                   --v_cqr_postal_address
                                NULL,                         --v_use_bnk_code
                                NULL,
                                v_mpt_code,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                i.copdt_instant_automated_com,
                                v_batch_no                  --i.copdt_trans_no
                                          );
                        END;
                    END IF;
                ELSE
                    fms_cheques_pkg.create_reqn (
                        v_cqr_source,
                        i.copdt_code,                                    --ref
                        i.copdt_trans_no,                             -- ref2,
                        TRUNC (SYSDATE),
                        'COMMISSION FOR TRANS NO. ' || i.copdt_trans_no,
                        --'GIS Claim',             --narrative V
                        i.copdt_brn_code,                  --i.COPDT_BRN_CODE,
                        v_bct_brh_code,
                        ROUND (NVL (v_net_amt, 0), v_bcur_rnd),   --cqr_amount
                        v_payee,
                        i.copdt_cur_code,
                        v_bct_code,
                        fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                        TRUNC (SYSDATE),
                        v_user_code,                         --v_cqr_req_by  ,
                        'GIS-COMM',                             -- pmt_type  ,
                        v_chq_dtls,                                        --,
                        '',
                        NULL,
                        TO_NUMBER (NULL),
                        TO_NUMBER (NULL),
                        TO_NUMBER (NULL),
                        NULL,
                        TO_NUMBER (NULL),
                        'N',
                        TO_NUMBER (NULL),
                        NULL,
                        NULL,
                        i.copdt_instant_automated_com,
                        v_batch_no                          --i.copdt_trans_no
                                  );
                END IF;
            END IF;
        END LOOP;

        -- raise_error('v_cnt========'||v_cnt||'  v_rec_count '||v_rec_count);
        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'COM REQN NOT CREATED FOR COMMISSION # ' || v_drno);
        END IF;
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
    --      WHEN OTHERS
    --      THEN
    --         RAISE_APPLICATION_ERROR (-20001,
    --                                     'ERROR CREATING REQUISITION :- '
    --                                  || SQLERRM (SQLCODE)
    --                                 );
    END;

    PROCEDURE prc_coin_pymt (v_coinp_code   VARCHAR2,
                             v_trans_no     NUMBER,
                             v_user_name    VARCHAR2,
                             v_pay_method   VARCHAR2 DEFAULT 'CHQ')
    IS
        CURSOR c_comm IS
            SELECT *
              FROM gin_coinsurance_pymts
             WHERE coinp_code = v_coinp_code;

        v_drno                  VARCHAR2 (30);
        v_app_lvl               VARCHAR2 (2);
        v_scl_code              gin_sub_classes.scl_code%TYPE;
        v_agnt                  VARCHAR2 (60);
        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        --v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_client_type           VARCHAR2 (20);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (20);
        v_eft_enabled           VARCHAR2 (1);
        v_serv_prov_code        NUMBER;
        v_payee                 VARCHAR2 (300);
        v_cnt                   NUMBER := 0;
    -- v_bbr_code            NUMBER;
    BEGIN
        -- raise_error('v_trans_no=== '||v_trans_no||' v_cop_code '||v_cop_code);
        SELECT coinp_cur_code
          INTO v_cur_code
          FROM gin_coinsurance_pymts
         WHERE coinp_code = v_coinp_code;

        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        FOR i IN c_comm
        LOOP
            v_cnt := v_cnt + 1;

            IF NVL (i.coinp_agn_code, 0) = 0
            THEN
                v_client_type := 'D';
            ELSE
                BEGIN
                    SELECT agn_act_code, agn_sht_desc, agn_name --,agn_bbr_code
                      INTO v_act_code, v_agnt_sht_desc, v_payee  --,v_bbr_code
                      FROM tqc_agencies
                     WHERE agn_code = i.coinp_agn_code;

                    IF v_act_code IN (2,
                                      9,
                                      10,
                                      16)
                    THEN
                        v_client_type := 'A';
                    ELSIF v_act_code = 3
                    THEN
                        v_client_type := 'B';
                    ELSIF v_act_code IN (10)
                    THEN
                        v_client_type := 'MK';
                    ELSIF v_act_code = 4
                    THEN
                        v_client_type := 'FI';
                    ELSIF v_act_code = 5
                    THEN
                        v_client_type := 'I';
                    ELSIF v_act_code = 6
                    THEN
                        v_client_type := 'R';
                    ELSIF v_act_code = 7
                    THEN
                        v_client_type := 'FO';
                    ELSE
                        raise_application_error (
                            -20001,
                               'UNDEFINED ACCOUNT TYPE - '
                            || v_act_code
                            || ' -FOR AGENCIES '
                            || v_agnt_sht_desc);
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_application_error (
                            -20021,
                            'AGENCY - ' || i.coinp_agn_code || ' NOT FOUND ');
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20022,
                            'AGENCY INFO ' || SQLERRM (SQLCODE));
                END;
            END IF;

            v_rec_count := 0;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_brh_name := fms_interfaces_pkg.brh_name (i.coinp_brn_code, 'S');
            v_org_code := fms_interfaces_pkg.get_org (i.coinp_brn_code);
            fms_interfaces_pkg.trans_bct ('COINPYMT',
                                          v_cqr_source,
                                          i.coinp_brn_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);

            --retrieve the bank account based on the transaction and the branch---
            IF ROUND (NVL (i.coinp_net_amt, 0), v_bcur_rnd) = 0
            -- (NVL (i.COINP_FEE_AMT, 0) + NVL (i.COINP_AMT, 0)+ NVL (i.COINP_COM_AMT, 0)+ NVL (i.COINP_SURV_AMT, 0)
            -- )
            THEN
                raise_application_error (
                    -20001,
                       'THE NET COINSURANCE AMOUNT '
                    || NVL (i.coinp_net_amt, 0)
                    || ' PLUS DEDUCTABLES '
                    || (  NVL (i.coinp_fee_amt, 0)
                        + NVL (i.coinp_amt, 0)
                        + NVL (i.coinp_surv_amt, 0))
                    || ' DOES NOT ADD UP TO THE TOTAL AMOUNT..');
            END IF;

            IF NVL (i.coinp_net_amt, 0) != 0
            THEN
                IF v_trnt_contra_gl_code IS NULL
                THEN
                    SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
                                                              v_client_type)
                      INTO v_trnt_contra_gl_code
                      FROM DUAL;
                END IF;

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
                                                      v_org_code,
                                                      i.coinp_brn_code--i.COPDT_BRN_CODE
                                                                      ) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'COM GL CONTROL A/C - '
                        || v_trnt_contra_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || v_scl_code);
                END IF;

                -------
                IF v_pay_method = 'EFT'
                THEN
                    BEGIN
                        v_eft_enabled := 'N';
                        v_eft_enabled :=
                            account_enabled (
                                bnk_bbr_code (i.coinp_agn_code, 4));
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR GETTING BANK ACC INFO... ');
                    END;

                    IF v_eft_enabled = 'N'
                    THEN
                        raise_application_error (
                            -20001,
                            'BANK BRANCH NOT ENABLED TO TRANSACT EFT PAYMENTS');
                    END IF;
                END IF;

                v_rec_count := v_rec_count + 1;

                IF v_pay_method NOT IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.coinp_net_amt, 0), v_bcur_rnd),
                            'COIN',                               --narrative,
                            v_trnt_contra_gl_code,           -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            i.coinp_brn_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR POSTING PAYMENT DETAILS FOR'
                                || i.coinp_cr_mtran_no);
                    END;
                ELSE
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.coinp_net_amt, 0), v_bcur_rnd),
                            'COIN',                               --narrative,
                            v_trnt_contra_gl_code,           -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            i.coinp_brn_code,                    --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR POSTING PAYMENT DETAILS FOR'
                                || i.coinp_dr_ref_no);
                    END;
                END IF;

                IF v_pay_method IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        v_payee_eft_dtls (1) :=
                            fms_cheques_pkg.append_eft_payees (
                                v_rec_count,
                                i.coinp_code,                        ---v_ref,
                                ROUND (NVL (i.coinp_net_amt, 0), v_bcur_rnd),
                                ---v_amount,/*changed by Basil to 5 after db comparison*/
                                v_payee,                           ---v_payee,
                                bnk_bbr_code (i.coinp_agn_code, 5),
                                ---v_payee_bank_branch_code,
                                bnk_account (i.coinp_agn_code, 5),
                                ---v_payee_bank_acc_no,
                                i.coinp_cr_mtran_no                ---v_ref2);
                                                   );
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                   'FAILED TO SECURE EFT PAYEE DETAILS FOR'
                                || i.coinp_code);
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR ON POSTING EFT COINSURANCE DETAILS FOR'
                                || i.coinp_code);
                    END;
                END IF;

                IF v_pay_method IN ('EFT', 'RTGS', 'MOB')
                THEN
                    IF v_pay_method IN ('EFT', 'RTGS')
                    THEN
                        BEGIN
                            --  raise_error('v_user_name='||v_user_code||';'||v_cqr_source||';'||v_bct_brh_code||';'||v_bct_code);

                            -- tqc_agencies
                            fms_cheques_pkg.create_reqn (
                                v_cqr_source,
                                i.coinp_code,                            --ref
                                i.coinp_dr_mtran_no,                  -- ref2,
                                TRUNC (SYSDATE),
                                   'COINSURANCE PAYMENT FOR COINP_DR_REF_NO'
                                || i.coinp_dr_ref_no,
                                --'gis claim',             --narrative V
                                i.coinp_brn_code,
                                v_bct_brh_code,
                                ROUND (NVL (i.coinp_net_amt, 0), v_bcur_rnd),
                                --cqr_amount
                                v_payee,
                                i.coinp_cur_code,
                                v_bct_code,
                                fms_interfaces_pkg.get_usercode (
                                    UPPER (v_user_name)),
                                TRUNC (SYSDATE),
                                v_user_code,                 --v_cqr_req_by  ,
                                'GIS-COIN',                     -- pmt_type  ,
                                v_chq_dtls,
                                v_payee_eft_dtls,
                                ---          IN OUT   type_payee_eft_table,
                                NULL,                      ---physical_address
                                NULL,                       --- postal_address
                                NULL                           ---use_bnk_code
                                    --                                                    NULL,--v_invoice_no                         VARCHAR2 DEFAULT NULL,
                                    --                                                    NULL--v_invoice_date
                                    );
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error .' || v_payee || SQLERRM (SQLCODE));
                        --ON CREATING PAYMENT REQUISITION <EFT> FOR
                        END;
                    ELSIF v_pay_method IN ('MOB')
                    THEN
                        BEGIN
                            NULL;
                        -- uncomment after fms have updated this functionality
                        /*Fms_Cheques_Pkg.create_reqn(v_cqr_source,
                                                    i.cop_code,                                        --ref
                                                     i.cop_trans_no,                        -- ref2,
                                                     TRUNC (SYSDATE),
                                                     i.cop_trans_no,    --'GIS Claim',             --narrative V
                                                     i.COP_BRN_CODE,
                                                     v_bct_brh_code,
                                                     ROUND (NVL (i.cop_net_comm, 0), v_bcur_rnd),    --cqr_amount
                                                     v_agnt,
                                                     i.COP_cur_code,
                                                     v_bct_code,
                                                     Fms_Interfaces_Pkg.get_usercode (UPPER (v_user_name)),
                                                     trunc(sysdate),
                                                     v_user_code,                               --v_cqr_req_by  ,
                                                     'GIS-COMM',                                   -- pmt_type  ,
                                                     v_chq_dtls,
                                                     v_payee_eft_dtls,   ---          IN OUT   type_payee_eft_table,
                                                     null,-- v_cqr_physical_address               VARCHAR2 DEFAULT NULL,
                                                     null,--v_cqr_postal_address                 VARCHAR2 DEFAULT NULL,
                                                     null,--v_use_bnk_code                       VARCHAR2 DEFAULT NULL,                         NUMBER DEFAULT NULL,
                                                     --null,--i.CPV_INVOICE_NO,--v_invoice_no                         VARCHAR2 DEFAULT NULL,
                                                     v_serv_prov_code--v_mpt_code                           NUMBER DEFAULT NULL
                                                    ); */
                        END;
                    END IF;
                ELSE
                    fms_cheques_pkg.create_reqn (
                        v_cqr_source,
                        i.coinp_code,                                    --ref
                        i.coinp_dr_ref_no,                            -- ref2,
                        TRUNC (SYSDATE),
                           'COINSURANCE PAYMENT FOR DEBIT NO. '
                        || i.coinp_dr_ref_no,
                        --'GIS Claim',             --narrative V
                        i.coinp_brn_code,                  --i.COPDT_BRN_CODE,
                        v_bct_brh_code,
                        ROUND (NVL (i.coinp_net_amt, 0), v_bcur_rnd),
                        --cqr_amount
                        v_payee,
                        i.coinp_cur_code,
                        v_bct_code,
                        fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                        TRUNC (SYSDATE),
                        v_user_code,                         --v_cqr_req_by  ,
                        'GIS-COIN',                             -- pmt_type  ,
                        v_chq_dtls);
                END IF;
            END IF;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'COIN REQN NOT CREATED FOR COINSURANCE PAYMENT # ' || v_drno);
        END IF;
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR CREATING REQUISITION :- ' || SQLERRM (SQLCODE));
    END;

    PROCEDURE prc_cashback_pymt (v_cashp_code   VARCHAR2,
                                 v_trans_no     NUMBER,
                                 v_user_name    VARCHAR2,
                                 v_pay_method   VARCHAR2 DEFAULT 'CHQ')
    IS
        CURSOR c_comm IS
            SELECT *
              FROM gin_cashback_pymts
             WHERE cashp_code = v_cashp_code;

        v_drno                  VARCHAR2 (30);
        v_app_lvl               VARCHAR2 (2);
        v_scl_code              gin_sub_classes.scl_code%TYPE;
        v_agnt                  VARCHAR2 (60);
        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_client_type           VARCHAR2 (20);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (20);
        v_eft_enabled           VARCHAR2 (1);
        v_serv_prov_code        NUMBER;
        v_payee                 VARCHAR2 (300);
        v_cnt                   NUMBER := 0;
    BEGIN
        SELECT cashp_cur_code
          INTO v_cur_code
          FROM gin_cashback_pymts
         WHERE cashp_code = v_cashp_code;

        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        FOR i IN c_comm
        LOOP
            v_cnt := v_cnt + 1;

            IF NVL (i.cashp_agnt_agent_code, 0) = 0
            THEN
                v_client_type := 'D';
            ELSE
                BEGIN
                    SELECT agn_act_code, agn_sht_desc, agn_name
                      INTO v_act_code, v_agnt_sht_desc, v_payee
                      FROM tqc_agencies
                     WHERE agn_code = i.cashp_agnt_agent_code;

                    IF v_act_code IN (2,
                                      9,
                                      10,
                                      16)
                    THEN
                        v_client_type := 'A';
                    ELSIF v_act_code = 3
                    THEN
                        v_client_type := 'B';
                    ELSIF v_act_code IN (10)
                    THEN
                        v_client_type := 'MK';
                    ELSIF v_act_code = 4
                    THEN
                        v_client_type := 'FI';
                    ELSIF v_act_code = 5
                    THEN
                        v_client_type := 'I';
                    ELSIF v_act_code = 6
                    THEN
                        v_client_type := 'R';
                    ELSIF v_act_code = 7
                    THEN
                        v_client_type := 'FO';
                    ELSE
                        raise_application_error (
                            -20001,
                               'UNDEFINED ACCOUNT TYPE - '
                            || v_act_code
                            || ' -FOR AGENCIES '
                            || v_agnt_sht_desc);
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_application_error (
                            -20021,
                            'AGENCY - ' || i.cashp_brn_code || ' NOT FOUND ');
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20022,
                            'AGENCY INFO ' || SQLERRM (SQLCODE));
                END;
            END IF;

            v_rec_count := 0;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_brh_name := fms_interfaces_pkg.brh_name (i.cashp_brn_code, 'S');
            v_org_code := fms_interfaces_pkg.get_org (i.cashp_brn_code);
            fms_interfaces_pkg.trans_bct ('CASHBPYMT',
                                          v_cqr_source,
                                          i.cashp_brn_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);

            --retrieve the bank account based on the transaction and the branch---
            IF ROUND (NVL (i.cashp_cashback_amt, 0), v_bcur_rnd) = 0
            THEN
                raise_application_error (
                    -20001,
                       'THE NET CASHBACK AMOUNT '
                    || NVL (i.cashp_cashback_amt, 0));
            END IF;

            IF NVL (i.cashp_cashback_amt, 0) != 0
            THEN
                IF v_trnt_contra_gl_code IS NULL
                THEN
                    SELECT gin_interfaces_pkg.sl_control_acc ('GIS',
                                                              v_client_type)
                      INTO v_trnt_contra_gl_code
                      FROM DUAL;
                END IF;

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_contra_gl_code,
                                                      v_org_code,
                                                      i.cashp_brn_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'COM GL CONTROL A/C - '
                        || v_trnt_contra_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || v_scl_code);
                END IF;

                IF v_pay_method = 'EFT'
                THEN
                    BEGIN
                        v_eft_enabled := 'N';
                        v_eft_enabled :=
                            account_enabled (
                                bnk_bbr_code (i.cashp_agnt_agent_code, 4));
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR GETTING BANK ACC INFO... ');
                    END;

                    IF v_eft_enabled = 'N'
                    THEN
                        raise_application_error (
                            -20001,
                            'BANK BRANCH NOT ENABLED TO TRANSACT EFT PAYMENTS');
                    END IF;
                END IF;

                v_rec_count := v_rec_count + 1;

                IF v_pay_method NOT IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.cashp_cashback_amt, 0), v_bcur_rnd),
                            'COIN',
                            v_trnt_contra_gl_code,
                            v_org_code,
                            i.cashp_brn_code,
                            'D',
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR POSTING PAYMENT DETAILS FOR');
                    END;
                ELSE
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.cashp_cashback_amt, 0), v_bcur_rnd),
                            'COIN',
                            v_trnt_contra_gl_code,
                            v_org_code,
                            i.cashp_brn_code,
                            'D',
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR POSTING PAYMENT DETAILS FOR');
                    END;
                END IF;

                IF v_pay_method IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        v_payee_eft_dtls (1) :=
                            fms_cheques_pkg.append_eft_payees (
                                v_rec_count,
                                i.cashp_code,
                                ROUND (NVL (i.cashp_cashback_amt, 0),
                                       v_bcur_rnd),
                                ---v_amount,/*changed by Basil to 5 after db comparison*/
                                i.cashp_payee,
                                bnk_bbr_code (i.cashp_agnt_agent_code, 5),
                                bnk_account (i.cashp_agnt_agent_code, 5),
                                i.cashp_batch_no         --i.coinp_cr_mtran_no
                                                );
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                'FAILED TO SECURE EFT PAYEE DETAILS FOR');
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR ON POSTING EFT COINSURANCE DETAILS FOR');
                    END;
                END IF;

                IF v_pay_method IN ('EFT', 'RTGS', 'MOB')
                THEN
                    IF v_pay_method IN ('EFT', 'RTGS')
                    THEN
                        BEGIN
                            fms_cheques_pkg.create_reqn (
                                v_cqr_source,
                                i.cashp_code,                            --ref
                                i.cashp_batch_no,                     -- ref2,
                                TRUNC (SYSDATE),
                                   'CASHBACK FOR COINP_DR_REF_NO'
                                || i.cashp_batch_no,
                                --'gis claim',             --narrative V
                                i.cashp_brn_code,
                                v_bct_brh_code,
                                ROUND (NVL (i.cashp_cashback_amt, 0),
                                       v_bcur_rnd),
                                --cqr_amount
                                i.cashp_payee,
                                i.cashp_cur_code,
                                v_bct_code,
                                fms_interfaces_pkg.get_usercode (
                                    UPPER (v_user_name)),
                                TRUNC (SYSDATE),
                                v_user_code,                 --v_cqr_req_by  ,
                                'GIS-COIN',                     -- pmt_type  ,
                                v_chq_dtls,
                                v_payee_eft_dtls,
                                NULL,                      ---physical_address
                                NULL,                       --- postal_address
                                NULL);
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                raise_error (
                                    'Error .' || v_payee || SQLERRM (SQLCODE));
                        END;
                    ELSIF v_pay_method IN ('MOB')
                    THEN
                        BEGIN
                            NULL;
                        -- uncomment after fms have updated this functionality
                        /*Fms_Cheques_Pkg.create_reqn(v_cqr_source,
                                                    i.cop_code,                                        --ref
                                                     i.cop_trans_no,                        -- ref2,
                                                     TRUNC (SYSDATE),
                                                     i.cop_trans_no,    --'GIS Claim',             --narrative V
                                                     i.COP_BRN_CODE,
                                                     v_bct_brh_code,
                                                     ROUND (NVL (i.cop_net_comm, 0), v_bcur_rnd),    --cqr_amount
                                                     v_agnt,
                                                     i.COP_cur_code,
                                                     v_bct_code,
                                                     Fms_Interfaces_Pkg.get_usercode (UPPER (v_user_name)),
                                                     trunc(sysdate),
                                                     v_user_code,                               --v_cqr_req_by  ,
                                                     'GIS-COMM',                                   -- pmt_type  ,
                                                     v_chq_dtls,
                                                     v_payee_eft_dtls,   ---          IN OUT   type_payee_eft_table,
                                                     null,-- v_cqr_physical_address               VARCHAR2 DEFAULT NULL,
                                                     null,--v_cqr_postal_address                 VARCHAR2 DEFAULT NULL,
                                                     null,--v_use_bnk_code                       VARCHAR2 DEFAULT NULL,                         NUMBER DEFAULT NULL,
                                                     --null,--i.CPV_INVOICE_NO,--v_invoice_no                         VARCHAR2 DEFAULT NULL,
                                                     v_serv_prov_code--v_mpt_code                           NUMBER DEFAULT NULL
                                                    ); */
                        END;
                    END IF;
                ELSE
                    --RAISE_eRROR('v_bct_code='||v_bct_code);
                    fms_cheques_pkg.create_reqn (
                        v_cqr_source,
                        i.cashp_code,                                    --ref
                        i.cashp_batch_no,                             -- ref2,
                        TRUNC (SYSDATE),
                        'CASHBACK PAYMENT FOR ' || i.cashp_code,
                        i.cashp_brn_code,
                        v_bct_brh_code,
                        ROUND (NVL (i.cashp_cashback_amt, 0), v_bcur_rnd),
                        i.cashp_payee,
                        i.cashp_cur_code,
                        v_bct_code,
                        fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                        TRUNC (SYSDATE),
                        v_user_code,                         --v_cqr_req_by  ,
                        'GIS-COIN',                             -- pmt_type  ,
                        v_chq_dtls);
                END IF;
            END IF;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'COIN REQN NOT CREATED FOR COINSURANCE PAYMENT # ' || v_drno);
        END IF;
    END;

    FUNCTION get_brn_code (v_trans_no IN NUMBER)
        RETURN NUMBER
    IS
        v_branch   NUMBER;
    BEGIN
        SELECT cmb_brn_code
          INTO v_branch
          FROM gin_claim_master_bookings, gin_gis_transactions
         WHERE cmb_claim_no = ggt_cmb_claim_no AND ggt_trans_no = v_trans_no;

        --and IPU_EFF_WET = v_wet
        RETURN (v_branch);
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN (0);
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'Unable to retrieve Branch Details, ' || SQLERRM (SQLCODE));
    END;

    PROCEDURE post_xol (v_trans_no       NUMBER,
                        v_user_name      VARCHAR2,
                        v_auth_date   IN DATE DEFAULT TRUNC (SYSDATE))
    IS
        CURSOR cur_part_amnts IS
              SELECT NVL (cxtd_amt_to_cede, 0)
                         gross_amt,
                     DECODE (xolp_part_type,
                             'D', xolp_agnt_agent_code,
                             'B', xolp_br_agn_code)
                         xolp_agnt_agent_code,
                     agn_name,
                     DECODE (xolp_part_type,
                             'D', xolp_agnt_sht_desc,
                             'B', xolp_br_agn_sht_desc)
                         xolp_agnt_sht_desc,
                     xolp_rate,
                     xolp_gl_account,
                     cxtd_scl_code,
                     xols_cur_code,
                     xol_code,
                     ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0))
                         part_amount,
                     cxtd_clm_no
                FROM gin_claim_xol_treaty_details,
                     gin_xol_treaty_setups,
                     gin_xol_participants,
                     gin_xol_treaties,
                     tqc_agencies
               WHERE     cxtd_xols_code = xols_code
                     AND xolp_agnt_agent_code = agn_code
                     AND cxtd_xol_code = xol_code
                     AND xolp_xols_code = xols_code
                     AND xols_xol_code = xol_code
                     AND cxtd_ggt_trans_no = v_trans_no
                     AND cxtd_authorized = 'N'
                     AND cxtd_ggt_trans_no IN
                             (SELECT ggt_trans_no FROM gin_gis_transactions)
                     AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) <>
                         0
            GROUP BY cxtd_clm_no,
                     NVL (cxtd_amt_to_cede, 0),
                     DECODE (xolp_part_type,
                             'D', xolp_agnt_agent_code,
                             'B', xolp_br_agn_code),
                     agn_name,
                     DECODE (xolp_part_type,
                             'D', xolp_agnt_sht_desc,
                             'B', xolp_br_agn_sht_desc),
                     xolp_rate,
                     xolp_gl_account,
                     cxtd_scl_code,
                     xols_cur_code,
                     xol_code,
                     ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0));

        vgl_trans               fms_vouchers_pkg.tgl_rec_type;
        v_user_code             NUMBER;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_trt_man_amt           NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (15);
        rev_type                VARCHAR2 (15);
        v_control_acc           VARCHAR2 (30);
        v_client_type           VARCHAR2 (5);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (25);
        vgl_code                NUMBER;
        v_drcr                  VARCHAR2 (1);
    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        vgl_trans.DELETE;
        v_rec_count := -1;
        v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');

        --  vgl_trans .DELETE;
        FOR cur_part_amnts_rec IN cur_part_amnts
        LOOP
            SELECT cmb_brn_code
              INTO v_paymnt_brh_code
              FROM gin_claim_master_bookings
             WHERE cmb_claim_no = cur_part_amnts_rec.cxtd_clm_no;

            v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);

            IF SIGN (cur_part_amnts_rec.part_amount) = -1
            THEN
                v_drcr := 'C';
            ELSE
                v_drcr := 'D';
            END IF;

            v_exch_rate :=
                get_currexch_rate (cur_part_amnts_rec.xols_cur_code,
                                   v_rnd,
                                   v_bcur_rnd);
            v_cur_code := cur_part_amnts_rec.xols_cur_code;

            BEGIN
                get_gl_code ('XOL',
                             cur_part_amnts_rec.cxtd_scl_code,
                             'U',
                             v_trnt_code,
                             v_trnt_gl_code,
                             v_trnt_contra_gl_code);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Xol recovery account is not defined..');
            END;

            v_trnt_contra_gl_code := cur_part_amnts_rec.xolp_gl_account;
            v_rec_count := v_rec_count + 2;

            IF NVL (cur_part_amnts_rec.part_amount, 0) <> 0
            THEN
                BEGIN
                    INSERT INTO gin_master_transactions (
                                    mtran_no,
                                    mtran_date,
                                    mtran_ref_no,
                                    mtran_other_ref,
                                    mtran_tran_type,
                                    mtran_dc,
                                    mtran_control_acc,
                                    mtran_client_type,
                                    mtran_client_code,
                                    mtran_amount,
                                    mtran_balance,
                                    mtran_pol_batch_no,
                                    mtran_scl_code,
                                    mtran_narrations,
                                    mtran_rei_code,
                                    mtran_client_polcy_no,
                                    mtran_pol_ren_endos_no,
                                    mtran_acct_code,
                                    mtran_ggt_tran_no,
                                    mtran_net_amt,
                                    mtran_posting_date,
                                    mtran_cmb_claim_no,
                                    mtran_prp_code,
                                    mtran_authorised,
                                    mtran_date_authorized,
                                    mtran_authorised_by,
                                    mtran_pro_sht_desc,
                                    mtran_pro_code,
                                    mtran_origin,
                                    mtran_cur_code,
                                    mtran_cur_symbol,
                                    mtran_cur_rate)
                             VALUES (
                                    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                                 || gin_mtran_no_seq.NEXTVAL,
                                 TRUNC (SYSDATE),
                                 'XOL' || v_trans_no,
                                 NULL,
                                 'XOL',
                                 v_drcr,
                                 cur_part_amnts_rec.xolp_agnt_sht_desc,
                                 'RI',
                                 cur_part_amnts_rec.xolp_agnt_agent_code,
                                 DECODE (
                                     v_drcr,
                                     'C', -cur_part_amnts_rec.part_amount,
                                     cur_part_amnts_rec.part_amount),
                                 DECODE (
                                     v_drcr,
                                     'C', -cur_part_amnts_rec.part_amount,
                                     cur_part_amnts_rec.part_amount),
                                 NULL,
                                 cur_part_amnts_rec.cxtd_scl_code,
                                 DECODE (v_drcr,
                                         'C', 'Claim Xol Recovery credit',
                                         'D', 'Claim Xol Recovery debit'),
                                 cur_part_amnts_rec.xol_code,
                                 NULL,
                                 NULL,
                                 'XOL TREATY',
                                 v_trans_no,
                                 DECODE (
                                     v_drcr,
                                     'C', -cur_part_amnts_rec.part_amount,
                                     cur_part_amnts_rec.part_amount),
                                 TRUNC (SYSDATE),
                                 NULL,
                                 NULL,
                                 'Y',
                                 TRUNC (SYSDATE),
                                 v_user_name,
                                 NULL,
                                 NULL,
                                 'C',
                                 v_cur_code,
                                 NULL,
                                 v_exch_rate);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('ERROR UPDATING XOL STATEMENTS...');
                END;

                BEGIN
                    INSERT INTO gin_gl_transactions (gltran_no,
                                                     gltran_auth_date,
                                                     gltran_dc,
                                                     gltran_trnt_code,
                                                     gltran_amount,
                                                     gltran_amount_bcur,
                                                     gltran_gltran_acc,
                                                     gltran_contra_acc,
                                                     gltran_usrname,
                                                     gltran_tran_no,
                                                     gltran_pol_policy_no,
                                                     gltran_u_c_trans,
                                                     gltran_claim_no,
                                                     gltran_cur_code,
                                                     gltran_cur_symbol,
                                                     gltran_cur_rate,
                                                     gltran_scl_code,
                                                     gltran_pro_code,
                                                     gltran_btr_trans_code,
                                                     gltran_level,
                                                     gltran_brn_code)
                             VALUES (
                                    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                                 || gin_gltran_no_seq.NEXTVAL,
                                 TRUNC (SYSDATE),
                                 v_drcr,
                                 'XOL',
                                 cur_part_amnts_rec.part_amount,
                                 ROUND (
                                       cur_part_amnts_rec.part_amount
                                     / v_exch_rate),
                                 v_trnt_gl_code,
                                 v_trnt_contra_gl_code,
                                 v_user_name,
                                 v_trans_no,
                                 NULL,
                                 'C',
                                 NULL,
                                 v_cur_code,
                                 NULL,
                                 v_exch_rate,
                                 cur_part_amnts_rec.cxtd_scl_code,
                                 cur_part_amnts_rec.cxtd_scl_code,
                                 NULL,
                                 'XOL',
                                 get_brn_code (v_trans_no));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error updating gl transactions....');
                END;

                BEGIN
                    fms_vouchers_pkg.append_gl_trans (
                        v_rec_count,
                        'CLAIM XOL RECOVERY ',                   --v_narrative
                        ABS (cur_part_amnts_rec.part_amount),       --v_amount
                        v_drcr,                                       --v_drcr
                        v_trnt_gl_code,                           --v_account1
                        v_trnt_contra_gl_code, --i.GLTRAN_CONTRA_ACC,--v_account2
                        v_paymnt_brh_code,                          --v_branch
                        vgl_trans);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20026,
                               'ERROR POSTING GL TRANS FOR '
                            || v_trnt_code
                            || ':- '
                            || SQLERRM (SQLCODE));
                END;
            END IF;
        END LOOP;

        IF v_rec_count = -1
        THEN
            raise_application_error (-20001,
                                     'No transaction to authorize...');
        END IF;

        --RAISE_ERROR('STOP='||vgl_code||';'||v_paymnt_brh_code||';'||v_auth_date||';'||v_user_code );
        vgl_code :=
            fms_vouchers_pkg.update_vgl ('GIS XOL RECOVERY', --V_BTC_DESCRIPTION
                                         'JV',          --V_BTC_TYPE varchar2,
                                         v_paymnt_brh_code,
                                         v_auth_date,
                                         'GIS XOL RECOVERIES VOUCHER',
                                         'GIS',              --V_REF varchar2,
                                         v_user_code,    --V_RAISED_BY number,
                                         v_cur_code,         --i.cmb_cur_code,
                                         vgl_trans);
        --RAISE_ERROR('STOP='||vgl_code||';'||v_user_code);
        fms_interfaces_pkg.post_je (vgl_code, v_user_code);
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR CREATING REQUISITION :- ' || SQLERRM (SQLCODE));
    END post_xol;

    PROCEDURE update_undo_commissions (v_cqr_ref      IN VARCHAR2,
                                       v_cqr_ref2     IN VARCHAR2,
                                       v_cqr_chq_no   IN VARCHAR2,
                                       v_cqr_chq_dt   IN DATE,
                                       v_user_name    IN VARCHAR2,
                                       v_cqr_amount   IN NUMBER)
    IS
        CURSOR cur_comm IS
            SELECT copdt_code,                                     --COP_CODE,
                   copdt_agn_code,
                   copdt_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   agn_sht_desc,
                   act_type_id,
                   copdt_cur_code,
                   act_account_type,
                   copdt_comm_amt
                       comm_amt,
                   copdt_whdtax_amt
                       whtax,
                   copdt_ovride_comm_amt
                       ovrde_comm,
                   copdt_ovride_whdtax_amt
                       ovrde_whtax,
                   copdt_comm_amt + copdt_whdtax_amt + copdt_comm_levy_amt
                       net_comm,
                   copdt_comm_levy_amt
              FROM gin_comm_pymt_dtls, tqc_agencies, tqc_account_types
             WHERE     copdt_agn_code = agn_code
                   AND agn_act_code = act_code
                   AND copdt_authorized = 'Y'
                   AND copdt_code = v_cqr_ref
                   AND copdt_trans_no = v_cqr_ref2;

        CURSOR cur_comm_dtls (vcopdtcode IN NUMBER)
        IS
            SELECT cop_code,
                   cop_vat,
                   cop_agn_code,
                   cop_whdtax_amt,
                   cop_brn_code,
                   cop_cr_ref_no,
                   cop_dr_ref_no,
                   cop_net_comm,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   cop_comm_amt,
                   cop_comm_levy_amt
              FROM gin_commission_pymts, tqc_agencies
             WHERE cop_agn_code = agn_code AND cop_copdt_code = vcopdtcode;

        CURSOR cur_deductable_dtls (vcopdtcode IN NUMBER)
        IS
            SELECT mtran_no, mtran_ref_no, mtran_balance
              FROM gin_master_transactions, tqc_agencies
             WHERE     mtran_copdt_code = vcopdtcode
                   AND mtran_tran_type = 'ADC'
                   AND mtran_dc = 'C';

        v_mtran_no      NUMBER;
        v_cr_mtran_no   NUMBER;
        v_cr_ref_no     VARCHAR2 (35);
        v_cr_bal        NUMBER;
        v_cr_com        NUMBER;
        v_pol_no        VARCHAR2 (35);
        errmsg          VARCHAR2 (4000);
    BEGIN
        FOR cur_comm_rec IN cur_comm
        LOOP
            BEGIN
                UPDATE gin_comm_pymt_dtls
                   SET copdt_paid = 'Y',
                       copdt_paid_chq_date = v_cqr_chq_dt,
                       copdt_paid_chq_no = v_cqr_chq_no
                 WHERE     copdt_code = cur_comm_rec.copdt_code
                       AND NVL (copdt_authorized, 'N') = 'Y'
                       AND NVL (copdt_paid, 'N') != 'Y';

                UPDATE gin_comm_pymt_prepd_dtls
                   SET coppdt_paid = 'Y',
                       coppdt_paid_chq_date = v_cqr_chq_dt,
                       coppdt_paid_chq_no = v_cqr_chq_no
                 WHERE     coppdt_copdt_code = cur_comm_rec.copdt_code
                       AND NVL (coppdt_authorized, 'N') = 'Y'
                       AND NVL (coppdt_paid, 'N') != 'Y';
            EXCEPTION
                WHEN OTHERS
                THEN
                    errmsg :=
                        (   'ERROR REVERSING COMMISSION PAYMENT VOUCHER NO. ..'
                         || v_cqr_ref
                         || v_cqr_ref2);

                    INSERT INTO commission_error_log (cel_code,
                                                      cel_mtran_cr_no,
                                                      cel_mtran_dr_no,
                                                      cel_cop_code,
                                                      cel_copdt_code,
                                                      cel_copdt_trans_no,
                                                      cel_date,
                                                      cel_user,
                                                      cel_errmsg)
                         VALUES (cel_code_seq.NEXTVAL,
                                 NULL,
                                 NULL,
                                 cur_comm_rec.copdt_code,
                                 v_cqr_ref,
                                 v_cqr_ref2,
                                 SYSDATE,
                                 v_user_name,
                                 errmsg);
            END;

            FOR cur_com_dtls_rec IN cur_comm_dtls (cur_comm_rec.copdt_code)
            LOOP
                BEGIN
                    UPDATE gin_commission_pymts
                       SET cop_authorized_by = NULL,
                           cop_authorized = 'N',
                           cop_authorize_date = NULL,
                           cop_paid = 'N',
                           cop_coppdt_code = NULL
                     WHERE cop_code = cur_com_dtls_rec.cop_code;

                    INSERT INTO gin_tran_mapping (tmap_code,
                                                  tmap_mtran_no,
                                                  tmap_mtran_ref_no,
                                                  tmap_check_mtran_no,
                                                  tmap_amount,
                                                  tmap_drcr,
                                                  tmap_check_mtran_ref_no,
                                                  tmap_posting_date,
                                                  tmap_posted_by)
                             VALUES (
                                    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                                 || gin_tmap_code_seq.NEXTVAL,
                                 cur_com_dtls_rec.cop_cr_mtran_no,
                                 cur_com_dtls_rec.cop_cr_ref_no,
                                 cur_com_dtls_rec.cop_dr_mtran_no,
                                 ABS (cur_com_dtls_rec.cop_net_comm),
                                 'D',
                                 cur_com_dtls_rec.cop_dr_ref_no,
                                 TRUNC (SYSDATE),
                                 v_user_name);

                    UPDATE gin_master_transactions
                       SET mtran_balance =
                                 NVL (mtran_balance, 0)
                               + (  NVL (cur_com_dtls_rec.cop_net_comm, 0)
                                  * DECODE ((mtran_dc), 'C', -1, 1)),
                           mtran_settlement =
                                 NVL (mtran_settlement, 0)
                               -   (NVL (cur_com_dtls_rec.cop_net_comm, 0))
                                 * DECODE ((mtran_dc), 'C', -1, 1),
                           mtran_comm_paid =
                                 mtran_comm_paid
                               - cur_com_dtls_rec.cop_comm_amt,
                           mtran_comm_payable =
                                 mtran_comm_paid
                               - cur_com_dtls_rec.cop_comm_amt,
                           mtran_vat_payable =
                                 NVL (mtran_vat_payable, 0)
                               - NVL (cur_com_dtls_rec.cop_vat, 0),
                           mtran_whtx_payable =
                                 NVL (mtran_whtx_payable, 0)
                               - ABS (cur_com_dtls_rec.cop_whdtax_amt),
                           mtran_comm_levy_payable =
                                 NVL (mtran_comm_levy_payable, 0)
                               - ABS (cur_com_dtls_rec.cop_comm_levy_amt)
                     WHERE mtran_no = cur_com_dtls_rec.cop_cr_mtran_no;

                    UPDATE gin_master_transactions
                       SET mtran_comm_payable =
                                 mtran_comm_paid
                               - cur_com_dtls_rec.cop_comm_amt,
                           mtran_comm_paid =
                                 mtran_comm_paid
                               - cur_com_dtls_rec.cop_comm_amt,
                           mtran_vat_payable =
                                 NVL (mtran_vat_payable, 0)
                               - NVL (cur_com_dtls_rec.cop_vat, 0),
                           mtran_whtx_payable =
                                 mtran_whtx_payable
                               - ABS (cur_com_dtls_rec.cop_whdtax_amt),
                           mtran_comm_levy_payable =
                                 mtran_comm_levy_payable
                               - ABS (cur_com_dtls_rec.cop_comm_levy_amt)
                     WHERE mtran_no = cur_com_dtls_rec.cop_dr_mtran_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        errmsg :=
                            (   'Error updating commission payment voucher no. ...'
                             || v_cqr_ref2
                             || SQLERRM);
                END;
            END LOOP;

            FOR cur_deductable_dtls_rec
                IN cur_deductable_dtls (cur_comm_rec.copdt_code)
            LOOP
                --       raise_error('here');
                BEGIN
                    gis_accounts_utilities.undo_trans_allocation (
                        cur_deductable_dtls_rec.mtran_no);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        errmsg :=
                            ('ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                END;
            END LOOP;
        END LOOP;
    END update_undo_commissions;

    PROCEDURE update_undo_tax_remmittance (v_cqr_ref      IN VARCHAR2,
                                           v_cqr_ref2     IN VARCHAR2,
                                           v_cqr_chq_no   IN VARCHAR2,
                                           v_cqr_chq_dt   IN DATE,
                                           v_user_name    IN VARCHAR2,
                                           v_cqr_amount   IN NUMBER)
    IS
        CURSOR cur_tax IS
            SELECT *
              FROM gin_tax_remmittance
             WHERE vap_authorized IN ('P', 'Y') AND vap_code = v_cqr_ref;

        CURSOR cur_tax_dtls (vcqrref IN NUMBER)
        IS
            SELECT *
              FROM gin_clm_payment_vouchers
             WHERE cpv_vap_code = vcqrref AND cpv_vap_paid IN ('P', 'Y');

        v_mtran_no      NUMBER;
        v_cr_mtran_no   NUMBER;
        v_cr_ref_no     VARCHAR2 (35);
        v_cr_bal        NUMBER;
        v_cr_com        NUMBER;
        v_pol_no        VARCHAR2 (35);
        errmsg          VARCHAR2 (4000);
    BEGIN
        FOR cur_tax_rec IN cur_tax
        LOOP
            BEGIN
                UPDATE gin_tax_remmittance
                   SET vap_paid = 'Y',
                       vap_paid_chq_date = v_cqr_chq_dt,
                       vap_paid_chq_no = v_cqr_chq_no
                 WHERE     vap_code = cur_tax_rec.vap_code
                       AND NVL (vap_authorized, 'N') = 'Y'
                       AND NVL (vap_paid, 'N') != 'Y';
            EXCEPTION
                WHEN OTHERS
                THEN
                    errmsg :=
                        (   'ERROR REVERSING TAX PAYMENT VOUCHER NO. ..'
                         || v_cqr_ref
                         || v_cqr_ref2);
            END;

            FOR cur_tax_dtls_rec IN cur_tax_dtls (cur_tax_rec.vap_code)
            LOOP
                BEGIN
                    UPDATE gin_clm_payment_vouchers
                       SET cpv_vap_code = NULL, cpv_vap_paid = NULL
                     WHERE cpv_vap_code = cur_tax_rec.vap_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        errmsg :=
                            (   'Error updating TAX payment voucher no. ...'
                             || v_cqr_ref2
                             || SQLERRM);
                END;
            END LOOP;
        END LOOP;
    END update_undo_tax_remmittance;

    /*****commented by Olson*****************/
    PROCEDURE update_commissions (v_cqr_ref      IN VARCHAR2,
                                  v_cqr_ref2     IN VARCHAR2,
                                  v_cqr_chq_no   IN VARCHAR2,
                                  v_cqr_chq_dt   IN DATE,
                                  v_user_name    IN VARCHAR2,
                                  v_cqr_amount   IN NUMBER)
    IS
        --   CURSOR cur_cons_comm IS SELECT * FROM GIN_COMM_PYMT_DTLS
        --                      WHERE COPDT_CODE =v_cqr_ref
        --                      AND COPDT_TRANS_NO =v_cqr_ref2;
        CURSOR cur_comm IS
            SELECT copdt_code,                                     --COP_CODE,
                   copdt_agn_code,
                   copdt_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   agn_sht_desc,
                   act_type_id,
                   copdt_cur_code,
                   act_account_type,
                   copdt_comm_amt                        comm_amt,
                   copdt_whdtax_amt                      whtax,
                   copdt_ovride_comm_amt                 ovrde_comm,
                   copdt_ovride_whdtax_amt               ovrde_whtax,
                   copdt_comm_amt + copdt_whdtax_amt     net_comm
              FROM gin_comm_pymt_dtls, tqc_agencies, tqc_account_types
             WHERE     copdt_agn_code = agn_code
                   AND agn_act_code = act_code
                   --AND NVL(COP_AUTHORIZED,'N') = 'Y'
                   --AND NVL(COP_PAID,'N') != 'Y'
                   --AND NVL(COP_CHECKED,'N') = 'Y'
                   AND copdt_authorized = 'Y'
                   AND copdt_code IN
                           (SELECT cop_copdt_code
                              FROM gin_commission_pymts
                             WHERE     copdt_code = cop_copdt_code
                                   AND cop_type IN ('UC-U', 'LTA-U', 'COM'))
                   AND copdt_code = v_cqr_ref
                   AND copdt_trans_no = v_cqr_ref2;

        CURSOR cur_comm_dtls (vcopdtcode IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   ABS (NVL (cop_comm_amt, 0))       cop_comm_amt,
                   cop_type,
                   ABS (NVL (cop_whdtax_amt, 0))     cop_whdtax_amt
              FROM gin_commission_pymts, tqc_agencies
             WHERE cop_agn_code = agn_code AND cop_copdt_code = vcopdtcode;

        CURSOR cur_othercomm IS
            SELECT copdt_code,                                     --COP_CODE,
                   copdt_agn_code,
                   copdt_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   agn_sht_desc,
                   act_type_id,
                   copdt_cur_code,
                   act_account_type,
                   copdt_comm_amt                        comm_amt,
                   copdt_whdtax_amt                      whtax,
                   copdt_ovride_comm_amt                 ovrde_comm,
                   copdt_ovride_whdtax_amt               ovrde_whtax,
                   copdt_comm_amt + copdt_whdtax_amt     net_comm
              FROM gin_comm_pymt_dtls, tqc_agencies, tqc_account_types
             WHERE     copdt_agn_code = agn_code
                   AND agn_act_code = act_code
                   --AND NVL(COP_AUTHORIZED,'N') = 'Y'
                   --AND NVL(COP_PAID,'N') != 'Y'
                   --AND NVL(COP_CHECKED,'N') = 'Y'
                   AND copdt_authorized = 'Y'
                   AND copdt_code NOT IN
                           (SELECT cop_copdt_code
                              FROM gin_commission_pymts
                             WHERE     copdt_code = cop_copdt_code
                                   AND cop_type IN ('UC-U', 'LTA-U', 'COM'))
                   AND copdt_code = v_cqr_ref
                   AND copdt_trans_no = v_cqr_ref2;

        CURSOR cur_othercomm_dtls (vcopdtcode IN NUMBER)
        IS
            SELECT cop_code,
                   cop_agn_code,
                   cop_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   cop_cr_mtran_no,
                   cop_dr_mtran_no,
                   ABS (NVL (cop_comm_amt, 0))     cop_comm_amt,
                   cop_type
              FROM gin_commission_pymts, tqc_agencies
             WHERE cop_agn_code = agn_code AND cop_copdt_code = vcopdtcode;

        CURSOR cur_commpayable IS
            SELECT cop_cr_mtran_no
              FROM gin_comm_pymt_dtls,
                   tqc_agencies,
                   tqc_account_types,
                   gin_commission_pymts
             WHERE     copdt_agn_code = agn_code
                   AND agn_act_code = act_code
                   --AND NVL(COP_AUTHORIZED,'N') = 'Y'
                   --AND NVL(COP_PAID,'N') != 'Y'
                   --AND NVL(COP_CHECKED,'N') = 'Y'
                   AND copdt_authorized = 'Y'
                   AND copdt_code = cop_copdt_code
                   AND copdt_code IN
                           (SELECT cop_copdt_code
                              FROM gin_commission_pymts
                             WHERE     copdt_code = cop_copdt_code
                                   AND cop_type IN ('UC-U', 'LTA-U', 'COM'))
                   AND copdt_code = v_cqr_ref
                   AND copdt_trans_no = v_cqr_ref2;

        v_mtran_no        NUMBER;
        v_cr_mtran_no     NUMBER;
        v_cr_ref_no       VARCHAR2 (35);
        v_cr_bal          NUMBER;
        v_cr_com          NUMBER;
        v_pol_no          VARCHAR2 (35);
        v_cop_cnt         NUMBER;
        v_dr_mtran_no     NUMBER;
        v_mtran_balance   NUMBER;
    BEGIN
        FOR cur_comm_rec IN cur_comm
        LOOP
            v_pol_no := NULL;

            BEGIN
                SELECT TO_NUMBER (
                              TO_CHAR (SYSDATE, 'YYYY')
                           || gin_mtran_no_seq.NEXTVAL)
                  INTO v_mtran_no
                  FROM DUAL;

                INSERT INTO gin_master_transactions (mtran_no,
                                                     mtran_doc_date,
                                                     mtran_date,
                                                     mtran_ref_no,
                                                     mtran_other_ref,
                                                     mtran_tran_type,
                                                     mtran_dc,
                                                     mtran_control_acc,
                                                     mtran_client_type,
                                                     mtran_client_code,
                                                     mtran_amount,
                                                     mtran_balance,
                                                     mtran_authorised,
                                                     mtran_net_amt,
                                                     mtran_posting_date,
                                                     mtran_ggt_tran_no,
                                                     mtran_prp_code,
                                                     mtran_btr_trans_code,
                                                     mtran_origin,
                                                     mtran_cur_code,
                                                     mtran_cur_symbol,
                                                     mtran_brn_code,
                                                     mtran_brn_sht_desc,
                                                     mtran_posted_by,
                                                     mtran_whtx,
                                                     mtran_client_polcy_no,
                                                     mtran_copdt_code)
                         VALUES (
                             v_mtran_no,
                             TRUNC (SYSDATE),
                             TRUNC (SYSDATE),
                             'COMMISSION',
                             cur_comm_rec.copdt_code,
                             'COM',
                             'D',
                             cur_comm_rec.agn_sht_desc,
                             cur_comm_rec.act_type_id,
                             cur_comm_rec.copdt_agn_code,
                             --acc sht desc
                             ABS (cur_comm_rec.comm_amt),
                             cur_comm_rec.net_comm,
                             'Y',
                             cur_comm_rec.net_comm,
                             --ABS(cur_comm_rec.COMM_AMT),
                             TRUNC (SYSDATE),
                             NULL,
                             NULL,
                             'COM',
                             'U',
                             cur_comm_rec.copdt_cur_code,
                             tqc_interfaces_pkg.currencysymbol (
                                 cur_comm_rec.copdt_cur_code),
                             cur_comm_rec.copdt_brn_code,
                             fms_interfaces_pkg.brh_name (
                                 cur_comm_rec.copdt_brn_code,
                                 'S'),
                             v_user_name,
                             cur_comm_rec.whtax,
                             v_pol_no,
                             cur_comm_rec.copdt_code);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
                        || v_mtran_no);
            END;

            v_cop_cnt := 0;
            v_dr_mtran_no := NULL;

            -- raise_error(v_cqr_ref || ' = '||v_cqr_ref2||'   '||cur_comm_rec.copdt_code);
            FOR cur_com_dtls_rec IN cur_comm_dtls (cur_comm_rec.copdt_code)
            LOOP
                --RAISE_ERROR('v_cqr_ref2='||v_cqr_ref2||';v_cqr_ref='||v_cqr_ref||';'|| cur_comm_rec.COP_DR_MTRAN_NO);
                v_cop_cnt := NVL (v_cop_cnt, 0) + 1;
                v_dr_mtran_no := cur_com_dtls_rec.cop_dr_mtran_no;

                BEGIN
                    UPDATE gin_commission_pymts
                       SET cop_authorized_by = v_user_name,
                           cop_authorized = 'Y',
                           cop_authorize_date = TRUNC (SYSDATE),
                           cop_paid = 'Y',
                           cop_paid_chq_no = v_cqr_chq_no,
                           cop_paid_chq_date = v_cqr_chq_dt
                     WHERE cop_code = cur_com_dtls_rec.cop_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                END;

                BEGIN
                    SELECT mtran_no, mtran_ref_no, NVL (mtran_balance, 0)
                      INTO v_cr_mtran_no, v_cr_ref_no, v_cr_bal
                      FROM gin_master_transactions
                     WHERE mtran_no = cur_com_dtls_rec.cop_cr_mtran_no;

                    --            RAISE_ERROR('cop_comm_amt'||cur_com_dtls_rec.cop_comm_amt);
                    v_cr_com := 0;
                    gis_accounts_utilities.knock_off_transactions (
                        v_cr_mtran_no,
                        v_cr_ref_no,
                        v_mtran_no,
                        'N',
                        TRUNC (SYSDATE),
                        v_cr_bal,
                        v_cr_com,
                        cur_com_dtls_rec.cop_comm_amt);

                    UPDATE gin_master_transactions
                       SET mtran_comm_paid =
                                 NVL (mtran_comm_paid, 0)
                               + cur_com_dtls_rec.cop_comm_amt,
                           mtran_whtx_paid =
                                 NVL (mtran_whtx_paid, 0)
                               + cur_com_dtls_rec.cop_whdtax_amt           --,
                     --  mtran_whtx_payable
                     ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
                     WHERE mtran_no = v_cr_mtran_no;

                    UPDATE gin_master_transactions
                       SET mtran_comm_paid =
                                 NVL (mtran_comm_paid, 0)
                               + cur_com_dtls_rec.cop_comm_amt,
                           mtran_whtx_paid =
                                 NVL (mtran_whtx_paid, 0)
                               + cur_com_dtls_rec.cop_whdtax_amt           --,
                     --  mtran_whtx_payable
                     ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
                     WHERE mtran_no = cur_com_dtls_rec.cop_dr_mtran_no;

                    UPDATE gin_master_transactions
                       SET mtran_comm_payable =
                                 NVL (mtran_comm_payable, 0)
                               - cur_com_dtls_rec.cop_comm_amt,
                           mtran_whtx_payable =
                                 NVL (mtran_whtx_payable, 0)
                               - cur_com_dtls_rec.cop_whdtax_amt           --,
                     --  mtran_whtx_payable
                     ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
                     WHERE mtran_no = v_cr_mtran_no;

                    UPDATE gin_master_transactions
                       SET mtran_comm_payable =
                                 NVL (mtran_comm_payable, 0)
                               - cur_com_dtls_rec.cop_comm_amt,
                           mtran_whtx_payable =
                                 NVL (mtran_whtx_payable, 0)
                               - cur_com_dtls_rec.cop_whdtax_amt           --,
                     --  mtran_whtx_payable
                     ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
                     WHERE mtran_no = cur_com_dtls_rec.cop_dr_mtran_no;

                    UPDATE gin_master_transactions
                       SET mtran_tran_type = cur_com_dtls_rec.cop_type
                     WHERE mtran_no = v_mtran_no;

                    BEGIN
                        gis_accounts_utilities.validate_comm_allocations (
                            v_cr_mtran_no,
                            v_mtran_no);
                    --               EXCEPTION
                    --                  WHEN OTHERS
                    --                  THEN
                    --                     raise_error
                    --                               ('Error occured on validation of allocations.');
                    END;
                --         EXCEPTION
                --            WHEN OTHERS
                --            THEN
                --               raise_error ('ERROR RECONCILLING TRANSACTION ON ACCOUNT..');
                END;
            END LOOP;

            IF NVL (v_cop_cnt, 0) = 1
            THEN
                BEGIN
                    SELECT mtran_client_polcy_no
                      INTO v_pol_no
                      FROM gin_master_transactions
                     WHERE mtran_no = v_dr_mtran_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;

                UPDATE gin_master_transactions
                   SET mtran_client_polcy_no = v_pol_no
                 WHERE mtran_no = v_mtran_no;
            END IF;

            BEGIN
                UPDATE gin_comm_pymt_dtls
                   SET copdt_paid = 'Y',
                       copdt_paid_chq_date = v_cqr_chq_dt,
                       copdt_paid_chq_no = v_cqr_chq_no
                 WHERE copdt_code = cur_comm_rec.copdt_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error on Post update of Commission Cheques ...');
            END;
        END LOOP;

        FOR cur_comm_rec IN cur_othercomm
        LOOP
            v_pol_no := NULL;
            v_cop_cnt := 0;
            v_dr_mtran_no := NULL;

            -- raise_error(v_cqr_ref || ' = '||v_cqr_ref2||'   '||cur_comm_rec.copdt_code);
            FOR cur_com_dtls_rec
                IN cur_othercomm_dtls (cur_comm_rec.copdt_code)
            LOOP
                --RAISE_ERROR('v_cqr_ref2='||v_cqr_ref2||';v_cqr_ref='||v_cqr_ref||';'|| cur_comm_rec.COP_DR_MTRAN_NO);
                v_cop_cnt := NVL (v_cop_cnt, 0) + 1;
                v_dr_mtran_no := cur_com_dtls_rec.cop_dr_mtran_no;

                BEGIN
                    UPDATE gin_commission_pymts
                       SET cop_authorized_by = v_user_name,
                           cop_authorized = 'Y',
                           cop_authorize_date = TRUNC (SYSDATE),
                           cop_paid = 'Y',
                           cop_paid_chq_no = v_cqr_chq_no,
                           cop_paid_chq_date = v_cqr_chq_dt
                     WHERE cop_code = cur_com_dtls_rec.cop_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                END;
            END LOOP;

            IF NVL (v_cop_cnt, 0) = 1
            THEN
                BEGIN
                    SELECT mtran_client_polcy_no
                      INTO v_pol_no
                      FROM gin_master_transactions
                     WHERE mtran_no = v_dr_mtran_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;

                UPDATE gin_master_transactions
                   SET mtran_client_polcy_no = v_pol_no
                 WHERE mtran_no = v_mtran_no;
            END IF;

            BEGIN
                UPDATE gin_comm_pymt_dtls
                   SET copdt_paid = 'Y',
                       copdt_paid_chq_date = v_cqr_chq_dt,
                       copdt_paid_chq_no = v_cqr_chq_no
                 WHERE copdt_code = cur_comm_rec.copdt_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error on Post update of Commission Cheques ...');
            END;
        END LOOP;

        BEGIN
            SELECT NVL (mtran_balance, 0)
              INTO v_mtran_balance
              FROM gin_master_transactions
             WHERE mtran_no = v_mtran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_mtran_balance := 0;
        END;

        --      IF NVL (v_mtran_balance, 0) != 0
        --      THEN
        --         raise_error ('Commission Record Not Allocated!! ...');
        --      END IF;

        FOR cur_com_dtls_rec IN cur_commpayable
        LOOP
            gis_accounts_utilities.update_comm_payable (
                cur_com_dtls_rec.cop_cr_mtran_no);
        END LOOP;
    END update_commissions;

    --PROCEDURE update_commissions (
    --      v_cqr_ref      IN   VARCHAR2,
    --      v_cqr_ref2     IN   VARCHAR2,
    --      v_cqr_chq_no   IN   VARCHAR2,
    --      v_cqr_chq_dt   IN   DATE,
    --      v_user_name    IN   VARCHAR2,
    --      v_cqr_amount   IN   NUMBER
    --   )
    --   IS
    --      --   CURSOR cur_cons_comm IS SELECT * FROM GIN_COMM_PYMT_DTLS
    --      --                      WHERE COPDT_CODE =v_cqr_ref
    --      --                      AND COPDT_TRANS_NO =v_cqr_ref2;
    --      CURSOR cur_comm
    --      IS
    --         SELECT copdt_code,                                       --COP_CODE,
    --                           copdt_agn_code, copdt_brn_code, agn_name,
    --                agn_act_code, agn_comm_allowed, agn_con_code, agn_sht_desc,
    --                act_type_id, copdt_cur_code, act_account_type,
    --                copdt_comm_amt comm_amt, copdt_whdtax_amt whtax,
    --                copdt_ovride_comm_amt ovrde_comm,
    --                copdt_ovride_whdtax_amt ovrde_whtax,
    --                copdt_comm_amt + copdt_whdtax_amt net_comm
    --           FROM gin_comm_pymt_dtls, tqc_agencies, tqc_account_types
    --          WHERE copdt_agn_code = agn_code
    --            AND agn_act_code = act_code
    --            --AND NVL(COP_AUTHORIZED,'N') = 'Y'
    --            --AND NVL(COP_PAID,'N') != 'Y'
    --            --AND NVL(COP_CHECKED,'N') = 'Y'
    --            AND copdt_authorized = 'Y'
    --            and copdt_code in (select cop_copdt_code from GIN_COMMISSION_PYMTS where copdt_code=cop_copdt_code and COP_TYPE IN('COM', 'UC-U','LTA-U'))
    --            AND copdt_code = v_cqr_ref
    --            AND copdt_trans_no = v_cqr_ref2;
    --
    --      CURSOR cur_comm_dtls (vcopdtcode IN NUMBER)
    --      IS
    --         SELECT cop_code, cop_agn_code, cop_brn_code, agn_name, agn_act_code,
    --                agn_comm_allowed, agn_con_code, cop_cr_mtran_no,
    --                cop_dr_mtran_no, ABS (NVL (cop_comm_amt, 0)) cop_comm_amt,
    --                cop_type,ABS (NVL (cop_whdtax_amt, 0))cop_whdtax_amt
    --           FROM gin_commission_pymts, tqc_agencies
    --          WHERE cop_agn_code = agn_code AND cop_copdt_code = vcopdtcode;
    --
    --
    --           CURSOR cur_othercomm
    --      IS
    --         SELECT copdt_code,                                       --COP_CODE,
    --                           copdt_agn_code, copdt_brn_code, agn_name,
    --                agn_act_code, agn_comm_allowed, agn_con_code, agn_sht_desc,
    --                act_type_id, copdt_cur_code, act_account_type,
    --                copdt_comm_amt comm_amt, copdt_whdtax_amt whtax,
    --                copdt_ovride_comm_amt ovrde_comm,
    --                copdt_ovride_whdtax_amt ovrde_whtax,
    --                copdt_comm_amt + copdt_whdtax_amt net_comm
    --           FROM gin_comm_pymt_dtls, tqc_agencies, tqc_account_types
    --          WHERE copdt_agn_code = agn_code
    --            AND agn_act_code = act_code
    --            --AND NVL(COP_AUTHORIZED,'N') = 'Y'
    --            --AND NVL(COP_PAID,'N') != 'Y'
    --            --AND NVL(COP_CHECKED,'N') = 'Y'
    --            AND copdt_authorized = 'Y'
    --            and copdt_code not in (select cop_copdt_code from GIN_COMMISSION_PYMTS where copdt_code=cop_copdt_code and COP_TYPE IN( 'COM','UC-U','LTA','LTA-U'))
    --            AND copdt_code = v_cqr_ref
    --            AND copdt_trans_no = v_cqr_ref2;
    --
    --      CURSOR cur_othercomm_dtls (vcopdtcode IN NUMBER)
    --      IS
    --         SELECT cop_code, cop_agn_code, cop_brn_code, agn_name, agn_act_code,
    --                agn_comm_allowed, agn_con_code, cop_cr_mtran_no,
    --                cop_dr_mtran_no, ABS (NVL (cop_comm_amt, 0)) cop_comm_amt,
    --                cop_type
    --           FROM gin_commission_pymts, tqc_agencies
    --          WHERE cop_agn_code = agn_code AND cop_copdt_code = vcopdtcode;
    --
    --
    --          CURSOR cur_commpayable
    --      IS
    --         SELECT cop_cr_mtran_no
    --           FROM gin_comm_pymt_dtls, tqc_agencies, tqc_account_types,gin_commission_pymts
    --          WHERE copdt_agn_code = agn_code
    --            AND agn_act_code = act_code
    --            --AND NVL(COP_AUTHORIZED,'N') = 'Y'
    --            --AND NVL(COP_PAID,'N') != 'Y'
    --            --AND NVL(COP_CHECKED,'N') = 'Y'
    --            AND copdt_authorized = 'Y'
    --            and copdt_code=cop_copdt_code
    --            and copdt_code in (select cop_copdt_code from GIN_COMMISSION_PYMTS where copdt_code=cop_copdt_code and COP_TYPE IN( 'COM','UC-U','LTA','LTA-U'))
    --            AND copdt_code = v_cqr_ref
    --            AND copdt_trans_no = v_cqr_ref2;
    --
    --      v_mtran_no      NUMBER;
    --      v_cr_mtran_no   NUMBER;
    --      v_cr_ref_no     VARCHAR2 (35);
    --      v_cr_bal        NUMBER;
    --      v_cr_com        NUMBER;
    --      v_pol_no        VARCHAR2 (35);
    --      v_cop_cnt       NUMBER;
    --      v_dr_mtran_no   NUMBER;
    --      v_mtran_balance NUMBER;
    --      v_mtran_nos number;
    --      v_copdt_code number;
    --      v_bal number;
    --      v_net_amt number;
    --      v_sett number;
    --      v_alloc_amt number;
    --
    --   BEGIN
    --      FOR cur_comm_rec IN cur_comm
    --      LOOP
    --         v_pol_no := NULL;
    --
    --         BEGIN
    --            SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                              || gin_mtran_no_seq.NEXTVAL
    --                             )
    --              INTO v_mtran_no
    --              FROM DUAL;
    --
    --            INSERT INTO gin_master_transactions
    --                        (mtran_no, mtran_doc_date, mtran_date,
    --                         mtran_ref_no, mtran_other_ref, mtran_tran_type,
    --                         mtran_dc, mtran_control_acc,
    --                         mtran_client_type,
    --                         mtran_client_code,
    --                         mtran_amount, mtran_balance,
    --                         mtran_authorised, mtran_net_amt, mtran_posting_date,
    --                         mtran_ggt_tran_no, mtran_prp_code,
    --                         mtran_btr_trans_code, mtran_origin, mtran_cur_code,
    --                         mtran_cur_symbol,
    --                         mtran_brn_code,
    --                         mtran_brn_sht_desc,
    --                         mtran_posted_by, mtran_whtx, mtran_client_polcy_no,
    --                         mtran_copdt_code
    --                        )
    --                 VALUES (v_mtran_no, TRUNC (SYSDATE), TRUNC (SYSDATE),
    --                         'COMMISSION', cur_comm_rec.copdt_code, 'COM',
    --                         'D', cur_comm_rec.agn_sht_desc,
    --                         cur_comm_rec.act_type_id,
    --                         cur_comm_rec.copdt_agn_code,
    --                         --acc sht desc
    --                         ABS (cur_comm_rec.comm_amt), cur_comm_rec.net_comm,
    --                         'Y', cur_comm_rec.net_comm,
    --                                                    --ABS(cur_comm_rec.COMM_AMT),
    --                                                    TRUNC (SYSDATE),
    --                         NULL, NULL,
    --                         'COM', 'U', cur_comm_rec.copdt_cur_code,
    --                         tqc_interfaces_pkg.currencysymbol
    --                                                  (cur_comm_rec.copdt_cur_code),
    --                         cur_comm_rec.copdt_brn_code,
    --                         fms_interfaces_pkg.brh_name
    --                                                 (cur_comm_rec.copdt_brn_code,
    --                                                  'S'
    --                                                 ),
    --                         v_user_name, cur_comm_rec.whtax, v_pol_no,
    --                         cur_comm_rec.copdt_code
    --                        );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error (   'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
    --                            || v_mtran_no
    --                           );
    --         END;
    --
    --         v_cop_cnt := 0;
    --         v_dr_mtran_no := NULL;
    --
    --         -- raise_error(v_cqr_ref || ' = '||v_cqr_ref2||'   '||cur_comm_rec.copdt_code);
    --         FOR cur_com_dtls_rec IN cur_comm_dtls (cur_comm_rec.copdt_code)
    --         LOOP
    --            --RAISE_ERROR('v_cqr_ref2='||v_cqr_ref2||';v_cqr_ref='||v_cqr_ref||';'|| cur_comm_rec.COP_DR_MTRAN_NO);
    --            v_cop_cnt := NVL (v_cop_cnt, 0) + 1;
    --            v_dr_mtran_no := cur_com_dtls_rec.cop_dr_mtran_no;
    --
    --            BEGIN
    --               UPDATE gin_commission_pymts
    --                  SET cop_authorized_by = v_user_name,
    --                      cop_authorized = 'Y',
    --                      cop_authorize_date = TRUNC (SYSDATE),
    --                      cop_paid = 'Y',
    --                      cop_paid_chq_no = v_cqr_chq_no,
    --                      cop_paid_chq_date = v_cqr_chq_dt
    --                WHERE cop_code = cur_com_dtls_rec.cop_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
    --            END;
    --
    --            BEGIN
    --               SELECT mtran_no, mtran_ref_no, NVL (mtran_balance, 0)
    --                 INTO v_cr_mtran_no, v_cr_ref_no, v_cr_bal
    --                 FROM gin_master_transactions
    --                WHERE mtran_no = cur_com_dtls_rec.cop_cr_mtran_no;
    --
    --               v_cr_com := 0;
    --               gis_accounts_utilities.knock_off_transactions
    --                                                (v_cr_mtran_no,
    --                                                 v_cr_ref_no,
    --                                                 v_mtran_no,
    --                                                 'N',
    --                                                 TRUNC (SYSDATE),
    --                                                 v_cr_bal,
    --                                                 v_cr_com,
    --                                                 cur_com_dtls_rec.cop_comm_amt
    --                                                );
    --
    --
    --
    --               UPDATE gin_master_transactions
    --                  SET mtran_comm_paid =
    --                               NVL (mtran_comm_paid, 0)
    --                               + cur_com_dtls_rec.cop_comm_amt,
    --                               mtran_whtx_paid=
    --                               nvl (mtran_whtx_paid, 0)
    --                               + cur_com_dtls_rec.cop_whdtax_amt--,
    --                              --  mtran_whtx_payable
    --                ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
    --               WHERE  mtran_no = v_cr_mtran_no;
    --
    --               UPDATE gin_master_transactions
    --                  SET mtran_comm_paid =
    --                               NVL (mtran_comm_paid, 0)
    --                               + cur_com_dtls_rec.cop_comm_amt,
    --                               mtran_whtx_paid=
    --                               nvl (mtran_whtx_paid, 0)
    --                               + cur_com_dtls_rec.cop_whdtax_amt--,
    --                              --  mtran_whtx_payable
    --                ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
    --               WHERE  mtran_no = cur_com_dtls_rec.cop_dr_mtran_no;
    --
    --
    --               UPDATE gin_master_transactions
    --                  SET mtran_comm_payable =
    --                               NVL (mtran_comm_payable, 0)
    --                               - cur_com_dtls_rec.cop_comm_amt,
    --                               mtran_whtx_payable=
    --                               nvl (mtran_whtx_payable, 0)
    --                               - cur_com_dtls_rec.cop_whdtax_amt--,
    --                              --  mtran_whtx_payable
    --                ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
    --               WHERE  mtran_no = v_cr_mtran_no;
    --
    --               UPDATE gin_master_transactions
    --                  SET mtran_comm_payable =
    --                               NVL (mtran_comm_payable, 0)
    --                               - cur_com_dtls_rec.cop_comm_amt,
    --                               mtran_whtx_payable=
    --                               nvl (mtran_whtx_payable, 0)
    --                               - cur_com_dtls_rec.cop_whdtax_amt--,
    --                              --  mtran_whtx_payable
    --                ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
    --               WHERE  mtran_no = cur_com_dtls_rec.cop_dr_mtran_no;
    --
    --               UPDATE gin_master_transactions
    --                  SET mtran_tran_type = cur_com_dtls_rec.cop_type
    --                WHERE mtran_no = v_mtran_no;
    --
    --                      BEGIN
    --                        gis_accounts_utilities.validate_comm_allocations (v_cr_mtran_no, v_mtran_no);
    --                     EXCEPTION
    --                     WHEN OTHERS
    --                     THEN
    --
    --                     raise_error ('Error occured on validation of allocations.');
    --                     END;
    --            --         EXCEPTION
    --            --            WHEN OTHERS
    --            --            THEN
    --            --               raise_error ('ERROR RECONCILLING TRANSACTION ON ACCOUNT..');
    --            END;
    --         END LOOP;
    --
    --         IF NVL (v_cop_cnt, 0) = 1
    --         THEN
    --            BEGIN
    --               SELECT mtran_client_polcy_no
    --                 INTO v_pol_no
    --                 FROM gin_master_transactions
    --                WHERE mtran_no = v_dr_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  NULL;
    --            END;
    --
    --            UPDATE gin_master_transactions
    --               SET mtran_client_polcy_no = v_pol_no
    --             WHERE mtran_no = v_mtran_no;
    --         END IF;
    --
    --         BEGIN
    --            UPDATE gin_comm_pymt_dtls
    --               SET copdt_paid = 'Y',
    --                   copdt_paid_chq_date = v_cqr_chq_dt,
    --                   copdt_paid_chq_no = v_cqr_chq_no
    --             WHERE copdt_code = cur_comm_rec.copdt_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error on Post update of Commission Cheques ...');
    --         END;
    --
    --      END LOOP;
    --
    --
    --       FOR cur_comm_rec IN cur_othercomm
    --      LOOP
    --         v_pol_no := NULL;
    --
    --
    --
    --         v_cop_cnt := 0;
    --         v_dr_mtran_no := NULL;
    --
    --         -- raise_error(v_cqr_ref || ' = '||v_cqr_ref2||'   '||cur_comm_rec.copdt_code);
    --         FOR cur_com_dtls_rec IN cur_othercomm_dtls (cur_comm_rec.copdt_code)
    --         LOOP
    --            --RAISE_ERROR('v_cqr_ref2='||v_cqr_ref2||';v_cqr_ref='||v_cqr_ref||';'|| cur_comm_rec.COP_DR_MTRAN_NO);
    --            v_cop_cnt := NVL (v_cop_cnt, 0) + 1;
    --            v_dr_mtran_no := cur_com_dtls_rec.cop_dr_mtran_no;
    --
    --            BEGIN
    --               UPDATE gin_commission_pymts
    --                  SET cop_authorized_by = v_user_name,
    --                      cop_authorized = 'Y',
    --                      cop_authorize_date = TRUNC (SYSDATE),
    --                      cop_paid = 'Y',
    --                      cop_paid_chq_no = v_cqr_chq_no,
    --                      cop_paid_chq_date = v_cqr_chq_dt
    --                WHERE cop_code = cur_com_dtls_rec.cop_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
    --            END;
    --
    --         END LOOP;
    --
    --         IF NVL (v_cop_cnt, 0) = 1
    --         THEN
    --            BEGIN
    --               SELECT mtran_client_polcy_no
    --                 INTO v_pol_no
    --                 FROM gin_master_transactions
    --                WHERE mtran_no = v_dr_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  NULL;
    --            END;
    --
    --            UPDATE gin_master_transactions
    --               SET mtran_client_polcy_no = v_pol_no
    --             WHERE mtran_no = v_mtran_no;
    --         END IF;
    --
    --         BEGIN
    --            UPDATE gin_comm_pymt_dtls
    --               SET copdt_paid = 'Y',
    --                   copdt_paid_chq_date = v_cqr_chq_dt,
    --                   copdt_paid_chq_no = v_cqr_chq_no
    --             WHERE copdt_code = cur_comm_rec.copdt_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error on Post update of Commission Cheques ...');
    --         END;
    --
    --      END LOOP;
    --
    --
    --         begin
    --         select nvl(mtran_balance,0)
    --         into v_mtran_balance
    --         from gin_master_transactions
    --         where mtran_no=v_mtran_no;
    --         exception
    --         when others
    --         then v_mtran_balance:=0;
    --
    --         end;
    --
    --   -- if nvl(v_mtran_balance,0) != 0 then
    --   -- raise_error ('Commission Record Not Allocated!! ...');
    -- -- end if;
    --
    --
    --       /****INTRODUCED BY OLSON ******/
    --              --NO BAL SHOULD BE LEFT ON THE COPDT RECORD
    --      BEGIN
    --      SELECT MTRAN_NO,MTRAN_COPDT_CODE,MTRAN_BALANCE,MTRAN_NET_AMT,mtran_settlement
    --      INTO v_mtran_nos,v_copdt_code,v_bal,v_net_amt ,v_sett
    --      FROM GIN_MASTER_TRANSACTIONS
    --       WHERE MTRAN_COPDT_CODE=v_cqr_ref
    --       AND MTRAN_REF_NO='COMMISSION'
    --       AND MTRAN_COPDT_CODE IS NOT NULL;
    --       EXCEPTION WHEN OTHERS THEN
    --        v_copdt_code:=NULL;
    --        v_bal :=NULL;
    --        v_net_amt:=NULL;
    --       END;
    --
    --       IF v_copdt_code IS NOT NULL THEN
    --       BEGIN
    --       SELECT  SUM ( DECODE (tmap_drcr, 'C', 1, -1)
    --                       * ABS (NVL (tmap_amount, 0))
    --                      )   INTO v_alloc_amt FROM GIN_TRAN_MAPPING
    --       WHERE TMAP_CHECK_MTRAN_NO=v_mtran_nos;
    --
    --       EXCEPTION WHEN OTHERS THEN
    --       v_alloc_amt:=0;
    --       END;
    --
    --       IF NVL(v_bal,0)!=0 THEN
    --        RAISE_ERROR('ERROR The Allocated amt='||v_sett||' tran mapping amt='||v_alloc_amt||'not fully allocated');
    --       END IF;
    --       END IF;
    --
    --       FOR cur_com_dtls_rec IN cur_commpayable
    --         LOOP
    --            gis_accounts_utilities.update_comm_payable
    --                                            (cur_com_dtls_rec.cop_cr_mtran_no);
    --         END LOOP;
    --   END update_commissions;


    --   PROCEDURE update_commissions (
    --      v_cqr_ref      IN   VARCHAR2,
    --      v_cqr_ref2     IN   VARCHAR2,
    --      v_cqr_chq_no   IN   VARCHAR2,
    --      v_cqr_chq_dt   IN   DATE,
    --      v_user_name    IN   VARCHAR2,
    --      v_cqr_amount   IN   NUMBER
    --   )
    --   IS
    --      CURSOR cur_comm
    --      IS
    --         SELECT copdt_code,                                       --COP_CODE,
    --                           copdt_agn_code, copdt_brn_code, agn_name,
    --                agn_act_code, agn_comm_allowed, agn_con_code, agn_sht_desc,
    --                act_type_id, copdt_cur_code, act_account_type,
    --                copdt_comm_amt comm_amt, copdt_whdtax_amt whtax,
    --                copdt_ovride_comm_amt ovrde_comm,
    --                copdt_ovride_whdtax_amt ovrde_whtax,
    --                  NVL (copdt_comm_amt, 0)
    --                + NVL (copdt_whdtax_amt, 0)
    --                + NVL (copdt_comm_levy_amt, 0) net_comm,
    --                copdt_comm_levy_amt commy_levy
    --           FROM gin_comm_pymt_dtls, tqc_agencies, tqc_account_types
    --          WHERE copdt_agn_code = agn_code
    --            AND agn_act_code = act_code
    --            AND copdt_authorized = 'Y'
    --            AND copdt_code = v_cqr_ref
    --            AND copdt_trans_no = v_cqr_ref2;
    --
    --      CURSOR cur_comm_dtls (vcopdtcode IN NUMBER)
    --      IS
    --         SELECT cop_code, cop_agn_code, cop_brn_code, agn_name, agn_act_code,
    --                agn_comm_allowed, agn_con_code, cop_cr_mtran_no,
    --                cop_dr_mtran_no, ABS (NVL (cop_comm_amt, 0)) cop_comm_amt
    --           --ABS to take care of claw backs
    --         FROM   gin_commission_pymts, tqc_agencies
    --          WHERE cop_agn_code = agn_code AND cop_copdt_code = vcopdtcode;
    --
    --      v_mtran_no      NUMBER;
    --      v_cr_mtran_no   NUMBER;
    --      v_cr_ref_no     VARCHAR2 (35);
    --      v_cr_bal        NUMBER;
    --      v_cr_com        NUMBER;
    --      v_pol_no        VARCHAR2 (35);
    --      v_cop_cnt       NUMBER;
    --      v_dr_mtran_no   NUMBER;
    --   BEGIN
    --      FOR cur_comm_rec IN cur_comm
    --      LOOP
    --         v_pol_no := NULL;
    --
    --         BEGIN
    --            SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                              || gin_mtran_no_seq.NEXTVAL
    --                             )
    --              INTO v_mtran_no
    --              FROM DUAL;
    --
    --            INSERT INTO gin_master_transactions
    --                        (mtran_no, mtran_doc_date, mtran_date,
    --                         mtran_ref_no, mtran_other_ref, mtran_tran_type,
    --                         mtran_dc, mtran_control_acc,
    --                         mtran_client_type,
    --                         mtran_client_code,
    --                         mtran_amount, mtran_balance,
    --                         mtran_authorised, mtran_net_amt, mtran_posting_date,
    --                         mtran_ggt_tran_no, mtran_prp_code,
    --                         mtran_btr_trans_code, mtran_origin, mtran_cur_code,
    --                         mtran_cur_symbol,
    --                         mtran_brn_code,
    --                         mtran_brn_sht_desc,
    --                         mtran_posted_by, mtran_whtx, mtran_client_polcy_no,
    --                         mtran_copdt_code, mtran_comm_levy_amt
    --                        )
    --                 VALUES (v_mtran_no, TRUNC (SYSDATE), TRUNC (SYSDATE),
    --                         'COMMISSION', cur_comm_rec.copdt_code, 'COM',
    --                         'D', cur_comm_rec.agn_sht_desc,
    --                         cur_comm_rec.act_type_id,
    --                         cur_comm_rec.copdt_agn_code,
    --                         --acc sht desc
    --                         ABS (cur_comm_rec.comm_amt), cur_comm_rec.net_comm,
    --                         'Y', cur_comm_rec.net_comm,
    --                                                    ---ABS(cur_comm_rec.COMM_AMT),
    --                                                    TRUNC (SYSDATE),
    --                         NULL, NULL,
    --                         'COM', 'U', cur_comm_rec.copdt_cur_code,
    --                         tqc_interfaces_pkg.currencysymbol
    --                                                  (cur_comm_rec.copdt_cur_code),
    --                         cur_comm_rec.copdt_brn_code,
    --                         fms_interfaces_pkg.brh_name
    --                                                 (cur_comm_rec.copdt_brn_code,
    --                                                  'S'
    --                                                 ),
    --                         v_user_name, cur_comm_rec.whtax, v_pol_no,
    --                         cur_comm_rec.copdt_code, cur_comm_rec.commy_levy
    --                        );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error (   'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
    --                            || v_mtran_no
    --                           );
    --         END;
    --
    --         v_cop_cnt := 0;
    --         v_dr_mtran_no := NULL;
    --
    --         FOR cur_com_dtls_rec IN cur_comm_dtls (cur_comm_rec.copdt_code)
    --         LOOP
    --            --RAISE_ERROR('v_cqr_ref2='||v_cqr_ref2||';v_cqr_ref='||v_cqr_ref||';'|| cur_comm_rec.COP_DR_MTRAN_NO);
    --            v_cop_cnt := NVL (v_cop_cnt, 0) + 1;
    --            v_dr_mtran_no := cur_com_dtls_rec.cop_dr_mtran_no;
    --
    --            BEGIN
    --               UPDATE gin_commission_pymts
    --                  SET cop_authorized_by = v_user_name,
    --                      cop_authorized = 'Y',
    --                      cop_authorize_date = TRUNC (SYSDATE),
    --                      cop_paid = 'Y',
    --                      cop_paid_chq_no = v_cqr_chq_no,
    --                      cop_paid_chq_date = v_cqr_chq_dt
    --                WHERE cop_code = cur_com_dtls_rec.cop_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                         ('ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
    --            END;
    --
    --            BEGIN
    --               SELECT mtran_no, mtran_ref_no, NVL (mtran_balance, 0)
    --                 INTO v_cr_mtran_no, v_cr_ref_no, v_cr_bal
    --                 FROM gin_master_transactions
    --                WHERE mtran_no = cur_com_dtls_rec.cop_cr_mtran_no;
    --
    --               v_cr_com := 0;
    --               gis_accounts_utilities.knock_off_transactions
    --                                               (v_cr_mtran_no,
    --                                                v_cr_ref_no,
    --                                                v_mtran_no,
    --                                                'N',
    --                                                TRUNC (SYSDATE),
    --                                                v_cr_bal,
    --                                                v_cr_com,
    --                                                cur_com_dtls_rec.cop_comm_amt,
    --                                                'N'
    --                                               );
    --
    --               UPDATE gin_master_transactions
    --                  SET mtran_comm_paid =
    --                               NVL (mtran_comm_paid, 0)
    --                               + cur_comm_rec.comm_amt,
    --                      mtran_comm_payable =
    --                            NVL (mtran_comm_payable, 0)
    --                            - cur_comm_rec.comm_amt,
    --                      mtran_whtx_paid =
    --                                  NVL (mtran_whtx_paid, 0)
    --                                  + cur_comm_rec.whtax,
    --                      mtran_whtx_payable =
    --                           NVL (mtran_whtx_paid, 0)
    --                         - cur_comm_rec.whtax
    --             ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
    --                WHERE mtran_no = v_cr_mtran_no;
    --
    --               UPDATE gin_master_transactions
    --                  SET mtran_comm_paid =
    --                               NVL (mtran_comm_paid, 0)
    --                               + cur_comm_rec.comm_amt,
    --             ---cur_comm_rec.net_comm(changed by basil to pick gross comm amt)
    --                      mtran_comm_payable =
    --                            NVL (mtran_comm_payable, 0)
    --                            - cur_comm_rec.comm_amt,
    --                      mtran_whtx_paid =
    --                                  NVL (mtran_whtx_paid, 0)
    --                                  + cur_comm_rec.whtax,
    --                      mtran_whtx_payable =
    --                                  NVL (mtran_whtx_paid, 0)
    --                                  - cur_comm_rec.whtax
    --                WHERE mtran_no = cur_com_dtls_rec.cop_dr_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('ERROR RECONCILLING TRANSACTION ON ACCOUNT..');
    --            END;
    --         END LOOP;
    --
    --         IF NVL (v_cop_cnt, 0) = 1
    --         THEN
    --            BEGIN
    --               SELECT mtran_client_polcy_no
    --                 INTO v_pol_no
    --                 FROM gin_master_transactions
    --                WHERE mtran_no = v_dr_mtran_no;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  NULL;
    --            END;
    --
    --            UPDATE gin_master_transactions
    --               SET mtran_client_polcy_no = v_pol_no
    --             WHERE mtran_no = v_mtran_no;
    --         END IF;
    --
    --         BEGIN
    --            UPDATE gin_comm_pymt_dtls
    --               SET copdt_paid = 'Y',
    --                   copdt_paid_chq_date = v_cqr_chq_dt,
    --                   copdt_paid_chq_no = v_cqr_chq_no
    --             WHERE copdt_code = cur_comm_rec.copdt_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error on Post update of Commission Cheques ...');
    --         END;
    --      END LOOP;
    --   END update_commissions;

    PROCEDURE update_taxes (v_cqr_ref      IN VARCHAR2,
                            v_cqr_ref2     IN VARCHAR2,
                            v_cqr_chq_no   IN VARCHAR2,
                            v_cqr_chq_dt   IN DATE,
                            v_user_name    IN VARCHAR2,
                            v_cqr_amount   IN NUMBER)
    IS
        CURSOR cur_comm IS
            SELECT *
              FROM gin_vat_pymt_dtls
             WHERE     vapdt_authorized = 'Y'
                   AND vapdt_code = v_cqr_ref
                   AND vapdt_trans_no = v_cqr_ref2;

        CURSOR cur_comm_dtls (vvapdt_code IN NUMBER)
        IS
            SELECT vap_code,
                   vap_agn_code,
                   vap_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   vap_cr_mtran_no,
                   vap_dr_mtran_no,
                   vap_vat_amt
              FROM gin_vat_payments, tqc_agencies
             WHERE vap_agn_code = agn_code AND vap_vapdt_code = vvapdt_code;

        v_mtran_no      NUMBER;
        v_cr_mtran_no   NUMBER;
        v_cr_ref_no     VARCHAR2 (35);
        v_cr_bal        NUMBER;
        v_cr_com        NUMBER;
        v_pol_no        VARCHAR2 (35);
        v_cop_cnt       NUMBER;
        v_dr_mtran_no   NUMBER;
    BEGIN
        FOR cur_comm_rec IN cur_comm
        LOOP
            v_cop_cnt := 0;
            v_dr_mtran_no := NULL;

            FOR cur_com_dtls_rec IN cur_comm_dtls (cur_comm_rec.vapdt_code)
            LOOP
                v_cop_cnt := NVL (v_cop_cnt, 0) + 1;
                v_dr_mtran_no := cur_com_dtls_rec.vap_dr_mtran_no;

                BEGIN
                    UPDATE gin_vat_payments
                       SET vap_authorized_by = v_user_name,
                           vap_authorized = 'Y',
                           vap_authorize_date = TRUNC (SYSDATE),
                           vap_paid = 'Y',
                           vap_paid_chq_no = v_cqr_chq_no,
                           vap_paid_chq_date = v_cqr_chq_dt
                     WHERE vap_code = cur_com_dtls_rec.vap_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR UPDATING WITHTX PAYMENT VOUCHER NO. ...');
                END;
            END LOOP;

            BEGIN
                UPDATE gin_vat_pymt_dtls
                   SET vapdt_paid = 'Y',
                       vapdt_paid_chq_date = v_cqr_chq_dt,
                       vapdt_paid_chq_no = v_cqr_chq_no
                 WHERE vapdt_code = cur_comm_rec.vapdt_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error on Post update of WITHTX Cheques ...');
            END;
        END LOOP;

        NULL;
    END update_taxes;

    --   PROCEDURE post_update (
    --      v_cqr_ref      IN   VARCHAR2,
    --      v_cqr_ref2     IN   VARCHAR2,
    --      v_cqr_chq_no   IN   VARCHAR2,
    --      v_cqr_chq_dt   IN   DATE,
    --      v_user_name    IN   VARCHAR2,
    --      v_pmt_type     IN   VARCHAR2,
    --      v_cqr_amount   IN   NUMBER,
    --      v_status       IN   VARCHAR2 DEFAULT NULL,
    --      v_reverse      IN   VARCHAR2 DEFAULT 'N'
    --   )
    --   IS
    --   BEGIN
    --      -- RAISE_ERROR('v_pmt_type'||v_pmt_type);
    --      IF v_pmt_type = 'GIS-CLAIM'
    --      THEN
    --         IF NVL (v_reverse, 'N') = 'N'
    --         THEN
    --            update_claims (v_cqr_ref,
    --                           v_cqr_ref2,
    --                           v_cqr_chq_no,
    --                           v_cqr_chq_dt,
    --                           v_user_name,
    --                           v_cqr_amount
    --                          );
    --         ELSIF NVL (v_reverse, 'N') = 'Y'
    --         THEN
    --            contra_claim_pymnt (v_cqr_ref, v_cqr_ref2, v_user_name);
    --         END IF;
    --      ELSIF v_pmt_type = 'GIS-CLAIMFEE'
    --      THEN
    --         IF NVL (v_reverse, 'N') = 'N'
    --         THEN
    --            update_claimsfee (v_cqr_ref,
    --                              v_cqr_ref2,
    --                              v_cqr_chq_no,
    --                              v_cqr_chq_dt,
    --                              v_user_name,
    --                              v_cqr_amount
    --                             );
    --         ELSIF NVL (v_reverse, 'N') = 'Y'
    --         THEN
    --            contra_claim_pymnt (v_cqr_ref, v_cqr_ref2, v_user_name);
    --         END IF;
    --      ELSIF v_pmt_type = 'GIS-COMM'
    --      THEN
    --         IF NVL (v_reverse, 'N') = 'N'
    --         THEN
    --            update_commissions (v_cqr_ref,
    --                                v_cqr_ref2,
    --                                v_cqr_chq_no,
    --                                v_cqr_chq_dt,
    --                                v_user_name,
    --                                v_cqr_amount
    --                               );
    --         ELSIF NVL (v_reverse, 'N') = 'Y'
    --         THEN
    --            update_undo_commissions (v_cqr_ref,
    --                                     v_cqr_ref2,
    --                                     v_cqr_chq_no,
    --                                     v_cqr_chq_dt,
    --                                     v_user_name,
    --                                     v_cqr_amount
    --                                    );
    --         END IF;
    --      ELSIF v_pmt_type = 'MDP'
    --      THEN
    --         IF NVL (v_reverse, 'N') = 'N'
    --         THEN
    --            update_mdp (v_cqr_ref,
    --                        v_cqr_ref2,
    --                        v_cqr_chq_no,
    --                        v_cqr_chq_dt,
    --                        v_user_name,
    --                        v_cqr_amount
    --                       );
    --         ELSIF NVL (v_reverse, 'N') = 'Y'
    --         THEN
    --            update_canc_mdp (v_cqr_ref,
    --                             v_cqr_ref2,
    --                             v_cqr_chq_no,
    --                             v_cqr_chq_dt,
    --                             v_user_name,
    --                             v_cqr_amount
    --                            );
    --         END IF;
    --      ELSIF v_pmt_type = 'PYMT'
    --      THEN
    --         IF NVL (v_reverse, 'N') = 'N'
    --         THEN
    --            update_refunds (v_cqr_ref,
    --                            v_cqr_ref2,
    --                            v_cqr_chq_no,
    --                            v_cqr_chq_dt,
    --                            v_user_name,
    --                            v_cqr_amount
    --                           );
    --         ELSIF NVL (v_reverse, 'N') = 'Y'
    --         THEN
    --            update_cancl_refunds (v_cqr_ref,
    --                                  v_cqr_ref2,
    --                                  v_cqr_chq_no,
    --                                  v_cqr_chq_dt,
    --                                  v_user_name,
    --                                  v_cqr_amount,
    --                                  v_status
    --                                 );
    --         END IF;
    --      ELSIF v_pmt_type = 'CPYMT'
    --      THEN
    --         IF NVL (v_reverse, 'N') = 'N'
    --         THEN
    --            update_certificates (v_cqr_ref,
    --                                 v_cqr_ref2,
    --                                 v_cqr_chq_no,
    --                                 v_cqr_chq_dt,
    --                                 v_user_name,
    --                                 v_cqr_amount
    --                                );
    --         ELSIF NVL (v_reverse, 'N') = 'Y'
    --         THEN
    --            update_undo_certificates (v_cqr_ref,
    --                                      v_cqr_ref2,
    --                                      v_cqr_chq_no,
    --                                      v_cqr_chq_dt,
    --                                      v_user_name,
    --                                      v_cqr_amount
    --                                     );
    --         END IF;
    --      ELSIF v_pmt_type = 'GIS-WITHTX'
    --      THEN
    --         IF NVL (v_reverse, 'N') = 'N'
    --         THEN
    --            update_whtax (v_cqr_ref,
    --                          v_cqr_ref2,
    --                          v_cqr_chq_no,
    --                          v_cqr_chq_dt,
    --                          v_user_name,
    --                          v_cqr_amount
    --                         );
    --         ELSIF NVL (v_reverse, 'N') = 'Y'
    --         THEN
    --            update_undo_whtax (v_cqr_ref,
    --                               v_cqr_ref2,
    --                               v_cqr_chq_no,
    --                               v_cqr_chq_dt,
    --                               v_user_name,
    --                               v_cqr_amount
    --                              );
    --         END IF;

    --         -- take care of withholding tax payment
    --         update_taxes (v_cqr_ref,
    --                       v_cqr_ref2,
    --                       v_cqr_chq_no,
    --                       v_cqr_chq_dt,
    --                       v_user_name,
    --                       v_cqr_amount
    --                      );
    --      ELSIF v_pmt_type = 'GIS-TXPYMT'
    --      THEN
    --         IF NVL (v_reverse, 'N') = 'N'
    --         THEN
    --            update_tax_remmittance (v_cqr_ref,
    --                                    v_cqr_ref2,
    --                                    v_cqr_chq_no,
    --                                    v_cqr_chq_dt,
    --                                    v_user_name,
    --                                    v_cqr_amount
    --                                   );
    --         ELSIF NVL (v_reverse, 'N') = 'Y'
    --         THEN
    --            update_undo_tax_remmittance (v_cqr_ref,
    --                                         v_cqr_ref2,
    --                                         v_cqr_chq_no,
    --                                         v_cqr_chq_dt,
    --                                         v_user_name,
    --                                         v_cqr_amount
    --                                        );
    --         END IF;
    --      ELSIF v_pmt_type = 'GIS-COIN'
    --      THEN
    --         IF NVL (v_reverse, 'N') = 'N'
    --         THEN
    --            update_coin (v_cqr_ref,
    --                         v_cqr_ref2,
    --                         v_cqr_chq_no,
    --                         v_cqr_chq_dt,
    --                         v_user_name,
    --                         v_cqr_amount
    --                        );
    --         ELSIF NVL (v_reverse, 'N') = 'Y'
    --         THEN
    --            update_cancl_coin (v_cqr_ref,
    --                               v_cqr_ref2,
    --                               v_cqr_chq_no,
    --                               v_cqr_chq_dt,
    --                               v_user_name,
    --                               v_cqr_amount
    --                              );
    --         END IF;
    --      ELSE
    --         NULL;
    --      END IF;
    --   END post_update;

    PROCEDURE post_update (v_cqr_ref      IN VARCHAR2,
                           v_cqr_ref2     IN VARCHAR2,
                           v_cqr_chq_no   IN VARCHAR2,
                           v_cqr_chq_dt   IN DATE,
                           v_user_name    IN VARCHAR2,
                           v_pmt_type     IN VARCHAR2,
                           v_cqr_amount   IN NUMBER,
                           v_status       IN VARCHAR2 DEFAULT NULL,
                           v_reverse      IN VARCHAR2 DEFAULT 'N')
    IS
        v_rein_amt         NUMBER;
        v_error            VARCHAR2 (100);
        r_no               NUMBER;
        v_no_of_reins      NUMBER;
        v_reinst_tab       reinst_claims_tab := reinst_claims_tab ();
        v_xol_prem_code    NUMBER;
        v_xol_prem_cnt     NUMBER;
        v_ggt_no           NUMBER;
        v_gin_master_rec   gin_master_trans_tab := gin_master_trans_tab ();
        v_no               NUMBER := 0;
        v_xpp_code         NUMBER;
        v_counts           NUMBER := 0;
        v_auth             VARCHAR2 (10);
        v_recovered        NUMBER;

        CURSOR auto_reinst IS
            SELECT cxtd_xols_code,
                   cxtd_xas_code,
                   cxtd_xol_code,
                   cxd_ggt_trans_no,
                   NVL (cxd_xol_recovered_amt, 0)     cxd_xol_recovered_amt,
                   cxtd_clm_year
              FROM gin_claim_xol_treaty_details, gin_claim_xol_detals
             WHERE     cxtd_cxd_code = cxd_code
                   AND cxd_claim_no = v_cqr_ref2
                   AND cxtd_xols_code IN
                           (SELECT xols_code
                              FROM gin_xol_treaty_setups
                             ---claims with no burning cost
                             WHERE NVL (xols_loading_adj_factor, 0) = 0)
                   AND cxd_ggt_trans_no IN
                           (SELECT cpv_ggt_trans_no
                              FROM gin_clm_payment_vouchers
                             WHERE     cpv_voucher_no = v_cqr_ref
                                   AND cpv_cmb_claim_no = v_cqr_ref2);

        CURSOR authorised_pr_trans (v_transaction_no IN NUMBER)
        IS
            SELECT mtran_no,
                   mtran_date,
                   mtran_ref_no,
                   mtran_other_ref,
                   mtran_tran_type,
                   mtran_dc,
                   mtran_control_acc,
                   mtran_client_type,
                   mtran_client_code,
                   mtran_amount,
                   mtran_balance,
                   mtran_pol_batch_no,
                   mtran_cmb_claim_no,
                   mtran_narrations,
                   mtran_doc_date,
                   mtran_scl_code,
                   mtran_rei_code,
                   mtran_client_polcy_no,
                   mtran_pol_ren_endos_no,
                   mtran_prp_code,
                   mtran_ggt_tran_no,
                   mtran_authorised,
                   mtran_date_authorized,
                   mtran_authorised_by,
                   mtran_acct_code,
                   mtran_pro_sht_desc,
                   mtran_pro_code,
                   mtran_net_amt,
                   mtran_posting_date,
                   mtran_origin,
                   mtran_btr_trans_code,
                   mtran_cur_code,
                   mtran_cur_symbol,
                   mtran_cur_rate,
                   mtran_tl,
                   mtran_sd,
                   mtran_whtx,
                   mtran_extras,
                   mtran_commission,
                   mtran_settlement,
                   mtran_brn_code,
                   mtran_brn_sht_desc,
                   mtran_posted_by,
                   mtran_prop_holding_co_prp_code,
                   mtran_comm_payable,
                   mtran_comm_paid,
                   mtran_comm_rate,
                   mtran_payee,
                   mtran_alloc_inc_comm,
                   mtran_alloc_mtran_no,
                   mtran_whtx_rate,
                   mtran_other_ref1,
                   mtran_phfund,
                   mtran_rct_code,
                   brn_name,
                   div_name,
                   NULL     clnt_name,
                   agn_name,
                   mtran_vat,
                   mtran_whtx_payable,
                   bbr_branch_name,
                   mtran_pyment_mode,
                   mtran_payee_account,
                   mtran_payee_swift_code,
                   NULL
              FROM gin_master_transactions,
                   tqc_branches,
                   tqc_divisions,
                   tqc_agencies,
                   tqc_bank_branches
             WHERE     mtran_authorised = 'R'
                   AND mtran_tran_type IN ('MDP', 'PR', 'FR')
                   AND mtran_client_type = 'R'
                   AND mtran_amount != 0
                   AND mtran_brn_code = brn_code(+)
                   AND mtran_payee_bbr_code = bbr_code(+)
                   AND mtran_div_code = div_code(+)
                   AND mtran_agn_code = agn_code(+)
                   AND mtran_ggt_tran_no = v_transaction_no;
    BEGIN
        --RAISE_ERROR('v_pmt_type='||v_pmt_type);

        IF v_pmt_type = 'GIS-CLAIM'
        THEN
            IF NVL (v_reverse, 'N') = 'N'
            THEN
                update_claims (v_cqr_ref,
                               v_cqr_ref2,
                               v_cqr_chq_no,
                               v_cqr_chq_dt,
                               v_user_name,
                               v_cqr_amount);

                BEGIN
                    IF NVL (
                           GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR (
                               'AUTOREINSTATEMENT_PARAM'),
                           'N') =
                       'Y'
                    THEN
                        ---AUTOMATE REINSTATEMENT ON CLAIM PAYMENT

                        v_no := 1;

                        FOR I IN auto_reinst
                        LOOP
                            ---load data in the tab

                            r_no := 1;                      --NVL(r_no,0) + 1;
                            v_reinst_tab := reinst_claims_tab ();
                            v_reinst_tab.EXTEND (1);
                            v_reinst_tab (r_no) :=
                                reinst_claims_obj (v_cqr_ref2);

                            ---COMPUTE REINSTATEMENT
                            BEGIN
                                GIN_XOL_PKG.computereinstatement (
                                    I.cxtd_xols_code,
                                    'P',
                                    v_reinst_tab,
                                    v_rein_amt,
                                    v_error,
                                    v_recovered);
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    RAISE_ERROR (
                                        'Unable to autocompute Reinstatement');
                            END;

                            ---AUTHORISE REINSTATEMENT
                            BEGIN
                                gin_xol_pkg.authorise_xol_treaty_setups (
                                    v_user_name,
                                    v_error,
                                    I.cxtd_xas_code,
                                    'R',
                                    I.cxtd_xols_code,
                                    'PR',
                                    v_reinst_tab,
                                    v_no_of_reins,
                                    v_rein_amt,
                                    I.cxd_xol_recovered_amt,
                                    v_xol_prem_code);
                            --     RAISE_ERROR('ERROR HERE');
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    RAISE_ERROR (
                                           'Unable to autoAuthorise Reinstatement'
                                        || SQLERRM);
                            END;

                            ----check validity of xol prem
                            SELECT COUNT (*)
                              INTO v_xol_prem_cnt
                              FROM gin_xol_premiums
                             WHERE xp_code = v_xol_prem_code;

                            IF v_xol_prem_cnt > 0
                            THEN
                                BEGIN
                                    --CREATE A REINSTATEMENT PAYMENT BASED ON ONE OFF FREQUENCY
                                    GIN_XOL_PKG.gin_xol_insert_prem_payments (
                                        'A',
                                        NULL,
                                        v_xol_prem_code,
                                        NULL,
                                        v_user_name,
                                        NULL,
                                        'O',
                                        I.cxtd_clm_year);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        RAISE_ERROR (
                                               'ERROR CREATING REINSTATEMENT PAYMENT'
                                            || SQLERRM);
                                --      RETURN;
                                END;

                                ---PROCESS REINSTATEMENT PAYMENT
                                BEGIN
                                    SELECT xpp_code
                                      INTO v_xpp_code
                                      FROM gin_xol_premium_payments
                                     WHERE xpp_xp_code = v_xol_prem_code;
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        raise_error (
                                               'error getting ONE OFF PAYMENT '
                                            || 'v_xpp_code='
                                            || v_xpp_code);
                                END;


                                BEGIN
                                    GIN_XOL_PKG.process_mdp_payment (
                                        v_xpp_code,
                                        v_user_name,
                                        I.cxtd_xols_code);
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        RAISE_ERROR (
                                               'ERROR PROCESSING REINSTATEMENT ONE OFF PAYMENT'
                                            || SQLERRM);
                                END;

                                ---MAKE READY REINSTATEMENT PAYMENT TO THE ACCOUNTS SCREEN
                                BEGIN
                                    GIN_INTERFACES_PKG.process_mdp_payment (
                                        v_xpp_code,
                                        v_user_name,
                                        'PR');
                                EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                        RAISE_ERROR (
                                               'ERROR MAKING READY REINSTATEMENT ONE OFF PAYMENT'
                                            || SQLERRM (SQLCODE));
                                END;

                                ---GET TRANSACTION NUMBER
                                SELECT MTRAN_GGT_TRAN_NO
                                  INTO v_ggt_no
                                  FROM GIN_MASTER_TRANSACTIONS
                                 WHERE MTRAN_REF_NO IN
                                           (SELECT XPPD_DRCR_NO
                                              FROM GIN_XOL_PREM_PAYMENT_DTLS
                                             WHERE XPPD_CODE IN
                                                       (SELECT MAX (
                                                                   XPPD_CODE)
                                                          FROM GIN_XOL_PREM_PAYMENT_DTLS
                                                         WHERE     XPPD_XPP_CODE =
                                                                   v_xpp_code
                                                               AND XPPD_AUTHORIZED =
                                                                   'R'));

                                ---IN THE AUTHORIZE ACCOUNTS SCREEN
                                ---AUTHORIZE TRANSACTIONS
                                --     RAISE_ERROR('v_ggt_no='||v_ggt_no);
                                --
                                v_no := 0;

                                FOR X IN authorised_pr_trans (v_ggt_no)
                                LOOP
                                    v_gin_master_rec :=
                                        gin_master_trans_tab ();
                                    --  v_no := v_no + 1;
                                    v_gin_master_rec.EXTEND (1);
                                    v_gin_master_rec (1) :=
                                        gin_master_trans_obj (
                                            X.mtran_no,
                                            X.MTRAN_DATE,
                                            X.MTRAN_REF_NO,
                                            X.MTRAN_OTHER_REF,
                                            X.MTRAN_TRAN_TYPE,
                                            X.MTRAN_DC,
                                            X.MTRAN_CONTROL_ACC,
                                            X.MTRAN_CLIENT_TYPE,
                                            X.MTRAN_CLIENT_CODE,
                                            X.MTRAN_AMOUNT,
                                            X.MTRAN_BALANCE,
                                            X.MTRAN_POL_BATCH_NO,
                                            X.MTRAN_CMB_CLAIM_NO,
                                            X.MTRAN_NARRATIONS,
                                            X.MTRAN_DOC_DATE,
                                            X.MTRAN_SCL_CODE,
                                            X.MTRAN_REI_CODE,
                                            X.MTRAN_CLIENT_POLCY_NO,
                                            X.MTRAN_POL_REN_ENDOS_NO,
                                            X.MTRAN_PRP_CODE,
                                            X.MTRAN_GGT_TRAN_NO,
                                            X.MTRAN_AUTHORISED,
                                            X.MTRAN_DATE_AUTHORIZED,
                                            X.MTRAN_AUTHORISED_BY,
                                            X.MTRAN_ACCT_CODE,
                                            X.MTRAN_PRO_SHT_DESC,
                                            X.MTRAN_PRO_CODE,
                                            X.MTRAN_NET_AMT,
                                            X.MTRAN_POSTING_DATE,
                                            X.MTRAN_ORIGIN,
                                            X.MTRAN_BTR_TRANS_CODE,
                                            X.MTRAN_CUR_CODE,
                                            X.MTRAN_CUR_SYMBOL,
                                            X.MTRAN_CUR_RATE,
                                            X.MTRAN_TL,
                                            X.MTRAN_SD,
                                            X.MTRAN_WHTX,
                                            X.MTRAN_EXTRAS,
                                            X.MTRAN_COMMISSION,
                                            X.MTRAN_SETTLEMENT,
                                            X.MTRAN_BRN_CODE,
                                            X.MTRAN_BRN_SHT_DESC,
                                            X.MTRAN_POSTED_BY,
                                            X.MTRAN_PROP_HOLDING_CO_PRP_CODE,
                                            X.MTRAN_COMM_PAYABLE,
                                            X.MTRAN_COMM_PAID,
                                            X.MTRAN_COMM_RATE,
                                            X.MTRAN_PAYEE,
                                            X.MTRAN_ALLOC_INC_COMM,
                                            X.MTRAN_ALLOC_MTRAN_NO,
                                            X.MTRAN_WHTX_RATE,
                                            X.MTRAN_OTHER_REF1,
                                            X.MTRAN_PHFUND,
                                            X.MTRAN_RCT_CODE,
                                            'Y',
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL);

                                    BEGIN
                                        GIN_ACCOUNTS_PKG.authorize_gin_master_trans (
                                            v_user_name,
                                            v_gin_master_rec,
                                            v_error,
                                            NULL);
                                    --     EXCEPTION WHEN OTHERS THEN
                                    --      RAISE_ERROR('ERROR POSTING REINSTATEMENT ONE OFF PAYMENT'|| SQLERRM);
                                    END;
                                END LOOP;
                            --select distinct MTRAN_BTR_TRANS_CODE into v_auth  from gin_master_transactions where   mtran_ggt_tran_no =v_ggt_no;

                            -- raise_error('v_rein_amt='||v_rein_amt||'v_error='||v_error||'v_xol_prem_code='||v_xol_prem_code||'v_xpp_code='||v_xpp_code||'v_ggt_no='||v_ggt_no||'CHECK OUTSIDE'||'v_counts='||v_counts||'v_auth='||v_auth);
                            ELSE
                                RAISE_ERROR (
                                    'Error creating Reinstatement Details');
                            END IF;
                        --RAISE_ERROR('v_pmt_type'||v_pmt_type||'v_cqr_ref='||v_cqr_ref||'v_cqr_ref2='||v_cqr_ref2||'v_no_of_reins='||v_no_of_reins||'v_rein_amt='||v_rein_amt);
                        END LOOP;
                    END IF;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NULL;
                END;
            ELSIF NVL (v_reverse, 'N') = 'Y'
            THEN
                contra_claim_pymnt (v_cqr_ref, v_cqr_ref2, v_user_name);
            END IF;
        ELSIF v_pmt_type = 'GIS-CLAIMFEE'
        THEN
            IF NVL (v_reverse, 'N') = 'N'
            THEN
                update_claimsfee (v_cqr_ref,
                                  v_cqr_ref2,
                                  v_cqr_chq_no,
                                  v_cqr_chq_dt,
                                  v_user_name,
                                  v_cqr_amount);
            ELSIF NVL (v_reverse, 'N') = 'Y'
            THEN
                contra_claim_pymnt (v_cqr_ref, v_cqr_ref2, v_user_name);
            END IF;
        ELSIF v_pmt_type = 'GIS-COMM'
        THEN
            IF NVL (v_reverse, 'N') = 'N'
            THEN
                update_commissions (v_cqr_ref,
                                    v_cqr_ref2,
                                    v_cqr_chq_no,
                                    v_cqr_chq_dt,
                                    v_user_name,
                                    v_cqr_amount);
            ELSIF NVL (v_reverse, 'N') = 'Y'
            THEN
                update_undo_commissions (v_cqr_ref,
                                         v_cqr_ref2,
                                         v_cqr_chq_no,
                                         v_cqr_chq_dt,
                                         v_user_name,
                                         v_cqr_amount);
            END IF;
        ELSIF v_pmt_type IN ('MDP', 'PR', 'FR')
        THEN
            IF NVL (v_reverse, 'N') = 'N'
            THEN
                update_mdp (v_cqr_ref,
                            v_cqr_ref2,
                            v_cqr_chq_no,
                            v_cqr_chq_dt,
                            v_user_name,
                            v_cqr_amount);
            ELSIF NVL (v_reverse, 'N') = 'Y'
            THEN
                update_canc_mdp (v_cqr_ref,
                                 v_cqr_ref2,
                                 v_cqr_chq_no,
                                 v_cqr_chq_dt,
                                 v_user_name,
                                 v_cqr_amount);
            END IF;
        ELSIF v_pmt_type = 'PYMT'
        THEN
            IF NVL (v_reverse, 'N') = 'N'
            THEN
                update_refunds (v_cqr_ref,
                                v_cqr_ref2,
                                v_cqr_chq_no,
                                v_cqr_chq_dt,
                                v_user_name,
                                v_cqr_amount);
            ELSIF NVL (v_reverse, 'N') = 'Y'
            THEN
                update_cancl_refunds (v_cqr_ref,
                                      v_cqr_ref2,
                                      v_cqr_chq_no,
                                      v_cqr_chq_dt,
                                      v_user_name,
                                      v_cqr_amount,
                                      v_status);
            END IF;
        ELSIF v_pmt_type = 'CPYMT'
        THEN
            IF NVL (v_reverse, 'N') = 'N'
            THEN
                update_certificates (v_cqr_ref,
                                     v_cqr_ref2,
                                     v_cqr_chq_no,
                                     v_cqr_chq_dt,
                                     v_user_name,
                                     v_cqr_amount);
            ELSIF NVL (v_reverse, 'N') = 'Y'
            THEN
                update_undo_certificates (v_cqr_ref,
                                          v_cqr_ref2,
                                          v_cqr_chq_no,
                                          v_cqr_chq_dt,
                                          v_user_name,
                                          v_cqr_amount);
            END IF;
        ELSIF v_pmt_type = 'GIS-WITHTX'
        THEN
            IF NVL (v_reverse, 'N') = 'N'
            THEN
                update_whtax (v_cqr_ref,
                              v_cqr_ref2,
                              v_cqr_chq_no,
                              v_cqr_chq_dt,
                              v_user_name,
                              v_cqr_amount);
            ELSIF NVL (v_reverse, 'N') = 'Y'
            THEN
                update_undo_whtax (v_cqr_ref,
                                   v_cqr_ref2,
                                   v_cqr_chq_no,
                                   v_cqr_chq_dt,
                                   v_user_name,
                                   v_cqr_amount);
            END IF;

            -- take care of withholding tax payment
            update_taxes (v_cqr_ref,
                          v_cqr_ref2,
                          v_cqr_chq_no,
                          v_cqr_chq_dt,
                          v_user_name,
                          v_cqr_amount);
        ELSIF v_pmt_type = 'GIS-TXPYMT'
        THEN
            IF NVL (v_reverse, 'N') = 'N'
            THEN
                update_tax_remmittance (v_cqr_ref,
                                        v_cqr_ref2,
                                        v_cqr_chq_no,
                                        v_cqr_chq_dt,
                                        v_user_name,
                                        v_cqr_amount);
            ELSIF NVL (v_reverse, 'N') = 'Y'
            THEN
                update_undo_tax_remmittance (v_cqr_ref,
                                             v_cqr_ref2,
                                             v_cqr_chq_no,
                                             v_cqr_chq_dt,
                                             v_user_name,
                                             v_cqr_amount);
            END IF;
        ELSIF v_pmt_type = 'GIS-COIN'
        THEN
            IF NVL (v_reverse, 'N') = 'N'
            THEN
                update_coin (v_cqr_ref,
                             v_cqr_ref2,
                             v_cqr_chq_no,
                             v_cqr_chq_dt,
                             v_user_name,
                             v_cqr_amount);
            ELSIF NVL (v_reverse, 'N') = 'Y'
            THEN
                update_cancl_coin (v_cqr_ref,
                                   v_cqr_ref2,
                                   v_cqr_chq_no,
                                   v_cqr_chq_dt,
                                   v_user_name,
                                   v_cqr_amount);
            END IF;
        ELSE
            NULL;
        END IF;
    END post_update;


    PROCEDURE treaty_auth (v_as_code   IN     NUMBER,
                           v_user      IN     VARCHAR,
                           v_error        OUT VARCHAR2)
    IS
        --v_user varchar2(30):=PKG_GLOBAL_VARS.GET_PVARCHAR2('PKG_GLOBAL_VARS.pvg_username');
        v_trans_type    VARCHAR2 (5);
        v_msg           VARCHAR2 (30);
        v_diff          NUMBER;
        v_dc            VARCHAR2 (1);
        v_authorize     BOOLEAN;
        v_cur_code      NUMBER;
        v_current_rec   NUMBER;
        v_as_status     VARCHAR2 (5);
    BEGIN
        BEGIN
            SELECT as_status
              INTO v_as_status
              FROM gin_arrangement_setups
             WHERE as_code = v_as_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_error := 'ERROR FETCHING STATUS...';
        END;

        IF NVL (v_as_status, 'N') = 'N'
        THEN
            v_trans_type := 'TRTA';
            v_msg := 'Authorise ';
        ELSE
            v_trans_type := 'TRTU';
            v_msg := 'UN Authorise ';
        END IF;

        BEGIN
            SELECT org_cur_code
              INTO v_cur_code
              FROM tqc_organizations
             WHERE org_code = 2;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_error := 'Error selecting base currency..';
        END;

        BEGIN
            v_diff := 0;
            v_dc := 'D';
            v_authorize :=
                tqc_interfaces_pkg.check_authorization_roles (v_user,
                                                              37,
                                                              v_trans_type,
                                                              ABS (v_diff),
                                                              v_dc,
                                                              -2000);
        EXCEPTION
            WHEN OTHERS
            THEN
                v_error := 'Unable to retrieve authorization limits.';
        END;

        IF v_authorize = FALSE
        THEN
            v_error :=
                   v_user
                || ' Does not have Sufficient rights to '
                || v_msg
                || ' Treaty setups.. . Cannot continue.';
        ELSE
            IF v_trans_type = 'TRTA'
            THEN
                BEGIN
                    UPDATE gin_arrangement_setups
                       SET as_statua_by = v_user,
                           as_status_date = SYSDATE,
                           as_status = 'A'
                     WHERE as_code = v_as_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        v_error := 'Error authorising the treaty setup..';
                END;
            ELSIF v_trans_type = 'TRTU'
            THEN
                BEGIN
                    UPDATE gin_arrangement_setups
                       SET as_statua_by = v_user,
                           as_status_date = SYSDATE,
                           as_status = 'N'
                     WHERE as_code = v_as_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        v_error := 'Error authorising the treaty setup..';
                END;
            END IF;
        END IF;
    END;

    PROCEDURE process_survey_pymt (v_pofe_no      VARCHAR2,
                                   v_trans_no     NUMBER,
                                   v_user_name    VARCHAR2,
                                   v_pay_method   VARCHAR2 DEFAULT 'CHQ',
                                   v_sur_val      VARCHAR2 DEFAULT 'SUR')
    IS
    BEGIN
        IF v_pay_method = 'CHQ'
        THEN
            BEGIN
                gin_interfaces_pkg.process_survey_cheque_payment (
                    v_pofe_no,
                    v_trans_no,
                    v_user_name,
                    v_pay_method,
                    v_sur_val);
            --         EXCEPTION
            --            WHEN OTHERS
            --            THEN
            --               raise_application_error (-20001,
            --                                        'ERROR MAKING CHEQUE PAYMENTS...'
            --                                       );
            END;
        ELSIF v_pay_method IN ('EFT', 'RTGS')
        THEN
            BEGIN
                gin_interfaces_pkg.process_survey_eftrtgs_payment (
                    v_pofe_no,
                    v_trans_no,
                    v_user_name,
                    v_pay_method,
                    v_sur_val);
            --        EXCEPTION
            --            WHEN OTHERS
            --            THEN
            --               raise_application_error (-20001,'ERROR MAKING EFT/RTGS PAYMENTS...');
            END;
        ELSIF v_pay_method = 'MOB'
        THEN
            BEGIN
                gin_interfaces_pkg.process_survey_mobile_payment (
                    v_pofe_no,
                    v_trans_no,
                    v_user_name,
                    v_pay_method,
                    v_sur_val);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                        'ERROR MAKING MOBILE PAYMENTS...');
            END;
        ELSIF v_pay_method = 'CR'
        THEN
            BEGIN
                gin_interfaces_pkg.process_survey_credit_payment (
                    v_pofe_no,
                    v_trans_no,
                    v_user_name,
                    v_pay_method,
                    v_sur_val);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                        'ERROR MAKING CREDIT PAYMENTS...');
            END;
        ELSIF v_pay_method = 'JE'
        THEN
            BEGIN
                gin_interfaces_pkg.process_survey_journal_payment (
                    v_pofe_no,
                    v_trans_no,
                    v_user_name,
                    v_pay_method,
                    v_sur_val);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                        'ERROR MAKING JOURNAL PAYMENTS...');
            END;
        END IF;
    END;

    PROCEDURE process_svy_pymt25042016 (
        v_pofe_no      VARCHAR2,
        v_trans_no     NUMBER,
        v_user_name    VARCHAR2,
        v_pay_method   VARCHAR2 DEFAULT 'CHQ',
        v_sur_val      VARCHAR2 DEFAULT 'SUR')
    IS
        v_pmsf_code                 NUMBER;

        CURSOR master_trans IS
            SELECT *
              FROM gin_master_pol_misc_fees
             WHERE mpofe_code = v_pofe_no AND mpofe_ggt_trans_no = v_trans_no;

        CURSOR c_survey (v_mpofe_no NUMBER)
        IS
              SELECT pmsf_vatable,
                     pmsf_pofe_code,
                     pmsf_scl_code,
                     SUM (pmsf_amount)                 pmsf_amount,
                     SUM (pmsf_payable)                pmsf_payable,
                     SUM (pmsf_vat_amt)                pmsf_vat_amt,
                     SUM (pmsf_whtx_amt)               pmsf_whtx_amt,
                     SUM (pmsf_vattowithhold_amnt)     pmsf_vattowithhold_amnt,
                     pofe_cur_code,
                     pofe_payee,
                     pofe_pol_policy_no,
                     pofe_cor_code,
                     pofe_authorised_by,
                     pofe_authorised_date,
                     pofe_authorized,
                     pofe_date
                FROM gin_pol_misc_fees, gin_pol_misc_scl_fees
               WHERE     pofe_code = pmsf_pofe_code
                     AND pofe_mpofe_code = v_mpofe_no
            GROUP BY pmsf_vatable,
                     pmsf_pofe_code,
                     pofe_cur_code,
                     pofe_payee,
                     pofe_pol_policy_no,
                     pofe_cor_code,
                     pofe_authorised_by,
                     pofe_authorised_date,
                     pofe_authorized,
                     pmsf_scl_code,
                     gin_pol_misc_fees.pofe_date;

        v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
        v_cqr_brh_code              NUMBER;
        v_user_code                 NUMBER;
        v_cqr_source_auth_by        NUMBER;
        v_cqr_source_auth_dt        DATE;
        exc_user_error              EXCEPTION;
        v_brh_name                  VARCHAR2 (100);
        v_bct_code                  NUMBER;
        v_bct_brh_code              NUMBER;
        v_crt_acc_number            VARCHAR2 (20);
        v_crt_acc_org_code          NUMBER;
        v_trnt_gl_code              VARCHAR2 (20);
        v_trnt_contra_gl_code       VARCHAR2 (20);
        v_trnt_code                 VARCHAR2 (20);
        v_acc_type                  VARCHAR2 (20);
        v_cqr_source                NUMBER;
        v_rec_count                 NUMBER := 0;
        v_org_code                  NUMBER;
        v_exch_rate                 NUMBER;
        v_rnd                       NUMBER;
        v_bcur_rnd                  NUMBER;
        v_cur_code                  NUMBER;
        v_cur_symbol                VARCHAR2 (10);
        v_paymnt_brh_code           NUMBER;
        v_trt_man_amt               NUMBER;
        v_trt_qs_amt                NUMBER;
        v_trt_fst_amt               NUMBER;
        v_trt_sec_amt               NUMBER;
        v_trt_fac_amt               NUMBER;
        v_lvl                       VARCHAR2 (15);
        rev_type                    VARCHAR2 (15);
        v_desc                      VARCHAR2 (50);
        v_gross_amt                 NUMBER;
        v_vattowithhold_app_param   VARCHAR2 (1) := 'N';
    BEGIN
        BEGIN
            SELECT param_value
              INTO v_vattowithhold_app_param
              FROM gin_parameters
             WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_vattowithhold_app_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error getting VATTOWITHHOLD_APPLICABLE parameters..');
        END;

        FOR a IN master_trans
        LOOP
            v_cur_code := a.mpofe_cur_code;
            v_cur_symbol := a.mpofe_cur_symbol;
            v_user_code :=
                fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

            IF v_user_code IS NULL
            THEN
                RAISE exc_user_error;
            END IF;

            v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
            v_rec_count := 0;

            FOR i IN c_survey (v_pofe_no)
            LOOP
                v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
                v_org_code := 2;
                v_paymnt_brh_code :=
                    fms_interfaces_pkg.head_office (v_org_code);
                v_brh_name :=
                    fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
                fms_interfaces_pkg.trans_bct (v_sur_val,
                                              v_cqr_source,
                                              v_paymnt_brh_code,
                                              v_cur_code,
                                              v_bct_code,
                                              v_bct_brh_code,
                                              v_pay_method);
                v_gross_amt := NVL (i.pmsf_amount, 0);

                IF NVL (i.pmsf_vatable, 'N') = 'N'
                THEN
                    IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
                       (  ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd))
                    THEN
                        raise_application_error (
                            -20001,
                               '1 THE NET CHEQUE AMOUNT '
                            || NVL (i.pmsf_payable, 0)
                            || ' PLUS VAT '
                            || NVL (i.pmsf_vat_amt, 0)
                            || ' AND WHTTAX '
                            || NVL (i.pmsf_whtx_amt, 0)
                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                            || v_gross_amt);
                    END IF;
                ELSE
                    IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
                       (  ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_vattowithhold_amnt, 0),
                                 v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd))
                    THEN
                        raise_application_error (
                            -20001,
                               '2 THE NET CHEQUE AMOUNT '
                            || NVL (i.pmsf_payable, 0)
                            || ' PLUS VAT TO HOLD '
                            || NVL (i.pmsf_vattowithhold_amnt, 0)
                            || ' AND WHTTAX '
                            || NVL (i.pmsf_whtx_amt, 0)
                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                            || v_gross_amt);
                    END IF;
                END IF;

                IF NVL (i.pmsf_amount, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'MF',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               ' GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_gross_amt, 0), v_bcur_rnd),
                        'VALUATION/SURVEY',
                        --v_desc,                                      --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
                THEN
                    IF NVL (i.pmsf_vat_amt, 0) != 0
                    THEN
                        gin_interfaces_pkg.get_gl_acct_code (
                            'WTHVAT',
                            i.pmsf_scl_code,
                            'U',
                            NULL,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );

                        IF fms_interfaces_pkg.valid_trns_acc (
                               v_trnt_gl_code,
                               v_org_code,
                               v_paymnt_brh_code) =
                           FALSE
                        THEN
                            raise_application_error (
                                -20001,
                                   'WTHVAT GL A/C - '
                                || v_trnt_gl_code
                                || ' UNDEFINED IN '
                                || v_brh_name
                                || ' CODE '
                                || v_trnt_code
                                || ' CLS - '
                                || 100);
                        END IF;

                        v_rec_count := v_rec_count + 1;
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd),
                            'VALUATION/SURVEY WTHVAT',
                            --narrative,
                            v_trnt_gl_code,
                            -- crt_acc_number
                            v_org_code,
                            --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'C',                                    --v_dr_cr,
                            v_chq_dtls);
                    END IF;
                END IF;

                IF NVL (i.pmsf_vattowithhold_amnt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'VATTOWTH',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,                 ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'VATTOWTH GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.pmsf_vattowithhold_amnt, 0),
                               v_bcur_rnd),
                        'VALUATION/SURVEY VATTOWTH',
                        --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                IF NVL (i.pmsf_whtx_amt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'WTHTPY',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,                  --F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'WTHTPY GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd),
                        'VALUATION',                              --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;
            END LOOP;

            BEGIN
                fms_cheques_pkg.create_reqn (
                    v_cqr_source,
                    a.mpofe_code,                                        --ref
                    v_trans_no,
                    --i.pofe_pol_policy_no,                                  -- ref2,
                    TRUNC (SYSDATE),
                    NVL (a.mpofe_remarks,
                         'VALUATION/SURVEY PYMT  FOR ' || a.mpofe_code),
                    -- i.pofe_pol_policy_no,  --'GIS Claim',             --narrative V
                    v_paymnt_brh_code,
                    v_bct_brh_code,
                    ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd), --cqr_amount
                    a.mpofe_payee,
                    a.mpofe_cur_code,
                    v_bct_code,
                    fms_interfaces_pkg.get_usercode (
                        UPPER (a.mpofe_authorised_by)),
                    a.mpofe_authorised_date,
                    v_user_code,                             --v_cqr_req_by  ,
                    'GIS-VAL',                                  -- pmt_type  ,
                    v_chq_dtls);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'CREATE_REQN :- '
                        || v_paymnt_brh_code
                        || ' $ '
                        || SQLERRM (SQLCODE));
            END;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'SURVEY REQN NOT CREATED FOR TRANSACTION # ' || v_trans_no);
        END IF;
    --   EXCEPTION
    --      WHEN exc_user_error
    --      THEN
    --         raise_application_error (-20001,
    --                                     'THE SPECIFIED USERNAME ( '
    --                                  || v_user_name
    --                                  || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.'
    --                                 );
    --      WHEN OTHERS
    --      THEN
    --         raise_application_error (-20001,
    --                                     'ERROR CREATING REQUISITION 11:- '
    --                                  || SQLERRM (SQLCODE)
    --                                 );
    END;

    PROCEDURE process_survey_pymt1608 (v_pofe_no      VARCHAR2,
                                       v_trans_no     NUMBER,
                                       v_user_name    VARCHAR2,
                                       v_pay_method   VARCHAR2 DEFAULT 'CHQ',
                                       v_sur_val      VARCHAR2 DEFAULT 'SUR')
    IS
        v_pmsf_code             NUMBER;

        CURSOR c_survey IS
              SELECT gin_pol_misc_scl_fees.pmsf_pofe_code,
                     pmsf_scl_code,
                     SUM (gin_pol_misc_scl_fees.pmsf_amount)
                         pmsf_amount,
                     SUM (gin_pol_misc_scl_fees.pmsf_payable)
                         pmsf_payable,
                     SUM (gin_pol_misc_scl_fees.pmsf_vat_amt)
                         pmsf_vat_amt,
                     SUM (gin_pol_misc_scl_fees.pmsf_whtx_amt)
                         pmsf_whtx_amt,
                     --GIN_POL_MISC_SCL_FEES.PMSF_IPU_CODE,
                     --GIN_MASTER_TRANSACTIONS.MTRAN_TRAN_TYPE,
                     --GIN_MASTER_TRANSACTIONS.MTRAN_BRN_CODE,
                     --GIN_MASTER_TRANSACTIONS.MTRAN_REF_NO,
                     gin_pol_misc_fees.pofe_cur_code,
                     gin_pol_misc_fees.pofe_payee,
                     gin_pol_misc_fees.pofe_pol_policy_no,
                     gin_pol_misc_fees.pofe_cor_code,
                     gin_pol_misc_fees.pofe_authorised_by,
                     gin_pol_misc_fees.pofe_authorised_date,
                     gin_pol_misc_fees.pofe_authorized,
                     gin_pol_misc_fees.pofe_date
                FROM                                --GIN_MASTER_TRANSACTIONS,
                     gin_pol_misc_fees, gin_pol_misc_scl_fees
               WHERE                    -- MTRAN_GGT_TRAN_NO=POFE_GGT_TRANS_NO
                         --AND
                         pofe_code = pmsf_pofe_code
                     AND pofe_ggt_trans_no = v_trans_no
                     AND pofe_code = v_pofe_no
            GROUP BY gin_pol_misc_scl_fees.pmsf_pofe_code,
                     -- GIN_MASTER_TRANSACTIONS.MTRAN_TRAN_TYPE,
                     --GIN_MASTER_TRANSACTIONS.MTRAN_BRN_CODE,
                     --GIN_MASTER_TRANSACTIONS.MTRAN_REF_NO,
                     gin_pol_misc_fees.pofe_cur_code,
                     gin_pol_misc_fees.pofe_payee,
                     gin_pol_misc_fees.pofe_pol_policy_no,
                     gin_pol_misc_fees.pofe_cor_code,
                     gin_pol_misc_fees.pofe_authorised_by,
                     gin_pol_misc_fees.pofe_authorised_date,
                     gin_pol_misc_fees.pofe_authorized,
                     pmsf_scl_code,
                     gin_pol_misc_fees.pofe_date;

        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_cur_symbol            VARCHAR2 (10);
        v_paymnt_brh_code       NUMBER;
        v_trt_man_amt           NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (15);
        rev_type                VARCHAR2 (15);
        v_desc                  VARCHAR2 (50);
        v_gross_amt             NUMBER;
    BEGIN
        SELECT pofe_cur_code, pofe_cur_symbol
          INTO v_cur_code, v_cur_symbol
          FROM gin_pol_misc_fees
         WHERE pofe_ggt_trans_no = v_trans_no;

        -- GIN_GIS_TRANSACTIONS
        --RAISE_ERROR('v_clmrg_claim_no='||v_clmrg_claim_no||';'||cmb_brn_code);
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
        v_rec_count := 0;

        FOR i IN c_survey
        LOOP
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            --RAISE_APPLICATION_ERROR (-20001,'STAGE 1'||v_clmrg_claim_no||' TRANS '|| v_trans_no);
            v_org_code := 2;  --Fms_Interfaces_Pkg.get_org (i.mtran_brn_code);
            --RAISE_APPLICATION_ERROR (-20001,'STAGE 1'||v_clmrg_claim_no||' TRANS '|| v_trans_no);
            v_paymnt_brh_code := fms_interfaces_pkg.head_office (v_org_code);
            ---MAYNARD CHANGED THIS FOR TESTING. SHOULD BE RETURNED!!!!!!---FMS_INTERFACES_PKG.head_office(v_org_code );
            -- RAISE_APPLICATION_ERROR (-20001,'STAGE 1'||v_clmrg_claim_no||' TRANS '|| v_trans_no);
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            --RAISE_ERROR('v_paymnt_brh_code=,'||v_paymnt_brh_code||'v_bct_code='||v_bct_code||';'||v_bct_brh_code||';Org='||v_org_code||';branch='||v_brh_name);
            --********** FOR  CLAIM COMMENT BY M-SHOT
            fms_interfaces_pkg.trans_bct (v_sur_val,
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);
            --v_cheq_amt :=
            v_gross_amt := NVL (i.pmsf_amount, 0) /*+NVL (i.pmsf_vat_amt, 0)*/
                                                 ;

            --  RAISE_ERROR(v_gross_amt);
            IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
               (  NVL (i.pmsf_vat_amt, 0)
                + NVL (i.pmsf_whtx_amt, 0)
                + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd))
            THEN
                raise_application_error (
                    -20001,
                       'THE NET CHEQUE AMOUNT '
                    || NVL (i.pmsf_payable, 0)
                    || ' PLUS VAT '
                    || NVL (i.pmsf_vat_amt, 0)
                    || ' AND WHTTAX '
                    || NVL (i.pmsf_whtx_amt, 0)
                    || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..');
            END IF;

            /*IF i.mtran_tran_type = 'MF'
            THEN
               rev_type := 'MF';
            ELSE
               rev_type := 'UF';
            END IF;*/
            IF NVL (i.pmsf_amount, 0) != 0
            THEN
                get_gl_code ('MF',                ---'CP', --CLAIM PAID NORMAL
                             i.pmsf_scl_code,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                --RAISE_ERROR('GL CODE'||v_trnt_gl_code||'  ORG CODE'||v_org_code||' BRANCH CODE'||v_paymnt_brh_code);
                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           ' GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || 100);
                END IF;

                v_rec_count := v_rec_count + 1;
                --SELECT DECODE(i.mtran_tran_type,'VF','VALUATION','SURVEY') INTO v_desc FROM DUAL;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_gross_amt, 0), v_bcur_rnd),
                    'VALUATION/SURVEY',
                    --v_desc,                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,
                    --i.cmb_brn_code,          --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            /*FMS_CHEQUES_PKG.APPEND_CHQ_TRANS(
                                    2,
                                    i.cpv_amount ,
                                    'Claim' ,       --narrative,
                                    v_trnt_contra_gl_codE,    -- crt_acc_number
                                    v_org_code ,     --crt_acc_org_code ,
                                    i.cmb_brn_code,          --v_brh_code,
                                    'D',--v_dr_cr,
                                    v_chq_dtls
                                    ) ;*/
            END IF;

            IF NVL (i.pmsf_vat_amt, 0) != 0
            THEN
                get_gl_code ('WTHVAT',                     --CLAIM PAID NORMAL
                             i.pmsf_scl_code,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'WTHVAT GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || 100);
                END IF;

                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd),
                    v_desc,                                       --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,
                    --i.cmb_brn_code,          --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
            /*FMS_CHEQUES_PKG.APPEND_CHQ_TRANS(
                                    2,
                                    i.cpv_amount ,
                                    'Claim' ,       --narrative,
                                    v_trnt_contra_gl_codE,    -- crt_acc_number
                                    v_org_code ,     --crt_acc_org_code ,
                                    i.cmb_brn_code,          --v_brh_code,
                                    'D',--v_dr_cr,
                                    v_chq_dtls
                                    ) ;*/
            END IF;

            IF NVL (i.pmsf_whtx_amt, 0) != 0
            THEN
                get_gl_code ('WTHTPY',                     --CLAIM PAID NORMAL
                             i.pmsf_scl_code,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'WTHTPY GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || 100);
                END IF;

                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd),
                    'VALUATION',                                  --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
            /*FMS_CHEQUES_PKG.APPEND_CHQ_TRANS(
                                    2,
                                    i.cpv_amount ,
                                    'Claim' ,       --narrative,
                                    v_trnt_contra_gl_codE,    -- crt_acc_number
                                    v_org_code ,     --crt_acc_org_code ,
                                    i.cmb_brn_code,          --v_brh_code,
                                    'D',--v_dr_cr,
                                    v_chq_dtls
                                    ) ;*/
            END IF;

            --************************************************************
            BEGIN
                fms_cheques_pkg.create_reqn (
                    v_cqr_source,
                    i.pmsf_pofe_code,                                    --ref
                    v_trans_no,
                    --i.pofe_pol_policy_no,                                  -- ref2,
                    TRUNC (SYSDATE),
                    v_trans_no,
                    -- i.pofe_pol_policy_no,  --'GIS Claim',             --narrative V
                    v_paymnt_brh_code,
                    v_bct_brh_code,
                    ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd),  --cqr_amount
                    i.pofe_payee,
                    i.pofe_cur_code,
                    v_bct_code,
                    fms_interfaces_pkg.get_usercode (
                        UPPER (i.pofe_authorised_by)),
                    i.pofe_authorised_date,
                    v_user_code,                             --v_cqr_req_by  ,
                    'GIS-VAL',                                  -- pmt_type  ,
                    v_chq_dtls);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'CREATE_REQN :- '
                        || v_paymnt_brh_code
                        || ' $ '
                        || SQLERRM (SQLCODE));
            END;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'SURVEY REQN NOT CREATED FOR TRANSACTION # ' || v_trans_no);
        END IF;
    --RAISE_APPLICATION_ERROR (-20001, ' &^&*#$^&*#'  );
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR CREATING REQUISITION 11:- ' || SQLERRM (SQLCODE));
    END;

    FUNCTION mobile_no (naccno NUMBER, ntype NUMBER)
        RETURN VARCHAR2
    IS
        vretval   VARCHAR2 (20);
    BEGIN
        IF ((ntype IS NULL) OR (naccno IS NULL))
        THEN
            RETURN NULL;
        END IF;

        IF ntype = 1
        THEN                                               -- SERVICE PROVIDER
            SELECT spr_mobile_no
              INTO vretval
              FROM tqc_service_providers
             WHERE spr_code = naccno;
        ELSIF ntype = 2
        THEN                                                  -- SCHEME HOLDER
            SELECT clnt_sms_tel
              INTO vretval
              FROM tqc_clients
             WHERE clnt_code = naccno;
        ELSIF ntype = 3
        THEN                                              --  PRINCIPAL MEMBER
            SELECT cld_mobile_no
              INTO vretval
              FROM gin_claimants
             WHERE cld_code = naccno;
        ELSIF ntype = 4
        THEN
            SELECT cbp_mobile_no
              INTO vretval
              FROM gin_clm_business_persons
             WHERE cbp_code = naccno;
        ELSIF ntype = 5
        THEN
            SELECT agn_sms_tel
              INTO vretval
              FROM tqc_agencies
             WHERE agn_code = naccno;
        ELSE
            raise_application_error (-20001,
                                     'UNDEFINED PAYEE TYPE || ' || ntype);
        END IF;

        RETURN vretval;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN NULL;
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'GETTING BNK BRH ' || naccno || ' TYPE ' || ntype);
    END;

    FUNCTION payee_id (naccno NUMBER, ntype NUMBER)
        RETURN VARCHAR2
    IS
        vretval   VARCHAR2 (20);
    BEGIN
        IF ((ntype IS NULL) OR (naccno IS NULL))
        THEN
            RETURN NULL;
        END IF;

        IF ntype = 1
        THEN                                               -- SERVICE PROVIDER
            SELECT spr_pin
              INTO vretval
              FROM tqc_service_providers
             WHERE spr_code = naccno;
        ELSIF ntype = 2
        THEN                                                  -- SCHEME HOLDER
            SELECT clnt_id_reg_no
              INTO vretval
              FROM tqc_clients
             WHERE clnt_code = naccno;
        ELSIF ntype = 3
        THEN                                              --  PRINCIPAL MEMBER
            SELECT cld_id_no
              INTO vretval
              FROM gin_claimants
             WHERE cld_code = naccno;
        ELSIF ntype = 4
        THEN
            SELECT cbp_id_no
              INTO vretval
              FROM gin_clm_business_persons
             WHERE cbp_code = naccno;
        ELSIF ntype = 5
        THEN
            SELECT agn_id_no
              INTO vretval
              FROM tqc_agencies
             WHERE agn_code = naccno;
        ELSE
            raise_application_error (-20001,
                                     'UNDEFINED PAYEE TYPE || ' || ntype);
        END IF;

        RETURN vretval;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN NULL;
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'GETTING BNK BRH ' || naccno || ' TYPE ' || ntype);
    END;

    FUNCTION mobile_service_provider (v_mobile_no IN VARCHAR2)
        RETURN NUMBER
    IS
        v_cou_code        NUMBER;
        v_provider_code   NUMBER;
    BEGIN
        BEGIN
            SELECT org_cou_code
              INTO v_cou_code
              FROM tqc_organizations
             WHERE org_code = 2;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error determining organization country...');
        END;

        BEGIN                     -- i don't think this is the right way to go
            SELECT mpt_code
              INTO v_provider_code
              FROM tqc_mob_pymnt_types_prefixes, tqc_mobile_pymnt_types
             WHERE     mptp_mpt_code = mpt_code
                   AND mpt_cou_code = v_cou_code
                   AND mptp_mob_no_prefix =
                       '0' || SUBSTR (LPAD (v_mobile_no, 7), 5);
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        --RAISE_ERROR('Service provider for '||v_mobile_no||' not found...');
        END;

        RETURN v_provider_code;
    END mobile_service_provider;

    PROCEDURE post_fms_jvs (v_jv_ref_no         IN     VARCHAR2,
                            v_jv_other_ref_no   IN     VARCHAR2,
                            v_jv_date           IN     DATE,
                            v_jv_acc            IN     VARCHAR2,
                            v_jv_acc_type       IN     VARCHAR2,
                            v_jv_cur_code       IN     NUMBER,
                            v_jv_brn_code       IN     NUMBER,
                            v_jv_narrations     IN     VARCHAR2,
                            v_user              IN     VARCHAR2,
                            v_jv_amt            IN     NUMBER,
                            v_mtran_no             OUT NUMBER)
    IS
        v_ggt_trans_no      NUMBER;
        v_rnd               NUMBER;
        v_bcur_rnd          NUMBER;
        v_jv_cur_rate       NUMBER;
        v_jv_acc_code       NUMBER;
        v_jv_div_code       NUMBER;
        v_jv_brn_sht_desc   VARCHAR2 (30);
        v_jv_cur_symbol     VARCHAR2 (30);
        v_jv_tran_type      VARCHAR2 (30);
        v_org_type          VARCHAR2 (30)
                                := tqc_parameters_pkg.get_org_type (37);
    BEGIN
        IF v_jv_acc_type = 'D' AND v_org_type != 'INS'
        THEN
            BEGIN
                SELECT clna_clnt_code, clna_div_code
                  INTO v_jv_acc_code, v_jv_div_code
                  FROM tqc_client_accounts
                 WHERE clna_sht_desc = v_jv_acc;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'Error fetching the Direct account details..'
                        || v_jv_acc);
            END;
        ELSIF v_jv_acc_type = 'I' AND v_org_type != 'INS'
        THEN
            BEGIN
                SELECT aga_agn_code, aga_div_code
                  INTO v_jv_acc_code, v_jv_div_code
                  FROM tqc_agency_accounts
                 WHERE aga_sht_desc = v_jv_acc;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'Error fetching the Insurance account details..'
                        || v_jv_acc);
            END;
        ELSIF v_org_type = 'INS'
        THEN
            IF v_jv_acc_type = 'D'
            THEN
                BEGIN
                    SELECT clnt_code
                      INTO v_jv_acc_code
                      FROM tqc_clients
                     WHERE clnt_sht_desc = v_jv_acc;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error fetching the Direct account details..'
                            || v_jv_acc);
                END;
            ELSE
                BEGIN
                    SELECT agn_code
                      INTO v_jv_acc_code
                      FROM tqc_agencies
                     WHERE agn_sht_desc = v_jv_acc;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error fetching the Insurance account details..'
                            || v_jv_acc);
                END;
            END IF;
        ELSE
            raise_error (
                   'Account type '
                || v_jv_acc_type
                || ' not taken care of yet....');
        END IF;

        IF v_jv_brn_code IS NOT NULL
        THEN
            BEGIN
                SELECT brn_sht_desc
                  INTO v_jv_brn_sht_desc
                  FROM tqc_branches
                 WHERE brn_code = v_jv_brn_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error fetching branch...');
            END;
        ELSE
            raise_error ('Error:- Transaction branch not provided...');
        END IF;

        SELECT DECODE (SIGN (v_jv_amt), 1, btr_debit_code, btr_credit_code)
          INTO v_jv_tran_type
          FROM gin_business_transactions
         WHERE btr_trans_code = 'JV';

        SELECT TO_NUMBER (
                   TO_CHAR (SYSDATE, 'YYYY') || gin_mtran_no_seq.NEXTVAL)
          INTO v_mtran_no
          FROM DUAL;

        SELECT ggt_trans_no_seq.NEXTVAL INTO v_ggt_trans_no FROM DUAL;

        INSERT INTO gin_gis_transactions (ggt_trans_no,
                                          ggt_btr_trans_code,
                                          ggt_done_by,
                                          ggt_done_date,
                                          ggt_uw_clm_tran,
                                          ggt_trans_date,
                                          ggt_effective_date)
             VALUES (v_ggt_trans_no,
                     'JV',
                     v_user,
                     TRUNC (SYSDATE),
                     'A',
                     v_jv_date,                             --TRUNC (SYSDATE),
                     v_jv_date                              ---TRUNC (SYSDATE)
                              );

        IF v_jv_cur_code IS NOT NULL
        THEN
            v_jv_cur_rate :=
                get_currexch_rate (v_jv_cur_code, v_rnd, v_bcur_rnd);

            BEGIN
                SELECT cur_symbol
                  INTO v_jv_cur_symbol
                  FROM tqc_currencies
                 WHERE cur_code = v_jv_cur_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error fetching currency symbol...');
            END;
        ELSE
            raise_error ('Error:- Transaction currency is not provided...');
        END IF;

        INSERT INTO gin_master_transactions (mtran_no,
                                             mtran_doc_date,
                                             mtran_date,
                                             mtran_ref_no,
                                             mtran_other_ref,
                                             mtran_tran_type,
                                             mtran_dc,
                                             mtran_control_acc,
                                             mtran_client_type,
                                             mtran_client_code,
                                             mtran_amount,
                                             mtran_balance,
                                             mtran_authorised,
                                             mtran_net_amt,
                                             mtran_posting_date,
                                             mtran_ggt_tran_no,
                                             mtran_prp_code,
                                             mtran_btr_trans_code,
                                             mtran_origin,
                                             mtran_cur_code,
                                             mtran_cur_symbol,
                                             mtran_brn_code,
                                             mtran_brn_sht_desc,
                                             mtran_posted_by,
                                             mtran_cur_rate,
                                             mtran_client_polcy_no,
                                             mtran_div_code,
                                             mtran_payee,
                                             mtran_narrations)
             VALUES (v_mtran_no,
                     v_jv_date,
                     v_jv_date,                             --TRUNC (SYSDATE),
                     v_jv_ref_no,
                     v_jv_other_ref_no,
                     v_jv_tran_type,
                     DECODE (SIGN (v_jv_amt), 1, 'D', 'C'),
                     v_jv_acc,
                     v_jv_acc_type,
                     v_jv_acc_code,
                     v_jv_amt,
                     v_jv_amt,
                     'Y',
                     v_jv_amt,
                     TRUNC (SYSDATE),
                     v_ggt_trans_no,
                     NULL,
                     'JV',
                     'A',
                     v_jv_cur_code,
                     v_jv_cur_symbol,
                     v_jv_brn_code,
                     v_jv_brn_sht_desc,
                     v_user,
                     v_jv_cur_rate,
                     NULL,
                     v_jv_div_code,
                     NULL,
                     v_jv_narrations);
    END;


    PROCEDURE post_xol_premadj (
        v_trans_no       NUMBER,
        v_user_name      VARCHAR2,
        v_auth_date   IN DATE DEFAULT TRUNC (SYSDATE))
    IS
        CURSOR cur_part_amnts IS
              SELECT xols_code,
                     xolp_agnt_agent_code,
                     xols_xol_code,
                     xolp_rate,
                     xolp_taxable,
                     xpa_adjustment,
                     xpa_retained_prem,
                     xpa_actual_prem,
                     xpa_period_prem,
                     xpa_rate,
                     xpa_scl_code,
                     xpa_comp_adj_rate,
                     xolp_rein_taxable,
                     xolp_gl_account,
                     xolp_agnt_sht_desc,
                     xta_type,
                     xas_uwyr,
                     xas_xta_code,
                     xols_min_deposit,
                     xols_cur_code,
                     xols_layer,
                     xols_accounts
                FROM gin_xol_prem_adjustments,
                     gin_xol_treaty_arrangements,
                     gin_xol_participants,
                     gin_xol_arrangement_setups,
                     gin_xol_treaty_setups,
                     gin_gis_transactions
               WHERE     xpa_xols_code = xols_code
                     AND xols_xas_code = xas_code
                     AND xas_xta_code = xta_code
                     AND xolp_xols_code = xols_code
                     AND xpa_xas_code = xas_code
                     AND xpa_xas_code = ggt_xas_code
                     AND xpa_ggt_trans_no = ggt_trans_no
                     AND NVL (ggt_trans_authorised, 'N') IN ('N', 'R')
                     AND ggt_trans_no = v_trans_no
            ORDER BY xpa_code;

        CURSOR gl_acct_code (v_level VARCHAR2, vtrantype VARCHAR2)
        IS
            SELECT DISTINCT
                   trnt_code               trnt_code,
                   trnt_gl_code            trnt_gl_code,
                   trnt_contra_gl_code     trnt_contra_gl_code
              FROM gin_transaction_types
             WHERE trnt_application_lvl = v_level AND trnt_type = vtrantype;

        vgl_trans               fms_vouchers_pkg.tgl_rec_type;
        v_user_code             NUMBER;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_adj_amt               NUMBER;
        v_part_adj_amt          NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (15);
        rev_type                VARCHAR2 (15);
        v_control_acc           VARCHAR2 (30);
        v_client_type           VARCHAR2 (5);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (25);
        vgl_code                NUMBER;
        v_drcr                  VARCHAR2 (1);
    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        vgl_trans.DELETE;
        v_rec_count := -1;
        v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');

        --  vgl_trans .DELETE;
        FOR cur_part_amnts_rec IN cur_part_amnts
        LOOP
            --tqc_organizations
            v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
            v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);

            IF SIGN (cur_part_amnts_rec.xpa_adjustment) = 1
            THEN
                v_adj_amt := NVL (cur_part_amnts_rec.xpa_adjustment, 0) * -1;
                v_drcr := 'C';
            ELSE
                v_drcr := 'D';
            END IF;

            v_exch_rate :=
                get_currexch_rate (NVL (cur_part_amnts_rec.xols_cur_code, 1),
                                   v_rnd,
                                   v_bcur_rnd);
            v_cur_code := cur_part_amnts_rec.xols_cur_code;

            OPEN gl_acct_code ('FO', 'XOL');

            FETCH gl_acct_code
                INTO v_trnt_code, v_trnt_gl_code, v_trnt_contra_gl_code;

            CLOSE gl_acct_code;

            --RAISE_ERROR('acc control='||v_trnt_gl_code||':contra ==;'||v_trnt_contra_gl_code);
            IF cur_part_amnts_rec.xolp_gl_account IS NULL
            THEN
                raise_error ('Xol recovery account is not defined..');
            ELSE
                v_trnt_contra_gl_code := cur_part_amnts_rec.xolp_gl_account;
            END IF;

            IF SIGN (v_adj_amt) = -1
            THEN
                v_part_adj_amt :=
                    ROUND (
                          NVL (v_adj_amt, 0)
                        * (NVL (cur_part_amnts_rec.xolp_rate, 0) / 100));
            END IF;

            v_rec_count := v_rec_count + 2;

            IF NVL (v_part_adj_amt, 0) <> 0
            THEN
                BEGIN
                    INSERT INTO gin_master_transactions (
                                    mtran_no,
                                    mtran_date,
                                    mtran_ref_no,
                                    mtran_other_ref,
                                    mtran_tran_type,
                                    mtran_dc,
                                    mtran_control_acc,
                                    mtran_client_type,
                                    mtran_client_code,
                                    mtran_amount,
                                    mtran_balance,
                                    mtran_pol_batch_no,
                                    mtran_scl_code,
                                    mtran_narrations,
                                    mtran_rei_code,
                                    mtran_client_polcy_no,
                                    mtran_pol_ren_endos_no,
                                    mtran_acct_code,
                                    mtran_ggt_tran_no,
                                    mtran_net_amt,
                                    mtran_posting_date,
                                    mtran_cmb_claim_no,
                                    mtran_prp_code,
                                    mtran_authorised,
                                    mtran_date_authorized,
                                    mtran_authorised_by,
                                    mtran_pro_sht_desc,
                                    mtran_pro_code,
                                    mtran_origin,
                                    mtran_cur_code,
                                    mtran_cur_symbol,
                                    mtran_cur_rate)
                             VALUES (
                                    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                                 || gin_mtran_no_seq.NEXTVAL,
                                 TRUNC (SYSDATE),
                                 'XOL' || v_trans_no,
                                 NULL,
                                 'XOL',
                                 v_drcr,
                                 cur_part_amnts_rec.xolp_agnt_sht_desc,
                                 'RI',
                                 cur_part_amnts_rec.xolp_agnt_agent_code,
                                 DECODE (v_drcr,
                                         'C', v_part_adj_amt,
                                         -v_part_adj_amt),
                                 DECODE (v_drcr,
                                         'C', v_part_adj_amt,
                                         -v_part_adj_amt),
                                 NULL,
                                 cur_part_amnts_rec.xpa_scl_code,
                                 DECODE (
                                     v_drcr,
                                     'C', 'Xol Premium Adjustment credit',
                                     'D', 'Xol Premium Adjustment debit'),
                                 cur_part_amnts_rec.xols_xol_code,
                                 NULL,
                                 NULL,
                                 'XOL TREATY',
                                 v_trans_no,
                                 DECODE (v_drcr,
                                         'C', v_part_adj_amt,
                                         -v_part_adj_amt),
                                 TRUNC (SYSDATE),
                                 NULL,
                                 NULL,
                                 'Y',
                                 TRUNC (SYSDATE),
                                 v_user_name,
                                 NULL,
                                 NULL,
                                 'R',
                                 v_cur_code,
                                 NULL,
                                 v_exch_rate);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('ERROR UPDATING XOL STATEMENTS...');
                END;

                BEGIN
                    INSERT INTO gin_gl_transactions (gltran_no,
                                                     gltran_auth_date,
                                                     gltran_dc,
                                                     gltran_trnt_code,
                                                     gltran_amount,
                                                     gltran_amount_bcur,
                                                     gltran_gltran_acc,
                                                     gltran_contra_acc,
                                                     gltran_usrname,
                                                     gltran_tran_no,
                                                     gltran_pol_policy_no,
                                                     gltran_u_c_trans,
                                                     gltran_claim_no,
                                                     gltran_cur_code,
                                                     gltran_cur_symbol,
                                                     gltran_cur_rate,
                                                     gltran_scl_code,
                                                     gltran_pro_code,
                                                     gltran_btr_trans_code,
                                                     gltran_level,
                                                     gltran_brn_code)
                             VALUES (
                                    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                                 || gin_gltran_no_seq.NEXTVAL,
                                 TRUNC (SYSDATE),
                                 v_drcr,
                                 'XOL',
                                 v_part_adj_amt,
                                 ROUND (v_part_adj_amt / v_exch_rate),
                                 v_trnt_gl_code,
                                 v_trnt_contra_gl_code,
                                 v_user_name,
                                 v_trans_no,
                                 NULL,
                                 'C',
                                 NULL,
                                 v_cur_code,
                                 NULL,
                                 v_exch_rate,
                                 cur_part_amnts_rec.xpa_scl_code,
                                 cur_part_amnts_rec.xpa_scl_code,
                                 NULL,
                                 'XOL',
                                 v_paymnt_brh_code);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error updating gl transactions....');
                END;

                BEGIN
                    fms_vouchers_pkg.append_gl_trans (v_rec_count,
                                                      'CLAIM XOL PREM ADJ ', --v_narrative
                                                      ABS (v_part_adj_amt), --v_amount
                                                      v_drcr,         --v_drcr
                                                      v_trnt_gl_code, --v_account1
                                                      v_trnt_contra_gl_code, --i.GLTRAN_CONTRA_ACC,--v_account2
                                                      v_paymnt_brh_code, --v_branch
                                                      vgl_trans);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20026,
                               'ERROR POSTING GL TRANS FOR '
                            || v_trnt_code
                            || ':- '
                            || SQLERRM (SQLCODE));
                END;
            END IF;
        END LOOP;

        IF v_rec_count = -1
        THEN
            raise_application_error (-20001,
                                     'No transaction to authorize...');
        END IF;

        --RAISE_ERROR('STOP='||vgl_code||';'||v_paymnt_brh_code||';'||v_auth_date||';'||v_user_code );
        vgl_code :=
            fms_vouchers_pkg.update_vgl ('GIS XOL PREM ADJ', --V_BTC_DESCRIPTION
                                         'JV',          --V_BTC_TYPE varchar2,
                                         v_paymnt_brh_code,
                                         v_auth_date,
                                         'GIS XOL XOL PREM ADJ VOUCHER',
                                         'GIS',              --V_REF varchar2,
                                         v_user_code,    --V_RAISED_BY number,
                                         v_cur_code,         --i.cmb_cur_code,
                                         vgl_trans);
        --RAISE_ERROR('STOP='||vgl_code||';'||v_user_code);
        fms_interfaces_pkg.post_je (vgl_code, v_user_code);
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                   'ERROR CREATING REQUISITION :- '
                || SQLERRM (SQLCODE)
                || ' '
                || v_cur_code);
    END post_xol_premadj;

    PROCEDURE process_trvl_pymt (v_trans_no     NUMBER,
                                 v_user_name    VARCHAR2,
                                 v_pay_method   VARCHAR2 DEFAULT 'CHQ',
                                 v_desc         VARCHAR2)
    IS
        v_pmsf_code             NUMBER;

        CURSOR c_travel IS
            SELECT *
              FROM gin_trvl_monthly_rem
             WHERE rem_trans_no = v_trans_no;

        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER := 2;
        v_bcur_rnd              NUMBER := 2;
        v_cur_code              NUMBER;
        v_cur_symbol            VARCHAR2 (20);
        v_paymnt_brh_code       NUMBER;
        v_trt_man_amt           NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (10);
        rev_type                VARCHAR2 (10);
        v_agn_name              tqc_agencies.agn_name%TYPE;
    BEGIN
        -- GIN_GIS_TRANSACTIONS
        --RAISE_ERROR('v_clmrg_claim_no='||v_clmrg_claim_no||';'||cmb_brn_code);
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_rec_count := 0;

        FOR i IN c_travel
        LOOP
            SELECT agn_name
              INTO v_agn_name
              FROM tqc_agencies
             WHERE agn_code = i.rem_agn_code;

            v_exch_rate := i.rem_cur_rate;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_paymnt_brh_code :=
                tqc_interfaces_pkg.branchcode (
                    2,
                    fms_settings_pkg.head_office_new (2));
            v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);
            --RAISE_ERROR('v_org_code='||v_org_code||';'||v_user_name);
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            fms_interfaces_pkg.trans_bct ('TRV_REM',
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          i.rem_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);
            rev_type := 'TRV_REM';

            IF NVL (i.rem_amount_paid, 0) != 0
            THEN
                get_gl_code (rev_type,            ---'CP', --CLAIM PAID NORMAL
                             NULL,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                --RAISE_ERROR('V_TRNT_GL_CODE = '||v_trnt_gl_code);
                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'TRV_REM GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code);
                END IF;

                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (i.rem_amount_paid, 0), v_bcur_rnd),
                    'TRAVEL PYMTS',                               --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,
                    --i.cmb_brn_code,          --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            IF NVL (i.rem_vat, 0) != 0
            THEN
                get_gl_code ('WTHVAT',                     --CLAIM PAID NORMAL
                             NULL,
                             'U',                     --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'WTHVAT GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || NULL);
                END IF;

                v_rec_count := v_rec_count + 1;

                BEGIN
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.rem_vat, 0), v_bcur_rnd),
                        'TRAVEL PYMTS',                           --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('POSTING AMOUNT...');
                END;
            END IF;

            --************************************************************
            BEGIN
                fms_cheques_pkg.create_reqn (
                    v_cqr_source,
                    i.rem_trans_no,                                      --ref
                    i.rem_trans_no,                                   -- ref2,
                    TRUNC (SYSDATE),
                    'TRAVEL PYMTS',   --'GIS Claim',             --narrative V
                    v_paymnt_brh_code,
                    v_bct_brh_code,
                    ROUND (NVL (i.rem_amount_paid, 0), v_bcur_rnd), --cqr_amount
                    v_agn_name,
                    i.rem_cur_code,
                    v_bct_code,
                    fms_interfaces_pkg.get_usercode (
                        UPPER (i.rem_processed_by)),
                    TRUNC (SYSDATE),
                    v_user_code,                             --v_cqr_req_by  ,
                    'TRAVEL-PYMT',                              -- pmt_type  ,
                    v_chq_dtls);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'CREATE_REQN.. :- '
                        || v_paymnt_brh_code
                        || ' $ '
                        || SQLERRM (SQLCODE));
            END;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'TRAVEL REQN NOT CREATED FOR TRANSACTION # ' || v_trans_no);
        END IF;
    --RAISE_APPLICATION_ERROR (-20001, ' &^&*#$^&*#'  );
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR CREATING REQUISITION 11:- ' || SQLERRM (SQLCODE));
    END;

    PROCEDURE process_pool_pymt (v_prprd_code   NUMBER,
                                 v_user_name    VARCHAR2,
                                 v_pay_method   VARCHAR2 DEFAULT 'CHQ')
    IS
        v_pmsf_code             NUMBER;

        CURSOR ripool IS
            SELECT *
              FROM gin_pol_rein_pool_risk_details,
                   gin_pool_treaty_arrangements
             WHERE     prprd_pta_code = pta_code
                   AND prprd_code = v_prprd_code
                   AND NVL (prprd_pool_net_amt, 0) > 0;

        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER := 2;
        v_bcur_rnd              NUMBER := 2;
        v_cur_code              NUMBER;
        v_cur_symbol            VARCHAR2 (20);
        v_paymnt_brh_code       NUMBER;
        v_trt_amt               NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (10);
        rev_type                VARCHAR2 (10);
        v_agn_name              tqc_agencies.agn_name%TYPE;
        v_client_code           NUMBER;
        v_vchr_desc             VARCHAR2 (50);
    BEGIN
        -- GIN_GIS_TRANSACTIONS
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_rec_count := 0;

        FOR i IN ripool
        LOOP
            -- GIN_UW_AUTHOR_PROC.post_pool_ri_gl ( I.PRPRD_POL_BATCH_NO,

            --I.PRPRD_GGT_TRAN_NO,
            -- v_user_name);
            IF NVL (i.prprd_authorized, 'N') = 'Y'
            THEN
                raise_error (
                       'POOL REMITTANCE FOR RISK '
                    || i.prprd_property_id
                    || ' ENDORSMENT NO. '
                    || i.prprd_pol_ren_endos_no
                    || ' HAS ALREADY BEEN AUTHORIZED...');
            END IF;

            BEGIN
                SELECT pol_agnt_agent_code, pol_drcr_no
                  INTO v_client_code, v_vchr_desc
                  FROM gin_policies
                 WHERE pol_batch_no = i.prprd_pol_batch_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error fetching policy details...');
            END;

            -- Gin_Interfaces_Pkg.Create_GL_Voucher(I.PRPRD_GGT_TRAN_NO,v_vchr_desc,v_user_name,v_client_code);
            v_agn_name := i.pta_desc;
            v_exch_rate := i.prprd_risk_exch_rate;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_paymnt_brh_code :=
                tqc_interfaces_pkg.branchcode (
                    2,
                    fms_settings_pkg.head_office_new (2));
            v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);
            --RAISE_ERROR('v_org_code='||v_org_code||';'||v_user_name);
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            fms_interfaces_pkg.trans_bct ('RIPOOL_REM',
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          i.prprd_risk_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);

            --rev_type := 'POOLRP';
            IF NVL (i.prprd_rein_pool_amt, 0) != 0
            THEN
                get_gl_code ('POOLRP',            ---'CP', --CLAIM PAID NORMAL
                             i.prprd_scl_code,
                             'POOL',                  --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'RIPOOL_REM GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code);
                END IF;

                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (i.prprd_rein_pool_amt, 0), v_bcur_rnd),
                    'REINSURANCE POOL PYMTS',
                    --narrative,
                    v_trnt_gl_code,                          -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,
                    --i.cmb_brn_code,          --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            IF NVL (i.prprd_rein_pool_vat_amt, 0) != 0
            THEN
                get_gl_code ('POOLVAT',                    --CLAIM PAID NORMAL
                             i.prprd_scl_code,
                             'POOL',                  --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'POOLVAT GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || NULL);
                END IF;

                v_rec_count := v_rec_count + 1;

                BEGIN
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.prprd_rein_pool_vat_amt, 0),
                               v_bcur_rnd),
                        'REINSURANCE POOL PYMTS',                 --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('POSTING AMOUNT...');
                END;
            END IF;

            IF NVL (i.prprd_rein_pool_comm_amt, 0) != 0
            THEN
                get_gl_code ('POOLRC',                     --CLAIM PAID NORMAL
                             i.prprd_scl_code,
                             'POOL',                  --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'POOLRC GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || NULL);
                END IF;

                v_rec_count := v_rec_count + 1;

                BEGIN
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.prprd_rein_pool_comm_amt, 0),
                               v_bcur_rnd),
                        'REINSURANCE POOL PYMTS',                 --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('POSTING AMOUNT...');
                END;
            END IF;

            IF NVL (i.prprd_os_claim_amt, 0) != 0
            THEN
                get_gl_code ('POOLRC',                     --CLAIM PAID NORMAL
                             i.prprd_scl_code,
                             'POOL',                  --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'POOLRC GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || NULL);
                END IF;

                v_rec_count := v_rec_count + 1;

                BEGIN
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.prprd_os_claim_amt, 0), v_bcur_rnd),
                        'REINSURANCE POOL PYMTS',                 --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('POSTING AMOUNT...');
                END;
            END IF;

            IF NVL (i.prprd_paid_claim_amt, 0) != 0
            THEN
                get_gl_code ('POOLRC',                     --CLAIM PAID NORMAL
                             i.prprd_scl_code,
                             'POOL',                  --v_app_lvl IN VARCHAR2,
                             v_trnt_code,                             -- OUT ,
                             v_trnt_gl_code,                           --OUT ,
                             v_trnt_contra_gl_code                       --OUT
                                                  );

                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'POOLRC GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code
                        || ' CLS - '
                        || NULL);
                END IF;

                v_rec_count := v_rec_count + 1;

                BEGIN
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.prprd_paid_claim_amt, 0), v_bcur_rnd),
                        'REINSURANCE POOL PYMTS',                 --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('POSTING AMOUNT...');
                END;
            END IF;

            --************************************************************
            --v_trt_amt := ROUND (NVL (i.prprd_rein_pool_amt, 0), v_bcur_rnd) - ROUND (NVL (i.prprd_rein_pool_comm_amt, 0), v_bcur_rnd)-ROUND (NVL (i.prprd_rein_pool_vat_amt, 0), v_bcur_rnd);
            BEGIN
                fms_cheques_pkg.create_reqn (
                    v_cqr_source,
                    i.prprd_code,                                        --ref
                    i.prprd_pol_batch_no,                             -- ref2,
                    TRUNC (SYSDATE),
                    'REINSURANCE POOL PYMTS',
                    --'GIS Claim',             --narrative V
                    v_paymnt_brh_code,
                    v_bct_brh_code,
                    ROUND (NVL (i.prprd_pool_net_amt, 0), v_bcur_rnd),
                    --cqr_amount
                    v_agn_name,
                    i.prprd_risk_cur_code,
                    v_bct_code,
                    fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                    TRUNC (SYSDATE),
                    v_user_code,                             --v_cqr_req_by  ,
                    'POOL-PYMT',                                -- pmt_type  ,
                    v_chq_dtls);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'CREATE_REQN.. :- '
                        || v_paymnt_brh_code
                        || ' $ '
                        || i.prprd_code
                        || ';'
                        || SQLERRM (SQLCODE));
            END;

            UPDATE gin_pol_rein_pool_risk_details
               SET prprd_authorized = 'Y',
                   prprd_authorized_by = v_user_name,
                   prprd_auth_date = TRUNC (SYSDATE)
             WHERE prprd_code = i.prprd_code;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'RI POOL REQN NOT CREATED FOR TRANSACTION # ' || v_prprd_code);
        END IF;
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR CREATING REQUISITION 11:- ' || SQLERRM (SQLCODE));
    END;

    --   PROCEDURE update_refunds (---commented out on 4th Jan 2019 - EFT update error in FMS for refund cheques
    --      v_cqr_ref      IN   VARCHAR2,
    --      v_cqr_ref2     IN   VARCHAR2,
    --      v_cqr_chq_no   IN   VARCHAR2,
    --      v_cqr_chq_dt   IN   DATE,
    --      v_user_name    IN   VARCHAR2,
    --      v_cqr_amount   IN   NUMBER
    --   )
    --   IS
    --      CURSOR c_payment (v_trans_no NUMBER)
    --      IS
    --         SELECT *
    --           FROM gin_master_transactions
    --          WHERE mtran_no = v_trans_no
    --            AND mtran_btr_trans_code IN ('PM', 'ADVLN');
    --
    --      v_mtran_no      NUMBER;
    --      v_batch_no      NUMBER;
    --      v_cr_com        NUMBER        := 0;
    --      v_dr_mtran_no   NUMBER;
    --      v_cr_mtran_no   NUMBER;
    --      v_cr_ref_no     VARCHAR2 (30);
    --      v_cr_bal        NUMBER        := 0;
    --   BEGIN
    --      v_mtran_no :=
    --               TO_NUMBER (REPLACE (REPLACE (v_cqr_ref, 'PYMT', ''), '/', ''));
    --
    --      --  raise_error(v_mtran_no);
    --      FOR r IN c_payment (v_mtran_no)
    --      LOOP
    --         BEGIN
    --            UPDATE gin_master_transactions
    --               SET mtran_other_ref = v_cqr_chq_no,
    --                   mtran_authorised = 'Y',
    --                   mtran_date_authorized = v_cqr_chq_dt,
    --                   mtran_other_ref1 = v_cqr_ref
    --             WHERE mtran_no = r.mtran_no;
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               raise_error
    --                   ('Unable to retrieve the payment reocrd to be updated ...');
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error while update the payment status ...');
    --         END;
    --
    --         --RAISE_ERROR('r.mtran_alloc_mtran_no'||r.mtran_alloc_mtran_no);
    --         IF r.mtran_alloc_mtran_no IS NOT NULL
    --         THEN
    --            v_cr_bal := ABS (NVL (r.mtran_balance, 0));
    --            v_cr_com :=
    --                 ABS (NVL (r.mtran_commission, 0))
    --               - (  ABS (NVL (r.mtran_comm_paid, 0))
    --                  + ABS (NVL (r.mtran_comm_payable, 0))
    --                 );
    --            v_dr_mtran_no := r.mtran_alloc_mtran_no;
    --            v_cr_mtran_no := r.mtran_no;
    --            v_cr_ref_no := r.mtran_ref_no;
    --
    --            BEGIN
    --               gis_accounts_utilities.knock_off_transactions
    --                                                     (r.mtran_alloc_mtran_no,
    --                                                      v_cr_ref_no,
    --                                                      r.mtran_no,
    --                                                      r.mtran_alloc_inc_comm,
    --                                                      TRUNC (SYSDATE),
    --                                                      v_cr_bal,
    --                                                      v_cr_com,
    --                                                      NULL,
    --                                                      'N'
    --                                                     );
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error
    ----                         ('Error allocating transactions being authorised...');
    --            END;
    --         END IF;
    --
    --         BEGIN
    --            SELECT pol_batch_no
    --              INTO v_batch_no
    --              FROM gin_policies
    --             WHERE pol_policy_no = r.mtran_ref_no
    --               AND NVL (pol_policy_status, 'NB') = 'CN';
    --         EXCEPTION
    --            WHEN NO_DATA_FOUND
    --            THEN
    --               v_batch_no := NULL;
    --            WHEN OTHERS
    --            THEN
    --               v_batch_no := NULL;
    --         END;
    --
    --         gin_manage_alerts_pkg.proc_refundauth_alert (v_batch_no,
    --                                                      r.mtran_btr_trans_code,
    --                                                      v_user_name
    --                                                     );
    --      END LOOP;
    --   END;
    PROCEDURE update_refunds (v_cqr_ref      IN VARCHAR2,
                              v_cqr_ref2     IN VARCHAR2,
                              v_cqr_chq_no   IN VARCHAR2,
                              v_cqr_chq_dt   IN DATE,
                              v_user_name    IN VARCHAR2,
                              v_cqr_amount   IN NUMBER)
    IS
        CURSOR c_payment (v_trans_no NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_no = v_trans_no
                   AND mtran_btr_trans_code IN ('PM', 'ADVLN');

        v_mtran_no      NUMBER;
        v_batch_no      NUMBER;
        v_cr_com        NUMBER := 0;
        v_dr_mtran_no   NUMBER;
        v_cr_mtran_no   NUMBER;
        v_cr_ref_no     VARCHAR2 (30);
        v_cr_bal        NUMBER := 0;
        v_alloc_amt     NUMBER;
    BEGIN
        v_mtran_no :=
            TO_NUMBER (REPLACE (REPLACE (v_cqr_ref, 'PYMT', ''), '/', ''));

        --  raise_error(v_mtran_no);
        FOR r IN c_payment (v_mtran_no)
        LOOP
            BEGIN
                UPDATE gin_master_transactions
                   SET mtran_other_ref = v_cqr_chq_no,
                       mtran_authorised = 'Y',
                       mtran_date_authorized = v_cqr_chq_dt,
                       mtran_other_ref1 = v_cqr_ref
                 WHERE mtran_no = r.mtran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'Unable to retrieve the payment reocrd to be updated ...');
                WHEN OTHERS
                THEN
                    raise_error ('Error while update the payment status ...');
            END;

            --RAISE_ERROR('r.mtran_alloc_mtran_no'||r.mtran_alloc_mtran_no);
            --         IF r.mtran_alloc_mtran_no IS NOT NULL
            --         THEN
            --            v_cr_bal := ABS (NVL (r.mtran_balance, 0));
            --            v_cr_com :=
            --                 ABS (NVL (r.mtran_commission, 0))
            --               - (  ABS (NVL (r.mtran_comm_paid, 0))
            --                  + ABS (NVL (r.mtran_comm_payable, 0))
            --                 );
            --            v_dr_mtran_no := r.mtran_alloc_mtran_no;
            --            v_cr_mtran_no := r.mtran_no;
            --            v_cr_ref_no := r.mtran_ref_no;
            --
            --
            --
            --            BEGIN
            --               gis_accounts_utilities.knock_off_transactions
            --                                                     (r.mtran_alloc_mtran_no,
            --                                                      v_cr_ref_no,
            --                                                      r.mtran_no,
            --                                                      r.mtran_alloc_inc_comm,
            --                                                      TRUNC (SYSDATE),
            --                                                      v_cr_bal,
            --                                                      v_cr_com,
            --                                                      v_alloc_amt,
            --                                                      'N'
            --                                                     );
            ----            EXCEPTION
            ----               WHEN OTHERS
            ----               THEN
            ----                  raise_error
            ----                         ('Error allocating transactions being authorised...');
            --            END;
            --         END IF;

            IF r.mtran_alloc_mtran_no IS NOT NULL
            THEN
                v_cr_bal := 0;              -- ABS (NVL (r.mtran_balance, 0));
                v_cr_com := 0; -- ABS (NVL (r.mtran_commission, 0)) - (  ABS (NVL (r.mtran_comm_paid, 0))  + ABS (NVL (r.mtran_comm_payable, 0)));
                v_dr_mtran_no := r.mtran_alloc_mtran_no;
                v_cr_mtran_no := r.mtran_no;
                v_cr_ref_no := r.mtran_ref_no;

                BEGIN
                    SELECT mtran_no, mtran_ref_no, mtran_balance
                      INTO v_cr_mtran_no, v_cr_ref_no, v_cr_bal
                      FROM GIN_MASTER_TRANSACTIONS
                     WHERE MTRAN_NO = r.mtran_alloc_mtran_no;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        RAISE_ERROR ('ERROR FETCHING CREDIT DETAILS...');
                END;

                IF ABS (NVL (r.mtran_balance, 0)) > ABS (NVL (v_cr_bal, 0))
                THEN
                    v_alloc_amt := ABS (NVL (v_cr_bal, 0));
                ELSE
                    v_alloc_amt := ABS (NVL (r.mtran_balance, 0));
                END IF;

                BEGIN
                    gis_accounts_utilities.knock_off_transactions (
                        v_cr_mtran_no,
                        v_cr_ref_no,
                        r.mtran_no,
                        r.mtran_alloc_inc_comm,
                        TRUNC (SYSDATE),
                        v_cr_bal,
                        v_cr_com,
                        v_alloc_amt,
                        'N');
                --            EXCEPTION
                --               WHEN OTHERS
                --               THEN

                --                  raise_error
                --                         ('Error allocating transactions being authorised...');
                END;
            END IF;

            BEGIN
                SELECT pol_batch_no
                  INTO v_batch_no
                  FROM gin_policies
                 WHERE     pol_policy_no = r.mtran_ref_no
                       AND NVL (pol_policy_status, 'NB') = 'CN';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    v_batch_no := NULL;
                WHEN OTHERS
                THEN
                    v_batch_no := NULL;
            END;

            gin_manage_alerts_pkg.proc_refundauth_alert (
                v_batch_no,
                r.mtran_btr_trans_code,
                v_user_name);
        END LOOP;
    END;

    PROCEDURE update_cancl_refunds (v_cqr_ref      IN VARCHAR2,
                                    v_cqr_ref2     IN VARCHAR2,
                                    v_cqr_chq_no   IN VARCHAR2,
                                    v_cqr_chq_dt   IN DATE,
                                    v_user_name    IN VARCHAR2,
                                    v_cqr_amount   IN NUMBER,
                                    v_status       IN VARCHAR2)
    IS
        CURSOR c_payment (v_trans_no NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE mtran_no = v_trans_no AND mtran_btr_trans_code = 'PM';

        v_mtran_no    NUMBER;
        v_tran_type   gin_master_transactions.mtran_tran_type%TYPE;
    BEGIN
        v_mtran_no :=
            TO_NUMBER (REPLACE (REPLACE (v_cqr_ref, 'PYMT', ''), '/', ''));

        BEGIN          -- undo the allocations first before doing the reversal
            gis_accounts_utilities.undo_trans_allocation (v_mtran_no);
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;                                 -- raise_error(sqlerrm);
        END;

        FOR r IN c_payment (v_mtran_no)
        LOOP
            BEGIN
                UPDATE gin_master_transactions
                   SET mtran_other_ref = v_cqr_chq_no,
                       mtran_authorised = 'Y',
                       mtran_canc_chq_dt = v_cqr_chq_dt,
                       mtran_other_ref1 = v_cqr_ref,
                       mtran_canc_chq_by = v_user_name,
                       mtran_narrations =
                           mtran_narrations || ' / ' || v_status
                 WHERE mtran_no = r.mtran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'Unable to retrieve the payment reocrd to be updated ...');
                WHEN OTHERS
                THEN
                    raise_error ('Error while update the payment status ...');
            END;

            SELECT TO_NUMBER (
                       TO_CHAR (SYSDATE, 'YYYY') || gin_mtran_no_seq.NEXTVAL)
              INTO v_mtran_no
              FROM DUAL;

            BEGIN
                SELECT DECODE (r.mtran_dc,
                               'D', btr_credit_code,
                               btr_debit_code)
                  INTO v_tran_type
                  FROM gin_business_transactions
                 WHERE btr_trans_code = r.mtran_btr_trans_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'Error getting the trans type for ('
                        || r.mtran_btr_trans_code
                        || ') ...');
            END;

            BEGIN
                INSERT INTO gin_master_transactions (mtran_no,
                                                     mtran_doc_date,
                                                     mtran_date,
                                                     mtran_ref_no,
                                                     mtran_other_ref,
                                                     mtran_tran_type,
                                                     mtran_dc,
                                                     mtran_control_acc,
                                                     mtran_client_type,
                                                     mtran_client_code,
                                                     mtran_amount,
                                                     mtran_balance,
                                                     mtran_authorised,
                                                     mtran_net_amt,
                                                     mtran_posting_date,
                                                     mtran_ggt_tran_no,
                                                     mtran_prp_code,
                                                     mtran_btr_trans_code,
                                                     mtran_origin,
                                                     mtran_cur_code,
                                                     mtran_cur_symbol,
                                                     mtran_brn_code,
                                                     mtran_brn_sht_desc,
                                                     mtran_posted_by,
                                                     mtran_alloc_mtran_no,
                                                     mtran_alloc_inc_comm,
                                                     mtran_cur_rate,
                                                     mtran_payee,
                                                     mtran_narrations,
                                                     mtran_canc_chq_dt,
                                                     mtran_canc_chq_by,
                                                     mtran_tl,
                                                     mtran_phfund,
                                                     mtran_sd,
                                                     mtran_whtx,
                                                     mtran_extras,
                                                     mtran_commission,
                                                     mtran_comm_levy_amt)
                         VALUES (
                             v_mtran_no,
                             TRUNC (SYSDATE),
                             TRUNC (SYSDATE),
                             r.mtran_ref_no,
                             r.mtran_other_ref,
                             v_tran_type,
                             DECODE (r.mtran_dc, 'D', 'C', 'D'),
                             r.mtran_control_acc,
                             r.mtran_client_type,
                             r.mtran_client_code,
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_amount),
                                     ABS (r.mtran_amount)),
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_balance),
                                     ABS (r.mtran_balance)),
                             'Y',
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_net_amt),
                                     ABS (r.mtran_net_amt)),
                             TRUNC (SYSDATE),
                             NULL,
                             NULL,
                             r.mtran_btr_trans_code,
                             r.mtran_origin,
                             r.mtran_cur_code,
                             r.mtran_cur_symbol,
                             r.mtran_brn_code,
                             r.mtran_brn_sht_desc,
                             v_user_name,
                             r.mtran_alloc_mtran_no,
                             r.mtran_alloc_inc_comm,
                             r.mtran_cur_rate,
                             r.mtran_payee,
                             r.mtran_narrations || ' / ' || v_status,
                             v_cqr_chq_dt,
                             v_user_name,
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_tl),
                                     ABS (r.mtran_tl)),
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_phfund),
                                     ABS (r.mtran_phfund)),
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_sd),
                                     ABS (r.mtran_sd)),
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_whtx),
                                     ABS (r.mtran_whtx)),
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_extras),
                                     ABS (r.mtran_extras)),
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_commission),
                                     ABS (r.mtran_commission)),
                             DECODE (r.mtran_dc,
                                     'D', -ABS (r.mtran_comm_levy_amt),
                                     ABS (r.mtran_comm_levy_amt)));
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error...' || r.mtran_amount);
            END;
        --raise_error(v_mtran_no) ;
        END LOOP;
    END update_cancl_refunds;

    PROCEDURE update_cancl_refund_chq (v_cqr_ref      IN VARCHAR2,
                                       v_cqr_ref2     IN VARCHAR2,
                                       v_cqr_chq_no   IN VARCHAR2,
                                       v_cqr_chq_dt   IN DATE,
                                       v_user_name    IN VARCHAR2,
                                       v_cqr_amount   IN NUMBER,
                                       v_status       IN VARCHAR2)
    IS
        CURSOR c_payment (v_trans_no NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE mtran_no = v_trans_no AND mtran_btr_trans_code = 'PM';

        v_mtran_no    NUMBER;
        v_tran_type   gin_master_transactions.mtran_tran_type%TYPE;
    BEGIN
        v_mtran_no :=
            TO_NUMBER (REPLACE (REPLACE (v_cqr_ref, 'PYMT', ''), '/', ''));

        FOR r IN c_payment (v_mtran_no)
        LOOP
            BEGIN
                UPDATE gin_master_transactions
                   SET mtran_authorised = 'Y',
                       mtran_canc_chq_dt = NULL,
                       mtran_other_ref1 = NULL,
                       mtran_canc_chq_by = v_user_name,
                       mtran_narrations =
                           mtran_narrations || ' / ' || v_status
                 WHERE mtran_no = r.mtran_no;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_error (
                        'Unable to retrieve the payment reocrd to be updated ...');
                WHEN OTHERS
                THEN
                    raise_error ('Error while update the payment status ...');
            END;
        END LOOP;
    END update_cancl_refund_chq;

    PROCEDURE auth_mdp_payment (v_xp_code IN NUMBER, v_user_name IN VARCHAR2)
    IS
        CURSOR mdp_payment_dtls IS
            SELECT *
              FROM gin_xol_prem_payment_dtls
             WHERE     xppd_xp_code = v_xp_code
                   AND NVL (xppd_authorized, 'N') = 'N';

        CURSOR gl_acct_code (v_level VARCHAR2, vtrantype VARCHAR2)
        IS
            SELECT DISTINCT
                   trnt_code               trnt_code,
                   trnt_gl_code            trnt_gl_code,
                   trnt_contra_gl_code     trnt_contra_gl_code
              FROM gin_transaction_types
             WHERE trnt_application_lvl = v_level AND trnt_type = vtrantype;

        vgl_trans               fms_vouchers_pkg.tgl_rec_type;
        v_user_code             NUMBER;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_mdp_amt               NUMBER;
        v_part_mdp_amt          NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (15);
        rev_type                VARCHAR2 (15);
        v_control_acc           VARCHAR2 (30);
        v_client_type           VARCHAR2 (5);
        v_act_code              NUMBER;
        vgl_code                NUMBER;
        v_drcr                  VARCHAR2 (1);
        v_agn_account           VARCHAR2 (30);
        v_mtran_no              NUMBER;
    BEGIN
        --RAISE_ERROR(v_xp_code);
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        vgl_trans.DELETE;
        v_rec_count := -1;
        v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');

        --  vgl_trans .DELETE;
        FOR cur_rec IN mdp_payment_dtls
        LOOP
            --tqc_organizations
            v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
            v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);

            IF SIGN (cur_rec.xppd_amount) = 1
            THEN
                v_mdp_amt :=
                    NVL (v_mdp_amt, 0) + NVL (cur_rec.xppd_amount, 0) * -1;
                v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * -1;
                v_drcr := 'C';
            ELSE
                v_mdp_amt :=
                    NVL (v_mdp_amt, 0) + NVL (cur_rec.xppd_amount, 0) * 1;
                v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * 1;
                v_drcr := 'D';
            END IF;

            v_exch_rate :=
                get_currexch_rate (NVL (cur_rec.xppd_cur_code, 1),
                                   v_rnd,
                                   v_bcur_rnd);
            v_cur_code := cur_rec.xppd_cur_code;

            OPEN gl_acct_code ('U', 'XOL');

            FETCH gl_acct_code
                INTO v_trnt_code, v_trnt_gl_code, v_trnt_contra_gl_code;

            CLOSE gl_acct_code;

            --RAISE_ERROR('acc control='||v_trnt_gl_code||':contra ==;'||v_trnt_contra_gl_code);
            IF     cur_rec.xppd_gl_account IS NULL
               AND v_trnt_contra_gl_code IS NULL
            THEN
                raise_error ('Xol account is not defined..');
            ELSE
                v_trnt_contra_gl_code := cur_rec.xppd_gl_account;
            END IF;

            v_rec_count := v_rec_count + 2;

            IF NVL (v_part_mdp_amt, 0) <> 0
            THEN
                BEGIN
                    SELECT agn_sht_desc
                      INTO v_agn_account
                      FROM tqc_agencies
                     WHERE agn_code = cur_rec.xppd_agnt_agent_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error:- Agency not found...');
                END;

                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                       || gin_mtran_no_seq.NEXTVAL
                  INTO v_mtran_no
                  FROM DUAL;

                BEGIN
                    INSERT INTO gin_master_transactions (
                                    mtran_no,
                                    mtran_date,
                                    mtran_ref_no,
                                    mtran_other_ref,
                                    mtran_tran_type,
                                    mtran_dc,
                                    mtran_control_acc,
                                    mtran_client_type,
                                    mtran_client_code,
                                    mtran_amount,
                                    mtran_balance,
                                    mtran_pol_batch_no,
                                    mtran_scl_code,
                                    mtran_narrations,
                                    mtran_rei_code,
                                    mtran_client_polcy_no,
                                    mtran_pol_ren_endos_no,
                                    mtran_acct_code,
                                    mtran_ggt_tran_no,
                                    mtran_net_amt,
                                    mtran_posting_date,
                                    mtran_cmb_claim_no,
                                    mtran_prp_code,
                                    mtran_authorised,
                                    mtran_date_authorized,
                                    mtran_authorised_by,
                                    mtran_pro_sht_desc,
                                    mtran_pro_code,
                                    mtran_origin,
                                    mtran_cur_code,
                                    mtran_cur_symbol,
                                    mtran_cur_rate,
                                    mtran_btr_trans_code,
                                    mtran_brn_code)
                             VALUES (
                                 v_mtran_no,
                                 TRUNC (SYSDATE),
                                 'MDP' || cur_rec.xppd_xpp_code,
                                 NULL,
                                 'MDP',
                                 v_drcr,
                                 v_agn_account,
                                 'R',
                                 cur_rec.xppd_agnt_agent_code,
                                 DECODE (v_drcr,
                                         'C', ABS (v_part_mdp_amt),
                                         -ABS (v_part_mdp_amt)),
                                 DECODE (v_drcr,
                                         'C', ABS (v_part_mdp_amt),
                                         -ABS (v_part_mdp_amt)),
                                 NULL,
                                 NULL,
                                 DECODE (v_drcr,
                                         'C', 'MDP CREDIT',
                                         'D', 'MDP DEBIT'),
                                 NULL,
                                 NULL,
                                 NULL,
                                 'MDP',
                                 NULL,
                                 DECODE (v_drcr,
                                         'C', ABS (v_part_mdp_amt),
                                         -ABS (v_part_mdp_amt)),
                                 TRUNC (SYSDATE),
                                 NULL,
                                 NULL,
                                 'N',
                                 TRUNC (SYSDATE),
                                 v_user_name,
                                 NULL,
                                 NULL,
                                 'R',
                                 v_cur_code,
                                 NULL,
                                 v_exch_rate,
                                 'MDP',
                                 v_paymnt_brh_code);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('ERROR UPDATING XOL MDP STATEMENTS...');
                END;

                BEGIN
                    --RAISE_ERROR('check acc='||v_trnt_gl_code||'=='||v_trnt_contra_gl_code);
                    INSERT INTO gin_gl_transactions (gltran_no,
                                                     gltran_auth_date,
                                                     gltran_dc,
                                                     gltran_trnt_code,
                                                     gltran_amount,
                                                     gltran_amount_bcur,
                                                     gltran_gltran_acc,
                                                     gltran_contra_acc,
                                                     gltran_usrname,
                                                     gltran_tran_no,
                                                     gltran_pol_policy_no,
                                                     gltran_u_c_trans,
                                                     gltran_claim_no,
                                                     gltran_cur_code,
                                                     gltran_cur_symbol,
                                                     gltran_cur_rate,
                                                     gltran_scl_code,
                                                     gltran_pro_code,
                                                     gltran_btr_trans_code,
                                                     gltran_level,
                                                     gltran_brn_code)
                             VALUES (
                                    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                                 || gin_gltran_no_seq.NEXTVAL,
                                 TRUNC (SYSDATE),
                                 v_drcr,
                                 'MDP',
                                 v_part_mdp_amt,
                                 ROUND (v_part_mdp_amt / v_exch_rate),
                                 v_trnt_gl_code,
                                 v_trnt_contra_gl_code,
                                 v_user_name,
                                 NULL,
                                 NULL,
                                 'C',
                                 NULL,
                                 v_cur_code,
                                 NULL,
                                 v_exch_rate,
                                 NULL,
                                 NULL,
                                 NULL,
                                 'MDP',
                                 v_paymnt_brh_code);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error updating gl transactions....');
                END;

                BEGIN
                    fms_vouchers_pkg.append_gl_trans (v_rec_count,
                                                      'XOL MDP ', --v_narrative
                                                      ABS (v_part_mdp_amt), --v_amount
                                                      v_drcr,         --v_drcr
                                                      v_trnt_gl_code, --v_account1
                                                      v_trnt_contra_gl_code, --i.GLTRAN_CONTRA_ACC,--v_account2
                                                      v_paymnt_brh_code, --v_branch
                                                      vgl_trans);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20026,
                               'ERROR POSTING GL TRANS FOR '
                            || v_trnt_code
                            || ':- '
                            || SQLERRM (SQLCODE));
                END;

                BEGIN
                    gis_accounts_utilities.process_gis_payments (v_user_name,
                                                                 v_mtran_no);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error creating cheque..');
                END;

                -- raise_error(v_user_name);
                UPDATE gin_master_transactions
                   SET mtran_authorised = 'Y',
                       mtran_authorised_by = v_user_name,
                       mtran_posting_date = SYSDATE,
                       mtran_date_authorized = SYSDATE
                 WHERE mtran_no = v_mtran_no;
            END IF;

            BEGIN
                UPDATE gin_xol_prem_payment_dtls
                   SET xppd_authorized = 'Y',
                       xppd_authorized_by = v_user_name,
                       xppd_authorized_date = SYSDATE
                 WHERE xppd_code = cur_rec.xppd_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error:- Unable to update GIN_XOL_PREM_PAYMENT_DTLS');
            END;
        END LOOP;

        IF v_rec_count = -1
        THEN
            raise_application_error (-20001,
                                     'No transaction to authorize...');
        END IF;

        vgl_code :=
            fms_vouchers_pkg.update_vgl ('GIS XOL MDP',    --V_BTC_DESCRIPTION
                                         'JV',          --V_BTC_TYPE varchar2,
                                         v_paymnt_brh_code,
                                         TRUNC (SYSDATE),
                                         'GIS XOL MDP VOUCHER',
                                         'GIS',              --V_REF varchar2,
                                         v_user_code,    --V_RAISED_BY number,
                                         v_cur_code,         --i.cmb_cur_code,
                                         vgl_trans);
        fms_interfaces_pkg.post_je (vgl_code, v_user_code);

        BEGIN
            UPDATE gin_xol_premiums
               SET xp_amount_paid =
                       NVL (xp_amount_paid, 0) + ABS (NVL (v_mdp_amt, 0)),
                   xp_os_amt = NVL (xp_os_amt, 0) - ABS (NVL (v_mdp_amt, 0)),
                   xp_authorized =
                       DECODE (xp_authorized, 'N', 'Y', xp_authorized),
                   xp_authorized_date = NVL (xp_authorized_date, SYSDATE),
                   xp_authorized_by = NVL (xp_authorized_by, v_user_name)
             WHERE xp_code = v_xp_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error Updating paid amount...');
        END;

        BEGIN
            UPDATE gin_xol_premium_payments
               SET xpp_authorized_by = v_user_name,
                   xpp_authorized_date = SYSDATE,
                   xpp_authorized = 'Y',
                   xpp_drcr_no = 'MDP' || xpp_code
             WHERE xpp_xp_code = v_xp_code AND xpp_authorized = 'N';
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error updating GIN_XOL_PREMIUM_PAYMENTS ');
        END;
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR CREATING REQUISITION :- ' || SQLERRM (SQLCODE));
    END auth_mdp_payment;

    PROCEDURE get_gl_acct_code (
        v_trnt_type             IN     VARCHAR2,
        v_scl_code              IN     NUMBER,
        v_app_lvl               IN     VARCHAR2,
        v_btr_trans_code        IN     VARCHAR2,
        v_frgn_or_local         IN     VARCHAR2,
        ---F for foreign and L for Local
        v_trnt_code                OUT VARCHAR2,
        v_trnt_gl_code             OUT VARCHAR2,
        v_trnt_contra_gl_code      OUT VARCHAR2,
        v_trnt_code_in          IN     VARCHAR2 DEFAULT NULL)
    IS
        v_errmsg                VARCHAR2 (600);
        v_scl_appl              VARCHAR2 (20);
        v_trans_type_lvl        VARCHAR2 (20);
        v_gggap_code            NUMBER;
        v_local_foreign_split   VARCHAR2 (20);
        v_frgn_acc_no           VARCHAR2 (20);
        v_frgn_contra_acc_no    VARCHAR2 (20);
    BEGIN
        --   RAISE_ERROR('v_scl_appl='||v_scl_appl);
        BEGIN
            SELECT trnt_code,
                   trnt_gl_code,
                   trnt_contra_gl_code,
                   trnt_scl_applicable,
                   trnt_appl_trans_type_lvl,
                   trnt_local_foreign_split,
                   trnt_frgn_acc_no,
                   trnt_frgn_contra_acc_no
              INTO v_trnt_code,
                   v_trnt_gl_code,
                   v_trnt_contra_gl_code,
                   v_scl_appl,
                   v_trans_type_lvl,
                   v_local_foreign_split,
                   v_frgn_acc_no,
                   v_frgn_contra_acc_no
              FROM gin_transaction_types
             WHERE     trnt_type = v_trnt_type
                   AND trnt_application_lvl = v_app_lvl;
        EXCEPTION
            WHEN TOO_MANY_ROWS
            THEN
                BEGIN
                    SELECT trnt_code,
                           trnt_gl_code,
                           trnt_contra_gl_code,
                           trnt_scl_applicable,
                           trnt_appl_trans_type_lvl,
                           trnt_local_foreign_split,
                           trnt_frgn_acc_no,
                           trnt_frgn_contra_acc_no
                      INTO v_trnt_code,
                           v_trnt_gl_code,
                           v_trnt_contra_gl_code,
                           v_scl_appl,
                           v_trans_type_lvl,
                           v_local_foreign_split,
                           v_frgn_acc_no,
                           v_frgn_contra_acc_no
                      FROM gin_transaction_types
                     WHERE     trnt_type = v_trnt_type
                           AND trnt_application_lvl = v_app_lvl
                           AND trnt_code = v_trnt_code_in;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_application_error (
                            -20021,
                               'Revenue Type='
                            || v_trnt_type
                            || 'v_trnt_type='
                            || v_trnt_type
                            || 'trnt_application_lvl='
                            || v_app_lvl);
                END;
            WHEN NO_DATA_FOUND
            THEN
                raise_application_error (
                    -20021,
                       'Revenue Type='
                    || v_trnt_type
                    || 'v_trnt_type='
                    || v_trnt_type
                    || 'trnt_application_lvl='
                    || v_app_lvl);
            WHEN OTHERS
            THEN
                IF SQLCODE = -100501
                THEN
                    v_errmsg :=
                           'The Sub class Revenue Type '
                        || v_trnt_type
                        || ' not defined.2...'
                        || v_trnt_type
                        || ';'
                        || v_app_lvl;
                ELSE
                    v_errmsg := '3 Returned error :-' || SQLERRM (SQLCODE);
                END IF;
        --            raise_application_error (-20001,
        --                                        v_errmsg
        --                                     || v_app_lvl
        --                                     || ';'
        --                                     || v_scl_code
        --                                     || ';'
        --                                     || ';'
        --                                     || v_trnt_type
        --                                    );
        END;

        --      RAISE_ERROR('v_scl_appl='||v_scl_appl||'v_trans_type_lvl='||v_trans_type_lvl||'v_scl_code='||v_scl_code);
        --             IF v_trnt_type   IN  ('COPHFUND')
        --        THEN
        --        RAISE_ERROR(v_scl_code||' ; '||v_trnt_type||' ; ' ||v_scl_appl||'  ; '||v_trans_type_lvl||' ; '||v_btr_trans_code||' ; '||v_trnt_code||' ; '||v_gggap_code||' ; '||v_app_lvl);
        --        END IF;
        IF NVL (v_scl_appl, 'N') != 'Y' AND NVL (v_trans_type_lvl, 'N') = 'Y'
        THEN
            BEGIN
                SELECT tla_gl_acc,
                       tla_contra_gl_acc,
                       tla_frgn_acc_no,
                       tla_frgn_contra_acc_no
                  INTO v_trnt_gl_code,
                       v_trnt_contra_gl_code,
                       v_frgn_acc_no,
                       v_frgn_contra_acc_no
                  FROM gin_trans_lvl_accounts
                 WHERE     tla_trnt_code = v_trnt_code
                       AND tla_btr_trans_code = v_btr_trans_code
                       AND tla_trnt_type = v_trnt_type;
            --                SELECT gggam_acc_no, gggam_contra_acc_no, gggam_frgn_acc_no,
            --                   gggam_frgn_contra_acc_no
            --              INTO v_trnt_gl_code, v_trnt_contra_gl_code, v_frgn_acc_no,
            --                   v_frgn_contra_acc_no
            --              FROM gin_gis_gl_accts_mapping
            --             WHERE gggam_trnt_type = v_trnt_code
            --               AND gggam_gggap_code = v_btr_trans_code
            --               AND gggam_trnt_type = v_trnt_type;

            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'ERROR FETCHING GL A/C FOR :'
                        || v_trnt_code
                        || ' TRANS :'
                        || v_btr_trans_code);
            END;
        ELSIF v_scl_appl = 'Y'
        THEN
            --RAISE_ERROR('v_scl_code='||v_scl_code);
            --           IF v_trnt_type='COPHFUND'
            --             THEN
            --            RAISE_ERROR('v_scl_code'||v_scl_code);
            --             END IF;
            --     RAISE_ERROR('v_gggap_code='||v_gggap_code||'v_trnt_code='||v_trnt_code||'v_scl_code='||v_scl_code);
            BEGIN
                SELECT gggap_code
                  INTO v_gggap_code
                  FROM gin_gis_gl_accts_groups, gin_sub_classes
                 WHERE gggap_code = scl_gggap_code AND scl_code = v_scl_code;
            --RAISE_ERROR('v_gggap_code='||v_gggap_code||'v_trnt_code='||v_trnt_code||'v_scl_code='||v_scl_code);
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    raise_application_error (
                        -20021,
                           ' GL Account Mapping not specified for sub class ='
                        || v_scl_code
                        || ';'
                        || v_trnt_type
                        || ';'
                        || v_trnt_code
                        || ';'
                        || v_btr_trans_code
                        || ';'
                        || v_app_lvl);
                WHEN OTHERS
                THEN
                    raise_error (
                           'Error determining the GL account mapping for sub class ='
                        || v_scl_code);
            END;

            IF NVL (v_trans_type_lvl, 'N') != 'Y'
            THEN
                BEGIN
                    --     RAISE_ERROR('v_gggap_code='||v_gggap_code||'v_trnt_code='||v_trnt_code);
                    SELECT gggam_acc_no,
                           gggam_contra_acc_no,
                           gggam_frgn_acc_no,
                           gggam_frgn_contra_acc_no
                      INTO v_trnt_gl_code,
                           v_trnt_contra_gl_code,
                           v_frgn_acc_no,
                           v_frgn_contra_acc_no
                      FROM gin_gis_gl_accts_mapping
                     WHERE     gggam_gggap_code = v_gggap_code
                           AND gggam_trnt_code = v_trnt_code;

                    IF NVL (v_trnt_gl_code, NVL (v_frgn_acc_no, 'DEF')) =
                       'DEF'
                    THEN
                        raise_application_error (
                            -20021,
                               ' 4 GL Account not defined DEF  '
                            || v_gggap_code
                            || ';'
                            || v_trnt_code);
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_application_error (
                            -20021,
                               ' 5 The Sub class Revenue Type '
                            || v_trnt_type
                            || 'not defined v_gggap_code'
                            || v_gggap_code
                            || ' v_trnt_code '
                            || v_trnt_code);
                    WHEN OTHERS
                    THEN
                        IF SQLCODE = -100501
                        THEN
                            v_errmsg :=
                                   ' 6 The Sub class Revenue Type '
                                || v_trnt_type
                                || ' not defined....';
                        ELSE
                            v_errmsg :=
                                   ' 7 Returned error :-'
                                || SQLERRM (SQLCODE)
                                || v_app_lvl
                                || ';'
                                || v_scl_code
                                || ';'
                                || ';'
                                || v_trnt_type;
                        END IF;
                --                  raise_application_error (-20021, v_errmsg);
                END;
            --  RAISE_ERROR(v_frgn_acc_no||'='||v_local_foreign_split||'='||v_scl_appl||'='||v_trans_type_lvl||'='||v_gggap_code||'='||v_trnt_code);
            ELSE
                BEGIN
                    SELECT gggtm_acc_no,
                           gggtm_contra_acc_no,
                           gggtm_frgn_acc_no,
                           gggtm_frgn_contra_acc_no
                      INTO v_trnt_gl_code,
                           v_trnt_contra_gl_code,
                           v_frgn_acc_no,
                           v_frgn_contra_acc_no
                      FROM gin_gis_gl_trans_accts_mapping
                     WHERE     gggtm_gggap_code = v_gggap_code
                           AND gggtm_btr_trans_code = v_btr_trans_code;

                    IF NVL (v_trnt_gl_code, 'DEF') = 'DEF'
                    THEN
                        raise_application_error (
                            -20021,
                            ' 4 GL Account not defined DEF' || v_trnt_type);
                    END IF;
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        raise_application_error (
                            -20021,
                               ' 5 The Sub class Revenue Type '
                            || v_trnt_type
                            || 'not defined');
                    WHEN OTHERS
                    THEN
                        IF SQLCODE = -100501
                        THEN
                            v_errmsg :=
                                   ' 6 The Sub class Revenue Type '
                                || v_trnt_type
                                || ' not defined....';
                        ELSE
                            v_errmsg :=
                                   ' 7 Returned error :-'
                                || SQLERRM (SQLCODE)
                                || v_app_lvl
                                || ';'
                                || v_scl_code
                                || ';'
                                || ';'
                                || v_trnt_type;
                        END IF;

                        raise_application_error (-20021, v_errmsg);
                END;
            END IF;
        END IF;

        IF     NVL (v_local_foreign_split, 'N') = 'Y'
           AND NVL (v_frgn_or_local, 'L') = 'F'
        THEN
            v_trnt_gl_code := v_frgn_acc_no;
            v_trnt_contra_gl_code := v_frgn_contra_acc_no;
        END IF;
    --      BEGIN
    --         DELETE gin_gl_trans_test;
    --         --RAISE_ERROR('v_frgn_or_local =='||v_frgn_or_local||'v_trnt_gl_code'||v_trnt_gl_code);
    --       -- RAISE_ERROR(v_local_foreign_split||'='||v_frgn_or_local||'='
    --   --||v_frgn_acc_no||'='||v_frgn_contra_acc_no||'='||v_trnt_gl_code||'='||v_trnt_contra_gl_code);
    --         INSERT INTO gin_gl_trans_test
    --                     (gltran_trnt_code, gltran_gltran_acc,
    --                      gltran_contra_acc, gltran_u_c_trans, gltran_scl_code,
    --                      gltran_btr_trans_code, gltran_level, gltran_type,
    --                      trnt_appl_trans_type_lvl, trnt_local_foreign_split,
    --                      frgn_or_local,gltran_gltran_f_acc, gltran_contra_f_acc
    --                     )
    --              VALUES (v_trnt_code, DECODE(v_frgn_or_local,'L',v_trnt_gl_code),
    --                      DECODE(v_frgn_or_local,'L',v_trnt_contra_gl_code), NULL, v_scl_code,
    --                      v_btr_trans_code, v_app_lvl, v_trnt_type,
    --                      v_trans_type_lvl, v_local_foreign_split,
    --                      v_frgn_or_local,DECODE(v_frgn_or_local,'F',v_trnt_gl_code),
    --                      DECODE(v_frgn_or_local,'F',v_trnt_contra_gl_code)
    --                     );

    --      END;
    END;

    --PROCEDURE process_mdp_payment (v_xp_code IN NUMBER, v_user_name IN VARCHAR2, v_premType IN VARCHAR2)
    --   IS
    --      CURSOR mdp_payment_dtls
    --      IS
    --         SELECT *
    --           FROM gin_xol_prem_payment_dtls
    --          WHERE xppd_xpp_code = v_xp_code AND NVL (xppd_authorized, 'N') =   'N';

    --      vgl_trans               fms_vouchers_pkg.tgl_rec_type;
    --      v_user_code             NUMBER;
    --      exc_user_error          EXCEPTION;
    --      v_brh_name              VARCHAR2 (100);
    --      v_crt_acc_number        VARCHAR2 (20);
    --      v_crt_acc_org_code      NUMBER;
    --      v_trnt_gl_code          VARCHAR2 (20);
    --      v_trnt_contra_gl_code   VARCHAR2 (20);
    --      v_trnt_code             VARCHAR2 (20);
    --      v_acc_type              VARCHAR2 (20);
    --      v_cqr_source            NUMBER;
    --      v_rec_count             NUMBER                        := 0;
    --      v_org_code              NUMBER;
    --      v_exch_rate             NUMBER;
    --      v_rnd                   NUMBER;
    --      v_bcur_rnd              NUMBER;
    --      v_cur_code              NUMBER;
    --      v_paymnt_brh_code       NUMBER;
    --      v_mdp_amt               NUMBER;
    --      v_part_mdp_amt          NUMBER;
    --      v_trt_qs_amt            NUMBER;
    --      v_trt_fst_amt           NUMBER;
    --      v_trt_sec_amt           NUMBER;
    --      v_trt_fac_amt           NUMBER;
    --      v_lvl                   VARCHAR2 (15);
    --      rev_type                VARCHAR2 (15);
    --      v_control_acc           VARCHAR2 (30);
    --      v_client_type           VARCHAR2 (5);
    --      v_act_code              NUMBER;
    --      vgl_code                NUMBER;
    --      v_drcr                  VARCHAR2 (1);
    --      v_agn_account           VARCHAR2 (30);
    --      v_mtran_no              NUMBER;
    --      vpaymethod              VARCHAR2 (10)                 := 'CHQ';
    --      v_trans_no              VARCHAR2 (200);
    --      v_auth_date             DATE;
    --      v_agn_name              VARCHAR2 (200);
    --      v_payable_amt           NUMBER;
    --      v_bal                   NUMBER;
    --      vxp_code                NUMBER;
    --      v_part_taxes_amt    NUMBER;
    --      v_rec_count_eft  NUMBER := 0;
    --   BEGIN
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));
    -----raise_error('v_xp_code'||v_xp_code);
    --      IF v_user_code IS NULL
    --      THEN
    --         raise_error ('Failed to obtain the user');
    --      END IF;

    --      vgl_trans.DELETE;
    --      v_rec_count := -1;
    --      v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');

    --      --  vgl_trans .DELETE;
    --      FOR cur_rec IN mdp_payment_dtls
    --      LOOP
    --      ---get the participant payment modes
    --          begin
    --          select xolp_cpm_mode  into vpaymethod
    --          from
    --          gin_xol_participants WHERE xolp_code=cur_rec.xppd_xolp_code;
    --          exception  when no_data_found then
    --          vpaymethod:='CHQ';
    --          end;
    --         --tqc_organizations
    --         v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
    --         v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);
    --
    --         IF SIGN (cur_rec.xppd_amount) = -1
    --         THEN
    --            v_mdp_amt := NVL (v_mdp_amt, 0) +   NVL (cur_rec.xppd_amount, 0)
    --                                              * -1;
    --            v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * -1;
    --
    --            ---summation of reinsurance and premium tax
    --            v_part_taxes_amt:= (NVL (cur_rec.xppd_prem_tax, 0)+NVL (cur_rec.xppd_rein_tax, 0)) * -1;
    --            v_drcr := 'C';
    --         ELSE
    --            v_mdp_amt := NVL (v_mdp_amt, 0) + NVL (cur_rec.xppd_amount, 0)
    --                                              * 1;
    --            v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * 1;
    --
    --            v_part_taxes_amt:= (NVL (cur_rec.xppd_prem_tax, 0)+NVL (cur_rec.xppd_rein_tax, 0)) * 1;
    --            v_drcr := 'D';
    --         END IF;

    --         v_exch_rate :=
    --            get_currexch_rate (NVL (cur_rec.xppd_cur_code, 1),
    --                               v_rnd,
    --                               v_bcur_rnd
    --                              );
    --         v_cur_code := cur_rec.xppd_cur_code;
    --         v_rec_count := v_rec_count + 2;

    --         IF NVL (v_part_mdp_amt, 0) <> 0
    --         THEN
    --            BEGIN
    --               SELECT agn_sht_desc, agn_name
    --                 INTO v_agn_account, v_agn_name
    --                 FROM tqc_agencies
    --                WHERE agn_code = cur_rec.xppd_agnt_agent_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error:- Agency not found...');
    --            END;

    --            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
    --                   || gin_mtran_no_seq.NEXTVAL
    --              INTO v_mtran_no
    --              FROM DUAL;

    --            BEGIN
    --               INSERT INTO gin_master_transactions
    --                           (mtran_no, mtran_date,
    --                            mtran_ref_no, mtran_other_ref, mtran_tran_type,
    --                            mtran_dc, mtran_control_acc, mtran_client_type,
    --                            mtran_client_code,
    --                            mtran_amount,
    --                            mtran_balance,
    --                            mtran_pol_batch_no, mtran_scl_code,
    --                            mtran_narrations,
    --                            mtran_rei_code, mtran_client_polcy_no,
    --                            mtran_pol_ren_endos_no, mtran_acct_code,
    --                            mtran_ggt_tran_no,
    --                            mtran_net_amt,
    --                            mtran_posting_date, mtran_cmb_claim_no,
    --                            mtran_prp_code, mtran_authorised,
    --                            mtran_date_authorized, mtran_authorised_by,
    --                            mtran_pro_sht_desc, mtran_pro_code,
    --                            mtran_origin, mtran_cur_code, mtran_cur_symbol,
    --                            mtran_cur_rate, mtran_btr_trans_code,
    --                            mtran_brn_code, mtran_payee,mtran_extras
    --                           )
    --                    VALUES (v_mtran_no, TRUNC (SYSDATE),
    --                            v_premType || cur_rec.xppd_code, NULL, 'MDP',
    --                            v_drcr, v_agn_account, 'R',
    --                            cur_rec.xppd_agnt_agent_code,
    --                            DECODE (v_drcr,
    --                                    'D', ABS (cur_rec.xppd_amount),
    --                                    -ABS (cur_rec.xppd_amount)
    --                                   ),
    --                            DECODE (v_drcr,
    --                                    'D', ABS (cur_rec.xppd_net_payable),
    --                                    -ABS (cur_rec.xppd_net_payable)
    --                                   ),
    --                            NULL, NULL,
    --                            DECODE (v_drcr,
    --                                    'C', v_premType||' CREDIT',
    --                                    'D', v_premType||' DEBIT'
    --                                   ),
    --                            NULL, NULL,
    --                            NULL, v_premType,
    --                            NULL,
    --                            DECODE (v_drcr,
    --                                    'D', ABS (cur_rec.xppd_net_payable),
    --                                    -ABS (cur_rec.xppd_net_payable)
    --                                   ),
    --                            TRUNC (SYSDATE), NULL,
    --                            NULL, 'Y',
    --                            TRUNC (SYSDATE), v_user_name,
    --                            NULL, NULL,
    --                            'R', v_cur_code, NULL,
    --                            v_exch_rate, v_premType,
    --                            v_paymnt_brh_code, v_agn_name,DECODE (v_drcr,
    --                                    'D', -abs (v_part_taxes_amt),ABS (v_part_taxes_amt))
    --                           );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('ERROR UPDATING XOL MDP STATEMENTS...'||cur_rec.XPPD_CODE);
    --            END;

    --            BEGIN
    --               SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                 || ggt_trans_no_seq.NEXTVAL
    --                                )
    --                 INTO v_trans_no
    --                 FROM DUAL;

    --               INSERT INTO gin_gis_transactions
    --                           (ggt_doc_ref, ggt_trans_no, ggt_pol_policy_no,
    --                            ggt_cmb_claim_no, ggt_pro_code, ggt_pol_batch_no,
    --                            ggt_pro_sht_desc, ggt_btr_trans_code,
    --                            ggt_done_by, ggt_done_date,
    --                            ggt_client_policy_number, ggt_uw_clm_tran,
    --                            ggt_trans_date, ggt_effective_date
    --                           )
    --                    VALUES (NULL, v_trans_no, NULL,
    --                            NULL, NULL, NULL,
    --                            NULL, 'RI',
    --                            v_user_name, TRUNC (SYSDATE),
    --                            NULL, 'R',
    --                            TRUNC (SYSDATE), v_auth_date
    --                           );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error creating claim transaction..');
    --            END;

    --            BEGIN
    --               UPDATE gin_xol_prem_payment_dtls
    --                  SET xppd_authorized = 'Y',
    --                      xppd_authorized_by = v_user_name,
    --                      xppd_authorized_date = SYSDATE,
    --                      xppd_drcr_no = v_premType || cur_rec.xppd_code
    --                WHERE xppd_code = cur_rec.xppd_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error updating GIN_XOL_PREM_PAYMENT_DTLS ');
    --            END;

    ----raise_error(v_user_name||v_mtran_no||'vpaymethod'||vpaymethod);
    ----            IF vpaymethod IN ('CHQ','CR')
    ----            THEN
    --               BEGIN
    ----            raise_error(v_user_name||v_mtran_no);
    --                  gis_accounts_utilities.process_mdp_payments (v_user_name,
    --                                                                                       v_mtran_no,
    --                                                                                       v_premType,
    --                                                                                       vpaymethod
    --                                                                                       );
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error ('Error creating cheque..');
    --               END;
    ----            END IF;

    --            BEGIN
    --               UPDATE gin_gis_transactions
    --                  SET ggt_trans_authorised = 'A',
    --                      ggt_trans_authorised_by = v_user_name,
    --                      ggt_trans_authorise_date = TRUNC (SYSDATE)
    --                WHERE ggt_trans_no = v_trans_no AND ggt_btr_trans_code = NVL(v_premType,'MDP');
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error Authorising MDP payments..');
    --                  RETURN;
    --            END;
    --         END IF;

    ----raise_error ('Error Updating paid amount...');
    --         BEGIN
    --            UPDATE gin_xol_premium_payments
    --               SET xpp_authorized_by = v_user_name,
    --                   xpp_authorized_date = SYSDATE,
    --                   xpp_authorized = 'Y'
    --             WHERE xpp_code = v_xp_code AND xpp_authorized = 'N';
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error updating GIN_XOL_PREMIUM_PAYMENTS ');
    --         END;

    --         vxp_code := cur_rec.xppd_xp_code;
    --      END LOOP;

    --      BEGIN
    --         SELECT NVL (xp_amount_paid, 0) + v_mdp_amt, xp_payable_amt
    --           INTO v_bal, v_payable_amt
    --           FROM gin_xol_premiums
    --          WHERE xp_code = vxp_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            v_bal := 0;
    --      END;

    --      IF v_bal = v_payable_amt
    --      THEN
    --         BEGIN
    --            UPDATE gin_xol_premiums
    --               SET xp_amount_paid =
    --                             NVL (xp_amount_paid, 0)
    --                             + ABS (NVL (v_mdp_amt, 0)),
    --                   xp_os_amt = NVL (xp_os_amt, 0) - ABS (NVL (v_mdp_amt, 0)),
    --                   xp_authorized =
    --                               DECODE (xp_authorized,
    --                                       'N', 'Y',
    --                                       xp_authorized
    --                                      ),
    --                   xp_authorized_date = NVL (xp_authorized_date, SYSDATE),
    --                   xp_authorized_by = NVL (xp_authorized_by, v_user_name)
    --             WHERE xp_code = vxp_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error Updating paid amount...');
    --         END;
    --      ELSE
    --         BEGIN
    --            UPDATE gin_xol_premiums
    --               SET xp_amount_paid =
    --                             NVL (xp_amount_paid, 0)
    --                             + ABS (NVL (v_mdp_amt, 0)),
    --                   xp_os_amt = NVL (xp_os_amt, 0) - ABS (NVL (v_mdp_amt, 0))
    --             WHERE xp_code = vxp_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error Updating paid amount...');
    --         END;
    --      END IF;
    --   END;
    --   PROCEDURE process_mdp_payment (
    --      v_xp_code     IN   NUMBER,
    --      v_user_name   IN   VARCHAR2,
    --      v_premtype    IN   VARCHAR2
    --   )
    --   IS
    --      CURSOR mdp_payment_dtls
    --      IS
    --         SELECT *
    --           FROM gin_xol_prem_payment_dtls
    --          WHERE xppd_xpp_code = v_xp_code AND NVL (xppd_authorized, 'N') =
    --                                                                          'N';

    --      vgl_trans               fms_vouchers_pkg.tgl_rec_type;
    --      v_user_code             NUMBER;
    --      exc_user_error          EXCEPTION;
    --      v_brh_name              VARCHAR2 (100);
    --      v_crt_acc_number        VARCHAR2 (20);
    --      v_crt_acc_org_code      NUMBER;
    --      v_trnt_gl_code          VARCHAR2 (20);
    --      v_trnt_contra_gl_code   VARCHAR2 (20);
    --      v_trnt_code             VARCHAR2 (20);
    --      v_acc_type              VARCHAR2 (20);
    --      v_cqr_source            NUMBER;
    --      v_rec_count             NUMBER                        := 0;
    --      v_org_code              NUMBER;
    --      v_exch_rate             NUMBER;
    --      v_rnd                   NUMBER;
    --      v_bcur_rnd              NUMBER;
    --      v_cur_code              NUMBER;
    --      v_paymnt_brh_code       NUMBER;
    --      v_mdp_amt               NUMBER;
    --      v_part_mdp_amt          NUMBER;
    --      v_trt_qs_amt            NUMBER;
    --      v_trt_fst_amt           NUMBER;
    --      v_trt_sec_amt           NUMBER;
    --      v_trt_fac_amt           NUMBER;
    --      v_lvl                   VARCHAR2 (15);
    --      rev_type                VARCHAR2 (15);
    --      v_control_acc           VARCHAR2 (30);
    --      v_client_type           VARCHAR2 (5);
    --      v_act_code              NUMBER;
    --      vgl_code                NUMBER;
    --      v_drcr                  VARCHAR2 (1);
    --      v_agn_account           VARCHAR2 (30);
    --      v_mtran_no              NUMBER;
    --      vpaymethod              VARCHAR2 (10)                 := 'CHQ';
    --      v_trans_no              VARCHAR2 (200);
    --      v_auth_date             DATE;
    --      v_agn_name              VARCHAR2 (200);
    --      v_payable_amt           NUMBER;
    --      v_bal                   NUMBER;
    --      vxp_code                NUMBER;
    --      v_part_taxes_amt        NUMBER;
    --      v_rec_count_eft         NUMBER                        := 0;
    --   BEGIN
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

    -----raise_error('v_xp_code'||v_xp_code);
    --      IF v_user_code IS NULL
    --      THEN
    --         raise_error ('Failed to obtain the user');
    --      END IF;

    --      vgl_trans.DELETE;
    --      v_rec_count := -1;
    --      v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');

    --      --  vgl_trans .DELETE;
    --      FOR cur_rec IN mdp_payment_dtls
    --      LOOP
    --         ---get the participant payment modes
    --         BEGIN
    --            SELECT xolp_cpm_mode
    --              INTO vpaymethod
    --              FROM gin_xol_participants
    --             WHERE xolp_code = cur_rec.xppd_xolp_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               vpaymethod := 'CHQ';
    --         END;

    --         --tqc_organizations
    --         v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
    --         v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);

    --         IF SIGN (cur_rec.xppd_amount) = -1
    --         THEN
    --            v_mdp_amt := NVL (v_mdp_amt, 0) +   NVL (cur_rec.xppd_amount, 0)
    --                                              * -1;
    --            v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * -1;
    --            ---summation of reinsurance and premium tax
    --            v_part_taxes_amt :=
    --                 (  NVL (cur_rec.xppd_prem_tax, 0)
    --                  + NVL (cur_rec.xppd_rein_tax, 0)
    --                 )
    --               * -1;
    --            v_drcr := 'C';
    --         ELSE
    --            v_mdp_amt := NVL (v_mdp_amt, 0) + NVL (cur_rec.xppd_amount, 0)
    --                                              * 1;
    --            v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * 1;
    --            v_part_taxes_amt :=
    --                 (  NVL (cur_rec.xppd_prem_tax, 0)
    --                  + NVL (cur_rec.xppd_rein_tax, 0)
    --                 )
    --               * 1;
    --            v_drcr := 'D';
    --         END IF;

    --         v_exch_rate :=
    --            get_currexch_rate (NVL (cur_rec.xppd_cur_code, 1),
    --                               v_rnd,
    --                               v_bcur_rnd
    --                              );
    --         v_cur_code := cur_rec.xppd_cur_code;
    --         v_rec_count := v_rec_count + 2;

    --         IF NVL (v_part_mdp_amt, 0) <> 0
    --         THEN
    --            BEGIN
    --               SELECT agn_sht_desc, agn_name
    --                 INTO v_agn_account, v_agn_name
    --                 FROM tqc_agencies
    --                WHERE agn_code = cur_rec.xppd_agnt_agent_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error:- Agency not found...');
    --            END;

    --            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
    --                   || gin_mtran_no_seq.NEXTVAL
    --              INTO v_mtran_no
    --              FROM DUAL;

    --            BEGIN
    --               -- RAISE_ERROR('ERROR TAXES=='||v_part_taxes_amt||'TYPE=='||v_drcr);
    --               INSERT INTO gin_master_transactions
    --                           (mtran_no, mtran_date,
    --                            mtran_ref_no, mtran_other_ref, mtran_tran_type,
    --                            mtran_dc, mtran_control_acc, mtran_client_type,
    --                            mtran_client_code,
    --                            mtran_amount,
    --                            mtran_balance,
    --                            mtran_pol_batch_no, mtran_scl_code,
    --                            mtran_narrations,
    --                            mtran_rei_code, mtran_client_polcy_no,
    --                            mtran_pol_ren_endos_no, mtran_acct_code,
    --                            mtran_ggt_tran_no,
    --                            mtran_net_amt,
    --                            mtran_posting_date, mtran_cmb_claim_no,
    --                            mtran_prp_code, mtran_authorised,
    --                            mtran_date_authorized, mtran_authorised_by,
    --                            mtran_pro_sht_desc, mtran_pro_code,
    --                            mtran_origin, mtran_cur_code, mtran_cur_symbol,
    --                            mtran_cur_rate, mtran_btr_trans_code,
    --                            mtran_brn_code, mtran_payee,
    --                            mtran_extras
    --                           )
    --                    VALUES (v_mtran_no, TRUNC (SYSDATE),
    --                            v_premtype || cur_rec.xppd_code, NULL, 'MDP',
    --                            v_drcr, v_agn_account, 'R',
    --                            cur_rec.xppd_agnt_agent_code,
    --                            DECODE (v_drcr,
    --                                    'D', ABS (cur_rec.xppd_net_payable),
    --                                    -ABS (cur_rec.xppd_net_payable)
    --                                   ),
    ----                            DECODE (v_drcr,
    ----                                    'D', ABS (cur_rec.xppd_net_payable),
    ----                                    -ABS (cur_rec.xppd_net_payable)
    ----                                   )
    --                                  -- ,
    ----                            DECODE (v_drcr,
    ----                                    'D', ABS (cur_rec.xppd_net_payable),
    ----                                    -ABS (cur_rec.xppd_net_payable)
    ----                                   ),
    --                            DECODE (v_drcr,
    --                                    'D', ABS (cur_rec.xppd_amount),
    --                                    -ABS (cur_rec.xppd_amount)
    --                                   ),
    --                            NULL, NULL,
    --                            DECODE (v_drcr,
    --                                    'C', v_premtype || ' CREDIT',
    --                                    'D', v_premtype || ' DEBIT'
    --                                   ),
    --                            NULL, NULL,
    --                            NULL, v_premtype,
    --                            NULL,
    ----                            DECODE (v_drcr,
    ----                                    'D', ABS (cur_rec.xppd_net_payable),
    ----                                    -ABS (cur_rec.xppd_net_payable)
    ----                                   ),
    --                            DECODE (v_drcr,
    --                                    'D', ABS (cur_rec.xppd_amount),
    --                                    -ABS (cur_rec.xppd_amount)
    --                                   ),
    --                            TRUNC (SYSDATE), NULL,
    --                            NULL, 'Y',
    --                            TRUNC (SYSDATE), v_user_name,
    --                            NULL, NULL,
    --                            'R', v_cur_code, NULL,
    --                            v_exch_rate, v_premtype,
    --                            v_paymnt_brh_code, v_agn_name,
    --                            DECODE (v_drcr,
    --                                    'D', ABS (v_part_taxes_amt),
    --                                    -ABS (v_part_taxes_amt)
    --                                   )
    --                           );
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error ('ERROR UPDATING XOL MDP STATEMENTS...'||cur_rec.XPPD_CODE);
    --            END;

    --            BEGIN
    --               SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                 || ggt_trans_no_seq.NEXTVAL
    --                                )
    --                 INTO v_trans_no
    --                 FROM DUAL;

    --               INSERT INTO gin_gis_transactions
    --                           (ggt_doc_ref, ggt_trans_no, ggt_pol_policy_no,
    --                            ggt_cmb_claim_no, ggt_pro_code, ggt_pol_batch_no,
    --                            ggt_pro_sht_desc, ggt_btr_trans_code,
    --                            ggt_done_by, ggt_done_date,
    --                            ggt_client_policy_number, ggt_uw_clm_tran,
    --                            ggt_trans_date, ggt_effective_date
    --                           )
    --                    VALUES (NULL, v_trans_no, NULL,
    --                            NULL, NULL, NULL,
    --                            NULL, 'RI',
    --                            v_user_name, TRUNC (SYSDATE),
    --                            NULL, 'R',
    --                            TRUNC (SYSDATE), v_auth_date
    --                           );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error creating claim transaction..');
    --            END;

    ----raise_error(v_user_name||v_mtran_no||'vpaymethod'||vpaymethod);
    ----         IF vpaymethod IN ('CHQ','CR')
    ----          THEN
    --            BEGIN
    ----            raise_error(v_user_name||v_mtran_no);
    --               gis_accounts_utilities.process_mdp_payments (v_user_name,
    --                                                            v_mtran_no,
    --                                                            v_premtype,
    --                                                            NVL (vpaymethod,
    --                                                                 'CHQ'
    --                                                                )
    --                                                           );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error creating cheque..');
    --            END;

    --            -- END IF;
    --            BEGIN
    --               UPDATE gin_gis_transactions
    --                  SET ggt_trans_authorised = 'A',
    --                      ggt_trans_authorised_by = v_user_name,
    --                      ggt_trans_authorise_date = TRUNC (SYSDATE)
    --                WHERE ggt_trans_no = v_trans_no
    --                  AND ggt_btr_trans_code = NVL (v_premtype, 'MDP');
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error Authorising MDP payments..');
    --                  RETURN;
    --            END;
    --         END IF;

    --         BEGIN
    --            UPDATE gin_xol_prem_payment_dtls
    --               SET xppd_authorized = 'Y',
    --                   xppd_authorized_by = v_user_name,
    --                   xppd_authorized_date = SYSDATE,
    --                   xppd_drcr_no = v_premtype || cur_rec.xppd_code
    --             WHERE xppd_code = cur_rec.xppd_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error updating GIN_XOL_PREM_PAYMENT_DTLS ');
    --         END;

    ----raise_error ('Error Updating paid amount...');
    --         BEGIN
    --            UPDATE gin_xol_premium_payments
    --               SET xpp_authorized_by = v_user_name,
    --                   xpp_authorized_date = SYSDATE,
    --                   xpp_authorized = 'Y'
    --             WHERE xpp_code = v_xp_code AND xpp_authorized = 'N';
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error updating GIN_XOL_PREMIUM_PAYMENTS ');
    --         END;

    --         vxp_code := cur_rec.xppd_xp_code;
    --      END LOOP;

    --      BEGIN
    --         SELECT NVL (xp_amount_paid, 0) + v_mdp_amt, xp_payable_amt
    --           INTO v_bal, v_payable_amt
    --           FROM gin_xol_premiums
    --          WHERE xp_code = vxp_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            v_bal := 0;
    --      END;

    --      IF v_bal = v_payable_amt
    --      THEN
    --         BEGIN
    --            UPDATE gin_xol_premiums
    --               SET xp_amount_paid =
    --                             NVL (xp_amount_paid, 0)
    --                             + ABS (NVL (v_mdp_amt, 0)),
    --                   xp_os_amt = NVL (xp_os_amt, 0) - ABS (NVL (v_mdp_amt, 0)),
    --                   xp_authorized =
    --                               DECODE (xp_authorized,
    --                                       'N', 'Y',
    --                                       xp_authorized
    --                                      ),
    --                   xp_authorized_date = NVL (xp_authorized_date, SYSDATE),
    --                   xp_authorized_by = NVL (xp_authorized_by, v_user_name)
    --             WHERE xp_code = vxp_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error Updating paid amount...');
    --         END;
    --      ELSE
    --         BEGIN
    --            UPDATE gin_xol_premiums
    --               SET xp_amount_paid =
    --                             NVL (xp_amount_paid, 0)
    --                             + ABS (NVL (v_mdp_amt, 0)),
    --                   xp_os_amt = NVL (xp_os_amt, 0) - ABS (NVL (v_mdp_amt, 0))
    --             WHERE xp_code = vxp_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error Updating paid amount...');
    --         END;
    --      END IF;
    --   END;

    --PROCEDURE process_mdp_payment (v_xp_code IN NUMBER, v_user_name IN VARCHAR2, v_premType IN VARCHAR2)
    --   IS
    --      CURSOR mdp_payment_dtls
    --      IS
    --         SELECT *
    --           FROM gin_xol_prem_payment_dtls
    --          WHERE xppd_xpp_code = v_xp_code AND NVL (xppd_authorized, 'N') =   'N';

    --      vgl_trans               fms_vouchers_pkg.tgl_rec_type;
    --      v_user_code             NUMBER;
    --      exc_user_error          EXCEPTION;
    --      v_brh_name              VARCHAR2 (100);
    --      v_crt_acc_number        VARCHAR2 (20);
    --      v_crt_acc_org_code      NUMBER;
    --      v_trnt_gl_code          VARCHAR2 (20);
    --      v_trnt_contra_gl_code   VARCHAR2 (20);
    --      v_trnt_code             VARCHAR2 (20);
    --      v_acc_type              VARCHAR2 (20);
    --      v_cqr_source            NUMBER;
    --      v_rec_count             NUMBER                        := 0;
    --      v_org_code              NUMBER;
    --      v_exch_rate             NUMBER;
    --      v_rnd                   NUMBER;
    --      v_bcur_rnd              NUMBER;
    --      v_cur_code              NUMBER;
    --      v_paymnt_brh_code       NUMBER;
    --      v_mdp_amt               NUMBER;
    --      v_part_mdp_amt          NUMBER;
    --      v_trt_qs_amt            NUMBER;
    --      v_trt_fst_amt           NUMBER;
    --      v_trt_sec_amt           NUMBER;
    --      v_trt_fac_amt           NUMBER;
    --      v_lvl                   VARCHAR2 (15);
    --      rev_type                VARCHAR2 (15);
    --      v_control_acc           VARCHAR2 (30);
    --      v_client_type           VARCHAR2 (5);
    --      v_act_code              NUMBER;
    --      vgl_code                NUMBER;
    --      v_drcr                  VARCHAR2 (1);
    --      v_agn_account           VARCHAR2 (30);
    --      v_mtran_no              NUMBER;
    --      vpaymethod              VARCHAR2 (10)                 := 'CHQ';
    --      v_trans_no              VARCHAR2 (200);
    --      v_auth_date             DATE;
    --      v_agn_name              VARCHAR2 (200);
    --      v_payable_amt           NUMBER;
    --      v_bal                   NUMBER;
    --      vxp_code                NUMBER;
    --      v_part_taxes_amt    NUMBER;
    --      v_rec_count_eft  NUMBER := 0;
    --      v_net_payable_cur NUMBER;
    --      v_amount_cur  NUMBER ;
    --      v_part_taxes_amt_cur NUMBER;
    --      v_prepared_by    VARCHAR2 (200);
    --      v_prem_pymnts_count NUMBER;
    --
    --   BEGIN
    ----   RAISE_ERROR('v_premType='||v_premType);
    -----CHECK IF THE PREMIUM PAYMENT  TRANSACTIONS HAVE  ALREADY BEEN AUTHORISED
    --  SELECT COUNT(*)  into v_prem_pymnts_count
    --      FROM GIN_XOL_PREMIUM_PAYMENTS  WHERE  XPP_AUTHORIZED='Y'   AND XPP_CODE=v_xp_code;
    --
    --     IF v_prem_pymnts_count=1 THEN
    --     RAISE_ERROR('You cannot Make Ready an already Authorised Transaction');
    --     END IF;
    --
    --    ---transaction No
    --               SELECT TO_NUMBER (   TO_CHAR (SYSDATE, 'YYYY')
    --                                 || ggt_trans_no_seq.NEXTVAL
    --                                )
    --                 INTO v_trans_no
    --                 FROM DUAL;

    ----    --maker checker check
    ----       BEGIN
    ----       SELECT XPP_PREPARED_BY
    ----           INTO v_prepared_by
    ----               FROM gin_xol_premium_payments
    ----                 WHERE  XPP_CODE = v_xp_code;
    ----       END;
    ------       IF v_prepared_by = v_user_name
    ------        THEN
    ------            raise_error('You cannot Prepare and Authorize XOL payments');
    ------       END IF;
    ---- IF NVL(GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('MDP_PAYMENT_MAKER_CHECK'),'N') ='Y' THEN
    ----       IF v_prepared_by = v_user_name
    ----        THEN
    ----            raise_error('You cannot Prepare and Authorize XOL payments');
    ----       END IF;
    ----      END IF;
    ----
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));
    ----raise_error('v_xp_code'||v_xp_code);
    --      IF v_user_code IS NULL
    --      THEN
    --         raise_error ('Failed to obtain the user');
    --      END IF;

    --      vgl_trans.DELETE;
    --      v_rec_count := -1;
    --      v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');

    --      --  vgl_trans .DELETE;
    --      FOR cur_rec IN mdp_payment_dtls
    --      LOOP
    --      ---get the participant payment modes
    --          begin
    --          select xolp_cpm_mode  into vpaymethod
    --          from
    --          gin_xol_participants WHERE xolp_code=cur_rec.xppd_xolp_code;
    --          exception  when others then
    --          vpaymethod:='CHQ';
    --          end;
    --         --tqc_organizations
    --         v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
    --         v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);
    --
    --
    --         IF SIGN (cur_rec.xppd_amount) = -1
    --         THEN
    --            v_mdp_amt := NVL (v_mdp_amt, 0) +   NVL (cur_rec.xppd_amount, 0)
    --                                              * -1;
    --            v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * -1;
    --
    --            ---summation of reinsurance and premium tax
    --            v_part_taxes_amt:= (NVL (cur_rec.xppd_prem_tax, 0)+NVL (cur_rec.xppd_rein_tax, 0)) * -1;
    --            v_drcr := 'C';
    --         ELSE
    --            v_mdp_amt := NVL (v_mdp_amt, 0) + NVL (cur_rec.xppd_amount, 0)
    --                                              * 1;
    --            v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * 1;
    --
    --            v_part_taxes_amt:= (NVL (cur_rec.xppd_prem_tax, 0)+NVL (cur_rec.xppd_rein_tax, 0)) * 1;
    --            v_drcr := 'D';
    --         END IF;

    --         v_exch_rate :=
    --            get_currexch_rate (NVL (cur_rec.xppd_cur_code, 1),
    --                               v_rnd,
    --                               v_bcur_rnd
    --                              );
    --         v_cur_code := cur_rec.xppd_cur_code;
    --         v_rec_count := v_rec_count + 2;

    --         IF NVL (v_part_mdp_amt, 0) <> 0
    --         THEN
    --            BEGIN
    --               SELECT agn_sht_desc, agn_name
    --                 INTO v_agn_account, v_agn_name
    --                 FROM tqc_agencies
    --                WHERE agn_code = cur_rec.xppd_agnt_agent_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error:- Agency not found...');
    --            END;
    --         ---Mtran No
    --            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
    --                   || gin_mtran_no_seq.NEXTVAL
    --              INTO v_mtran_no
    --              FROM DUAL;
    --
    --
    --          if cur_rec.xppd_cur_new_rate is not null
    --          and
    --          cur_rec.xppd_cur_new_code is not null
    --          and gin_parameters_pkg.get_param_varchar('MDP_CURRENCY_RATE_PARAM') ='Y' then
    --           v_exch_rate := get_currexch_rate (cur_rec.xppd_cur_new_code,
    --                               v_rnd,
    --                               v_bcur_rnd
    --                              );
    ----          v_net_payable_cur:=ROUND(NVL (cur_rec.xppd_net_payable,0)/ NVL(cur_rec.xppd_cur_new_rate,0),v_rnd);
    ----          v_amount_cur:=ROUND(NVL(cur_rec.xppd_amount,0)/NVL(cur_rec.xppd_cur_new_rate,0),v_rnd);
    ----          v_part_taxes_amt_cur:=ROUND(NVL( v_part_taxes_amt,0)/NVL( cur_rec.xppd_cur_new_rate,0),v_rnd);
    ----          v_cur_code := cur_rec.xppd_cur_new_code;
    ----          v_exch_rate:=cur_rec.xppd_cur_new_rate;
    --          v_net_payable_cur:=ROUND((NVL (cur_rec.xppd_net_payable,0)/ cur_rec.xppd_cur_new_rate),v_rnd);
    --          v_amount_cur:=ROUND((NVL(cur_rec.xppd_amount,0)/cur_rec.xppd_cur_new_rate),v_rnd);
    --          v_part_taxes_amt_cur:=ROUND((NVL(v_part_taxes_amt,0)/cur_rec.xppd_cur_new_rate),v_rnd);
    --          v_cur_code := cur_rec.xppd_cur_new_code;
    --          v_exch_rate:=cur_rec.xppd_cur_new_rate;
    --
    --          ELSE
    --
    --          v_net_payable_cur:=round(cur_rec.xppd_net_payable,v_rnd);
    --          v_amount_cur:=round(cur_rec.xppd_amount,v_rnd);
    --          v_part_taxes_amt_cur:=round(v_part_taxes_amt,v_rnd);
    --
    --            -- RAISE_ERROR('v_net_payable_cur='||v_net_payable_cur||'v_amount_cur='||v_amount_cur||'v_part_taxes_amt_cur='||v_part_taxes_amt_cur||'v_rnd='||v_rnd);
    --          END IF;
    --           BEGIN
    ----          RAISE_ERROR('v_cur_code=='||v_cur_code||'v_exch_rate==='||v_exch_rate);
    ----raise_error('v_net_payable_cur='||v_net_payable_cur||'cur_rec.xppd_cur_new_rate='||v_amount_cur||' v_part_taxes_amt_cur ='|| v_part_taxes_amt_cur ||'v_part_taxes_amt='||v_part_taxes_amt||'v_mtran_no='||v_mtran_no);
    --               INSERT INTO gin_master_transactions
    --                           (mtran_no, mtran_date,
    --                            mtran_ref_no, mtran_other_ref, mtran_tran_type,
    --                            mtran_dc, mtran_control_acc, mtran_client_type,
    --                            mtran_client_code,
    --                            mtran_amount,
    --                            mtran_balance,
    --                            mtran_pol_batch_no, mtran_scl_code,
    --                            mtran_narrations,
    --                            mtran_rei_code, mtran_client_polcy_no,
    --                            mtran_pol_ren_endos_no, mtran_acct_code,
    --                            mtran_ggt_tran_no,
    --                            mtran_net_amt,
    --                            mtran_posting_date, mtran_cmb_claim_no,
    --                            mtran_prp_code, mtran_authorised,
    --                            mtran_date_authorized, mtran_authorised_by,
    --                            mtran_pro_sht_desc, mtran_pro_code,
    --                            mtran_origin, mtran_cur_code, mtran_cur_symbol,
    --                            mtran_cur_rate, mtran_btr_trans_code,
    --                            mtran_brn_code, mtran_payee,mtran_extras
    --                           )
    --                    VALUES (v_mtran_no, TRUNC (SYSDATE),
    --                            NVL(v_premType,'MDP') || cur_rec.xppd_code, NULL,NVL(v_premType,'MDP'),
    --                            v_drcr, v_agn_account, 'R',
    --                            cur_rec.xppd_agnt_agent_code,
    --                             DECODE (v_drcr,
    --                                    'D', ABS (v_net_payable_cur),
    --                                    -ABS (v_net_payable_cur)
    --                                   ),
    --
    ----                            DECODE (v_drcr,
    ----                                    'D', ABS (cur_rec.xppd_net_payable),
    ----                                    -ABS (cur_rec.xppd_net_payable)
    ----                                   )
    --                                  -- ,
    ----                            DECODE (v_drcr,
    ----                                    'D', ABS (cur_rec.xppd_net_payable),
    ----                                    -ABS (cur_rec.xppd_net_payable)
    ----                                   ),
    --                         DECODE (v_drcr,
    --                                    'D', ABS (v_amount_cur),
    --                                    -ABS (v_amount_cur)
    --                                   ),
    --                            NULL, NULL,
    --                            DECODE (v_drcr,
    --                                    'C', NVL(v_premType,'MDP')||' CREDIT',
    --                                    'D', NVL(v_premType,'MDP')||' DEBIT'
    --                                   ),
    --                            NULL, NULL,
    --                            NULL, NVL(v_premType,'MDP'),
    --                            v_trans_no,
    ----                            DECODE (v_drcr,
    ----                                    'D', ABS (cur_rec.xppd_net_payable),
    ----                                    -ABS (cur_rec.xppd_net_payable)
    ----                                   ),
    --                            DECODE (v_drcr,
    --                                    'D', ABS (v_amount_cur),
    --                                    -ABS (v_amount_cur)
    --                                   ),
    --                            TRUNC (SYSDATE), NULL,
    --                            NULL, 'R',
    --                            TRUNC (SYSDATE), v_user_name,
    --                            NULL, NULL,
    --                            'R', v_cur_code, NULL,
    --                            v_exch_rate, NVL(v_premType,'MDP'),
    --                            v_paymnt_brh_code, v_agn_name,DECODE (v_drcr,
    --                                    'D', abs (v_part_taxes_amt_cur),-ABS (v_part_taxes_amt_cur))
    --                           );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('ERROR UPDATING XOL MDP STATEMENTS...'||cur_rec.XPPD_CODE);
    --                  END;

    --
    --

    ------raise_error(v_user_name||v_mtran_no||'vpaymethod'||vpaymethod||'v_premType='||v_premType);
    ----         IF vpaymethod IN ('CHQ','CR')
    ----          THEN
    ----         BEGIN
    ------            raise_error(v_user_name||v_mtran_no);
    ----                  gis_accounts_utilities.process_mdp_payments (v_user_name,
    ----                                                                                       v_mtran_no,
    ----                                                                                       v_premType,
    ----                                                                                       nvl(vpaymethod,'CHQ')
    ----                                                                                       );
    ------            EXCEPTION
    ------               WHEN OTHERS
    ------               THEN
    ------                  raise_error ('Error creating cheque..');
    ----               END;
    --         -- END IF;

    ----            BEGIN
    ----               UPDATE gin_gis_transactions
    ----                  SET ggt_trans_authorised = 'A',
    ----                      ggt_trans_authorised_by = v_user_name,
    ----                      ggt_trans_authorise_date = TRUNC (SYSDATE)
    ----                WHERE ggt_trans_no = v_trans_no AND ggt_btr_trans_code = NVL(v_premType,'MDP');
    ----            EXCEPTION
    ----               WHEN OTHERS
    ----               THEN
    ----                  raise_error ('Error Authorising MDP payments..');
    ----                  RETURN;
    ----            END;
    --         END IF;


    --            BEGIN
    --               UPDATE gin_xol_prem_payment_dtls
    --                  SET xppd_authorized = 'R',
    --                      xppd_authorized_by = v_user_name,
    --                      xppd_authorized_date = SYSDATE,
    --                      xppd_drcr_no = v_premType || cur_rec.xppd_code
    --                WHERE xppd_code = cur_rec.xppd_code;
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error updating GIN_XOL_PREM_PAYMENT_DTLS ');
    --            END;
    ----raise_error ('Error Updating paid amount...');
    --         BEGIN
    --            UPDATE gin_xol_premium_payments
    --               SET xpp_authorized_by = v_user_name,
    --                   xpp_authorized_date = SYSDATE,
    --                   xpp_authorized = 'R'
    --             WHERE xpp_code = v_xp_code AND xpp_authorized = 'N';
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error updating GIN_XOL_PREMIUM_PAYMENTS ');
    --         END;

    --   vxp_code := cur_rec.xppd_xp_code;
    --      END LOOP;
    --
    --       BEGIN
    ------STATUS R MEANS THAT THE MDP /REINSTATEMENT HAS BEEN MADE READY
    --               INSERT INTO gin_gis_transactions
    --                           (ggt_doc_ref, ggt_trans_no, ggt_pol_policy_no,
    --                            ggt_cmb_claim_no, ggt_pro_code, ggt_pol_batch_no,
    --                            ggt_pro_sht_desc, ggt_btr_trans_code,
    --                            ggt_done_by, ggt_done_date,
    --                            ggt_client_policy_number, ggt_uw_clm_tran,
    --                            ggt_trans_date, ggt_effective_date,ggt_trans_authorised
    --                           )
    --                    VALUES (NULL, v_trans_no, NULL,
    --                            NULL, NULL, NULL,
    --                            NULL, v_premType,
    --                            v_user_name, TRUNC (SYSDATE),
    --                            NULL, 'R',
    --                            TRUNC (SYSDATE), v_auth_date,'N'
    --                           );
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error ('Error creating XOL transaction..');
    --            END;


    --      BEGIN
    --         SELECT NVL (xp_amount_paid, 0) + v_mdp_amt, xp_payable_amt
    --           INTO v_bal, v_payable_amt
    --           FROM gin_xol_premiums
    --          WHERE xp_code = vxp_code;
    --      EXCEPTION
    --         WHEN OTHERS
    --         THEN
    --            v_bal := 0;
    --      END;

    ----RAISE_ERROR('v_bal='||v_bal||'v_payable_amt='||v_payable_amt);
    --      IF v_bal = v_payable_amt
    --      THEN
    --         BEGIN
    --            UPDATE gin_xol_premiums
    --               SET xp_amount_paid =
    --                             NVL (xp_amount_paid, 0)
    --                             + ABS (NVL (v_mdp_amt, 0)),
    --                   xp_os_amt = NVL (xp_os_amt, 0) - ABS (NVL (v_mdp_amt, 0)),
    --                   xp_authorized =
    --                               DECODE (xp_authorized,
    --                                       'N', 'R',
    --                                       xp_authorized
    --                                      ),
    --                   xp_authorized_date = NVL (xp_authorized_date, SYSDATE),
    --                   xp_authorized_by = NVL (xp_authorized_by, v_user_name)
    --             WHERE xp_code = vxp_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error Updating paid amount...');
    --         END;
    --      ELSE
    --         BEGIN
    --            UPDATE gin_xol_premiums
    --               SET xp_amount_paid =
    --                             NVL (xp_amount_paid, 0)
    --                             + ABS (NVL (v_mdp_amt, 0)),
    --                   xp_os_amt = NVL (xp_os_amt, 0) - ABS (NVL (v_mdp_amt, 0)),
    --                    xp_authorized ='R'
    --             WHERE xp_code = vxp_code;
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('Error Updating paid amount...');
    --         END;
    --      END IF;
    --   END;

    PROCEDURE process_mdp_payment (v_xp_code     IN NUMBER,
                                   v_user_name   IN VARCHAR2,
                                   v_premType    IN VARCHAR2)
    IS
        CURSOR mdp_payment_dtls IS
            SELECT gin_xol_prem_payment_dtls.*,
                   DECODE (
                       XP_PREM_TYPE,
                       'MDP',    'MDP For '
                              || XOL_DESC
                              || '-'
                              || DECODE (XOL_TYPE,
                                         'C', 'Catastrophe',
                                         'W', 'Working XOL',
                                         'S', 'Stop Loss')
                              || '  Layer '
                              || XOLS_LAYER,
                       'PR',    'PR For '
                             || XOL_DESC
                             || '-'
                             || DECODE (XOL_TYPE,
                                        'C', 'Catastrophe',
                                        'W', 'Working XOL',
                                        'S', 'Stop Loss')
                             || '  Layer '
                             || XOLS_LAYER
                             || ' on Claim no '
                             || XP_CLAIM_NO)    narration,
                   xp_claim_no
              FROM gin_xol_premiums,
                   gin_xol_prem_payment_dtls,
                   gin_xol_treaty_setups,
                   gin_xol_treaties
             WHERE     xppd_xpp_code = v_xp_code
                   AND NVL (xppd_authorized, 'N') = 'N'
                   AND xol_code = xols_xol_code
                   AND xp_code = xppd_xp_code
                   AND xols_code = xp_xols_code;

        vgl_trans               fms_vouchers_pkg.tgl_rec_type;
        v_user_code             NUMBER;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_mdp_amt               NUMBER;
        v_part_mdp_amt          NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (15);
        rev_type                VARCHAR2 (15);
        v_control_acc           VARCHAR2 (30);
        v_client_type           VARCHAR2 (5);
        v_act_code              NUMBER;
        vgl_code                NUMBER;
        v_drcr                  VARCHAR2 (1);
        v_agn_account           VARCHAR2 (30);
        v_mtran_no              NUMBER;
        vpaymethod              VARCHAR2 (10) := 'CHQ';
        v_trans_no              VARCHAR2 (200);
        v_auth_date             DATE;
        v_agn_name              VARCHAR2 (200);
        v_payable_amt           NUMBER;
        v_bal                   NUMBER;
        vxp_code                NUMBER;
        v_part_taxes_amt        NUMBER;
        v_rec_count_eft         NUMBER := 0;
        v_part_whtx_amt         NUMBER := 0;
        v_part_whtx_amt_cur     NUMBER := 0;
        v_net_payable_cur       NUMBER;
        v_amount_cur            NUMBER;
        v_part_taxes_amt_cur    NUMBER;
        v_prepared_by           VARCHAR2 (200);
        v_prem_pymnts_count     NUMBER;
    BEGIN
           
        ---CHECK IF THE PREMIUM PAYMENT  TRANSACTIONS HAVE  ALREADY BEEN AUTHORISED
        
        SELECT COUNT (*)
          INTO v_prem_pymnts_count
          FROM GIN_XOL_PREMIUM_PAYMENTS
         WHERE XPP_AUTHORIZED = 'Y' AND XPP_CODE = v_xp_code;

        IF v_prem_pymnts_count = 1
        THEN
            RAISE_ERROR (
                'You cannot Make Ready an already Authorised Transaction');
        END IF;

        ---transaction No
        SELECT TO_NUMBER (
                   TO_CHAR (SYSDATE, 'YYYY') || ggt_trans_no_seq.NEXTVAL)
          INTO v_trans_no
          FROM DUAL;

        --    --maker checker check
        --       BEGIN
        --       SELECT XPP_PREPARED_BY
        --           INTO v_prepared_by
        --               FROM gin_xol_premium_payments
        --                 WHERE  XPP_CODE = v_xp_code;
        --       END;
        ----       IF v_prepared_by = v_user_name
        ----        THEN
        ----            raise_error('You cannot Prepare and Authorize XOL payments');
        ----       END IF;
        -- IF NVL(GIN_PARAMETERS_PKG.GET_PARAM_VARCHAR('MDP_PAYMENT_MAKER_CHECK'),'N') ='Y' THEN
        --       IF v_prepared_by = v_user_name
        --        THEN
        --            raise_error('You cannot Prepare and Authorize XOL payments');
        --       END IF;
        --      END IF;
        --
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        --raise_error('v_xp_code'||v_xp_code);
        IF v_user_code IS NULL
        THEN
            raise_error ('Failed to obtain the user');
        END IF;

        vgl_trans.DELETE;
        v_rec_count := -1;
        v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');

        --  vgl_trans .DELETE;
        FOR cur_rec IN mdp_payment_dtls
        LOOP
            ---get the participant payment modes
            BEGIN
                SELECT xolp_cpm_mode
                  INTO vpaymethod
                  FROM gin_xol_participants
                 WHERE xolp_code = cur_rec.xppd_xolp_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    vpaymethod := 'CHQ';
            END;

            --tqc_organizations
            v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
            v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);


            IF SIGN (cur_rec.xppd_amount) = -1
            THEN
                v_mdp_amt :=
                    NVL (v_mdp_amt, 0) + NVL (cur_rec.xppd_amount, 0) * -1;
                v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * -1;

                ---summation of reinsurance and premium tax
                v_part_taxes_amt :=
                      (  NVL (cur_rec.xppd_prem_tax, 0))
--                       + NVL (cur_rec.xppd_rein_tax, 0))
                    * -1;
                v_part_whtx_amt :=
                     (  NVL (cur_rec.xppd_rein_tax, 0)
                     )
                   * -1;
                v_drcr := 'C';
            ELSE
                v_mdp_amt :=
                    NVL (v_mdp_amt, 0) + NVL (cur_rec.xppd_amount, 0) * 1;
                v_part_mdp_amt := NVL (cur_rec.xppd_net_payable, 0) * 1;

                v_part_taxes_amt :=
                      (  NVL (cur_rec.xppd_prem_tax, 0))
--                       + NVL (cur_rec.xppd_rein_tax, 0))
                    * 1;
                v_part_whtx_amt :=
                     (  NVL (cur_rec.xppd_rein_tax, 0)
                     )
                   * 1;

                v_drcr := 'D';
            END IF;

            v_exch_rate :=
                get_currexch_rate (NVL (cur_rec.xppd_cur_code, 1),
                                   v_rnd,
                                   v_bcur_rnd);
            v_cur_code := cur_rec.xppd_cur_code;
            v_rec_count := v_rec_count + 2;

            IF NVL (v_part_mdp_amt, 0) <> 0
            THEN
                BEGIN
                    SELECT agn_sht_desc, agn_name
                      INTO v_agn_account, v_agn_name
                      FROM tqc_agencies
                     WHERE agn_code = cur_rec.xppd_agnt_agent_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error ('Error:- Agency not found...');
                END;

                ---Mtran No
                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                       || gin_mtran_no_seq.NEXTVAL
                  INTO v_mtran_no
                  FROM DUAL;


                IF     cur_rec.xppd_cur_new_rate IS NOT NULL
                   AND cur_rec.xppd_cur_new_code IS NOT NULL
                   AND gin_parameters_pkg.get_param_varchar (
                           'MDP_CURRENCY_RATE_PARAM') =
                       'Y'
                THEN
                    v_exch_rate :=
                        get_currexch_rate (cur_rec.xppd_cur_new_code,
                                           v_rnd,
                                           v_bcur_rnd);
                    --          v_net_payable_cur:=ROUND(NVL (cur_rec.xppd_net_payable,0)/ NVL(cur_rec.xppd_cur_new_rate,0),v_rnd);
                    --          v_amount_cur:=ROUND(NVL(cur_rec.xppd_amount,0)/NVL(cur_rec.xppd_cur_new_rate,0),v_rnd);
                    --          v_part_taxes_amt_cur:=ROUND(NVL( v_part_taxes_amt,0)/NVL( cur_rec.xppd_cur_new_rate,0),v_rnd);
                    --          v_cur_code := cur_rec.xppd_cur_new_code;
                    --          v_exch_rate:=cur_rec.xppd_cur_new_rate;
                    v_net_payable_cur :=
                        ROUND (
                            (  NVL (cur_rec.xppd_net_payable, 0)
                             / cur_rec.xppd_cur_new_rate),
                            v_rnd);
                    v_amount_cur :=
                        ROUND (
                            (  NVL (cur_rec.xppd_amount, 0)
                             / cur_rec.xppd_cur_new_rate),
                            v_rnd);
                    v_part_taxes_amt_cur :=
                        ROUND (
                            (  NVL (v_part_taxes_amt, 0)
                             / cur_rec.xppd_cur_new_rate),
                            v_rnd);
                    v_part_whtx_amt_cur :=
                        ROUND (
                            (  NVL (v_part_whtx_amt, 0)
                             / cur_rec.xppd_cur_new_rate),
                            v_rnd);

                    v_cur_code := cur_rec.xppd_cur_new_code;
                    v_exch_rate := cur_rec.xppd_cur_new_rate;
                ELSE
                    v_net_payable_cur :=
                        ROUND (cur_rec.xppd_net_payable, v_rnd);
                    v_amount_cur := ROUND (cur_rec.xppd_amount, v_rnd);
                    v_part_taxes_amt_cur := ROUND (v_part_taxes_amt, v_rnd);
                    v_part_whtx_amt_cur := ROUND (v_part_whtx_amt, v_rnd);
                -- RAISE_ERROR('v_net_payable_cur='||v_net_payable_cur||'v_amount_cur='||v_amount_cur||'v_part_taxes_amt_cur='||v_part_taxes_amt_cur||'v_rnd='||v_rnd);
                END IF;
--                RAISE_ERROR('GIN_INTERFACES_PKG::LN 50045::v_part_whtx_amt_cur = '||v_part_whtx_amt_cur
--                ||'& v_net_payable_cur = '||v_net_payable_cur
--                ||'& v_part_taxes_amt_cur = '||v_part_taxes_amt_cur
--                ||'& v_amount_cur = '||v_amount_cur);
                BEGIN
                    --          RAISE_ERROR('v_cur_code=='||v_cur_code||'v_exch_rate==='||v_exch_rate);
                    --raise_error('v_net_payable_cur='||v_net_payable_cur||'cur_rec.xppd_cur_new_rate='||v_amount_cur||' v_part_taxes_amt_cur ='|| v_part_taxes_amt_cur ||'v_part_taxes_amt='||v_part_taxes_amt||'v_mtran_no='||v_mtran_no);
                    INSERT INTO gin_master_transactions (
                                    mtran_no,
                                    mtran_date,
                                    mtran_ref_no,
                                    mtran_other_ref,
                                    mtran_tran_type,
                                    mtran_dc,
                                    mtran_control_acc,
                                    mtran_client_type,
                                    mtran_client_code,
                                    mtran_amount,
                                    mtran_balance,
                                    mtran_pol_batch_no,
                                    mtran_scl_code,
                                    mtran_narrations,
                                    mtran_rei_code,
                                    mtran_client_polcy_no,
                                    mtran_pol_ren_endos_no,
                                    mtran_acct_code,
                                    mtran_ggt_tran_no,
                                    mtran_net_amt,
                                    mtran_posting_date,
                                    mtran_cmb_claim_no,
                                    mtran_prp_code,
                                    mtran_authorised,
                                    mtran_date_authorized,
                                    mtran_authorised_by,
                                    mtran_pro_sht_desc,
                                    mtran_pro_code,
                                    mtran_origin,
                                    mtran_cur_code,
                                    mtran_cur_symbol,
                                    mtran_cur_rate,
                                    mtran_btr_trans_code,
                                    mtran_brn_code,
                                    mtran_payee,
                                    mtran_extras,
                                    mtran_rct_paymt_mode,
                                    mtran_whtx)
                             VALUES (
                                 v_mtran_no,
                                 TRUNC (SYSDATE),
                                 NVL (v_premType, 'MDP') || cur_rec.xppd_code,
                                 NULL,
                                 NVL (v_premType, 'MDP'),
                                 v_drcr,
                                 v_agn_account,
                                 'R',
                                 cur_rec.xppd_agnt_agent_code,
                                 DECODE (v_drcr,
                                         'D', ABS (v_net_payable_cur),
                                         -ABS (v_net_payable_cur)),
                                 --                            DECODE (v_drcr,
                                 --                                    'D', ABS (cur_rec.xppd_net_payable),
                                 --                                    -ABS (cur_rec.xppd_net_payable)
                                 --                                   )
                                 -- ,
                                 --                            DECODE (v_drcr,
                                 --                                    'D', ABS (cur_rec.xppd_net_payable),
                                 --                                    -ABS (cur_rec.xppd_net_payable)
                                 --                                   ),
                                 DECODE (v_drcr,
                                         'D', ABS (v_amount_cur),
                                         -ABS (v_amount_cur)),
                                 NULL,
                                 NULL,
                                 cur_rec.narration,
                                 --                            DECODE (v_drcr,
                                 --                                    'C', NVL(v_premType,'MDP')||' CREDIT',
                                 --                                    'D', NVL(v_premType,'MDP')||' DEBIT'
                                 --                                   ),
                                 NULL,
                                 NULL,
                                 NULL,
                                 NVL (v_premType, 'MDP'),
                                 v_trans_no,
                                 --                            DECODE (v_drcr,
                                 --                                    'D', ABS (cur_rec.xppd_net_payable),
                                 --                                    -ABS (cur_rec.xppd_net_payable)
                                 --                                   ),
                                 DECODE (v_drcr,
                                         'D', ABS (v_amount_cur),
                                         -ABS (v_amount_cur)),
                                 TRUNC (SYSDATE),
                                 cur_rec.xp_claim_no,
                                 NULL,
                                 'R',
                                 TRUNC (SYSDATE),
                                 v_user_name,
                                 NULL,
                                 NULL,
                                 'R',
                                 v_cur_code,
                                 NULL,
                                 v_exch_rate,
                                 NVL (v_premType, 'MDP'),
                                 v_paymnt_brh_code,
                                 v_agn_name,
                                 DECODE (v_drcr,
                                         'D', ABS (v_part_taxes_amt_cur),
                                         -ABS (v_part_taxes_amt_cur)),
                                 vpaymethod,
                                 DECODE (v_drcr,
                                        'D', ABS (v_part_whtx_amt_cur),
                                        -ABS (v_part_whtx_amt_cur)
                                       ));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'ERROR UPDATING XOL MDP STATEMENTS...'
                            || cur_rec.XPPD_CODE);
                END;
            ----raise_error(v_user_name||v_mtran_no||'vpaymethod'||vpaymethod||'v_premType='||v_premType);
            --         IF vpaymethod IN ('CHQ','CR')
            --          THEN
            --         BEGIN
            ----            raise_error(v_user_name||v_mtran_no);
            --                  gis_accounts_utilities.process_mdp_payments (v_user_name,
            --                                                                                       v_mtran_no,
            --                                                                                       v_premType,
            --                                                                                       nvl(vpaymethod,'CHQ')
            --                                                                                       );
            ----            EXCEPTION
            ----               WHEN OTHERS
            ----               THEN
            ----                  raise_error ('Error creating cheque..');
            --               END;
            -- END IF;

            --            BEGIN
            --               UPDATE gin_gis_transactions
            --                  SET ggt_trans_authorised = 'A',
            --                      ggt_trans_authorised_by = v_user_name,
            --                      ggt_trans_authorise_date = TRUNC (SYSDATE)
            --                WHERE ggt_trans_no = v_trans_no AND ggt_btr_trans_code = NVL(v_premType,'MDP');
            --            EXCEPTION
            --               WHEN OTHERS
            --               THEN
            --                  raise_error ('Error Authorising MDP payments..');
            --                  RETURN;
            --            END;
            END IF;


            BEGIN
                UPDATE gin_xol_prem_payment_dtls
                   SET xppd_authorized = 'R',
                       xppd_authorized_by = v_user_name,
                       xppd_authorized_date = SYSDATE,
                       xppd_drcr_no = v_premType || cur_rec.xppd_code
                 WHERE xppd_code = cur_rec.xppd_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error updating GIN_XOL_PREM_PAYMENT_DTLS ');
            END;

            --raise_error ('Error Updating paid amount...');
            BEGIN
                UPDATE gin_xol_premium_payments
                   SET xpp_authorized_by = v_user_name,
                       xpp_authorized_date = SYSDATE,
                       xpp_authorized = 'R'
                 WHERE xpp_code = v_xp_code AND xpp_authorized = 'N';
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error updating GIN_XOL_PREMIUM_PAYMENTS ');
            END;

            vxp_code := cur_rec.xppd_xp_code;
        END LOOP;

        BEGIN
            ----STATUS R MEANS THAT THE MDP /REINSTATEMENT HAS BEEN MADE READY
            INSERT INTO gin_gis_transactions (ggt_doc_ref,
                                              ggt_trans_no,
                                              ggt_pol_policy_no,
                                              ggt_cmb_claim_no,
                                              ggt_pro_code,
                                              ggt_pol_batch_no,
                                              ggt_pro_sht_desc,
                                              ggt_btr_trans_code,
                                              ggt_done_by,
                                              ggt_done_date,
                                              ggt_client_policy_number,
                                              ggt_uw_clm_tran,
                                              ggt_trans_date,
                                              ggt_effective_date,
                                              ggt_trans_authorised)
                 VALUES (NULL,
                         v_trans_no,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         v_premType,
                         v_user_name,
                         TRUNC (SYSDATE),
                         NULL,
                         'R',
                         TRUNC (SYSDATE),
                         v_auth_date,
                         'N');
        EXCEPTION
            WHEN OTHERS
            THEN
                raise_error ('Error creating XOL transaction..');
        END;


        BEGIN
            SELECT NVL (xp_amount_paid, 0) + v_mdp_amt, xp_payable_amt
              INTO v_bal, v_payable_amt
              FROM gin_xol_premiums
             WHERE xp_code = vxp_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                v_bal := 0;
        END;

        --RAISE_ERROR('v_bal='||v_bal||'v_payable_amt='||v_payable_amt);
        IF v_bal = v_payable_amt
        THEN
            BEGIN
                UPDATE gin_xol_premiums
                   SET xp_amount_paid =
                           NVL (xp_amount_paid, 0) + ABS (NVL (v_mdp_amt, 0)),
                       xp_os_amt =
                           NVL (xp_os_amt, 0) - ABS (NVL (v_mdp_amt, 0)),
                       xp_authorized =
                           DECODE (xp_authorized, 'N', 'R', xp_authorized),
                       xp_authorized_date = NVL (xp_authorized_date, SYSDATE),
                       xp_authorized_by = NVL (xp_authorized_by, v_user_name)
                 WHERE xp_code = vxp_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error Updating paid amount...');
            END;
        ELSE
            BEGIN
                UPDATE gin_xol_premiums
                   SET xp_amount_paid =
                           NVL (xp_amount_paid, 0) + ABS (NVL (v_mdp_amt, 0)),
                       xp_os_amt =
                           NVL (xp_os_amt, 0) - ABS (NVL (v_mdp_amt, 0)),
                       xp_authorized = 'R'
                 WHERE xp_code = vxp_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('Error Updating paid amount...');
            END;
        END IF;
    END;

    --   PROCEDURE update_mdp (
    --      v_cqr_ref      IN   VARCHAR2,
    --      v_cqr_ref2     IN   VARCHAR2,
    --      v_cqr_chq_no   IN   VARCHAR2,
    --      v_cqr_chq_dt   IN   DATE,
    --      v_user_name    IN   VARCHAR2,
    --      v_cqr_amount   IN   NUMBER
    --   )
    --   IS
    --      v_credit_mtran_no     NUMBER;
    --      v_cr_amt              NUMBER (23, 5);
    --      v_cr_ref_no           VARCHAR2 (50);
    --      v_dr_mtran_no         NUMBER;
    --      v_dr_ref_no           VARCHAR2 (50);
    --      v_auto_allocate       VARCHAR2 (1)   := 'Y';
    --      v_mtran_no            NUMBER;
    --      v_drcr                VARCHAR2 (200);
    --      v_mtran_cur_code      NUMBER;
    --      v_mtran_cur_rate      NUMBER;
    --      v_mtran_client_code   NUMBER;
    --      v_mtran_control_acc   VARCHAR2 (200);
    --      v_amount              NUMBER;
    --   BEGIN
    --      BEGIN
    --         v_dr_mtran_no := REPLACE (v_cqr_ref, 'MDP/', '');
    --      END;

    --      BEGIN
    --         SELECT mtran_ref_no, mtran_cur_code, mtran_cur_rate,
    --                mtran_client_code, mtran_control_acc, mtran_dc
    --           INTO v_dr_ref_no, v_mtran_cur_code, v_mtran_cur_rate,
    --                v_mtran_client_code, v_mtran_control_acc, v_drcr
    --           FROM gin_master_transactions
    --          WHERE mtran_no = v_dr_mtran_no;

    --         SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
    --                || gin_mtran_no_seq.NEXTVAL
    --           INTO v_mtran_no
    --           FROM DUAL;

    --         IF v_drcr = 'D'
    --         THEN
    --            v_amount := NVL (v_cqr_amount, 0) * -1;
    --            v_drcr := 'C';
    --         ELSE
    --            v_amount := NVL (v_cqr_amount, 0) * 1;
    --            v_drcr := 'D';
    --         END IF;

    --         BEGIN
    --            INSERT INTO gin_master_transactions
    --                        (mtran_no, mtran_date, mtran_ref_no,
    --                         mtran_other_ref, mtran_tran_type, mtran_dc,
    --                         mtran_control_acc, mtran_client_type,
    --                         mtran_client_code,
    --                         mtran_amount,
    --                         mtran_balance,
    --                         mtran_pol_batch_no, mtran_scl_code,
    --                         mtran_narrations,
    --                         mtran_rei_code, mtran_client_polcy_no,
    --                         mtran_pol_ren_endos_no, mtran_acct_code,
    --                         mtran_ggt_tran_no,
    --                         mtran_net_amt,
    --                         mtran_posting_date, mtran_cmb_claim_no,
    --                         mtran_prp_code, mtran_authorised,
    --                         mtran_date_authorized, mtran_authorised_by,
    --                         mtran_pro_sht_desc, mtran_pro_code, mtran_origin,
    --                         mtran_cur_code, mtran_cur_symbol, mtran_cur_rate,
    --                         mtran_btr_trans_code, mtran_brn_code, mtran_payee
    --                        )
    --                 VALUES (v_mtran_no, TRUNC (SYSDATE), 'MDP',
    --                         NULL, 'MDP', v_drcr,
    --                         v_mtran_control_acc, 'R',
    --                         v_mtran_client_code,
    --                         DECODE (v_drcr, 'C', -ABS (v_amount), ABS (v_amount)),
    --                         DECODE (v_drcr, 'C', -ABS (v_amount), ABS (v_amount)),
    --                         NULL, NULL,
    --                         DECODE (v_drcr, 'C', 'MDP CREDIT', 'D', 'MDP DEBIT'),
    --                         NULL, NULL,
    --                         NULL, 'MDP',
    --                         NULL,
    --                         DECODE (v_drcr, 'C', -ABS (v_amount), ABS (v_amount)),
    --                         TRUNC (SYSDATE), NULL,
    --                         NULL, 'Y',
    --                         TRUNC (SYSDATE), v_user_name,
    --                         NULL, NULL, 'R',
    --                         v_mtran_cur_code, NULL, v_mtran_cur_rate,
    --                         'MDP', NULL, NULL
    --                        );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('ERROR UPDATING XOL MDP STATEMENTS...');
    --         END;
    --      END;
    --   END update_mdp;

    PROCEDURE update_mdp (v_cqr_ref      IN VARCHAR2,
                          v_cqr_ref2     IN VARCHAR2,
                          v_cqr_chq_no   IN VARCHAR2,
                          v_cqr_chq_dt   IN DATE,
                          v_user_name    IN VARCHAR2,
                          v_cqr_amount   IN NUMBER)
    IS
        v_credit_mtran_no     NUMBER;
        v_cr_amt              NUMBER (23, 5);
        v_cr_ref_no           VARCHAR2 (50);
        v_dr_mtran_no         NUMBER;
        v_dr_ref_no           VARCHAR2 (50);
        v_auto_allocate       VARCHAR2 (1) := 'Y';
        v_mtran_no            NUMBER;
        v_drcr                VARCHAR2 (200);
        v_mtran_cur_code      NUMBER;
        v_mtran_cur_rate      NUMBER;
        v_mtran_client_code   NUMBER;
        v_mtran_control_acc   VARCHAR2 (200);
        v_amount              NUMBER;
        v_xppd_xp_code        NUMBER;
        v_xp_os_amt           NUMBER;
        v_prem_type           VARCHAR2 (10);
    BEGIN
        -- BEGIN
        v_dr_mtran_no := REGEXP_REPLACE (v_cqr_ref, '[^0-9]');
        v_prem_type := REGEXP_REPLACE (v_cqr_ref, '[^A-Z]');

        -- v_dr_mtran_no := REPLACE (v_cqr_ref, 'MDP/', '');
        -- END;
        --raise_error('v_dr_mtran_no'||v_dr_mtran_no||'v_cqr_ref='||v_cqr_ref||'v_prem_type='||v_prem_type);

        BEGIN
            SELECT mtran_ref_no,
                   mtran_cur_code,
                   mtran_cur_rate,
                   mtran_client_code,
                   mtran_control_acc,
                   mtran_dc
              INTO v_dr_ref_no,
                   v_mtran_cur_code,
                   v_mtran_cur_rate,
                   v_mtran_client_code,
                   v_mtran_control_acc,
                   v_drcr
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;

            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                   || gin_mtran_no_seq.NEXTVAL
              INTO v_mtran_no
              FROM DUAL;

            IF v_drcr = 'D'
            THEN
                v_amount := NVL (v_cqr_amount, 0) * -1;
                v_drcr := 'C';
            ELSE
                v_amount := NVL (v_cqr_amount, 0) * 1;
                v_drcr := 'D';
            END IF;

            BEGIN
                INSERT INTO gin_master_transactions (mtran_no,
                                                     mtran_date,
                                                     mtran_ref_no,
                                                     mtran_other_ref,
                                                     mtran_tran_type,
                                                     mtran_dc,
                                                     mtran_control_acc,
                                                     mtran_client_type,
                                                     mtran_client_code,
                                                     mtran_amount,
                                                     mtran_balance,
                                                     mtran_pol_batch_no,
                                                     mtran_scl_code,
                                                     mtran_narrations,
                                                     mtran_rei_code,
                                                     mtran_client_polcy_no,
                                                     mtran_pol_ren_endos_no,
                                                     mtran_acct_code,
                                                     mtran_ggt_tran_no,
                                                     mtran_net_amt,
                                                     mtran_posting_date,
                                                     mtran_cmb_claim_no,
                                                     mtran_prp_code,
                                                     mtran_authorised,
                                                     mtran_date_authorized,
                                                     mtran_authorised_by,
                                                     mtran_pro_sht_desc,
                                                     mtran_pro_code,
                                                     mtran_origin,
                                                     mtran_cur_code,
                                                     mtran_cur_symbol,
                                                     mtran_cur_rate,
                                                     mtran_btr_trans_code,
                                                     mtran_brn_code,
                                                     mtran_payee)
                         VALUES (
                             v_mtran_no,
                             TRUNC (SYSDATE),
                             v_prem_type,
                             NULL,
                             v_prem_type,
                             v_drcr,
                             v_mtran_control_acc,
                             'R',
                             v_mtran_client_code,
                             DECODE (v_drcr,
                                     'C', -ABS (v_amount),
                                     ABS (v_amount)),
                             DECODE (v_drcr,
                                     'C', -ABS (v_amount),
                                     ABS (v_amount)),
                             NULL,
                             NULL,
                             DECODE (v_drcr,
                                     'C', v_prem_type || '  ' || 'CREDIT',
                                     'D', v_prem_type || '  ' || 'DEBIT'),
                             NULL,
                             NULL,
                             NULL,
                             v_prem_type,
                             NULL,
                             DECODE (v_drcr,
                                     'C', -ABS (v_amount),
                                     ABS (v_amount)),
                             TRUNC (SYSDATE),
                             NULL,
                             NULL,
                             'Y',
                             TRUNC (SYSDATE),
                             v_user_name,
                             NULL,
                             NULL,
                             'R',
                             v_mtran_cur_code,
                             NULL,
                             v_mtran_cur_rate,
                             v_prem_type,
                             NULL,
                             NULL);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR UPDATING XOL MDP STATEMENTS...');
            END;

            ---UPDATE BACK THE MDP TABLES
            BEGIN
                UPDATE GIN_MASTER_TRANSACTIONS
                   SET mtran_authorised = 'Y',
                       mtran_date_authorized = SYSDATE,
                       mtran_authorised_by = v_user_name
                 WHERE mtran_no = v_dr_mtran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR UPDATING  MDP/REINSTATEMENT PAYMENTS...');
            END;

            BEGIN
                UPDATE gin_xol_prem_payment_dtls
                   SET xppd_authorized = 'Y', xppd_authorized_date = SYSDATE
                 WHERE xppd_drcr_no = v_dr_ref_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR UPDATING XOL MDP STATEMENTS...');
            END;

            BEGIN
                UPDATE GIN_XOL_PREMIUM_PAYMENTS
                   SET xpp_authorized = 'Y', xpp_authorized_by = v_user_name
                 WHERE xpp_code IN (SELECT DISTINCT XPPD_XPP_CODE
                                      FROM gin_xol_prem_payment_dtls
                                     WHERE xppd_drcr_no = v_dr_ref_no)--AND xpp_authorized = 'P'
                                                                      ;

                SELECT DISTINCT XPPD_XP_CODE
                  INTO v_xppd_xp_code
                  FROM gin_xol_prem_payment_dtls
                 WHERE xppd_drcr_no = v_dr_ref_no;

                SELECT XP_OS_AMT
                  INTO v_xp_os_amt
                  FROM GIN_XOL_PREMIUMS
                 WHERE XP_CODE = v_xppd_xp_code;

                IF v_xp_os_amt = 0
                THEN
                    UPDATE GIN_XOL_PREMIUMS
                       SET XP_AUTHORIZED = 'Y', XP_AUTHORIZED_DATE = SYSDATE
                     WHERE XP_CODE = v_xppd_xp_code;
                ELSE
                    UPDATE GIN_XOL_PREMIUMS
                       SET XP_AUTHORIZED = 'R'
                     WHERE XP_CODE = v_xppd_xp_code;
                END IF;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR UPDATING XOL MDP STATEMENTS...');
            END;
        END;
    END update_mdp;

    PROCEDURE update_mdp10092013 (v_cqr_ref      IN VARCHAR2,
                                  v_cqr_ref2     IN VARCHAR2,
                                  v_cqr_chq_no   IN VARCHAR2,
                                  v_cqr_chq_dt   IN DATE,
                                  v_user_name    IN VARCHAR2,
                                  v_cqr_amount   IN NUMBER)
    IS
        v_credit_mtran_no     NUMBER;
        v_cr_amt              NUMBER (23, 5);
        v_cr_ref_no           VARCHAR2 (50);
        v_dr_mtran_no         NUMBER;
        v_dr_ref_no           VARCHAR2 (50);
        v_auto_allocate       VARCHAR2 (1);
        v_mtran_no            NUMBER;
        v_drcr                VARCHAR2 (200);
        v_mtran_cur_code      NUMBER;
        v_mtran_cur_rate      NUMBER;
        v_mtran_client_code   NUMBER;
    BEGIN
        --  RAISE_ERROR('v_cqr_amount'||v_cqr_amount);
        IF SIGN (-v_cqr_amount) = 1
        THEN
            v_drcr := 'D';
        ELSE
            v_drcr := 'C';
        END IF;

        BEGIN
            v_dr_mtran_no := REPLACE (v_cqr_ref, 'MDP/', '');
        END;

        BEGIN
            SELECT mtran_ref_no,
                   mtran_cur_code,
                   mtran_cur_rate,
                   mtran_client_code
              INTO v_dr_ref_no,
                   v_mtran_cur_code,
                   v_mtran_cur_rate,
                   v_mtran_client_code
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;

            SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
                   || gin_mtran_no_seq.NEXTVAL
              INTO v_mtran_no
              FROM DUAL;

            BEGIN
                INSERT INTO gin_master_transactions (mtran_no,
                                                     mtran_date,
                                                     mtran_ref_no,
                                                     mtran_other_ref,
                                                     mtran_tran_type,
                                                     mtran_dc,
                                                     mtran_control_acc,
                                                     mtran_client_type,
                                                     mtran_client_code,
                                                     mtran_amount,
                                                     mtran_balance,
                                                     mtran_pol_batch_no,
                                                     mtran_scl_code,
                                                     mtran_narrations,
                                                     mtran_rei_code,
                                                     mtran_client_polcy_no,
                                                     mtran_pol_ren_endos_no,
                                                     mtran_acct_code,
                                                     mtran_ggt_tran_no,
                                                     mtran_net_amt,
                                                     mtran_posting_date,
                                                     mtran_cmb_claim_no,
                                                     mtran_prp_code,
                                                     mtran_authorised,
                                                     mtran_date_authorized,
                                                     mtran_authorised_by,
                                                     mtran_pro_sht_desc,
                                                     mtran_pro_code,
                                                     mtran_origin,
                                                     mtran_cur_code,
                                                     mtran_cur_symbol,
                                                     mtran_cur_rate,
                                                     mtran_btr_trans_code,
                                                     mtran_brn_code,
                                                     mtran_payee)
                         VALUES (
                             v_mtran_no,
                             TRUNC (SYSDATE),
                             'MDP',
                             NULL,
                             'MDP',
                             v_drcr,
                             v_cqr_ref2,
                             'R',
                             v_mtran_client_code,
                             DECODE (v_drcr,
                                     'C', ABS (v_cqr_amount),
                                     -ABS (v_cqr_amount)),
                             DECODE (v_drcr,
                                     'C', ABS (v_cqr_amount),
                                     -ABS (v_cqr_amount)),
                             NULL,
                             NULL,
                             DECODE (v_drcr,
                                     'C', 'MDP CREDIT',
                                     'D', 'MDP DEBIT'),
                             NULL,
                             NULL,
                             NULL,
                             'MDP',
                             NULL,
                             DECODE (v_drcr,
                                     'C', ABS (v_cqr_amount),
                                     -ABS (v_cqr_amount)),
                             TRUNC (SYSDATE),
                             NULL,
                             NULL,
                             'N',
                             TRUNC (SYSDATE),
                             v_user_name,
                             NULL,
                             NULL,
                             'R',
                             v_mtran_cur_code,
                             NULL,
                             v_mtran_cur_rate,
                             'MDP',
                             NULL,
                             NULL);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error ('ERROR UPDATING XOL MDP STATEMENTS...');
            END;

            IF NVL (v_auto_allocate, 'N') = 'Y'
            THEN
                gis_accounts_utilities.knock_trans (v_credit_mtran_no,
                                                    v_cr_ref_no,
                                                    v_dr_mtran_no,
                                                    v_dr_ref_no,
                                                    SYSDATE,
                                                    v_cr_amt);
            END IF;
        END;
    END update_mdp10092013;

    PROCEDURE authorisegispayments (v_ref IN VARCHAR2, v_user_code IN NUMBER)
    IS
        v_usr_username   VARCHAR2 (200);
        v_mtran_no       VARCHAR2 (200);
    BEGIN
        BEGIN
            v_mtran_no := REPLACE (v_ref, 'PYMT/', '');
        END;

        BEGIN
            SELECT usr_username
              INTO v_usr_username
              FROM tqc_users
             WHERE usr_code = v_user_code;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            UPDATE gin_master_transactions
               SET mtran_authorised = 'Y',
                   mtran_date_authorized = TRUNC (SYSDATE),
                   mtran_authorised_by = v_usr_username
             WHERE mtran_no = v_mtran_no;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;
    END;

    PROCEDURE prc_servproviders_pymts (v_cptv_code    VARCHAR2,
                                       v_user_name    VARCHAR2,
                                       v_pay_method   VARCHAR2 DEFAULT 'EFT')
    IS
        CURSOR servproviders_pymts_dtls IS
            SELECT cptv_code,
                   cptv_apco_cor_code,
                   cptv_cur_code,
                   spr_name,
                   cptv_payee,
                   spr_code,
                   cptv_date,
                   cptv_scl_code,
                   cptv_quota_amount,
                   cptv_fstsup_amount,
                   cptv_secsup_amount,
                   cptv_facre_amount,
                   cptv_whtx_amount,
                   cptv_clm_gross_fee_amount,
                   cptv_clm_net_fee_amount,
                   cptv_vat_amount,
                   cptv_pool_amount,
                   cptv_mand_amount,
                   cptv_rein_amount,
                   cptv_exciseduty_amount,
                   cptv_vattowhold_amount
              FROM gin_clm_pymnt_tax_vouchers, tqc_service_providers
             WHERE spr_code = cptv_apco_cor_code AND cptv_code = v_cptv_code;

        v_drno                  VARCHAR2 (30);
        v_app_lvl               VARCHAR2 (2);
        v_scl_code              gin_sub_classes.scl_code%TYPE;
        v_agnt                  VARCHAR2 (60);
        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_client_type           VARCHAR2 (20);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (20);
        v_eft_enabled           VARCHAR2 (1);
        v_serv_prov_code        NUMBER;
        v_payee                 VARCHAR2 (300);
        v_cnt                   NUMBER := 0;
        v_net_amt               NUMBER;
        v_trnt_gl_code          NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_bnk_account           VARCHAR2 (30);
        v_bnk_bbr_code          VARCHAR2 (30);
        rev_type                VARCHAR2 (10);
        v_rein_amt              NUMBER;
        v_salv_amt              NUMBER;
        v_excess_amt            NUMBER;
        v_control_acc           VARCHAR2 (30);
        v_lvl                   VARCHAR2 (6);
    BEGIN
        BEGIN
            SELECT cptv_cur_code
              INTO v_cur_code
              FROM gin_clm_pymnt_tax_vouchers
             WHERE cptv_code = v_cptv_code;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
        END;

        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        FOR i IN servproviders_pymts_dtls
        LOOP
            v_cnt := v_cnt + 1;
            v_cur_code := i.cptv_cur_code;
            v_rec_count := 0;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_org_code :=
                fms_interfaces_pkg.get_org (fms_interfaces_pkg.head_office);
            v_paymnt_brh_code := fms_interfaces_pkg.head_office;
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            fms_interfaces_pkg.trans_bct ('CLM',
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);
            v_rein_amt := NVL (i.cptv_rein_amount, 0);
            rev_type := 'CF';

            -- raise_error('i.cptv_clm_gross_fee_amount='||i.cptv_clm_gross_fee_amount||
            --'i.cptv_clm_net_fee_amount='||i.cptv_clm_net_fee_amount);
            IF ROUND (NVL (i.cptv_clm_gross_fee_amount, 0), v_rnd) !=
               ROUND (
                     NVL (i.cptv_clm_net_fee_amount, 0)
                   + NVL (i.cptv_exciseduty_amount, 0)
                   + NVL (i.cptv_whtx_amount, 0)
                   + NVL (i.cptv_vattowhold_amount, 0)
                   + NVL (v_rein_amt, 0)
                   + NVL (v_excess_amt, 0)
                   + NVL (v_salv_amt, 0),
                   v_rnd)
            THEN
                raise_application_error (
                    -20001,
                       '1 THE NET CHEQUE AMOUNT '
                    || NVL (i.cptv_clm_gross_fee_amount, 0)
                    || ' LESS VATTO WITHHOLD'
                    || NVL (i.cptv_vattowhold_amount, 0)
                    || ' PLUS WHTTAX '
                    || NVL (i.cptv_whtx_amount, 0)
                    || ' PLUS EXCISE DUTY '
                    || NVL (i.cptv_exciseduty_amount, 0)
                    || '  PLUS REIN '
                    || NVL (v_rein_amt, 0)
                    || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                    || i.cptv_clm_net_fee_amount);
            END IF;

            IF v_pay_method IN ('EFT')
            THEN
                IF NVL (i.cptv_clm_gross_fee_amount, 0) != 0
                THEN
                    BEGIN
                        v_eft_enabled := 'N';

                        IF rev_type = 'CF'
                        THEN
                            IF bnk_bbr_code (i.cptv_apco_cor_code, 1)
                                   IS NOT NULL
                            THEN
                                v_eft_enabled :=
                                    account_enabled (
                                        bnk_bbr_code (i.cptv_apco_cor_code,
                                                      1));
                                v_bnk_account :=
                                    bnk_account (i.cptv_apco_cor_code, 1);
                                v_bnk_bbr_code :=
                                    tqc_interfaces_pkg.bank_ref (
                                        bnk_bbr_code (i.cptv_apco_cor_code,
                                                      1));
                            END IF;
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR GETTING BANK ACC INFO... ');
                    END;

                    IF v_eft_enabled = 'N'
                    THEN
                        raise_application_error (
                            -20001,
                               ' Bank Details Not Provided For '
                            || i.cptv_payee
                            || ' '
                            || v_pay_method
                            || ' Payments');
                    END IF;

                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,
                        --v_trnt_type IN VARCHAR2,
                        i.cptv_scl_code,
                        --v_scl_code IN NUMBER,
                        'U',                     --     v_app_lvl IN VARCHAR2,
                        NULL,
                        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,
                        --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code,
                        --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        NULL                  --i.cmb_scl_code
                                            );
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_eft_payees (
                        v_rec_count,
                        --v_no                       NUMBER,
                        i.cptv_code,
                        --v_ref1                   VARCHAR2,
                        ROUND (NVL (i.cptv_clm_net_fee_amount, 0),
                               v_bcur_rnd),
                        --v_amount                   NUMBER,
                        i.cptv_payee,
                        --v_narrative                VARCHAR2,
                        v_bnk_bbr_code,
                        --v_ref_code,--v_bbr_ref_code             VARCHAR2,
                        v_bnk_account,
                        --v_bnk_account              VARCHAR2,
                        i.cptv_code,
                        --v_ref2                   VARCHAR2,
                        v_payee_eft_dtls);
                    --raise_error('cptv_clm_gross_fee_amount='||i.cptv_clm_gross_fee_amount);
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (i.cptv_clm_gross_fee_amount, v_bcur_rnd),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                IF NVL (v_rein_amt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cptv_scl_code,               --v_scl_code IN NUMBER,
                        'U',                     --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code);

                    IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'CP GL CTRL A/C - '
                            || v_control_acc
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || i.cptv_scl_code);
                    END IF;

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'CP GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || i.cptv_scl_code);
                    END IF;

                    v_rec_count := v_rec_count + 1;

                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (v_rein_amt, 0), v_bcur_rnd),
                            'GL TRANS' || v_trnt_code,
                            --narrative,
                            v_trnt_gl_code,
                            -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'C',                                    --v_dr_cr,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20026,
                                   'ERROR POSTING GL TRANS FOR '
                                || v_trnt_code
                                || ':- '
                                || SQLERRM (SQLCODE));
                    END;
                END IF;

                ---------------------------To take care of VAT
                /* IF NVL (i.cptv_vat_amount, 0) != 0
                           THEN
                              Gin_Interfaces_Pkg.get_gl_acct_code ('WTHVAT', --v_trnt_type IN VARCHAR2,
                                                                i.cptv_scl_code, --v_scl_code IN NUMBER,
                                                                'U', --     v_app_lvl IN VARCHAR2,
                                                                NULL, --          v_btr_trans_code IN VARCHAR2,
                                                                NULL, --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                                v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                                v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                                v_trnt_contra_gl_code);
                            check_valid_gl_acc(v_trnt_gl_code,
                                                  v_org_code,
                                                  v_paymnt_brh_code,
                                                  v_brh_name,
                                                  v_trnt_code,
                                                  i.cptv_scl_code);

                              v_rec_count := v_rec_count + 1;
                              Fms_Cheques_Pkg.append_chq_trans
                                     (v_rec_count,
                                      ROUND (NVL (i.cptv_vat_amount, 0), v_rnd),
                                      'CLAIM',                                      --narrative,
                                      v_trnt_contra_gl_code,--v_trnt_gl_code,                          -- crt_acc_number
                                      v_org_code,                           --crt_acc_org_code ,
                                      v_paymnt_brh_code,
                                                        --i.cmb_brn_code,          --v_brh_code,
                                      'C',                                            --v_dr_cr,
                                      v_chq_dtls
                                     );

                 END IF;*/
                ---------------------------To take care of VATTOHOLD
                IF NVL (i.cptv_vattowhold_amount, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'VATTOWTH',                 --v_trnt_type IN VARCHAR2,
                        i.cptv_scl_code,               --v_scl_code IN NUMBER,
                        'U',                     --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code);
                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_vattowhold_amount, 0), v_bcur_rnd),
                        'CLAIM',                                  --narrative,
                        v_trnt_contra_gl_code,
                        --v_trnt_gl_code,                          -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                ---------------------------To take care of withholding tax
                IF NVL (i.cptv_whtx_amount, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'WTHTPY',                   --v_trnt_type IN VARCHAR2,
                        i.cptv_scl_code,               --v_scl_code IN NUMBER,
                        'U',                     --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code);
                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_whtx_amount, 0), v_bcur_rnd),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                ---------------------------to take care of excise duty
                IF NVL (i.cptv_exciseduty_amount, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'EXDTPY',                   --v_trnt_type IN VARCHAR2,
                        i.cptv_scl_code,               --v_scl_code IN NUMBER,
                        'U',                     --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code);
                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_exciseduty_amount, 0), v_rnd),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                --**************************** Update Mandatory Revision Amount***************************
                IF i.cptv_mand_amount <> 0
                THEN
                    v_lvl := 'MAN';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cptv_scl_code,           --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
                                || i.cptv_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_mand_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_mand_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                --**************************** Update Quota Revision Amount***************************
                IF i.cptv_quota_amount <> 0
                THEN
                    v_lvl := 'QST';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cptv_scl_code,           --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
                                || i.cptv_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_quota_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_quota_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                --**************************** Update FIRST SURPLUS Revision Amount***************************
                IF i.cptv_fstsup_amount <> 0
                THEN
                    v_lvl := 'FSTSUP';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cptv_scl_code,           --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
                                || i.cptv_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_trnt_contra_gl_code :=
                        fms_interfaces_pkg.sl_control_acc ('GIS',
                                                           'R',
                                                           'FSTSUP');
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_fstsup_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,                      -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_fstsup_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                --**************************** Update SECOND SURPLUS Revision Amount***************************
                IF i.cptv_secsup_amount <> 0
                THEN
                    v_lvl := 'SECSUP';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cptv_scl_code,           --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
                                || i.cptv_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_secsup_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_secsup_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                --**************************** Update Facultative Revision Amount***************************
                IF i.cptv_facre_amount <> 0
                THEN
                    v_lvl := 'FO';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cptv_scl_code,           --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
                                || i.cptv_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_trnt_contra_gl_code :=
                        fms_interfaces_pkg.sl_control_acc ('GIS', 'FO');
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_facre_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_facre_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                --**************************** Update reinsurance poolAmount***************************
                IF i.cptv_pool_amount <> 0
                THEN
                    v_lvl := 'POOL';

                    BEGIN
                        gin_interfaces_pkg.get_gl_acct_code (
                            rev_type,               --v_trnt_type IN VARCHAR2,
                            i.cptv_scl_code,           --v_scl_code IN NUMBER,
                            v_lvl,               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_when_others (
                                   'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
                                || i.cptv_scl_code
                                || ' IS NOT DEFINED..');
                    END;

                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    check_valid_gl_acc (v_trnt_contra_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cptv_scl_code);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_pool_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.cptv_pool_amount, v_rnd)),
                        'CLAIM',                                  --narrative,
                        v_trnt_contra_gl_code,
                        -- crt_acc_number
                        v_org_code,                       --crt_acc_org_code ,
                        v_paymnt_brh_code,                       --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                --**************************** create requisition**************************
                BEGIN
                    IF v_pay_method = 'EFT'
                    THEN
                        FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                            v_cqr_source,                     -- v_cqr_source,
                            i.cptv_code,                         -- v_cqr_ref,
                            i.cptv_code,                        -- v_cqr_ref2,
                            TRUNC (SYSDATE),                -- v_cqr_ref_date,
                            'GIS CLAIM FEE SCL ' || i.cptv_scl_code, -- v_cqr_narrative,
                            v_paymnt_brh_code,              -- v_cqr_brh_code,
                            v_bct_brh_code,             -- v_cqr_bct_brh_code,
                            ROUND (NVL (i.cptv_clm_net_fee_amount, 0),
                                   v_bcur_rnd),               -- v_cqr_amount,
                            i.cptv_payee,                      -- v_cqr_payee,
                            v_pay_method,                 -- v_cqr_pay_method,
                            i.cptv_cur_code,                -- v_cqr_cur_code,
                            NULL,                           ---i.cpv_cur_rate,
                            v_bct_code,                                    ---
                            fms_interfaces_pkg.get_usercode (
                                UPPER ((v_user_name))),
                            i.cptv_date,
                            v_user_code,                      -- v_cqr_req_by,
                            'GIS-CLAIMFEE',                 -- v_cqr_pmt_type,
                            v_bnk_bbr_code,        --v_payee_bank_branch_code,
                            v_bnk_account,              --v_payee_bank_acc_no,
                            v_chq_dtls,                       -- v_dtls_table,
                            v_payee_eft_dtls,                --v_payee_eft_rec
                            NULL,                     --v_cqr_physical_address
                            NULL,                      ---v_cqr_postal_address
                            NULL,             --v_trans_no,--v_itfc_trans_code
                            NULL,                                --v_itfc_ref3
                            NULL,                         --v_payee_source_pk,
                            NULL,                       --v_payee_source_type,
                            'N',                                --v_auto_auth,
                            NULL,                               --v_num_val_1,
                            NULL,                             ---v_invoice_no,
                            NULL,                           ---v_invoice_date,
                            NULL,                       ---v_auto_consolidate,
                            NULL,                               ---v_batch_no,
                            NULL                           ---v_payee_spr_code
                                );
                    ELSE
                        FMS_INTERFACES_PKG.create_Chq_reqn (
                            v_cqr_source,
                            i.cptv_code,                                 --ref
                            i.cptv_code,                              -- ref2,
                            TRUNC (SYSDATE),                              ----
                            'GIS CLAIM FEE SCL ' || i.cptv_scl_code,      ----
                            --'GIS Claim',             --narrative V
                            v_paymnt_brh_code,                           -----
                            v_bct_brh_code,                               ----
                            ROUND (NVL (i.cptv_clm_net_fee_amount, 0),
                                   v_bcur_rnd),                           ----
                            --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
                            i.cptv_payee,                                 ----
                            v_pay_method,                                 ----
                            i.cptv_cur_code,
                            NULL,                           ---i.cpv_cur_rate,
                            v_bct_code,                                    ---
                            fms_interfaces_pkg.get_usercode (
                                UPPER ((v_user_name))),                   ----
                            i.cptv_date,                                 -----
                            v_user_code, --v_user_code,   ----                           --v_cqr_req_by  ,
                            'GIS-CLAIMFEE', --'GIS-CLAIM',   ----                              -- pmt_type  ,
                            v_chq_dtls,                                   ----
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL);
                    END IF;
                --               fms_cheques_pkg.create_reqn
                --                       (v_cqr_source,
                --                        i.cptv_code,                                     --ref
                --                        i.cptv_code,                                  -- ref2,
                --                        TRUNC (SYSDATE),
                --                        'GIS CLAIM FEE SCL ' || i.cptv_scl_code, --narrative V
                --                        v_paymnt_brh_code,
                --                        v_bct_brh_code,
                --                        ROUND (NVL (i.cptv_clm_net_fee_amount, 0), v_bcur_rnd),
                --                        i.cptv_payee,
                --                        v_pay_method,
                --                        NULL,
                --                        NULL,
                --                        i.cptv_cur_code,
                --                        v_bct_code,
                --                        fms_interfaces_pkg.get_usercode (UPPER ((v_user_name
                --                                                                ))
                --                                                        ),
                --                        i.cptv_date,
                --                        v_user_code,
                --                        'GIS-CLAIMFEE',
                --                        v_chq_dtls,
                --                        v_payee_eft_dtls,
                --                        NULL,
                --                        NULL,
                --                        NULL,
                --                        NULL,
                --                        NULL,
                --                        v_bnk_bbr_code,
                --                        v_bnk_account,
                --                        NULL,
                --                        'N'                                      --v_auto_auth
                --                       );
                END;
            ELSE
                raise_error (
                    'CAN ONLY PAY USING EFT...PLEASE CONTACT SYSTEM ADMIN');
            END IF;
        END LOOP;
    END;

    PROCEDURE prc_wthtax_pymt (v_withtp_code   VARCHAR2,
                               v_user_name     VARCHAR2,
                               v_pay_method    VARCHAR2 DEFAULT 'CHQ')
    IS
        CURSOR wthtax IS
            SELECT *
              FROM gin_clm_wthtax_pymts_dtls, tqc_service_providers
             WHERE     spr_code = withtp_apco_cor_code
                   AND withtp_code = v_withtp_code;

        v_drno                  VARCHAR2 (30);
        v_app_lvl               VARCHAR2 (2);
        v_scl_code              gin_sub_classes.scl_code%TYPE;
        v_agnt                  VARCHAR2 (60);
        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        --v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_client_type           VARCHAR2 (20);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (20);
        v_eft_enabled           VARCHAR2 (1);
        v_serv_prov_code        NUMBER;
        v_payee                 VARCHAR2 (300);
        v_cnt                   NUMBER := 0;
        v_net_amt               NUMBER;
        v_trnt_gl_code          NUMBER;
        v_paymnt_brh_code       NUMBER;
    BEGIN
        -- raise_error('v_withtp_code=== '||v_withtp_code||'v_cur_code='||v_cur_code);
        BEGIN
            SELECT withtp_cur_code
              INTO v_cur_code
              FROM gin_clm_wthtax_pymts_dtls
             WHERE withtp_code = v_withtp_code;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
        END;

        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);

        FOR i IN wthtax
        LOOP
            v_cnt := v_cnt + 1;
            v_cur_code := i.withtp_cur_code;
            v_rec_count := 0;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_org_code :=
                fms_interfaces_pkg.get_org (fms_interfaces_pkg.head_office);
            --v_org_code := Fms_Interfaces_Pkg.head_office;-- (i.WITHTP_brn_code);
            v_paymnt_brh_code := fms_interfaces_pkg.head_office;
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            fms_interfaces_pkg.trans_bct ('CLM',
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);

            -- v_net_amt
            --        raise_error('v_withtp_code=== '||v_withtp_code||'v_cur_code='||v_cur_code||'='||i.WITHTP_AMT);
            IF NVL (i.withtp_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('WTHTPY', --v_trnt_type IN VARCHAR2,
                                                     i.withtp_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
                --          RAISE_ERROR(v_trnt_gl_code||'='||v_trnt_contra_gl_code);
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.withtp_scl_code);
                v_rec_count := v_rec_count + 1;

                IF v_pay_method IN ('CHQ')
                THEN
                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.withtp_amt, 0), v_bcur_rnd),
                            'WITHTAX REFUND',                     --narrative,
                            v_trnt_contra_gl_code,           -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            fms_interfaces_pkg.head_office,
                            --i.cmb_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                   'ERROR POSTING PAYMENT DETAILS FOR'
                                || i.withtp_voucher_no);
                    END;
                END IF;

                IF v_pay_method IN ('CHQ')
                THEN
                    BEGIN
                        fms_cheques_pkg.create_reqn (
                            v_cqr_source,
                            i.withtp_code,                               --ref
                            i.withtp_code,                            -- ref2,
                            TRUNC (SYSDATE),
                            NVL (i.withtp_voucher_no, 'WITHTAX REFUND'),
                            --narrative V
                            v_paymnt_brh_code,
                            v_bct_brh_code,
                            ROUND (NVL (i.withtp_amt, 0), v_rnd), --cqr_amount
                            i.spr_name,
                            i.withtp_cur_code,
                            v_bct_code,
                            fms_interfaces_pkg.get_usercode (
                                UPPER (i.withtp_authorized_by)),
                            i.withtp_authorize_date,
                            v_user_code,                     --v_cqr_req_by  ,
                            'GIS-WITHTX',                       -- pmt_type  ,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20001,
                                   'CREATE_REQN :- '
                                || v_net_amt
                                || ' $ '
                                || SQLERRM (SQLCODE));
                    END;
                END IF;
            END IF;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'WTHTAX REQN NOT CREATED FOR WTHTAX # ' || v_drno);
        END IF;
    EXCEPTION
        WHEN exc_user_error
        THEN
            raise_application_error (
                -20001,
                   'THE SPECIFIED USERNAME ( '
                || v_user_name
                || ' )  DOES NOT EXIST. CONTACT SYSTEM ADMIN.');
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR CREATING REQUISITION :- ' || SQLERRM (SQLCODE));
    END;

    PROCEDURE process_claim_pymt_file (
        v_clp_code     IN NUMBER,
        v_user_name       VARCHAR2,
        v_pay_method      VARCHAR2 DEFAULT 'CHQ')
    IS
        v_cmb_claim_no          NUMBER;
        v_cqr_bnk_dtls          fms_cheques_pkg.type_bnk_dtls_table;

        CURSOR c_claim IS
            SELECT *
              FROM gin_claim_payment_loading
             WHERE clp_code = v_clp_code;

        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_exch_rate2            NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_trt_man_amt           NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (15);
        rev_type                VARCHAR2 (15);
        v_payment_amt           gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
        v_ripool_amt            NUMBER;
        v_net_amt               NUMBER;
        v_vat_amt               NUMBER;
        v_whtx_amt              NUMBER;
        v_tot_amt               NUMBER;
        v_disc_amt              NUMBER;
        v_rein_amt              NUMBER;
        v_excess_amt            NUMBER;
        v_control_acc           VARCHAR2 (30);
        v_client_type           VARCHAR2 (5);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (25);
        v_salv_amt              NUMBER;
        v_per_code              NUMBER;
        v_auto_auth             VARCHAR2 (1);
        v_eft_enabled           VARCHAR2 (1);
        v_bnk_account           VARCHAR2 (30);
        v_bnk_bbr_code          VARCHAR2 (30);
    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        IF NVL (v_pay_method, 'CHQ') = 'JE'
        THEN
            v_auto_auth := 'N';
        ELSE
            v_auto_auth := 'Y';
        END IF;

        v_rec_count := 0;

        --RAISE_ERROR('v_pay_method='||v_pay_method);
        FOR i IN c_claim
        LOOP
            v_exch_rate :=
                get_currexch_rate (i.clp_cur_code, v_rnd, v_bcur_rnd);
            v_payment_amt := i.clp_payment_amount;
            v_cur_code := i.clp_cur_code;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_paymnt_brh_code := fms_interfaces_pkg.head_office (2);
            v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');

            fms_interfaces_pkg.trans_bct ('MEDCLM',
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);
            rev_type := 'CPM';

            IF NVL (v_payment_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code (rev_type, --v_trnt_type IN VARCHAR2,
                                                     NULL, --i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                                          );
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    NULL                      --i.cmb_scl_code
                                        );

                IF v_pay_method IN ('EFT', 'RTGS')
                THEN
                    BEGIN
                        v_eft_enabled := 'N';

                        --  raise_error('here='||'i.CLP_CBP_CODE ='||i.CLP_CBP_CODE);
                        IF bnk_bbr_code (i.clp_cbp_code, 4) IS NOT NULL
                        THEN
                            v_eft_enabled :=
                                account_enabled (
                                    bnk_bbr_code (i.clp_cbp_code, 4));
                            v_bnk_account := bnk_account (i.clp_cbp_code, 4);
                            v_bnk_bbr_code :=
                                tqc_interfaces_pkg.bank_ref (
                                    bnk_bbr_code (i.clp_cbp_code, 4));
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR GETTING BANK ACC INFO... ');
                    END;

                    IF v_eft_enabled = 'N'
                    THEN
                        raise_application_error (
                            -20001,
                               'Bank Branch Not Enabled To Transact '
                            || v_pay_method
                            || ' Payments');
                    END IF;
                END IF;

                v_rec_count := v_rec_count + 1;

                IF v_pay_method IN ('EFT', 'RTGS')
                THEN
                    --Raise_error('v_bnk_bbr_code:'||v_bnk_bbr_code||'v_bnk_account:'||v_bnk_account||'clp_ref_number:'||i.clp_ref_number);
                    fms_cheques_pkg.append_eft_payees (
                        v_rec_count,      --v_no                       NUMBER,
                        i.clp_code,       --v_ref1                   VARCHAR2,
                        NVL (v_payment_amt, 0),
                        --v_amount                   NUMBER,
                        i.clp_payee,
                        --'CLAIM ' || v_pay_method, --v_narrative                VARCHAR2,
                        v_bnk_bbr_code,
                        --v_ref_code,--v_bbr_ref_code             VARCHAR2,
                        v_bnk_account,  --v_bnk_account              VARCHAR2,
                        i.clp_ref_number, --v_ref2                   VARCHAR2,
                        v_payee_eft_dtls);
                    fms_cheques_pkg.append_chq_trans (v_rec_count,
                                                      v_payment_amt,
                                                      'CLAIM',    --narrative,
                                                      v_trnt_gl_code,
                                                      -- crt_acc_number
                                                      v_org_code,
                                                      --crt_acc_org_code ,
                                                      v_paymnt_brh_code,
                                                      --i.cmb_brn_code,          --v_brh_code,
                                                      'D',          --v_dr_cr,
                                                      v_chq_dtls);
                ELSE
                    fms_cheques_pkg.append_chq_trans (v_rec_count,
                                                      v_payment_amt,
                                                      'CLAIM',    --narrative,
                                                      v_trnt_gl_code, -- crt_acc_number
                                                      v_org_code, --crt_acc_org_code ,
                                                      v_paymnt_brh_code, --i.cmb_brn_code,          --v_brh_code,
                                                      'D',          --v_dr_cr,
                                                      v_chq_dtls);
                END IF;
            END IF;

            --************************************************************
            IF v_pay_method IN ('EFT', 'RTGS')
            THEN                                                    --<solomon
                BEGIN
                    --               fms_cheques_pkg.create_reqn
                    --                        (v_cqr_source,
                    --                         i.clp_code,                                     --ref
                    --                         i.clp_ref_number,                            -- ref2,
                    --                         TRUNC (SYSDATE),
                    --                         i.clp_ref_number || ' MEDWARE CLAIM PAYMENT',
                    --                         --'gis claim',             --narrative V
                    --                         v_paymnt_brh_code,                  --i.cmb_brn_code,
                    --                         v_bct_brh_code,
                    --                         NVL (v_payment_amt, 0),                  --cqr_amount
                    --                         i.clp_payee,
                    --                         v_pay_method,
                    --                         NULL,
                    --                         NULL,
                    --                         i.clp_cur_code,
                    --                         v_bct_code,
                    --                         fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                    --                         i.clp_pay_date,
                    --                         v_user_code,                        --v_cqr_req_by  ,
                    --                         'GIS-MEDCLM',                          -- pmt_type  ,
                    --                         v_chq_dtls,
                    --                         v_payee_eft_dtls,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         v_bnk_bbr_code,
                    --                         v_bnk_account,
                    --                         NULL,
                    --                         v_auto_auth,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         'N',
                    --                         i.clp_trans_no
                    --                        );

                    FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                        v_cqr_source,                         -- v_cqr_source,
                        i.clp_code,                              -- v_cqr_ref,
                        i.clp_ref_number,                       -- v_cqr_ref2,
                        TRUNC (SYSDATE),                    -- v_cqr_ref_date,
                        i.clp_ref_number || ' MEDWARE CLAIM PAYMENT',
                        v_paymnt_brh_code,                  -- v_cqr_brh_code,
                        v_bct_brh_code,                 -- v_cqr_bct_brh_code,
                        (NVL (v_payment_amt, 0)),             -- v_cqr_amount,
                        i.clp_payee,                           -- v_cqr_payee,
                        v_pay_method,                     -- v_cqr_pay_method,
                        i.clp_cur_code,                     -- v_cqr_cur_code,
                        NULL,                               ---i.cpv_cur_rate,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                        i.clp_pay_date,
                        v_user_code,                          -- v_cqr_req_by,
                        'GIS-MEDCLM',                       -- v_cqr_pmt_type,
                        v_bnk_bbr_code,            --v_payee_bank_branch_code,
                        v_bnk_account,                  --v_payee_bank_acc_no,
                        v_chq_dtls,                           -- v_dtls_table,
                        v_payee_eft_dtls,                    --v_payee_eft_rec
                        NULL,                         --v_cqr_physical_address
                        NULL,                          ---v_cqr_postal_address
                        i.clp_trans_no,                    --v_itfc_trans_code
                        NULL,                                    --v_itfc_ref3
                        NULL,                             --v_payee_source_pk,
                        NULL,                           --v_payee_source_type,
                        'N',                                    --v_auto_auth,
                        NULL,                                   --v_num_val_1,
                        NULL,                                 ---v_invoice_no,
                        NULL,                               ---v_invoice_date,
                        NULL,                           ---v_auto_consolidate,
                        NULL,                                   ---v_batch_no,
                        NULL                               ---v_payee_spr_code
                            );
                --            EXCEPTION
                --               WHEN OTHERS
                --               THEN
                --                  raise_error (
                --                        'ERROR ON CREATING PAYMENT REQUISITION < '
                --                     || v_pay_method
                --                     || '> FOR.'
                --                     || i.CLP_PAYEE
                --                     || SQLERRM (SQLCODE));
                END;
            ELSE
                BEGIN
                    --raise_error('v_bct_code-'||v_bct_code||'v_bct_brh_code -'||v_bct_brh_code);
                    --               fms_cheques_pkg.create_reqn
                    --                        (v_cqr_source,
                    --                         i.clp_code,                                     --ref
                    --                         i.clp_ref_number,                            -- ref2,
                    --                         TRUNC (SYSDATE),
                    --                         i.clp_ref_number || ' MEDWARE CLAIM PAYMENT',
                    --                         --'GIS Claim',             --narrative V
                    --                         v_paymnt_brh_code,
                    --                         v_bct_brh_code,
                    --                         NVL (v_payment_amt, 0),                  --cqr_amount
                    --                         i.clp_payee,
                    --                         v_pay_method,
                    --                         NULL,
                    --                         NULL,
                    --                         i.clp_cur_code,
                    --                         v_bct_code,
                    --                         fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                    --                         i.clp_pay_date,
                    --                         v_user_code,                        --v_cqr_req_by  ,
                    --                         'GIS-MEDCLM',                          -- pmt_type  ,
                    --                         v_chq_dtls,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         v_cqr_bnk_dtls,
                    --                         v_auto_auth,                            --last before
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         NULL,
                    --                         i.clp_trans_no
                    --                        );

                    FMS_INTERFACES_PKG.create_Chq_reqn (
                        v_cqr_source,
                        i.clp_code,                                      --ref
                        i.clp_ref_number,                             -- ref2,
                        TRUNC (SYSDATE),                                  ----
                        i.clp_ref_number || ' MEDWARE CLAIM PAYMENT',     ----
                        --'GIS Claim',             --narrative V
                        v_paymnt_brh_code,                               -----
                        v_bct_brh_code,                                   ----
                        v_payment_amt,                                    ----
                        --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
                        i.clp_payee,                                      ----
                        v_pay_method,                                     ----
                        i.clp_cur_code,
                        NULL,                               ---i.cpv_cur_rate,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (UPPER (v_user_name)), ---
                        i.clp_pay_date,                                  -----
                        v_user_code, --v_user_code,   ----                           --v_cqr_req_by  ,
                        NULL, --'GIS-CLAIM',   ----                              -- pmt_type  ,
                        v_chq_dtls,                                       ----
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_application_error (
                            -20001,
                               'CREATE_REQN :- '
                            || v_payment_amt
                            || ' $ '
                            || SQLERRM (SQLCODE));
                END;
            END IF;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (-20001, 'CLM REQN NOT CREATED ');
        END IF;
    END;

    PROCEDURE update_whtax (v_cqr_ref      IN VARCHAR2,
                            v_cqr_ref2     IN VARCHAR2,
                            v_cqr_chq_no   IN VARCHAR2,
                            v_cqr_chq_dt   IN DATE,
                            v_user_name    IN VARCHAR2,
                            v_cqr_amount   IN NUMBER)
    IS
        --   CURSOR cur_cons_comm IS SELECT * FROM GIN_COMM_PYMT_DTLS
        --                      WHERE COPDT_CODE =v_cqr_ref
        --                      AND COPDT_TRANS_NO =v_cqr_ref2;
        CURSOR cur_whtax IS
            SELECT withtp_code,
                   withtp_apco_cor_code,
                   spr_name,
                   withtp_amt     comm_amt
              FROM gin_clm_wthtax_pymts_dtls, tqc_service_providers
             WHERE     withtp_apco_cor_code = spr_code
                   AND withtp_authorized = 'Y'
                   AND withtp_code = v_cqr_ref;

        --AND COPDT_TRANS_NO =v_cqr_ref2 ;
        CURSOR cur_whtax_dtls (vwithtp_code IN NUMBER)
        IS
            SELECT withtp_code,
                   withtp_apco_cor_code,
                   spr_name,
                   withtp_amt
              FROM gin_clm_wthtax_pymts, tqc_service_providers
             WHERE     withtp_apco_cor_code = spr_code
                   AND withtp_withtp_code = vwithtp_code;

        v_mtran_no      NUMBER;
        v_cr_mtran_no   NUMBER;
        v_cr_ref_no     VARCHAR2 (35);
        v_cr_bal        NUMBER;
        v_cr_com        NUMBER;
        v_pol_no        VARCHAR2 (35);
        v_cop_cnt       NUMBER;
        v_dr_mtran_no   NUMBER;
    BEGIN
        -- RAISE_ERROR('v_cqr_ref2='||v_cqr_ref2||';v_cqr_ref='||v_cqr_ref);
        FOR cur_whtax_rec IN cur_whtax
        LOOP
            FOR cur_whtax_dtls_rec
                IN cur_whtax_dtls (cur_whtax_rec.withtp_code)
            LOOP
                --RAISE_ERROR('v_cqr_ref2='||v_cqr_ref2||';v_cqr_ref='||v_cqr_ref||';'|| cur_comm_rec.COP_DR_MTRAN_NO);
                v_cop_cnt := NVL (v_cop_cnt, 0) + 1;

                BEGIN
                    UPDATE gin_clm_wthtax_pymts
                       SET withtp_authorized_by = v_user_name,
                           withtp_authorized = 'Y',
                           withtp_authorize_date = TRUNC (SYSDATE),
                           withtp_paid = 'Y'
                     WHERE withtp_code = cur_whtax_dtls_rec.withtp_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR UPDATING whtax PAYMENT VOUCHER NO. ...');
                END;
            END LOOP;

            BEGIN
                UPDATE gin_clm_wthtax_pymts_dtls
                   SET withtp_paid = 'Y',
                       withtp_paid_chq_date = v_cqr_chq_dt,
                       withtp_paid_chq_no = v_cqr_chq_no
                 WHERE withtp_code = cur_whtax_rec.withtp_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error on Post update of Commission Cheques ...');
            END;
        END LOOP;
    END update_whtax;

    PROCEDURE update_tax_remmittance (v_cqr_ref      IN VARCHAR2,
                                      v_cqr_ref2     IN VARCHAR2,
                                      v_cqr_chq_no   IN VARCHAR2,
                                      v_cqr_chq_dt   IN DATE,
                                      v_user_name    IN VARCHAR2,
                                      v_cqr_amount   IN NUMBER)
    IS
        CURSOR cur_tax IS
            SELECT *
              FROM gin_tax_remmittance
             WHERE vap_authorized = 'P' AND TO_CHAR (vap_code) = v_cqr_ref;

        CURSOR cur_tax_dtls (v_cqr_ref IN NUMBER)
        IS
            SELECT *
              FROM gin_clm_payment_vouchers
             WHERE TO_CHAR (cpv_vap_code) = v_cqr_ref AND cpv_vap_paid = 'P';
    BEGIN
        FOR cur_tax_rec IN cur_tax
        LOOP
            BEGIN
                UPDATE gin_tax_remmittance
                   SET vap_authorized_by = v_user_name,
                       vap_authorized = 'Y',
                       vap_authorize_date = TRUNC (SYSDATE),
                       vap_paid = 'Y',
                       vap_paid_chq_date = v_cqr_chq_dt,
                       vap_paid_chq_no = v_cqr_chq_no
                 WHERE vap_code = cur_tax_rec.vap_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'ERROR UPDATING TAX PAYMENT VOUCHER NO. ...');
            END;

            FOR cur_whtax_dtls_rec IN cur_tax_dtls (cur_tax_rec.vap_code)
            LOOP
                BEGIN
                    UPDATE gin_clm_payment_vouchers
                       SET cpv_vap_paid = 'Y'
                     WHERE cpv_vap_code = cur_tax_rec.vap_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR ON POST UPDATE OF TAX CHEQUES ...');
                END;
            END LOOP;
        END LOOP;
    END update_tax_remmittance;

    --   PROCEDURE process_tax_pyments (
    --      v_vap_code     NUMBER,
    --      v_user_name    VARCHAR2,
    --      v_spr_code     NUMBER,
    --      v_pay_method   VARCHAR2 DEFAULT 'CHQ',
    --      v_type         VARCHAR2
    --   )
    --   IS
    --      v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
    --      v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
    --      v_payee_mft_dtls        fms_cheques_pkg.type_payee_mft_table;
    --      v_user_code             NUMBER;
    --      exc_user_error          EXCEPTION;
    --      v_cqr_source            NUMBER;
    --      v_paymnt_brh_code       NUMBER;
    --      v_org_code              NUMBER;
    --      v_brh_name              VARCHAR2 (100);
    --      v_cur_code              NUMBER;
    --      v_bct_code              NUMBER;
    --      v_bct_brh_code          NUMBER;
    --      v_trnt_gl_code          VARCHAR2 (20);
    --      v_trnt_contra_gl_code   VARCHAR2 (20);
    --      v_trnt_code             VARCHAR2 (20);
    --      v_rec_count             NUMBER                               := 0;
    --      v_bcur_rnd              NUMBER                               := 2;
    --      v_payee                 VARCHAR2 (100);
    --      v_eft_enabled           VARCHAR2 (1);
    --      v_bnk_account           VARCHAR2 (30);
    --      v_bnk_bbr_code          VARCHAR2 (30);
    --      v_sms_tel               VARCHAR2 (30);
    --      v_ref_no                VARCHAR2 (100);
    --      v_mpt_code              NUMBER;
    --      v_bnk_bbr_pk            NUMBER;
    --      v_narrative             VARCHAR2 (10);

    --      CURSOR tax_payments
    --      IS
    --         SELECT *
    --           FROM gin_tax_remmittance
    --          WHERE NVL (vap_authorized, 'N') = 'Y'
    --            AND vap_code = v_vap_code
    --            AND vap_tax_type = v_type;

    --      CURSOR tax_payments_dtls
    --      IS
    --         SELECT *
    --           FROM gin_clm_payment_vouchers
    --          WHERE cpv_vap_code = v_vap_code AND NVL (cpv_vap_paid, 'N') = 'R';
    --   BEGIN
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

    --      IF v_spr_code IS NOT NULL
    --      THEN
    --        SELECT spr_bbr_code, spr_bank_acc_no INTO v_bnk_bbr_code, v_bnk_account FROM tqc_service_providers
    --        WHERE spr_code = v_spr_code;
    --      END IF;

    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;

    --      FOR i IN tax_payments
    --      LOOP
    --         v_cur_code := tqc_interfaces_pkg.orgcurrency (37);
    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_paymnt_brh_code :=
    --            tqc_interfaces_pkg.branchcode
    --                                         (2,
    --                                          fms_settings_pkg.head_office_new (2)
    --                                         );
    --         v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --         fms_interfaces_pkg.trans_bct ('TAXPYMT',
    --                                       v_cqr_source,
    --                                       v_paymnt_brh_code,
    --                                       v_cur_code,
    --                                       v_bct_code,
    --                                       v_bct_brh_code
    --                                      );

    --         IF i.vap_tax_type = 'WHTX'
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code ('WTHTX1',
    --                                                 NULL,
    --                                                 'U',
    --                                                 NULL,
    --                                                 NULL,
    --                                                 v_trnt_code,
    --                                                 v_trnt_gl_code,
    --                                                 v_trnt_contra_gl_code
    --                                                );
    --            v_narrative := 'WTHTX';
    --         ELSIF i.vap_tax_type = 'VATWITHHELD'
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code ('VATTOWTH',
    --                                                 NULL,
    --                                                 'U',
    --                                                 NULL,
    --                                                 NULL,
    --                                                 v_trnt_code,
    --                                                 v_trnt_gl_code,
    --                                                 v_trnt_contra_gl_code
    --                                                );
    --            v_narrative := 'WTHTX';
    --         ELSIF i.vap_tax_type = 'PT'
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code ('UT',
    --                                                 NULL,
    --                                                 'U',
    --                                                 NULL,
    --                                                 NULL,
    --                                                 v_trnt_code,
    --                                                 v_trnt_gl_code,
    --                                                 v_trnt_contra_gl_code
    --                                                );
    --            v_narrative := 'PREMTX';
    --         ELSIF i.vap_tax_type = 'TL'
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code ('UTL',
    --                                                 NULL,
    --                                                 'U',
    --                                                 NULL,
    --                                                 NULL,
    --                                                 v_trnt_code,
    --                                                 v_trnt_gl_code,
    --                                                 v_trnt_contra_gl_code
    --                                                );
    --            v_narrative := 'TL';
    --         ELSIF i.vap_tax_type = 'PHF'
    --         THEN
    --            gin_interfaces_pkg.get_gl_acct_code ('PHFUND',
    --                                                 NULL,
    --                                                 'U',
    --                                                 NULL,
    --                                                 NULL,
    --                                                 v_trnt_code,
    --                                                 v_trnt_gl_code,
    --                                                 v_trnt_contra_gl_code
    --                                                );
    --            v_narrative := 'PHF';
    --         END IF;

    --         check_valid_gl_acc (v_trnt_gl_code,
    --                             v_org_code,
    --                             v_paymnt_brh_code,
    --                             v_brh_name,
    --                             v_trnt_code,
    --                             NULL                             --i.cmb_scl_code
    --                            );

    --         IF NVL (i.vap_tax_amt, 0) > 0
    --         THEN
    --            IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                  v_org_code,
    --                                                  v_paymnt_brh_code
    --                                                 ) = FALSE
    --            THEN
    --               raise_application_error (-20001,
    --                                           'UC-WHTX GL A/C - '
    --                                        || v_trnt_gl_code
    --                                        || ' UNDEFINED IN '
    --                                        || v_brh_name
    --                                        || ' CODE '
    --                                        || v_trnt_code
    --                                       );
    --            END IF;

    --            v_rec_count := v_rec_count + 1;

    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               fms_cheques_pkg.append_eft_payees
    --                        (v_rec_count,
    --                         i.vap_code,      --v_ref1                   VARCHAR2,
    --                         ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                         i.vap_payee,   --v_narrative                VARCHAR2,
    --                         v_bnk_bbr_code,
    --                         --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                         v_bnk_account, --v_bnk_account              VARCHAR2,
    --                         i.vap_code,      --v_ref2                   VARCHAR2,
    --                         v_payee_eft_dtls
    --                        );
    --               fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                 ROUND (NVL (i.vap_tax_amt, 0),
    --                                                        v_bcur_rnd
    --                                                       ),
    --                                                 v_narrative || 'PYMT',
    --                                                 v_trnt_gl_code,
    --                                                 v_org_code,
    --                                                 v_paymnt_brh_code,
    --                                                 'D',
    --                                                 v_chq_dtls
    --                                                );
    --            ELSIF v_pay_method IN ('MOB')
    --            --Added by Masinde to take care of mobile payments 30052015
    --            THEN
    --               BEGIN
    --                  SELECT NVL (spr_sms_number, spr_mobile_no),
    --                         NVL (spr_pin_number, spr_pin)
    --                    INTO v_sms_tel,
    --                         v_ref_no
    --                    FROM tqc_service_providers
    --                   WHERE spr_code = i.vap_spr_code;
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error
    --                        ('Error getting service providers Mobile Payment details'
    --                        );
    --               END;

    --               IF v_sms_tel IS NOT NULL
    --               THEN
    --                  SELECT mpt_code
    --                    INTO v_mpt_code
    --                    FROM tqc_mob_pymnt_types_prefixes, tqc_mobile_pymnt_types
    --                   WHERE mptp_mpt_code = mpt_code
    --                     AND mptp_mob_no_prefix = SUBSTR (v_sms_tel, 1, 4);
    --               ELSE
    --                  raise_application_error
    --                     (-20001,
    --                      'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..'
    --                     );
    --               END IF;

    --               BEGIN
    --                  v_payee_mft_dtls (1) :=
    --                     fms_cheques_pkg.append_mft_payees
    --                                    (v_rec_count,
    --                                     i.vap_code,
    --                                     ROUND (NVL (i.vap_tax_amt, 0),
    --                                            v_bcur_rnd),          ---v_amount,
    --                                     i.vap_payee,               --v_narrative,
    --                                     v_sms_tel,

    --                                     --v_credit_id                                                                                 ,
    --                                     'Mobile Phone Number', --v_credit_id_type
    --                                     v_ref_no,               --v_validation_id
    --                                     'REFERENCE NO'     --v_validation_id_type
    --                                    );
    --                  fms_cheques_pkg.append_chq_trans
    --                                                 (v_rec_count,
    --                                                  ROUND (NVL (i.vap_tax_amt,
    --                                                              0),
    --                                                         v_bcur_rnd
    --                                                        ),
    --                                                  v_narrative || 'PYMT',
    --                                                  v_trnt_gl_code,
    --                                                  v_org_code,
    --                                                  v_paymnt_brh_code,
    --                                                  'D',
    --                                                  v_chq_dtls
    --                                                 );
    --               --fms_chq_mftfile_dtls
    --               EXCEPTION
    --                  WHEN NO_DATA_FOUND
    --                  THEN
    --                     raise_error ('FAILED TO SECURE MFT PAYEE DETAILS FOR');
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_error ('ERROR ON POSTING MFT PAYMENT DETAILS FOR');
    --               END;
    --            ELSE
    --               fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                 ROUND (NVL (i.vap_tax_amt, 0),
    --                                                        v_bcur_rnd
    --                                                       ),
    --                                                 v_narrative || 'PYMT',
    --                                                 v_trnt_gl_code,
    --                                                 v_org_code,
    --                                                 v_paymnt_brh_code,
    --                                                 'D',
    --                                                 v_chq_dtls
    --                                                );
    --            END IF;

    --            --raise_Error('v_bnk_bbr_code='||v_bnk_bbr_code);
    --            IF v_pay_method IN ('EFT', 'RTGS')
    --            THEN
    --               fms_cheques_pkg.create_reqn
    --                  (v_cqr_source,
    --                   i.vap_code,                                           --ref
    --                   i.vap_code,                                        -- ref2,
    --                   TRUNC (SYSDATE),
    --                   v_narrative || ' TAX PAYMENT FOR TRANS NO.' || i.vap_code,
    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),    --cqr_amount
    --                   i.vap_payee,
    --                   v_pay_method,
    --                   NULL,
    --                   v_bnk_bbr_pk,                                          --12
    --                   v_cur_code,
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.vap_authorized_by)
    --                                                   ),
    --                   i.vap_authorize_date,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-TXPYMT',                                -- pmt_type  ,
    --                   v_chq_dtls,
    --                   v_payee_eft_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   v_bnk_bbr_code,
    --                   v_bnk_account,
    --                   NULL,
    --                   'N'                                           --v_auto_auth
    --                  );
    --            ELSIF v_pay_method IN ('MOB')
    --            THEN
    --               fms_cheques_pkg.create_reqn
    --                  (v_cqr_source,
    --                   i.vap_code,                                           --ref
    --                   i.vap_code,                                        -- ref2,
    --                   TRUNC (SYSDATE),
    --                   v_narrative || ' TAX PAYMENT FOR TRANS NO.' || i.vap_code,
    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
    --                   v_bct_brh_code,
    --                   ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),    --cqr_amount
    --                   i.vap_payee,
    --                   v_cur_code,
    --                   v_bct_code,
    --                   fms_interfaces_pkg.get_usercode (UPPER (i.vap_authorized_by)
    --                                                   ),
    --                   i.vap_authorize_date,
    --                   v_user_code,                              --v_cqr_req_by  ,
    --                   'GIS-TXPYMT',                                -- pmt_type  ,
    --                   v_chq_dtls,
    --                   v_payee_mft_dtls,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   NULL,
    --                   v_mpt_code,
    --                   'N'                                           --v_auto_auth
    --                  );
    --            ELSE
    --               fms_cheques_pkg.create_reqn
    --                        (v_cqr_source,
    --                         i.vap_code,
    --                         i.vap_code,
    --                         TRUNC (SYSDATE),
    --                            v_narrative
    --                         || ' TAX PAYMENT FOR TRANS NO.'
    --                         || i.vap_code,
    --                         v_paymnt_brh_code,
    --                         v_bct_brh_code,
    --                         ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),
    --                         i.vap_payee,
    --                         v_cur_code,
    --                         v_bct_code,
    --                         fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
    --                         TRUNC (SYSDATE),
    --                         v_user_code,
    --                         'GIS-TXPYMT',
    --                         v_chq_dtls
    --                        );
    --            END IF;
    --         END IF;

    --         FOR v IN tax_payments_dtls
    --         LOOP
    --            UPDATE gin_clm_payment_vouchers
    --               SET cpv_vap_paid = 'P'
    --             WHERE cpv_vap_code = i.vap_code;
    --         END LOOP;

    --         UPDATE gin_tax_remmittance
    --            SET vap_authorized = 'P'
    --          WHERE vap_code = i.vap_code;
    --      END LOOP;
    --   END;
    PROCEDURE process_tax_pyments (v_vap_code     NUMBER,
                                   v_user_name    VARCHAR2,
                                   v_spr_code     NUMBER,
                                   v_pay_method   VARCHAR2 DEFAULT 'CHQ',
                                   v_type         VARCHAR2)
    IS
        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_payee_mft_dtls        fms_cheques_pkg.type_payee_mft_table;
        v_user_code             NUMBER;
        exc_user_error          EXCEPTION;
        v_cqr_source            NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_org_code              NUMBER;
        v_brh_name              VARCHAR2 (100);
        v_cur_code              NUMBER;
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_rec_count             NUMBER := 0;
        v_bcur_rnd              NUMBER := 2;
        v_payee                 VARCHAR2 (100);
        v_eft_enabled           VARCHAR2 (1);
        v_bnk_account           VARCHAR2 (30);
        v_bnk_bbr_code          VARCHAR2 (30);
        v_sms_tel               VARCHAR2 (30);
        v_ref_no                VARCHAR2 (100);
        v_mpt_code              NUMBER;
        v_bnk_bbr_pk            NUMBER;
        v_narrative             VARCHAR2 (10);

        CURSOR tax_payments IS
            SELECT *
              FROM gin_tax_remmittance
             WHERE     NVL (vap_authorized, 'N') = 'Y'
                   AND vap_code = v_vap_code
                   AND vap_tax_type = v_type;

        CURSOR tax_payments_dtls IS
            SELECT *
              FROM gin_clm_payment_vouchers
             WHERE     cpv_vap_code = v_vap_code
                   AND NVL (cpv_vap_paid, 'N') = 'R';
    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_spr_code IS NOT NULL
        THEN
            SELECT spr_bbr_code, spr_bank_acc_no
              INTO v_bnk_bbr_code, v_bnk_account
              FROM tqc_service_providers
             WHERE spr_code = v_spr_code;
        END IF;

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        FOR i IN tax_payments
        LOOP
            v_cur_code := tqc_interfaces_pkg.orgcurrency (37);
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_paymnt_brh_code :=
                tqc_interfaces_pkg.branchcode (
                    2,
                    fms_settings_pkg.head_office_new (2));
            v_org_code := fms_interfaces_pkg.get_org (v_paymnt_brh_code);
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            fms_interfaces_pkg.trans_bct ('TAXPYMT',
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);

            IF i.vap_tax_type = 'WHTX'
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('WTHTX1',
                                                     NULL,
                                                     'U',
                                                     NULL,
                                                     NULL,
                                                     v_trnt_code,
                                                     v_trnt_gl_code,
                                                     v_trnt_contra_gl_code);
                v_narrative := 'WTHTX';
            ELSIF i.vap_tax_type = 'VATWITHHELD'
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('VATTOWTH',
                                                     NULL,
                                                     'U',
                                                     NULL,
                                                     NULL,
                                                     v_trnt_code,
                                                     v_trnt_gl_code,
                                                     v_trnt_contra_gl_code);
                v_narrative := 'WTHTX';
            ELSIF i.vap_tax_type = 'PT'
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('PTX',
                                                     NULL,
                                                     'U',
                                                     NULL,
                                                     NULL,
                                                     v_trnt_code,
                                                     v_trnt_gl_code,
                                                     v_trnt_contra_gl_code);
                v_narrative := 'PREMTX';
            ELSIF i.vap_tax_type = 'TL'
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('UTL',
                                                     NULL,
                                                     'U',
                                                     NULL,
                                                     NULL,
                                                     v_trnt_code,
                                                     v_trnt_gl_code,
                                                     v_trnt_contra_gl_code);
                v_narrative := 'TL';
            ELSIF i.vap_tax_type = 'PHF'
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('PHFUND',
                                                     NULL,
                                                     'U',
                                                     NULL,
                                                     NULL,
                                                     v_trnt_code,
                                                     v_trnt_gl_code,
                                                     v_trnt_contra_gl_code);
                v_narrative := 'PHF';
            ELSIF i.vap_tax_type = 'SD'
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('SD',
                                                     NULL,
                                                     'U',
                                                     NULL,
                                                     NULL,
                                                     v_trnt_code,
                                                     v_trnt_gl_code,
                                                     v_trnt_contra_gl_code);
                v_narrative := 'SD';
            END IF;

            check_valid_gl_acc (v_trnt_gl_code,
                                v_org_code,
                                v_paymnt_brh_code,
                                v_brh_name,
                                v_trnt_code,
                                NULL                          --i.cmb_scl_code
                                    );

            IF NVL (i.vap_tax_amt, 0) > 0
            THEN
                IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                      v_org_code,
                                                      v_paymnt_brh_code) =
                   FALSE
                THEN
                    raise_application_error (
                        -20001,
                           'UC-WHTX GL A/C - '
                        || v_trnt_gl_code
                        || ' UNDEFINED IN '
                        || v_brh_name
                        || ' CODE '
                        || v_trnt_code);
                END IF;

                v_rec_count := v_rec_count + 1;

                IF v_pay_method IN ('EFT', 'RTGS')
                THEN
                    fms_cheques_pkg.append_eft_payees (
                        v_rec_count,
                        i.vap_code,       --v_ref1                   VARCHAR2,
                        ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),
                        --ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
                        i.vap_payee,    --v_narrative                VARCHAR2,
                        v_bnk_bbr_code,
                        --v_ref_code,--v_bbr_ref_code             VARCHAR2,
                        v_bnk_account,  --v_bnk_account              VARCHAR2,
                        i.vap_code,       --v_ref2                   VARCHAR2,
                        v_payee_eft_dtls);
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),
                        v_narrative || 'PYMT',
                        v_trnt_gl_code,
                        v_org_code,
                        v_paymnt_brh_code,
                        'D',
                        v_chq_dtls);
                ELSIF v_pay_method IN ('MOB')
                --Added by Masinde to take care of mobile payments 30052015
                THEN
                    BEGIN
                        SELECT NVL (spr_sms_number, spr_mobile_no),
                               NVL (spr_pin_number, spr_pin)
                          INTO v_sms_tel, v_ref_no
                          FROM tqc_service_providers
                         WHERE spr_code = i.vap_spr_code;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'Error getting service providers Mobile Payment details');
                    END;

                    IF v_sms_tel IS NOT NULL
                    THEN
                        SELECT mpt_code
                          INTO v_mpt_code
                          FROM tqc_mob_pymnt_types_prefixes,
                               tqc_mobile_pymnt_types
                         WHERE     mptp_mpt_code = mpt_code
                               AND mptp_mob_no_prefix =
                                   SUBSTR (v_sms_tel, 1, 4);
                    ELSE
                        raise_application_error (
                            -20001,
                            'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..');
                    END IF;

                    BEGIN
                        v_payee_mft_dtls (1) :=
                            fms_cheques_pkg.append_mft_payees (
                                v_rec_count,
                                i.vap_code,
                                ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd), ---v_amount,
                                i.vap_payee,                    --v_narrative,
                                v_sms_tel,
                                --v_credit_id                                                                                 ,
                                'Mobile Phone Number',      --v_credit_id_type
                                v_ref_no,                    --v_validation_id
                                'REFERENCE NO'          --v_validation_id_type
                                              );
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),
                            v_narrative || 'PYMT',
                            v_trnt_gl_code,
                            v_org_code,
                            v_paymnt_brh_code,
                            'D',
                            v_chq_dtls);
                    --fms_chq_mftfile_dtls
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            raise_error (
                                'FAILED TO SECURE MFT PAYEE DETAILS FOR');
                        WHEN OTHERS
                        THEN
                            raise_error (
                                'ERROR ON POSTING MFT PAYMENT DETAILS FOR');
                    END;
                ELSE
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),
                        v_narrative || 'PYMT',
                        v_trnt_gl_code,
                        v_org_code,
                        v_paymnt_brh_code,
                        'D',
                        v_chq_dtls);
                END IF;

                --raise_Error('v_bnk_bbr_code='||v_bnk_bbr_code);
                IF v_pay_method IN ('EFT', 'RTGS')
                THEN
                    --               fms_cheques_pkg.create_reqn
                    --                  (v_cqr_source,
                    --                   i.vap_code,                                           --ref
                    --                   i.vap_code,                                        -- ref2,
                    --                   TRUNC (SYSDATE),
                    --                   v_narrative || ' TAX PAYMENT FOR TRANS NO.' || i.vap_code,
                    --                   v_paymnt_brh_code,                        --i.cmb_brn_code,
                    --                   v_bct_brh_code,
                    --                   ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),    --cqr_amount
                    --                   i.vap_payee,
                    --                   v_pay_method,
                    --                   NULL,
                    --                   v_bnk_bbr_pk,                                          --12
                    --                   v_cur_code,
                    --                   v_bct_code,
                    --                   fms_interfaces_pkg.get_usercode (UPPER (i.vap_authorized_by)
                    --                                                   ),
                    --                   i.vap_authorize_date,
                    --                   v_user_code,                              --v_cqr_req_by  ,
                    --                   'GIS-TXPYMT',                                -- pmt_type  ,
                    --                   v_chq_dtls,
                    --                   v_payee_eft_dtls,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   NULL,
                    --                   v_bnk_bbr_code,
                    --                   v_bnk_account,
                    --                   NULL,
                    --                   'N'                                           --v_auto_auth
                    --                  );

                    FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                        v_cqr_source,                         -- v_cqr_source,
                        i.vap_code,                              -- v_cqr_ref,
                        i.vap_code,                             -- v_cqr_ref2,
                        TRUNC (SYSDATE),                    -- v_cqr_ref_date,
                           v_narrative
                        || ' TAX PAYMENT FOR TRANS NO.'
                        || i.vap_code,
                        v_paymnt_brh_code,                  -- v_cqr_brh_code,
                        v_bct_brh_code,                 -- v_cqr_bct_brh_code,
                        ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd), -- v_cqr_amount,
                        i.vap_payee,                           -- v_cqr_payee,
                        v_pay_method,                     -- v_cqr_pay_method,
                        v_cur_code,                         -- v_cqr_cur_code,
                        NULL,                               ---i.cpv_cur_rate,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (
                            UPPER (i.vap_authorized_by)),
                        i.vap_authorize_date,
                        v_user_code,                          -- v_cqr_req_by,
                        'GIS-TXPYMT',                       -- v_cqr_pmt_type,
                        v_bnk_bbr_code,            --v_payee_bank_branch_code,
                        v_bnk_account,                  --v_payee_bank_acc_no,
                        v_chq_dtls,                           -- v_dtls_table,
                        v_payee_eft_dtls,                    --v_payee_eft_rec
                        NULL,                         --v_cqr_physical_address
                        NULL,                          ---v_cqr_postal_address
                        NULL,                              --v_itfc_trans_code
                        NULL,                                    --v_itfc_ref3
                        NULL,                             --v_payee_source_pk,
                        NULL,                           --v_payee_source_type,
                        'N',                                    --v_auto_auth,
                        NULL,                                   --v_num_val_1,
                        NULL,                                 ---v_invoice_no,
                        NULL,                               ---v_invoice_date,
                        NULL,                           ---v_auto_consolidate,
                        NULL,                                   ---v_batch_no,
                        NULL                               ---v_payee_spr_code
                            );
                ELSIF v_pay_method IN ('MOB')
                THEN
                    fms_cheques_pkg.create_reqn (
                        v_cqr_source,
                        i.vap_code,                                      --ref
                        i.vap_code,                                   -- ref2,
                        TRUNC (SYSDATE),
                           v_narrative
                        || ' TAX PAYMENT FOR TRANS NO.'
                        || i.vap_code,
                        v_paymnt_brh_code,                   --i.cmb_brn_code,
                        v_bct_brh_code,
                        ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd), --cqr_amount
                        i.vap_payee,
                        v_cur_code,
                        v_bct_code,
                        fms_interfaces_pkg.get_usercode (
                            UPPER (i.vap_authorized_by)),
                        i.vap_authorize_date,
                        v_user_code,                         --v_cqr_req_by  ,
                        'GIS-TXPYMT',                           -- pmt_type  ,
                        v_chq_dtls,
                        v_payee_mft_dtls,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        v_mpt_code,
                        'N'                                      --v_auto_auth
                           );
                ELSE
                    fms_cheques_pkg.create_reqn (
                        v_cqr_source,
                        i.vap_code,
                        i.vap_code,
                        TRUNC (SYSDATE),
                           v_narrative
                        || ' TAX PAYMENT FOR TRANS NO.'
                        || i.vap_code,
                        v_paymnt_brh_code,
                        v_bct_brh_code,
                        ROUND (NVL (i.vap_tax_amt, 0), v_bcur_rnd),
                        i.vap_payee,
                        v_cur_code,
                        v_bct_code,
                        fms_interfaces_pkg.get_usercode (UPPER (v_user_name)),
                        TRUNC (SYSDATE),
                        v_user_code,
                        'GIS-TXPYMT',
                        v_chq_dtls);
                END IF;
            END IF;

            FOR v IN tax_payments_dtls
            LOOP
                UPDATE gin_clm_payment_vouchers
                   SET cpv_vap_paid = 'P'
                 WHERE cpv_vap_code = i.vap_code;
            END LOOP;

            UPDATE gin_tax_remmittance
               SET vap_authorized = 'P'
             WHERE vap_code = i.vap_code;
        END LOOP;
    END;

    PROCEDURE update_undo_whtax (v_cqr_ref      IN VARCHAR2,
                                 v_cqr_ref2     IN VARCHAR2,
                                 v_cqr_chq_no   IN VARCHAR2,
                                 v_cqr_chq_dt   IN DATE,
                                 v_user_name    IN VARCHAR2,
                                 v_cqr_amount   IN NUMBER)
    IS
        CURSOR cur_whtax IS
            SELECT withtp_code,
                   withtp_apco_cor_code,
                   spr_name,
                   withtp_amt     comm_amt
              FROM gin_clm_wthtax_pymts_dtls, tqc_service_providers
             WHERE     withtp_apco_cor_code = spr_code
                   AND withtp_authorized = 'Y'
                   AND withtp_code = v_cqr_ref;

        -- AND COPDT_TRANS_NO =v_cqr_ref2 ;
        CURSOR cur_whtax_dtls (vcopdtcode IN NUMBER)
        IS
            SELECT withtp_code,
                   withtp_apco_cor_code,
                   spr_name,
                   withtp_amt
              FROM gin_clm_wthtax_pymts, tqc_service_providers
             WHERE     withtp_apco_cor_code = spr_code
                   AND withtp_withtp_code = vcopdtcode;

        v_mtran_no      NUMBER;
        v_cr_mtran_no   NUMBER;
        v_cr_ref_no     VARCHAR2 (35);
        v_cr_bal        NUMBER;
        v_cr_com        NUMBER;
        v_pol_no        VARCHAR2 (35);
    BEGIN
        FOR cur_whtax_rec IN cur_whtax
        LOOP
            BEGIN
                UPDATE gin_clm_wthtax_pymts_dtls
                   SET withtp_paid = 'Y',
                       withtp_paid_chq_date = v_cqr_chq_dt,
                       withtp_paid_chq_no = v_cqr_chq_no
                 WHERE     withtp_code = cur_whtax_rec.withtp_code
                       AND NVL (withtp_authorized, 'N') = 'Y'
                       AND NVL (withtp_paid, 'N') != 'Y';
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                           'ERROR REVERSING COMMISSION PAYMENT VOUCHER NO. ..'
                        || v_cqr_ref
                        || v_cqr_ref2);
            END;

            --  FOR cur_com_dtls_rec IN cur_comm_dtls(cur_comm_rec.COP_AGN_CODE,cur_comm_rec.COP_BRN_CODE) LOOP
            FOR cur_whtax_dtls_rec
                IN cur_whtax_dtls (cur_whtax_rec.withtp_code)
            LOOP
                -- RAISE_ERROR(' cur_com_dtls_rec.COP_CODE'|| cur_com_dtls_rec.COP_CODE||'v_cqr_ref2'||v_cqr_ref2);
                BEGIN
                    UPDATE gin_clm_wthtax_pymts
                       SET withtp_authorized_by = NULL,
                           withtp_authorized = 'N',
                           withtp_authorize_date = NULL,
                           withtp_paid = 'N'
                     WHERE withtp_code = cur_whtax_dtls_rec.withtp_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR UPDATING COMMISSION PAYMENT VOUCHER NO. ...');
                END;
            END LOOP;
        END LOOP;
    END update_undo_whtax;

    PROCEDURE process_clm_fee_pymt (
        v_clmrg_claim_no   VARCHAR2,
        v_trans_no         NUMBER,
        v_user_name        VARCHAR2,
        v_pay_method       VARCHAR2 DEFAULT 'EFT',
        v_from_dt          DATE,
        v_to_dt            DATE)
    IS
        v_cmb_claim_no          NUMBER;
        v_cqr_bnk_dtls          fms_cheques_pkg.type_bnk_dtls_table;

        CURSOR c_claim IS
            SELECT cpv_cmb_claim_no,
                   cpv_vchr_cur_code,
                   cpv_cur_code,
                   cpv_voucher_no,
                   cpv_amount_bcur,
                   cpv_apco_cor_code,
                   cpv_account_type,
                   cpv_agnt_agent_code,
                   cpv_authorised_dt,
                   DECODE (NVL (cmb_coin_pay_type, 'O'),
                           'O', cpv_amount,
                           'F', cpv_coin_tot_amt)          cpv_amount,
                   spr_name                                cpv_payee,
                   cmb_brn_code,
                   cpv_man_amount,
                   cpv_quota_amount,
                   cpv_fstsup_amount,
                   cpv_secsup_amount,
                   cpv_facre_amount,
                   SUBSTR (cpv_tran_type, 0, 2)            cpv_tran_type,
                   cmb_scl_code,
                   DECODE (NVL (cmb_coin_pay_type, 'O'),
                           'O', cpv_vat_amnt,
                           'F', cpv_coin_tot_vat_amnt)     cpv_vat_amnt,
                   DECODE (NVL (cmb_coin_pay_type, 'O'),
                           'O', cpv_whtx_amnt,
                           'F', cpv_coin_tot_whtx_amnt)    cpv_whtx_amnt,
                   DECODE (NVL (cmb_coin_pay_type, 'O'),
                           'O', cpv_net_paid,
                           'F', cpv_coin_tot_net_paid)     cpv_net_paid,
                   cpv_bcur_net_paid,
                   cpv_bcur_vat_amnt,
                   cpv_bcur_whtx_amnt,
                   cpv_post_dated,
                   cpv_post_dated_date,
                   cpv_rein_amount,
                   cpv_rein_amount_bcur,
                   cpv_excess_amount,
                   cpv_excess_amount_bcur,
                   cpv_ret_salvage,
                   cpv_ret_salvage_bcur,
                   NULL                                    cpv_disc_amt,
                   cpv_claimant_type,
                   cpv_reg_cld_code,
                   cpv_cbp_code
              FROM gin_claim_master_bookings,
                   gin_clm_payment_vouchers,
                   tqc_service_providers
             WHERE     cmb_claim_no = cpv_cmb_claim_no
                   AND cmb_claim_no = v_clmrg_claim_no
                   AND spr_code = cpv_apco_cor_code
                   AND NVL (cpv_tran_type, 'CPO') = 'CFO'
                   AND NVL (cpv_payment_mode, 'CHQ') = 'JE'
                   AND NVL (cpv_authorised, 'N') = 'P'
                   AND cpv_authorised_dt BETWEEN v_from_dt AND v_to_dt
                   AND cpv_ggt_trans_no = v_trans_no;

        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_exch_rate2            NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_trt_man_amt           NUMBER;
        v_trt_qs_amt            NUMBER;
        v_trt_fst_amt           NUMBER;
        v_trt_sec_amt           NUMBER;
        v_trt_fac_amt           NUMBER;
        v_lvl                   VARCHAR2 (15);
        rev_type                VARCHAR2 (15);
        v_payment_amt           gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
        v_ripool_amt            NUMBER;
        v_net_amt               NUMBER;
        v_vat_amt               NUMBER;
        v_whtx_amt              NUMBER;
        v_tot_amt               NUMBER;
        v_disc_amt              NUMBER;
        v_rein_amt              NUMBER;
        v_excess_amt            NUMBER;
        v_control_acc           VARCHAR2 (30);
        v_client_type           VARCHAR2 (5);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (25);
        v_salv_amt              NUMBER;
        v_per_code              NUMBER;
        v_auto_auth             VARCHAR2 (1);
        v_eft_enabled           VARCHAR2 (1);
        v_bnk_account           VARCHAR2 (30);
        v_bnk_bbr_code          VARCHAR2 (30);
    BEGIN
        --   raise_error(v_clmrg_claim_no||' = '||v_trans_no||' = '||v_from_dt||' = '||v_to_dt);
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;

        IF NVL (v_pay_method, 'CHQ') = 'EFT'
        THEN
            v_auto_auth := 'N';
        ELSE
            v_auto_auth := 'Y';
        END IF;

        v_rec_count := 0;

        FOR i IN c_claim
        LOOP
            v_exch_rate :=
                get_currexch_rate (i.cpv_vchr_cur_code, v_rnd, v_bcur_rnd);

            IF i.cpv_cur_code = i.cpv_vchr_cur_code
            THEN
                v_payment_amt := i.cpv_amount;
                v_net_amt := i.cpv_net_paid;
                v_vat_amt := i.cpv_vat_amnt;
                v_whtx_amt := i.cpv_whtx_amnt;
                v_disc_amt := i.cpv_disc_amt;
                v_rein_amt := i.cpv_rein_amount;
                v_excess_amt := i.cpv_excess_amount;
                v_salv_amt := i.cpv_ret_salvage;
            ELSE
                v_payment_amt := i.cpv_amount_bcur;
                v_net_amt := i.cpv_bcur_net_paid;
                v_vat_amt := i.cpv_bcur_vat_amnt;
                v_whtx_amt := i.cpv_bcur_whtx_amnt;
                v_disc_amt := ROUND (i.cpv_disc_amt / v_exch_rate, v_rnd);
                v_rein_amt := i.cpv_rein_amount_bcur;
                v_excess_amt := i.cpv_excess_amount_bcur;
                v_salv_amt := i.cpv_ret_salvage_bcur;
            END IF;

            v_cur_code := i.cpv_vchr_cur_code;
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
            v_paymnt_brh_code := i.cmb_brn_code;
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            fms_interfaces_pkg.trans_bct ('CLM',
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          v_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code,
                                          v_pay_method);

            IF ROUND (NVL (v_payment_amt, 0), v_rnd) !=
               (  NVL (v_vat_amt, 0)
                + NVL (v_whtx_amt, 0)
                + NVL (v_rein_amt, 0)
                + NVL (v_excess_amt, 0)
                + NVL (v_salv_amt, 0)
                + ROUND (NVL (v_net_amt, 0), v_rnd))
            THEN
                raise_application_error (
                    -20001,
                       'THE NET CHEQUE AMOUNT '
                    || NVL (i.cpv_net_paid, 0)
                    || ' PLUS VAT '
                    || NVL (i.cpv_vat_amnt, 0)
                    || ' AND WHTTAX '
                    || NVL (i.cpv_whtx_amnt, 0)
                    || 'TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..');
            END IF;

            --        IF i.cpv_tran_type = 'CF'
            --         THEN
            --            rev_type := 'CF';
            --          BEGIN
            --               IF NVL(v_disc_amt,0) > 0 THEN
            --                  SELECT voud_per_code
            --                  INTO v_per_code
            --                  FROM gin_voucher_details
            --                  WHERE voud_cpv_voucher_no=i.cpv_voucher_no;
            --
            --                 gin_stp_claims_pkg.create_srv_prvdr_reserve (
            --                                                                      v_clmrg_claim_no,
            --                                                                      v_per_code,
            --                                                                      -v_disc_amt,
            --                                                                      NULL,
            --                                                                      v_user_name,
            --                                                                      i.cpv_apco_cor_code,
            --                                                                      NULL,
            --                                                                      'A'
            --                                                                       );
            --
            --
            --               END IF;
            --            EXCEPTION
            --           WHEN OTHERS THEN
            --             RAISE_ERROR('Error creating Discount Revision '||SQLERRM(SQLCODE));
            --          END;
            --        END IF;
            --raise_error(v_clmrg_claim_no||' = '||v_trans_no||' = '||v_payment_amt||' = '||v_whtx_amt);
            rev_type := 'CF';

            IF NVL (v_payment_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code (rev_type, --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code);
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);

                IF v_pay_method IN ('EFT')
                THEN
                    BEGIN
                        v_eft_enabled := 'N';

                        IF rev_type = 'CF'
                        THEN
                            IF bnk_bbr_code (i.cpv_apco_cor_code, 1)
                                   IS NOT NULL
                            THEN
                                v_eft_enabled :=
                                    account_enabled (
                                        bnk_bbr_code (i.cpv_apco_cor_code, 1));
                                v_bnk_account :=
                                    bnk_account (i.cpv_apco_cor_code, 1);
                                v_bnk_bbr_code :=
                                    tqc_interfaces_pkg.bank_ref (
                                        bnk_bbr_code (i.cpv_apco_cor_code, 1));

                                IF v_eft_enabled = 'N'
                                THEN
                                    IF bnk_bbr_code (i.cpv_apco_cor_code, 5)
                                           IS NOT NULL
                                    THEN
                                        v_eft_enabled :=
                                            account_enabled (
                                                bnk_bbr_code (
                                                    i.cpv_apco_cor_code,
                                                    5));
                                        v_bnk_account :=
                                            bnk_account (i.cpv_apco_cor_code,
                                                         5);
                                        v_bnk_bbr_code :=
                                            tqc_interfaces_pkg.bank_ref (
                                                bnk_bbr_code (
                                                    i.cpv_apco_cor_code,
                                                    5));
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_error ('ERROR GETTING BANK ACC INFO... ');
                    END;

                    IF v_eft_enabled = 'N'
                    THEN
                        raise_application_error (
                            -20001,
                               'BANK BRANCH NOT ENABLED TO TRANSACT '
                            || v_pay_method
                            || ' PAYMENTS'
                            || i.cpv_reg_cld_code
                            || ' ; '
                            || rev_type
                            || ' ; '
                            || i.cpv_apco_cor_code);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_eft_payees (
                        v_rec_count,
                        --v_no                       NUMBER,
                        i.cpv_voucher_no,
                        --v_ref1                   VARCHAR2,
                        ROUND (NVL (v_payment_amt, 0), v_bcur_rnd),
                        --v_amount                   NUMBER,
                        i.cpv_payee,
                        --v_narrative                VARCHAR2,
                        v_bnk_bbr_code,
                        --v_ref_code,--v_bbr_ref_code             VARCHAR2,
                        v_bnk_account,
                        --v_bnk_account              VARCHAR2,
                        i.cpv_cmb_claim_no,
                        --v_ref2                   VARCHAR2,
                        v_payee_eft_dtls);
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (v_payment_amt, v_rnd),
                        'CLAIM',                                  --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;
            END IF;

            IF NVL (v_salv_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('CS', --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code);
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (v_rec_count,
                                                  ROUND (v_salv_amt, v_rnd),
                                                  'CLAIM',        --narrative,
                                                  v_trnt_gl_code,
                                                  -- crt_acc_number
                                                  v_org_code, --crt_acc_org_code ,
                                                  v_paymnt_brh_code,
                                                  --i.cmb_brn_code,          --v_brh_code,
                                                  'D',              --v_dr_cr,
                                                  v_chq_dtls);
            END IF;

            IF NVL (v_excess_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('CRE', --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code);
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_excess_amt, 0), v_rnd),
                    'CLAIM EXCESS',                               --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,
                    --i.cmb_brn_code,          --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            --RAISE_ERROR(v_rein_amt);
            IF NVL (v_rein_amt, 0) > 0
            THEN
                IF NVL (i.cpv_rein_amount, 0) != 0
                THEN
                    IF NVL (i.cpv_account_type, 'D') = 'D'
                    THEN
                        v_client_type := 'D';
                    ELSE
                        BEGIN
                            SELECT agn_act_code, agn_sht_desc
                              INTO v_act_code, v_agnt_sht_desc
                              FROM tqc_agencies
                             WHERE agn_code = i.cpv_agnt_agent_code;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                raise_application_error (
                                    -20021,
                                       'AGENT - '
                                    || v_client_type
                                    || ' NOT FOUND ');
                            WHEN OTHERS
                            THEN
                                raise_application_error (
                                    -20022,
                                    'AGENT INFO ' || SQLERRM (SQLCODE));
                        END;

                        IF v_act_code IN (2,
                                          9,
                                          10,
                                          16)
                        THEN
                            v_client_type := 'A';
                        ELSIF v_act_code = 3
                        THEN
                            v_client_type := 'B';
                        ELSIF v_act_code = 4
                        THEN
                            v_client_type := 'FI';
                        ELSIF v_act_code = 5
                        THEN
                            v_client_type := 'I';
                        ELSIF v_act_code = 6
                        THEN
                            v_client_type := 'R';
                        ELSIF v_act_code = 7
                        THEN
                            v_client_type := 'FO';
                        ELSE
                            raise_application_error (
                                -20001,
                                   'UNDEFINED ACCOUNT TYPE - '
                                || v_act_code
                                || ' -FOR AGENT '
                                || v_agnt_sht_desc
                                || 'i.CPV_ACCOUNT_TYPE '
                                || i.cpv_account_type
                                || 'v_clmrg_claim_no ='
                                || v_clmrg_claim_no);
                        END IF;
                    END IF;

                    IF v_client_type IS NULL
                    THEN
                        raise_application_error (
                            -20023,
                            'CANNOT POST NULL CLIENT TYPE');
                    ELSE
                        v_control_acc :=
                            fms_interfaces_pkg.sl_control_acc ('GIS',
                                                               v_client_type);
                    END IF;

                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,
                        --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,
                        --v_scl_code IN NUMBER,
                        'U',                     --     v_app_lvl IN VARCHAR2,
                        NULL,
                        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,
                        --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code,
                        --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code);

                    IF fms_interfaces_pkg.valid_trns_acc (v_control_acc,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'CP GL CTRL A/C - '
                            || v_control_acc
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || i.cmb_scl_code);
                    END IF;

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'CP GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || i.cmb_scl_code);
                    END IF;

                    v_rec_count := v_rec_count + 1;

                    BEGIN
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.cpv_rein_amount, 0), v_bcur_rnd),
                            'GL TRANS' || v_trnt_code,
                            --narrative,
                            v_trnt_gl_code,
                            -- crt_acc_number
                            v_org_code,                   --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'C',                                    --v_dr_cr,
                            v_chq_dtls);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20026,
                                   'ERROR POSTING GL TRANS FOR '
                                || v_trnt_code
                                || ':- '
                                || SQLERRM (SQLCODE));
                    END;
                END IF;
            END IF;

            IF NVL (v_vat_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('WTHVAT', --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code);
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_vat_amt, 0), v_rnd),
                    'CLAIM',                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,
                    --i.cmb_brn_code,          --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            --RAISE_ERROR(v_whtx_amt);
            IF NVL (v_whtx_amt, 0) != 0
            THEN
                gin_interfaces_pkg.get_gl_acct_code ('WTHTPY', --v_trnt_type IN VARCHAR2,
                                                     i.cmb_scl_code, --v_scl_code IN NUMBER,
                                                     'U', --     v_app_lvl IN VARCHAR2,
                                                     NULL, --          v_btr_trans_code IN VARCHAR2,
                                                     NULL,
                                                     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                                                     v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                                                     v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                                                     v_trnt_contra_gl_code);
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_whtx_amt, 0), v_rnd),
                    'CLAIM',                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            ---------------------------To take care of reinsurance
            BEGIN
                SELECT SUM (
                           DECODE (trs_trtg_code,
                                   1001, NVL (ctrtr_trt_amt_pcur, 0),
                                   0)),
                       SUM (
                           DECODE (trs_trtg_code,
                                   1003, NVL (ctrtr_trt_amt_pcur, 0),
                                   0)),
                       SUM (
                           DECODE (trs_trtg_code,
                                   10041, NVL (ctrtr_trt_amt_pcur, 0),
                                   0)),
                       SUM (
                           DECODE (trs_trtg_code,
                                   10042, NVL (ctrtr_trt_amt_pcur, 0),
                                   0))
                  INTO v_trt_man_amt,
                       v_trt_qs_amt,
                       v_trt_fst_amt,
                       v_trt_sec_amt
                  FROM gin_clm_treaty_recoveries, gin_treaties
                 WHERE     ctrtr_trs_code = trs_code
                       AND ctrtr_cmb_claim_no = v_clmrg_claim_no
                       AND ctrtr_ggt_trans_no = v_trans_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'SYSTEM COULD NOT RETRIEVE TREATY RI APPORTIONMENT ');
            END;

            --**********sIGN CHANGES FOR TREATIES****************
            IF v_trt_man_amt <> 0
            THEN
                v_lvl := 'MAN';

                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'CLAIM PAYMENT MANDATORY TREATY AMOUNT REVENUE ITEM FOR SUB CLASS '
                            || i.cmb_scl_code
                            || ' IS NOT DEFINED..');
                END;

                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                check_valid_gl_acc (v_trnt_contra_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_man_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_man_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_contra_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            --**************************** Update Quota Revision Amount***************************
            --RAISE_ERROR('v_trt_qs_amt='||v_trt_qs_amt);
            IF v_trt_qs_amt <> 0
            THEN
                v_lvl := 'QST';

                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'CLAIM PAYMENT QUOTA SHARE AMOUNT REVENUE ITEM FOR SUB CLASS '
                            || i.cmb_scl_code
                            || ' IS NOT DEFINED..');
                END;

                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                --  Raise_error(v_trnt_gl_code);
                check_valid_gl_acc (v_trnt_contra_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_qs_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_qs_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_contra_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            --**************************** Update FIRST SURPLUS Revision Amount***************************
            IF v_trt_fst_amt <> 0
            THEN
                v_lvl := 'FSTSUP';

                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others (
                               'CLAIM PAYMENT FIRST SURPLUS REVENUE ITEM FOR SUB CLASS '
                            || i.cmb_scl_code
                            || ' IS NOT DEFINED..');
                END;

                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_trnt_contra_gl_code :=
                    fms_interfaces_pkg.sl_control_acc ('GIS', 'R', 'FSTSUP');
                check_valid_gl_acc (v_trnt_contra_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_fst_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_fst_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_contra_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            --**************************** Update SECOND SURPLUS Revision Amount***************************
            IF v_trt_sec_amt <> 0
            THEN
                v_lvl := 'SECSUP';

                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others (
                               'CLAIM PAYMENT SECOND SURPLUS AMOUNT REVENUE ITEM FOR SUB CLASS '
                            || i.cmb_scl_code
                            || ' IS NOT DEFINED..');
                END;

                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                check_valid_gl_acc (v_trnt_contra_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_sec_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_sec_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_contra_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            --**************************** Update Facultative Revision Amount***************************
            BEGIN
                SELECT SUM (NVL (cfrr_amount, 0))
                  INTO v_trt_fac_amt
                  FROM gin_clm_facre_recoveries
                 WHERE     cfrr_cmb_claim_no = v_clmrg_claim_no
                       AND cfrr_ggt_trans_no = v_trans_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_when_others (
                        'SYSTEM COULD NOT RETRIEVE FACRE RI APPORTIONMENT ');
            END;

            IF v_trt_fac_amt <> 0
            THEN
                v_lvl := 'FO';

                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others (
                               'CLAIM PAYMENT FACULTATIVE OUT REVENUE ITEM FOR  SUB CLASS '
                            || i.cmb_scl_code
                            || ' IS NOT DEFINED..');
                END;

                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_trnt_contra_gl_code :=
                    fms_interfaces_pkg.sl_control_acc ('GIS', 'FO');
                check_valid_gl_acc (v_trnt_contra_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_fac_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_trt_fac_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_contra_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;

            BEGIN
                SELECT SUM (NVL (crpr_amt, 0))
                  INTO v_ripool_amt
                  FROM gin_clm_ri_pool_recoveries
                 WHERE crpr_ggt_tran_no = v_trans_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'System could not retrieve FACRE RI apportionment ');
            END;

            IF v_ripool_amt <> 0
            THEN                                           -- reinsurance pool
                v_lvl := 'POOL';

                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_when_others (
                               'CLAIM PAYMENT REINSURANCE POOL REVENUE ITEM FOR  SUB CLASS '
                            || i.cmb_scl_code
                            || ' IS NOT DEFINED..');
                END;

                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                check_valid_gl_acc (v_trnt_contra_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_ripool_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (v_ripool_amt, v_rnd)),
                    'CLAIM',                                      --narrative,
                    v_trnt_contra_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls);
            END IF;
        --************************************************************
        --RAISE_ERROR('v_pay_method='||v_pay_method);
        --         IF v_pay_method IN ('EFT') THEN
        --             BEGIN
        --                 Fms_Cheques_Pkg.create_reqn (v_cqr_source,
        --                                               i.cpv_voucher_no,                                      --ref
        --                                               i.cpv_cmb_claim_no,                                 -- ref2,
        --                                              TRUNC (SYSDATE),
        --                                               i.cpv_cmb_claim_no,--'GIS CLAIM FEE',             --narrative V
        --                                              v_paymnt_brh_code,
        --                                              v_bct_brh_code,
        --                                              ROUND (NVL (v_net_amt, 0), v_bcur_rnd),
        --                                                 i.cpv_payee,
        --                                              v_pay_method,
        --                                              NULL,
        --                                              NULL,
        --                                              i.cpv_vchr_cur_code,
        --                                              v_bct_code,
        --                                              fms_interfaces_pkg.get_usercode (
        --                                                 UPPER ((v_user_name))),
        --                                              i.cpv_authorised_dt,
        --                                              v_user_code,
        --                                              'GIS-CLAIM',
        --                                              v_chq_dtls,
        --                                              v_payee_eft_dtls,
        --                                              NULL,
        --                                              NULL,
        --                                              NULL,
        --                                              NULL,
        --                                              NULL,
        --                                              v_bnk_bbr_code,
        --                                              v_bnk_account,
        --                                              NULL,
        --                                              v_auto_auth
        --                                              );
        --
        --
        --             EXCEPTION
        --                WHEN OTHERS THEN
        --                   RAISE_APPLICATION_ERROR (-20001, 'CREATE_REQN :- ' || v_net_amt || ' $ '   || SQLERRM (SQLCODE)    );
        --             END;
        --         END IF;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'CLM REQN NOT CREATED FOR CLAIM # ' || v_clmrg_claim_no);
        END IF;
    END;

    PROCEDURE update_coin (v_cqr_ref      IN VARCHAR2,
                           v_cqr_ref2     IN VARCHAR2,
                           v_cqr_chq_no   IN VARCHAR2,
                           v_cqr_chq_dt   IN DATE,
                           v_user_name    IN VARCHAR2,
                           v_cqr_amount   IN NUMBER)
    IS
        CURSOR cur_coin IS
            SELECT coinp_code,
                   coinp_agn_code,
                   coinp_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   agn_sht_desc,
                   act_type_id,
                   coinp_cur_code,
                   act_account_type,
                   coinp_amt,
                   coinp_vat,
                   coinp_net_amt,
                   coinp_dr_mtran_no,
                   coinp_cr_mtran_no
              FROM gin_coinsurance_pymts, tqc_agencies, tqc_account_types
             WHERE     coinp_agn_code = agn_code
                   AND agn_act_code = act_code
                   AND coinp_authorized = 'Y'
                   AND coinp_code = v_cqr_ref
                   AND coinp_dr_ref_no = v_cqr_ref2;

        CURSOR cur_coins_dtls (v_batch_no IN NUMBER, v_agn_code IN NUMBER)
        IS
            SELECT *
              FROM gin_master_transactions
             WHERE     mtran_pol_batch_no = v_batch_no
                   AND mtran_dc = 'C'
                   AND mtran_tran_type != 'SF'
                   AND mtran_client_code = v_agn_code
                   AND mtran_client_type = 'I';

        v_mtran_no      NUMBER;
        v_pol_no        VARCHAR2 (30);
        v_cr_com        NUMBER;
        v_cr_mtran_no   NUMBER;
        v_cr_ref_no     VARCHAR2 (30);
        v_cr_bal        NUMBER;
        v_batch_no      NUMBER;
    BEGIN
        FOR cur_coin_rec IN cur_coin
        LOOP
            BEGIN
                SELECT mtran_client_polcy_no, mtran_pol_batch_no
                  INTO v_pol_no, v_batch_no
                  FROM gin_master_transactions
                 WHERE mtran_no = cur_coin_rec.coinp_dr_mtran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            FOR cur_coins_dtls_rec
                IN cur_coins_dtls (v_batch_no, cur_coin_rec.coinp_agn_code)
            LOOP
                --RAISE_ERROR(v_cqr_ref||'='||v_cqr_ref2||'='||cur_coins_dtls_rec.mtran_no);
                BEGIN
                    SELECT TO_NUMBER (
                                  TO_CHAR (SYSDATE, 'YYYY')
                               || gin_mtran_no_seq.NEXTVAL)
                      INTO v_mtran_no
                      FROM DUAL;

                    UPDATE gin_master_transactions
                       SET mtran_coinp_code = cur_coin_rec.coinp_code
                     WHERE mtran_no = cur_coins_dtls_rec.mtran_no;

                    INSERT INTO gin_master_transactions (
                                    mtran_no,
                                    mtran_doc_date,
                                    mtran_date,
                                    mtran_ref_no,
                                    mtran_other_ref,
                                    mtran_tran_type,
                                    mtran_dc,
                                    mtran_control_acc,
                                    mtran_client_type,
                                    mtran_client_code,
                                    mtran_amount,
                                    mtran_balance,
                                    mtran_authorised,
                                    mtran_net_amt,
                                    mtran_posting_date,
                                    mtran_ggt_tran_no,
                                    mtran_prp_code,
                                    mtran_btr_trans_code,
                                    mtran_origin,
                                    mtran_cur_code,
                                    mtran_cur_symbol,
                                    mtran_brn_code,
                                    mtran_brn_sht_desc,
                                    mtran_posted_by,
                                    mtran_client_polcy_no,
                                    mtran_coinp_code,
                                    mtran_vat)
                             VALUES (
                                 v_mtran_no,
                                 TRUNC (SYSDATE),
                                 TRUNC (SYSDATE),
                                 'COIN',
                                 cur_coin_rec.coinp_code,
                                 'PYM',
                                 'D',
                                 cur_coin_rec.agn_sht_desc,
                                 cur_coin_rec.act_type_id,
                                 cur_coin_rec.coinp_agn_code,   --acc sht desc
                                 ABS (cur_coin_rec.coinp_net_amt),
                                 cur_coin_rec.coinp_net_amt,
                                 'Y',
                                 cur_coin_rec.coinp_net_amt,
                                 TRUNC (SYSDATE),
                                 NULL,
                                 NULL,
                                 'PM',
                                 'U',
                                 cur_coin_rec.coinp_cur_code,
                                 tqc_interfaces_pkg.currencysymbol (
                                     cur_coin_rec.coinp_cur_code),
                                 cur_coin_rec.coinp_brn_code,
                                 fms_interfaces_pkg.brh_name (
                                     cur_coin_rec.coinp_brn_code,
                                     'S'),
                                 v_user_name,
                                 cur_coins_dtls_rec.mtran_client_polcy_no,
                                 cur_coin_rec.coinp_code,
                                 cur_coin_rec.coinp_vat);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'ERROR UPDATING SUBSIDIARY LEDGER RECORD...'
                            || v_mtran_no);
                END;

                BEGIN
                    v_cr_com := 0;
                    gis_accounts_utilities.knock_off_transactions (
                        cur_coins_dtls_rec.mtran_no,
                        cur_coins_dtls_rec.mtran_ref_no,
                        v_mtran_no,
                        'N',
                        TRUNC (SYSDATE),
                        cur_coins_dtls_rec.mtran_balance,
                        v_cr_com,
                        cur_coin_rec.coinp_net_amt,
                        'N');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'Error Reconcilling Transaction On Account..');
                END;

                BEGIN
                    UPDATE gin_coinsurance_pymts
                       SET coinp_paid = 'Y',
                           coinp_paid_chq_no = v_cqr_chq_no,
                           coinp_paid_chq_date = v_cqr_chq_dt
                     WHERE coinp_code = cur_coin_rec.coinp_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                            'ERROR UPDATING COIN PAYMENT VOUCHER NO....');
                END;
            END LOOP;
        END LOOP;
    --raise_error ('ERROR UPDATING COIN PAYMENT VOUCHER NO....');
    END update_coin;

    PROCEDURE update_cancl_coin (v_cqr_ref      IN VARCHAR2,
                                 v_cqr_ref2     IN VARCHAR2,
                                 v_cqr_chq_no   IN VARCHAR2,
                                 v_cqr_chq_dt   IN DATE,
                                 v_user_name    IN VARCHAR2,
                                 v_cqr_amount   IN NUMBER)
    IS
        CURSOR cur_coin IS
            SELECT coinp_code,
                   coinp_agn_code,
                   coinp_brn_code,
                   agn_name,
                   agn_act_code,
                   agn_comm_allowed,
                   agn_con_code,
                   coinp_cr_mtran_no,
                   coinp_dr_mtran_no,
                   coinp_amt
              FROM gin_coinsurance_pymts, tqc_agencies
             WHERE coinp_agn_code = agn_code AND coinp_code = v_cqr_ref;

        v_mtran_no      NUMBER;
        v_cr_mtran_no   NUMBER;
        v_cr_ref_no     VARCHAR2 (35);
        v_cr_bal        NUMBER;
        v_cr_com        NUMBER;
        v_pol_no        VARCHAR2 (35);
    BEGIN
        FOR cur_coin_rec IN cur_coin
        LOOP
            BEGIN
                UPDATE gin_coinsurance_pymts
                   SET coinp_authorized_by = NULL,
                       coinp_authorized = 'N',
                       coinp_authorize_date = NULL,
                       coinp_paid = 'N'
                 WHERE coinp_code = cur_coin_rec.coinp_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error Updating Coin Payment Voucher No....');
            END;
        END LOOP;
    END update_cancl_coin;

    FUNCTION cash_trans_alloc (v_rct_code NUMBER)
        RETURN VARCHAR2
    IS
        CURSOR tmap_trans (v_rct_mtran_no NUMBER)
        IS
              SELECT mtran_no,
                     NVL (mtran_pol_batch_no, 1)                                   mtran_pol_batch_no,
                     SUM ((DECODE (tmap_drcr, 'C', -1, 1) * ABS (tmap_amount)))    tmap_amount
                FROM gin_tran_mapping, gin_master_transactions
               WHERE     tmap_mtran_no = v_rct_mtran_no
                     AND mtran_no = tmap_check_mtran_no
            GROUP BY mtran_no, mtran_pol_batch_no;

        v_interface_type   gin_products.pro_interface_type%TYPE;
        v_mtran_no         NUMBER;
    BEGIN
        BEGIN
            SELECT mtran_no
              INTO v_mtran_no
              FROM gin_master_transactions
             WHERE mtran_rct_code = v_rct_code AND mtran_dc = 'D';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                raise_error (v_rct_code);
        END;

        FOR x IN tmap_trans (v_mtran_no)
        LOOP
            IF x.mtran_pol_batch_no != 1
            THEN
                SELECT pro_interface_type
                  INTO v_interface_type
                  FROM gin_policies, gin_products
                 WHERE     pol_pro_code = pro_code
                       AND pol_batch_no = x.mtran_pol_batch_no;
            END IF;

            IF     NVL (v_interface_type, 'ACCRUAL') = 'CASH'
               AND NVL (x.tmap_amount, 0) != 0
            THEN
                RETURN 'Y';
            END IF;
        END LOOP;

        RETURN 'N';
    END;

    FUNCTION validate_transmittal (v_barcode_no IN VARCHAR2)
        RETURN NUMBER
    IS
        /* This function return 3 status
             0 -- Valid transmittal for receipting
             1-- false transmittal
             2 -- Transmittal fully settled
        */
        v_return   NUMBER;
        v_cnt      NUMBER;
    BEGIN
        BEGIN
            SELECT COUNT (0)
              INTO v_cnt
              FROM gin_gis_transmitals
             WHERE     (   ggts_tran_ref_no = v_barcode_no
                        OR ggts_ipay_ref_no = v_barcode_no)
                   AND NVL (ggts_amt, 0) <= 0;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        IF NVL (v_cnt, 0) != 0
        THEN
            v_return := 1;
        ELSE
            BEGIN
                SELECT COUNT (0)
                  INTO v_cnt
                  FROM gin_gis_transmitals
                 WHERE     (   ggts_tran_ref_no = v_barcode_no
                            OR ggts_ipay_ref_no = v_barcode_no)
                       AND NVL (ggts_amt, 0) > NVL (ggts_rct_amt, 0);
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            IF NVL (v_cnt, 0) = 1
            THEN
                v_return := 0;
            ELSE
                v_return := 2;
            END IF;
        END IF;

        RETURN v_return;
    END;

    PROCEDURE update_transmittal_rct (v_pol_batch_no   IN NUMBER,
                                      v_rct_amt        IN NUMBER,
                                      v_cancel_rct     IN VARCHAR2,
                                      v_rct_type       IN VARCHAR2)
    IS
    BEGIN
        --RAISE_ERROR('v_pol_batch_no'||v_pol_batch_no||';'||v_rct_type);
        IF v_rct_type IN ('DBT', 'PDR', 'DBTD')
        THEN
            BEGIN
                UPDATE GIN_GIS_TRANSMITALS
                   SET GGTS_RCT_AMT =
                             NVL (GGTS_RCT_AMT, 0)
                           +   DECODE (v_cancel_rct, 'Y', -1, 1)
                             * ABS (v_rct_amt)
                 WHERE     GGTS_POL_BATCH_NO = v_pol_batch_no
                       AND GGTS_UW_CLM_TRAN = 'U';
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NULL;
                WHEN OTHERS
                THEN
                    NULL;
            END;
        ELSIF v_rct_type IN ('RNRC')
        THEN
            BEGIN
                UPDATE GIN_GIS_TRANSMITALS
                   SET GGTS_RCT_AMT =
                             NVL (GGTS_RCT_AMT, 0)
                           +   DECODE (v_cancel_rct, 'Y', -1, 1)
                             * ABS (v_rct_amt)
                 WHERE     GGTS_POL_BATCH_NO = v_pol_batch_no
                       AND GGTS_UW_CLM_TRAN = 'RN';
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;
        ELSIF v_rct_type IN ('QUOT')
        THEN
            BEGIN
                UPDATE GIN_GIS_TRANSMITALS
                   SET GGTS_RCT_AMT =
                             NVL (GGTS_RCT_AMT, 0)
                           +   DECODE (v_cancel_rct, 'Y', -1, 1)
                             * ABS (v_rct_amt)
                 WHERE     GGTS_QUOT_CODE = v_pol_batch_no
                       AND GGTS_UW_CLM_TRAN = 'Q';
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;
        END IF;
    END;

    --   PROCEDURE update_canc_mdp (
    --      v_cqr_ref      IN   VARCHAR2,
    --      v_cqr_ref2     IN   VARCHAR2,
    --      v_cqr_chq_no   IN   VARCHAR2,
    --      v_cqr_chq_dt   IN   DATE,
    --      v_user_name    IN   VARCHAR2,
    --      v_cqr_amount   IN   NUMBER
    --   )
    --   IS
    --      v_credit_mtran_no     NUMBER;
    --      v_cr_amt              NUMBER (23, 5);
    --      v_cr_ref_no           VARCHAR2 (50);
    --      v_dr_mtran_no         NUMBER;
    --      v_dr_ref_no           VARCHAR2 (50);
    --      v_auto_allocate       VARCHAR2 (1)   := 'Y';
    --      v_mtran_no            NUMBER;
    --      v_drcr                VARCHAR2 (200) := 'C';
    --      v_mtran_cur_code      NUMBER;
    --      v_mtran_cur_rate      NUMBER;
    --      v_mtran_client_code   NUMBER;
    --      v_mtran_control_acc   VARCHAR2 (200);
    --      v_mtran_payee         VARCHAR2 (200);
    --      v_mtran_brn_code      NUMBER;
    --      v_amount              NUMBER;
    --      v_transact_no         NUMBER;
    --       v_balance number;
    --       v_net_amount number;
    --       v_settlement number;
    --
    --      CURSOR MDP(v_trans_no number) IS
    --      select * from gin_master_transactions where mtran_ggt_tran_no=v_trans_no;
    --      BEGIN
    --
    --
    --
    --      BEGIN
    ----      raise_error('v_cqr_ref:'||v_cqr_ref);
    ----         v_dr_mtran_no := REPLACE (v_cqr_ref, 'MDP/', '');
    --         v_dr_mtran_no := SUBSTR(v_cqr_ref, instr(v_cqr_ref, '/')+1);
    --
    ----         RAISE_ERROR('v_dr_mtran_no:'||v_dr_mtran_no);
    --      END;
    --
    --      BEGIN
    --      select mtran_ggt_tran_no INTO v_transact_no  from gin_master_transactions  WHERE mtran_no=v_dr_mtran_no;
    --      EXCEPTION WHEN OTHERS THEN
    --      RAISE_eRROR('Error getting MDP Sub ledger details...');
    --      END;
    --
    --

    --     FOR m in MDP(v_transact_no) LOOP
    --
    --      v_dr_mtran_no:=m.mtran_no;
    --      v_drcr:=m.mtran_dc;
    ----      v_mtran_no:=m.mtran_no;
    --
    --      BEGIN
    ----         SELECT mtran_ref_no, mtran_cur_code, mtran_cur_rate,
    ----                mtran_client_code, mtran_control_acc, mtran_payee,
    ----                mtran_brn_code
    ----           INTO v_dr_ref_no, v_mtran_cur_code, v_mtran_cur_rate,
    ----                v_mtran_client_code, v_mtran_control_acc, v_mtran_payee,
    ----                v_mtran_brn_code
    ----           FROM gin_master_transactions
    ----          WHERE mtran_no =v_dr_mtran_no ;

    --         SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
    --                || gin_mtran_no_seq.NEXTVAL
    --           INTO v_mtran_no
    --           FROM DUAL;

    --         IF v_drcr = 'C'
    --         THEN
    --            v_amount := NVL (m.mtran_amount, 0) * -1;
    --            v_balance:=NVL (m.mtran_balance, 0) * -1;
    --            v_net_amount:=NVL (m.mtran_net_amt, 0) * -1;
    --            v_settlement:=NVL (m.mtran_settlement, 0) * -1;
    --            v_drcr := 'C';
    --         ELSE
    --            v_amount := NVL (m.mtran_amount, 0) * 1;
    --            v_balance:=NVL (m.mtran_balance, 0) * 1;
    --            v_net_amount:=NVL (m.mtran_net_amt, 0) * 1;
    --            v_settlement:=NVL (m.mtran_settlement, 0) * 1;
    --            v_drcr := 'D';
    --         END IF;

    --         BEGIN
    --            INSERT INTO gin_master_transactions
    --                        (mtran_no, mtran_date, mtran_ref_no,
    --                         mtran_other_ref, mtran_tran_type, mtran_dc,
    --                         mtran_control_acc, mtran_client_type,
    --                         mtran_client_code,
    --                         mtran_amount,
    --                         mtran_balance,
    --                         mtran_pol_batch_no, mtran_scl_code,
    --                         mtran_narrations,
    --                         mtran_rei_code, mtran_client_polcy_no,
    --                         mtran_pol_ren_endos_no, mtran_acct_code,
    --                         mtran_ggt_tran_no,
    --                         mtran_net_amt,
    --                         mtran_settlement,
    --                         mtran_posting_date, mtran_cmb_claim_no,
    --                         mtran_prp_code, mtran_authorised,
    --                         mtran_date_authorized, mtran_authorised_by,
    --                         mtran_pro_sht_desc, mtran_pro_code, mtran_origin,
    --                         mtran_cur_code, mtran_cur_symbol, mtran_cur_rate,
    --                         mtran_btr_trans_code, mtran_payee, mtran_brn_code
    --                        )
    --                 VALUES (v_mtran_no, TRUNC (SYSDATE), 'MDP',
    --                         NULL, 'MDP', v_drcr,
    --                         v_mtran_control_acc, 'R',
    --                         m.mtran_client_code,
    --                         DECODE (v_drcr, 'C', -ABS (v_amount), ABS (v_amount)),
    --                         DECODE (v_drcr, 'C', -ABS (v_balance), ABS (v_balance)),
    --                         NULL, NULL,
    --                         DECODE (v_drcr, 'C', 'MDP CREDIT', 'D', 'MDP DEBIT'),
    --                         NULL, NULL,
    --                         NULL, 'MDP',
    --                         NULL,
    --                         DECODE (v_drcr, 'C', -ABS (v_net_amount), ABS (v_net_amount)),
    --                         DECODE (v_drcr, 'C', -ABS (v_settlement), ABS (v_settlement)),
    --                         TRUNC (SYSDATE), NULL,
    --                         NULL, 'Y',
    --                         TRUNC (SYSDATE), v_user_name,
    --                         NULL, NULL, 'R',
    --                         m.mtran_cur_code, NULL, m.mtran_cur_rate,
    --                         'MDP', m.mtran_payee, m.mtran_brn_code
    --                        );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('ERROR UPDATING XOL MDP STATEMENTS...');
    --         END;
    --      END;
    --   END LOOP;
    --
    --       cancel_mdp_chq_payment(v_transact_no);
    --   END update_canc_mdp;

    --

    PROCEDURE update_canc_mdp (v_cqr_ref      IN VARCHAR2,
                               v_cqr_ref2     IN VARCHAR2,
                               v_cqr_chq_no   IN VARCHAR2,
                               v_cqr_chq_dt   IN DATE,
                               v_user_name    IN VARCHAR2,
                               v_cqr_amount   IN NUMBER)
    IS
        v_credit_mtran_no     NUMBER;
        v_cr_amt              NUMBER (23, 5);
        v_cr_ref_no           VARCHAR2 (50);
        v_dr_mtran_no         NUMBER;
        v_dr_ref_no           VARCHAR2 (50);
        v_auto_allocate       VARCHAR2 (1) := 'Y';
        v_mtran_no            NUMBER;
        v_drcr                VARCHAR2 (200) := 'C';
        v_mtran_cur_code      NUMBER;
        v_mtran_cur_rate      NUMBER;
        v_mtran_client_code   NUMBER;
        v_mtran_control_acc   VARCHAR2 (200);
        v_mtran_payee         VARCHAR2 (200);
        v_mtran_brn_code      NUMBER;
        v_amount              NUMBER;
        v_transact_no         NUMBER;
        v_balance             NUMBER;
        v_net_amount          NUMBER;
        v_settlement          NUMBER;
        v_canc_check          VARCHAR2 (1) := 'N';
    --      CURSOR MDP(v_trans_no number) IS
    --      select * from gin_master_transactions where mtran_ggt_tran_no=v_trans_no;
    BEGIN
        BEGIN
            --      raise_error('v_cqr_ref:'||v_cqr_ref);
            --         v_dr_mtran_no := REPLACE (v_cqr_ref, 'MDP/', '');
            v_dr_mtran_no := SUBSTR (v_cqr_ref, INSTR (v_cqr_ref, '/') + 1);
        --         RAISE_ERROR('v_dr_mtran_no:'||v_dr_mtran_no);
        END;

        BEGIN
            SELECT mtran_ggt_tran_no
              INTO v_transact_no
              FROM gin_master_transactions
             WHERE mtran_no = v_dr_mtran_no;

            v_canc_check := 'Y';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_canc_check := 'N';
            WHEN OTHERS
            THEN
                RAISE_eRROR ('Error getting MDP Sub ledger details...');
        END;

        --      RAISE_ERROR('v_canc_check='||v_canc_check);
        IF NVL (v_canc_check, 'N') = 'Y'
        THEN
            ---withdraw cheques/efts from fms
            cancel_mdp_chq_payment (v_transact_no, v_user_name);
            ---reject from GIS
            rejectmdptransfromfms (v_transact_no);
        END IF;
    --     FOR m in MDP(v_transact_no) LOOP
    --
    --      v_dr_mtran_no:=m.mtran_no;
    --      v_drcr:=m.mtran_dc;
    ----      v_mtran_no:=m.mtran_no;
    --
    --      BEGIN
    ----         SELECT mtran_ref_no, mtran_cur_code, mtran_cur_rate,
    ----                mtran_client_code, mtran_control_acc, mtran_payee,
    ----                mtran_brn_code
    ----           INTO v_dr_ref_no, v_mtran_cur_code, v_mtran_cur_rate,
    ----                v_mtran_client_code, v_mtran_control_acc, v_mtran_payee,
    ----                v_mtran_brn_code
    ----           FROM gin_master_transactions
    ----          WHERE mtran_no =v_dr_mtran_no ;

    --         SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'RRRR'))
    --                || gin_mtran_no_seq.NEXTVAL
    --           INTO v_mtran_no
    --           FROM DUAL;

    --         IF v_drcr = 'C'
    --         THEN
    --            v_amount := NVL (m.mtran_amount, 0) * -1;
    --            v_balance:=NVL (m.mtran_balance, 0) * -1;
    --            v_net_amount:=NVL (m.mtran_net_amt, 0) * -1;
    --            v_settlement:=NVL (m.mtran_settlement, 0) * -1;
    --            v_drcr := 'C';
    --         ELSE
    --            v_amount := NVL (m.mtran_amount, 0) * 1;
    --            v_balance:=NVL (m.mtran_balance, 0) * 1;
    --            v_net_amount:=NVL (m.mtran_net_amt, 0) * 1;
    --            v_settlement:=NVL (m.mtran_settlement, 0) * 1;
    --            v_drcr := 'D';
    --         END IF;

    --         BEGIN
    --            INSERT INTO gin_master_transactions
    --                        (mtran_no, mtran_date, mtran_ref_no,
    --                         mtran_other_ref, mtran_tran_type, mtran_dc,
    --                         mtran_control_acc, mtran_client_type,
    --                         mtran_client_code,
    --                         mtran_amount,
    --                         mtran_balance,
    --                         mtran_pol_batch_no, mtran_scl_code,
    --                         mtran_narrations,
    --                         mtran_rei_code, mtran_client_polcy_no,
    --                         mtran_pol_ren_endos_no, mtran_acct_code,
    --                         mtran_ggt_tran_no,
    --                         mtran_net_amt,
    --                         mtran_settlement,
    --                         mtran_posting_date, mtran_cmb_claim_no,
    --                         mtran_prp_code, mtran_authorised,
    --                         mtran_date_authorized, mtran_authorised_by,
    --                         mtran_pro_sht_desc, mtran_pro_code, mtran_origin,
    --                         mtran_cur_code, mtran_cur_symbol, mtran_cur_rate,
    --                         mtran_btr_trans_code, mtran_payee, mtran_brn_code
    --                        )
    --                 VALUES (v_mtran_no, TRUNC (SYSDATE), 'MDP',
    --                         NULL, 'MDP', v_drcr,
    --                         v_mtran_control_acc, 'R',
    --                         m.mtran_client_code,
    --                         DECODE (v_drcr, 'C', -ABS (v_amount), ABS (v_amount)),
    --                         DECODE (v_drcr, 'C', -ABS (v_balance), ABS (v_balance)),
    --                         NULL, NULL,
    --                         DECODE (v_drcr, 'C', 'MDP CREDIT', 'D', 'MDP DEBIT'),
    --                         NULL, NULL,
    --                         NULL, 'MDP',
    --                         NULL,
    --                         DECODE (v_drcr, 'C', -ABS (v_net_amount), ABS (v_net_amount)),
    --                         DECODE (v_drcr, 'C', -ABS (v_settlement), ABS (v_settlement)),
    --                         TRUNC (SYSDATE), NULL,
    --                         NULL, 'Y',
    --                         TRUNC (SYSDATE), v_user_name,
    --                         NULL, NULL, 'R',
    --                         m.mtran_cur_code, NULL, m.mtran_cur_rate,
    --                         'MDP', m.mtran_payee, m.mtran_brn_code
    --                        );
    --         EXCEPTION
    --            WHEN OTHERS
    --            THEN
    --               raise_error ('ERROR UPDATING XOL MDP STATEMENTS...');
    --         END;
    --      END;
    --   END LOOP;


    END update_canc_mdp;

    --    procedure rejectmdptransfromfms(v_trans_no in number)
    --  is
    --
    --  cursor mdp is
    --  select * from gin_master_transactions  where mtran_ggt_tran_no=v_trans_no;
    --
    --        v_xolp_code number;
    --        v_premtype  varchar2(100);
    --        v_transaction_no  varchar2(100);
    --        v_xppd_code   NUMBER;
    --        v_xp_code     NUMBER;
    --        v_xppd_xolp_code number;
    --        v_xpp_code  NUMBER;
    --        v_payable_amt   number;
    --        v_xppd_code_global number;
    --        v_xp_code_global    number;
    --        v_authorized  varchar2(1);
    --        v_cnt number;
    --  begin
    --  begin
    --    SELECT   regexp_replace(mtran_ref_no, '[^0-9]')
    --                  INTO
    --                  v_xppd_code_global
    --      FROM gin_master_transactions
    --      WHERE  mtran_ggt_tran_no=v_trans_no
    --      and rownum=1;
    --  exception when others then
    --  RAISE_ERROR('Error getting premium payment details xp_code='||v_xppd_code_global);
    --  end;
    --
    --
    --  begin
    --  select sum(nvl(XPP_PAYABLE_AMT,0)),XPP_XP_CODE  into v_payable_amt,v_xp_code_global  from gin_xol_premium_payments where xpp_code
    --  in (select xppd_xpp_code from gin_xol_prem_payment_dtls  where xppd_code=v_xppd_code_global)
    --  group by XPP_XP_CODE;
    --   exception when others then
    --  RAISE_ERROR('Error getting premium payment details xppd_code='||v_xp_code_global);
    --  end;
    --
    --
    --
    --
    --        ---get the premium payment details
    --    FOR m in mdp loop
    --
    --     BEGIN
    --     SELECT  regexp_replace(mtran_ref_no, '[^0-9]'),
    --                  regexp_replace(mtran_ref_no, '[^A-Z]', '') ,
    --                  mtran_ggt_tran_no
    --                  INTO
    --                  v_xolp_code,
    --                  v_premtype,
    --                  v_transaction_no
    --      FROM gin_master_transactions
    --      WHERE MTRAN_NO=m.mtran_no;
    --      EXCEPTION  WHEN OTHERS   THEN
    --      RAISE_ERROR('Error getting transaction details');
    --     END;
    --
    --        BEGIN
    --       select xppd_code, xppd_xp_code,xppd_xolp_code,xppd_xpp_code
    --       into  v_xppd_code,v_xp_code,v_xppd_xolp_code,v_xpp_code
    --        from  gin_xol_prem_payment_dtls
    --       where  xppd_authorized = 'P'
    --     AND  xppd_code =v_xolp_code;
    --     EXCEPTION WHEN OTHERS THEN
    --    NULL;
    --     END;
    --
    ----
    ----       BEGIN
    ----       select sum(nvl(XPP_PAYABLE_AMT,0)) into v_payable_amt
    ----        from  GIN_XOL_PREMIUM_PAYMENTS
    ----       where  xpp_authorized = 'P'
    ----     AND  xpp_code =v_xpp_code;
    ----     EXCEPTION WHEN OTHERS THEN
    ----    NULL;
    ----     END;
    --
    ----       raise_error('v_xp_code='||v_xp_code||'v_payable_amt='||v_payable_amt);
    --
    --       ---DELETE FROM MDP TABLES
    --      DELETE FROM gin_xol_prem_payment_dtls  WHERE  xppd_xpp_code=v_xpp_code;
    --      DELETE FROM gin_xol_premium_payments  where    xpp_code =v_xpp_code;
    --
    --    ---CLEAR THE TRANSACTIONS FROM GINMASTER
    --     DELETE FROM gin_master_transactions  WHERE mtran_no= m.mtran_no;
    --    ---DELETE TRANSACTION NO
    --     DELETE FROM  gin_gis_transactions WHERE GGT_TRANS_NO=v_transaction_no;
    --
    --  end loop;
    --
    ----      raise_error('v_xp_code_global='||v_xp_code_global||'v_payable_amt='||v_payable_amt||'v_xppd_code_global='||v_xppd_code_global);
    -- ---reverse transactions
    --
    --       begin
    --       select count(*)  into v_cnt from  gin_xol_premium_payments
    --       where XPP_XP_CODE=v_xp_code_global
    --       and xpp_authorized in ('R','P','Y');
    --       exception when others then
    --       v_cnt:=0;
    --
    --       end;
    --
    --       if nvl(v_cnt,0)>0 then
    --       v_authorized:='P';
    --
    --       else
    --       v_authorized:='N';
    --       end if;
    --
    ----       raise_error('v_authorized='||v_authorized);
    --      update gin_xol_premiums
    --      set xp_authorized=v_authorized,
    --       xp_authorized_by=NULL,
    --       xp_os_amt=xp_os_amt+nvl(v_payable_amt,0),
    --       xp_amount_paid=xp_amount_paid-nvl(v_payable_amt,0),
    --       xp_authorized_date=NULL
    --       WHERE  xp_code=v_xp_code_global;
    --
    --  end;

    PROCEDURE rejectmdptransfromfms (v_trans_no IN NUMBER)
    IS
        CURSOR mdp IS
            SELECT *
              FROM gin_master_transactions
             WHERE mtran_ggt_tran_no = v_trans_no;

        v_xolp_code          NUMBER;
        v_premtype           VARCHAR2 (100);
        v_transaction_no     VARCHAR2 (100);
        v_xppd_code          NUMBER;
        v_xp_code            NUMBER;
        v_xppd_xolp_code     NUMBER;
        v_xpp_code           NUMBER;
        v_payable_amt        NUMBER;
        v_xppd_code_global   NUMBER;
        v_xp_code_global     NUMBER;
        v_authorized         VARCHAR2 (1);
        v_cnt                NUMBER;
    BEGIN
        BEGIN
            SELECT REGEXP_REPLACE (mtran_ref_no, '[^0-9]')
              INTO v_xppd_code_global
              FROM gin_master_transactions
             WHERE mtran_ggt_tran_no = v_trans_no AND ROWNUM = 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE_ERROR (
                       'Error getting premium payment details xp_code='
                    || v_xppd_code_global);
        END;


        BEGIN
              SELECT SUM (NVL (XPP_PAYABLE_AMT, 0)), XPP_XP_CODE
                INTO v_payable_amt, v_xp_code_global
                FROM gin_xol_premium_payments
               WHERE xpp_code IN (SELECT xppd_xpp_code
                                    FROM gin_xol_prem_payment_dtls
                                   WHERE xppd_code = v_xppd_code_global)
            GROUP BY XPP_XP_CODE;
        EXCEPTION
            WHEN OTHERS
            THEN
                RAISE_ERROR (
                       'Error getting premium payment details xppd_code='
                    || v_xp_code_global);
        END;



        ---get the premium payment details
        FOR m IN mdp
        LOOP
            BEGIN
                SELECT REGEXP_REPLACE (mtran_ref_no, '[^0-9]'),
                       REGEXP_REPLACE (mtran_ref_no, '[^A-Z]', ''),
                       mtran_ggt_tran_no
                  INTO v_xolp_code, v_premtype, v_transaction_no
                  FROM gin_master_transactions
                 WHERE MTRAN_NO = m.mtran_no;
            EXCEPTION
                WHEN OTHERS
                THEN
                    RAISE_ERROR ('Error getting transaction details');
            END;

            --        raise_error('v_xolp_code=='||v_xolp_code);
            BEGIN
                SELECT xppd_code,
                       xppd_xp_code,
                       xppd_xolp_code,
                       xppd_xpp_code
                  INTO v_xppd_code,
                       v_xp_code,
                       v_xppd_xolp_code,
                       v_xpp_code
                  FROM gin_xol_prem_payment_dtls
                 WHERE xppd_authorized = 'P' AND xppd_code = v_xolp_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NULL;
            END;

            --
            --       BEGIN
            --       select sum(nvl(XPP_PAYABLE_AMT,0)) into v_payable_amt
            --        from  GIN_XOL_PREMIUM_PAYMENTS
            --       where  xpp_authorized = 'P'
            --     AND  xpp_code =v_xpp_code;
            --     EXCEPTION WHEN OTHERS THEN
            --    NULL;
            --     END;

            --       raise_error('v_xp_code='||v_xp_code||'v_payable_amt='||v_payable_amt);

            ---DELETE FROM MDP TABLES
            DELETE FROM gin_xol_prem_payment_dtls
                  WHERE xppd_xpp_code = v_xpp_code;

            --        DELETE FROM gin_xol_premium_payments
            --              WHERE xpp_code = v_xpp_code;

            ---CLEAR THE TRANSACTIONS FROM GINMASTER
            DELETE FROM gin_master_transactions
                  WHERE mtran_no = m.mtran_no;

            --         ADDED TO UPDATE THE TABLE AFTER REJECTION IN FMS
            BEGIN
                UPDATE gin_xol_premium_payments
                   SET xpp_authorized_by = NULL,
                       xpp_authorized_date = NULL,
                       xpp_authorized = 'N'
                 WHERE xpp_code = v_xpp_code;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Error updating GIN_XOL_PREMIUM_PAYMENTS...');
            END;

            ---DELETE TRANSACTION NO
            DELETE FROM gin_gis_transactions
                  WHERE GGT_TRANS_NO = v_transaction_no;
        END LOOP;

        --      raise_error('v_xp_code_global='||v_xp_code_global||'v_payable_amt='||v_payable_amt||'v_xppd_code_global='||v_xppd_code_global);
        ---reverse transactions

        BEGIN
            SELECT COUNT (*)
              INTO v_cnt
              FROM gin_xol_premium_payments
             WHERE     XPP_XP_CODE = v_xp_code_global
                   AND xpp_authorized IN ('R', 'P', 'Y');
        EXCEPTION
            WHEN OTHERS
            THEN
                v_cnt := 0;
        END;

        IF NVL (v_cnt, 0) > 0
        THEN
            v_authorized := 'P';
        ELSE
            v_authorized := 'N';
        END IF;

        --       raise_error('v_authorized='||v_authorized);
        UPDATE gin_xol_premiums
           SET xp_authorized = v_authorized,
               xp_authorized_by = NULL,
               xp_os_amt = xp_os_amt + NVL (v_payable_amt, 0),
               xp_amount_paid = xp_amount_paid - NVL (v_payable_amt, 0),
               xp_authorized_date = NULL
         WHERE xp_code = v_xp_code_global;
    END;

    PROCEDURE process_survey_cheque_payment (
        v_pofe_no      VARCHAR2,
        v_trans_no     NUMBER,
        v_user_name    VARCHAR2,
        v_pay_method   VARCHAR2 DEFAULT 'CHQ',
        v_sur_val      VARCHAR2 DEFAULT 'SUR')
    IS
        v_pmsf_code                 NUMBER;

        CURSOR master_trans IS
            SELECT *
              FROM gin_master_pol_misc_fees
             WHERE mpofe_code = v_pofe_no AND mpofe_ggt_trans_no = v_trans_no;

        CURSOR c_survey (v_mpofe_no NUMBER)
        IS
              SELECT pmsf_vatable,
                     pmsf_pofe_code,
                     pmsf_scl_code,
                     SUM (pmsf_amount)                 pmsf_amount,
                     SUM (pmsf_payable)                pmsf_payable,
                     SUM (pmsf_vat_amt)                pmsf_vat_amt,
                     SUM (pmsf_whtx_amt)               pmsf_whtx_amt,
                     SUM (pmsf_vattowithhold_amnt)     pmsf_vattowithhold_amnt,
                     pofe_cur_code,
                     pofe_payee,
                     pofe_pol_policy_no,
                     pofe_cor_code,
                     pofe_authorised_by,
                     pofe_authorised_date,
                     pofe_authorized,
                     pofe_date
                FROM gin_pol_misc_fees, gin_pol_misc_scl_fees
               WHERE     pofe_code = pmsf_pofe_code
                     AND pofe_mpofe_code = v_mpofe_no
            GROUP BY pmsf_vatable,
                     pmsf_pofe_code,
                     pofe_cur_code,
                     pofe_payee,
                     pofe_pol_policy_no,
                     pofe_cor_code,
                     pofe_authorised_by,
                     pofe_authorised_date,
                     pofe_authorized,
                     pmsf_scl_code,
                     gin_pol_misc_fees.pofe_date;

        v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
        v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
        v_cqr_brh_code              NUMBER;
        v_user_code                 NUMBER;
        v_cqr_source_auth_by        NUMBER;
        v_cqr_source_auth_dt        DATE;
        exc_user_error              EXCEPTION;
        v_brh_name                  VARCHAR2 (100);
        v_bct_code                  NUMBER;
        v_bct_brh_code              NUMBER;
        v_crt_acc_number            VARCHAR2 (20);
        v_crt_acc_org_code          NUMBER;
        v_trnt_gl_code              VARCHAR2 (20);
        v_trnt_contra_gl_code       VARCHAR2 (20);
        v_trnt_code                 VARCHAR2 (20);
        v_acc_type                  VARCHAR2 (20);
        v_cqr_source                NUMBER;
        v_rec_count                 NUMBER := 0;
        v_org_code                  NUMBER;
        v_exch_rate                 NUMBER;
        v_rnd                       NUMBER;
        v_bcur_rnd                  NUMBER;
        v_cur_code                  NUMBER;
        v_cur_symbol                VARCHAR2 (10);
        v_paymnt_brh_code           NUMBER;
        v_trt_man_amt               NUMBER;
        v_trt_qs_amt                NUMBER;
        v_trt_fst_amt               NUMBER;
        v_trt_sec_amt               NUMBER;
        v_trt_fac_amt               NUMBER;
        v_lvl                       VARCHAR2 (15);
        rev_type                    VARCHAR2 (15);
        v_desc                      VARCHAR2 (50);
        v_gross_amt                 NUMBER;
        v_cur_rate                  NUMBER;
        v_vattowithhold_app_param   VARCHAR2 (1) := 'N';
    BEGIN
        BEGIN
            SELECT param_value
              INTO v_vattowithhold_app_param
              FROM gin_parameters
             WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_vattowithhold_app_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error getting VATTOWITHHOLD_APPLICABLE parameters..');
        END;

        FOR a IN master_trans
        LOOP
            v_cur_code := a.mpofe_cur_code;
            v_cur_symbol := a.mpofe_cur_symbol;
            v_user_code :=
                fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

            IF v_user_code IS NULL
            THEN
                RAISE exc_user_error;
            END IF;

            v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
            v_rec_count := 0;

            FOR i IN c_survey (v_pofe_no)
            LOOP
                v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
                v_org_code := 2;
                v_paymnt_brh_code :=
                    fms_interfaces_pkg.head_office (v_org_code);
                v_brh_name :=
                    fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
                fms_interfaces_pkg.trans_bct (v_sur_val,
                                              v_cqr_source,
                                              v_paymnt_brh_code,
                                              v_cur_code,
                                              v_bct_code,
                                              v_bct_brh_code,
                                              v_pay_method);
                v_gross_amt := NVL (i.pmsf_amount, 0);

                IF NVL (i.pmsf_vatable, 'N') = 'N'
                THEN
                    IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
                       (  ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd))
                    THEN
                        raise_application_error (
                            -20001,
                               '1 THE NET CHEQUE AMOUNT '
                            || NVL (i.pmsf_payable, 0)
                            || ' PLUS VAT '
                            || NVL (i.pmsf_vat_amt, 0)
                            || ' AND WHTTAX '
                            || NVL (i.pmsf_whtx_amt, 0)
                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                            || v_gross_amt);
                    END IF;
                ELSE
                    IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
                       (  ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_vattowithhold_amnt, 0),
                                 v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd))
                    THEN
                        raise_application_error (
                            -20001,
                               '2 THE NET CHEQUE AMOUNT '
                            || NVL (i.pmsf_payable, 0)
                            || ' PLUS VAT TO HOLD '
                            || NVL (i.pmsf_vattowithhold_amnt, 0)
                            || ' AND WHTTAX '
                            || NVL (i.pmsf_whtx_amt, 0)
                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                            || v_gross_amt);
                    END IF;
                END IF;

                IF NVL (i.pmsf_amount, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'MF',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               ' GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_gross_amt, 0), v_bcur_rnd),
                        'VALUATION/SURVEY',
                        --v_desc,                                      --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
                THEN
                    IF NVL (i.pmsf_vat_amt, 0) != 0
                    THEN
                        gin_interfaces_pkg.get_gl_acct_code (
                            'WTHVAT',
                            i.pmsf_scl_code,
                            'U',
                            NULL,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );

                        IF fms_interfaces_pkg.valid_trns_acc (
                               v_trnt_gl_code,
                               v_org_code,
                               v_paymnt_brh_code) =
                           FALSE
                        THEN
                            raise_application_error (
                                -20001,
                                   'WTHVAT GL A/C - '
                                || v_trnt_gl_code
                                || ' UNDEFINED IN '
                                || v_brh_name
                                || ' CODE '
                                || v_trnt_code
                                || ' CLS - '
                                || 100);
                        END IF;

                        v_rec_count := v_rec_count + 1;
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd),
                            'VALUATION/SURVEY WTHVAT',
                            --narrative,
                            v_trnt_gl_code,
                            -- crt_acc_number
                            v_org_code,
                            --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'C',                                    --v_dr_cr,
                            v_chq_dtls);
                    END IF;
                END IF;

                IF NVL (i.pmsf_vattowithhold_amnt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'VATTOWTH',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,                 ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'VATTOWTH GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.pmsf_vattowithhold_amnt, 0),
                               v_bcur_rnd),
                        'VALUATION/SURVEY VATTOWTH',
                        --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                IF NVL (i.pmsf_whtx_amt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'WTHTPY',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,                  --F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'WTHTPY GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd),
                        'VALUATION',                              --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;
            END LOOP;

            v_cur_rate :=
                get_currexch_rate (a.mpofe_cur_code, v_rnd, v_bcur_rnd);

            BEGIN
                -- fms_cheques_pkg.create_reqn
                FMS_INTERFACES_PKG.create_Chq_reqn (
                    v_cqr_source,
                    a.mpofe_code,                                        --ref
                    v_trans_no,
                    --i.pofe_pol_policy_no,                                  -- ref2,
                    TRUNC (SYSDATE),
                    NVL (a.mpofe_remarks,
                         'VALUATION/SURVEY PYMT  FOR ' || a.mpofe_code),
                    -- i.pofe_pol_policy_no,  --'GIS Claim',             --narrative V
                    v_paymnt_brh_code,
                    v_bct_brh_code,
                    ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd), --cqr_amount
                    a.mpofe_payee,
                    'CHQ',
                    a.mpofe_cur_code,
                    v_cur_rate,
                    v_bct_code,
                    fms_interfaces_pkg.get_usercode (
                        UPPER (a.mpofe_authorised_by)),
                    a.mpofe_authorised_date,
                    v_user_code,                             --v_cqr_req_by  ,
                    'GIS-VAL',                                  -- pmt_type  ,
                    v_chq_dtls);
            --         EXCEPTION
            --            WHEN OTHERS
            --            THEN
            --               raise_application_error (-20001,
            --                                           'CREATE_REQN :- '
            --                                        || v_paymnt_brh_code
            --                                        || ' $ '
            --                                        || SQLERRM (SQLCODE)
            --                                       );
            END;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'SURVEY REQN NOT CREATED FOR TRANSACTION # ' || v_trans_no);
        END IF;
    END;

    --   PROCEDURE process_survey_eftrtgs_payment (
    --      v_pofe_no      VARCHAR2,
    --      v_trans_no     NUMBER,
    --      v_user_name    VARCHAR2,
    --      v_pay_method   VARCHAR2 DEFAULT 'EFT',
    --      v_sur_val      VARCHAR2 DEFAULT 'SUR'
    --   )
    --   IS
    --      v_pmsf_code                 NUMBER;

    --      CURSOR master_trans
    --      IS
    --         SELECT *
    --           FROM gin_master_pol_misc_fees
    --          WHERE mpofe_code = v_pofe_no AND mpofe_ggt_trans_no = v_trans_no;

    --      CURSOR c_survey (v_mpofe_no NUMBER)
    --      IS
    --         SELECT   pmsf_vatable, pmsf_pofe_code, pmsf_scl_code,
    --                  SUM (pmsf_amount) pmsf_amount,
    --                  SUM (pmsf_payable) pmsf_payable,
    --                  SUM (pmsf_vat_amt) pmsf_vat_amt,
    --                  SUM (pmsf_whtx_amt) pmsf_whtx_amt,
    --                  SUM (pmsf_vattowithhold_amnt) pmsf_vattowithhold_amnt,
    --                  pofe_cur_code, pofe_payee, pofe_pol_policy_no,
    --                  pofe_cor_code, pofe_authorised_by, pofe_authorised_date,
    --                  pofe_authorized, pofe_date
    --             FROM gin_pol_misc_fees, gin_pol_misc_scl_fees
    --            WHERE pofe_code = pmsf_pofe_code AND pofe_mpofe_code = v_mpofe_no
    --         GROUP BY pmsf_vatable,
    --                  pmsf_pofe_code,
    --                  pofe_cur_code,
    --                  pofe_payee,
    --                  pofe_pol_policy_no,
    --                  pofe_cor_code,
    --                  pofe_authorised_by,
    --                  pofe_authorised_date,
    --                  pofe_authorized,
    --                  pmsf_scl_code,
    --                  gin_pol_misc_fees.pofe_date;

    --      v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
    --      v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
    --      v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
    --      v_cqr_brh_code              NUMBER;
    --      v_user_code                 NUMBER;
    --      v_cqr_source_auth_by        NUMBER;
    --      v_cqr_source_auth_dt        DATE;
    --      exc_user_error              EXCEPTION;
    --      v_brh_name                  VARCHAR2 (100);
    --      v_bct_code                  NUMBER;
    --      v_bct_brh_code              NUMBER;
    --      v_crt_acc_number            VARCHAR2 (20);
    --      v_crt_acc_org_code          NUMBER;
    --      v_trnt_gl_code              VARCHAR2 (20);
    --      v_trnt_contra_gl_code       VARCHAR2 (20);
    --      v_trnt_code                 VARCHAR2 (20);
    --      v_acc_type                  VARCHAR2 (20);
    --      v_cqr_source                NUMBER;
    --      v_rec_count                 NUMBER                               := 0;
    --      v_org_code                  NUMBER;
    --      v_exch_rate                 NUMBER;
    --      v_rnd                       NUMBER;
    --      v_bcur_rnd                  NUMBER;
    --      v_cur_code                  NUMBER;
    --      v_cur_symbol                VARCHAR2 (10);
    --      v_paymnt_brh_code           NUMBER;
    --      v_trt_man_amt               NUMBER;
    --      v_trt_qs_amt                NUMBER;
    --      v_trt_fst_amt               NUMBER;
    --      v_trt_sec_amt               NUMBER;
    --      v_trt_fac_amt               NUMBER;
    --      v_lvl                       VARCHAR2 (15);
    --      rev_type                    VARCHAR2 (15);
    --      v_desc                      VARCHAR2 (50);
    --      v_gross_amt                 NUMBER;
    --      v_vattowithhold_app_param   VARCHAR2 (1)                         := 'N';
    --      v_eft_enabled               VARCHAR2 (10)                        := 'N';
    --      v_bnk_account               VARCHAR2 (100);
    --      v_bnk_bbr_code              VARCHAR2 (100);
    --      v_bnk_bbr_pk                VARCHAR2 (100);
    --   BEGIN
    --      BEGIN
    --         SELECT param_value
    --           INTO v_vattowithhold_app_param
    --           FROM gin_parameters
    --          WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
    --      EXCEPTION
    --         WHEN NO_DATA_FOUND
    --         THEN
    --            v_vattowithhold_app_param := 'N';
    --         WHEN OTHERS
    --         THEN
    --            raise_error
    --                       ('Error getting VATTOWITHHOLD_APPLICABLE parameters..');
    --      END;

    --      FOR a IN master_trans
    --      LOOP
    --         v_cur_code := a.mpofe_cur_code;
    --         v_cur_symbol := a.mpofe_cur_symbol;
    --         v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

    --         IF v_user_code IS NULL
    --         THEN
    --            RAISE exc_user_error;
    --         END IF;

    --         v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
    --         v_rec_count := 0;

    --         FOR i IN c_survey (v_pofe_no)
    --         LOOP
    --            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --            v_org_code := 2;
    --            v_paymnt_brh_code := fms_interfaces_pkg.head_office (v_org_code);
    --            v_brh_name :=
    --                         fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --            fms_interfaces_pkg.trans_bct (v_sur_val,
    --                                          v_cqr_source,
    --                                          v_paymnt_brh_code,
    --                                          v_cur_code,
    --                                          v_bct_code,
    --                                          v_bct_brh_code
    --                                         );
    --            v_gross_amt := NVL (i.pmsf_amount, 0);

    --            IF NVL (i.pmsf_vatable, 'N') = 'N'
    --            THEN
    --               IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
    --                     (  ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd)
    --                      + ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
    --                      + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd)
    --                     )
    --               THEN
    --                  raise_application_error
    --                           (-20001,
    --                               '1 THE NET CHEQUE AMOUNT '
    --                            || NVL (i.pmsf_payable, 0)
    --                            || ' PLUS VAT '
    --                            || NVL (i.pmsf_vat_amt, 0)
    --                            || ' AND WHTTAX '
    --                            || NVL (i.pmsf_whtx_amt, 0)
    --                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                            || v_gross_amt
    --                           );
    --               END IF;
    --            ELSE
    --               IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
    --                     (  ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
    --                      + ROUND (NVL (i.pmsf_vattowithhold_amnt, 0), v_bcur_rnd)
    --                      + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd)
    --                     )
    --               THEN
    --                  raise_application_error
    --                           (-20001,
    --                               '2 THE NET CHEQUE AMOUNT '
    --                            || NVL (i.pmsf_payable, 0)
    --                            || ' PLUS VAT TO HOLD '
    --                            || NVL (i.pmsf_vattowithhold_amnt, 0)
    --                            || ' AND WHTTAX '
    --                            || NVL (i.pmsf_whtx_amt, 0)
    --                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
    --                            || v_gross_amt
    --                           );
    --               END IF;
    --            END IF;

    --            --RAISE_ERROR('The bank bbr code is......'||i.pofe_cor_code);
    --            IF bnk_bbr_code (i.pofe_cor_code, 1) IS NOT NULL
    --            THEN
    --               v_eft_enabled :=
    --                          account_enabled (bnk_bbr_code (i.pofe_cor_code, 1));
    --               v_bnk_account := bnk_account (i.pofe_cor_code, 1);
    --               v_bnk_bbr_code :=
    --                  tqc_interfaces_pkg.bank_ref (bnk_bbr_code (i.pofe_cor_code,
    --                                                             1
    --                                                            )
    --                                              );
    --               v_bnk_bbr_pk := bnk_bbr_code (i.pofe_cor_code, 1);
    --            END IF;

    --            IF NVL (i.pmsf_amount, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                  ('MF',
    --                   i.pmsf_scl_code,
    --                   'U',
    --                   NULL,
    --                   NULL,
    --     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                   v_trnt_code,          --          v_trnt_code OUT VARCHAR2,
    --                   v_trnt_gl_code,    --          v_trnt_gl_code OUT VARCHAR2,
    --                   v_trnt_contra_gl_code
    --                                --          v_trnt_contra_gl_code OUT VARCHAR2
    --                  );

    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              ' GL A/C - '
    --                                           || v_trnt_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || 100
    --                                          );
    --               END IF;

    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_eft_payees
    --                  (v_rec_count,           --v_no                       NUMBER,
    --                   a.mpofe_code,          --v_ref1                   VARCHAR2,
    --                   ROUND (NVL (v_gross_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                   a.mpofe_payee,       --v_narrative                VARCHAR2,
    --                   v_bnk_bbr_code,
    --                           --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                   v_bnk_account,       --v_bnk_account              VARCHAR2,
    --                   v_trans_no,            --v_ref2                   VARCHAR2,
    --                   v_payee_eft_dtls
    --                  );
    --               fms_cheques_pkg.append_chq_trans (v_rec_count,
    --                                                 ROUND (NVL (v_gross_amt, 0),
    --                                                        v_bcur_rnd
    --                                                       ),
    --                                                 'VALUATION/SURVEY',
    --                                                 --v_desc,                                      --narrative,
    --                                                 v_trnt_gl_code,
    --                                                 -- crt_acc_number
    --                                                 v_org_code,
    --                                                 --crt_acc_org_code ,
    --                                                 v_paymnt_brh_code,

    --                                                 --i.cmb_brn_code,          --v_brh_code,
    --                                                 'D',               --v_dr_cr,
    --                                                 v_chq_dtls
    --                                                );
    --            END IF;

    --            IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
    --            THEN
    --               IF NVL (i.pmsf_vat_amt, 0) != 0
    --               THEN
    --                  gin_interfaces_pkg.get_gl_acct_code
    --                     ('WTHVAT',
    --                      i.pmsf_scl_code,
    --                      'U',
    --                      NULL,
    --                      NULL,
    --     --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                                --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );

    --                  IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                        v_org_code,
    --                                                        v_paymnt_brh_code
    --                                                       ) = FALSE
    --                  THEN
    --                     raise_application_error (-20001,
    --                                                 'WTHVAT GL A/C - '
    --                                              || v_trnt_gl_code
    --                                              || ' UNDEFINED IN '
    --                                              || v_brh_name
    --                                              || ' CODE '
    --                                              || v_trnt_code
    --                                              || ' CLS - '
    --                                              || 100
    --                                             );
    --                  END IF;

    --                  v_rec_count := v_rec_count + 1;
    --                  fms_cheques_pkg.append_eft_payees
    --                     (v_rec_count,        --v_no                       NUMBER,
    --                      a.mpofe_code,       --v_ref1                   VARCHAR2,
    --                      ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                      a.mpofe_payee,    --v_narrative                VARCHAR2,
    --                      v_bnk_bbr_code,
    --                           --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                      v_bnk_account,    --v_bnk_account              VARCHAR2,
    --                      v_trans_no,         --v_ref2                   VARCHAR2,
    --                      v_payee_eft_dtls
    --                     );
    --                  fms_cheques_pkg.append_chq_trans
    --                                                (v_rec_count,
    --                                                 ROUND (NVL (i.pmsf_vat_amt,
    --                                                             0),
    --                                                        v_bcur_rnd
    --                                                       ),
    --                                                 'VALUATION/SURVEY',
    --                                                 --v_desc,                                      --narrative,
    --                                                 v_trnt_gl_code,
    --                                                 -- crt_acc_number
    --                                                 v_org_code,
    --                                                 --crt_acc_org_code ,
    --                                                 v_paymnt_brh_code,

    --                                                 --i.cmb_brn_code,          --v_brh_code,
    --                                                 'D',               --v_dr_cr,
    --                                                 v_chq_dtls
    --                                                );
    --               END IF;
    --            END IF;

    --            IF NVL (i.pmsf_vattowithhold_amnt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                  ('VATTOWTH',
    --                   i.pmsf_scl_code,
    --                   'U',
    --                   NULL,
    --                   NULL,                      ---F for foreign and L for Local
    --                   v_trnt_code,          --          v_trnt_code OUT VARCHAR2,
    --                   v_trnt_gl_code,    --          v_trnt_gl_code OUT VARCHAR2,
    --                   v_trnt_contra_gl_code
    --                                --          v_trnt_contra_gl_code OUT VARCHAR2
    --                  );

    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'VATTOWTH GL A/C - '
    --                                           || v_trnt_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || 100
    --                                          );
    --               END IF;

    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_eft_payees
    --                  (v_rec_count,           --v_no                       NUMBER,
    --                   a.mpofe_code,          --v_ref1                   VARCHAR2,
    --                   ROUND (NVL (i.pmsf_vattowithhold_amnt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                   a.mpofe_payee,       --v_narrative                VARCHAR2,
    --                   v_bnk_bbr_code,
    --                           --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                   v_bnk_account,       --v_bnk_account              VARCHAR2,
    --                   v_trans_no,            --v_ref2                   VARCHAR2,
    --                   v_payee_eft_dtls
    --                  );
    --               fms_cheques_pkg.append_chq_trans
    --                                     (v_rec_count,
    --                                      ROUND (NVL (i.pmsf_vattowithhold_amnt,
    --                                                  0),
    --                                             v_bcur_rnd
    --                                            ),
    --                                      'VALUATION/SURVEY',
    --                                      --v_desc,                                      --narrative,
    --                                      v_trnt_gl_code,
    --                                      -- crt_acc_number
    --                                      v_org_code,
    --                                      --crt_acc_org_code ,
    --                                      v_paymnt_brh_code,

    --                                      --i.cmb_brn_code,          --v_brh_code,
    --                                      'C',                          --v_dr_cr,
    --                                      v_chq_dtls
    --                                     );
    --            END IF;

    --            IF NVL (i.pmsf_whtx_amt, 0) != 0
    --            THEN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                  ('WTHTPY',
    --                   i.pmsf_scl_code,
    --                   'U',
    --                   NULL,
    --                   NULL,                       --F for foreign and L for Local
    --                   v_trnt_code,          --          v_trnt_code OUT VARCHAR2,
    --                   v_trnt_gl_code,    --          v_trnt_gl_code OUT VARCHAR2,
    --                   v_trnt_contra_gl_code
    --                                --          v_trnt_contra_gl_code OUT VARCHAR2
    --                  );

    --               IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
    --                                                     v_org_code,
    --                                                     v_paymnt_brh_code
    --                                                    ) = FALSE
    --               THEN
    --                  raise_application_error (-20001,
    --                                              'WTHTPY GL A/C - '
    --                                           || v_trnt_gl_code
    --                                           || ' UNDEFINED IN '
    --                                           || v_brh_name
    --                                           || ' CODE '
    --                                           || v_trnt_code
    --                                           || ' CLS - '
    --                                           || 100
    --                                          );
    --               END IF;

    --               v_rec_count := v_rec_count + 1;
    --               fms_cheques_pkg.append_eft_payees
    --                  (v_rec_count,           --v_no                       NUMBER,
    --                   a.mpofe_code,          --v_ref1                   VARCHAR2,
    --                   ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd),
    ----ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
    --                   a.mpofe_payee,       --v_narrative                VARCHAR2,
    --                   v_bnk_bbr_code,
    --                           --v_ref_code,--v_bbr_ref_code             VARCHAR2,
    --                   v_bnk_account,       --v_bnk_account              VARCHAR2,
    --                   v_trans_no,            --v_ref2                   VARCHAR2,
    --                   v_payee_eft_dtls
    --                  );
    --               fms_cheques_pkg.append_chq_trans
    --                                               (v_rec_count,
    --                                                ROUND (NVL (i.pmsf_whtx_amt,
    --                                                            0),
    --                                                       v_bcur_rnd
    --                                                      ),
    --                                                'VALUATION/SURVEY',
    --                                                --v_desc,                                      --narrative,
    --                                                v_trnt_gl_code,
    --                                                -- crt_acc_number
    --                                                v_org_code,
    --                                                --crt_acc_org_code ,
    --                                                v_paymnt_brh_code,

    --                                                --i.cmb_brn_code,          --v_brh_code,
    --                                                'C',                --v_dr_cr,
    --                                                v_chq_dtls
    --                                               );
    --            END IF;
    --         END LOOP;

    --         BEGIN
    --            fms_cheques_pkg.create_reqn
    --               (v_cqr_source,
    --                a.mpofe_code,                                            --ref
    --                v_trans_no,                                           -- ref2,
    --                TRUNC (SYSDATE),
    --                NVL (a.mpofe_remarks,
    --                     'VALUATION/SURVEY PYMT  FOR ' || a.mpofe_code
    --                    ),                --'gis claim',             --narrative V
    --                v_paymnt_brh_code,                           --i.cmb_brn_code,
    --                v_bct_brh_code,
    --                ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd),     --cqr_amount
    --                a.mpofe_payee,
    --                v_pay_method,
    --                NULL,
    --                v_bnk_bbr_pk,                                             --12
    --                a.mpofe_cur_code,
    --                v_bct_code,
    --                fms_interfaces_pkg.get_usercode (UPPER (a.mpofe_prepare_by)),
    --                a.mpofe_authorised_date,
    --                v_user_code,                                 --v_cqr_req_by  ,
    --                'GIS-VAL',                                      -- pmt_type  ,
    --                v_chq_dtls,
    --                v_payee_eft_dtls,
    --                NULL,
    --                NULL,
    --                NULL,
    --                NULL,
    --                NULL,
    --                v_bnk_bbr_code,
    --                v_bnk_account,
    --                NULL,
    --                'N'                                              --v_auto_auth
    --               );
    ----         EXCEPTION
    ----            WHEN OTHERS
    ----            THEN
    ----               raise_application_error (-20001,'CREATE_REQN :- '||v_paymnt_brh_code|| ' $ '||SQLERRM (SQLCODE));
    --         END;
    --      END LOOP;

    --      IF v_rec_count = 0
    --      THEN
    --         raise_application_error
    --                             (-20001,
    --                                 'SURVEY REQN NOT CREATED FOR TRANSACTION # '
    --                              || v_trans_no
    --                             );
    --      END IF;
    --   END;
    PROCEDURE process_survey_eftrtgs_payment (
        v_pofe_no      VARCHAR2,
        v_trans_no     NUMBER,
        v_user_name    VARCHAR2,
        v_pay_method   VARCHAR2 DEFAULT 'EFT',
        v_sur_val      VARCHAR2 DEFAULT 'SUR')
    IS
        v_pmsf_code                 NUMBER;

        CURSOR master_trans IS
            SELECT *
              FROM gin_master_pol_misc_fees
             WHERE mpofe_code = v_pofe_no AND mpofe_ggt_trans_no = v_trans_no;

        CURSOR c_survey (v_mpofe_no NUMBER)
        IS
              SELECT pmsf_vatable,
                     pmsf_pofe_code,
                     pmsf_scl_code,
                     SUM (pmsf_amount)                 pmsf_amount,
                     SUM (pmsf_payable)                pmsf_payable,
                     SUM (pmsf_vat_amt)                pmsf_vat_amt,
                     SUM (pmsf_whtx_amt)               pmsf_whtx_amt,
                     SUM (pmsf_vattowithhold_amnt)     pmsf_vattowithhold_amnt,
                     pofe_cur_code,
                     pofe_payee,
                     pofe_pol_policy_no,
                     pofe_cor_code,
                     pofe_authorised_by,
                     pofe_authorised_date,
                     pofe_authorized,
                     pofe_date
                FROM gin_pol_misc_fees, gin_pol_misc_scl_fees
               WHERE     pofe_code = pmsf_pofe_code
                     AND pofe_mpofe_code = v_mpofe_no
            GROUP BY pmsf_vatable,
                     pmsf_pofe_code,
                     pofe_cur_code,
                     pofe_payee,
                     pofe_pol_policy_no,
                     pofe_cor_code,
                     pofe_authorised_by,
                     pofe_authorised_date,
                     pofe_authorized,
                     pmsf_scl_code,
                     gin_pol_misc_fees.pofe_date;

        v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
        v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
        v_cqr_brh_code              NUMBER;
        v_user_code                 NUMBER;
        v_cqr_source_auth_by        NUMBER;
        v_cqr_source_auth_dt        DATE;
        exc_user_error              EXCEPTION;
        v_brh_name                  VARCHAR2 (100);
        v_bct_code                  NUMBER;
        v_bct_brh_code              NUMBER;
        v_crt_acc_number            VARCHAR2 (20);
        v_crt_acc_org_code          NUMBER;
        v_trnt_gl_code              VARCHAR2 (20);
        v_trnt_contra_gl_code       VARCHAR2 (20);
        v_trnt_code                 VARCHAR2 (20);
        v_acc_type                  VARCHAR2 (20);
        v_cqr_source                NUMBER;
        v_rec_count                 NUMBER := 0;
        v_org_code                  NUMBER;
        v_exch_rate                 NUMBER;
        v_rnd                       NUMBER;
        v_bcur_rnd                  NUMBER;
        v_cur_code                  NUMBER;
        v_cur_symbol                VARCHAR2 (10);
        v_paymnt_brh_code           NUMBER;
        v_trt_man_amt               NUMBER;
        v_trt_qs_amt                NUMBER;
        v_trt_fst_amt               NUMBER;
        v_trt_sec_amt               NUMBER;
        v_trt_fac_amt               NUMBER;
        v_lvl                       VARCHAR2 (15);
        rev_type                    VARCHAR2 (15);
        v_desc                      VARCHAR2 (50);
        v_gross_amt                 NUMBER;
        v_vattowithhold_app_param   VARCHAR2 (1) := 'N';
        v_eft_enabled               VARCHAR2 (10) := 'N';
        v_bnk_account               VARCHAR2 (100);
        v_bnk_bbr_code              VARCHAR2 (100);
        v_bnk_bbr_pk                VARCHAR2 (100);
    BEGIN
        BEGIN
            SELECT param_value
              INTO v_vattowithhold_app_param
              FROM gin_parameters
             WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_vattowithhold_app_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error getting VATTOWITHHOLD_APPLICABLE parameters..');
        END;

        FOR a IN master_trans
        LOOP
            v_cur_code := a.mpofe_cur_code;
            v_cur_symbol := a.mpofe_cur_symbol;
            v_user_code :=
                fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

            IF v_user_code IS NULL
            THEN
                RAISE exc_user_error;
            END IF;

            v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
            v_rec_count := 0;

            FOR i IN c_survey (v_pofe_no)
            LOOP
                v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
                v_org_code := 2;
                v_paymnt_brh_code :=
                    fms_interfaces_pkg.head_office (v_org_code);
                v_brh_name :=
                    fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
                fms_interfaces_pkg.trans_bct (v_sur_val,
                                              v_cqr_source,
                                              v_paymnt_brh_code,
                                              v_cur_code,
                                              v_bct_code,
                                              v_bct_brh_code,
                                              v_pay_method);
                v_gross_amt := NVL (i.pmsf_amount, 0);

                IF NVL (i.pmsf_vatable, 'N') = 'N'
                THEN
                    IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
                       (  ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd))
                    THEN
                        raise_application_error (
                            -20001,
                               '1 THE NET CHEQUE AMOUNT '
                            || NVL (i.pmsf_payable, 0)
                            || ' PLUS VAT '
                            || NVL (i.pmsf_vat_amt, 0)
                            || ' AND WHTTAX '
                            || NVL (i.pmsf_whtx_amt, 0)
                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                            || v_gross_amt);
                    END IF;
                ELSE
                    -- RAISE_ERROR('v_rnd=='||v_rnd||'v_bcur_rnd=='||v_bcur_rnd||'v_gross_amt=='||ROUND (NVL (v_gross_amt, 0), v_bcur_rnd)||'VAT='||i.pmsf_whtx_amt||'VAT WITHOLD='||i.pmsf_vattowithhold_amnt||'payable amt='||i.pmsf_payable);
                    IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
                       (  ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_vattowithhold_amnt, 0),
                                 v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd))
                    THEN
                        raise_application_error (
                            -20001,
                               '2 THE NET CHEQUE AMOUNT '
                            || NVL (i.pmsf_payable, 0)
                            || ' PLUS VAT TO HOLD '
                            || NVL (i.pmsf_vattowithhold_amnt, 0)
                            || ' AND WHTTAX '
                            || NVL (i.pmsf_whtx_amt, 0)
                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                            || v_gross_amt);
                    END IF;
                END IF;

                --RAISE_ERROR('The bank bbr code is......'||i.pofe_cor_code);
                IF bnk_bbr_code (i.pofe_cor_code, 1) IS NOT NULL
                THEN
                    v_eft_enabled :=
                        account_enabled (bnk_bbr_code (i.pofe_cor_code, 1));
                    v_bnk_account := bnk_account (i.pofe_cor_code, 1);
                    v_bnk_bbr_code :=
                        tqc_interfaces_pkg.bank_ref (
                            bnk_bbr_code (i.pofe_cor_code, 1));
                    v_bnk_bbr_pk := bnk_bbr_code (i.pofe_cor_code, 1);
                END IF;

                IF NVL (i.pmsf_amount, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'MF',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    -- raise_error('v_bcur_rnd=='||v_bcur_rnd||'amt='||NVL (a.mpofe_payable, 0));
                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               ' GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_eft_payees (
                        v_rec_count,      --v_no                       NUMBER,
                        a.mpofe_code,     --v_ref1                   VARCHAR2,
                        --ROUND (NVL (v_gross_amt, 0), v_bcur_rnd),
                        --ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
                        ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd),
                        a.mpofe_payee,  --v_narrative                VARCHAR2,
                        v_bnk_bbr_code,
                        --v_ref_code,--v_bbr_ref_code             VARCHAR2,
                        v_bnk_account,  --v_bnk_account              VARCHAR2,
                        v_trans_no,       --v_ref2                   VARCHAR2,
                        v_payee_eft_dtls);
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        --                                                 ROUND (NVL (v_gross_amt, 0),
                        --                                                        v_bcur_rnd
                        --                                                       ),
                        ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd),
                        'VALUATION/SURVEY',
                        --v_desc,                                      --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                -- raise_error('VAT AMT==='||i.pmsf_vat_amt||'VAT WITH HOLD='||i.pmsf_vattowithhold_amnt);
                IF NVL (v_vattowithhold_app_param, 'N') = 'Y'
                THEN
                    IF NVL (i.pmsf_vat_amt, 0) != 0
                    THEN
                        gin_interfaces_pkg.get_gl_acct_code (
                            'WTHVAT',
                            i.pmsf_scl_code,
                            'U',
                            NULL,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );

                        IF fms_interfaces_pkg.valid_trns_acc (
                               v_trnt_gl_code,
                               v_org_code,
                               v_paymnt_brh_code) =
                           FALSE
                        THEN
                            raise_application_error (
                                -20001,
                                   'WTHVAT GL A/C - '
                                || v_trnt_gl_code
                                || ' UNDEFINED IN '
                                || v_brh_name
                                || ' CODE '
                                || v_trnt_code
                                || ' CLS - '
                                || 100);
                        END IF;

                        v_rec_count := v_rec_count + 1;
                        fms_cheques_pkg.append_eft_payees (
                            v_rec_count,  --v_no                       NUMBER,
                            a.mpofe_code, --v_ref1                   VARCHAR2,
                            ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd),
                            --ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
                            a.mpofe_payee, --v_narrative                VARCHAR2,
                            v_bnk_bbr_code,
                            --v_ref_code,--v_bbr_ref_code             VARCHAR2,
                            v_bnk_account, --v_bnk_account              VARCHAR2,
                            v_trans_no,   --v_ref2                   VARCHAR2,
                            v_payee_eft_dtls);
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd),
                            'VALUATION/SURVEY',
                            --v_desc,                                      --narrative,
                            v_trnt_gl_code,
                            -- crt_acc_number
                            v_org_code,
                            --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    END IF;

                    IF NVL (i.pmsf_vattowithhold_amnt, 0) != 0
                    THEN
                        gin_interfaces_pkg.get_gl_acct_code (
                            'VATTOWTH',
                            i.pmsf_scl_code,
                            'U',
                            NULL,
                            NULL,             ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );

                        IF fms_interfaces_pkg.valid_trns_acc (
                               v_trnt_gl_code,
                               v_org_code,
                               v_paymnt_brh_code) =
                           FALSE
                        THEN
                            raise_application_error (
                                -20001,
                                   'VATTOWTH GL A/C - '
                                || v_trnt_gl_code
                                || ' UNDEFINED IN '
                                || v_brh_name
                                || ' CODE '
                                || v_trnt_code
                                || ' CLS - '
                                || 100);
                        END IF;

                        v_rec_count := v_rec_count + 1;
                        fms_cheques_pkg.append_eft_payees (
                            v_rec_count,  --v_no                       NUMBER,
                            a.mpofe_code, --v_ref1                   VARCHAR2,
                            ROUND (NVL (i.pmsf_vattowithhold_amnt, 0),
                                   v_bcur_rnd),
                            --ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
                            a.mpofe_payee, --v_narrative                VARCHAR2,
                            v_bnk_bbr_code,
                            --v_ref_code,--v_bbr_ref_code             VARCHAR2,
                            v_bnk_account, --v_bnk_account              VARCHAR2,
                            v_trans_no,   --v_ref2                   VARCHAR2,
                            v_payee_eft_dtls);
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.pmsf_vattowithhold_amnt, 0),
                                   v_bcur_rnd),
                            'VALUATION/SURVEY',
                            --v_desc,                                      --narrative,
                            v_trnt_gl_code,
                            -- crt_acc_number
                            v_org_code,
                            --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'C',                                    --v_dr_cr,
                            v_chq_dtls);
                    END IF;
                END IF;

                IF NVL (i.pmsf_whtx_amt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'WTHTPY',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,                  --F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'WTHTPY GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    fms_cheques_pkg.append_eft_payees (
                        v_rec_count,      --v_no                       NUMBER,
                        a.mpofe_code,     --v_ref1                   VARCHAR2,
                        ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd),
                        --ROUND (NVL (v_payment_amt, 0), v_bcur_rnd), --v_amount                   NUMBER,
                        a.mpofe_payee,  --v_narrative                VARCHAR2,
                        v_bnk_bbr_code,
                        --v_ref_code,--v_bbr_ref_code             VARCHAR2,
                        v_bnk_account,  --v_bnk_account              VARCHAR2,
                        v_trans_no,       --v_ref2                   VARCHAR2,
                        v_payee_eft_dtls);
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd),
                        'VALUATION/SURVEY',
                        --v_desc,                                      --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'C',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;
            END LOOP;

            BEGIN
                --         raise_error('payable=='||ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd));
                IF v_pay_method = 'EFT'
                THEN
                    --            fms_cheques_pkg.create_reqn
                    --               (v_cqr_source,
                    --                a.mpofe_code,                                            --ref
                    --                v_trans_no,                                           -- ref2,
                    --                TRUNC (SYSDATE),
                    --                NVL (a.mpofe_remarks,
                    --                     'VALUATION/SURVEY PYMT  FOR ' || a.mpofe_code
                    --                    ),                --'gis claim',             --narrative V
                    --                v_paymnt_brh_code,                           --i.cmb_brn_code,
                    --                v_bct_brh_code,
                    --                ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd),     --cqr_amount
                    --                a.mpofe_payee,
                    --                v_pay_method,
                    --                NULL,
                    --                v_bnk_bbr_pk,                                             --12
                    --                a.mpofe_cur_code,
                    --                v_bct_code,
                    --                fms_interfaces_pkg.get_usercode (UPPER (a.mpofe_prepare_by)),
                    --                a.mpofe_authorised_date,
                    --                v_user_code,                                 --v_cqr_req_by  ,
                    --                'GIS-VAL',                                      -- pmt_type  ,
                    --                v_chq_dtls,
                    --                v_payee_eft_dtls,
                    --                NULL,
                    --                NULL,
                    --                NULL,
                    --                NULL,
                    --                NULL,
                    --                v_bnk_bbr_code,
                    --                v_bnk_account,
                    --                NULL,
                    --                'N'                                              --v_auto_auth
                    --               );

                    FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                        v_cqr_source,                         -- v_cqr_source,
                        a.mpofe_code,                            -- v_cqr_ref,
                        v_trans_no,                             -- v_cqr_ref2,
                        TRUNC (SYSDATE),                    -- v_cqr_ref_date,
                        NVL (a.mpofe_remarks,
                             'VALUATION/SURVEY PYMT  FOR ' || a.mpofe_code), -- v_cqr_narrative,
                        v_paymnt_brh_code,                  -- v_cqr_brh_code,
                        v_bct_brh_code,                 -- v_cqr_bct_brh_code,
                        ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd), -- v_cqr_amount,
                        a.mpofe_payee,                         -- v_cqr_payee,
                        v_pay_method,                     -- v_cqr_pay_method,
                        a.mpofe_cur_code,                   -- v_cqr_cur_code,
                        NULL,                               ---i.cpv_cur_rate,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (
                            UPPER (a.mpofe_prepare_by)),
                        a.mpofe_authorised_date,
                        v_user_code,                          -- v_cqr_req_by,
                        'GIS-VAL',                          -- v_cqr_pmt_type,
                        v_bnk_bbr_code,            --v_payee_bank_branch_code,
                        v_bnk_account,                  --v_payee_bank_acc_no,
                        v_chq_dtls,                           -- v_dtls_table,
                        v_payee_eft_dtls,                    --v_payee_eft_rec
                        NULL,                         --v_cqr_physical_address
                        NULL,                          ---v_cqr_postal_address
                        v_trans_no,                        --v_itfc_trans_code
                        NULL,                                    --v_itfc_ref3
                        NULL,                             --v_payee_source_pk,
                        NULL,                           --v_payee_source_type,
                        'N',                                    --v_auto_auth,
                        NULL,                                   --v_num_val_1,
                        NULL,                                 ---v_invoice_no,
                        NULL,                               ---v_invoice_date,
                        NULL,                           ---v_auto_consolidate,
                        NULL,                                   ---v_batch_no,
                        NULL                               ---v_payee_spr_code
                            );
                ELSE
                    FMS_INTERFACES_PKG.create_Chq_reqn (
                        v_cqr_source,
                        a.mpofe_code,                                    --ref
                        v_trans_no,                                   -- ref2,
                        TRUNC (SYSDATE),                                  ----
                        NVL (a.mpofe_remarks,
                             'VALUATION/SURVEY PYMT  FOR ' || a.mpofe_code), ----
                        --'GIS Claim',             --narrative V
                        v_paymnt_brh_code,                  -- v_cqr_brh_code,
                        v_bct_brh_code,                 -- v_cqr_bct_brh_code,
                        a.mpofe_payable,                                  ----
                        --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
                        a.mpofe_payee,                                    ----
                        v_pay_method,                                     ----
                        a.mpofe_cur_code,
                        NULL,                               ---i.cpv_cur_rate,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (
                            UPPER (a.mpofe_prepare_by)),                  ----
                        a.mpofe_authorised_date,                         -----
                        v_user_code, --v_user_code,   ----                           --v_cqr_req_by  ,
                        NULL, --'GIS-CLAIM',   ----                              -- pmt_type  ,
                        v_chq_dtls,                                       ----
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL);
                END IF;
            --         EXCEPTION
            --            WHEN OTHERS
            --            THEN
            --               raise_application_error (-20001,'CREATE_REQN :- '||v_paymnt_brh_code|| ' $ '||SQLERRM (SQLCODE));
            END;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'SURVEY REQN NOT CREATED FOR TRANSACTION # ' || v_trans_no);
        END IF;
    END;

    PROCEDURE process_survey_mobile_payment (
        v_pofe_no      VARCHAR2,
        v_trans_no     NUMBER,
        v_user_name    VARCHAR2,
        v_pay_method   VARCHAR2 DEFAULT 'MOB',
        v_sur_val      VARCHAR2 DEFAULT 'SUR')
    IS
        v_pmsf_code                 NUMBER;

        CURSOR master_trans IS
            SELECT *
              FROM gin_master_pol_misc_fees
             WHERE mpofe_code = v_pofe_no AND mpofe_ggt_trans_no = v_trans_no;

        CURSOR c_survey (v_mpofe_no NUMBER)
        IS
              SELECT pmsf_vatable,
                     pmsf_pofe_code,
                     pmsf_scl_code,
                     SUM (pmsf_amount)                 pmsf_amount,
                     SUM (pmsf_payable)                pmsf_payable,
                     SUM (pmsf_vat_amt)                pmsf_vat_amt,
                     SUM (pmsf_whtx_amt)               pmsf_whtx_amt,
                     SUM (pmsf_vattowithhold_amnt)     pmsf_vattowithhold_amnt,
                     pofe_cur_code,
                     pofe_payee,
                     pofe_pol_policy_no,
                     pofe_cor_code,
                     pofe_authorised_by,
                     pofe_authorised_date,
                     pofe_authorized,
                     pofe_date
                FROM gin_pol_misc_fees, gin_pol_misc_scl_fees
               WHERE     pofe_code = pmsf_pofe_code
                     AND pofe_mpofe_code = v_mpofe_no
            GROUP BY pmsf_vatable,
                     pmsf_pofe_code,
                     pofe_cur_code,
                     pofe_payee,
                     pofe_pol_policy_no,
                     pofe_cor_code,
                     pofe_authorised_by,
                     pofe_authorised_date,
                     pofe_authorized,
                     pmsf_scl_code,
                     gin_pol_misc_fees.pofe_date;

        v_chq_dtls                  fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls            fms_cheques_pkg.type_payee_eft_table;
        v_payee_mft_dtls            fms_cheques_pkg.type_payee_mft_table;
        v_cqr_brh_code              NUMBER;
        v_user_code                 NUMBER;
        v_cqr_source_auth_by        NUMBER;
        v_cqr_source_auth_dt        DATE;
        exc_user_error              EXCEPTION;
        v_brh_name                  VARCHAR2 (100);
        v_bct_code                  NUMBER;
        v_bct_brh_code              NUMBER;
        v_crt_acc_number            VARCHAR2 (20);
        v_crt_acc_org_code          NUMBER;
        v_trnt_gl_code              VARCHAR2 (20);
        v_trnt_contra_gl_code       VARCHAR2 (20);
        v_trnt_code                 VARCHAR2 (20);
        v_acc_type                  VARCHAR2 (20);
        v_cqr_source                NUMBER;
        v_rec_count                 NUMBER := 0;
        v_org_code                  NUMBER;
        v_exch_rate                 NUMBER;
        v_rnd                       NUMBER;
        v_bcur_rnd                  NUMBER;
        v_cur_code                  NUMBER;
        v_cur_symbol                VARCHAR2 (10);
        v_paymnt_brh_code           NUMBER;
        v_trt_man_amt               NUMBER;
        v_trt_qs_amt                NUMBER;
        v_trt_fst_amt               NUMBER;
        v_trt_sec_amt               NUMBER;
        v_trt_fac_amt               NUMBER;
        v_lvl                       VARCHAR2 (15);
        rev_type                    VARCHAR2 (15);
        v_desc                      VARCHAR2 (50);
        v_gross_amt                 NUMBER;
        v_vattowithhold_app_param   VARCHAR2 (1) := 'N';
        v_sms_tel                   VARCHAR2 (50);
        v_ref_no                    VARCHAR2 (50);
        v_mpt_code                  VARCHAR2 (50);
        v_bnk_bbr_pk                VARCHAR2 (50);
        v_bnk_bbr_code              VARCHAR2 (50);
        v_bnk_account               VARCHAR2 (50);
    BEGIN
        BEGIN
            SELECT param_value
              INTO v_vattowithhold_app_param
              FROM gin_parameters
             WHERE param_name = 'VATTOWITHHOLD_APPLICABLE';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_vattowithhold_app_param := 'N';
            WHEN OTHERS
            THEN
                raise_error (
                    'Error getting VATTOWITHHOLD_APPLICABLE parameters..');
        END;

        FOR a IN master_trans
        LOOP
            v_cur_code := a.mpofe_cur_code;
            v_cur_symbol := a.mpofe_cur_symbol;
            v_user_code :=
                fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

            IF v_user_code IS NULL
            THEN
                RAISE exc_user_error;
            END IF;

            v_exch_rate := get_currexch_rate (v_cur_code, v_rnd, v_bcur_rnd);
            v_rec_count := 0;

            FOR i IN c_survey (v_pofe_no)
            LOOP
                v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
                v_org_code := 2;
                v_paymnt_brh_code :=
                    fms_interfaces_pkg.head_office (v_org_code);
                v_brh_name :=
                    fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
                fms_interfaces_pkg.trans_bct (v_sur_val,
                                              v_cqr_source,
                                              v_paymnt_brh_code,
                                              v_cur_code,
                                              v_bct_code,
                                              v_bct_brh_code,
                                              v_pay_method);
                v_gross_amt := NVL (i.pmsf_amount, 0);

                IF NVL (i.pmsf_vatable, 'N') = 'N'
                THEN
                    IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
                       (  ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd))
                    THEN
                        raise_application_error (
                            -20001,
                               '1 THE NET CHEQUE AMOUNT '
                            || NVL (i.pmsf_payable, 0)
                            || ' PLUS VAT '
                            || NVL (i.pmsf_vat_amt, 0)
                            || ' AND WHTTAX '
                            || NVL (i.pmsf_whtx_amt, 0)
                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                            || v_gross_amt);
                    END IF;
                ELSE
                    IF ROUND (NVL (v_gross_amt, 0), v_bcur_rnd) !=
                       (  ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_vattowithhold_amnt, 0),
                                 v_bcur_rnd)
                        + ROUND (NVL (i.pmsf_payable, 0), v_bcur_rnd))
                    THEN
                        raise_application_error (
                            -20001,
                               '2 THE NET CHEQUE AMOUNT '
                            || NVL (i.pmsf_payable, 0)
                            || ' PLUS VAT TO HOLD '
                            || NVL (i.pmsf_vattowithhold_amnt, 0)
                            || ' AND WHTTAX '
                            || NVL (i.pmsf_whtx_amt, 0)
                            || ' TAXES DOES NOT ADD UP TO THE TOTAL AMOUNT..'
                            || v_gross_amt);
                    END IF;
                END IF;

                BEGIN
                    SELECT NVL (spr_sms_number, spr_mobile_no),
                           NVL (spr_pin_number, spr_pin)
                      INTO v_sms_tel, v_ref_no
                      FROM tqc_service_providers
                     WHERE spr_code = i.pofe_cor_code;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Error getting service providers Mobile Payment details'
                            || i.pofe_cor_code);
                END;

                IF v_sms_tel IS NOT NULL
                THEN
                    SELECT mpt_code
                      INTO v_mpt_code
                      FROM tqc_mob_pymnt_types_prefixes,
                           tqc_mobile_pymnt_types
                     WHERE     mptp_mpt_code = mpt_code
                           AND mptp_mob_no_prefix = SUBSTR (v_sms_tel, 1, 4);
                ELSE
                    raise_application_error (
                        -20001,
                        'CLAIMANT/SERVICE PROVIDER NOT ENABLED TO TRANSACT MOBILE PYMT..');
                END IF;

                IF NVL (i.pmsf_amount, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'MF',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               ' GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    v_payee_mft_dtls (1) :=
                        fms_cheques_pkg.append_mft_payees (
                            v_rec_count,
                            a.mpofe_code,
                            ROUND (NVL (v_gross_amt, 0), v_bcur_rnd),
                            ---v_amount,
                            a.mpofe_payee,                      --v_narrative,
                            v_sms_tel,
                            --v_credit_id                                                                                 ,
                            'Mobile Phone Number',
                            --v_credit_id_type
                            v_ref_no,                        --v_validation_id
                            'REFERENCE NO'              --v_validation_id_type
                                          );
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (v_gross_amt, 0), v_rnd),
                        'SURVEY',                                 --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                IF NVL (v_vattowithhold_app_param, 'N') != 'Y'
                THEN
                    IF NVL (i.pmsf_vat_amt, 0) != 0
                    THEN
                        gin_interfaces_pkg.get_gl_acct_code (
                            'WTHVAT',
                            i.pmsf_scl_code,
                            'U',
                            NULL,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );

                        IF fms_interfaces_pkg.valid_trns_acc (
                               v_trnt_gl_code,
                               v_org_code,
                               v_paymnt_brh_code) =
                           FALSE
                        THEN
                            raise_application_error (
                                -20001,
                                   'WTHVAT GL A/C - '
                                || v_trnt_gl_code
                                || ' UNDEFINED IN '
                                || v_brh_name
                                || ' CODE '
                                || v_trnt_code
                                || ' CLS - '
                                || 100);
                        END IF;

                        v_rec_count := v_rec_count + 1;
                        v_payee_mft_dtls (1) :=
                            fms_cheques_pkg.append_mft_payees (
                                v_rec_count,
                                a.mpofe_code,
                                ROUND (NVL (i.pmsf_vat_amt, 0), v_bcur_rnd),
                                ---v_amount,
                                a.mpofe_payee,                  --v_narrative,
                                v_sms_tel,
                                --v_credit_id                                                                                 ,
                                'Mobile Phone Number',
                                --v_credit_id_type
                                v_ref_no,                    --v_validation_id
                                'REFERENCE NO'          --v_validation_id_type
                                              );
                        fms_cheques_pkg.append_chq_trans (
                            v_rec_count,
                            ROUND (NVL (i.pmsf_vat_amt, 0), v_rnd),
                            'SURVEY',                             --narrative,
                            v_trnt_gl_code,
                            -- crt_acc_number
                            v_org_code,
                            --crt_acc_org_code ,
                            v_paymnt_brh_code,
                            --i.cmb_brn_code,          --v_brh_code,
                            'D',                                    --v_dr_cr,
                            v_chq_dtls);
                    END IF;
                END IF;

                IF NVL (i.pmsf_vattowithhold_amnt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'VATTOWTH',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,                 ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'VATTOWTH GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    v_payee_mft_dtls (1) :=
                        fms_cheques_pkg.append_mft_payees (
                            v_rec_count,
                            a.mpofe_code,
                            ROUND (NVL (i.pmsf_vattowithhold_amnt, 0),
                                   v_bcur_rnd),
                            ---v_amount,
                            a.mpofe_payee,                      --v_narrative,
                            v_sms_tel,
                            --v_credit_id                                                                                 ,
                            'Mobile Phone Number',
                            --v_credit_id_type
                            v_ref_no,                        --v_validation_id
                            'REFERENCE NO'              --v_validation_id_type
                                          );
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.pmsf_vattowithhold_amnt, 0), v_rnd),
                        'SURVEY',                                 --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;

                IF NVL (i.pmsf_whtx_amt, 0) != 0
                THEN
                    gin_interfaces_pkg.get_gl_acct_code (
                        'WTHTPY',
                        i.pmsf_scl_code,
                        'U',
                        NULL,
                        NULL,                  --F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );

                    IF fms_interfaces_pkg.valid_trns_acc (v_trnt_gl_code,
                                                          v_org_code,
                                                          v_paymnt_brh_code) =
                       FALSE
                    THEN
                        raise_application_error (
                            -20001,
                               'WTHTPY GL A/C - '
                            || v_trnt_gl_code
                            || ' UNDEFINED IN '
                            || v_brh_name
                            || ' CODE '
                            || v_trnt_code
                            || ' CLS - '
                            || 100);
                    END IF;

                    v_rec_count := v_rec_count + 1;
                    v_payee_mft_dtls (1) :=
                        fms_cheques_pkg.append_mft_payees (
                            v_rec_count,
                            a.mpofe_code,
                            ROUND (NVL (i.pmsf_whtx_amt, 0), v_bcur_rnd),
                            ---v_amount,
                            a.mpofe_payee,                      --v_narrative,
                            v_sms_tel,
                            --v_credit_id                                                                                 ,
                            'Mobile Phone Number',
                            --v_credit_id_type
                            v_ref_no,                        --v_validation_id
                            'REFERENCE NO'              --v_validation_id_type
                                          );
                    fms_cheques_pkg.append_chq_trans (
                        v_rec_count,
                        ROUND (NVL (i.pmsf_whtx_amt, 0), v_rnd),
                        'SURVEY',                                 --narrative,
                        v_trnt_gl_code,
                        -- crt_acc_number
                        v_org_code,
                        --crt_acc_org_code ,
                        v_paymnt_brh_code,
                        --i.cmb_brn_code,          --v_brh_code,
                        'D',                                        --v_dr_cr,
                        v_chq_dtls);
                END IF;
            END LOOP;

            BEGIN
                IF v_pay_method = 'EFT'
                THEN
                    FMS_INTERFACES_PKG.create_EftRtgs_reqn (
                        v_cqr_source,                         -- v_cqr_source,
                        a.mpofe_code,                            -- v_cqr_ref,
                        v_trans_no,                             -- v_cqr_ref2,
                        TRUNC (SYSDATE),                    -- v_cqr_ref_date,
                        NVL (a.mpofe_remarks,
                             'VALUATION/SURVEY PYMT  FOR ' || a.mpofe_code),
                        v_paymnt_brh_code,                  -- v_cqr_brh_code,
                        v_bct_brh_code,                 -- v_cqr_bct_brh_code,
                        ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd), -- v_cqr_amount,
                        a.mpofe_payee,                         -- v_cqr_payee,
                        v_pay_method,                     -- v_cqr_pay_method,
                        a.mpofe_cur_code,                   -- v_cqr_cur_code,
                        NULL,                               ---i.cpv_cur_rate,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (
                            UPPER (a.mpofe_authorised_by)),
                        a.mpofe_authorised_date,
                        v_user_code,                          -- v_cqr_req_by,
                        'GIS-VAL',                          -- v_cqr_pmt_type,
                        v_bnk_bbr_code,            --v_payee_bank_branch_code,
                        v_bnk_account,                  --v_payee_bank_acc_no,
                        v_chq_dtls,                           -- v_dtls_table,
                        v_payee_eft_dtls,                    --v_payee_eft_rec
                        NULL,                         --v_cqr_physical_address
                        NULL,                          ---v_cqr_postal_address
                        v_trans_no,                        --v_itfc_trans_code
                        NULL,                                    --v_itfc_ref3
                        NULL,                             --v_payee_source_pk,
                        NULL,                           --v_payee_source_type,
                        'N',                                    --v_auto_auth,
                        NULL,                                   --v_num_val_1,
                        NULL,                                 ---v_invoice_no,
                        NULL,                               ---v_invoice_date,
                        NULL,                           ---v_auto_consolidate,
                        NULL,                                   ---v_batch_no,
                        NULL                               ---v_payee_spr_code
                            );
                --            fms_cheques_pkg.create_reqn
                --               (v_cqr_source,
                --                a.mpofe_code,                                            --ref
                --                v_trans_no,                                           -- ref2,
                --                TRUNC (SYSDATE),
                --                NVL (a.mpofe_remarks,
                --                     'VALUATION/SURVEY PYMT  FOR ' || a.mpofe_code
                --                    ),                --'gis claim',             --narrative V
                --                v_paymnt_brh_code,                           --i.cmb_brn_code,
                --                v_bct_brh_code,
                --                ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd),     --cqr_amount
                --                a.mpofe_payee,
                --                v_pay_method,
                --                NULL,
                --                v_bnk_bbr_pk,                                             --12
                --                a.mpofe_cur_code,
                --                v_bct_code,
                --                fms_interfaces_pkg.get_usercode (UPPER (a.mpofe_authorised_by)),
                --                a.mpofe_authorised_date,
                --                v_user_code,                                 --v_cqr_req_by  ,
                --                'GIS-VAL',                                      -- pmt_type  ,
                --                v_chq_dtls,
                --                v_payee_eft_dtls,
                --                NULL,
                --                NULL,
                --                NULL,
                --                NULL,
                --                NULL,
                --                v_bnk_bbr_code,
                --                v_bnk_account,
                --                NULL,
                --                'N'                                              --v_auto_auth
                --               );

                ELSE
                    FMS_INTERFACES_PKG.create_Chq_reqn (
                        v_cqr_source,
                        a.mpofe_code,                                    --ref
                        v_trans_no,                                   -- ref2,
                        TRUNC (SYSDATE),                                  ----
                        NVL (a.mpofe_remarks,
                             'VALUATION/SURVEY PYMT  FOR ' || a.mpofe_code), ----
                        --'GIS Claim',             --narrative V
                        v_paymnt_brh_code,                               -----
                        v_bct_brh_code,                                   ----
                        ROUND (NVL (a.mpofe_payable, 0), v_bcur_rnd),     ----
                        --ROUND (NVL (i.cpv_net_paid, 0), v_bcur_rnd),     --cqr_amount
                        a.mpofe_payee,                                    ----
                        v_pay_method,                                     ----
                        a.mpofe_cur_code,
                        NULL,                               ---i.cpv_cur_rate,
                        v_bct_code,                                        ---
                        fms_interfaces_pkg.get_usercode (
                            UPPER (a.mpofe_authorised_by)),               ----
                        a.mpofe_authorised_date,      --v_source_auth_dt,-----
                        v_user_code, --v_auth_by,--v_user_code,   ----                           --v_cqr_req_by  ,
                        NULL, --'GIS-CLAIM',   ----                              -- pmt_type  ,
                        v_chq_dtls,                                       ----
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL);
                END IF;
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_application_error (
                        -20001,
                           'CREATE_REQN :- '
                        || v_paymnt_brh_code
                        || ' $ '
                        || SQLERRM (SQLCODE));
            END;
        END LOOP;

        IF v_rec_count = 0
        THEN
            raise_application_error (
                -20001,
                'SURVEY REQN NOT CREATED FOR TRANSACTION # ' || v_trans_no);
        END IF;
    END;

    PROCEDURE process_survey_credit_payment (
        v_pofe_no      VARCHAR2,
        v_trans_no     NUMBER,
        v_user_name    VARCHAR2,
        v_pay_method   VARCHAR2 DEFAULT 'CR',
        v_sur_val      VARCHAR2 DEFAULT 'SUR')
    IS
        v_rein_trans   VARCHAR2 (10) := 'N';
    BEGIN
        post_service_credit_payments (v_pofe_no,
                                      v_trans_no,
                                      v_user_name,
                                      v_rein_trans);
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR PROCESSING CREDIT PAYMENT FOR SERVICE PROVIDER..');
    END;

    PROCEDURE process_survey_journal_payment (
        v_pofe_no      VARCHAR2,
        v_trans_no     NUMBER,
        v_user_name    VARCHAR2,
        v_pay_method   VARCHAR2 DEFAULT 'JE',
        v_sur_val      VARCHAR2 DEFAULT 'SUR')
    IS
        v_rein_trans   VARCHAR2 (10) := 'N';
    BEGIN
        post_survey_jvs_payments (v_pofe_no,
                                  v_trans_no,
                                  v_user_name,
                                  v_pay_method,
                                  v_sur_val);
    EXCEPTION
        WHEN OTHERS
        THEN
            raise_application_error (
                -20001,
                'ERROR PROCESSING JOURNAL PAYMENT FOR SERVICE PROVIDER..');
    END;

    PROCEDURE post_survey_jvs_payments (
        v_pofe_no      VARCHAR2,
        v_trans_no     NUMBER,
        v_user_name    VARCHAR2,
        v_pay_method   VARCHAR2 DEFAULT 'JE',
        v_sur_val      VARCHAR2 DEFAULT 'SUR')
    IS
        v_ggt_trans_no       NUMBER;
        v_rnd                NUMBER;
        v_bcur_rnd           NUMBER;
        v_jv_cur_rate        NUMBER;
        v_jv_tran_type       VARCHAR2 (50);
        v_mtran_no           NUMBER;

        CURSOR cur_service_acc (v_service_cd IN NUMBER)
        IS
            SELECT spr_bank_acc_no, spr_code, spr_sht_desc
              FROM tqc_service_providers
             WHERE spr_code = v_service_cd;

        v_service_acc        VARCHAR2 (30);
        v_service_code       NUMBER;
        v_service_sht_desc   VARCHAR2 (30);

        CURSOR master_trans IS
            SELECT *
              FROM gin_master_pol_misc_fees, gin_misc_fee_types
             WHERE     mpofe_code = v_pofe_no
                   AND mpofe_ggt_trans_no = v_trans_no
                   AND mfee_code = mpofe_mfee_code;
    BEGIN
        FOR master_rec IN master_trans
        LOOP
            BEGIN
                OPEN cur_service_acc (master_rec.mpofe_cor_code);

                FETCH cur_service_acc
                    INTO v_service_acc, v_service_code, v_service_sht_desc;

                IF cur_service_acc%NOTFOUND
                THEN
                    raise_error (
                           v_service_sht_desc
                        || ' Service Provider account code have not been defined...Please Check..'
                        || master_rec.mpofe_cor_code);
                END IF;

                CLOSE cur_service_acc;
            END;

            SELECT DECODE (SIGN (master_rec.mpofe_payable),
                           1, btr_debit_code,
                           btr_credit_code)
              INTO v_jv_tran_type
              FROM gin_business_transactions
             WHERE btr_trans_code = 'JV';

            SELECT TO_NUMBER (
                       TO_CHAR (SYSDATE, 'YYYY') || gin_mtran_no_seq.NEXTVAL)
              INTO v_mtran_no
              FROM DUAL;

            SELECT TO_NUMBER (
                       TO_CHAR (SYSDATE, 'YYYY') || ggt_trans_no_seq.NEXTVAL)
              INTO v_ggt_trans_no
              FROM DUAL;

            INSERT INTO gin_gis_transactions (ggt_trans_no,
                                              ggt_btr_trans_code,
                                              ggt_done_by,
                                              ggt_done_date,
                                              ggt_uw_clm_tran,
                                              ggt_trans_date,
                                              ggt_effective_date)
                 VALUES (v_trans_no,
                         'JV',
                         v_user_name,
                         TRUNC (SYSDATE),
                         NULL,
                         TRUNC (SYSDATE),
                         TRUNC (SYSDATE));

            v_jv_cur_rate :=
                get_currexch_rate (master_rec.mpofe_cur_code,
                                   v_rnd,
                                   v_bcur_rnd);

            INSERT INTO gin_master_transactions (mtran_no,
                                                 mtran_doc_date,
                                                 mtran_date,
                                                 mtran_ref_no,
                                                 mtran_other_ref,
                                                 mtran_tran_type,
                                                 mtran_dc,
                                                 mtran_control_acc,
                                                 mtran_client_type,
                                                 mtran_client_code,
                                                 mtran_amount,
                                                 mtran_balance,
                                                 mtran_authorised,
                                                 mtran_net_amt,
                                                 mtran_posting_date,
                                                 mtran_ggt_tran_no,
                                                 mtran_prp_code,
                                                 mtran_btr_trans_code,
                                                 mtran_origin,
                                                 mtran_cur_code,
                                                 mtran_cur_symbol,
                                                 mtran_brn_code,
                                                 mtran_brn_sht_desc,
                                                 mtran_posted_by,
                                                 mtran_cur_rate,
                                                 mtran_client_polcy_no,
                                                 mtran_div_code,
                                                 mtran_payee,
                                                 mtran_narrations)
                     VALUES (
                         v_trans_no,
                         TRUNC (SYSDATE),
                         TRUNC (SYSDATE),
                         'UFO' || master_rec.mpofe_code || 'JV',
                         'UFO' || master_rec.mpofe_code || 'JV',
                         'VF/MF',
                         DECODE (SIGN (master_rec.mpofe_payable),
                                 1, 'D',
                                 'C'),
                         NULL,
                         'SUR',
                         v_service_code,
                         NVL (master_rec.mpofe_payable, 0),
                         NVL (master_rec.mpofe_payable, 0),
                         'Y',
                         NVL (master_rec.mpofe_payable, 0),
                         TRUNC (SYSDATE),
                         v_ggt_trans_no,
                         NULL,
                         'JV',
                         'A',
                         master_rec.mpofe_cur_code,
                         master_rec.mpofe_cur_symbol,
                         NULL,
                         NULL,
                         v_user_name,
                         v_jv_cur_rate,
                         NULL,
                         NULL,
                         NULL,
                         'POSTING JV FOR SERVICE PROVIDERS FEES');
        END LOOP;
    END;

    PROCEDURE post_service_credit_payments (
        v_pofe_no      IN VARCHAR2,
        v_trans_no     IN NUMBER,
        v_user_name       VARCHAR2,
        v_rein_trans   IN VARCHAR2 DEFAULT 'N')
    IS
        v_paid_amt           NUMBER := 0;
        v_tran_sign          NUMBER;
        v_rein_amt           NUMBER (23, 5);
        v_exhange_rate       NUMBER;
        v_rnd                NUMBER;
        v_bcur_rnd           NUMBER;
        v_cr_tran_no         NUMBER;

        CURSOR cur_service_acc (v_service_cd IN NUMBER)
        IS
            SELECT spr_bank_acc_no, spr_code, spr_sht_desc
              FROM tqc_service_providers
             WHERE spr_code = v_service_cd;

        v_service_acc        VARCHAR2 (30);
        v_service_code       NUMBER;
        v_service_sht_desc   VARCHAR2 (30);

        CURSOR master_trans IS
            SELECT *
              FROM gin_master_pol_misc_fees,
                   gin_misc_fee_types,
                   gin_pol_misc_fees
             WHERE     mpofe_code = v_pofe_no
                   AND mpofe_ggt_trans_no = v_trans_no
                   AND mfee_code = mpofe_mfee_code
                   AND mpofe_code = pofe_code;
    BEGIN
        FOR master_rec IN master_trans
        LOOP
            BEGIN
                OPEN cur_service_acc (master_rec.mpofe_cor_code);

                FETCH cur_service_acc
                    INTO v_service_acc, v_service_code, v_service_sht_desc;

                IF cur_service_acc%NOTFOUND
                THEN
                    raise_error (
                           v_service_sht_desc
                        || ' Service Provider account code have not been defined...Please Check..'
                        || master_rec.mpofe_cor_code);
                END IF;

                CLOSE cur_service_acc;
            END;

            v_paid_amt := master_rec.mpofe_payable;
            v_tran_sign := SIGN (v_paid_amt);
            v_exhange_rate :=
                get_currexch_rate (master_rec.mpofe_cur_code,
                                   v_rnd,
                                   v_bcur_rnd);

            BEGIN
                SELECT    TO_NUMBER (TO_CHAR (SYSDATE, 'YYYY'))
                       || gin_mtran_no_seq.NEXTVAL
                  INTO v_cr_tran_no
                  FROM DUAL;

                INSERT INTO gin_master_transactions (mtran_no,
                                                     mtran_date,
                                                     mtran_ref_no,
                                                     mtran_other_ref,
                                                     mtran_tran_type,
                                                     mtran_dc,
                                                     mtran_control_acc,
                                                     mtran_client_type,
                                                     mtran_client_code,
                                                     mtran_amount,
                                                     mtran_balance,
                                                     mtran_pol_batch_no,
                                                     mtran_narrations,
                                                     mtran_prp_code,
                                                     mtran_client_polcy_no,
                                                     mtran_brn_code,
                                                     mtran_pol_ren_endos_no,
                                                     mtran_ggt_tran_no,
                                                     mtran_acct_code,
                                                     mtran_pro_sht_desc,
                                                     mtran_pro_code,
                                                     mtran_authorised,
                                                     mtran_posting_date,
                                                     mtran_net_amt,
                                                     mtran_origin,
                                                     mtran_btr_trans_code,
                                                     mtran_cur_code,
                                                     mtran_cur_symbol,
                                                     mtran_cur_rate,
                                                     mtran_pdl_code,
                                                     mtran_date_authorized,
                                                     mtran_authorised_by,
                                                     mtran_payee)
                         VALUES (
                             v_trans_no,
                             TRUNC (SYSDATE),
                             'UFO' || master_rec.mpofe_code,
                             NULL,
                             'VF',
                             DECODE (v_tran_sign, 1, 'D', 'C'),
                             v_service_sht_desc,
                             'S',
                             master_rec.mpofe_cor_code,
                               v_tran_sign
                             * ABS (ROUND (master_rec.mpofe_payable, v_rnd)),
                               v_tran_sign
                             * ABS (ROUND (master_rec.mpofe_payable, v_rnd)),
                             master_rec.pofe_pol_batch_no,
                                master_rec.mfee_desc
                             || DECODE (v_tran_sign,
                                        1, 'Debit Note..',
                                        'Credit Note..'),
                             master_rec.pofe_prp_code,
                             master_rec.pofe_pol_policy_no,
                             NULL,
                             master_rec.pofe_pol_ren_endos_no,
                             master_rec.mpofe_ggt_trans_no,
                             NULL,
                             NULL,
                             master_rec.pofe_pro_code,
                             'Y',
                             TRUNC (SYSDATE),
                               v_tran_sign
                             * ABS (ROUND (master_rec.mpofe_payable, v_rnd)),
                             'U',
                             'UFO',
                             master_rec.mpofe_cur_code,
                             master_rec.mpofe_cur_symbol,
                             v_exhange_rate,
                             master_rec.mpofe_pdl_code,
                             TRUNC (SYSDATE),
                             v_user_name,
                             master_rec.mpofe_payee);
            EXCEPTION
                WHEN OTHERS
                THEN
                    raise_error (
                        'Unable to post service provider credit note ...');
            END;
        END LOOP;
    END;

    PROCEDURE claim_xol_pymt_postings (v_clmrg_claim_no   VARCHAR2,
                                       v_trans_no         NUMBER,
                                       v_user_name        VARCHAR2)
    IS
        v_cmb_claim_no          NUMBER;
        v_cqr_bnk_dtls          fms_cheques_pkg.type_bnk_dtls_table;
        v_cnt_xol               NUMBER;
        v_xol_amt               NUMBER;

        CURSOR c_claim IS
            SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
                   gin_clm_payment_vouchers.cpv_vchr_cur_code,
                   gin_clm_payment_vouchers.cpv_cur_code,
                   gin_clm_payment_vouchers.cpv_voucher_no,
                   gin_clm_payment_vouchers.cpv_amount_bcur,
                   gin_clm_payment_vouchers.cpv_apco_cor_code,
                   gin_clm_payment_vouchers.cpv_date,
                   gin_clm_payment_vouchers.cpv_authorised,
                   gin_clm_payment_vouchers.cpv_authorised_by,
                   gin_clm_payment_vouchers.cpv_account_type,
                   gin_clm_payment_vouchers.cpv_agnt_agent_code,
                   cpv_authorised_dt,
                   cpv_amount                                cpv_amount,
                   gin_clm_payment_vouchers.cpv_payee,
                   gin_clm_payment_vouchers.cpv_raise_by,
                   gin_claim_master_bookings.cmb_cur_code,
                   gin_claim_master_bookings.cmb_brn_code,
                   gin_clm_payment_vouchers.cpv_drcr_no,
                   cpv_comp_retention,
                   cpv_man_amount,
                   cpv_quota_amount,
                   cpv_fstsup_amount,
                   cpv_secsup_amount,
                   cpv_facre_amount,
                   cpv_xol_amount,
                   SUBSTR (cpv_tran_type, 0, 2)              cpv_tran_type,
                   gin_claim_master_bookings.cmb_scl_code,
                   NVL (cpv_vat_amnt, 0)                     cpv_vat_amnt,
                   NVL (cpv_whtx_amnt, 0)                    cpv_whtx_amnt,
                   NVL (cpv_net_paid, 0)                     cpv_net_paid,
                   cpv_bcur_net_paid,
                   cpv_bcur_vat_amnt,
                   cpv_bcur_whtx_amnt,
                   cpv_post_dated,
                   cpv_post_dated_date,
                   cpv_rein_amount,
                   cpv_rein_amount_bcur,
                   cpv_excess_amount,
                   cpv_excess_amount_bcur,
                   cpv_ret_salvage,
                   cpv_ret_salvage_bcur,
                   NULL                                      cpv_disc_amt,
                   cpv_claimant_type,
                   cpv_reg_cld_code,
                   cpv_cbp_code,
                   cpv_reg_clmt_code,
                   cpv_exciseduty_amnt                       cpv_exciseduty_amnt,
                   cpv_bcur_exciseduty_amnt,
                   cmb_coin_pay_type,
                   cpv_coin_tot_net_paid,
                   cpv_coin_tot_vat_amnt,
                   cpv_coin_tot_whtx_amnt,
                   cpv_coin_tot_exciseduty_amnt,
                   cpv_coin_tot_amt,
                   cpv_coin_tot_amt_bcur,
                   cmb_pol_policy_type,
                   cmb_location_code,
                   cmb_unit_code,
                   cpv_coin_vattowithhold_amnt,
                   cpv_bcur_vattowithhold_amnt,
                   cpv_coin_vattowithhold_amnt               cpv_vattowithhold_amnt,
                   gin_clm_payment_vouchers.cpv_cur_rate     cpv_cur_rate,
                   cpv_ggt_trans_no
              FROM gin_claim_master_bookings, gin_clm_payment_vouchers
             WHERE     cmb_claim_no = cpv_cmb_claim_no
                   AND cmb_claim_no = v_clmrg_claim_no
                   AND cpv_ggt_trans_no = v_trans_no;

        CURSOR cur_xol_amnts (v_trn_no IN NUMBER)
        IS
              SELECT NVL (cxtd_amt_to_cede, 0)
                         gross_amt,
                     DECODE (xolp_part_type,
                             'D', xolp_agnt_agent_code,
                             'B', xolp_br_agn_code)
                         xolp_agnt_agent_code,
                     agn_name,
                     DECODE (xolp_part_type,
                             'D', xolp_agnt_sht_desc,
                             'B', xolp_br_agn_sht_desc)
                         xolp_agnt_sht_desc,
                     xolp_rate,
                     xolp_gl_account,
                     cxtd_scl_code,
                     xols_cur_code,
                     xol_code,
                     --                  ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)
                     --                        )
                     ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0))
                         part_amount,
                     cxtd_clm_no
                FROM gin_claim_xol_treaty_details,
                     gin_xol_treaty_setups,
                     gin_xol_participants,
                     gin_xol_treaties,
                     tqc_agencies
               WHERE     cxtd_xols_code = xols_code
                     AND xolp_agnt_agent_code = agn_code
                     AND cxtd_xol_code = xol_code
                     AND xolp_xols_code = xols_code
                     AND xols_xol_code = xol_code
                     AND cxtd_ggt_trans_no = v_trn_no
                     AND cxtd_authorized = 'P'
                     AND cxtd_ggt_trans_no IN
                             (SELECT ggt_trans_no FROM gin_gis_transactions)
                     AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)) <>
                         0
            -- AND ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0)) <> 0
            GROUP BY cxtd_clm_no,
                     NVL (cxtd_amt_to_cede, 0),
                     DECODE (xolp_part_type,
                             'D', xolp_agnt_agent_code,
                             'B', xolp_br_agn_code),
                     agn_name,
                     DECODE (xolp_part_type,
                             'D', xolp_agnt_sht_desc,
                             'B', xolp_br_agn_sht_desc),
                     xolp_rate,
                     xolp_gl_account,
                     cxtd_scl_code,
                     xols_cur_code,
                     xol_code,
                     --ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede_use, 0))
                     ROUND (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0));

        v_chq_dtls              fms_cheques_pkg.type_rqn_dtls_table;
        v_payee_eft_dtls        fms_cheques_pkg.type_payee_eft_table;
        v_payee_mft_dtls        fms_cheques_pkg.type_payee_mft_table;
        v_cqr_brh_code          NUMBER;
        v_user_code             NUMBER;
        v_cqr_source_auth_by    NUMBER;
        v_cqr_source_auth_dt    DATE;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_bct_code              NUMBER;
        v_bct_brh_code          NUMBER;
        v_crt_acc_number        VARCHAR2 (20);
        v_crt_acc_org_code      NUMBER;
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_acc_type              VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_exch_rate2            NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_cur_code              NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_lvl                   VARCHAR2 (15);
        v_payment_amt           gin_clm_payment_vouchers.cpv_amount_bcur%TYPE;
        v_net_amt               NUMBER;
        v_tot_amt               NUMBER;
        v_rein_amt              NUMBER;
        v_control_acc           VARCHAR2 (30);
        v_client_type           VARCHAR2 (5);
        v_act_code              NUMBER;
        v_agnt_sht_desc         VARCHAR2 (25);
        v_eft_enabled           VARCHAR2 (1);
        v_bnk_account           VARCHAR2 (30);
        v_bnk_bbr_code          VARCHAR2 (30);
        v_ref_no                VARCHAR2 (30);
        v_facre_gl_acc_no       VARCHAR2 (30);
        v_frgn_or_local         VARCHAR2 (30);
    BEGIN
        FOR i IN c_claim
        LOOP
            v_exch_rate :=
                get_currexch_rate (i.cpv_vchr_cur_code, v_rnd, v_bcur_rnd);
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
            v_paymnt_brh_code := i.cmb_brn_code;
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            fms_interfaces_pkg.trans_bct ('CLM',
                                          v_cqr_source,
                                          v_paymnt_brh_code,
                                          i.cpv_vchr_cur_code,
                                          v_bct_code,
                                          v_bct_brh_code);

            FOR c_xol_rec IN cur_xol_amnts (v_trans_no)
            LOOP
                BEGIN
                    --            RAISE_ERROR('v_trans_no='||v_trans_no||'v_authorized='||v_authorized||'v_amt_to_cede='||v_amt_to_cede);
                    --         raise_error('ERROR GETTING CLAIM DETAILS  MMMMM'||v_trans_no);
                    IF i.cpv_tran_type = 'CP'
                    THEN
                        gin_interfaces_pkg.get_gl_acct_code (
                            'CP',                   --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            'XOL',               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    ELSIF i.cpv_tran_type = 'CF'
                    THEN
                        gin_interfaces_pkg.get_gl_acct_code (
                            'CF',                   --v_trnt_type IN VARCHAR2,
                            i.cmb_scl_code,            --v_scl_code IN NUMBER,
                            'XOL',               --     v_app_lvl IN VARCHAR2,
                            NULL,    --          v_btr_trans_code IN VARCHAR2,
                            NULL,
                            --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                            v_trnt_code, --          v_trnt_code OUT VARCHAR2,
                            v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                            v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                                 );
                    END IF;

                    IF c_xol_rec.xolp_gl_account IS NOT NULL
                    THEN
                        v_trnt_contra_gl_code := c_xol_rec.xolp_gl_account;
                    ELSE
                        raise_error (
                               'Error GL account not provided for XOL account transaction No'
                            || v_trans_no); --v_trnt_contra_gl_code := gin_interfaces_pkg.sl_control_acc ('GIS', v_lvl, NULL);
                    END IF;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'CLAIM PAYMENT XOL AMOUNT REVENUE ITEM FOR SUB CLASS '
                            || i.cmb_scl_code
                            || ' IS NOT DEFINED..');
                END;

                --RAISE_ERROR('c_xol_rec.xolp_gl_account'||c_xol_rec.xolp_gl_account);
                check_valid_gl_acc (v_trnt_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                check_valid_gl_acc (v_trnt_contra_gl_code,
                                    v_org_code,
                                    v_paymnt_brh_code,
                                    v_brh_name,
                                    v_trnt_code,
                                    i.cmb_scl_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
                    'CLAIM PAYMENT XOL',
                    --narrative,
                    v_trnt_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'C',                                            --v_dr_cr,
                    v_chq_dtls,
                    NULL,
                    NULL,
                    i.cmb_unit_code,
                    i.cmb_location_code);
                v_rec_count := v_rec_count + 1;
                fms_cheques_pkg.append_chq_trans (
                    v_rec_count,
                    ROUND (NVL (c_xol_rec.part_amount, 0), v_rnd),
                    'CLAIM PAYMENT XOL',                          --narrative,
                    v_trnt_contra_gl_code,
                    -- crt_acc_number
                    v_org_code,                           --crt_acc_org_code ,
                    v_paymnt_brh_code,                           --v_brh_code,
                    'D',                                            --v_dr_cr,
                    v_chq_dtls,
                    NULL,
                    NULL,
                    i.cmb_unit_code,
                    i.cmb_location_code);
            END LOOP;
        END LOOP;
    END;

    -- PROCEDURE process_clm_pymt_xol (
    --      v_clmrg_claim_no        VARCHAR2,
    --      v_trans_no              NUMBER,
    --      v_user_name             VARCHAR2,
    --      v_auth_date        IN   DATE DEFAULT TRUNC (SYSDATE)
    --   )
    --   IS
    --      --v_cmb_claim_no          NUMBER;
    --       vgl_trans               fms_vouchers_pkg.tgl_rec_type;
    --      v_user_code             NUMBER;
    --      exc_user_error          EXCEPTION;
    --      v_brh_name              VARCHAR2 (100);
    --      v_trnt_gl_code          VARCHAR2 (20);
    --      v_trnt_contra_gl_code   VARCHAR2 (20);
    --      v_trnt_code             VARCHAR2 (20);
    --      v_cqr_source            NUMBER;
    --      v_rec_count             NUMBER                        := 0;
    --      v_org_code              NUMBER;
    --      v_exch_rate             NUMBER;
    --      v_rnd                   NUMBER;
    --      v_bcur_rnd              NUMBER;
    --      v_paymnt_brh_code       NUMBER;
    --      v_lvl                   VARCHAR2 (15);
    --      rev_type                VARCHAR2 (15);
    --      vgl_code                NUMBER;
    --      v_description           VARCHAR2 (25)          := 'CLAIM XOL RECOVERY';
    --      v_drcr                   VARCHAR2 (1) ;
    --      CURSOR c_claim
    --      IS
    --         SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
    --                gin_clm_payment_vouchers.cpv_voucher_no,
    --                gin_clm_payment_vouchers.cpv_date,
    --                gin_clm_payment_vouchers.cpv_authorised,
    --                gin_clm_payment_vouchers.cpv_authorised_by,
    --                cpv_authorised_dt, gin_clm_payment_vouchers.cpv_amount,
    --                gin_clm_payment_vouchers.cpv_payee,
    --                gin_clm_payment_vouchers.cpv_raise_by,
    --                gin_claim_master_bookings.cmb_cur_code,
    --                gin_claim_master_bookings.cmb_brn_code,
    --                gin_clm_payment_vouchers.cpv_drcr_no, cpv_comp_retention,
    --                cpv_man_amount, cpv_quota_amount, cpv_fstsup_amount,
    --                cpv_secsup_amount, cpv_facre_amount,
    --                SUBSTR (cpv_tran_type, 0, 2) cpv_tran_type,
    --                gin_claim_master_bookings.cmb_scl_code, cpv_vat_amnt,
    --                cpv_whtx_amnt, cpv_net_paid, cpv_agnt_agent_code,
    --                cpv_account_type,cpv_tran_type cpv_tran_types
    --           FROM gin_claim_master_bookings, gin_clm_payment_vouchers
    --          WHERE cmb_claim_no = cpv_cmb_claim_no
    --            AND cmb_claim_no = v_clmrg_claim_no
    --            AND
    --                --CPV_AUTHORISED = 'Y' AND
    --                cpv_ggt_trans_no = v_trans_no;
    --
    --
    --         CURSOR cur_xol_recovery_trans
    --      IS
    --         SELECT   NVL (cxtd_amt_to_cede, 0) gross_amt,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_agent_code,
    --                          'B', xolp_br_agn_code
    --                         ) xolp_agnt_agent_code,
    --                  xolp_agnt_agent_code agn_code,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_sht_desc,
    --                          'B', xolp_br_agn_sht_desc
    --                         ) xolp_agnt_sht_desc,
    --                  xolp_rate, xolp_gl_account, cxtd_scl_code, xols_cur_code,
    --                  xol_code,
    --                   (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)
    --                        ) part_amount,
    --                  cxtd_clm_no,cxtd_authorized
    --             FROM gin_claim_xol_treaty_details,
    --                  gin_xol_treaty_setups,
    --                  gin_xol_participants,
    --                  gin_xol_treaties
    --            WHERE cxtd_xols_code = xols_code
    --              AND cxtd_xol_code = xol_code
    --              AND xolp_xols_code = xols_code
    --              AND xols_xol_code = xol_code
    --              AND cxtd_ggt_trans_no = v_trans_no
    --              AND cxtd_authorized = 'N'  ;
    --
    --   BEGIN
    --
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));
    --
    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;
    --
    --      --vgl_trans.delete;
    --
    --     v_rec_count := -1;
    --
    --      FOR i IN c_claim
    --      LOOP
    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
    --         v_paymnt_brh_code := (i.cmb_brn_code);
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --         v_exch_rate := get_currexch_rate (I.cmb_cur_code, v_rnd, v_bcur_rnd);
    --         IF i.cpv_tran_type = 'CF'
    --         THEN
    --            rev_type := 'CF';
    --         ELSE
    --            rev_type := 'CP';
    --         END IF;
    --         --**************************** Update Facultative Revision Amount***************************
    --         FOR cur_xol_rec IN cur_xol_recovery_trans LOOP
    --            v_lvl := 'XOL';
    --
    ----RAISE_ERROR('#################@@@@@@@@@@@%%%%%%%%%%%%'||cur_xol_rec.cxtd_authorized);
    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    ----                Get_Gl_Code (rev_type,i.cmb_scl_code, v_lvl,v_trnt_code, v_trnt_gl_code,v_trnt_contra_gl_code);
    ----               v_trnt_contra_gl_code :=
    ----                               fms_interfaces_pkg.sl_control_acc ('GIS', 'XOL');
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'Claim Payment XOL Out Revenue Item for  Sub Class '
    --                      || i.cmb_scl_code
    --                      || ' is not defined..'
    --                     );
    --            END;
    --
    --          --   RAISE_ERROR(v_trnt_gl_code||';'||v_trnt_contra_gl_code||';'||cur_xol_rec.xolp_gl_account);
    --          --  IF v_trnt_contra_gl_code IS NULL THEN
    --               v_trnt_contra_gl_code := cur_xol_rec.xolp_gl_account;
    --          --  END IF;
    --
    --            v_rec_count := v_rec_count + 2;
    --
    --            IF NVL (cur_xol_rec.part_amount, 0) <> 0 THEN
    --            IF SIGN(NVL(cur_xol_rec.part_amount,0)) =1 THEN
    --            v_drcr :='C';
    --            ELSE
    --            v_drcr :='D';
    --            END IF;
    --               BEGIN
    --                  fms_vouchers_pkg.append_gl_trans
    --                     (v_rec_count,
    --                      'CLAIM CR ' || v_trnt_code,                --v_narrative
    --                      ABS (ROUND (NVL (cur_xol_rec.part_amount, 0),v_bcur_rnd ) ),                                        --v_amount
    --                      v_drcr,                                            --v_drcr
    --                      v_trnt_gl_code,                             --v_account1
    --                      v_trnt_contra_gl_code,
    --                      --i.GLTRAN_CONTRA_ACC,--v_account2
    --                      v_paymnt_brh_code,                            --v_branch
    --                      vgl_trans
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || v_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END IF;
    --         END LOOP;
    ----            RAISE_ERROR('#################@@@@@@@@@@@%%%%%%%%%%%%'||i.cmb_cur_code);
    --           --************************************************************
    --          vgl_code :=
    --            fms_interfaces_pkg.update_vgl
    --                                       ('GIS CLAIMS TRANS', --v_btc_description
    --                                        'JV',               --v_btc_type
    --                                        v_paymnt_brh_code,            --v_brh_code
    --                                        NVL (v_auth_date, SYSDATE),          --v_dt
    --                                        NVL (   v_description
    --                                                || ' / '
    --                                                || v_clmrg_claim_no
    --                                                || ' / '
    --                                                || i.cpv_voucher_no,
    --                                                'GIS CLAIMS TRANSACTIONS VOUCHER'
    --                                                ),         --v_description
    --                                        i.cpv_voucher_no,                         --v_ref
    --                                        v_user_code,                --v_raised_by
    --                                        i.cmb_cur_code,               --v_cur_code
    --                                        vgl_trans,                  --v_trans
    --                                        v_trans_no,             --v_trans code
    --                                        null,
    --                                        v_exch_rate
    --                                       );                             --v_ref3
    --
    --         fms_interfaces_pkg.post_je (vgl_code, v_user_code);
    --         v_rec_count := 1;
    --      END LOOP;
    --
    --      IF v_rec_count <= 0
    --      THEN
    --         raise_application_error
    --                       (-20001,
    --                           'XOL GL ENTRIES NOT CREATED FOR CLAIM # '
    --                        || v_clmrg_claim_no
    --                       );
    --      END IF;
    --   END;
    -- PROCEDURE process_clm_pymt_xol (
    --      v_clmrg_claim_no        VARCHAR2,
    --      v_trans_no              NUMBER,
    --      v_user_name             VARCHAR2,
    --      v_auth_date        IN   DATE DEFAULT TRUNC (SYSDATE)
    --   )
    --   IS
    --      --v_cmb_claim_no          NUMBER;
    --       vgl_trans               fms_vouchers_pkg.tgl_rec_type;
    --      v_user_code             NUMBER;
    --      exc_user_error          EXCEPTION;
    --      v_brh_name              VARCHAR2 (100);
    --      v_trnt_gl_code          VARCHAR2 (20);
    --      v_trnt_contra_gl_code   VARCHAR2 (20);
    --      v_trnt_code             VARCHAR2 (20);
    --      v_cqr_source            NUMBER;
    --      v_rec_count             NUMBER                        := 0;
    --      v_org_code              NUMBER;
    --      v_exch_rate             NUMBER;
    --      v_rnd                   NUMBER;
    --      v_bcur_rnd              NUMBER;
    --      v_paymnt_brh_code       NUMBER;
    --      v_lvl                   VARCHAR2 (15);
    --      rev_type                VARCHAR2 (15);
    --      vgl_code                NUMBER;
    --      v_description           VARCHAR2 (25)          := 'CLAIM XOL RECOVERY';
    --      v_drcr                   VARCHAR2 (1) ;
    --      CURSOR c_claim
    --      IS
    --         SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
    --                gin_clm_payment_vouchers.cpv_voucher_no,
    --                gin_clm_payment_vouchers.cpv_date,
    --                gin_clm_payment_vouchers.cpv_authorised,
    --                gin_clm_payment_vouchers.cpv_authorised_by,
    --                cpv_authorised_dt, gin_clm_payment_vouchers.cpv_amount,
    --                gin_clm_payment_vouchers.cpv_payee,
    --                gin_clm_payment_vouchers.cpv_raise_by,
    --                gin_claim_master_bookings.cmb_cur_code,
    --                gin_claim_master_bookings.cmb_brn_code,
    --                gin_clm_payment_vouchers.cpv_drcr_no, cpv_comp_retention,
    --                cpv_man_amount, cpv_quota_amount, cpv_fstsup_amount,
    --                cpv_secsup_amount, cpv_facre_amount,
    --                SUBSTR (cpv_tran_type, 0, 2) cpv_tran_type,
    --                gin_claim_master_bookings.cmb_scl_code, cpv_vat_amnt,
    --                cpv_whtx_amnt, cpv_net_paid, cpv_agnt_agent_code,
    --                cpv_account_type,cpv_tran_type cpv_tran_types
    --           FROM gin_claim_master_bookings, gin_clm_payment_vouchers
    --          WHERE cmb_claim_no = cpv_cmb_claim_no
    --            AND cmb_claim_no = v_clmrg_claim_no
    --            AND
    --                --CPV_AUTHORISED = 'Y' AND
    --                cpv_ggt_trans_no = v_trans_no;
    --
    --
    --         CURSOR cur_xol_recovery_trans
    --      IS
    --         SELECT   NVL (cxtd_amt_to_cede, 0) gross_amt,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_agent_code,
    --                          'B', xolp_br_agn_code
    --                         ) xolp_agnt_agent_code,
    --                  xolp_agnt_agent_code agn_code,
    --                  DECODE (xolp_part_type,
    --                          'D', xolp_agnt_sht_desc,
    --                          'B', xolp_br_agn_sht_desc
    --                         ) xolp_agnt_sht_desc,
    --                  xolp_rate, xolp_gl_account, cxtd_scl_code, xols_cur_code,
    --                  xol_code,
    --                   (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0)
    --                        ) part_amount,
    --                  cxtd_clm_no,cxtd_authorized
    --             FROM gin_claim_xol_treaty_details,
    --                  gin_xol_treaty_setups,
    --                  gin_xol_participants,
    --                  gin_xol_treaties
    --            WHERE cxtd_xols_code = xols_code
    --              AND cxtd_xol_code = xol_code
    --              AND xolp_xols_code = xols_code
    --              AND xols_xol_code = xol_code
    --              AND cxtd_ggt_trans_no = v_trans_no
    --              AND cxtd_authorized = 'N'  ;
    --
    --   BEGIN
    --
    --      v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));
    --
    --      IF v_user_code IS NULL
    --      THEN
    --         RAISE exc_user_error;
    --      END IF;
    --
    --     v_rec_count := -1;
    --
    --      FOR i IN c_claim
    --      LOOP
    --         v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
    --         v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
    --         v_paymnt_brh_code := (i.cmb_brn_code);
    --         v_brh_name := fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
    --         v_exch_rate := get_currexch_rate (I.cmb_cur_code, v_rnd, v_bcur_rnd);
    --         IF i.cpv_tran_type = 'CF'
    --         THEN
    --            rev_type := 'CF';
    --         ELSE
    --            rev_type := 'CP';
    --         END IF;
    --         --**************************** Update Facultative Revision Amount***************************
    --         FOR cur_xol_rec IN cur_xol_recovery_trans LOOP
    --            v_lvl := 'XOL';
    --
    ----RAISE_ERROR('#################@@@@@@@@@@@%%%%%%%%%%%%'||cur_xol_rec.cxtd_authorized);
    --            BEGIN
    --               gin_interfaces_pkg.get_gl_acct_code
    --                     (rev_type,                     --v_trnt_type IN VARCHAR2,
    --                      i.cmb_scl_code,                  --v_scl_code IN NUMBER,
    --                      v_lvl,                     --     v_app_lvl IN VARCHAR2,
    --                      NULL,          --          v_btr_trans_code IN VARCHAR2,
    --                      NULL,
    --                      --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
    --                      v_trnt_code,       --          v_trnt_code OUT VARCHAR2,
    --                      v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
    --                      v_trnt_contra_gl_code
    --                     --          v_trnt_contra_gl_code OUT VARCHAR2
    --                     );
    --               check_valid_gl_acc (v_trnt_gl_code,
    --                                   v_org_code,
    --                                   v_paymnt_brh_code,
    --                                   v_brh_name,
    --                                   v_trnt_code,
    --                                   i.cmb_scl_code
    --                                  );
    ----                Get_Gl_Code (rev_type,i.cmb_scl_code, v_lvl,v_trnt_code, v_trnt_gl_code,v_trnt_contra_gl_code);
    ----               v_trnt_contra_gl_code :=
    ----                               fms_interfaces_pkg.sl_control_acc ('GIS', 'XOL');
    --            EXCEPTION
    --               WHEN OTHERS
    --               THEN
    --                  raise_error
    --                     (   'Claim Payment XOL Out Revenue Item for  Sub Class '
    --                      || i.cmb_scl_code
    --                      || ' is not defined..'
    --                     );
    --            END;
    --
    --          --   RAISE_ERROR(v_trnt_gl_code||';'||v_trnt_contra_gl_code||';'||cur_xol_rec.xolp_gl_account);
    --          --  IF v_trnt_contra_gl_code IS NULL THEN
    --               v_trnt_contra_gl_code := cur_xol_rec.xolp_gl_account;
    --          --  END IF;
    --
    --            v_rec_count := v_rec_count + 2;
    --
    --            IF NVL (cur_xol_rec.part_amount, 0) <> 0 THEN
    --            IF SIGN(NVL(cur_xol_rec.part_amount,0)) =1 THEN
    --            v_drcr :='C';
    --            ELSE
    --            v_drcr :='D';
    --            END IF;
    --               BEGIN
    --                  fms_vouchers_pkg.append_gl_trans
    --                     (v_rec_count,
    --                      'CLAIM CR ' || v_trnt_code,                --v_narrative
    --                      ABS (ROUND (NVL (cur_xol_rec.part_amount, 0),v_bcur_rnd ) ),                                        --v_amount
    --                      v_drcr,                                            --v_drcr
    --                      v_trnt_gl_code,                             --v_account1
    --                      v_trnt_contra_gl_code,
    --                      --i.GLTRAN_CONTRA_ACC,--v_account2
    --                      v_paymnt_brh_code,                            --v_branch
    --                      vgl_trans
    --                     );
    --               EXCEPTION
    --                  WHEN OTHERS
    --                  THEN
    --                     raise_application_error
    --                                            (-20026,
    --                                                'ERROR POSTING GL TRANS FOR '
    --                                             || v_trnt_code
    --                                             || ':- '
    --                                             || SQLERRM (SQLCODE)
    --                                            );
    --               END;
    --            END IF;
    --         END LOOP;
    ----            RAISE_ERROR('#################@@@@@@@@@@@%%%%%%%%%%%%'||i.cmb_cur_code);
    --           --************************************************************
    --          IF NVL(v_rec_count,0) <> -1 THEN
    --              vgl_code :=
    --                fms_interfaces_pkg.update_vgl
    --                                           ('GIS CLAIMS TRANS', --v_btc_description
    --                                            'JV',               --v_btc_type
    --                                            v_paymnt_brh_code,            --v_brh_code
    --                                            NVL (v_auth_date, SYSDATE),          --v_dt
    --                                            NVL (   v_description
    --                                                    || ' / '
    --                                                    || v_clmrg_claim_no
    --                                                    || ' / '
    --                                                    || v_trans_no,
    --                                                    'GIS CLAIMS TRANSACTIONS VOUCHER'
    --                                                    ),         --v_description
    --                                            i.cpv_voucher_no,                         --v_ref
    --                                            v_user_code,                --v_raised_by
    --                                            i.cmb_cur_code,               --v_cur_code
    --                                            vgl_trans,                  --v_trans
    --                                            v_trans_no,             --v_trans code
    --                                            null,
    --                                            v_exch_rate
    --                                           );                             --v_ref3
    --
    --             fms_interfaces_pkg.post_je (vgl_code, v_user_code);
    --           END IF;
    --             v_rec_count := 1;
    --      END LOOP;
    --
    --      IF v_rec_count <= 0
    --      THEN
    --         raise_application_error
    --                       (-20001,
    --                           'XOL GL ENTRIES NOT CREATED FOR CLAIM # '
    --                        || v_clmrg_claim_no
    --                       );
    --      END IF;
    --   END;
    PROCEDURE process_clm_pymt_xol (
        v_clmrg_claim_no      VARCHAR2,
        v_trans_no            NUMBER,
        v_user_name           VARCHAR2,
        v_auth_date        IN DATE DEFAULT TRUNC (SYSDATE))
    IS
        --v_cmb_claim_no          NUMBER;
        vgl_trans               fms_vouchers_pkg.tgl_rec_type;
        v_user_code             NUMBER;
        exc_user_error          EXCEPTION;
        v_brh_name              VARCHAR2 (100);
        v_trnt_gl_code          VARCHAR2 (20);
        v_trnt_contra_gl_code   VARCHAR2 (20);
        v_trnt_code             VARCHAR2 (20);
        v_cqr_source            NUMBER;
        v_rec_count             NUMBER := 0;
        v_org_code              NUMBER;
        v_exch_rate             NUMBER;
        v_rnd                   NUMBER;
        v_bcur_rnd              NUMBER;
        v_paymnt_brh_code       NUMBER;
        v_lvl                   VARCHAR2 (15);
        rev_type                VARCHAR2 (15);
        vgl_code                NUMBER;
        v_description           VARCHAR2 (25) := 'CLAIM XOL RECOVERY';
        v_drcr                  VARCHAR2 (1);

        CURSOR c_claim IS
            SELECT gin_clm_payment_vouchers.cpv_cmb_claim_no,
                   gin_clm_payment_vouchers.cpv_voucher_no,
                   gin_clm_payment_vouchers.cpv_date,
                   gin_clm_payment_vouchers.cpv_authorised,
                   gin_clm_payment_vouchers.cpv_authorised_by,
                   cpv_authorised_dt,
                   gin_clm_payment_vouchers.cpv_amount,
                   gin_clm_payment_vouchers.cpv_payee,
                   gin_clm_payment_vouchers.cpv_raise_by,
                   gin_claim_master_bookings.cmb_cur_code,
                   gin_claim_master_bookings.cmb_brn_code,
                   gin_clm_payment_vouchers.cpv_drcr_no,
                   cpv_comp_retention,
                   cpv_man_amount,
                   cpv_quota_amount,
                   cpv_fstsup_amount,
                   cpv_secsup_amount,
                   cpv_facre_amount,
                   SUBSTR (cpv_tran_type, 0, 2)     cpv_tran_type,
                   gin_claim_master_bookings.cmb_scl_code,
                   cpv_vat_amnt,
                   cpv_whtx_amnt,
                   cpv_net_paid,
                   cpv_agnt_agent_code,
                   cpv_account_type,
                   cpv_tran_type                    cpv_tran_types
              FROM gin_claim_master_bookings, gin_clm_payment_vouchers
             WHERE     cmb_claim_no = cpv_cmb_claim_no
                   AND cmb_claim_no = v_clmrg_claim_no
                   AND --CPV_AUTHORISED = 'Y' AND
                       cpv_ggt_trans_no = v_trans_no;


        CURSOR cur_xol_recovery_trans IS
            SELECT NVL (cxtd_amt_to_cede, 0)
                       gross_amt,
                   DECODE (xolp_part_type,
                           'D', xolp_agnt_agent_code,
                           'B', xolp_br_agn_code)
                       xolp_agnt_agent_code,
                   xolp_agnt_agent_code
                       agn_code,
                   DECODE (xolp_part_type,
                           'D', xolp_agnt_sht_desc,
                           'B', xolp_br_agn_sht_desc)
                       xolp_agnt_sht_desc,
                   xolp_rate,
                   xolp_gl_account,
                   cxtd_scl_code,
                   xols_cur_code,
                   xol_code,
                   (xolp_rate / 100 * NVL (cxtd_amt_to_cede, 0))
                       part_amount,
                   cxtd_clm_no,
                   cxtd_authorized
              FROM gin_claim_xol_treaty_details,
                   gin_xol_treaty_setups,
                   gin_xol_participants,
                   gin_xol_treaties
             WHERE     cxtd_xols_code = xols_code
                   AND cxtd_xol_code = xol_code
                   AND xolp_xols_code = xols_code
                   AND xols_xol_code = xol_code
                   AND cxtd_ggt_trans_no = v_trans_no
                   AND cxtd_authorized = 'N'
                   AND CXTD_CLM_NO = v_clmrg_claim_no;
    BEGIN
        v_user_code := fms_interfaces_pkg.get_usercode (UPPER (v_user_name));

        IF v_user_code IS NULL
        THEN
            RAISE exc_user_error;
        END IF;


        v_rec_count := -1;

        FOR i IN c_claim
        LOOP
            v_cqr_source := fms_interfaces_pkg.systemcode ('GIS');
            v_org_code := fms_interfaces_pkg.get_org (i.cmb_brn_code);
            v_paymnt_brh_code := (i.cmb_brn_code);
            v_brh_name :=
                fms_interfaces_pkg.brh_name (v_paymnt_brh_code, 'S');
            v_exch_rate :=
                get_currexch_rate (I.cmb_cur_code, v_rnd, v_bcur_rnd);

            IF i.cpv_tran_type = 'CF'
            THEN
                rev_type := 'CF';
            ELSE
                rev_type := 'CP';
            END IF;

            --**************************** Update Facultative Revision Amount***************************
            FOR cur_xol_rec IN cur_xol_recovery_trans
            LOOP
                v_lvl := 'XOL';

                --RAISE_ERROR('#################@@@@@@@@@@@%%%%%%%%%%%%'||cur_xol_rec.cxtd_authorized);
                BEGIN
                    gin_interfaces_pkg.get_gl_acct_code (
                        rev_type,                   --v_trnt_type IN VARCHAR2,
                        i.cmb_scl_code,                --v_scl_code IN NUMBER,
                        v_lvl,                   --     v_app_lvl IN VARCHAR2,
                        NULL,        --          v_btr_trans_code IN VARCHAR2,
                        NULL,
                        --          v_frgn_or_local IN VARCHAR2, ---F for foreign and L for Local
                        v_trnt_code,     --          v_trnt_code OUT VARCHAR2,
                        v_trnt_gl_code, --          v_trnt_gl_code OUT VARCHAR2,
                        v_trnt_contra_gl_code--          v_trnt_contra_gl_code OUT VARCHAR2
                                             );
                    check_valid_gl_acc (v_trnt_gl_code,
                                        v_org_code,
                                        v_paymnt_brh_code,
                                        v_brh_name,
                                        v_trnt_code,
                                        i.cmb_scl_code);
                --                Get_Gl_Code (rev_type,i.cmb_scl_code, v_lvl,v_trnt_code, v_trnt_gl_code,v_trnt_contra_gl_code);
                --               v_trnt_contra_gl_code :=
                --                               fms_interfaces_pkg.sl_control_acc ('GIS', 'XOL');
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        raise_error (
                               'Claim Payment XOL Out Revenue Item for  Sub Class '
                            || i.cmb_scl_code
                            || ' is not defined..');
                END;

                --   RAISE_ERROR(v_trnt_gl_code||';'||v_trnt_contra_gl_code||';'||cur_xol_rec.xolp_gl_account);
                --  IF v_trnt_contra_gl_code IS NULL THEN
                v_trnt_contra_gl_code := cur_xol_rec.xolp_gl_account;

                --  END IF;

                IF (ROUND (NVL (cur_xol_rec.part_amount, 0), v_bcur_rnd)) <>
                   0
                THEN
                    IF SIGN (NVL (cur_xol_rec.part_amount, 0)) = 1
                    THEN
                        v_drcr := 'C';
                    ELSE
                        v_drcr := 'D';
                    END IF;

                    v_rec_count := v_rec_count + 2;

                    BEGIN
                        fms_vouchers_pkg.append_gl_trans (
                            v_rec_count,
                            'CLAIM CR ' || v_trnt_code,          --v_narrative
                            ABS (
                                ROUND (NVL (cur_xol_rec.part_amount, 0),
                                       v_bcur_rnd)),                --v_amount
                            v_drcr,                                   --v_drcr
                            v_trnt_gl_code,                       --v_account1
                            v_trnt_contra_gl_code,
                            --i.GLTRAN_CONTRA_ACC,--v_account2
                            v_paymnt_brh_code,                      --v_branch
                            vgl_trans);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            raise_application_error (
                                -20026,
                                   'ERROR POSTING GL TRANS FOR '
                                || v_trnt_code
                                || ':- '
                                || SQLERRM (SQLCODE));
                    END;
                END IF;
            END LOOP;

            --            RAISE_ERROR('#################@@@@@@@@@@@%%%%%%%%%%%%'||v_rec_count);
            --************************************************************
            IF NVL (v_rec_count, 0) <> -1
            THEN
                --          RAISE_ERROR('#################@@@@@@@@@@@%%%%%%%%%%%%'||v_rec_count);
                vgl_code :=
                    fms_interfaces_pkg.update_vgl (
                        'GIS CLAIMS TRANS',                --v_btc_description
                        'JV',                                     --v_btc_type
                        v_paymnt_brh_code,                        --v_brh_code
                        NVL (v_auth_date, SYSDATE),                     --v_dt
                        NVL (
                               v_description
                            || ' / '
                            || v_clmrg_claim_no
                            || ' / '
                            || v_trans_no,
                            'GIS CLAIMS TRANSACTIONS VOUCHER'), --v_description
                        i.cpv_voucher_no,                              --v_ref
                        v_user_code,                             --v_raised_by
                        i.cmb_cur_code,                           --v_cur_code
                        vgl_trans,                                   --v_trans
                        v_trans_no,                             --v_trans code
                        NULL,
                        v_exch_rate);                                 --v_ref3

                fms_interfaces_pkg.post_je (vgl_code, v_user_code);
            END IF;

            v_rec_count := 1;
        END LOOP;

        IF v_rec_count <= 0
        THEN
            raise_application_error (
                -20001,
                'XOL GL ENTRIES NOT CREATED FOR CLAIM # ' || v_clmrg_claim_no);
        END IF;
    END;
END;
/
